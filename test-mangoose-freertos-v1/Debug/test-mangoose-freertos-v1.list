
test-mangoose-freertos-v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022460  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000051f4  08022660  08022660  00023660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027854  08027854  000292d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08027854  08027854  00028854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802785c  0802785c  000292d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802785c  0802785c  0002885c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08027860  08027860  00028860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000198  20000000  08027864  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000198  080279fc  00029198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000238  08027a9c  00029238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000065bc  200002d8  08027b3c  000292d8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20006894  08027b3c  00029894  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000292d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004380f  00000000  00000000  00029306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a371  00000000  00000000  0006cb15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002fc8  00000000  00000000  00076e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000025e3  00000000  00000000  00079e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003f810  00000000  00000000  0007c433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00047bc3  00000000  00000000  000bbc43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012ef92  00000000  00000000  00103806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00232798  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d130  00000000  00000000  002327dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  0023f90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002d8 	.word	0x200002d8
 800021c:	00000000 	.word	0x00000000
 8000220:	08022648 	.word	0x08022648

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002dc 	.word	0x200002dc
 800023c:	08022648 	.word	0x08022648

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000324:	f000 b988 	b.w	8000638 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	468e      	mov	lr, r1
 8000348:	4604      	mov	r4, r0
 800034a:	4688      	mov	r8, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d962      	bls.n	800041c <__udivmoddi4+0xdc>
 8000356:	fab2 f682 	clz	r6, r2
 800035a:	b14e      	cbz	r6, 8000370 <__udivmoddi4+0x30>
 800035c:	f1c6 0320 	rsb	r3, r6, #32
 8000360:	fa01 f806 	lsl.w	r8, r1, r6
 8000364:	fa20 f303 	lsr.w	r3, r0, r3
 8000368:	40b7      	lsls	r7, r6
 800036a:	ea43 0808 	orr.w	r8, r3, r8
 800036e:	40b4      	lsls	r4, r6
 8000370:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fbb8 f1fe 	udiv	r1, r8, lr
 800037c:	0c23      	lsrs	r3, r4, #16
 800037e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000382:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000386:	fb01 f20c 	mul.w	r2, r1, ip
 800038a:	429a      	cmp	r2, r3
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038e:	18fb      	adds	r3, r7, r3
 8000390:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000394:	f080 80ea 	bcs.w	800056c <__udivmoddi4+0x22c>
 8000398:	429a      	cmp	r2, r3
 800039a:	f240 80e7 	bls.w	800056c <__udivmoddi4+0x22c>
 800039e:	3902      	subs	r1, #2
 80003a0:	443b      	add	r3, r7
 80003a2:	1a9a      	subs	r2, r3, r2
 80003a4:	b2a3      	uxth	r3, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b6:	459c      	cmp	ip, r3
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x8e>
 80003ba:	18fb      	adds	r3, r7, r3
 80003bc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003c0:	f080 80d6 	bcs.w	8000570 <__udivmoddi4+0x230>
 80003c4:	459c      	cmp	ip, r3
 80003c6:	f240 80d3 	bls.w	8000570 <__udivmoddi4+0x230>
 80003ca:	443b      	add	r3, r7
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d2:	eba3 030c 	sub.w	r3, r3, ip
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40f3      	lsrs	r3, r6
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xb6>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb0>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa2>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x14c>
 80003fe:	4573      	cmp	r3, lr
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xc8>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 8105 	bhi.w	8000612 <__udivmoddi4+0x2d2>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb6e 0203 	sbc.w	r2, lr, r3
 800040e:	2001      	movs	r0, #1
 8000410:	4690      	mov	r8, r2
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e5      	beq.n	80003e2 <__udivmoddi4+0xa2>
 8000416:	e9c5 4800 	strd	r4, r8, [r5]
 800041a:	e7e2      	b.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	2a00      	cmp	r2, #0
 800041e:	f000 8090 	beq.w	8000542 <__udivmoddi4+0x202>
 8000422:	fab2 f682 	clz	r6, r2
 8000426:	2e00      	cmp	r6, #0
 8000428:	f040 80a4 	bne.w	8000574 <__udivmoddi4+0x234>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000434:	b280      	uxth	r0, r0
 8000436:	b2bc      	uxth	r4, r7
 8000438:	2101      	movs	r1, #1
 800043a:	fbb2 fcfe 	udiv	ip, r2, lr
 800043e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000442:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000446:	fb04 f20c 	mul.w	r2, r4, ip
 800044a:	429a      	cmp	r2, r3
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x11e>
 800044e:	18fb      	adds	r3, r7, r3
 8000450:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x11c>
 8000456:	429a      	cmp	r2, r3
 8000458:	f200 80e0 	bhi.w	800061c <__udivmoddi4+0x2dc>
 800045c:	46c4      	mov	ip, r8
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	fbb3 f2fe 	udiv	r2, r3, lr
 8000464:	fb0e 3312 	mls	r3, lr, r2, r3
 8000468:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800046c:	fb02 f404 	mul.w	r4, r2, r4
 8000470:	429c      	cmp	r4, r3
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x144>
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x142>
 800047c:	429c      	cmp	r4, r3
 800047e:	f200 80ca 	bhi.w	8000616 <__udivmoddi4+0x2d6>
 8000482:	4602      	mov	r2, r0
 8000484:	1b1b      	subs	r3, r3, r4
 8000486:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x98>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa0e f401 	lsl.w	r4, lr, r1
 800049c:	fa20 f306 	lsr.w	r3, r0, r6
 80004a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004a8:	4323      	orrs	r3, r4
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	fa1f fc87 	uxth.w	ip, r7
 80004b2:	fbbe f0f9 	udiv	r0, lr, r9
 80004b6:	0c1c      	lsrs	r4, r3, #16
 80004b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d909      	bls.n	80004e0 <__udivmoddi4+0x1a0>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004d2:	f080 809c 	bcs.w	800060e <__udivmoddi4+0x2ce>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f240 8099 	bls.w	800060e <__udivmoddi4+0x2ce>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	eba4 040e 	sub.w	r4, r4, lr
 80004e4:	fa1f fe83 	uxth.w	lr, r3
 80004e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ec:	fb09 4413 	mls	r4, r9, r3, r4
 80004f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004f8:	45a4      	cmp	ip, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x1ce>
 80004fc:	193c      	adds	r4, r7, r4
 80004fe:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000502:	f080 8082 	bcs.w	800060a <__udivmoddi4+0x2ca>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d97f      	bls.n	800060a <__udivmoddi4+0x2ca>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000512:	eba4 040c 	sub.w	r4, r4, ip
 8000516:	fba0 ec02 	umull	lr, ip, r0, r2
 800051a:	4564      	cmp	r4, ip
 800051c:	4673      	mov	r3, lr
 800051e:	46e1      	mov	r9, ip
 8000520:	d362      	bcc.n	80005e8 <__udivmoddi4+0x2a8>
 8000522:	d05f      	beq.n	80005e4 <__udivmoddi4+0x2a4>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x1fe>
 8000526:	ebb8 0203 	subs.w	r2, r8, r3
 800052a:	eb64 0409 	sbc.w	r4, r4, r9
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	fa22 f301 	lsr.w	r3, r2, r1
 8000536:	431e      	orrs	r6, r3
 8000538:	40cc      	lsrs	r4, r1
 800053a:	e9c5 6400 	strd	r6, r4, [r5]
 800053e:	2100      	movs	r1, #0
 8000540:	e74f      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000542:	fbb1 fcf2 	udiv	ip, r1, r2
 8000546:	0c01      	lsrs	r1, r0, #16
 8000548:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800054c:	b280      	uxth	r0, r0
 800054e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000552:	463b      	mov	r3, r7
 8000554:	4638      	mov	r0, r7
 8000556:	463c      	mov	r4, r7
 8000558:	46b8      	mov	r8, r7
 800055a:	46be      	mov	lr, r7
 800055c:	2620      	movs	r6, #32
 800055e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000562:	eba2 0208 	sub.w	r2, r2, r8
 8000566:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800056a:	e766      	b.n	800043a <__udivmoddi4+0xfa>
 800056c:	4601      	mov	r1, r0
 800056e:	e718      	b.n	80003a2 <__udivmoddi4+0x62>
 8000570:	4610      	mov	r0, r2
 8000572:	e72c      	b.n	80003ce <__udivmoddi4+0x8e>
 8000574:	f1c6 0220 	rsb	r2, r6, #32
 8000578:	fa2e f302 	lsr.w	r3, lr, r2
 800057c:	40b7      	lsls	r7, r6
 800057e:	40b1      	lsls	r1, r6
 8000580:	fa20 f202 	lsr.w	r2, r0, r2
 8000584:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000588:	430a      	orrs	r2, r1
 800058a:	fbb3 f8fe 	udiv	r8, r3, lr
 800058e:	b2bc      	uxth	r4, r7
 8000590:	fb0e 3318 	mls	r3, lr, r8, r3
 8000594:	0c11      	lsrs	r1, r2, #16
 8000596:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059a:	fb08 f904 	mul.w	r9, r8, r4
 800059e:	40b0      	lsls	r0, r6
 80005a0:	4589      	cmp	r9, r1
 80005a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005a6:	b280      	uxth	r0, r0
 80005a8:	d93e      	bls.n	8000628 <__udivmoddi4+0x2e8>
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80005b0:	d201      	bcs.n	80005b6 <__udivmoddi4+0x276>
 80005b2:	4589      	cmp	r9, r1
 80005b4:	d81f      	bhi.n	80005f6 <__udivmoddi4+0x2b6>
 80005b6:	eba1 0109 	sub.w	r1, r1, r9
 80005ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80005be:	fb09 f804 	mul.w	r8, r9, r4
 80005c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005c6:	b292      	uxth	r2, r2
 80005c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005cc:	4542      	cmp	r2, r8
 80005ce:	d229      	bcs.n	8000624 <__udivmoddi4+0x2e4>
 80005d0:	18ba      	adds	r2, r7, r2
 80005d2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005d6:	d2c4      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005d8:	4542      	cmp	r2, r8
 80005da:	d2c2      	bcs.n	8000562 <__udivmoddi4+0x222>
 80005dc:	f1a9 0102 	sub.w	r1, r9, #2
 80005e0:	443a      	add	r2, r7
 80005e2:	e7be      	b.n	8000562 <__udivmoddi4+0x222>
 80005e4:	45f0      	cmp	r8, lr
 80005e6:	d29d      	bcs.n	8000524 <__udivmoddi4+0x1e4>
 80005e8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005f0:	3801      	subs	r0, #1
 80005f2:	46e1      	mov	r9, ip
 80005f4:	e796      	b.n	8000524 <__udivmoddi4+0x1e4>
 80005f6:	eba7 0909 	sub.w	r9, r7, r9
 80005fa:	4449      	add	r1, r9
 80005fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000600:	fbb1 f9fe 	udiv	r9, r1, lr
 8000604:	fb09 f804 	mul.w	r8, r9, r4
 8000608:	e7db      	b.n	80005c2 <__udivmoddi4+0x282>
 800060a:	4673      	mov	r3, lr
 800060c:	e77f      	b.n	800050e <__udivmoddi4+0x1ce>
 800060e:	4650      	mov	r0, sl
 8000610:	e766      	b.n	80004e0 <__udivmoddi4+0x1a0>
 8000612:	4608      	mov	r0, r1
 8000614:	e6fd      	b.n	8000412 <__udivmoddi4+0xd2>
 8000616:	443b      	add	r3, r7
 8000618:	3a02      	subs	r2, #2
 800061a:	e733      	b.n	8000484 <__udivmoddi4+0x144>
 800061c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000620:	443b      	add	r3, r7
 8000622:	e71c      	b.n	800045e <__udivmoddi4+0x11e>
 8000624:	4649      	mov	r1, r9
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x222>
 8000628:	eba1 0109 	sub.w	r1, r1, r9
 800062c:	46c4      	mov	ip, r8
 800062e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000632:	fb09 f804 	mul.w	r8, r9, r4
 8000636:	e7c4      	b.n	80005c2 <__udivmoddi4+0x282>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	4a07      	ldr	r2, [pc, #28]	@ (8000668 <vApplicationGetIdleTaskMemory+0x2c>)
 800064c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	4a06      	ldr	r2, [pc, #24]	@ (800066c <vApplicationGetIdleTaskMemory+0x30>)
 8000652:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800065a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	200002f4 	.word	0x200002f4
 800066c:	20000394 	.word	0x20000394

08000670 <usb_printf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void usb_printf(const char *fmt, ...) {
 8000670:	b40f      	push	{r0, r1, r2, r3}
 8000672:	b580      	push	{r7, lr}
 8000674:	b0c2      	sub	sp, #264	@ 0x108
 8000676:	af00      	add	r7, sp, #0
	char buffer[256];  // adjust size if needed
	va_list args;
	va_start(args, fmt);
 8000678:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 800067c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000684:	601a      	str	r2, [r3, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800068a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800068e:	1d38      	adds	r0, r7, #4
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000696:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800069a:	f020 ff8f 	bl	80215bc <vsniprintf>
	va_end(args);

	uint8_t result;
	do {
		result = CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff fdd7 	bl	8000254 <strlen>
 80006a6:	4603      	mov	r3, r0
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4611      	mov	r1, r2
 80006ae:	4618      	mov	r0, r3
 80006b0:	f01f ffea 	bl	8020688 <CDC_Transmit_FS>
 80006b4:	4603      	mov	r3, r0
 80006b6:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
		if (result == USBD_BUSY) {
 80006ba:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d102      	bne.n	80006c8 <usb_printf+0x58>
			osDelay(1); // wait a millisecond and retry
 80006c2:	2001      	movs	r0, #1
 80006c4:	f00a f9f4 	bl	800aab0 <osDelay>
		}
	} while (result == USBD_BUSY);
 80006c8:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d0e6      	beq.n	800069e <usb_printf+0x2e>
}
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80006d8:	46bd      	mov	sp, r7
 80006da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006de:	b004      	add	sp, #16
 80006e0:	4770      	bx	lr
	...

080006e4 <httpd_cgi_handler>:
//
//}


void httpd_cgi_handler(struct fs_file *file, const char *uri, int iNumParams,
		char **pcParam, char **pcValue) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
 80006f0:	603b      	str	r3, [r7, #0]
	(void) file;  // not used
	(void) iNumParams;

	// Example: handle /role request
	if (strcmp(uri, "/role") == 0) {
 80006f2:	4909      	ldr	r1, [pc, #36]	@ (8000718 <httpd_cgi_handler+0x34>)
 80006f4:	68b8      	ldr	r0, [r7, #8]
 80006f6:	f7ff fda3 	bl	8000240 <strcmp>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d103      	bne.n	8000708 <httpd_cgi_handler+0x24>

		printf("[httpd_cgi_handler] /role\r\n");
 8000700:	4806      	ldr	r0, [pc, #24]	@ (800071c <httpd_cgi_handler+0x38>)
 8000702:	f020 febf 	bl	8021484 <puts>
	} else printf("[httpd_cgi_handler] not /role\r\n");

	return;
 8000706:	e003      	b.n	8000710 <httpd_cgi_handler+0x2c>
	} else printf("[httpd_cgi_handler] not /role\r\n");
 8000708:	4805      	ldr	r0, [pc, #20]	@ (8000720 <httpd_cgi_handler+0x3c>)
 800070a:	f020 febb 	bl	8021484 <puts>
	return;
 800070e:	bf00      	nop
}
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	08022660 	.word	0x08022660
 800071c:	08022668 	.word	0x08022668
 8000720:	08022684 	.word	0x08022684

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b5b0      	push	{r4, r5, r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072a:	f000 fdda 	bl	80012e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072e:	f000 f81f 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000732:	f000 f8e7 	bl	8000904 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000736:	f000 f8b5 	bl	80008a4 <MX_USART3_UART_Init>
  MX_RTC_Init();
 800073a:	f000 f88d 	bl	8000858 <MX_RTC_Init>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of MongooseTask */
  osThreadDef(MongooseTask, StartMongooseTask, osPriorityNormal, 0, 256);
 800073e:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <main+0x44>)
 8000740:	1d3c      	adds	r4, r7, #4
 8000742:	461d      	mov	r5, r3
 8000744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000748:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800074c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MongooseTaskHandle = osThreadCreate(osThread(MongooseTask), NULL);
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f00a f953 	bl	800aa00 <osThreadCreate>
 800075a:	4603      	mov	r3, r0
 800075c:	4a03      	ldr	r2, [pc, #12]	@ (800076c <main+0x48>)
 800075e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000760:	f00a f937 	bl	800a9d2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <main+0x40>
 8000768:	080226b4 	.word	0x080226b4
 800076c:	2000083c 	.word	0x2000083c

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	@ 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	2234      	movs	r2, #52	@ 0x34
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f020 ffe8 	bl	8021754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000794:	f003 fdaa 	bl	80042ec <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000798:	4b2d      	ldr	r3, [pc, #180]	@ (8000850 <SystemClock_Config+0xe0>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079c:	4a2c      	ldr	r2, [pc, #176]	@ (8000850 <SystemClock_Config+0xe0>)
 800079e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000850 <SystemClock_Config+0xe0>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007b0:	4b28      	ldr	r3, [pc, #160]	@ (8000854 <SystemClock_Config+0xe4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007b8:	4a26      	ldr	r2, [pc, #152]	@ (8000854 <SystemClock_Config+0xe4>)
 80007ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b24      	ldr	r3, [pc, #144]	@ (8000854 <SystemClock_Config+0xe4>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007cc:	2309      	movs	r3, #9
 80007ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007d0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007d6:	2301      	movs	r3, #1
 80007d8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007da:	2302      	movs	r3, #2
 80007dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007e4:	2304      	movs	r3, #4
 80007e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80007e8:	2360      	movs	r3, #96	@ 0x60
 80007ea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f0:	2304      	movs	r3, #4
 80007f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4618      	mov	r0, r3
 80007fe:	f003 fdd5 	bl	80043ac <HAL_RCC_OscConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000808:	f000 f9f0 	bl	8000bec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800080c:	f003 fd7e 	bl	800430c <HAL_PWREx_EnableOverDrive>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000816:	f000 f9e9 	bl	8000bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	230f      	movs	r3, #15
 800081c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2302      	movs	r3, #2
 8000820:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000826:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800082a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	2103      	movs	r1, #3
 8000836:	4618      	mov	r0, r3
 8000838:	f004 f866 	bl	8004908 <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000842:	f000 f9d3 	bl	8000bec <Error_Handler>
  }
}
 8000846:	bf00      	nop
 8000848:	3750      	adds	r7, #80	@ 0x50
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800
 8000854:	40007000 	.word	0x40007000

08000858 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_RTC_Init+0x44>)
 800085e:	4a10      	ldr	r2, [pc, #64]	@ (80008a0 <MX_RTC_Init+0x48>)
 8000860:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_RTC_Init+0x44>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_RTC_Init+0x44>)
 800086a:	227f      	movs	r2, #127	@ 0x7f
 800086c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <MX_RTC_Init+0x44>)
 8000870:	22ff      	movs	r2, #255	@ 0xff
 8000872:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_RTC_Init+0x44>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <MX_RTC_Init+0x44>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_RTC_Init+0x44>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_RTC_Init+0x44>)
 8000888:	f004 febe 	bl	8005608 <HAL_RTC_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000892:	f000 f9ab 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000794 	.word	0x20000794
 80008a0:	40002800 	.word	0x40002800

080008a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008a8:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008aa:	4a15      	ldr	r2, [pc, #84]	@ (8000900 <MX_USART3_UART_Init+0x5c>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008ae:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_USART3_UART_Init+0x58>)
 80008e8:	f005 fa60 	bl	8005dac <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008f2:	f000 f97b 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200007b4 	.word	0x200007b4
 8000900:	40004800 	.word	0x40004800

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	@ 0x30
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	4b47      	ldr	r3, [pc, #284]	@ (8000a38 <MX_GPIO_Init+0x134>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a46      	ldr	r2, [pc, #280]	@ (8000a38 <MX_GPIO_Init+0x134>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b44      	ldr	r3, [pc, #272]	@ (8000a38 <MX_GPIO_Init+0x134>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	61bb      	str	r3, [r7, #24]
 8000930:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	4b41      	ldr	r3, [pc, #260]	@ (8000a38 <MX_GPIO_Init+0x134>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a40      	ldr	r2, [pc, #256]	@ (8000a38 <MX_GPIO_Init+0x134>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a38 <MX_GPIO_Init+0x134>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a38 <MX_GPIO_Init+0x134>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a3a      	ldr	r2, [pc, #232]	@ (8000a38 <MX_GPIO_Init+0x134>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b38      	ldr	r3, [pc, #224]	@ (8000a38 <MX_GPIO_Init+0x134>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	4b35      	ldr	r3, [pc, #212]	@ (8000a38 <MX_GPIO_Init+0x134>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a34      	ldr	r2, [pc, #208]	@ (8000a38 <MX_GPIO_Init+0x134>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b32      	ldr	r3, [pc, #200]	@ (8000a38 <MX_GPIO_Init+0x134>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a38 <MX_GPIO_Init+0x134>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a2e      	ldr	r2, [pc, #184]	@ (8000a38 <MX_GPIO_Init+0x134>)
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b2c      	ldr	r3, [pc, #176]	@ (8000a38 <MX_GPIO_Init+0x134>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000992:	4b29      	ldr	r3, [pc, #164]	@ (8000a38 <MX_GPIO_Init+0x134>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a28      	ldr	r2, [pc, #160]	@ (8000a38 <MX_GPIO_Init+0x134>)
 8000998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b26      	ldr	r3, [pc, #152]	@ (8000a38 <MX_GPIO_Init+0x134>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009b0:	4822      	ldr	r0, [pc, #136]	@ (8000a3c <MX_GPIO_Init+0x138>)
 80009b2:	f002 f9f7 	bl	8002da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2140      	movs	r1, #64	@ 0x40
 80009ba:	4821      	ldr	r0, [pc, #132]	@ (8000a40 <MX_GPIO_Init+0x13c>)
 80009bc:	f002 f9f2 	bl	8002da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	481b      	ldr	r0, [pc, #108]	@ (8000a44 <MX_GPIO_Init+0x140>)
 80009d8:	f002 f838 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009dc:	f244 0381 	movw	r3, #16513	@ 0x4081
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4811      	ldr	r0, [pc, #68]	@ (8000a3c <MX_GPIO_Init+0x138>)
 80009f6:	f002 f829 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009fa:	2340      	movs	r3, #64	@ 0x40
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480b      	ldr	r0, [pc, #44]	@ (8000a40 <MX_GPIO_Init+0x13c>)
 8000a12:	f002 f81b 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a16:	2380      	movs	r3, #128	@ 0x80
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <MX_GPIO_Init+0x13c>)
 8000a2a:	f002 f80f 	bl	8002a4c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a2e:	bf00      	nop
 8000a30:	3730      	adds	r7, #48	@ 0x30
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020400 	.word	0x40020400
 8000a40:	40021800 	.word	0x40021800
 8000a44:	40020800 	.word	0x40020800

08000a48 <StartMongooseTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMongooseTask */
void StartMongooseTask(void const * argument)
{
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b099      	sub	sp, #100	@ 0x64
 8000a4c:	af04      	add	r7, sp, #16
 8000a4e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a50:	f007 f9c0 	bl	8007dd4 <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000a54:	f01f fd5a 	bl	802050c <MX_USB_DEVICE_Init>
	/* Infinite loop */

	/* USER CODE BEGIN 5 */
	// wait for LWIP to be on (probably should be changed..?)
	// osDelay(1000);
	while (netif_default == NULL || !netif_is_up(netif_default)
 8000a58:	e002      	b.n	8000a60 <StartMongooseTask+0x18>
			|| !ip4_addr_isany_val(*netif_ip4_addr(netif_default))
	// || netif_is_link_up(netif_list) == 0
	) {
		osDelay(100);
 8000a5a:	2064      	movs	r0, #100	@ 0x64
 8000a5c:	f00a f828 	bl	800aab0 <osDelay>
	while (netif_default == NULL || !netif_is_up(netif_default)
 8000a60:	4b50      	ldr	r3, [pc, #320]	@ (8000ba4 <StartMongooseTask+0x15c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
			|| !ip4_addr_isany_val(*netif_ip4_addr(netif_default))
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d0f8      	beq.n	8000a5a <StartMongooseTask+0x12>
	while (netif_default == NULL || !netif_is_up(netif_default)
 8000a68:	4b4e      	ldr	r3, [pc, #312]	@ (8000ba4 <StartMongooseTask+0x15c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0f0      	beq.n	8000a5a <StartMongooseTask+0x12>
			|| !ip4_addr_isany_val(*netif_ip4_addr(netif_default))
 8000a78:	4b4a      	ldr	r3, [pc, #296]	@ (8000ba4 <StartMongooseTask+0x15c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d1ea      	bne.n	8000a5a <StartMongooseTask+0x12>
		// LOG("inside while");
	}

	char buf[64];
	ip4_addr_t ip = *netif_ip4_addr(netif_default);
 8000a84:	4b47      	ldr	r3, [pc, #284]	@ (8000ba4 <StartMongooseTask+0x15c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	60bb      	str	r3, [r7, #8]
	sprintf(buf, "IP acquired: %u.%u.%u.%u", ip4_addr1(&ip), ip4_addr2(&ip),
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4619      	mov	r1, r3
 8000a96:	f107 0308 	add.w	r3, r7, #8
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	461c      	mov	r4, r3
			ip4_addr3(&ip), ip4_addr4(&ip));
 8000aa0:	f107 0308 	add.w	r3, r7, #8
 8000aa4:	3302      	adds	r3, #2
 8000aa6:	781b      	ldrb	r3, [r3, #0]
	sprintf(buf, "IP acquired: %u.%u.%u.%u", ip4_addr1(&ip), ip4_addr2(&ip),
 8000aa8:	461a      	mov	r2, r3
			ip4_addr3(&ip), ip4_addr4(&ip));
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	3303      	adds	r3, #3
 8000ab0:	781b      	ldrb	r3, [r3, #0]
	sprintf(buf, "IP acquired: %u.%u.%u.%u", ip4_addr1(&ip), ip4_addr2(&ip),
 8000ab2:	f107 000c 	add.w	r0, r7, #12
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	9200      	str	r2, [sp, #0]
 8000aba:	4623      	mov	r3, r4
 8000abc:	460a      	mov	r2, r1
 8000abe:	493a      	ldr	r1, [pc, #232]	@ (8000ba8 <StartMongooseTask+0x160>)
 8000ac0:	f020 fce8 	bl	8021494 <siprintf>
	LOG(buf);
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4838      	ldr	r0, [pc, #224]	@ (8000bac <StartMongooseTask+0x164>)
 8000acc:	f7ff fdd0 	bl	8000670 <usb_printf>

	extern struct dhcp_state_enum_t;

	struct dhcp *dhcp_client = netif_dhcp_data(netif_default);
 8000ad0:	4b34      	ldr	r3, [pc, #208]	@ (8000ba4 <StartMongooseTask+0x15c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	while (dhcp_client == NULL || dhcp_client->state != 10) {
 8000ad8:	e002      	b.n	8000ae0 <StartMongooseTask+0x98>
		osDelay(100);
 8000ada:	2064      	movs	r0, #100	@ 0x64
 8000adc:	f009 ffe8 	bl	800aab0 <osDelay>
	while (dhcp_client == NULL || dhcp_client->state != 10) {
 8000ae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d0f9      	beq.n	8000ada <StartMongooseTask+0x92>
 8000ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ae8:	795b      	ldrb	r3, [r3, #5]
 8000aea:	2b0a      	cmp	r3, #10
 8000aec:	d1f5      	bne.n	8000ada <StartMongooseTask+0x92>
		// safe to read IP
	}

	LOG("OUTSIDE");
 8000aee:	4930      	ldr	r1, [pc, #192]	@ (8000bb0 <StartMongooseTask+0x168>)
 8000af0:	482e      	ldr	r0, [pc, #184]	@ (8000bac <StartMongooseTask+0x164>)
 8000af2:	f7ff fdbd 	bl	8000670 <usb_printf>
	printf("outside 2\r\n");
 8000af6:	482f      	ldr	r0, [pc, #188]	@ (8000bb4 <StartMongooseTask+0x16c>)
 8000af8:	f020 fcc4 	bl	8021484 <puts>

	err_t err;
	ip = *netif_ip4_addr(netif_default);
 8000afc:	4b29      	ldr	r3, [pc, #164]	@ (8000ba4 <StartMongooseTask+0x15c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	3304      	adds	r3, #4
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60bb      	str	r3, [r7, #8]
	sprintf(buf, "IP acquired: %u.%u.%u.%u", ip4_addr1(&ip), ip4_addr2(&ip),
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f107 0308 	add.w	r3, r7, #8
 8000b12:	3301      	adds	r3, #1
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	461c      	mov	r4, r3
			ip4_addr3(&ip), ip4_addr4(&ip));
 8000b18:	f107 0308 	add.w	r3, r7, #8
 8000b1c:	3302      	adds	r3, #2
 8000b1e:	781b      	ldrb	r3, [r3, #0]
	sprintf(buf, "IP acquired: %u.%u.%u.%u", ip4_addr1(&ip), ip4_addr2(&ip),
 8000b20:	461a      	mov	r2, r3
			ip4_addr3(&ip), ip4_addr4(&ip));
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	3303      	adds	r3, #3
 8000b28:	781b      	ldrb	r3, [r3, #0]
	sprintf(buf, "IP acquired: %u.%u.%u.%u", ip4_addr1(&ip), ip4_addr2(&ip),
 8000b2a:	f107 000c 	add.w	r0, r7, #12
 8000b2e:	9301      	str	r3, [sp, #4]
 8000b30:	9200      	str	r2, [sp, #0]
 8000b32:	4623      	mov	r3, r4
 8000b34:	460a      	mov	r2, r1
 8000b36:	491c      	ldr	r1, [pc, #112]	@ (8000ba8 <StartMongooseTask+0x160>)
 8000b38:	f020 fcac 	bl	8021494 <siprintf>
	LOG(buf);
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	4619      	mov	r1, r3
 8000b42:	481a      	ldr	r0, [pc, #104]	@ (8000bac <StartMongooseTask+0x164>)
 8000b44:	f7ff fd94 	bl	8000670 <usb_printf>

	LOG("mdns_resp_init starting");
 8000b48:	491b      	ldr	r1, [pc, #108]	@ (8000bb8 <StartMongooseTask+0x170>)
 8000b4a:	4818      	ldr	r0, [pc, #96]	@ (8000bac <StartMongooseTask+0x164>)
 8000b4c:	f7ff fd90 	bl	8000670 <usb_printf>
	mdns_resp_init();
 8000b50:	f011 fd06 	bl	8012560 <mdns_resp_init>

	mdns_resp_add_netif(netif_default, "222", 3600);
 8000b54:	4b13      	ldr	r3, [pc, #76]	@ (8000ba4 <StartMongooseTask+0x15c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8000b5c:	4917      	ldr	r1, [pc, #92]	@ (8000bbc <StartMongooseTask+0x174>)
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f011 faea 	bl	8012138 <mdns_resp_add_netif>

	mdns_resp_add_service(netif_default, "222", "_speakerlink", DNSSD_PROTO_TCP,
 8000b64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <StartMongooseTask+0x15c>)
 8000b66:	6818      	ldr	r0, [r3, #0]
 8000b68:	2300      	movs	r3, #0
 8000b6a:	9303      	str	r3, [sp, #12]
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	9302      	str	r3, [sp, #8]
 8000b70:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8000b74:	9301      	str	r3, [sp, #4]
 8000b76:	2350      	movs	r3, #80	@ 0x50
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	4a10      	ldr	r2, [pc, #64]	@ (8000bc0 <StartMongooseTask+0x178>)
 8000b7e:	490f      	ldr	r1, [pc, #60]	@ (8000bbc <StartMongooseTask+0x174>)
 8000b80:	f011 fb76 	bl	8012270 <mdns_resp_add_service>
			80, 3600, NULL, NULL);

	mdns_resp_announce(netif_default);  // 🔹 actively broadcast the service
 8000b84:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <StartMongooseTask+0x15c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f011 fc63 	bl	8012454 <mdns_resp_announce>
	LOG("mdns_resp_announce finished");
 8000b8e:	490d      	ldr	r1, [pc, #52]	@ (8000bc4 <StartMongooseTask+0x17c>)
 8000b90:	4806      	ldr	r0, [pc, #24]	@ (8000bac <StartMongooseTask+0x164>)
 8000b92:	f7ff fd6d 	bl	8000670 <usb_printf>

	httpd_init();
 8000b96:	f00e fe23 	bl	800f7e0 <httpd_init>

	// Main event loop
	for (;;) {
//		mg_mgr_poll(&mgr, 10);   // 10 ms polling
		osDelay(1);              // Yield to other FreeRTOS tasks
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f009 ff88 	bl	800aab0 <osDelay>
 8000ba0:	e7fb      	b.n	8000b9a <StartMongooseTask+0x152>
 8000ba2:	bf00      	nop
 8000ba4:	20004be0 	.word	0x20004be0
 8000ba8:	080226d0 	.word	0x080226d0
 8000bac:	080226ec 	.word	0x080226ec
 8000bb0:	080226f4 	.word	0x080226f4
 8000bb4:	080226fc 	.word	0x080226fc
 8000bb8:	08022708 	.word	0x08022708
 8000bbc:	08022720 	.word	0x08022720
 8000bc0:	08022724 	.word	0x08022724
 8000bc4:	08022734 	.word	0x08022734

08000bc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d101      	bne.n	8000bde <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000bda:	f000 fb8f 	bl	80012fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40001000 	.word	0x40001000

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <Error_Handler+0x8>

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	4a10      	ldr	r2, [pc, #64]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c22:	4b08      	ldr	r3, [pc, #32]	@ (8000c44 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	210f      	movs	r1, #15
 8000c32:	f06f 0001 	mvn.w	r0, #1
 8000c36:	f000 fc69 	bl	800150c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800

08000c48 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b0a6      	sub	sp, #152	@ 0x98
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c50:	f107 0308 	add.w	r3, r7, #8
 8000c54:	2290      	movs	r2, #144	@ 0x90
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f020 fd7b 	bl	8021754 <memset>
  if(hrtc->Instance==RTC)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a0e      	ldr	r2, [pc, #56]	@ (8000c9c <HAL_RTC_MspInit+0x54>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d114      	bne.n	8000c92 <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c68:	2320      	movs	r3, #32
 8000c6a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c70:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	4618      	mov	r0, r3
 8000c78:	f004 f89e 	bl	8004db8 <HAL_RCCEx_PeriphCLKConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000c82:	f7ff ffb3 	bl	8000bec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <HAL_RTC_MspInit+0x58>)
 8000c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000c8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ca0 <HAL_RTC_MspInit+0x58>)
 8000c8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c90:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000c92:	bf00      	nop
 8000c94:	3798      	adds	r7, #152	@ 0x98
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40002800 	.word	0x40002800
 8000ca0:	40023800 	.word	0x40023800

08000ca4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b0ae      	sub	sp, #184	@ 0xb8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2290      	movs	r2, #144	@ 0x90
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f020 fd45 	bl	8021754 <memset>
  if(huart->Instance==USART3)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a22      	ldr	r2, [pc, #136]	@ (8000d58 <HAL_UART_MspInit+0xb4>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d13c      	bne.n	8000d4e <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000cd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cd8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f004 f868 	bl	8004db8 <HAL_RCCEx_PeriphCLKConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cee:	f7ff ff7d 	bl	8000bec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <HAL_UART_MspInit+0xb8>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf6:	4a19      	ldr	r2, [pc, #100]	@ (8000d5c <HAL_UART_MspInit+0xb8>)
 8000cf8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cfe:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <HAL_UART_MspInit+0xb8>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0a:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <HAL_UART_MspInit+0xb8>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a13      	ldr	r2, [pc, #76]	@ (8000d5c <HAL_UART_MspInit+0xb8>)
 8000d10:	f043 0308 	orr.w	r3, r3, #8
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <HAL_UART_MspInit+0xb8>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0308 	and.w	r3, r3, #8
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d22:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d3c:	2307      	movs	r3, #7
 8000d3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d42:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d46:	4619      	mov	r1, r3
 8000d48:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <HAL_UART_MspInit+0xbc>)
 8000d4a:	f001 fe7f 	bl	8002a4c <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000d4e:	bf00      	nop
 8000d50:	37b8      	adds	r7, #184	@ 0xb8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40004800 	.word	0x40004800
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020c00 	.word	0x40020c00

08000d64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08e      	sub	sp, #56	@ 0x38
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d74:	4b33      	ldr	r3, [pc, #204]	@ (8000e44 <HAL_InitTick+0xe0>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d78:	4a32      	ldr	r2, [pc, #200]	@ (8000e44 <HAL_InitTick+0xe0>)
 8000d7a:	f043 0310 	orr.w	r3, r3, #16
 8000d7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d80:	4b30      	ldr	r3, [pc, #192]	@ (8000e44 <HAL_InitTick+0xe0>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d84:	f003 0310 	and.w	r3, r3, #16
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d8c:	f107 0210 	add.w	r2, r7, #16
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4611      	mov	r1, r2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 ffdc 	bl	8004d54 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d9c:	6a3b      	ldr	r3, [r7, #32]
 8000d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d103      	bne.n	8000dae <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000da6:	f003 ffad 	bl	8004d04 <HAL_RCC_GetPCLK1Freq>
 8000daa:	6378      	str	r0, [r7, #52]	@ 0x34
 8000dac:	e004      	b.n	8000db8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dae:	f003 ffa9 	bl	8004d04 <HAL_RCC_GetPCLK1Freq>
 8000db2:	4603      	mov	r3, r0
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dba:	4a23      	ldr	r2, [pc, #140]	@ (8000e48 <HAL_InitTick+0xe4>)
 8000dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc0:	0c9b      	lsrs	r3, r3, #18
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dc6:	4b21      	ldr	r3, [pc, #132]	@ (8000e4c <HAL_InitTick+0xe8>)
 8000dc8:	4a21      	ldr	r2, [pc, #132]	@ (8000e50 <HAL_InitTick+0xec>)
 8000dca:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e4c <HAL_InitTick+0xe8>)
 8000dce:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dd2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8000e4c <HAL_InitTick+0xe8>)
 8000dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dd8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dda:	4b1c      	ldr	r3, [pc, #112]	@ (8000e4c <HAL_InitTick+0xe8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e4c <HAL_InitTick+0xe8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de6:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <HAL_InitTick+0xe8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000dec:	4817      	ldr	r0, [pc, #92]	@ (8000e4c <HAL_InitTick+0xe8>)
 8000dee:	f004 fd0f 	bl	8005810 <HAL_TIM_Base_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000df8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d11b      	bne.n	8000e38 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e00:	4812      	ldr	r0, [pc, #72]	@ (8000e4c <HAL_InitTick+0xe8>)
 8000e02:	f004 fd67 	bl	80058d4 <HAL_TIM_Base_Start_IT>
 8000e06:	4603      	mov	r3, r0
 8000e08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d111      	bne.n	8000e38 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e14:	2036      	movs	r0, #54	@ 0x36
 8000e16:	f000 fb95 	bl	8001544 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	d808      	bhi.n	8000e32 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	2036      	movs	r0, #54	@ 0x36
 8000e26:	f000 fb71 	bl	800150c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e54 <HAL_InitTick+0xf0>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6013      	str	r3, [r2, #0]
 8000e30:	e002      	b.n	8000e38 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3738      	adds	r7, #56	@ 0x38
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40023800 	.word	0x40023800
 8000e48:	431bde83 	.word	0x431bde83
 8000e4c:	20000840 	.word	0x20000840
 8000e50:	40001000 	.word	0x40001000
 8000e54:	20000004 	.word	0x20000004

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <NMI_Handler+0x4>

08000e60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <HardFault_Handler+0x4>

08000e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <MemManage_Handler+0x4>

08000e70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e94:	4802      	ldr	r0, [pc, #8]	@ (8000ea0 <TIM6_DAC_IRQHandler+0x10>)
 8000e96:	f004 fd95 	bl	80059c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000840 	.word	0x20000840

08000ea4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */
//////////////
	  // ETH_IRQHandler_Mongoose();

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ea8:	4802      	ldr	r0, [pc, #8]	@ (8000eb4 <ETH_IRQHandler+0x10>)
 8000eaa:	f000 fee7 	bl	8001c7c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */
//////////////
  /* USER CODE END ETH_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200008f0 	.word	0x200008f0

08000eb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <OTG_FS_IRQHandler+0x10>)
 8000ebe:	f002 f8c2 	bl	8003046 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20006268 	.word	0x20006268

08000ecc <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
	return 1;
 8000ed0:	2301      	movs	r3, #1
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <_kill>:

int _kill(int pid, int sig) {
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8000ee6:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <_kill+0x20>)
 8000ee8:	2216      	movs	r2, #22
 8000eea:	601a      	str	r2, [r3, #0]
	return -1;
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	2000688c 	.word	0x2000688c

08000f00 <_exit>:

void _exit(int status) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ffe5 	bl	8000edc <_kill>
	while (1) {
 8000f12:	bf00      	nop
 8000f14:	e7fd      	b.n	8000f12 <_exit+0x12>

08000f16 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	60f8      	str	r0, [r7, #12]
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	e00a      	b.n	8000f3e <_read+0x28>
		*ptr++ = __io_getchar();
 8000f28:	f3af 8000 	nop.w
 8000f2c:	4601      	mov	r1, r0
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	1c5a      	adds	r2, r3, #1
 8000f32:	60ba      	str	r2, [r7, #8]
 8000f34:	b2ca      	uxtb	r2, r1
 8000f36:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	dbf0      	blt.n	8000f28 <_read+0x12>
	}

	return len;
 8000f46:	687b      	ldr	r3, [r7, #4]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
//  }
//  return len;

	uint8_t result;
	do {
		result = CDC_Transmit_FS((uint8_t*) ptr, len);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	4619      	mov	r1, r3
 8000f62:	68b8      	ldr	r0, [r7, #8]
 8000f64:	f01f fb90 	bl	8020688 <CDC_Transmit_FS>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	75fb      	strb	r3, [r7, #23]
		if (result == USBD_BUSY) {
 8000f6c:	7dfb      	ldrb	r3, [r7, #23]
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d102      	bne.n	8000f78 <_write+0x28>
			osDelay(1);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f009 fd9c 	bl	800aab0 <osDelay>
		}
	} while (result == USBD_BUSY);
 8000f78:	7dfb      	ldrb	r3, [r7, #23]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d0ee      	beq.n	8000f5c <_write+0xc>

	return len;
 8000f7e:	687b      	ldr	r3, [r7, #4]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <_close>:

int _close(int file) {
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <_fstat>:

int _fstat(int file, struct stat *st) {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fb0:	605a      	str	r2, [r3, #4]
	return 0;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <_isatty>:

int _isatty(int file) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8000fc8:	2301      	movs	r3, #1
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8000fd6:	b480      	push	{r7}
 8000fd8:	b085      	sub	sp, #20
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60f8      	str	r0, [r7, #12]
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff8:	4a14      	ldr	r2, [pc, #80]	@ (800104c <_sbrk+0x5c>)
 8000ffa:	4b15      	ldr	r3, [pc, #84]	@ (8001050 <_sbrk+0x60>)
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001004:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <_sbrk+0x64>)
 800100e:	4a12      	ldr	r2, [pc, #72]	@ (8001058 <_sbrk+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	d205      	bcs.n	800102c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001020:	4b0e      	ldr	r3, [pc, #56]	@ (800105c <_sbrk+0x6c>)
 8001022:	220c      	movs	r2, #12
 8001024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800102a:	e009      	b.n	8001040 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800102c:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001032:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	4a06      	ldr	r2, [pc, #24]	@ (8001054 <_sbrk+0x64>)
 800103c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800103e:	68fb      	ldr	r3, [r7, #12]
}
 8001040:	4618      	mov	r0, r3
 8001042:	371c      	adds	r7, #28
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	20080000 	.word	0x20080000
 8001050:	00000400 	.word	0x00000400
 8001054:	2000088c 	.word	0x2000088c
 8001058:	20006898 	.word	0x20006898
 800105c:	2000688c 	.word	0x2000688c

08001060 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001064:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <SystemInit+0x20>)
 8001066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800106a:	4a05      	ldr	r2, [pc, #20]	@ (8001080 <SystemInit+0x20>)
 800106c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001070:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001084:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001088:	f7ff ffea 	bl	8001060 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800108c:	480c      	ldr	r0, [pc, #48]	@ (80010c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800108e:	490d      	ldr	r1, [pc, #52]	@ (80010c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001090:	4a0d      	ldr	r2, [pc, #52]	@ (80010c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001094:	e002      	b.n	800109c <LoopCopyDataInit>

08001096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109a:	3304      	adds	r3, #4

0800109c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800109c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a0:	d3f9      	bcc.n	8001096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a2:	4a0a      	ldr	r2, [pc, #40]	@ (80010cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010a4:	4c0a      	ldr	r4, [pc, #40]	@ (80010d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a8:	e001      	b.n	80010ae <LoopFillZerobss>

080010aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ac:	3204      	adds	r2, #4

080010ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b0:	d3fb      	bcc.n	80010aa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010b2:	f020 fc41 	bl	8021938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b6:	f7ff fb35 	bl	8000724 <main>
  bx  lr    
 80010ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010bc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c4:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 80010c8:	08027864 	.word	0x08027864
  ldr r2, =_sbss
 80010cc:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 80010d0:	20006894 	.word	0x20006894

080010d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC_IRQHandler>

080010d6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00b      	beq.n	80010fe <LAN8742_RegisterBusIO+0x28>
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d007      	beq.n	80010fe <LAN8742_RegisterBusIO+0x28>
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <LAN8742_RegisterBusIO+0x28>
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d102      	bne.n	8001104 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001102:	e014      	b.n	800112e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685a      	ldr	r2, [r3, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	68da      	ldr	r2, [r3, #12]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	691a      	ldr	r2, [r3, #16]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d139      	bne.n	80011ca <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d002      	beq.n	8001164 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2220      	movs	r2, #32
 8001168:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	e01c      	b.n	80011aa <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	f107 020c 	add.w	r2, r7, #12
 8001178:	2112      	movs	r1, #18
 800117a:	6978      	ldr	r0, [r7, #20]
 800117c:	4798      	blx	r3
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	da03      	bge.n	800118c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001184:	f06f 0304 	mvn.w	r3, #4
 8001188:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800118a:	e00b      	b.n	80011a4 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 031f 	and.w	r3, r3, #31
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	429a      	cmp	r2, r3
 8001196:	d105      	bne.n	80011a4 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
         break;
 80011a2:	e005      	b.n	80011b0 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	3301      	adds	r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	2b1f      	cmp	r3, #31
 80011ae:	d9df      	bls.n	8001170 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b1f      	cmp	r3, #31
 80011b6:	d902      	bls.n	80011be <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80011b8:	f06f 0302 	mvn.w	r3, #2
 80011bc:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2201      	movs	r2, #1
 80011c8:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80011ca:	693b      	ldr	r3, [r7, #16]
 }
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	6810      	ldr	r0, [r2, #0]
 80011e8:	f107 020c 	add.w	r2, r7, #12
 80011ec:	2101      	movs	r1, #1
 80011ee:	4798      	blx	r3
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	da02      	bge.n	80011fc <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80011f6:	f06f 0304 	mvn.w	r3, #4
 80011fa:	e06e      	b.n	80012da <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	6810      	ldr	r0, [r2, #0]
 8001204:	f107 020c 	add.w	r2, r7, #12
 8001208:	2101      	movs	r1, #1
 800120a:	4798      	blx	r3
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	da02      	bge.n	8001218 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001212:	f06f 0304 	mvn.w	r3, #4
 8001216:	e060      	b.n	80012da <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001222:	2301      	movs	r3, #1
 8001224:	e059      	b.n	80012da <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	6810      	ldr	r0, [r2, #0]
 800122e:	f107 020c 	add.w	r2, r7, #12
 8001232:	2100      	movs	r1, #0
 8001234:	4798      	blx	r3
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	da02      	bge.n	8001242 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800123c:	f06f 0304 	mvn.w	r3, #4
 8001240:	e04b      	b.n	80012da <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d11b      	bne.n	8001284 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d006      	beq.n	8001264 <LAN8742_GetLinkState+0x90>
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001260:	2302      	movs	r3, #2
 8001262:	e03a      	b.n	80012da <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800126e:	2303      	movs	r3, #3
 8001270:	e033      	b.n	80012da <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800127c:	2304      	movs	r3, #4
 800127e:	e02c      	b.n	80012da <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001280:	2305      	movs	r3, #5
 8001282:	e02a      	b.n	80012da <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	6810      	ldr	r0, [r2, #0]
 800128c:	f107 020c 	add.w	r2, r7, #12
 8001290:	211f      	movs	r1, #31
 8001292:	4798      	blx	r3
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	da02      	bge.n	80012a0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800129a:	f06f 0304 	mvn.w	r3, #4
 800129e:	e01c      	b.n	80012da <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80012aa:	2306      	movs	r3, #6
 80012ac:	e015      	b.n	80012da <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f003 031c 	and.w	r3, r3, #28
 80012b4:	2b18      	cmp	r3, #24
 80012b6:	d101      	bne.n	80012bc <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80012b8:	2302      	movs	r3, #2
 80012ba:	e00e      	b.n	80012da <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 031c 	and.w	r3, r3, #28
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d101      	bne.n	80012ca <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e007      	b.n	80012da <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f003 031c 	and.w	r3, r3, #28
 80012d0:	2b14      	cmp	r3, #20
 80012d2:	d101      	bne.n	80012d8 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80012d4:	2304      	movs	r3, #4
 80012d6:	e000      	b.n	80012da <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80012d8:	2305      	movs	r3, #5
    }
  }
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e6:	2003      	movs	r0, #3
 80012e8:	f000 f905 	bl	80014f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ec:	200f      	movs	r0, #15
 80012ee:	f7ff fd39 	bl	8000d64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f2:	f7ff fc81 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_IncTick+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_IncTick+0x24>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a04      	ldr	r2, [pc, #16]	@ (8001320 <HAL_IncTick+0x24>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000008 	.word	0x20000008
 8001320:	20000890 	.word	0x20000890

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b03      	ldr	r3, [pc, #12]	@ (8001338 <HAL_GetTick+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000890 	.word	0x20000890

0800133c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001344:	f7ff ffee 	bl	8001324 <HAL_GetTick>
 8001348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001354:	d005      	beq.n	8001362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001356:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <HAL_Delay+0x44>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001362:	bf00      	nop
 8001364:	f7ff ffde 	bl	8001324 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	429a      	cmp	r2, r3
 8001372:	d8f7      	bhi.n	8001364 <HAL_Delay+0x28>
  {
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000008 	.word	0x20000008

08001384 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8001388:	4b03      	ldr	r3, [pc, #12]	@ (8001398 <HAL_GetREVID+0x14>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	0c1b      	lsrs	r3, r3, #16
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e0042000 	.word	0xe0042000

0800139c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <__NVIC_SetPriorityGrouping+0x40>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013b8:	4013      	ands	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ca:	4a04      	ldr	r2, [pc, #16]	@ (80013dc <__NVIC_SetPriorityGrouping+0x40>)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	60d3      	str	r3, [r2, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00
 80013e0:	05fa0000 	.word	0x05fa0000

080013e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e8:	4b04      	ldr	r3, [pc, #16]	@ (80013fc <__NVIC_GetPriorityGrouping+0x18>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	f003 0307 	and.w	r3, r3, #7
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db0b      	blt.n	800142a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	f003 021f 	and.w	r2, r3, #31
 8001418:	4907      	ldr	r1, [pc, #28]	@ (8001438 <__NVIC_EnableIRQ+0x38>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	2001      	movs	r0, #1
 8001422:	fa00 f202 	lsl.w	r2, r0, r2
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100

0800143c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db0a      	blt.n	8001466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	@ (8001488 <__NVIC_SetPriority+0x4c>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	440b      	add	r3, r1
 8001460:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001464:	e00a      	b.n	800147c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4908      	ldr	r1, [pc, #32]	@ (800148c <__NVIC_SetPriority+0x50>)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3b04      	subs	r3, #4
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	440b      	add	r3, r1
 800147a:	761a      	strb	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	@ 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
         );
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	@ 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ff4c 	bl	800139c <__NVIC_SetPriorityGrouping>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800151e:	f7ff ff61 	bl	80013e4 <__NVIC_GetPriorityGrouping>
 8001522:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	6978      	ldr	r0, [r7, #20]
 800152a:	f7ff ffb1 	bl	8001490 <NVIC_EncodePriority>
 800152e:	4602      	mov	r2, r0
 8001530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff80 	bl	800143c <__NVIC_SetPriority>
}
 800153c:	bf00      	nop
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ff54 	bl	8001400 <__NVIC_EnableIRQ>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e086      	b.n	8001680 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001578:	2b00      	cmp	r3, #0
 800157a:	d106      	bne.n	800158a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2220      	movs	r2, #32
 8001580:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f006 ff93 	bl	80084b0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	4b3f      	ldr	r3, [pc, #252]	@ (8001688 <HAL_ETH_Init+0x128>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800158e:	4a3e      	ldr	r2, [pc, #248]	@ (8001688 <HAL_ETH_Init+0x128>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001594:	6453      	str	r3, [r2, #68]	@ 0x44
 8001596:	4b3c      	ldr	r3, [pc, #240]	@ (8001688 <HAL_ETH_Init+0x128>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800159a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80015a2:	4b3a      	ldr	r3, [pc, #232]	@ (800168c <HAL_ETH_Init+0x12c>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	4a39      	ldr	r2, [pc, #228]	@ (800168c <HAL_ETH_Init+0x12c>)
 80015a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80015ac:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80015ae:	4b37      	ldr	r3, [pc, #220]	@ (800168c <HAL_ETH_Init+0x12c>)
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	4935      	ldr	r1, [pc, #212]	@ (800168c <HAL_ETH_Init+0x12c>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80015bc:	4b33      	ldr	r3, [pc, #204]	@ (800168c <HAL_ETH_Init+0x12c>)
 80015be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015d8:	f7ff fea4 	bl	8001324 <HAL_GetTick>
 80015dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80015de:	e011      	b.n	8001604 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80015e0:	f7ff fea0 	bl	8001324 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015ee:	d909      	bls.n	8001604 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2204      	movs	r2, #4
 80015f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	22e0      	movs	r2, #224	@ 0xe0
 80015fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e03d      	b.n	8001680 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1e4      	bne.n	80015e0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 ff5c 	bl	80024d4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f001 f807 	bl	8002630 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f001 f85d 	bl	80026e2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	461a      	mov	r2, r3
 800162e:	2100      	movs	r1, #0
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 ffc5 	bl	80025c0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001644:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b0f      	ldr	r3, [pc, #60]	@ (8001690 <HAL_ETH_Init+0x130>)
 8001654:	430b      	orrs	r3, r1
 8001656:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800166a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2210      	movs	r2, #16
 800167a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40023800 	.word	0x40023800
 800168c:	40013800 	.word	0x40013800
 8001690:	00020060 	.word	0x00020060

08001694 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80016a2:	2b10      	cmp	r3, #16
 80016a4:	d15f      	bne.n	8001766 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2220      	movs	r2, #32
 80016aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2204      	movs	r2, #4
 80016b8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f9f6 	bl	8001aac <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016c8:	2001      	movs	r0, #1
 80016ca:	f7ff fe37 	bl	800133c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6812      	ldr	r2, [r2, #0]
 80016e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016ec:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001704:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 fd80 	bl	800220c <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f042 0208 	orr.w	r2, r2, #8
 800171a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001724:	2001      	movs	r0, #1
 8001726:	f7ff fe09 	bl	800133c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f042 0204 	orr.w	r2, r2, #4
 8001740:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800174a:	69d9      	ldr	r1, [r3, #28]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b07      	ldr	r3, [pc, #28]	@ (8001770 <HAL_ETH_Start_IT+0xdc>)
 8001752:	430b      	orrs	r3, r1
 8001754:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001758:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2240      	movs	r2, #64	@ 0x40
 800175e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	e000      	b.n	8001768 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
  }
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	0001a0c1 	.word	0x0001a0c1

08001774 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001782:	2b40      	cmp	r3, #64	@ 0x40
 8001784:	d16e      	bne.n	8001864 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2220      	movs	r2, #32
 800178a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001796:	69d9      	ldr	r1, [r3, #28]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b34      	ldr	r3, [pc, #208]	@ (8001870 <HAL_ETH_Stop_IT+0xfc>)
 800179e:	400b      	ands	r3, r1
 80017a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017a4:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80017b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017bc:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	f023 0302 	bic.w	r3, r3, #2
 80017d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017d4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0204 	bic.w	r2, r2, #4
 80017e4:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017ee:	2001      	movs	r0, #1
 80017f0:	f7ff fda4 	bl	800133c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 fd05 	bl	800220c <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0208 	bic.w	r2, r2, #8
 8001810:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800181a:	2001      	movs	r0, #1
 800181c:	f7ff fd8e 	bl	800133c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	e00e      	b.n	800184c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	3212      	adds	r2, #18
 8001834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001838:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d9ed      	bls.n	800182e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2210      	movs	r2, #16
 800185c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	e000      	b.n	8001866 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
  }
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	fffe5f3e 	.word	0xfffe5f3e

08001874 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d109      	bne.n	8001898 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800188a:	f043 0201 	orr.w	r2, r3, #1
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e045      	b.n	8001924 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800189e:	2b40      	cmp	r3, #64	@ 0x40
 80018a0:	d13f      	bne.n	8001922 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80018aa:	2201      	movs	r2, #1
 80018ac:	6839      	ldr	r1, [r7, #0]
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 ff86 	bl	80027c0 <ETH_Prepare_Tx_Descriptors>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d009      	beq.n	80018ce <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018c0:	f043 0202 	orr.w	r2, r3, #2
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e02a      	b.n	8001924 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018ce:	f3bf 8f4f 	dsb	sy
}
 80018d2:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d904      	bls.n	80018f0 <HAL_ETH_Transmit_IT+0x7c>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ea:	1f1a      	subs	r2, r3, #4
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	f003 0304 	and.w	r3, r3, #4
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00d      	beq.n	800191e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800190a:	461a      	mov	r2, r3
 800190c:	2304      	movs	r3, #4
 800190e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001918:	461a      	mov	r2, r3
 800191a:	2300      	movs	r3, #0
 800191c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e000      	b.n	8001924 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
  }
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d109      	bne.n	8001958 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800194a:	f043 0201 	orr.w	r2, r3, #1
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0a4      	b.n	8001aa2 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800195e:	2b40      	cmp	r3, #64	@ 0x40
 8001960:	d001      	beq.n	8001966 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e09d      	b.n	8001aa2 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800196a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	3212      	adds	r2, #18
 8001972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001976:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800197c:	f1c3 0304 	rsb	r3, r3, #4
 8001980:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001982:	e066      	b.n	8001a52 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800198c:	2b00      	cmp	r3, #0
 800198e:	d007      	beq.n	80019a0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	69da      	ldr	r2, [r3, #28]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	699a      	ldr	r2, [r3, #24]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d103      	bne.n	80019b4 <HAL_ETH_ReadData+0x88>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d03c      	beq.n	8001a2e <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	0c1b      	lsrs	r3, r3, #16
 80019d2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80019d6:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80019ec:	2301      	movs	r3, #1
 80019ee:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001a08:	461a      	mov	r2, r3
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	f006 ff1b 	bl	8008848 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	441a      	add	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3301      	adds	r3, #1
 8001a32:	61fb      	str	r3, [r7, #28]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	d902      	bls.n	8001a40 <HAL_ETH_ReadData+0x114>
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3b04      	subs	r3, #4
 8001a3e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	3212      	adds	r2, #18
 8001a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	db06      	blt.n	8001a68 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d202      	bcs.n	8001a68 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001a62:	7cfb      	ldrb	r3, [r7, #19]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d08d      	beq.n	8001984 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	441a      	add	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f815 	bl	8001aac <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69fa      	ldr	r2, [r7, #28]
 8001a86:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001a88:	7cfb      	ldrb	r3, [r7, #19]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d108      	bne.n	8001aa0 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	e000      	b.n	8001aa2 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3720      	adds	r7, #32
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ac0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69fa      	ldr	r2, [r7, #28]
 8001ac6:	3212      	adds	r2, #18
 8001ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001acc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ad2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001ad4:	e042      	b.n	8001b5c <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d112      	bne.n	8001b04 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001ade:	f107 0308 	add.w	r3, r7, #8
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f006 fe80 	bl	80087e8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d102      	bne.n	8001af4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	74fb      	strb	r3, [r7, #19]
 8001af2:	e007      	b.n	8001b04 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	461a      	mov	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	461a      	mov	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001b04:	7cfb      	ldrb	r3, [r7, #19]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d028      	beq.n	8001b5c <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d106      	bne.n	8001b20 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	4b26      	ldr	r3, [pc, #152]	@ (8001bb0 <ETH_UpdateDescriptor+0x104>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	6053      	str	r3, [r2, #4]
 8001b1e:	e005      	b.n	8001b2c <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	61fb      	str	r3, [r7, #28]
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	2b03      	cmp	r3, #3
 8001b42:	d902      	bls.n	8001b4a <ETH_UpdateDescriptor+0x9e>
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	3b04      	subs	r3, #4
 8001b48:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69fa      	ldr	r2, [r7, #28]
 8001b4e:	3212      	adds	r2, #18
 8001b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b54:	617b      	str	r3, [r7, #20]
      desccount--;
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d002      	beq.n	8001b68 <ETH_UpdateDescriptor+0xbc>
 8001b62:	7cfb      	ldrb	r3, [r7, #19]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1b6      	bne.n	8001ad6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d01a      	beq.n	8001ba8 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3303      	adds	r3, #3
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b7c:	f3bf 8f5f 	dmb	sy
}
 8001b80:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6919      	ldr	r1, [r3, #16]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	18ca      	adds	r2, r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b9a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3720      	adds	r7, #32
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	80004000 	.word	0x80004000

08001bb4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3318      	adds	r3, #24
 8001bc0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bcc:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001bd2:	e047      	b.n	8001c64 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001bde:	68ba      	ldr	r2, [r7, #8]
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	3304      	adds	r3, #4
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10a      	bne.n	8001c04 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	613b      	str	r3, [r7, #16]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d902      	bls.n	8001c00 <HAL_ETH_ReleaseTxPacket+0x4c>
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	3b04      	subs	r3, #4
 8001bfe:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001c04:	7bbb      	ldrb	r3, [r7, #14]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d02c      	beq.n	8001c64 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68d9      	ldr	r1, [r3, #12]
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	440b      	add	r3, r1
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	db1f      	blt.n	8001c60 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	3304      	adds	r3, #4
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f006 fe4d 	bl	80088cc <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	3304      	adds	r3, #4
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	3301      	adds	r3, #1
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d902      	bls.n	8001c52 <HAL_ETH_ReleaseTxPacket+0x9e>
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	3b04      	subs	r3, #4
 8001c50:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c5e:	e001      	b.n	8001c64 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <HAL_ETH_ReleaseTxPacket+0xbc>
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1b1      	bne.n	8001bd4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c8a:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001ca4:	4b4b      	ldr	r3, [pc, #300]	@ (8001dd4 <HAL_ETH_IRQHandler+0x158>)
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00e      	beq.n	8001cd2 <HAL_ETH_IRQHandler+0x56>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d009      	beq.n	8001cd2 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	4b43      	ldr	r3, [pc, #268]	@ (8001dd8 <HAL_ETH_IRQHandler+0x15c>)
 8001cca:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f006 f903 	bl	8007ed8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00f      	beq.n	8001cfc <HAL_ETH_IRQHandler+0x80>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00a      	beq.n	8001cfc <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cee:	461a      	mov	r2, r3
 8001cf0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001cf4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f006 f8fe 	bl	8007ef8 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d042      	beq.n	8001d8c <HAL_ETH_IRQHandler+0x110>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d03d      	beq.n	8001d8c <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d16:	f043 0208 	orr.w	r2, r3, #8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d01a      	beq.n	8001d60 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d32:	695a      	ldr	r2, [r3, #20]
 8001d34:	4b29      	ldr	r3, [pc, #164]	@ (8001ddc <HAL_ETH_IRQHandler+0x160>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001d50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d54:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	22e0      	movs	r2, #224	@ 0xe0
 8001d5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001d5e:	e012      	b.n	8001d86 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001d6e:	4013      	ands	r3, r2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001d84:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f006 f8c6 	bl	8007f18 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00e      	beq.n	8001db4 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f81a 	bl	8001de0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001dbe:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <HAL_ETH_IRQHandler+0x158>)
 8001dc0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001dc4:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f814 	bl	8001df4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001dcc:	bf00      	nop
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40013c00 	.word	0x40013c00
 8001dd8:	00010040 	.word	0x00010040
 8001ddc:	007e2000 	.word	0x007e2000

08001de0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f003 031c 	and.w	r3, r3, #28
 8001e24:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	02db      	lsls	r3, r3, #11
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	019b      	lsls	r3, r3, #6
 8001e36:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f023 0302 	bic.w	r3, r3, #2
 8001e46:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001e58:	f7ff fa64 	bl	8001324 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e5e:	e00d      	b.n	8001e7c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001e60:	f7ff fa60 	bl	8001324 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e6e:	d301      	bcc.n	8001e74 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e010      	b.n	8001e96 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1ec      	bne.n	8001e60 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	461a      	mov	r2, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b086      	sub	sp, #24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f003 031c 	and.w	r3, r3, #28
 8001eba:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	02db      	lsls	r3, r3, #11
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	019b      	lsls	r3, r3, #6
 8001ecc:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ef8:	f7ff fa14 	bl	8001324 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001efe:	e00d      	b.n	8001f1c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001f00:	f7ff fa10 	bl	8001324 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f0e:	d301      	bcc.n	8001f14 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e009      	b.n	8001f28 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1ec      	bne.n	8001f00 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0e6      	b.n	8002112 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	bf14      	ite	ne
 8001f52:	2301      	movne	r3, #1
 8001f54:	2300      	moveq	r3, #0
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	461a      	mov	r2, r3
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bf0c      	ite	eq
 8001f7c:	2301      	moveq	r3, #1
 8001f7e:	2300      	movne	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	bf14      	ite	ne
 8001f98:	2301      	movne	r3, #1
 8001f9a:	2300      	moveq	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	bf0c      	ite	eq
 8001fb2:	2301      	moveq	r3, #1
 8001fb4:	2300      	movne	r3, #0
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	bf14      	ite	ne
 8001fcc:	2301      	movne	r3, #1
 8001fce:	2300      	moveq	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	bf0c      	ite	eq
 8002002:	2301      	moveq	r3, #1
 8002004:	2300      	movne	r3, #0
 8002006:	b2db      	uxtb	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf0c      	ite	eq
 800201c:	2301      	moveq	r3, #1
 800201e:	2300      	movne	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002032:	2b00      	cmp	r3, #0
 8002034:	bf14      	ite	ne
 8002036:	2301      	movne	r3, #1
 8002038:	2300      	moveq	r3, #0
 800203a:	b2db      	uxtb	r3, r3
 800203c:	461a      	mov	r2, r3
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205a:	2b00      	cmp	r3, #0
 800205c:	bf14      	ite	ne
 800205e:	2301      	movne	r3, #1
 8002060:	2300      	moveq	r3, #0
 8002062:	b2db      	uxtb	r3, r3
 8002064:	461a      	mov	r2, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	bf14      	ite	ne
 8002078:	2301      	movne	r3, #1
 800207a:	2300      	moveq	r3, #0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	461a      	mov	r2, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	bf14      	ite	ne
 8002092:	2301      	movne	r3, #1
 8002094:	2300      	moveq	r3, #0
 8002096:	b2db      	uxtb	r3, r3
 8002098:	461a      	mov	r2, r3
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	bf0c      	ite	eq
 80020ae:	2301      	moveq	r3, #1
 80020b0:	2300      	movne	r3, #0
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	0c1b      	lsrs	r3, r3, #16
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80020fe:	2b00      	cmp	r3, #0
 8002100:	bf14      	ite	ne
 8002102:	2301      	movne	r3, #1
 8002104:	2300      	moveq	r3, #0
 8002106:	b2db      	uxtb	r3, r3
 8002108:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e00b      	b.n	800214a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002138:	2b10      	cmp	r3, #16
 800213a:	d105      	bne.n	8002148 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800213c:	6839      	ldr	r1, [r7, #0]
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f88a 	bl	8002258 <ETH_SetMACConfig>

    return HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	e000      	b.n	800214a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
  }
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f023 031c 	bic.w	r3, r3, #28
 800216a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800216c:	f002 fdbe 	bl	8004cec <HAL_RCC_GetHCLKFreq>
 8002170:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	4a14      	ldr	r2, [pc, #80]	@ (80021c8 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d804      	bhi.n	8002184 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f043 0308 	orr.w	r3, r3, #8
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	e019      	b.n	80021b8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	4a11      	ldr	r2, [pc, #68]	@ (80021cc <HAL_ETH_SetMDIOClockRange+0x78>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d204      	bcs.n	8002196 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f043 030c 	orr.w	r3, r3, #12
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	e010      	b.n	80021b8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	4a0d      	ldr	r2, [pc, #52]	@ (80021d0 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d90c      	bls.n	80021b8 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	4a0c      	ldr	r2, [pc, #48]	@ (80021d4 <HAL_ETH_SetMDIOClockRange+0x80>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d804      	bhi.n	80021b0 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f043 0304 	orr.w	r3, r3, #4
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	e003      	b.n	80021b8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f043 0310 	orr.w	r3, r3, #16
 80021b6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	611a      	str	r2, [r3, #16]
}
 80021c0:	bf00      	nop
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	02160ebf 	.word	0x02160ebf
 80021cc:	03938700 	.word	0x03938700
 80021d0:	05f5e0ff 	.word	0x05f5e0ff
 80021d4:	08f0d17f 	.word	0x08f0d17f

080021d8 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800222a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800222e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800223c:	2001      	movs	r0, #1
 800223e:	f7ff f87d 	bl	800133c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800224c:	6193      	str	r3, [r2, #24]
}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4b53      	ldr	r3, [pc, #332]	@ (80023bc <ETH_SetMACConfig+0x164>)
 800226e:	4013      	ands	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	7b9b      	ldrb	r3, [r3, #14]
 8002276:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	7c12      	ldrb	r2, [r2, #16]
 800227c:	2a00      	cmp	r2, #0
 800227e:	d102      	bne.n	8002286 <ETH_SetMACConfig+0x2e>
 8002280:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002284:	e000      	b.n	8002288 <ETH_SetMACConfig+0x30>
 8002286:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002288:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	7c52      	ldrb	r2, [r2, #17]
 800228e:	2a00      	cmp	r2, #0
 8002290:	d102      	bne.n	8002298 <ETH_SetMACConfig+0x40>
 8002292:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002296:	e000      	b.n	800229a <ETH_SetMACConfig+0x42>
 8002298:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800229a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80022a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	7fdb      	ldrb	r3, [r3, #31]
 80022a6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80022a8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80022ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	7f92      	ldrb	r2, [r2, #30]
 80022b4:	2a00      	cmp	r2, #0
 80022b6:	d102      	bne.n	80022be <ETH_SetMACConfig+0x66>
 80022b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022bc:	e000      	b.n	80022c0 <ETH_SetMACConfig+0x68>
 80022be:	2200      	movs	r2, #0
                        macconf->Speed |
 80022c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	7f1b      	ldrb	r3, [r3, #28]
 80022c6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022c8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022ce:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	791b      	ldrb	r3, [r3, #4]
 80022d4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80022d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022de:	2a00      	cmp	r2, #0
 80022e0:	d102      	bne.n	80022e8 <ETH_SetMACConfig+0x90>
 80022e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022e6:	e000      	b.n	80022ea <ETH_SetMACConfig+0x92>
 80022e8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022ea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	7bdb      	ldrb	r3, [r3, #15]
 80022f0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022f2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022f8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002300:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002302:	4313      	orrs	r3, r2
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800231a:	2001      	movs	r0, #1
 800231c:	f7ff f80e 	bl	800133c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002336:	4013      	ands	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800233e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002346:	2a00      	cmp	r2, #0
 8002348:	d101      	bne.n	800234e <ETH_SetMACConfig+0xf6>
 800234a:	2280      	movs	r2, #128	@ 0x80
 800234c:	e000      	b.n	8002350 <ETH_SetMACConfig+0xf8>
 800234e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002350:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002356:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800235e:	2a01      	cmp	r2, #1
 8002360:	d101      	bne.n	8002366 <ETH_SetMACConfig+0x10e>
 8002362:	2208      	movs	r2, #8
 8002364:	e000      	b.n	8002368 <ETH_SetMACConfig+0x110>
 8002366:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002368:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002370:	2a01      	cmp	r2, #1
 8002372:	d101      	bne.n	8002378 <ETH_SetMACConfig+0x120>
 8002374:	2204      	movs	r2, #4
 8002376:	e000      	b.n	800237a <ETH_SetMACConfig+0x122>
 8002378:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800237a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002382:	2a01      	cmp	r2, #1
 8002384:	d101      	bne.n	800238a <ETH_SetMACConfig+0x132>
 8002386:	2202      	movs	r2, #2
 8002388:	e000      	b.n	800238c <ETH_SetMACConfig+0x134>
 800238a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800238c:	4313      	orrs	r3, r2
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023a4:	2001      	movs	r0, #1
 80023a6:	f7fe ffc9 	bl	800133c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	619a      	str	r2, [r3, #24]
}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	fd20810f 	.word	0xfd20810f

080023c0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4b3d      	ldr	r3, [pc, #244]	@ (80024d0 <ETH_SetDMAConfig+0x110>)
 80023da:	4013      	ands	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	7b1b      	ldrb	r3, [r3, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <ETH_SetDMAConfig+0x2c>
 80023e6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80023ea:	e000      	b.n	80023ee <ETH_SetDMAConfig+0x2e>
 80023ec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	7b5b      	ldrb	r3, [r3, #13]
 80023f2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023f4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	7f52      	ldrb	r2, [r2, #29]
 80023fa:	2a00      	cmp	r2, #0
 80023fc:	d102      	bne.n	8002404 <ETH_SetDMAConfig+0x44>
 80023fe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002402:	e000      	b.n	8002406 <ETH_SetDMAConfig+0x46>
 8002404:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002406:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	7b9b      	ldrb	r3, [r3, #14]
 800240c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800240e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002414:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	7f1b      	ldrb	r3, [r3, #28]
 800241a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800241c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	7f9b      	ldrb	r3, [r3, #30]
 8002422:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002424:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800242a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002432:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002434:	4313      	orrs	r3, r2
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4313      	orrs	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002444:	461a      	mov	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002456:	2001      	movs	r0, #1
 8002458:	f7fe ff70 	bl	800133c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002464:	461a      	mov	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	791b      	ldrb	r3, [r3, #4]
 800246e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002474:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800247a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002480:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002488:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800248a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002490:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002492:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002498:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024a6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024b4:	2001      	movs	r0, #1
 80024b6:	f7fe ff41 	bl	800133c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024c2:	461a      	mov	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bf00      	nop
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	f8de3f23 	.word	0xf8de3f23

080024d4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b0a6      	sub	sp, #152	@ 0x98
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80024dc:	2301      	movs	r3, #1
 80024de:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80024e2:	2301      	movs	r3, #1
 80024e4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80024e8:	2300      	movs	r3, #0
 80024ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80024f2:	2301      	movs	r3, #1
 80024f4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80024fe:	2301      	movs	r3, #1
 8002500:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002504:	2301      	movs	r3, #1
 8002506:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800250a:	2300      	movs	r3, #0
 800250c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002516:	2300      	movs	r3, #0
 8002518:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002520:	2300      	movs	r3, #0
 8002522:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002524:	2300      	movs	r3, #0
 8002526:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800252a:	2300      	movs	r3, #0
 800252c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002530:	2300      	movs	r3, #0
 8002532:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002536:	2300      	movs	r3, #0
 8002538:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800253c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002540:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002542:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002546:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002548:	2300      	movs	r3, #0
 800254a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800254e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002552:	4619      	mov	r1, r3
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff fe7f 	bl	8002258 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800255a:	2301      	movs	r3, #1
 800255c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800255e:	2301      	movs	r3, #1
 8002560:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002562:	2301      	movs	r3, #1
 8002564:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002568:	2301      	movs	r3, #1
 800256a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002576:	2300      	movs	r3, #0
 8002578:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800257c:	2300      	movs	r3, #0
 800257e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002580:	2301      	movs	r3, #1
 8002582:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002586:	2301      	movs	r3, #1
 8002588:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800258a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800258e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002590:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002594:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002596:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800259a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800259c:	2301      	movs	r3, #1
 800259e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80025aa:	f107 0308 	add.w	r3, r7, #8
 80025ae:	4619      	mov	r1, r3
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff ff05 	bl	80023c0 <ETH_SetDMAConfig>
}
 80025b6:	bf00      	nop
 80025b8:	3798      	adds	r7, #152	@ 0x98
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
	...

080025c0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3305      	adds	r3, #5
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	021b      	lsls	r3, r3, #8
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	3204      	adds	r2, #4
 80025d8:	7812      	ldrb	r2, [r2, #0]
 80025da:	4313      	orrs	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	4b11      	ldr	r3, [pc, #68]	@ (8002628 <ETH_MACAddressConfig+0x68>)
 80025e2:	4413      	add	r3, r2
 80025e4:	461a      	mov	r2, r3
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3303      	adds	r3, #3
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	061a      	lsls	r2, r3, #24
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3302      	adds	r3, #2
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	041b      	lsls	r3, r3, #16
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3301      	adds	r3, #1
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	021b      	lsls	r3, r3, #8
 8002604:	4313      	orrs	r3, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	7812      	ldrb	r2, [r2, #0]
 800260a:	4313      	orrs	r3, r2
 800260c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	4b06      	ldr	r3, [pc, #24]	@ (800262c <ETH_MACAddressConfig+0x6c>)
 8002612:	4413      	add	r3, r2
 8002614:	461a      	mov	r2, r3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	6013      	str	r3, [r2, #0]
}
 800261a:	bf00      	nop
 800261c:	371c      	adds	r7, #28
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40028040 	.word	0x40028040
 800262c:	40028044 	.word	0x40028044

08002630 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002638:	2300      	movs	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	e03e      	b.n	80026bc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68d9      	ldr	r1, [r3, #12]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	440b      	add	r3, r1
 800264e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2200      	movs	r2, #0
 800265a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	2200      	movs	r2, #0
 8002666:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	3206      	adds	r2, #6
 8002670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d80c      	bhi.n	80026a0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68d9      	ldr	r1, [r3, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	440b      	add	r3, r1
 8002698:	461a      	mov	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	e004      	b.n	80026aa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	461a      	mov	r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	3301      	adds	r3, #1
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d9bd      	bls.n	800263e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026d4:	611a      	str	r2, [r3, #16]
}
 80026d6:	bf00      	nop
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b085      	sub	sp, #20
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	e048      	b.n	8002782 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6919      	ldr	r1, [r3, #16]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	440b      	add	r3, r1
 8002700:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2200      	movs	r2, #0
 800270c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2200      	movs	r2, #0
 800271e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2200      	movs	r2, #0
 8002724:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800272c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002746:	68b9      	ldr	r1, [r7, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	3212      	adds	r2, #18
 800274e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d80c      	bhi.n	8002772 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6919      	ldr	r1, [r3, #16]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	440b      	add	r3, r1
 800276a:	461a      	mov	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	60da      	str	r2, [r3, #12]
 8002770:	e004      	b.n	800277c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	461a      	mov	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	3301      	adds	r3, #1
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d9b3      	bls.n	80026f0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027b2:	60da      	str	r2, [r3, #12]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b091      	sub	sp, #68	@ 0x44
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	3318      	adds	r3, #24
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80027d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ea:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80027f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80027fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002802:	d007      	beq.n	8002814 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002808:	3304      	adds	r3, #4
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002814:	2302      	movs	r3, #2
 8002816:	e111      	b.n	8002a3c <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800281a:	3301      	adds	r3, #1
 800281c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800281e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002826:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	4b86      	ldr	r3, [pc, #536]	@ (8002a48 <ETH_Prepare_Tx_Descriptors+0x288>)
 800282e:	4013      	ands	r3, r2
 8002830:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002832:	6852      	ldr	r2, [r2, #4]
 8002834:	431a      	orrs	r2, r3
 8002836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002838:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d008      	beq.n	8002858 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	431a      	orrs	r2, r3
 8002854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002856:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0320 	and.w	r3, r3, #32
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	431a      	orrs	r2, r3
 8002872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002874:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0304 	and.w	r3, r3, #4
 800287e:	2b00      	cmp	r3, #0
 8002880:	d005      	beq.n	800288e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800288a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800288c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800288e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002898:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800289a:	e082      	b.n	80029a2 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800289c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80028a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028a6:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d006      	beq.n	80028bc <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80028ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80028b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	e005      	b.n	80028c8 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80028bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80028c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c6:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80028c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028ca:	3301      	adds	r3, #1
 80028cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d902      	bls.n	80028da <ETH_Prepare_Tx_Descriptors+0x11a>
 80028d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028d6:	3b04      	subs	r3, #4
 80028d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80028e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80028ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028f0:	d007      	beq.n	8002902 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80028f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028f6:	3304      	adds	r3, #4
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d029      	beq.n	8002956 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800290a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002910:	2300      	movs	r3, #0
 8002912:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002914:	e019      	b.n	800294a <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8002916:	f3bf 8f5f 	dmb	sy
}
 800291a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800291c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002926:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800292a:	3301      	adds	r3, #1
 800292c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800292e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002930:	2b03      	cmp	r3, #3
 8002932:	d902      	bls.n	800293a <ETH_Prepare_Tx_Descriptors+0x17a>
 8002934:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002936:	3b04      	subs	r3, #4
 8002938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800293e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002942:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002946:	3301      	adds	r3, #1
 8002948:	63bb      	str	r3, [r7, #56]	@ 0x38
 800294a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800294c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800294e:	429a      	cmp	r2, r3
 8002950:	d3e1      	bcc.n	8002916 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002952:	2302      	movs	r3, #2
 8002954:	e072      	b.n	8002a3c <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800295e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002960:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002964:	3301      	adds	r3, #1
 8002966:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800296e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002976:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	4b32      	ldr	r3, [pc, #200]	@ (8002a48 <ETH_Prepare_Tx_Descriptors+0x288>)
 800297e:	4013      	ands	r3, r2
 8002980:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002982:	6852      	ldr	r2, [r2, #4]
 8002984:	431a      	orrs	r2, r3
 8002986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002988:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800298a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298c:	3301      	adds	r3, #1
 800298e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002990:	f3bf 8f5f 	dmb	sy
}
 8002994:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800299e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a0:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80029a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f47f af78 	bne.w	800289c <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d006      	beq.n	80029c0 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80029b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80029ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	e005      	b.n	80029cc <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80029c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80029c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ca:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80029cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80029d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d6:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	6a3a      	ldr	r2, [r7, #32]
 80029dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e0:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80029e2:	f3bf 8f5f 	dmb	sy
}
 80029e6:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80029e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f2:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80029f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029fc:	3304      	adds	r3, #4
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	440b      	add	r3, r1
 8002a02:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a08:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a0e:	613b      	str	r3, [r7, #16]
  return(result);
 8002a10:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002a12:	61fb      	str	r3, [r7, #28]
 8002a14:	2301      	movs	r3, #1
 8002a16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f383 8810 	msr	PRIMASK, r3
}
 8002a1e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a26:	4413      	add	r3, r2
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	f383 8810 	msr	PRIMASK, r3
}
 8002a38:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3744      	adds	r7, #68	@ 0x44
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	ffffe000 	.word	0xffffe000

08002a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b089      	sub	sp, #36	@ 0x24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	e175      	b.n	8002d58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	f040 8164 	bne.w	8002d52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d005      	beq.n	8002aa2 <HAL_GPIO_Init+0x56>
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d130      	bne.n	8002b04 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	2203      	movs	r2, #3
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad8:	2201      	movs	r2, #1
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 0201 	and.w	r2, r3, #1
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d017      	beq.n	8002b40 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d123      	bne.n	8002b94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	08da      	lsrs	r2, r3, #3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3208      	adds	r2, #8
 8002b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	220f      	movs	r2, #15
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	08da      	lsrs	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3208      	adds	r2, #8
 8002b8e:	69b9      	ldr	r1, [r7, #24]
 8002b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0203 	and.w	r2, r3, #3
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80be 	beq.w	8002d52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd6:	4b66      	ldr	r3, [pc, #408]	@ (8002d70 <HAL_GPIO_Init+0x324>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bda:	4a65      	ldr	r2, [pc, #404]	@ (8002d70 <HAL_GPIO_Init+0x324>)
 8002bdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002be2:	4b63      	ldr	r3, [pc, #396]	@ (8002d70 <HAL_GPIO_Init+0x324>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002bee:	4a61      	ldr	r2, [pc, #388]	@ (8002d74 <HAL_GPIO_Init+0x328>)
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	089b      	lsrs	r3, r3, #2
 8002bf4:	3302      	adds	r3, #2
 8002bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	220f      	movs	r2, #15
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	69ba      	ldr	r2, [r7, #24]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a58      	ldr	r2, [pc, #352]	@ (8002d78 <HAL_GPIO_Init+0x32c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d037      	beq.n	8002c8a <HAL_GPIO_Init+0x23e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a57      	ldr	r2, [pc, #348]	@ (8002d7c <HAL_GPIO_Init+0x330>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d031      	beq.n	8002c86 <HAL_GPIO_Init+0x23a>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a56      	ldr	r2, [pc, #344]	@ (8002d80 <HAL_GPIO_Init+0x334>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d02b      	beq.n	8002c82 <HAL_GPIO_Init+0x236>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a55      	ldr	r2, [pc, #340]	@ (8002d84 <HAL_GPIO_Init+0x338>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d025      	beq.n	8002c7e <HAL_GPIO_Init+0x232>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a54      	ldr	r2, [pc, #336]	@ (8002d88 <HAL_GPIO_Init+0x33c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01f      	beq.n	8002c7a <HAL_GPIO_Init+0x22e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a53      	ldr	r2, [pc, #332]	@ (8002d8c <HAL_GPIO_Init+0x340>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d019      	beq.n	8002c76 <HAL_GPIO_Init+0x22a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a52      	ldr	r2, [pc, #328]	@ (8002d90 <HAL_GPIO_Init+0x344>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <HAL_GPIO_Init+0x226>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a51      	ldr	r2, [pc, #324]	@ (8002d94 <HAL_GPIO_Init+0x348>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d00d      	beq.n	8002c6e <HAL_GPIO_Init+0x222>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a50      	ldr	r2, [pc, #320]	@ (8002d98 <HAL_GPIO_Init+0x34c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d007      	beq.n	8002c6a <HAL_GPIO_Init+0x21e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a4f      	ldr	r2, [pc, #316]	@ (8002d9c <HAL_GPIO_Init+0x350>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d101      	bne.n	8002c66 <HAL_GPIO_Init+0x21a>
 8002c62:	2309      	movs	r3, #9
 8002c64:	e012      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c66:	230a      	movs	r3, #10
 8002c68:	e010      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	e00e      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c6e:	2307      	movs	r3, #7
 8002c70:	e00c      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c72:	2306      	movs	r3, #6
 8002c74:	e00a      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c76:	2305      	movs	r3, #5
 8002c78:	e008      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c7a:	2304      	movs	r3, #4
 8002c7c:	e006      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e004      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e002      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <HAL_GPIO_Init+0x240>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	f002 0203 	and.w	r2, r2, #3
 8002c92:	0092      	lsls	r2, r2, #2
 8002c94:	4093      	lsls	r3, r2
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c9c:	4935      	ldr	r1, [pc, #212]	@ (8002d74 <HAL_GPIO_Init+0x328>)
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	089b      	lsrs	r3, r3, #2
 8002ca2:	3302      	adds	r3, #2
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002caa:	4b3d      	ldr	r3, [pc, #244]	@ (8002da0 <HAL_GPIO_Init+0x354>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d003      	beq.n	8002cce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cce:	4a34      	ldr	r2, [pc, #208]	@ (8002da0 <HAL_GPIO_Init+0x354>)
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cd4:	4b32      	ldr	r3, [pc, #200]	@ (8002da0 <HAL_GPIO_Init+0x354>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cf8:	4a29      	ldr	r2, [pc, #164]	@ (8002da0 <HAL_GPIO_Init+0x354>)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cfe:	4b28      	ldr	r3, [pc, #160]	@ (8002da0 <HAL_GPIO_Init+0x354>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d22:	4a1f      	ldr	r2, [pc, #124]	@ (8002da0 <HAL_GPIO_Init+0x354>)
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d28:	4b1d      	ldr	r3, [pc, #116]	@ (8002da0 <HAL_GPIO_Init+0x354>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4013      	ands	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d4c:	4a14      	ldr	r2, [pc, #80]	@ (8002da0 <HAL_GPIO_Init+0x354>)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3301      	adds	r3, #1
 8002d56:	61fb      	str	r3, [r7, #28]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2b0f      	cmp	r3, #15
 8002d5c:	f67f ae86 	bls.w	8002a6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop
 8002d64:	3724      	adds	r7, #36	@ 0x24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40013800 	.word	0x40013800
 8002d78:	40020000 	.word	0x40020000
 8002d7c:	40020400 	.word	0x40020400
 8002d80:	40020800 	.word	0x40020800
 8002d84:	40020c00 	.word	0x40020c00
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40021400 	.word	0x40021400
 8002d90:	40021800 	.word	0x40021800
 8002d94:	40021c00 	.word	0x40021c00
 8002d98:	40022000 	.word	0x40022000
 8002d9c:	40022400 	.word	0x40022400
 8002da0:	40013c00 	.word	0x40013c00

08002da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
 8002db0:	4613      	mov	r3, r2
 8002db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002db4:	787b      	ldrb	r3, [r7, #1]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dba:	887a      	ldrh	r2, [r7, #2]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002dc0:	e003      	b.n	8002dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002dc2:	887b      	ldrh	r3, [r7, #2]
 8002dc4:	041a      	lsls	r2, r3, #16
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	619a      	str	r2, [r3, #24]
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b086      	sub	sp, #24
 8002dda:	af02      	add	r7, sp, #8
 8002ddc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e108      	b.n	8002ffa <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f01d fd9a 	bl	802093c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e16:	d102      	bne.n	8002e1e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f003 fd9d 	bl	8006962 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	7c1a      	ldrb	r2, [r3, #16]
 8002e30:	f88d 2000 	strb.w	r2, [sp]
 8002e34:	3304      	adds	r3, #4
 8002e36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e38:	f003 fc86 	bl	8006748 <USB_CoreInit>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d005      	beq.n	8002e4e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2202      	movs	r2, #2
 8002e46:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0d5      	b.n	8002ffa <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2100      	movs	r1, #0
 8002e54:	4618      	mov	r0, r3
 8002e56:	f003 fd95 	bl	8006984 <USB_SetCurrentMode>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0c6      	b.n	8002ffa <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	73fb      	strb	r3, [r7, #15]
 8002e70:	e04a      	b.n	8002f08 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	3315      	adds	r3, #21
 8002e82:	2201      	movs	r2, #1
 8002e84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e86:	7bfa      	ldrb	r2, [r7, #15]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	3314      	adds	r3, #20
 8002e96:	7bfa      	ldrb	r2, [r7, #15]
 8002e98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e9a:	7bfa      	ldrb	r2, [r7, #15]
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	b298      	uxth	r0, r3
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	332e      	adds	r3, #46	@ 0x2e
 8002eae:	4602      	mov	r2, r0
 8002eb0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002eb2:	7bfa      	ldrb	r2, [r7, #15]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3318      	adds	r3, #24
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ec6:	7bfa      	ldrb	r2, [r7, #15]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	331c      	adds	r3, #28
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002eda:	7bfa      	ldrb	r2, [r7, #15]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	3320      	adds	r3, #32
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002eee:	7bfa      	ldrb	r2, [r7, #15]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	3324      	adds	r3, #36	@ 0x24
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	3301      	adds	r3, #1
 8002f06:	73fb      	strb	r3, [r7, #15]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	791b      	ldrb	r3, [r3, #4]
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d3af      	bcc.n	8002e72 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]
 8002f16:	e044      	b.n	8002fa2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f2e:	7bfa      	ldrb	r2, [r7, #15]
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002f40:	7bfa      	ldrb	r2, [r7, #15]
 8002f42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f44:	7bfa      	ldrb	r2, [r7, #15]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	4413      	add	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f5a:	7bfa      	ldrb	r2, [r7, #15]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4413      	add	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f70:	7bfa      	ldrb	r2, [r7, #15]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f86:	7bfa      	ldrb	r2, [r7, #15]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	791b      	ldrb	r3, [r3, #4]
 8002fa6:	7bfa      	ldrb	r2, [r7, #15]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d3b5      	bcc.n	8002f18 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	7c1a      	ldrb	r2, [r3, #16]
 8002fb4:	f88d 2000 	strb.w	r2, [sp]
 8002fb8:	3304      	adds	r3, #4
 8002fba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fbc:	f003 fd2e 	bl	8006a1c <USB_DevInit>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e013      	b.n	8002ffa <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	7b1b      	ldrb	r3, [r3, #12]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d102      	bne.n	8002fee <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f001 f95b 	bl	80042a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f004 fd71 	bl	8007ada <USB_DevDisconnect>

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_PCD_Start+0x16>
 8003014:	2302      	movs	r3, #2
 8003016:	e012      	b.n	800303e <HAL_PCD_Start+0x3c>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f003 fc8b 	bl	8006940 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f004 fd32 	bl	8007a98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003046:	b590      	push	{r4, r7, lr}
 8003048:	b08d      	sub	sp, #52	@ 0x34
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003054:	6a3b      	ldr	r3, [r7, #32]
 8003056:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f004 fdf0 	bl	8007c42 <USB_GetMode>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	f040 84b9 	bne.w	80039dc <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f004 fd54 	bl	8007b1c <USB_ReadInterrupts>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 84af 	beq.w	80039da <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	0a1b      	lsrs	r3, r3, #8
 8003086:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f004 fd41 	bl	8007b1c <USB_ReadInterrupts>
 800309a:	4603      	mov	r3, r0
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d107      	bne.n	80030b4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f002 0202 	and.w	r2, r2, #2
 80030b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f004 fd2f 	bl	8007b1c <USB_ReadInterrupts>
 80030be:	4603      	mov	r3, r0
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b10      	cmp	r3, #16
 80030c6:	d161      	bne.n	800318c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699a      	ldr	r2, [r3, #24]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0210 	bic.w	r2, r2, #16
 80030d6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	f003 020f 	and.w	r2, r3, #15
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	4413      	add	r3, r2
 80030f4:	3304      	adds	r3, #4
 80030f6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80030fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003102:	d124      	bne.n	800314e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800310a:	4013      	ands	r3, r2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d035      	beq.n	800317c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	091b      	lsrs	r3, r3, #4
 8003118:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800311a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800311e:	b29b      	uxth	r3, r3
 8003120:	461a      	mov	r2, r3
 8003122:	6a38      	ldr	r0, [r7, #32]
 8003124:	f004 fb66 	bl	80077f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	091b      	lsrs	r3, r3, #4
 8003130:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003134:	441a      	add	r2, r3
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	695a      	ldr	r2, [r3, #20]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003146:	441a      	add	r2, r3
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	615a      	str	r2, [r3, #20]
 800314c:	e016      	b.n	800317c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003154:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003158:	d110      	bne.n	800317c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003160:	2208      	movs	r2, #8
 8003162:	4619      	mov	r1, r3
 8003164:	6a38      	ldr	r0, [r7, #32]
 8003166:	f004 fb45 	bl	80077f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003176:	441a      	add	r2, r3
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0210 	orr.w	r2, r2, #16
 800318a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f004 fcc3 	bl	8007b1c <USB_ReadInterrupts>
 8003196:	4603      	mov	r3, r0
 8003198:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800319c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80031a0:	f040 80a7 	bne.w	80032f2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f004 fcc8 	bl	8007b42 <USB_ReadDevAllOutEpInterrupt>
 80031b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80031b4:	e099      	b.n	80032ea <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 808e 	beq.w	80032de <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	4611      	mov	r1, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f004 fcec 	bl	8007baa <USB_ReadDevOutEPInterrupt>
 80031d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00c      	beq.n	80031f8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031ea:	461a      	mov	r2, r3
 80031ec:	2301      	movs	r3, #1
 80031ee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80031f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fed0 	bl	8003f98 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00c      	beq.n	800321c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	4413      	add	r3, r2
 800320a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800320e:	461a      	mov	r2, r3
 8003210:	2308      	movs	r3, #8
 8003212:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003214:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 ffa6 	bl	8004168 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f003 0310 	and.w	r3, r3, #16
 8003222:	2b00      	cmp	r3, #0
 8003224:	d008      	beq.n	8003238 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	4413      	add	r3, r2
 800322e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003232:	461a      	mov	r2, r3
 8003234:	2310      	movs	r3, #16
 8003236:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d030      	beq.n	80032a4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800324a:	2b80      	cmp	r3, #128	@ 0x80
 800324c:	d109      	bne.n	8003262 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800325c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003260:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4413      	add	r3, r2
 8003274:	3304      	adds	r3, #4
 8003276:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	78db      	ldrb	r3, [r3, #3]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d108      	bne.n	8003292 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2200      	movs	r2, #0
 8003284:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003288:	b2db      	uxtb	r3, r3
 800328a:	4619      	mov	r1, r3
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f01d fc89 	bl	8020ba4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003294:	015a      	lsls	r2, r3, #5
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	4413      	add	r3, r2
 800329a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800329e:	461a      	mov	r2, r3
 80032a0:	2302      	movs	r3, #2
 80032a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d008      	beq.n	80032c0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032ba:	461a      	mov	r2, r3
 80032bc:	2320      	movs	r3, #32
 80032be:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80032ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032d6:	461a      	mov	r2, r3
 80032d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80032dc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e0:	3301      	adds	r3, #1
 80032e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80032e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80032ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f47f af62 	bne.w	80031b6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f004 fc10 	bl	8007b1c <USB_ReadInterrupts>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003302:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003306:	f040 80db 	bne.w	80034c0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f004 fc31 	bl	8007b76 <USB_ReadDevAllInEpInterrupt>
 8003314:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800331a:	e0cd      	b.n	80034b8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800331c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 80c2 	beq.w	80034ac <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	4611      	mov	r1, r2
 8003332:	4618      	mov	r0, r3
 8003334:	f004 fc57 	bl	8007be6 <USB_ReadDevInEPInterrupt>
 8003338:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d057      	beq.n	80033f4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	2201      	movs	r2, #1
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003358:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	43db      	mvns	r3, r3
 800335e:	69f9      	ldr	r1, [r7, #28]
 8003360:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003364:	4013      	ands	r3, r2
 8003366:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	015a      	lsls	r2, r3, #5
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	4413      	add	r3, r2
 8003370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003374:	461a      	mov	r2, r3
 8003376:	2301      	movs	r3, #1
 8003378:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	799b      	ldrb	r3, [r3, #6]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d132      	bne.n	80033e8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003386:	4613      	mov	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	3320      	adds	r3, #32
 8003392:	6819      	ldr	r1, [r3, #0]
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003398:	4613      	mov	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4403      	add	r3, r0
 80033a2:	331c      	adds	r3, #28
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4419      	add	r1, r3
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4403      	add	r3, r0
 80033b6:	3320      	adds	r3, #32
 80033b8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d113      	bne.n	80033e8 <HAL_PCD_IRQHandler+0x3a2>
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	3324      	adds	r3, #36	@ 0x24
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d108      	bne.n	80033e8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033e0:	461a      	mov	r2, r3
 80033e2:	2101      	movs	r1, #1
 80033e4:	f004 fc60 	bl	8007ca8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80033e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	4619      	mov	r1, r3
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f01d fb53 	bl	8020a9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d008      	beq.n	8003410 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80033fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	4413      	add	r3, r2
 8003406:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800340a:	461a      	mov	r2, r3
 800340c:	2308      	movs	r3, #8
 800340e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	2b00      	cmp	r3, #0
 8003418:	d008      	beq.n	800342c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800341a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003426:	461a      	mov	r2, r3
 8003428:	2310      	movs	r3, #16
 800342a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d008      	beq.n	8003448 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	4413      	add	r3, r2
 800343e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003442:	461a      	mov	r2, r3
 8003444:	2340      	movs	r3, #64	@ 0x40
 8003446:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d023      	beq.n	800349a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003452:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003454:	6a38      	ldr	r0, [r7, #32]
 8003456:	f003 fc3f 	bl	8006cd8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800345a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	3310      	adds	r3, #16
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	3304      	adds	r3, #4
 800346c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	78db      	ldrb	r3, [r3, #3]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d108      	bne.n	8003488 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2200      	movs	r2, #0
 800347a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800347c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347e:	b2db      	uxtb	r3, r3
 8003480:	4619      	mov	r1, r3
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f01d fba0 	bl	8020bc8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003494:	461a      	mov	r2, r3
 8003496:	2302      	movs	r3, #2
 8003498:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fcea 	bl	8003e80 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ae:	3301      	adds	r3, #1
 80034b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80034b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b4:	085b      	lsrs	r3, r3, #1
 80034b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80034b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f47f af2e 	bne.w	800331c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f004 fb29 	bl	8007b1c <USB_ReadInterrupts>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80034d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034d4:	d122      	bne.n	800351c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	69fa      	ldr	r2, [r7, #28]
 80034e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d108      	bne.n	8003506 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034fc:	2100      	movs	r1, #0
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f01d fd1a 	bl	8020f38 <HAL_PCDEx_LPM_Callback>
 8003504:	e002      	b.n	800350c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f01d fb3e 	bl	8020b88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800351a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f004 fafb 	bl	8007b1c <USB_ReadInterrupts>
 8003526:	4603      	mov	r3, r0
 8003528:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800352c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003530:	d112      	bne.n	8003558 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b01      	cmp	r3, #1
 8003540:	d102      	bne.n	8003548 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f01d fafa 	bl	8020b3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695a      	ldr	r2, [r3, #20]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003556:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f004 fadd 	bl	8007b1c <USB_ReadInterrupts>
 8003562:	4603      	mov	r3, r0
 8003564:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003568:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800356c:	d121      	bne.n	80035b2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695a      	ldr	r2, [r3, #20]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800357c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003584:	2b00      	cmp	r3, #0
 8003586:	d111      	bne.n	80035ac <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003596:	089b      	lsrs	r3, r3, #2
 8003598:	f003 020f 	and.w	r2, r3, #15
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80035a2:	2101      	movs	r1, #1
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f01d fcc7 	bl	8020f38 <HAL_PCDEx_LPM_Callback>
 80035aa:	e002      	b.n	80035b2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f01d fac5 	bl	8020b3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f004 fab0 	bl	8007b1c <USB_ReadInterrupts>
 80035bc:	4603      	mov	r3, r0
 80035be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035c6:	f040 80b7 	bne.w	8003738 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2110      	movs	r1, #16
 80035e4:	4618      	mov	r0, r3
 80035e6:	f003 fb77 	bl	8006cd8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ea:	2300      	movs	r3, #0
 80035ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035ee:	e046      	b.n	800367e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035fc:	461a      	mov	r2, r3
 80035fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003602:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003614:	0151      	lsls	r1, r2, #5
 8003616:	69fa      	ldr	r2, [r7, #28]
 8003618:	440a      	add	r2, r1
 800361a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800361e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003622:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	4413      	add	r3, r2
 800362c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003630:	461a      	mov	r2, r3
 8003632:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003636:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	4413      	add	r3, r2
 8003640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003648:	0151      	lsls	r1, r2, #5
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	440a      	add	r2, r1
 800364e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003652:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003656:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003668:	0151      	lsls	r1, r2, #5
 800366a:	69fa      	ldr	r2, [r7, #28]
 800366c:	440a      	add	r2, r1
 800366e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003672:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003676:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800367a:	3301      	adds	r3, #1
 800367c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	791b      	ldrb	r3, [r3, #4]
 8003682:	461a      	mov	r2, r3
 8003684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003686:	4293      	cmp	r3, r2
 8003688:	d3b2      	bcc.n	80035f0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003698:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800369c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	7bdb      	ldrb	r3, [r3, #15]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d016      	beq.n	80036d4 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036b6:	f043 030b 	orr.w	r3, r3, #11
 80036ba:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036cc:	f043 030b 	orr.w	r3, r3, #11
 80036d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80036d2:	e015      	b.n	8003700 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036e2:	4619      	mov	r1, r3
 80036e4:	f242 032b 	movw	r3, #8235	@ 0x202b
 80036e8:	4313      	orrs	r3, r2
 80036ea:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036fa:	f043 030b 	orr.w	r3, r3, #11
 80036fe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800370e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003712:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6818      	ldr	r0, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003722:	461a      	mov	r2, r3
 8003724:	f004 fac0 	bl	8007ca8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	695a      	ldr	r2, [r3, #20]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003736:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f004 f9ed 	bl	8007b1c <USB_ReadInterrupts>
 8003742:	4603      	mov	r3, r0
 8003744:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003748:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800374c:	d123      	bne.n	8003796 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4618      	mov	r0, r3
 8003754:	f004 fa84 	bl	8007c60 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f003 fb34 	bl	8006dca <USB_GetDevSpeed>
 8003762:	4603      	mov	r3, r0
 8003764:	461a      	mov	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681c      	ldr	r4, [r3, #0]
 800376e:	f001 fabd 	bl	8004cec <HAL_RCC_GetHCLKFreq>
 8003772:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003778:	461a      	mov	r2, r3
 800377a:	4620      	mov	r0, r4
 800377c:	f003 f83e 	bl	80067fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f01d f9b2 	bl	8020aea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695a      	ldr	r2, [r3, #20]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003794:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f004 f9be 	bl	8007b1c <USB_ReadInterrupts>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d10a      	bne.n	80037c0 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f01d f98f 	bl	8020ace <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f002 0208 	and.w	r2, r2, #8
 80037be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f004 f9a9 	bl	8007b1c <USB_ReadInterrupts>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d0:	2b80      	cmp	r3, #128	@ 0x80
 80037d2:	d123      	bne.n	800381c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037e0:	2301      	movs	r3, #1
 80037e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e4:	e014      	b.n	8003810 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ea:	4613      	mov	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4413      	add	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	440b      	add	r3, r1
 80037f4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d105      	bne.n	800380a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80037fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003800:	b2db      	uxtb	r3, r3
 8003802:	4619      	mov	r1, r3
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fb0a 	bl	8003e1e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800380a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380c:	3301      	adds	r3, #1
 800380e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	791b      	ldrb	r3, [r3, #4]
 8003814:	461a      	mov	r2, r3
 8003816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003818:	4293      	cmp	r3, r2
 800381a:	d3e4      	bcc.n	80037e6 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f004 f97b 	bl	8007b1c <USB_ReadInterrupts>
 8003826:	4603      	mov	r3, r0
 8003828:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800382c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003830:	d13c      	bne.n	80038ac <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003832:	2301      	movs	r3, #1
 8003834:	627b      	str	r3, [r7, #36]	@ 0x24
 8003836:	e02b      	b.n	8003890 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	3318      	adds	r3, #24
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d115      	bne.n	800388a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800385e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003860:	2b00      	cmp	r3, #0
 8003862:	da12      	bge.n	800388a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	3317      	adds	r3, #23
 8003874:	2201      	movs	r2, #1
 8003876:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387a:	b2db      	uxtb	r3, r3
 800387c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003880:	b2db      	uxtb	r3, r3
 8003882:	4619      	mov	r1, r3
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 faca 	bl	8003e1e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800388a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388c:	3301      	adds	r3, #1
 800388e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	791b      	ldrb	r3, [r3, #4]
 8003894:	461a      	mov	r2, r3
 8003896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003898:	4293      	cmp	r3, r2
 800389a:	d3cd      	bcc.n	8003838 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80038aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f004 f933 	bl	8007b1c <USB_ReadInterrupts>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038c0:	d156      	bne.n	8003970 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038c2:	2301      	movs	r3, #1
 80038c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038c6:	e045      	b.n	8003954 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80038c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038d8:	6879      	ldr	r1, [r7, #4]
 80038da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4413      	add	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d12e      	bne.n	800394e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038f0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	da2b      	bge.n	800394e <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	0c1a      	lsrs	r2, r3, #16
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003900:	4053      	eors	r3, r2
 8003902:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003906:	2b00      	cmp	r3, #0
 8003908:	d121      	bne.n	800394e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800390e:	4613      	mov	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800391c:	2201      	movs	r2, #1
 800391e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10a      	bne.n	800394e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	69fa      	ldr	r2, [r7, #28]
 8003942:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003946:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800394a:	6053      	str	r3, [r2, #4]
            break;
 800394c:	e008      	b.n	8003960 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800394e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003950:	3301      	adds	r3, #1
 8003952:	627b      	str	r3, [r7, #36]	@ 0x24
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	791b      	ldrb	r3, [r3, #4]
 8003958:	461a      	mov	r2, r3
 800395a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395c:	4293      	cmp	r3, r2
 800395e:	d3b3      	bcc.n	80038c8 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800396e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f004 f8d1 	bl	8007b1c <USB_ReadInterrupts>
 800397a:	4603      	mov	r3, r0
 800397c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003984:	d10a      	bne.n	800399c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f01d f930 	bl	8020bec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695a      	ldr	r2, [r3, #20]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800399a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f004 f8bb 	bl	8007b1c <USB_ReadInterrupts>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d115      	bne.n	80039dc <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	f003 0304 	and.w	r3, r3, #4
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f01d f920 	bl	8020c08 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6859      	ldr	r1, [r3, #4]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	605a      	str	r2, [r3, #4]
 80039d8:	e000      	b.n	80039dc <HAL_PCD_IRQHandler+0x996>
      return;
 80039da:	bf00      	nop
    }
  }
}
 80039dc:	3734      	adds	r7, #52	@ 0x34
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd90      	pop	{r4, r7, pc}

080039e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
 80039ea:	460b      	mov	r3, r1
 80039ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_PCD_SetAddress+0x1a>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e012      	b.n	8003a22 <HAL_PCD_SetAddress+0x40>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	78fa      	ldrb	r2, [r7, #3]
 8003a08:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	78fa      	ldrb	r2, [r7, #3]
 8003a10:	4611      	mov	r1, r2
 8003a12:	4618      	mov	r0, r3
 8003a14:	f004 f81a 	bl	8007a4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	4608      	mov	r0, r1
 8003a34:	4611      	mov	r1, r2
 8003a36:	461a      	mov	r2, r3
 8003a38:	4603      	mov	r3, r0
 8003a3a:	70fb      	strb	r3, [r7, #3]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	803b      	strh	r3, [r7, #0]
 8003a40:	4613      	mov	r3, r2
 8003a42:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	da0f      	bge.n	8003a70 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	f003 020f 	and.w	r2, r3, #15
 8003a56:	4613      	mov	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	3310      	adds	r3, #16
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	4413      	add	r3, r2
 8003a64:	3304      	adds	r3, #4
 8003a66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	705a      	strb	r2, [r3, #1]
 8003a6e:	e00f      	b.n	8003a90 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	f003 020f 	and.w	r2, r3, #15
 8003a76:	4613      	mov	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	4413      	add	r3, r2
 8003a86:	3304      	adds	r3, #4
 8003a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	b2da      	uxtb	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003a9c:	883b      	ldrh	r3, [r7, #0]
 8003a9e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	78ba      	ldrb	r2, [r7, #2]
 8003aaa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	785b      	ldrb	r3, [r3, #1]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d004      	beq.n	8003abe <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003abe:	78bb      	ldrb	r3, [r7, #2]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d102      	bne.n	8003aca <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_PCD_EP_Open+0xae>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e00e      	b.n	8003af6 <HAL_PCD_EP_Open+0xcc>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68f9      	ldr	r1, [r7, #12]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f003 f994 	bl	8006e14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003af4:	7afb      	ldrb	r3, [r7, #11]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b084      	sub	sp, #16
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	460b      	mov	r3, r1
 8003b08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	da0f      	bge.n	8003b32 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b12:	78fb      	ldrb	r3, [r7, #3]
 8003b14:	f003 020f 	and.w	r2, r3, #15
 8003b18:	4613      	mov	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	3310      	adds	r3, #16
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4413      	add	r3, r2
 8003b26:	3304      	adds	r3, #4
 8003b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	705a      	strb	r2, [r3, #1]
 8003b30:	e00f      	b.n	8003b52 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b32:	78fb      	ldrb	r3, [r7, #3]
 8003b34:	f003 020f 	and.w	r2, r3, #15
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	4413      	add	r3, r2
 8003b48:	3304      	adds	r3, #4
 8003b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	f003 030f 	and.w	r3, r3, #15
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_PCD_EP_Close+0x6e>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e00e      	b.n	8003b8a <HAL_PCD_EP_Close+0x8c>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68f9      	ldr	r1, [r7, #12]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f003 f9d2 	bl	8006f24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b086      	sub	sp, #24
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ba2:	7afb      	ldrb	r3, [r7, #11]
 8003ba4:	f003 020f 	and.w	r2, r3, #15
 8003ba8:	4613      	mov	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	4413      	add	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3304      	adds	r3, #4
 8003bba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bd4:	7afb      	ldrb	r3, [r7, #11]
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	799b      	ldrb	r3, [r3, #6]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d102      	bne.n	8003bee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	799b      	ldrb	r3, [r3, #6]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	6979      	ldr	r1, [r7, #20]
 8003bfa:	f003 fa6f 	bl	80070dc <USB_EPStartXfer>

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	f003 020f 	and.w	r2, r3, #15
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003c2a:	681b      	ldr	r3, [r3, #0]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	607a      	str	r2, [r7, #4]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	460b      	mov	r3, r1
 8003c46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c48:	7afb      	ldrb	r3, [r7, #11]
 8003c4a:	f003 020f 	and.w	r2, r3, #15
 8003c4e:	4613      	mov	r3, r2
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	3310      	adds	r3, #16
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2201      	movs	r2, #1
 8003c76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c78:	7afb      	ldrb	r3, [r7, #11]
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	799b      	ldrb	r3, [r3, #6]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d102      	bne.n	8003c92 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	799b      	ldrb	r3, [r3, #6]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	6979      	ldr	r1, [r7, #20]
 8003c9e:	f003 fa1d 	bl	80070dc <USB_EPStartXfer>

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003cb8:	78fb      	ldrb	r3, [r7, #3]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	7912      	ldrb	r2, [r2, #4]
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e04f      	b.n	8003d6a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	da0f      	bge.n	8003cf2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cd2:	78fb      	ldrb	r3, [r7, #3]
 8003cd4:	f003 020f 	and.w	r2, r3, #15
 8003cd8:	4613      	mov	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	3310      	adds	r3, #16
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2201      	movs	r2, #1
 8003cee:	705a      	strb	r2, [r3, #1]
 8003cf0:	e00d      	b.n	8003d0e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cf2:	78fa      	ldrb	r2, [r7, #3]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	4413      	add	r3, r2
 8003d04:	3304      	adds	r3, #4
 8003d06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d101      	bne.n	8003d2e <HAL_PCD_EP_SetStall+0x82>
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e01d      	b.n	8003d6a <HAL_PCD_EP_SetStall+0xbe>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68f9      	ldr	r1, [r7, #12]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f003 fdb1 	bl	80078a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	f003 030f 	and.w	r3, r3, #15
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d109      	bne.n	8003d60 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	7999      	ldrb	r1, [r3, #6]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f003 ffa4 	bl	8007ca8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b084      	sub	sp, #16
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	7912      	ldrb	r2, [r2, #4]
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d901      	bls.n	8003d90 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e042      	b.n	8003e16 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	da0f      	bge.n	8003db8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	f003 020f 	and.w	r2, r3, #15
 8003d9e:	4613      	mov	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	3310      	adds	r3, #16
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	4413      	add	r3, r2
 8003dac:	3304      	adds	r3, #4
 8003dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	705a      	strb	r2, [r3, #1]
 8003db6:	e00f      	b.n	8003dd8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003db8:	78fb      	ldrb	r3, [r7, #3]
 8003dba:	f003 020f 	and.w	r2, r3, #15
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	4413      	add	r3, r2
 8003dce:	3304      	adds	r3, #4
 8003dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dde:	78fb      	ldrb	r3, [r7, #3]
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_PCD_EP_ClrStall+0x86>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e00e      	b.n	8003e16 <HAL_PCD_EP_ClrStall+0xa4>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68f9      	ldr	r1, [r7, #12]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f003 fdba 	bl	8007980 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	460b      	mov	r3, r1
 8003e28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	da0c      	bge.n	8003e4c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e32:	78fb      	ldrb	r3, [r7, #3]
 8003e34:	f003 020f 	and.w	r2, r3, #15
 8003e38:	4613      	mov	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	3310      	adds	r3, #16
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4413      	add	r3, r2
 8003e46:	3304      	adds	r3, #4
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	e00c      	b.n	8003e66 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	f003 020f 	and.w	r2, r3, #15
 8003e52:	4613      	mov	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	4413      	add	r3, r2
 8003e62:	3304      	adds	r3, #4
 8003e64:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68f9      	ldr	r1, [r7, #12]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f003 fbd9 	bl	8007624 <USB_EPStopXfer>
 8003e72:	4603      	mov	r3, r0
 8003e74:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e76:	7afb      	ldrb	r3, [r7, #11]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08a      	sub	sp, #40	@ 0x28
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	4613      	mov	r3, r2
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	3310      	adds	r3, #16
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	695a      	ldr	r2, [r3, #20]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d901      	bls.n	8003eb8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e06b      	b.n	8003f90 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	69fa      	ldr	r2, [r7, #28]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d902      	bls.n	8003ed4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	3303      	adds	r3, #3
 8003ed8:	089b      	lsrs	r3, r3, #2
 8003eda:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003edc:	e02a      	b.n	8003f34 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d902      	bls.n	8003efa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	3303      	adds	r3, #3
 8003efe:	089b      	lsrs	r3, r3, #2
 8003f00:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	68d9      	ldr	r1, [r3, #12]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	4603      	mov	r3, r0
 8003f16:	6978      	ldr	r0, [r7, #20]
 8003f18:	f003 fc2e 	bl	8007778 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	441a      	add	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	441a      	add	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d809      	bhi.n	8003f5e <PCD_WriteEmptyTxFifo+0xde>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	695a      	ldr	r2, [r3, #20]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d203      	bcs.n	8003f5e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1bf      	bne.n	8003ede <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	691a      	ldr	r2, [r3, #16]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d811      	bhi.n	8003f8e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	2201      	movs	r2, #1
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	43db      	mvns	r3, r3
 8003f84:	6939      	ldr	r1, [r7, #16]
 8003f86:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3720      	adds	r7, #32
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	333c      	adds	r3, #60	@ 0x3c
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	799b      	ldrb	r3, [r3, #6]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d17b      	bne.n	80040c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d015      	beq.n	8004004 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	4a61      	ldr	r2, [pc, #388]	@ (8004160 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	f240 80b9 	bls.w	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 80b3 	beq.w	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004000:	6093      	str	r3, [r2, #8]
 8004002:	e0a7      	b.n	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	015a      	lsls	r2, r3, #5
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800401a:	461a      	mov	r2, r3
 800401c:	2320      	movs	r3, #32
 800401e:	6093      	str	r3, [r2, #8]
 8004020:	e098      	b.n	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004028:	2b00      	cmp	r3, #0
 800402a:	f040 8093 	bne.w	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	4a4b      	ldr	r2, [pc, #300]	@ (8004160 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d90f      	bls.n	8004056 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800404c:	461a      	mov	r2, r3
 800404e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004052:	6093      	str	r3, [r2, #8]
 8004054:	e07e      	b.n	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	4413      	add	r3, r2
 8004068:	3304      	adds	r3, #4
 800406a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a1a      	ldr	r2, [r3, #32]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	0159      	lsls	r1, r3, #5
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	440b      	add	r3, r1
 8004078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004082:	1ad2      	subs	r2, r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d114      	bne.n	80040b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80040a0:	461a      	mov	r2, r3
 80040a2:	2101      	movs	r1, #1
 80040a4:	f003 fe00 	bl	8007ca8 <USB_EP0_OutStart>
 80040a8:	e006      	b.n	80040b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	441a      	add	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	4619      	mov	r1, r3
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f01c fcd0 	bl	8020a64 <HAL_PCD_DataOutStageCallback>
 80040c4:	e046      	b.n	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	4a26      	ldr	r2, [pc, #152]	@ (8004164 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d124      	bne.n	8004118 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040e4:	461a      	mov	r2, r3
 80040e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040ea:	6093      	str	r3, [r2, #8]
 80040ec:	e032      	b.n	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f003 0320 	and.w	r3, r3, #32
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d008      	beq.n	800410a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004104:	461a      	mov	r2, r3
 8004106:	2320      	movs	r3, #32
 8004108:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	b2db      	uxtb	r3, r3
 800410e:	4619      	mov	r1, r3
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f01c fca7 	bl	8020a64 <HAL_PCD_DataOutStageCallback>
 8004116:	e01d      	b.n	8004154 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d114      	bne.n	8004148 <PCD_EP_OutXfrComplete_int+0x1b0>
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	4613      	mov	r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d108      	bne.n	8004148 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004140:	461a      	mov	r2, r3
 8004142:	2100      	movs	r1, #0
 8004144:	f003 fdb0 	bl	8007ca8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	b2db      	uxtb	r3, r3
 800414c:	4619      	mov	r1, r3
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f01c fc88 	bl	8020a64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3720      	adds	r7, #32
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	4f54300a 	.word	0x4f54300a
 8004164:	4f54310a 	.word	0x4f54310a

08004168 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	333c      	adds	r3, #60	@ 0x3c
 8004180:	3304      	adds	r3, #4
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4a15      	ldr	r2, [pc, #84]	@ (80041f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d90e      	bls.n	80041bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d009      	beq.n	80041bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041b4:	461a      	mov	r2, r3
 80041b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f01c fc3f 	bl	8020a40 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4a0a      	ldr	r2, [pc, #40]	@ (80041f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d90c      	bls.n	80041e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	799b      	ldrb	r3, [r3, #6]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d108      	bne.n	80041e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041dc:	461a      	mov	r2, r3
 80041de:	2101      	movs	r1, #1
 80041e0:	f003 fd62 	bl	8007ca8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	4f54300a 	.word	0x4f54300a

080041f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	70fb      	strb	r3, [r7, #3]
 8004200:	4613      	mov	r3, r2
 8004202:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d107      	bne.n	8004222 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004212:	883b      	ldrh	r3, [r7, #0]
 8004214:	0419      	lsls	r1, r3, #16
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	430a      	orrs	r2, r1
 800421e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004220:	e028      	b.n	8004274 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004228:	0c1b      	lsrs	r3, r3, #16
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	4413      	add	r3, r2
 800422e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004230:	2300      	movs	r3, #0
 8004232:	73fb      	strb	r3, [r7, #15]
 8004234:	e00d      	b.n	8004252 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	3340      	adds	r3, #64	@ 0x40
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	0c1b      	lsrs	r3, r3, #16
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	4413      	add	r3, r2
 800424a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	3301      	adds	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
 8004252:	7bfa      	ldrb	r2, [r7, #15]
 8004254:	78fb      	ldrb	r3, [r7, #3]
 8004256:	3b01      	subs	r3, #1
 8004258:	429a      	cmp	r2, r3
 800425a:	d3ec      	bcc.n	8004236 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800425c:	883b      	ldrh	r3, [r7, #0]
 800425e:	0418      	lsls	r0, r3, #16
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6819      	ldr	r1, [r3, #0]
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	3b01      	subs	r3, #1
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	4302      	orrs	r2, r0
 800426c:	3340      	adds	r3, #64	@ 0x40
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	460b      	mov	r3, r1
 800428c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	887a      	ldrh	r2, [r7, #2]
 8004294:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042d2:	4b05      	ldr	r3, [pc, #20]	@ (80042e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	10000003 	.word	0x10000003

080042ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042f0:	4b05      	ldr	r3, [pc, #20]	@ (8004308 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a04      	ldr	r2, [pc, #16]	@ (8004308 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042fa:	6013      	str	r3, [r2, #0]
}
 80042fc:	bf00      	nop
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40007000 	.word	0x40007000

0800430c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004312:	2300      	movs	r3, #0
 8004314:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004316:	4b23      	ldr	r3, [pc, #140]	@ (80043a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431a:	4a22      	ldr	r2, [pc, #136]	@ (80043a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800431c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004320:	6413      	str	r3, [r2, #64]	@ 0x40
 8004322:	4b20      	ldr	r3, [pc, #128]	@ (80043a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800432a:	603b      	str	r3, [r7, #0]
 800432c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800432e:	4b1e      	ldr	r3, [pc, #120]	@ (80043a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a1d      	ldr	r2, [pc, #116]	@ (80043a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004338:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800433a:	f7fc fff3 	bl	8001324 <HAL_GetTick>
 800433e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004340:	e009      	b.n	8004356 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004342:	f7fc ffef 	bl	8001324 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004350:	d901      	bls.n	8004356 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e022      	b.n	800439c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004356:	4b14      	ldr	r3, [pc, #80]	@ (80043a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800435e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004362:	d1ee      	bne.n	8004342 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004364:	4b10      	ldr	r3, [pc, #64]	@ (80043a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a0f      	ldr	r2, [pc, #60]	@ (80043a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800436a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800436e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004370:	f7fc ffd8 	bl	8001324 <HAL_GetTick>
 8004374:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004376:	e009      	b.n	800438c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004378:	f7fc ffd4 	bl	8001324 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004386:	d901      	bls.n	800438c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e007      	b.n	800439c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800438c:	4b06      	ldr	r3, [pc, #24]	@ (80043a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004394:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004398:	d1ee      	bne.n	8004378 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40023800 	.word	0x40023800
 80043a8:	40007000 	.word	0x40007000

080043ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80043b4:	2300      	movs	r3, #0
 80043b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e29b      	b.n	80048fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 8087 	beq.w	80044de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043d0:	4b96      	ldr	r3, [pc, #600]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f003 030c 	and.w	r3, r3, #12
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d00c      	beq.n	80043f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043dc:	4b93      	ldr	r3, [pc, #588]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 030c 	and.w	r3, r3, #12
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d112      	bne.n	800440e <HAL_RCC_OscConfig+0x62>
 80043e8:	4b90      	ldr	r3, [pc, #576]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043f4:	d10b      	bne.n	800440e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f6:	4b8d      	ldr	r3, [pc, #564]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d06c      	beq.n	80044dc <HAL_RCC_OscConfig+0x130>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d168      	bne.n	80044dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e275      	b.n	80048fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004416:	d106      	bne.n	8004426 <HAL_RCC_OscConfig+0x7a>
 8004418:	4b84      	ldr	r3, [pc, #528]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a83      	ldr	r2, [pc, #524]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 800441e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	e02e      	b.n	8004484 <HAL_RCC_OscConfig+0xd8>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10c      	bne.n	8004448 <HAL_RCC_OscConfig+0x9c>
 800442e:	4b7f      	ldr	r3, [pc, #508]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a7e      	ldr	r2, [pc, #504]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 8004434:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	4b7c      	ldr	r3, [pc, #496]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a7b      	ldr	r2, [pc, #492]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 8004440:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	e01d      	b.n	8004484 <HAL_RCC_OscConfig+0xd8>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004450:	d10c      	bne.n	800446c <HAL_RCC_OscConfig+0xc0>
 8004452:	4b76      	ldr	r3, [pc, #472]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a75      	ldr	r2, [pc, #468]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 8004458:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	4b73      	ldr	r3, [pc, #460]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a72      	ldr	r2, [pc, #456]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 8004464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	e00b      	b.n	8004484 <HAL_RCC_OscConfig+0xd8>
 800446c:	4b6f      	ldr	r3, [pc, #444]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a6e      	ldr	r2, [pc, #440]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 8004472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	4b6c      	ldr	r3, [pc, #432]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a6b      	ldr	r2, [pc, #428]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 800447e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d013      	beq.n	80044b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448c:	f7fc ff4a 	bl	8001324 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004494:	f7fc ff46 	bl	8001324 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b64      	cmp	r3, #100	@ 0x64
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e229      	b.n	80048fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a6:	4b61      	ldr	r3, [pc, #388]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f0      	beq.n	8004494 <HAL_RCC_OscConfig+0xe8>
 80044b2:	e014      	b.n	80044de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b4:	f7fc ff36 	bl	8001324 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044bc:	f7fc ff32 	bl	8001324 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b64      	cmp	r3, #100	@ 0x64
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e215      	b.n	80048fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ce:	4b57      	ldr	r3, [pc, #348]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f0      	bne.n	80044bc <HAL_RCC_OscConfig+0x110>
 80044da:	e000      	b.n	80044de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d069      	beq.n	80045be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044ea:	4b50      	ldr	r3, [pc, #320]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 030c 	and.w	r3, r3, #12
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00b      	beq.n	800450e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044f6:	4b4d      	ldr	r3, [pc, #308]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	2b08      	cmp	r3, #8
 8004500:	d11c      	bne.n	800453c <HAL_RCC_OscConfig+0x190>
 8004502:	4b4a      	ldr	r3, [pc, #296]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d116      	bne.n	800453c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800450e:	4b47      	ldr	r3, [pc, #284]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <HAL_RCC_OscConfig+0x17a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d001      	beq.n	8004526 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e1e9      	b.n	80048fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004526:	4b41      	ldr	r3, [pc, #260]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	493d      	ldr	r1, [pc, #244]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 8004536:	4313      	orrs	r3, r2
 8004538:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800453a:	e040      	b.n	80045be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d023      	beq.n	800458c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004544:	4b39      	ldr	r3, [pc, #228]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a38      	ldr	r2, [pc, #224]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7fc fee8 	bl	8001324 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004558:	f7fc fee4 	bl	8001324 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e1c7      	b.n	80048fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456a:	4b30      	ldr	r3, [pc, #192]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0f0      	beq.n	8004558 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004576:	4b2d      	ldr	r3, [pc, #180]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	4929      	ldr	r1, [pc, #164]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 8004586:	4313      	orrs	r3, r2
 8004588:	600b      	str	r3, [r1, #0]
 800458a:	e018      	b.n	80045be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800458c:	4b27      	ldr	r3, [pc, #156]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a26      	ldr	r2, [pc, #152]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 8004592:	f023 0301 	bic.w	r3, r3, #1
 8004596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7fc fec4 	bl	8001324 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a0:	f7fc fec0 	bl	8001324 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e1a3      	b.n	80048fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b2:	4b1e      	ldr	r3, [pc, #120]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d038      	beq.n	800463c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d019      	beq.n	8004606 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045d2:	4b16      	ldr	r3, [pc, #88]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 80045d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045d6:	4a15      	ldr	r2, [pc, #84]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 80045d8:	f043 0301 	orr.w	r3, r3, #1
 80045dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045de:	f7fc fea1 	bl	8001324 <HAL_GetTick>
 80045e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045e4:	e008      	b.n	80045f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045e6:	f7fc fe9d 	bl	8001324 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d901      	bls.n	80045f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	e180      	b.n	80048fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f8:	4b0c      	ldr	r3, [pc, #48]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 80045fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d0f0      	beq.n	80045e6 <HAL_RCC_OscConfig+0x23a>
 8004604:	e01a      	b.n	800463c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004606:	4b09      	ldr	r3, [pc, #36]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 8004608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800460a:	4a08      	ldr	r2, [pc, #32]	@ (800462c <HAL_RCC_OscConfig+0x280>)
 800460c:	f023 0301 	bic.w	r3, r3, #1
 8004610:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004612:	f7fc fe87 	bl	8001324 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004618:	e00a      	b.n	8004630 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800461a:	f7fc fe83 	bl	8001324 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d903      	bls.n	8004630 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e166      	b.n	80048fa <HAL_RCC_OscConfig+0x54e>
 800462c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004630:	4b92      	ldr	r3, [pc, #584]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 8004632:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1ee      	bne.n	800461a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b00      	cmp	r3, #0
 8004646:	f000 80a4 	beq.w	8004792 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800464a:	4b8c      	ldr	r3, [pc, #560]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 800464c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10d      	bne.n	8004672 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004656:	4b89      	ldr	r3, [pc, #548]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 8004658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465a:	4a88      	ldr	r2, [pc, #544]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 800465c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004660:	6413      	str	r3, [r2, #64]	@ 0x40
 8004662:	4b86      	ldr	r3, [pc, #536]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800466a:	60bb      	str	r3, [r7, #8]
 800466c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800466e:	2301      	movs	r3, #1
 8004670:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004672:	4b83      	ldr	r3, [pc, #524]	@ (8004880 <HAL_RCC_OscConfig+0x4d4>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467a:	2b00      	cmp	r3, #0
 800467c:	d118      	bne.n	80046b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800467e:	4b80      	ldr	r3, [pc, #512]	@ (8004880 <HAL_RCC_OscConfig+0x4d4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a7f      	ldr	r2, [pc, #508]	@ (8004880 <HAL_RCC_OscConfig+0x4d4>)
 8004684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800468a:	f7fc fe4b 	bl	8001324 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004692:	f7fc fe47 	bl	8001324 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b64      	cmp	r3, #100	@ 0x64
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e12a      	b.n	80048fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046a4:	4b76      	ldr	r3, [pc, #472]	@ (8004880 <HAL_RCC_OscConfig+0x4d4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d106      	bne.n	80046c6 <HAL_RCC_OscConfig+0x31a>
 80046b8:	4b70      	ldr	r3, [pc, #448]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 80046ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046bc:	4a6f      	ldr	r2, [pc, #444]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 80046be:	f043 0301 	orr.w	r3, r3, #1
 80046c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80046c4:	e02d      	b.n	8004722 <HAL_RCC_OscConfig+0x376>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10c      	bne.n	80046e8 <HAL_RCC_OscConfig+0x33c>
 80046ce:	4b6b      	ldr	r3, [pc, #428]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d2:	4a6a      	ldr	r2, [pc, #424]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 80046d4:	f023 0301 	bic.w	r3, r3, #1
 80046d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80046da:	4b68      	ldr	r3, [pc, #416]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046de:	4a67      	ldr	r2, [pc, #412]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 80046e0:	f023 0304 	bic.w	r3, r3, #4
 80046e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80046e6:	e01c      	b.n	8004722 <HAL_RCC_OscConfig+0x376>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	2b05      	cmp	r3, #5
 80046ee:	d10c      	bne.n	800470a <HAL_RCC_OscConfig+0x35e>
 80046f0:	4b62      	ldr	r3, [pc, #392]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 80046f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f4:	4a61      	ldr	r2, [pc, #388]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 80046f6:	f043 0304 	orr.w	r3, r3, #4
 80046fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80046fc:	4b5f      	ldr	r3, [pc, #380]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 80046fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004700:	4a5e      	ldr	r2, [pc, #376]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 8004702:	f043 0301 	orr.w	r3, r3, #1
 8004706:	6713      	str	r3, [r2, #112]	@ 0x70
 8004708:	e00b      	b.n	8004722 <HAL_RCC_OscConfig+0x376>
 800470a:	4b5c      	ldr	r3, [pc, #368]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 800470c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470e:	4a5b      	ldr	r2, [pc, #364]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 8004710:	f023 0301 	bic.w	r3, r3, #1
 8004714:	6713      	str	r3, [r2, #112]	@ 0x70
 8004716:	4b59      	ldr	r3, [pc, #356]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471a:	4a58      	ldr	r2, [pc, #352]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 800471c:	f023 0304 	bic.w	r3, r3, #4
 8004720:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d015      	beq.n	8004756 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472a:	f7fc fdfb 	bl	8001324 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004730:	e00a      	b.n	8004748 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004732:	f7fc fdf7 	bl	8001324 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004740:	4293      	cmp	r3, r2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e0d8      	b.n	80048fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004748:	4b4c      	ldr	r3, [pc, #304]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 800474a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0ee      	beq.n	8004732 <HAL_RCC_OscConfig+0x386>
 8004754:	e014      	b.n	8004780 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004756:	f7fc fde5 	bl	8001324 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800475c:	e00a      	b.n	8004774 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800475e:	f7fc fde1 	bl	8001324 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800476c:	4293      	cmp	r3, r2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e0c2      	b.n	80048fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004774:	4b41      	ldr	r3, [pc, #260]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 8004776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1ee      	bne.n	800475e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004780:	7dfb      	ldrb	r3, [r7, #23]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d105      	bne.n	8004792 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004786:	4b3d      	ldr	r3, [pc, #244]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 8004788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478a:	4a3c      	ldr	r2, [pc, #240]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 800478c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004790:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 80ae 	beq.w	80048f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800479c:	4b37      	ldr	r3, [pc, #220]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f003 030c 	and.w	r3, r3, #12
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d06d      	beq.n	8004884 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d14b      	bne.n	8004848 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b0:	4b32      	ldr	r3, [pc, #200]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a31      	ldr	r2, [pc, #196]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 80047b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fc fdb2 	bl	8001324 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c4:	f7fc fdae 	bl	8001324 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e091      	b.n	80048fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d6:	4b29      	ldr	r3, [pc, #164]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1f0      	bne.n	80047c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69da      	ldr	r2, [r3, #28]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f0:	019b      	lsls	r3, r3, #6
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f8:	085b      	lsrs	r3, r3, #1
 80047fa:	3b01      	subs	r3, #1
 80047fc:	041b      	lsls	r3, r3, #16
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004804:	061b      	lsls	r3, r3, #24
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480c:	071b      	lsls	r3, r3, #28
 800480e:	491b      	ldr	r1, [pc, #108]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 8004810:	4313      	orrs	r3, r2
 8004812:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004814:	4b19      	ldr	r3, [pc, #100]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a18      	ldr	r2, [pc, #96]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 800481a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800481e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004820:	f7fc fd80 	bl	8001324 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004828:	f7fc fd7c 	bl	8001324 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e05f      	b.n	80048fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800483a:	4b10      	ldr	r3, [pc, #64]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0f0      	beq.n	8004828 <HAL_RCC_OscConfig+0x47c>
 8004846:	e057      	b.n	80048f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004848:	4b0c      	ldr	r3, [pc, #48]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a0b      	ldr	r2, [pc, #44]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 800484e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004854:	f7fc fd66 	bl	8001324 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800485c:	f7fc fd62 	bl	8001324 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e045      	b.n	80048fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800486e:	4b03      	ldr	r3, [pc, #12]	@ (800487c <HAL_RCC_OscConfig+0x4d0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0x4b0>
 800487a:	e03d      	b.n	80048f8 <HAL_RCC_OscConfig+0x54c>
 800487c:	40023800 	.word	0x40023800
 8004880:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004884:	4b1f      	ldr	r3, [pc, #124]	@ (8004904 <HAL_RCC_OscConfig+0x558>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d030      	beq.n	80048f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800489c:	429a      	cmp	r2, r3
 800489e:	d129      	bne.n	80048f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d122      	bne.n	80048f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80048b4:	4013      	ands	r3, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048bc:	4293      	cmp	r3, r2
 80048be:	d119      	bne.n	80048f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ca:	085b      	lsrs	r3, r3, #1
 80048cc:	3b01      	subs	r3, #1
 80048ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d10f      	bne.n	80048f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d107      	bne.n	80048f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e000      	b.n	80048fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40023800 	.word	0x40023800

08004908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004912:	2300      	movs	r3, #0
 8004914:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0d0      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004920:	4b6a      	ldr	r3, [pc, #424]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 030f 	and.w	r3, r3, #15
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d910      	bls.n	8004950 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492e:	4b67      	ldr	r3, [pc, #412]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f023 020f 	bic.w	r2, r3, #15
 8004936:	4965      	ldr	r1, [pc, #404]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	4313      	orrs	r3, r2
 800493c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800493e:	4b63      	ldr	r3, [pc, #396]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	683a      	ldr	r2, [r7, #0]
 8004948:	429a      	cmp	r2, r3
 800494a:	d001      	beq.n	8004950 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0b8      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d020      	beq.n	800499e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004968:	4b59      	ldr	r3, [pc, #356]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c8>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	4a58      	ldr	r2, [pc, #352]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c8>)
 800496e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004972:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004980:	4b53      	ldr	r3, [pc, #332]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	4a52      	ldr	r2, [pc, #328]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8004986:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800498a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800498c:	4b50      	ldr	r3, [pc, #320]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c8>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	494d      	ldr	r1, [pc, #308]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c8>)
 800499a:	4313      	orrs	r3, r2
 800499c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d040      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d107      	bne.n	80049c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049b2:	4b47      	ldr	r3, [pc, #284]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d115      	bne.n	80049ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e07f      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d107      	bne.n	80049da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ca:	4b41      	ldr	r3, [pc, #260]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e073      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049da:	4b3d      	ldr	r3, [pc, #244]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e06b      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ea:	4b39      	ldr	r3, [pc, #228]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c8>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f023 0203 	bic.w	r2, r3, #3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4936      	ldr	r1, [pc, #216]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c8>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049fc:	f7fc fc92 	bl	8001324 <HAL_GetTick>
 8004a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a02:	e00a      	b.n	8004a1a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a04:	f7fc fc8e 	bl	8001324 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e053      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 020c 	and.w	r2, r3, #12
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d1eb      	bne.n	8004a04 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a2c:	4b27      	ldr	r3, [pc, #156]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d210      	bcs.n	8004a5c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3a:	4b24      	ldr	r3, [pc, #144]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f023 020f 	bic.w	r2, r3, #15
 8004a42:	4922      	ldr	r1, [pc, #136]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4a:	4b20      	ldr	r3, [pc, #128]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d001      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e032      	b.n	8004ac2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0304 	and.w	r3, r3, #4
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d008      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a68:	4b19      	ldr	r3, [pc, #100]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4916      	ldr	r1, [pc, #88]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d009      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a86:	4b12      	ldr	r3, [pc, #72]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	490e      	ldr	r1, [pc, #56]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a9a:	f000 f821 	bl	8004ae0 <HAL_RCC_GetSysClockFreq>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	091b      	lsrs	r3, r3, #4
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	490a      	ldr	r1, [pc, #40]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1cc>)
 8004aac:	5ccb      	ldrb	r3, [r1, r3]
 8004aae:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab2:	4a09      	ldr	r2, [pc, #36]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1d0>)
 8004ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ab6:	4b09      	ldr	r3, [pc, #36]	@ (8004adc <HAL_RCC_ClockConfig+0x1d4>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fc f952 	bl	8000d64 <HAL_InitTick>

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40023c00 	.word	0x40023c00
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	080267a4 	.word	0x080267a4
 8004ad8:	20000000 	.word	0x20000000
 8004adc:	20000004 	.word	0x20000004

08004ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ae4:	b094      	sub	sp, #80	@ 0x50
 8004ae6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aec:	2300      	movs	r3, #0
 8004aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004af0:	2300      	movs	r3, #0
 8004af2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004af4:	2300      	movs	r3, #0
 8004af6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004af8:	4b79      	ldr	r3, [pc, #484]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f003 030c 	and.w	r3, r3, #12
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d00d      	beq.n	8004b20 <HAL_RCC_GetSysClockFreq+0x40>
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	f200 80e1 	bhi.w	8004ccc <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <HAL_RCC_GetSysClockFreq+0x34>
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d003      	beq.n	8004b1a <HAL_RCC_GetSysClockFreq+0x3a>
 8004b12:	e0db      	b.n	8004ccc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b14:	4b73      	ldr	r3, [pc, #460]	@ (8004ce4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b18:	e0db      	b.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b1a:	4b73      	ldr	r3, [pc, #460]	@ (8004ce8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b1e:	e0d8      	b.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b20:	4b6f      	ldr	r3, [pc, #444]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b28:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b2a:	4b6d      	ldr	r3, [pc, #436]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d063      	beq.n	8004bfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b36:	4b6a      	ldr	r3, [pc, #424]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	099b      	lsrs	r3, r3, #6
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b48:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b52:	4622      	mov	r2, r4
 8004b54:	462b      	mov	r3, r5
 8004b56:	f04f 0000 	mov.w	r0, #0
 8004b5a:	f04f 0100 	mov.w	r1, #0
 8004b5e:	0159      	lsls	r1, r3, #5
 8004b60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b64:	0150      	lsls	r0, r2, #5
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	1a51      	subs	r1, r2, r1
 8004b6e:	6139      	str	r1, [r7, #16]
 8004b70:	4629      	mov	r1, r5
 8004b72:	eb63 0301 	sbc.w	r3, r3, r1
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b84:	4659      	mov	r1, fp
 8004b86:	018b      	lsls	r3, r1, #6
 8004b88:	4651      	mov	r1, sl
 8004b8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b8e:	4651      	mov	r1, sl
 8004b90:	018a      	lsls	r2, r1, #6
 8004b92:	4651      	mov	r1, sl
 8004b94:	ebb2 0801 	subs.w	r8, r2, r1
 8004b98:	4659      	mov	r1, fp
 8004b9a:	eb63 0901 	sbc.w	r9, r3, r1
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004baa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bb2:	4690      	mov	r8, r2
 8004bb4:	4699      	mov	r9, r3
 8004bb6:	4623      	mov	r3, r4
 8004bb8:	eb18 0303 	adds.w	r3, r8, r3
 8004bbc:	60bb      	str	r3, [r7, #8]
 8004bbe:	462b      	mov	r3, r5
 8004bc0:	eb49 0303 	adc.w	r3, r9, r3
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	024b      	lsls	r3, r1, #9
 8004bd6:	4621      	mov	r1, r4
 8004bd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bdc:	4621      	mov	r1, r4
 8004bde:	024a      	lsls	r2, r1, #9
 8004be0:	4610      	mov	r0, r2
 8004be2:	4619      	mov	r1, r3
 8004be4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004be6:	2200      	movs	r2, #0
 8004be8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bf0:	f7fb fb8e 	bl	8000310 <__aeabi_uldivmod>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bfc:	e058      	b.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bfe:	4b38      	ldr	r3, [pc, #224]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	099b      	lsrs	r3, r3, #6
 8004c04:	2200      	movs	r2, #0
 8004c06:	4618      	mov	r0, r3
 8004c08:	4611      	mov	r1, r2
 8004c0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c0e:	623b      	str	r3, [r7, #32]
 8004c10:	2300      	movs	r3, #0
 8004c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c18:	4642      	mov	r2, r8
 8004c1a:	464b      	mov	r3, r9
 8004c1c:	f04f 0000 	mov.w	r0, #0
 8004c20:	f04f 0100 	mov.w	r1, #0
 8004c24:	0159      	lsls	r1, r3, #5
 8004c26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c2a:	0150      	lsls	r0, r2, #5
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4641      	mov	r1, r8
 8004c32:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c36:	4649      	mov	r1, r9
 8004c38:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c50:	ebb2 040a 	subs.w	r4, r2, sl
 8004c54:	eb63 050b 	sbc.w	r5, r3, fp
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	00eb      	lsls	r3, r5, #3
 8004c62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c66:	00e2      	lsls	r2, r4, #3
 8004c68:	4614      	mov	r4, r2
 8004c6a:	461d      	mov	r5, r3
 8004c6c:	4643      	mov	r3, r8
 8004c6e:	18e3      	adds	r3, r4, r3
 8004c70:	603b      	str	r3, [r7, #0]
 8004c72:	464b      	mov	r3, r9
 8004c74:	eb45 0303 	adc.w	r3, r5, r3
 8004c78:	607b      	str	r3, [r7, #4]
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c86:	4629      	mov	r1, r5
 8004c88:	028b      	lsls	r3, r1, #10
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c90:	4621      	mov	r1, r4
 8004c92:	028a      	lsls	r2, r1, #10
 8004c94:	4610      	mov	r0, r2
 8004c96:	4619      	mov	r1, r3
 8004c98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	61fa      	str	r2, [r7, #28]
 8004ca0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ca4:	f7fb fb34 	bl	8000310 <__aeabi_uldivmod>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4613      	mov	r3, r2
 8004cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	0c1b      	lsrs	r3, r3, #16
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	3301      	adds	r3, #1
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004cc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cca:	e002      	b.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ccc:	4b05      	ldr	r3, [pc, #20]	@ (8004ce4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3750      	adds	r7, #80	@ 0x50
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cde:	bf00      	nop
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	00f42400 	.word	0x00f42400
 8004ce8:	007a1200 	.word	0x007a1200

08004cec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cec:	b480      	push	{r7}
 8004cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cf0:	4b03      	ldr	r3, [pc, #12]	@ (8004d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	20000000 	.word	0x20000000

08004d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d08:	f7ff fff0 	bl	8004cec <HAL_RCC_GetHCLKFreq>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	4b05      	ldr	r3, [pc, #20]	@ (8004d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	0a9b      	lsrs	r3, r3, #10
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	4903      	ldr	r1, [pc, #12]	@ (8004d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d1a:	5ccb      	ldrb	r3, [r1, r3]
 8004d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40023800 	.word	0x40023800
 8004d28:	080267b4 	.word	0x080267b4

08004d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d30:	f7ff ffdc 	bl	8004cec <HAL_RCC_GetHCLKFreq>
 8004d34:	4602      	mov	r2, r0
 8004d36:	4b05      	ldr	r3, [pc, #20]	@ (8004d4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	0b5b      	lsrs	r3, r3, #13
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	4903      	ldr	r1, [pc, #12]	@ (8004d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d42:	5ccb      	ldrb	r3, [r1, r3]
 8004d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	080267b4 	.word	0x080267b4

08004d54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	220f      	movs	r2, #15
 8004d62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d64:	4b12      	ldr	r3, [pc, #72]	@ (8004db0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 0203 	and.w	r2, r3, #3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d70:	4b0f      	ldr	r3, [pc, #60]	@ (8004db0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004db0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004d88:	4b09      	ldr	r3, [pc, #36]	@ (8004db0 <HAL_RCC_GetClockConfig+0x5c>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	08db      	lsrs	r3, r3, #3
 8004d8e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d96:	4b07      	ldr	r3, [pc, #28]	@ (8004db4 <HAL_RCC_GetClockConfig+0x60>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 020f 	and.w	r2, r3, #15
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	601a      	str	r2, [r3, #0]
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	40023800 	.word	0x40023800
 8004db4:	40023c00 	.word	0x40023c00

08004db8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b088      	sub	sp, #32
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d012      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004de0:	4b69      	ldr	r3, [pc, #420]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	4a68      	ldr	r2, [pc, #416]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004dea:	6093      	str	r3, [r2, #8]
 8004dec:	4b66      	ldr	r3, [pc, #408]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004df4:	4964      	ldr	r1, [pc, #400]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004e02:	2301      	movs	r3, #1
 8004e04:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d017      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e12:	4b5d      	ldr	r3, [pc, #372]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e18:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e20:	4959      	ldr	r1, [pc, #356]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e30:	d101      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e32:	2301      	movs	r3, #1
 8004e34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d017      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e4e:	4b4e      	ldr	r3, [pc, #312]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e54:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5c:	494a      	ldr	r1, [pc, #296]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e6c:	d101      	bne.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 808b 	beq.w	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e9c:	4b3a      	ldr	r3, [pc, #232]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea0:	4a39      	ldr	r2, [pc, #228]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ea6:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ea8:	4b37      	ldr	r3, [pc, #220]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eb0:	60bb      	str	r3, [r7, #8]
 8004eb2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004eb4:	4b35      	ldr	r3, [pc, #212]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a34      	ldr	r2, [pc, #208]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ebe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec0:	f7fc fa30 	bl	8001324 <HAL_GetTick>
 8004ec4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ec6:	e008      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec8:	f7fc fa2c 	bl	8001324 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b64      	cmp	r3, #100	@ 0x64
 8004ed4:	d901      	bls.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e38f      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004eda:	4b2c      	ldr	r3, [pc, #176]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0f0      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ee6:	4b28      	ldr	r3, [pc, #160]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d035      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d02e      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f04:	4b20      	ldr	r3, [pc, #128]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f0c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f12:	4a1d      	ldr	r2, [pc, #116]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f18:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f1e:	4a1a      	ldr	r2, [pc, #104]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f24:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004f26:	4a18      	ldr	r2, [pc, #96]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f2c:	4b16      	ldr	r3, [pc, #88]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d114      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fc f9f4 	bl	8001324 <HAL_GetTick>
 8004f3c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3e:	e00a      	b.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f40:	f7fc f9f0 	bl	8001324 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e351      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f56:	4b0c      	ldr	r3, [pc, #48]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0ee      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f6e:	d111      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f70:	4b05      	ldr	r3, [pc, #20]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004f7c:	4b04      	ldr	r3, [pc, #16]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f7e:	400b      	ands	r3, r1
 8004f80:	4901      	ldr	r1, [pc, #4]	@ (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	608b      	str	r3, [r1, #8]
 8004f86:	e00b      	b.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f88:	40023800 	.word	0x40023800
 8004f8c:	40007000 	.word	0x40007000
 8004f90:	0ffffcff 	.word	0x0ffffcff
 8004f94:	4bac      	ldr	r3, [pc, #688]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	4aab      	ldr	r2, [pc, #684]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f9a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004f9e:	6093      	str	r3, [r2, #8]
 8004fa0:	4ba9      	ldr	r3, [pc, #676]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fac:	49a6      	ldr	r1, [pc, #664]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0310 	and.w	r3, r3, #16
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d010      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fbe:	4ba2      	ldr	r3, [pc, #648]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fc4:	4aa0      	ldr	r2, [pc, #640]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004fce:	4b9e      	ldr	r3, [pc, #632]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd8:	499b      	ldr	r1, [pc, #620]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fec:	4b96      	ldr	r3, [pc, #600]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004ffa:	4993      	ldr	r1, [pc, #588]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800500e:	4b8e      	ldr	r3, [pc, #568]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005014:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800501c:	498a      	ldr	r1, [pc, #552]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005030:	4b85      	ldr	r3, [pc, #532]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005036:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800503e:	4982      	ldr	r1, [pc, #520]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005040:	4313      	orrs	r3, r2
 8005042:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00a      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005052:	4b7d      	ldr	r3, [pc, #500]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005058:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005060:	4979      	ldr	r1, [pc, #484]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005062:	4313      	orrs	r3, r2
 8005064:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005074:	4b74      	ldr	r3, [pc, #464]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800507a:	f023 0203 	bic.w	r2, r3, #3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005082:	4971      	ldr	r1, [pc, #452]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005084:	4313      	orrs	r3, r2
 8005086:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005096:	4b6c      	ldr	r3, [pc, #432]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800509c:	f023 020c 	bic.w	r2, r3, #12
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050a4:	4968      	ldr	r1, [pc, #416]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00a      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050b8:	4b63      	ldr	r3, [pc, #396]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050be:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050c6:	4960      	ldr	r1, [pc, #384]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050da:	4b5b      	ldr	r3, [pc, #364]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050e0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050e8:	4957      	ldr	r1, [pc, #348]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00a      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050fc:	4b52      	ldr	r3, [pc, #328]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005102:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800510a:	494f      	ldr	r1, [pc, #316]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800511e:	4b4a      	ldr	r3, [pc, #296]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005124:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800512c:	4946      	ldr	r1, [pc, #280]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00a      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005140:	4b41      	ldr	r3, [pc, #260]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005146:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800514e:	493e      	ldr	r1, [pc, #248]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005150:	4313      	orrs	r3, r2
 8005152:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005162:	4b39      	ldr	r3, [pc, #228]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005168:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005170:	4935      	ldr	r1, [pc, #212]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005184:	4b30      	ldr	r3, [pc, #192]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800518a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005192:	492d      	ldr	r1, [pc, #180]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d011      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80051a6:	4b28      	ldr	r3, [pc, #160]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ac:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051b4:	4924      	ldr	r1, [pc, #144]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051c4:	d101      	bne.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80051c6:	2301      	movs	r3, #1
 80051c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80051d6:	2301      	movs	r3, #1
 80051d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051e6:	4b18      	ldr	r3, [pc, #96]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ec:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051f4:	4914      	ldr	r1, [pc, #80]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00b      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005208:	4b0f      	ldr	r3, [pc, #60]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800520a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800520e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005218:	490b      	ldr	r1, [pc, #44]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800521a:	4313      	orrs	r3, r2
 800521c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00f      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800522c:	4b06      	ldr	r3, [pc, #24]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800522e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005232:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800523c:	4902      	ldr	r1, [pc, #8]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005244:	e002      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005246:	bf00      	nop
 8005248:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00b      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005258:	4b8a      	ldr	r3, [pc, #552]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800525a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800525e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005268:	4986      	ldr	r1, [pc, #536]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00b      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800527c:	4b81      	ldr	r3, [pc, #516]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800527e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005282:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800528c:	497d      	ldr	r1, [pc, #500]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800528e:	4313      	orrs	r3, r2
 8005290:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d006      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80d6 	beq.w	8005454 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052a8:	4b76      	ldr	r3, [pc, #472]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a75      	ldr	r2, [pc, #468]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b4:	f7fc f836 	bl	8001324 <HAL_GetTick>
 80052b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052ba:	e008      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052bc:	f7fc f832 	bl	8001324 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b64      	cmp	r3, #100	@ 0x64
 80052c8:	d901      	bls.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e195      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052ce:	4b6d      	ldr	r3, [pc, #436]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f0      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d021      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d11d      	bne.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052ee:	4b65      	ldr	r3, [pc, #404]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052f4:	0c1b      	lsrs	r3, r3, #16
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052fc:	4b61      	ldr	r3, [pc, #388]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005302:	0e1b      	lsrs	r3, r3, #24
 8005304:	f003 030f 	and.w	r3, r3, #15
 8005308:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	019a      	lsls	r2, r3, #6
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	041b      	lsls	r3, r3, #16
 8005314:	431a      	orrs	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	061b      	lsls	r3, r3, #24
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	071b      	lsls	r3, r3, #28
 8005322:	4958      	ldr	r1, [pc, #352]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005324:	4313      	orrs	r3, r2
 8005326:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d004      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800533e:	d00a      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005348:	2b00      	cmp	r3, #0
 800534a:	d02e      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005350:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005354:	d129      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005356:	4b4b      	ldr	r3, [pc, #300]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005358:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800535c:	0c1b      	lsrs	r3, r3, #16
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005364:	4b47      	ldr	r3, [pc, #284]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005366:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800536a:	0f1b      	lsrs	r3, r3, #28
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	019a      	lsls	r2, r3, #6
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	041b      	lsls	r3, r3, #16
 800537c:	431a      	orrs	r2, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	061b      	lsls	r3, r3, #24
 8005384:	431a      	orrs	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	071b      	lsls	r3, r3, #28
 800538a:	493e      	ldr	r1, [pc, #248]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005392:	4b3c      	ldr	r3, [pc, #240]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005394:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005398:	f023 021f 	bic.w	r2, r3, #31
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a0:	3b01      	subs	r3, #1
 80053a2:	4938      	ldr	r1, [pc, #224]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d01d      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053b6:	4b33      	ldr	r3, [pc, #204]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053bc:	0e1b      	lsrs	r3, r3, #24
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053c4:	4b2f      	ldr	r3, [pc, #188]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053ca:	0f1b      	lsrs	r3, r3, #28
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	019a      	lsls	r2, r3, #6
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	041b      	lsls	r3, r3, #16
 80053de:	431a      	orrs	r2, r3
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	061b      	lsls	r3, r3, #24
 80053e4:	431a      	orrs	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	071b      	lsls	r3, r3, #28
 80053ea:	4926      	ldr	r1, [pc, #152]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d011      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	019a      	lsls	r2, r3, #6
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	041b      	lsls	r3, r3, #16
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	061b      	lsls	r3, r3, #24
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	071b      	lsls	r3, r3, #28
 800541a:	491a      	ldr	r1, [pc, #104]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005422:	4b18      	ldr	r3, [pc, #96]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a17      	ldr	r2, [pc, #92]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005428:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800542c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800542e:	f7fb ff79 	bl	8001324 <HAL_GetTick>
 8005432:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005434:	e008      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005436:	f7fb ff75 	bl	8001324 <HAL_GetTick>
 800543a:	4602      	mov	r2, r0
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	2b64      	cmp	r3, #100	@ 0x64
 8005442:	d901      	bls.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e0d8      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005448:	4b0e      	ldr	r3, [pc, #56]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0f0      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	2b01      	cmp	r3, #1
 8005458:	f040 80ce 	bne.w	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800545c:	4b09      	ldr	r3, [pc, #36]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a08      	ldr	r2, [pc, #32]	@ (8005484 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005462:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005468:	f7fb ff5c 	bl	8001324 <HAL_GetTick>
 800546c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800546e:	e00b      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005470:	f7fb ff58 	bl	8001324 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b64      	cmp	r3, #100	@ 0x64
 800547c:	d904      	bls.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e0bb      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005482:	bf00      	nop
 8005484:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005488:	4b5e      	ldr	r3, [pc, #376]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005494:	d0ec      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d009      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d02e      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d12a      	bne.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80054be:	4b51      	ldr	r3, [pc, #324]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c4:	0c1b      	lsrs	r3, r3, #16
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054cc:	4b4d      	ldr	r3, [pc, #308]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d2:	0f1b      	lsrs	r3, r3, #28
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	019a      	lsls	r2, r3, #6
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	041b      	lsls	r3, r3, #16
 80054e4:	431a      	orrs	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	061b      	lsls	r3, r3, #24
 80054ec:	431a      	orrs	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	071b      	lsls	r3, r3, #28
 80054f2:	4944      	ldr	r1, [pc, #272]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054fa:	4b42      	ldr	r3, [pc, #264]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005500:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005508:	3b01      	subs	r3, #1
 800550a:	021b      	lsls	r3, r3, #8
 800550c:	493d      	ldr	r1, [pc, #244]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d022      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005524:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005528:	d11d      	bne.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800552a:	4b36      	ldr	r3, [pc, #216]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005530:	0e1b      	lsrs	r3, r3, #24
 8005532:	f003 030f 	and.w	r3, r3, #15
 8005536:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005538:	4b32      	ldr	r3, [pc, #200]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800553e:	0f1b      	lsrs	r3, r3, #28
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	019a      	lsls	r2, r3, #6
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	041b      	lsls	r3, r3, #16
 8005552:	431a      	orrs	r2, r3
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	061b      	lsls	r3, r3, #24
 8005558:	431a      	orrs	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	071b      	lsls	r3, r3, #28
 800555e:	4929      	ldr	r1, [pc, #164]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005560:	4313      	orrs	r3, r2
 8005562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0308 	and.w	r3, r3, #8
 800556e:	2b00      	cmp	r3, #0
 8005570:	d028      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005572:	4b24      	ldr	r3, [pc, #144]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005578:	0e1b      	lsrs	r3, r3, #24
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005580:	4b20      	ldr	r3, [pc, #128]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005586:	0c1b      	lsrs	r3, r3, #16
 8005588:	f003 0303 	and.w	r3, r3, #3
 800558c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	019a      	lsls	r2, r3, #6
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	041b      	lsls	r3, r3, #16
 8005598:	431a      	orrs	r2, r3
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	061b      	lsls	r3, r3, #24
 800559e:	431a      	orrs	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	69db      	ldr	r3, [r3, #28]
 80055a4:	071b      	lsls	r3, r3, #28
 80055a6:	4917      	ldr	r1, [pc, #92]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055ae:	4b15      	ldr	r3, [pc, #84]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055bc:	4911      	ldr	r1, [pc, #68]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055c4:	4b0f      	ldr	r3, [pc, #60]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a0e      	ldr	r2, [pc, #56]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055d0:	f7fb fea8 	bl	8001324 <HAL_GetTick>
 80055d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055d6:	e008      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055d8:	f7fb fea4 	bl	8001324 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b64      	cmp	r3, #100	@ 0x64
 80055e4:	d901      	bls.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e007      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055ea:	4b06      	ldr	r3, [pc, #24]	@ (8005604 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055f6:	d1ef      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3720      	adds	r7, #32
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	40023800 	.word	0x40023800

08005608 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e071      	b.n	80056fe <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	7f5b      	ldrb	r3, [r3, #29]
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d105      	bne.n	8005630 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7fb fb0c 	bl	8000c48 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f003 0310 	and.w	r3, r3, #16
 8005640:	2b10      	cmp	r3, #16
 8005642:	d053      	beq.n	80056ec <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	22ca      	movs	r2, #202	@ 0xca
 800564a:	625a      	str	r2, [r3, #36]	@ 0x24
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2253      	movs	r2, #83	@ 0x53
 8005652:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f87f 	bl	8005758 <RTC_EnterInitMode>
 800565a:	4603      	mov	r3, r0
 800565c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800565e:	7bfb      	ldrb	r3, [r7, #15]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d12a      	bne.n	80056ba <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6899      	ldr	r1, [r3, #8]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	4b26      	ldr	r3, [pc, #152]	@ (8005708 <HAL_RTC_Init+0x100>)
 8005670:	400b      	ands	r3, r1
 8005672:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6899      	ldr	r1, [r3, #8]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	431a      	orrs	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	68d2      	ldr	r2, [r2, #12]
 800569a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6919      	ldr	r1, [r3, #16]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	041a      	lsls	r2, r3, #16
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f888 	bl	80057c6 <RTC_ExitInitMode>
 80056b6:	4603      	mov	r3, r0
 80056b8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d110      	bne.n	80056e2 <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0208 	bic.w	r2, r2, #8
 80056ce:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699a      	ldr	r2, [r3, #24]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	22ff      	movs	r2, #255	@ 0xff
 80056e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80056ea:	e001      	b.n	80056f0 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d102      	bne.n	80056fc <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	ff8fffbf 	.word	0xff8fffbf

0800570c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a0d      	ldr	r2, [pc, #52]	@ (8005754 <HAL_RTC_WaitForSynchro+0x48>)
 800571e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005720:	f7fb fe00 	bl	8001324 <HAL_GetTick>
 8005724:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005726:	e009      	b.n	800573c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005728:	f7fb fdfc 	bl	8001324 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005736:	d901      	bls.n	800573c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e007      	b.n	800574c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0ee      	beq.n	8005728 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	0001ff5f 	.word	0x0001ff5f

08005758 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005764:	2300      	movs	r3, #0
 8005766:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005772:	2b00      	cmp	r3, #0
 8005774:	d122      	bne.n	80057bc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005784:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005786:	f7fb fdcd 	bl	8001324 <HAL_GetTick>
 800578a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800578c:	e00c      	b.n	80057a8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800578e:	f7fb fdc9 	bl	8001324 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800579c:	d904      	bls.n	80057a8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2204      	movs	r2, #4
 80057a2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d102      	bne.n	80057bc <RTC_EnterInitMode+0x64>
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d1e8      	bne.n	800578e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b084      	sub	sp, #16
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68da      	ldr	r2, [r3, #12]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057e0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 0320 	and.w	r3, r3, #32
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff ff8b 	bl	800570c <HAL_RTC_WaitForSynchro>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d004      	beq.n	8005806 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2204      	movs	r2, #4
 8005800:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005806:	7bfb      	ldrb	r3, [r7, #15]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e049      	b.n	80058b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d106      	bne.n	800583c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f841 	bl	80058be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3304      	adds	r3, #4
 800584c:	4619      	mov	r1, r3
 800584e:	4610      	mov	r0, r2
 8005850:	f000 f9e8 	bl	8005c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80058be:	b480      	push	{r7}
 80058c0:	b083      	sub	sp, #12
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
	...

080058d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d001      	beq.n	80058ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e054      	b.n	8005996 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68da      	ldr	r2, [r3, #12]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 0201 	orr.w	r2, r2, #1
 8005902:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a26      	ldr	r2, [pc, #152]	@ (80059a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d022      	beq.n	8005954 <HAL_TIM_Base_Start_IT+0x80>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005916:	d01d      	beq.n	8005954 <HAL_TIM_Base_Start_IT+0x80>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a22      	ldr	r2, [pc, #136]	@ (80059a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d018      	beq.n	8005954 <HAL_TIM_Base_Start_IT+0x80>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a21      	ldr	r2, [pc, #132]	@ (80059ac <HAL_TIM_Base_Start_IT+0xd8>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d013      	beq.n	8005954 <HAL_TIM_Base_Start_IT+0x80>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a1f      	ldr	r2, [pc, #124]	@ (80059b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d00e      	beq.n	8005954 <HAL_TIM_Base_Start_IT+0x80>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a1e      	ldr	r2, [pc, #120]	@ (80059b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d009      	beq.n	8005954 <HAL_TIM_Base_Start_IT+0x80>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a1c      	ldr	r2, [pc, #112]	@ (80059b8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d004      	beq.n	8005954 <HAL_TIM_Base_Start_IT+0x80>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a1b      	ldr	r2, [pc, #108]	@ (80059bc <HAL_TIM_Base_Start_IT+0xe8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d115      	bne.n	8005980 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689a      	ldr	r2, [r3, #8]
 800595a:	4b19      	ldr	r3, [pc, #100]	@ (80059c0 <HAL_TIM_Base_Start_IT+0xec>)
 800595c:	4013      	ands	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2b06      	cmp	r3, #6
 8005964:	d015      	beq.n	8005992 <HAL_TIM_Base_Start_IT+0xbe>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800596c:	d011      	beq.n	8005992 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 0201 	orr.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800597e:	e008      	b.n	8005992 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0201 	orr.w	r2, r2, #1
 800598e:	601a      	str	r2, [r3, #0]
 8005990:	e000      	b.n	8005994 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005992:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40010000 	.word	0x40010000
 80059a8:	40000400 	.word	0x40000400
 80059ac:	40000800 	.word	0x40000800
 80059b0:	40000c00 	.word	0x40000c00
 80059b4:	40010400 	.word	0x40010400
 80059b8:	40014000 	.word	0x40014000
 80059bc:	40001800 	.word	0x40001800
 80059c0:	00010007 	.word	0x00010007

080059c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d020      	beq.n	8005a28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d01b      	beq.n	8005a28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f06f 0202 	mvn.w	r2, #2
 80059f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	f003 0303 	and.w	r3, r3, #3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f8e9 	bl	8005be6 <HAL_TIM_IC_CaptureCallback>
 8005a14:	e005      	b.n	8005a22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f8db 	bl	8005bd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f8ec 	bl	8005bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f003 0304 	and.w	r3, r3, #4
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d020      	beq.n	8005a74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d01b      	beq.n	8005a74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f06f 0204 	mvn.w	r2, #4
 8005a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2202      	movs	r2, #2
 8005a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f8c3 	bl	8005be6 <HAL_TIM_IC_CaptureCallback>
 8005a60:	e005      	b.n	8005a6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f8b5 	bl	8005bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f8c6 	bl	8005bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d020      	beq.n	8005ac0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01b      	beq.n	8005ac0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f06f 0208 	mvn.w	r2, #8
 8005a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2204      	movs	r2, #4
 8005a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	f003 0303 	and.w	r3, r3, #3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f89d 	bl	8005be6 <HAL_TIM_IC_CaptureCallback>
 8005aac:	e005      	b.n	8005aba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f88f 	bl	8005bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f8a0 	bl	8005bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f003 0310 	and.w	r3, r3, #16
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d020      	beq.n	8005b0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f003 0310 	and.w	r3, r3, #16
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d01b      	beq.n	8005b0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f06f 0210 	mvn.w	r2, #16
 8005adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2208      	movs	r2, #8
 8005ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d003      	beq.n	8005afa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f877 	bl	8005be6 <HAL_TIM_IC_CaptureCallback>
 8005af8:	e005      	b.n	8005b06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f869 	bl	8005bd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f87a 	bl	8005bfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00c      	beq.n	8005b30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d007      	beq.n	8005b30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f06f 0201 	mvn.w	r2, #1
 8005b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7fb f84c 	bl	8000bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d104      	bne.n	8005b44 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00c      	beq.n	8005b5e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d007      	beq.n	8005b5e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f913 	bl	8005d84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00c      	beq.n	8005b82 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d007      	beq.n	8005b82 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f90b 	bl	8005d98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00c      	beq.n	8005ba6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d007      	beq.n	8005ba6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f834 	bl	8005c0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f003 0320 	and.w	r3, r3, #32
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00c      	beq.n	8005bca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f003 0320 	and.w	r3, r3, #32
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d007      	beq.n	8005bca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f06f 0220 	mvn.w	r2, #32
 8005bc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 f8d3 	bl	8005d70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bca:	bf00      	nop
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b083      	sub	sp, #12
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bee:	bf00      	nop
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b083      	sub	sp, #12
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
	...

08005c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a43      	ldr	r2, [pc, #268]	@ (8005d44 <TIM_Base_SetConfig+0x120>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d013      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c42:	d00f      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a40      	ldr	r2, [pc, #256]	@ (8005d48 <TIM_Base_SetConfig+0x124>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00b      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a3f      	ldr	r2, [pc, #252]	@ (8005d4c <TIM_Base_SetConfig+0x128>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d007      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a3e      	ldr	r2, [pc, #248]	@ (8005d50 <TIM_Base_SetConfig+0x12c>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d003      	beq.n	8005c64 <TIM_Base_SetConfig+0x40>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a3d      	ldr	r2, [pc, #244]	@ (8005d54 <TIM_Base_SetConfig+0x130>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d108      	bne.n	8005c76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a32      	ldr	r2, [pc, #200]	@ (8005d44 <TIM_Base_SetConfig+0x120>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d02b      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c84:	d027      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a2f      	ldr	r2, [pc, #188]	@ (8005d48 <TIM_Base_SetConfig+0x124>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d023      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a2e      	ldr	r2, [pc, #184]	@ (8005d4c <TIM_Base_SetConfig+0x128>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d01f      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a2d      	ldr	r2, [pc, #180]	@ (8005d50 <TIM_Base_SetConfig+0x12c>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d01b      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a2c      	ldr	r2, [pc, #176]	@ (8005d54 <TIM_Base_SetConfig+0x130>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d017      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a2b      	ldr	r2, [pc, #172]	@ (8005d58 <TIM_Base_SetConfig+0x134>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d013      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a2a      	ldr	r2, [pc, #168]	@ (8005d5c <TIM_Base_SetConfig+0x138>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d00f      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a29      	ldr	r2, [pc, #164]	@ (8005d60 <TIM_Base_SetConfig+0x13c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00b      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a28      	ldr	r2, [pc, #160]	@ (8005d64 <TIM_Base_SetConfig+0x140>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d007      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a27      	ldr	r2, [pc, #156]	@ (8005d68 <TIM_Base_SetConfig+0x144>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d003      	beq.n	8005cd6 <TIM_Base_SetConfig+0xb2>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a26      	ldr	r2, [pc, #152]	@ (8005d6c <TIM_Base_SetConfig+0x148>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d108      	bne.n	8005ce8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	689a      	ldr	r2, [r3, #8]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a0e      	ldr	r2, [pc, #56]	@ (8005d44 <TIM_Base_SetConfig+0x120>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d003      	beq.n	8005d16 <TIM_Base_SetConfig+0xf2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a10      	ldr	r2, [pc, #64]	@ (8005d54 <TIM_Base_SetConfig+0x130>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d103      	bne.n	8005d1e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f043 0204 	orr.w	r2, r3, #4
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	601a      	str	r2, [r3, #0]
}
 8005d36:	bf00      	nop
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	40010000 	.word	0x40010000
 8005d48:	40000400 	.word	0x40000400
 8005d4c:	40000800 	.word	0x40000800
 8005d50:	40000c00 	.word	0x40000c00
 8005d54:	40010400 	.word	0x40010400
 8005d58:	40014000 	.word	0x40014000
 8005d5c:	40014400 	.word	0x40014400
 8005d60:	40014800 	.word	0x40014800
 8005d64:	40001800 	.word	0x40001800
 8005d68:	40001c00 	.word	0x40001c00
 8005d6c:	40002000 	.word	0x40002000

08005d70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e040      	b.n	8005e40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d106      	bne.n	8005dd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7fa ff68 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2224      	movs	r2, #36	@ 0x24
 8005dd8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0201 	bic.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fa8c 	bl	8006310 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f825 	bl	8005e48 <UART_SetConfig>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e01b      	b.n	8005e40 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689a      	ldr	r2, [r3, #8]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0201 	orr.w	r2, r2, #1
 8005e36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fb0b 	bl	8006454 <UART_CheckIdleState>
 8005e3e:	4603      	mov	r3, r0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	689a      	ldr	r2, [r3, #8]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	4ba6      	ldr	r3, [pc, #664]	@ (800610c <UART_SetConfig+0x2c4>)
 8005e74:	4013      	ands	r3, r2
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6812      	ldr	r2, [r2, #0]
 8005e7a:	6979      	ldr	r1, [r7, #20]
 8005e7c:	430b      	orrs	r3, r1
 8005e7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	430a      	orrs	r2, r1
 8005e94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a94      	ldr	r2, [pc, #592]	@ (8006110 <UART_SetConfig+0x2c8>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d120      	bne.n	8005f06 <UART_SetConfig+0xbe>
 8005ec4:	4b93      	ldr	r3, [pc, #588]	@ (8006114 <UART_SetConfig+0x2cc>)
 8005ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d816      	bhi.n	8005f00 <UART_SetConfig+0xb8>
 8005ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ed8 <UART_SetConfig+0x90>)
 8005ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed8:	08005ee9 	.word	0x08005ee9
 8005edc:	08005ef5 	.word	0x08005ef5
 8005ee0:	08005eef 	.word	0x08005eef
 8005ee4:	08005efb 	.word	0x08005efb
 8005ee8:	2301      	movs	r3, #1
 8005eea:	77fb      	strb	r3, [r7, #31]
 8005eec:	e150      	b.n	8006190 <UART_SetConfig+0x348>
 8005eee:	2302      	movs	r3, #2
 8005ef0:	77fb      	strb	r3, [r7, #31]
 8005ef2:	e14d      	b.n	8006190 <UART_SetConfig+0x348>
 8005ef4:	2304      	movs	r3, #4
 8005ef6:	77fb      	strb	r3, [r7, #31]
 8005ef8:	e14a      	b.n	8006190 <UART_SetConfig+0x348>
 8005efa:	2308      	movs	r3, #8
 8005efc:	77fb      	strb	r3, [r7, #31]
 8005efe:	e147      	b.n	8006190 <UART_SetConfig+0x348>
 8005f00:	2310      	movs	r3, #16
 8005f02:	77fb      	strb	r3, [r7, #31]
 8005f04:	e144      	b.n	8006190 <UART_SetConfig+0x348>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a83      	ldr	r2, [pc, #524]	@ (8006118 <UART_SetConfig+0x2d0>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d132      	bne.n	8005f76 <UART_SetConfig+0x12e>
 8005f10:	4b80      	ldr	r3, [pc, #512]	@ (8006114 <UART_SetConfig+0x2cc>)
 8005f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f16:	f003 030c 	and.w	r3, r3, #12
 8005f1a:	2b0c      	cmp	r3, #12
 8005f1c:	d828      	bhi.n	8005f70 <UART_SetConfig+0x128>
 8005f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f24 <UART_SetConfig+0xdc>)
 8005f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f24:	08005f59 	.word	0x08005f59
 8005f28:	08005f71 	.word	0x08005f71
 8005f2c:	08005f71 	.word	0x08005f71
 8005f30:	08005f71 	.word	0x08005f71
 8005f34:	08005f65 	.word	0x08005f65
 8005f38:	08005f71 	.word	0x08005f71
 8005f3c:	08005f71 	.word	0x08005f71
 8005f40:	08005f71 	.word	0x08005f71
 8005f44:	08005f5f 	.word	0x08005f5f
 8005f48:	08005f71 	.word	0x08005f71
 8005f4c:	08005f71 	.word	0x08005f71
 8005f50:	08005f71 	.word	0x08005f71
 8005f54:	08005f6b 	.word	0x08005f6b
 8005f58:	2300      	movs	r3, #0
 8005f5a:	77fb      	strb	r3, [r7, #31]
 8005f5c:	e118      	b.n	8006190 <UART_SetConfig+0x348>
 8005f5e:	2302      	movs	r3, #2
 8005f60:	77fb      	strb	r3, [r7, #31]
 8005f62:	e115      	b.n	8006190 <UART_SetConfig+0x348>
 8005f64:	2304      	movs	r3, #4
 8005f66:	77fb      	strb	r3, [r7, #31]
 8005f68:	e112      	b.n	8006190 <UART_SetConfig+0x348>
 8005f6a:	2308      	movs	r3, #8
 8005f6c:	77fb      	strb	r3, [r7, #31]
 8005f6e:	e10f      	b.n	8006190 <UART_SetConfig+0x348>
 8005f70:	2310      	movs	r3, #16
 8005f72:	77fb      	strb	r3, [r7, #31]
 8005f74:	e10c      	b.n	8006190 <UART_SetConfig+0x348>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a68      	ldr	r2, [pc, #416]	@ (800611c <UART_SetConfig+0x2d4>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d120      	bne.n	8005fc2 <UART_SetConfig+0x17a>
 8005f80:	4b64      	ldr	r3, [pc, #400]	@ (8006114 <UART_SetConfig+0x2cc>)
 8005f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f86:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005f8a:	2b30      	cmp	r3, #48	@ 0x30
 8005f8c:	d013      	beq.n	8005fb6 <UART_SetConfig+0x16e>
 8005f8e:	2b30      	cmp	r3, #48	@ 0x30
 8005f90:	d814      	bhi.n	8005fbc <UART_SetConfig+0x174>
 8005f92:	2b20      	cmp	r3, #32
 8005f94:	d009      	beq.n	8005faa <UART_SetConfig+0x162>
 8005f96:	2b20      	cmp	r3, #32
 8005f98:	d810      	bhi.n	8005fbc <UART_SetConfig+0x174>
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <UART_SetConfig+0x15c>
 8005f9e:	2b10      	cmp	r3, #16
 8005fa0:	d006      	beq.n	8005fb0 <UART_SetConfig+0x168>
 8005fa2:	e00b      	b.n	8005fbc <UART_SetConfig+0x174>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	77fb      	strb	r3, [r7, #31]
 8005fa8:	e0f2      	b.n	8006190 <UART_SetConfig+0x348>
 8005faa:	2302      	movs	r3, #2
 8005fac:	77fb      	strb	r3, [r7, #31]
 8005fae:	e0ef      	b.n	8006190 <UART_SetConfig+0x348>
 8005fb0:	2304      	movs	r3, #4
 8005fb2:	77fb      	strb	r3, [r7, #31]
 8005fb4:	e0ec      	b.n	8006190 <UART_SetConfig+0x348>
 8005fb6:	2308      	movs	r3, #8
 8005fb8:	77fb      	strb	r3, [r7, #31]
 8005fba:	e0e9      	b.n	8006190 <UART_SetConfig+0x348>
 8005fbc:	2310      	movs	r3, #16
 8005fbe:	77fb      	strb	r3, [r7, #31]
 8005fc0:	e0e6      	b.n	8006190 <UART_SetConfig+0x348>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a56      	ldr	r2, [pc, #344]	@ (8006120 <UART_SetConfig+0x2d8>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d120      	bne.n	800600e <UART_SetConfig+0x1c6>
 8005fcc:	4b51      	ldr	r3, [pc, #324]	@ (8006114 <UART_SetConfig+0x2cc>)
 8005fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fd2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005fd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005fd8:	d013      	beq.n	8006002 <UART_SetConfig+0x1ba>
 8005fda:	2bc0      	cmp	r3, #192	@ 0xc0
 8005fdc:	d814      	bhi.n	8006008 <UART_SetConfig+0x1c0>
 8005fde:	2b80      	cmp	r3, #128	@ 0x80
 8005fe0:	d009      	beq.n	8005ff6 <UART_SetConfig+0x1ae>
 8005fe2:	2b80      	cmp	r3, #128	@ 0x80
 8005fe4:	d810      	bhi.n	8006008 <UART_SetConfig+0x1c0>
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <UART_SetConfig+0x1a8>
 8005fea:	2b40      	cmp	r3, #64	@ 0x40
 8005fec:	d006      	beq.n	8005ffc <UART_SetConfig+0x1b4>
 8005fee:	e00b      	b.n	8006008 <UART_SetConfig+0x1c0>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	77fb      	strb	r3, [r7, #31]
 8005ff4:	e0cc      	b.n	8006190 <UART_SetConfig+0x348>
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	77fb      	strb	r3, [r7, #31]
 8005ffa:	e0c9      	b.n	8006190 <UART_SetConfig+0x348>
 8005ffc:	2304      	movs	r3, #4
 8005ffe:	77fb      	strb	r3, [r7, #31]
 8006000:	e0c6      	b.n	8006190 <UART_SetConfig+0x348>
 8006002:	2308      	movs	r3, #8
 8006004:	77fb      	strb	r3, [r7, #31]
 8006006:	e0c3      	b.n	8006190 <UART_SetConfig+0x348>
 8006008:	2310      	movs	r3, #16
 800600a:	77fb      	strb	r3, [r7, #31]
 800600c:	e0c0      	b.n	8006190 <UART_SetConfig+0x348>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a44      	ldr	r2, [pc, #272]	@ (8006124 <UART_SetConfig+0x2dc>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d125      	bne.n	8006064 <UART_SetConfig+0x21c>
 8006018:	4b3e      	ldr	r3, [pc, #248]	@ (8006114 <UART_SetConfig+0x2cc>)
 800601a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800601e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006022:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006026:	d017      	beq.n	8006058 <UART_SetConfig+0x210>
 8006028:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800602c:	d817      	bhi.n	800605e <UART_SetConfig+0x216>
 800602e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006032:	d00b      	beq.n	800604c <UART_SetConfig+0x204>
 8006034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006038:	d811      	bhi.n	800605e <UART_SetConfig+0x216>
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <UART_SetConfig+0x1fe>
 800603e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006042:	d006      	beq.n	8006052 <UART_SetConfig+0x20a>
 8006044:	e00b      	b.n	800605e <UART_SetConfig+0x216>
 8006046:	2300      	movs	r3, #0
 8006048:	77fb      	strb	r3, [r7, #31]
 800604a:	e0a1      	b.n	8006190 <UART_SetConfig+0x348>
 800604c:	2302      	movs	r3, #2
 800604e:	77fb      	strb	r3, [r7, #31]
 8006050:	e09e      	b.n	8006190 <UART_SetConfig+0x348>
 8006052:	2304      	movs	r3, #4
 8006054:	77fb      	strb	r3, [r7, #31]
 8006056:	e09b      	b.n	8006190 <UART_SetConfig+0x348>
 8006058:	2308      	movs	r3, #8
 800605a:	77fb      	strb	r3, [r7, #31]
 800605c:	e098      	b.n	8006190 <UART_SetConfig+0x348>
 800605e:	2310      	movs	r3, #16
 8006060:	77fb      	strb	r3, [r7, #31]
 8006062:	e095      	b.n	8006190 <UART_SetConfig+0x348>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a2f      	ldr	r2, [pc, #188]	@ (8006128 <UART_SetConfig+0x2e0>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d125      	bne.n	80060ba <UART_SetConfig+0x272>
 800606e:	4b29      	ldr	r3, [pc, #164]	@ (8006114 <UART_SetConfig+0x2cc>)
 8006070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006074:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006078:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800607c:	d017      	beq.n	80060ae <UART_SetConfig+0x266>
 800607e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006082:	d817      	bhi.n	80060b4 <UART_SetConfig+0x26c>
 8006084:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006088:	d00b      	beq.n	80060a2 <UART_SetConfig+0x25a>
 800608a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800608e:	d811      	bhi.n	80060b4 <UART_SetConfig+0x26c>
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <UART_SetConfig+0x254>
 8006094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006098:	d006      	beq.n	80060a8 <UART_SetConfig+0x260>
 800609a:	e00b      	b.n	80060b4 <UART_SetConfig+0x26c>
 800609c:	2301      	movs	r3, #1
 800609e:	77fb      	strb	r3, [r7, #31]
 80060a0:	e076      	b.n	8006190 <UART_SetConfig+0x348>
 80060a2:	2302      	movs	r3, #2
 80060a4:	77fb      	strb	r3, [r7, #31]
 80060a6:	e073      	b.n	8006190 <UART_SetConfig+0x348>
 80060a8:	2304      	movs	r3, #4
 80060aa:	77fb      	strb	r3, [r7, #31]
 80060ac:	e070      	b.n	8006190 <UART_SetConfig+0x348>
 80060ae:	2308      	movs	r3, #8
 80060b0:	77fb      	strb	r3, [r7, #31]
 80060b2:	e06d      	b.n	8006190 <UART_SetConfig+0x348>
 80060b4:	2310      	movs	r3, #16
 80060b6:	77fb      	strb	r3, [r7, #31]
 80060b8:	e06a      	b.n	8006190 <UART_SetConfig+0x348>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a1b      	ldr	r2, [pc, #108]	@ (800612c <UART_SetConfig+0x2e4>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d138      	bne.n	8006136 <UART_SetConfig+0x2ee>
 80060c4:	4b13      	ldr	r3, [pc, #76]	@ (8006114 <UART_SetConfig+0x2cc>)
 80060c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ca:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80060ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80060d2:	d017      	beq.n	8006104 <UART_SetConfig+0x2bc>
 80060d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80060d8:	d82a      	bhi.n	8006130 <UART_SetConfig+0x2e8>
 80060da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060de:	d00b      	beq.n	80060f8 <UART_SetConfig+0x2b0>
 80060e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060e4:	d824      	bhi.n	8006130 <UART_SetConfig+0x2e8>
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d003      	beq.n	80060f2 <UART_SetConfig+0x2aa>
 80060ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ee:	d006      	beq.n	80060fe <UART_SetConfig+0x2b6>
 80060f0:	e01e      	b.n	8006130 <UART_SetConfig+0x2e8>
 80060f2:	2300      	movs	r3, #0
 80060f4:	77fb      	strb	r3, [r7, #31]
 80060f6:	e04b      	b.n	8006190 <UART_SetConfig+0x348>
 80060f8:	2302      	movs	r3, #2
 80060fa:	77fb      	strb	r3, [r7, #31]
 80060fc:	e048      	b.n	8006190 <UART_SetConfig+0x348>
 80060fe:	2304      	movs	r3, #4
 8006100:	77fb      	strb	r3, [r7, #31]
 8006102:	e045      	b.n	8006190 <UART_SetConfig+0x348>
 8006104:	2308      	movs	r3, #8
 8006106:	77fb      	strb	r3, [r7, #31]
 8006108:	e042      	b.n	8006190 <UART_SetConfig+0x348>
 800610a:	bf00      	nop
 800610c:	efff69f3 	.word	0xefff69f3
 8006110:	40011000 	.word	0x40011000
 8006114:	40023800 	.word	0x40023800
 8006118:	40004400 	.word	0x40004400
 800611c:	40004800 	.word	0x40004800
 8006120:	40004c00 	.word	0x40004c00
 8006124:	40005000 	.word	0x40005000
 8006128:	40011400 	.word	0x40011400
 800612c:	40007800 	.word	0x40007800
 8006130:	2310      	movs	r3, #16
 8006132:	77fb      	strb	r3, [r7, #31]
 8006134:	e02c      	b.n	8006190 <UART_SetConfig+0x348>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a72      	ldr	r2, [pc, #456]	@ (8006304 <UART_SetConfig+0x4bc>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d125      	bne.n	800618c <UART_SetConfig+0x344>
 8006140:	4b71      	ldr	r3, [pc, #452]	@ (8006308 <UART_SetConfig+0x4c0>)
 8006142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006146:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800614a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800614e:	d017      	beq.n	8006180 <UART_SetConfig+0x338>
 8006150:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006154:	d817      	bhi.n	8006186 <UART_SetConfig+0x33e>
 8006156:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800615a:	d00b      	beq.n	8006174 <UART_SetConfig+0x32c>
 800615c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006160:	d811      	bhi.n	8006186 <UART_SetConfig+0x33e>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <UART_SetConfig+0x326>
 8006166:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800616a:	d006      	beq.n	800617a <UART_SetConfig+0x332>
 800616c:	e00b      	b.n	8006186 <UART_SetConfig+0x33e>
 800616e:	2300      	movs	r3, #0
 8006170:	77fb      	strb	r3, [r7, #31]
 8006172:	e00d      	b.n	8006190 <UART_SetConfig+0x348>
 8006174:	2302      	movs	r3, #2
 8006176:	77fb      	strb	r3, [r7, #31]
 8006178:	e00a      	b.n	8006190 <UART_SetConfig+0x348>
 800617a:	2304      	movs	r3, #4
 800617c:	77fb      	strb	r3, [r7, #31]
 800617e:	e007      	b.n	8006190 <UART_SetConfig+0x348>
 8006180:	2308      	movs	r3, #8
 8006182:	77fb      	strb	r3, [r7, #31]
 8006184:	e004      	b.n	8006190 <UART_SetConfig+0x348>
 8006186:	2310      	movs	r3, #16
 8006188:	77fb      	strb	r3, [r7, #31]
 800618a:	e001      	b.n	8006190 <UART_SetConfig+0x348>
 800618c:	2310      	movs	r3, #16
 800618e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006198:	d15b      	bne.n	8006252 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800619a:	7ffb      	ldrb	r3, [r7, #31]
 800619c:	2b08      	cmp	r3, #8
 800619e:	d828      	bhi.n	80061f2 <UART_SetConfig+0x3aa>
 80061a0:	a201      	add	r2, pc, #4	@ (adr r2, 80061a8 <UART_SetConfig+0x360>)
 80061a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a6:	bf00      	nop
 80061a8:	080061cd 	.word	0x080061cd
 80061ac:	080061d5 	.word	0x080061d5
 80061b0:	080061dd 	.word	0x080061dd
 80061b4:	080061f3 	.word	0x080061f3
 80061b8:	080061e3 	.word	0x080061e3
 80061bc:	080061f3 	.word	0x080061f3
 80061c0:	080061f3 	.word	0x080061f3
 80061c4:	080061f3 	.word	0x080061f3
 80061c8:	080061eb 	.word	0x080061eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061cc:	f7fe fd9a 	bl	8004d04 <HAL_RCC_GetPCLK1Freq>
 80061d0:	61b8      	str	r0, [r7, #24]
        break;
 80061d2:	e013      	b.n	80061fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061d4:	f7fe fdaa 	bl	8004d2c <HAL_RCC_GetPCLK2Freq>
 80061d8:	61b8      	str	r0, [r7, #24]
        break;
 80061da:	e00f      	b.n	80061fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061dc:	4b4b      	ldr	r3, [pc, #300]	@ (800630c <UART_SetConfig+0x4c4>)
 80061de:	61bb      	str	r3, [r7, #24]
        break;
 80061e0:	e00c      	b.n	80061fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061e2:	f7fe fc7d 	bl	8004ae0 <HAL_RCC_GetSysClockFreq>
 80061e6:	61b8      	str	r0, [r7, #24]
        break;
 80061e8:	e008      	b.n	80061fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061ee:	61bb      	str	r3, [r7, #24]
        break;
 80061f0:	e004      	b.n	80061fc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	77bb      	strb	r3, [r7, #30]
        break;
 80061fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d074      	beq.n	80062ec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	005a      	lsls	r2, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	085b      	lsrs	r3, r3, #1
 800620c:	441a      	add	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	fbb2 f3f3 	udiv	r3, r2, r3
 8006216:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	2b0f      	cmp	r3, #15
 800621c:	d916      	bls.n	800624c <UART_SetConfig+0x404>
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006224:	d212      	bcs.n	800624c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	b29b      	uxth	r3, r3
 800622a:	f023 030f 	bic.w	r3, r3, #15
 800622e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	085b      	lsrs	r3, r3, #1
 8006234:	b29b      	uxth	r3, r3
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	b29a      	uxth	r2, r3
 800623c:	89fb      	ldrh	r3, [r7, #14]
 800623e:	4313      	orrs	r3, r2
 8006240:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	89fa      	ldrh	r2, [r7, #14]
 8006248:	60da      	str	r2, [r3, #12]
 800624a:	e04f      	b.n	80062ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	77bb      	strb	r3, [r7, #30]
 8006250:	e04c      	b.n	80062ec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006252:	7ffb      	ldrb	r3, [r7, #31]
 8006254:	2b08      	cmp	r3, #8
 8006256:	d828      	bhi.n	80062aa <UART_SetConfig+0x462>
 8006258:	a201      	add	r2, pc, #4	@ (adr r2, 8006260 <UART_SetConfig+0x418>)
 800625a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625e:	bf00      	nop
 8006260:	08006285 	.word	0x08006285
 8006264:	0800628d 	.word	0x0800628d
 8006268:	08006295 	.word	0x08006295
 800626c:	080062ab 	.word	0x080062ab
 8006270:	0800629b 	.word	0x0800629b
 8006274:	080062ab 	.word	0x080062ab
 8006278:	080062ab 	.word	0x080062ab
 800627c:	080062ab 	.word	0x080062ab
 8006280:	080062a3 	.word	0x080062a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006284:	f7fe fd3e 	bl	8004d04 <HAL_RCC_GetPCLK1Freq>
 8006288:	61b8      	str	r0, [r7, #24]
        break;
 800628a:	e013      	b.n	80062b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800628c:	f7fe fd4e 	bl	8004d2c <HAL_RCC_GetPCLK2Freq>
 8006290:	61b8      	str	r0, [r7, #24]
        break;
 8006292:	e00f      	b.n	80062b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006294:	4b1d      	ldr	r3, [pc, #116]	@ (800630c <UART_SetConfig+0x4c4>)
 8006296:	61bb      	str	r3, [r7, #24]
        break;
 8006298:	e00c      	b.n	80062b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800629a:	f7fe fc21 	bl	8004ae0 <HAL_RCC_GetSysClockFreq>
 800629e:	61b8      	str	r0, [r7, #24]
        break;
 80062a0:	e008      	b.n	80062b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062a6:	61bb      	str	r3, [r7, #24]
        break;
 80062a8:	e004      	b.n	80062b4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	77bb      	strb	r3, [r7, #30]
        break;
 80062b2:	bf00      	nop
    }

    if (pclk != 0U)
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d018      	beq.n	80062ec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	085a      	lsrs	r2, r3, #1
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	441a      	add	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b0f      	cmp	r3, #15
 80062d2:	d909      	bls.n	80062e8 <UART_SetConfig+0x4a0>
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062da:	d205      	bcs.n	80062e8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	b29a      	uxth	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	60da      	str	r2, [r3, #12]
 80062e6:	e001      	b.n	80062ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80062f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3720      	adds	r7, #32
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	40007c00 	.word	0x40007c00
 8006308:	40023800 	.word	0x40023800
 800630c:	00f42400 	.word	0x00f42400

08006310 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631c:	f003 0308 	and.w	r3, r3, #8
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00a      	beq.n	800633a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00a      	beq.n	800637e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006382:	f003 0304 	and.w	r3, r3, #4
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a4:	f003 0310 	and.w	r3, r3, #16
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00a      	beq.n	80063c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c6:	f003 0320 	and.w	r3, r3, #32
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01a      	beq.n	8006426 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	430a      	orrs	r2, r1
 8006404:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800640e:	d10a      	bne.n	8006426 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00a      	beq.n	8006448 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	605a      	str	r2, [r3, #4]
  }
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b098      	sub	sp, #96	@ 0x60
 8006458:	af02      	add	r7, sp, #8
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006464:	f7fa ff5e 	bl	8001324 <HAL_GetTick>
 8006468:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0308 	and.w	r3, r3, #8
 8006474:	2b08      	cmp	r3, #8
 8006476:	d12e      	bne.n	80064d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006478:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006480:	2200      	movs	r2, #0
 8006482:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f88c 	bl	80065a4 <UART_WaitOnFlagUntilTimeout>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d021      	beq.n	80064d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649a:	e853 3f00 	ldrex	r3, [r3]
 800649e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	461a      	mov	r2, r3
 80064ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80064b2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064b8:	e841 2300 	strex	r3, r2, [r1]
 80064bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1e6      	bne.n	8006492 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2220      	movs	r2, #32
 80064c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e062      	b.n	800659c <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0304 	and.w	r3, r3, #4
 80064e0:	2b04      	cmp	r3, #4
 80064e2:	d149      	bne.n	8006578 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064ec:	2200      	movs	r2, #0
 80064ee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f856 	bl	80065a4 <UART_WaitOnFlagUntilTimeout>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d03c      	beq.n	8006578 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006506:	e853 3f00 	ldrex	r3, [r3]
 800650a:	623b      	str	r3, [r7, #32]
   return(result);
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006512:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	461a      	mov	r2, r3
 800651a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800651c:	633b      	str	r3, [r7, #48]	@ 0x30
 800651e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006520:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006524:	e841 2300 	strex	r3, r2, [r1]
 8006528:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800652a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1e6      	bne.n	80064fe <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3308      	adds	r3, #8
 8006536:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	e853 3f00 	ldrex	r3, [r3]
 800653e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f023 0301 	bic.w	r3, r3, #1
 8006546:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3308      	adds	r3, #8
 800654e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006550:	61fa      	str	r2, [r7, #28]
 8006552:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006554:	69b9      	ldr	r1, [r7, #24]
 8006556:	69fa      	ldr	r2, [r7, #28]
 8006558:	e841 2300 	strex	r3, r2, [r1]
 800655c:	617b      	str	r3, [r7, #20]
   return(result);
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d1e5      	bne.n	8006530 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2220      	movs	r2, #32
 8006568:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e011      	b.n	800659c <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2220      	movs	r2, #32
 800657c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2220      	movs	r2, #32
 8006582:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3758      	adds	r7, #88	@ 0x58
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	603b      	str	r3, [r7, #0]
 80065b0:	4613      	mov	r3, r2
 80065b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065b4:	e04f      	b.n	8006656 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065bc:	d04b      	beq.n	8006656 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065be:	f7fa feb1 	bl	8001324 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d302      	bcc.n	80065d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e04e      	b.n	8006676 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0304 	and.w	r3, r3, #4
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d037      	beq.n	8006656 <UART_WaitOnFlagUntilTimeout+0xb2>
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2b80      	cmp	r3, #128	@ 0x80
 80065ea:	d034      	beq.n	8006656 <UART_WaitOnFlagUntilTimeout+0xb2>
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	2b40      	cmp	r3, #64	@ 0x40
 80065f0:	d031      	beq.n	8006656 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69db      	ldr	r3, [r3, #28]
 80065f8:	f003 0308 	and.w	r3, r3, #8
 80065fc:	2b08      	cmp	r3, #8
 80065fe:	d110      	bne.n	8006622 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2208      	movs	r2, #8
 8006606:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 f838 	bl	800667e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2208      	movs	r2, #8
 8006612:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e029      	b.n	8006676 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800662c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006630:	d111      	bne.n	8006656 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800663a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f000 f81e 	bl	800667e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2220      	movs	r2, #32
 8006646:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e00f      	b.n	8006676 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	69da      	ldr	r2, [r3, #28]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	4013      	ands	r3, r2
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	429a      	cmp	r2, r3
 8006664:	bf0c      	ite	eq
 8006666:	2301      	moveq	r3, #1
 8006668:	2300      	movne	r3, #0
 800666a:	b2db      	uxtb	r3, r3
 800666c:	461a      	mov	r2, r3
 800666e:	79fb      	ldrb	r3, [r7, #7]
 8006670:	429a      	cmp	r2, r3
 8006672:	d0a0      	beq.n	80065b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800667e:	b480      	push	{r7}
 8006680:	b095      	sub	sp, #84	@ 0x54
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800668e:	e853 3f00 	ldrex	r3, [r3]
 8006692:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006696:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800669a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	461a      	mov	r2, r3
 80066a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80066a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066ac:	e841 2300 	strex	r3, r2, [r1]
 80066b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1e6      	bne.n	8006686 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3308      	adds	r3, #8
 80066be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	e853 3f00 	ldrex	r3, [r3]
 80066c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	f023 0301 	bic.w	r3, r3, #1
 80066ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3308      	adds	r3, #8
 80066d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066e0:	e841 2300 	strex	r3, r2, [r1]
 80066e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1e5      	bne.n	80066b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d118      	bne.n	8006726 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	e853 3f00 	ldrex	r3, [r3]
 8006700:	60bb      	str	r3, [r7, #8]
   return(result);
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	f023 0310 	bic.w	r3, r3, #16
 8006708:	647b      	str	r3, [r7, #68]	@ 0x44
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006712:	61bb      	str	r3, [r7, #24]
 8006714:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006716:	6979      	ldr	r1, [r7, #20]
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	e841 2300 	strex	r3, r2, [r1]
 800671e:	613b      	str	r3, [r7, #16]
   return(result);
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1e6      	bne.n	80066f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2220      	movs	r2, #32
 800672a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800673a:	bf00      	nop
 800673c:	3754      	adds	r7, #84	@ 0x54
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
	...

08006748 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006748:	b084      	sub	sp, #16
 800674a:	b580      	push	{r7, lr}
 800674c:	b084      	sub	sp, #16
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	f107 001c 	add.w	r0, r7, #28
 8006756:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800675a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800675e:	2b01      	cmp	r3, #1
 8006760:	d121      	bne.n	80067a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006766:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	4b21      	ldr	r3, [pc, #132]	@ (80067f8 <USB_CoreInit+0xb0>)
 8006774:	4013      	ands	r3, r2
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006786:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800678a:	2b01      	cmp	r3, #1
 800678c:	d105      	bne.n	800679a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f001 fae2 	bl	8007d64 <USB_CoreReset>
 80067a0:	4603      	mov	r3, r0
 80067a2:	73fb      	strb	r3, [r7, #15]
 80067a4:	e010      	b.n	80067c8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f001 fad6 	bl	8007d64 <USB_CoreReset>
 80067b8:	4603      	mov	r3, r0
 80067ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80067c8:	7fbb      	ldrb	r3, [r7, #30]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d10b      	bne.n	80067e6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f043 0206 	orr.w	r2, r3, #6
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f043 0220 	orr.w	r2, r3, #32
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067f2:	b004      	add	sp, #16
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	ffbdffbf 	.word	0xffbdffbf

080067fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	60f8      	str	r0, [r7, #12]
 8006804:	60b9      	str	r1, [r7, #8]
 8006806:	4613      	mov	r3, r2
 8006808:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800680a:	79fb      	ldrb	r3, [r7, #7]
 800680c:	2b02      	cmp	r3, #2
 800680e:	d165      	bne.n	80068dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	4a41      	ldr	r2, [pc, #260]	@ (8006918 <USB_SetTurnaroundTime+0x11c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d906      	bls.n	8006826 <USB_SetTurnaroundTime+0x2a>
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	4a40      	ldr	r2, [pc, #256]	@ (800691c <USB_SetTurnaroundTime+0x120>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d202      	bcs.n	8006826 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006820:	230f      	movs	r3, #15
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	e062      	b.n	80068ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	4a3c      	ldr	r2, [pc, #240]	@ (800691c <USB_SetTurnaroundTime+0x120>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d306      	bcc.n	800683c <USB_SetTurnaroundTime+0x40>
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	4a3b      	ldr	r2, [pc, #236]	@ (8006920 <USB_SetTurnaroundTime+0x124>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d202      	bcs.n	800683c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006836:	230e      	movs	r3, #14
 8006838:	617b      	str	r3, [r7, #20]
 800683a:	e057      	b.n	80068ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	4a38      	ldr	r2, [pc, #224]	@ (8006920 <USB_SetTurnaroundTime+0x124>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d306      	bcc.n	8006852 <USB_SetTurnaroundTime+0x56>
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	4a37      	ldr	r2, [pc, #220]	@ (8006924 <USB_SetTurnaroundTime+0x128>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d202      	bcs.n	8006852 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800684c:	230d      	movs	r3, #13
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	e04c      	b.n	80068ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	4a33      	ldr	r2, [pc, #204]	@ (8006924 <USB_SetTurnaroundTime+0x128>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d306      	bcc.n	8006868 <USB_SetTurnaroundTime+0x6c>
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	4a32      	ldr	r2, [pc, #200]	@ (8006928 <USB_SetTurnaroundTime+0x12c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d802      	bhi.n	8006868 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006862:	230c      	movs	r3, #12
 8006864:	617b      	str	r3, [r7, #20]
 8006866:	e041      	b.n	80068ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4a2f      	ldr	r2, [pc, #188]	@ (8006928 <USB_SetTurnaroundTime+0x12c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d906      	bls.n	800687e <USB_SetTurnaroundTime+0x82>
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	4a2e      	ldr	r2, [pc, #184]	@ (800692c <USB_SetTurnaroundTime+0x130>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d802      	bhi.n	800687e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006878:	230b      	movs	r3, #11
 800687a:	617b      	str	r3, [r7, #20]
 800687c:	e036      	b.n	80068ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	4a2a      	ldr	r2, [pc, #168]	@ (800692c <USB_SetTurnaroundTime+0x130>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d906      	bls.n	8006894 <USB_SetTurnaroundTime+0x98>
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	4a29      	ldr	r2, [pc, #164]	@ (8006930 <USB_SetTurnaroundTime+0x134>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d802      	bhi.n	8006894 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800688e:	230a      	movs	r3, #10
 8006890:	617b      	str	r3, [r7, #20]
 8006892:	e02b      	b.n	80068ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	4a26      	ldr	r2, [pc, #152]	@ (8006930 <USB_SetTurnaroundTime+0x134>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d906      	bls.n	80068aa <USB_SetTurnaroundTime+0xae>
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	4a25      	ldr	r2, [pc, #148]	@ (8006934 <USB_SetTurnaroundTime+0x138>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d202      	bcs.n	80068aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80068a4:	2309      	movs	r3, #9
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	e020      	b.n	80068ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	4a21      	ldr	r2, [pc, #132]	@ (8006934 <USB_SetTurnaroundTime+0x138>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d306      	bcc.n	80068c0 <USB_SetTurnaroundTime+0xc4>
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	4a20      	ldr	r2, [pc, #128]	@ (8006938 <USB_SetTurnaroundTime+0x13c>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d802      	bhi.n	80068c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80068ba:	2308      	movs	r3, #8
 80068bc:	617b      	str	r3, [r7, #20]
 80068be:	e015      	b.n	80068ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	4a1d      	ldr	r2, [pc, #116]	@ (8006938 <USB_SetTurnaroundTime+0x13c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d906      	bls.n	80068d6 <USB_SetTurnaroundTime+0xda>
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	4a1c      	ldr	r2, [pc, #112]	@ (800693c <USB_SetTurnaroundTime+0x140>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d202      	bcs.n	80068d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80068d0:	2307      	movs	r3, #7
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	e00a      	b.n	80068ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80068d6:	2306      	movs	r3, #6
 80068d8:	617b      	str	r3, [r7, #20]
 80068da:	e007      	b.n	80068ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80068dc:	79fb      	ldrb	r3, [r7, #7]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d102      	bne.n	80068e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80068e2:	2309      	movs	r3, #9
 80068e4:	617b      	str	r3, [r7, #20]
 80068e6:	e001      	b.n	80068ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80068e8:	2309      	movs	r3, #9
 80068ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	029b      	lsls	r3, r3, #10
 8006900:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006904:	431a      	orrs	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	371c      	adds	r7, #28
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	00d8acbf 	.word	0x00d8acbf
 800691c:	00e4e1c0 	.word	0x00e4e1c0
 8006920:	00f42400 	.word	0x00f42400
 8006924:	01067380 	.word	0x01067380
 8006928:	011a499f 	.word	0x011a499f
 800692c:	01312cff 	.word	0x01312cff
 8006930:	014ca43f 	.word	0x014ca43f
 8006934:	016e3600 	.word	0x016e3600
 8006938:	01a6ab1f 	.word	0x01a6ab1f
 800693c:	01e84800 	.word	0x01e84800

08006940 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f043 0201 	orr.w	r2, r3, #1
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f023 0201 	bic.w	r2, r3, #1
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	460b      	mov	r3, r1
 800698e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80069a0:	78fb      	ldrb	r3, [r7, #3]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d115      	bne.n	80069d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80069b2:	200a      	movs	r0, #10
 80069b4:	f7fa fcc2 	bl	800133c <HAL_Delay>
      ms += 10U;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	330a      	adds	r3, #10
 80069bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f001 f93f 	bl	8007c42 <USB_GetMode>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d01e      	beq.n	8006a08 <USB_SetCurrentMode+0x84>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2bc7      	cmp	r3, #199	@ 0xc7
 80069ce:	d9f0      	bls.n	80069b2 <USB_SetCurrentMode+0x2e>
 80069d0:	e01a      	b.n	8006a08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80069d2:	78fb      	ldrb	r3, [r7, #3]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d115      	bne.n	8006a04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80069e4:	200a      	movs	r0, #10
 80069e6:	f7fa fca9 	bl	800133c <HAL_Delay>
      ms += 10U;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	330a      	adds	r3, #10
 80069ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 f926 	bl	8007c42 <USB_GetMode>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d005      	beq.n	8006a08 <USB_SetCurrentMode+0x84>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2bc7      	cmp	r3, #199	@ 0xc7
 8006a00:	d9f0      	bls.n	80069e4 <USB_SetCurrentMode+0x60>
 8006a02:	e001      	b.n	8006a08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e005      	b.n	8006a14 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2bc8      	cmp	r3, #200	@ 0xc8
 8006a0c:	d101      	bne.n	8006a12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e000      	b.n	8006a14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a1c:	b084      	sub	sp, #16
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b086      	sub	sp, #24
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
 8006a26:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006a2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a36:	2300      	movs	r3, #0
 8006a38:	613b      	str	r3, [r7, #16]
 8006a3a:	e009      	b.n	8006a50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	3340      	adds	r3, #64	@ 0x40
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	2200      	movs	r2, #0
 8006a48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	613b      	str	r3, [r7, #16]
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	2b0e      	cmp	r3, #14
 8006a54:	d9f2      	bls.n	8006a3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006a56:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d11c      	bne.n	8006a98 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a6c:	f043 0302 	orr.w	r3, r3, #2
 8006a70:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a76:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	e005      	b.n	8006aa4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006aaa:	461a      	mov	r2, r3
 8006aac:	2300      	movs	r3, #0
 8006aae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ab0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d10d      	bne.n	8006ad4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d104      	bne.n	8006aca <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f968 	bl	8006d98 <USB_SetDevSpeed>
 8006ac8:	e008      	b.n	8006adc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006aca:	2101      	movs	r1, #1
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f963 	bl	8006d98 <USB_SetDevSpeed>
 8006ad2:	e003      	b.n	8006adc <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ad4:	2103      	movs	r1, #3
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f95e 	bl	8006d98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006adc:	2110      	movs	r1, #16
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f8fa 	bl	8006cd8 <USB_FlushTxFifo>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d001      	beq.n	8006aee <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f924 	bl	8006d3c <USB_FlushRxFifo>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d001      	beq.n	8006afe <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b04:	461a      	mov	r2, r3
 8006b06:	2300      	movs	r3, #0
 8006b08:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b10:	461a      	mov	r2, r3
 8006b12:	2300      	movs	r3, #0
 8006b14:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	2300      	movs	r3, #0
 8006b20:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b22:	2300      	movs	r3, #0
 8006b24:	613b      	str	r3, [r7, #16]
 8006b26:	e043      	b.n	8006bb0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	015a      	lsls	r2, r3, #5
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4413      	add	r3, r2
 8006b30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b3e:	d118      	bne.n	8006b72 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10a      	bne.n	8006b5c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	015a      	lsls	r2, r3, #5
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b52:	461a      	mov	r2, r3
 8006b54:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	e013      	b.n	8006b84 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b68:	461a      	mov	r2, r3
 8006b6a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006b6e:	6013      	str	r3, [r2, #0]
 8006b70:	e008      	b.n	8006b84 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b7e:	461a      	mov	r2, r3
 8006b80:	2300      	movs	r3, #0
 8006b82:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b90:	461a      	mov	r2, r3
 8006b92:	2300      	movs	r3, #0
 8006b94:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006ba8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	3301      	adds	r3, #1
 8006bae:	613b      	str	r3, [r7, #16]
 8006bb0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d3b5      	bcc.n	8006b28 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	613b      	str	r3, [r7, #16]
 8006bc0:	e043      	b.n	8006c4a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bd8:	d118      	bne.n	8006c0c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10a      	bne.n	8006bf6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bec:	461a      	mov	r2, r3
 8006bee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006bf2:	6013      	str	r3, [r2, #0]
 8006bf4:	e013      	b.n	8006c1e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	015a      	lsls	r2, r3, #5
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c02:	461a      	mov	r2, r3
 8006c04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	e008      	b.n	8006c1e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	015a      	lsls	r2, r3, #5
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4413      	add	r3, r2
 8006c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c18:	461a      	mov	r2, r3
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	3301      	adds	r3, #1
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c4e:	461a      	mov	r2, r3
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d3b5      	bcc.n	8006bc2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c68:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006c76:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d105      	bne.n	8006c8c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	f043 0210 	orr.w	r2, r3, #16
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	699a      	ldr	r2, [r3, #24]
 8006c90:	4b0f      	ldr	r3, [pc, #60]	@ (8006cd0 <USB_DevInit+0x2b4>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006c98:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d005      	beq.n	8006cac <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	f043 0208 	orr.w	r2, r3, #8
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006cac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d105      	bne.n	8006cc0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	699a      	ldr	r2, [r3, #24]
 8006cb8:	4b06      	ldr	r3, [pc, #24]	@ (8006cd4 <USB_DevInit+0x2b8>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006cc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ccc:	b004      	add	sp, #16
 8006cce:	4770      	bx	lr
 8006cd0:	803c3800 	.word	0x803c3800
 8006cd4:	40000004 	.word	0x40000004

08006cd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cf2:	d901      	bls.n	8006cf8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e01b      	b.n	8006d30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	daf2      	bge.n	8006ce6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	019b      	lsls	r3, r3, #6
 8006d08:	f043 0220 	orr.w	r2, r3, #32
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	3301      	adds	r3, #1
 8006d14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d1c:	d901      	bls.n	8006d22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e006      	b.n	8006d30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	f003 0320 	and.w	r3, r3, #32
 8006d2a:	2b20      	cmp	r3, #32
 8006d2c:	d0f0      	beq.n	8006d10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d54:	d901      	bls.n	8006d5a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e018      	b.n	8006d8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	daf2      	bge.n	8006d48 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d62:	2300      	movs	r3, #0
 8006d64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2210      	movs	r2, #16
 8006d6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d78:	d901      	bls.n	8006d7e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e006      	b.n	8006d8c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f003 0310 	and.w	r3, r3, #16
 8006d86:	2b10      	cmp	r3, #16
 8006d88:	d0f0      	beq.n	8006d6c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	78fb      	ldrb	r3, [r7, #3]
 8006db2:	68f9      	ldr	r1, [r7, #12]
 8006db4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006db8:	4313      	orrs	r3, r2
 8006dba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b087      	sub	sp, #28
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f003 0306 	and.w	r3, r3, #6
 8006de2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d102      	bne.n	8006df0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006dea:	2300      	movs	r3, #0
 8006dec:	75fb      	strb	r3, [r7, #23]
 8006dee:	e00a      	b.n	8006e06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d002      	beq.n	8006dfc <USB_GetDevSpeed+0x32>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2b06      	cmp	r3, #6
 8006dfa:	d102      	bne.n	8006e02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	75fb      	strb	r3, [r7, #23]
 8006e00:	e001      	b.n	8006e06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006e02:	230f      	movs	r3, #15
 8006e04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006e06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	371c      	adds	r7, #28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	785b      	ldrb	r3, [r3, #1]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d139      	bne.n	8006ea4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e36:	69da      	ldr	r2, [r3, #28]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	2101      	movs	r1, #1
 8006e42:	fa01 f303 	lsl.w	r3, r1, r3
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	68f9      	ldr	r1, [r7, #12]
 8006e4a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d153      	bne.n	8006f10 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	791b      	ldrb	r3, [r3, #4]
 8006e82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	059b      	lsls	r3, r3, #22
 8006e8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	0159      	lsls	r1, r3, #5
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	440b      	add	r3, r1
 8006e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	4b20      	ldr	r3, [pc, #128]	@ (8006f20 <USB_ActivateEndpoint+0x10c>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	600b      	str	r3, [r1, #0]
 8006ea2:	e035      	b.n	8006f10 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eaa:	69da      	ldr	r2, [r3, #28]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	f003 030f 	and.w	r3, r3, #15
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eba:	041b      	lsls	r3, r3, #16
 8006ebc:	68f9      	ldr	r1, [r7, #12]
 8006ebe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d119      	bne.n	8006f10 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	791b      	ldrb	r3, [r3, #4]
 8006ef6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	431a      	orrs	r2, r3
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	0159      	lsls	r1, r3, #5
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	440b      	add	r3, r1
 8006f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f08:	4619      	mov	r1, r3
 8006f0a:	4b05      	ldr	r3, [pc, #20]	@ (8006f20 <USB_ActivateEndpoint+0x10c>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	10008000 	.word	0x10008000

08006f24 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	785b      	ldrb	r3, [r3, #1]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d161      	bne.n	8007004 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f56:	d11f      	bne.n	8006f98 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	0151      	lsls	r1, r2, #5
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	440a      	add	r2, r1
 8006f6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f72:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006f76:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	0151      	lsls	r1, r2, #5
 8006f8a:	68fa      	ldr	r2, [r7, #12]
 8006f8c:	440a      	add	r2, r1
 8006f8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	f003 030f 	and.w	r3, r3, #15
 8006fa8:	2101      	movs	r1, #1
 8006faa:	fa01 f303 	lsl.w	r3, r1, r3
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	43db      	mvns	r3, r3
 8006fb2:	68f9      	ldr	r1, [r7, #12]
 8006fb4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fb8:	4013      	ands	r3, r2
 8006fba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fc2:	69da      	ldr	r2, [r3, #28]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	f003 030f 	and.w	r3, r3, #15
 8006fcc:	2101      	movs	r1, #1
 8006fce:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	43db      	mvns	r3, r3
 8006fd6:	68f9      	ldr	r1, [r7, #12]
 8006fd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fdc:	4013      	ands	r3, r2
 8006fde:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	0159      	lsls	r1, r3, #5
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	440b      	add	r3, r1
 8006ff6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	4b35      	ldr	r3, [pc, #212]	@ (80070d4 <USB_DeactivateEndpoint+0x1b0>)
 8006ffe:	4013      	ands	r3, r2
 8007000:	600b      	str	r3, [r1, #0]
 8007002:	e060      	b.n	80070c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007016:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800701a:	d11f      	bne.n	800705c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	0151      	lsls	r1, r2, #5
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	440a      	add	r2, r1
 8007032:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007036:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800703a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	0151      	lsls	r1, r2, #5
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	440a      	add	r2, r1
 8007052:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007056:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800705a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007062:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	f003 030f 	and.w	r3, r3, #15
 800706c:	2101      	movs	r1, #1
 800706e:	fa01 f303 	lsl.w	r3, r1, r3
 8007072:	041b      	lsls	r3, r3, #16
 8007074:	43db      	mvns	r3, r3
 8007076:	68f9      	ldr	r1, [r7, #12]
 8007078:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800707c:	4013      	ands	r3, r2
 800707e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007086:	69da      	ldr	r2, [r3, #28]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	f003 030f 	and.w	r3, r3, #15
 8007090:	2101      	movs	r1, #1
 8007092:	fa01 f303 	lsl.w	r3, r1, r3
 8007096:	041b      	lsls	r3, r3, #16
 8007098:	43db      	mvns	r3, r3
 800709a:	68f9      	ldr	r1, [r7, #12]
 800709c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070a0:	4013      	ands	r3, r2
 80070a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	0159      	lsls	r1, r3, #5
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	440b      	add	r3, r1
 80070ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070be:	4619      	mov	r1, r3
 80070c0:	4b05      	ldr	r3, [pc, #20]	@ (80070d8 <USB_DeactivateEndpoint+0x1b4>)
 80070c2:	4013      	ands	r3, r2
 80070c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr
 80070d4:	ec337800 	.word	0xec337800
 80070d8:	eff37800 	.word	0xeff37800

080070dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08a      	sub	sp, #40	@ 0x28
 80070e0:	af02      	add	r7, sp, #8
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	4613      	mov	r3, r2
 80070e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	785b      	ldrb	r3, [r3, #1]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	f040 8185 	bne.w	8007408 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d132      	bne.n	800716c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	4413      	add	r3, r2
 800710e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007112:	691a      	ldr	r2, [r3, #16]
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	0159      	lsls	r1, r3, #5
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	440b      	add	r3, r1
 800711c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007120:	4619      	mov	r1, r3
 8007122:	4ba7      	ldr	r3, [pc, #668]	@ (80073c0 <USB_EPStartXfer+0x2e4>)
 8007124:	4013      	ands	r3, r2
 8007126:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	4413      	add	r3, r2
 8007130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	69ba      	ldr	r2, [r7, #24]
 8007138:	0151      	lsls	r1, r2, #5
 800713a:	69fa      	ldr	r2, [r7, #28]
 800713c:	440a      	add	r2, r1
 800713e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007142:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007146:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007154:	691a      	ldr	r2, [r3, #16]
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	0159      	lsls	r1, r3, #5
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	440b      	add	r3, r1
 800715e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007162:	4619      	mov	r1, r3
 8007164:	4b97      	ldr	r3, [pc, #604]	@ (80073c4 <USB_EPStartXfer+0x2e8>)
 8007166:	4013      	ands	r3, r2
 8007168:	610b      	str	r3, [r1, #16]
 800716a:	e097      	b.n	800729c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	015a      	lsls	r2, r3, #5
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	4413      	add	r3, r2
 8007174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007178:	691a      	ldr	r2, [r3, #16]
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	0159      	lsls	r1, r3, #5
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	440b      	add	r3, r1
 8007182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007186:	4619      	mov	r1, r3
 8007188:	4b8e      	ldr	r3, [pc, #568]	@ (80073c4 <USB_EPStartXfer+0x2e8>)
 800718a:	4013      	ands	r3, r2
 800718c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	4413      	add	r3, r2
 8007196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800719a:	691a      	ldr	r2, [r3, #16]
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	0159      	lsls	r1, r3, #5
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	440b      	add	r3, r1
 80071a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071a8:	4619      	mov	r1, r3
 80071aa:	4b85      	ldr	r3, [pc, #532]	@ (80073c0 <USB_EPStartXfer+0x2e4>)
 80071ac:	4013      	ands	r3, r2
 80071ae:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d11a      	bne.n	80071ec <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	691a      	ldr	r2, [r3, #16]
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d903      	bls.n	80071ca <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	689a      	ldr	r2, [r3, #8]
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	015a      	lsls	r2, r3, #5
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	0151      	lsls	r1, r2, #5
 80071dc:	69fa      	ldr	r2, [r7, #28]
 80071de:	440a      	add	r2, r1
 80071e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80071e8:	6113      	str	r3, [r2, #16]
 80071ea:	e044      	b.n	8007276 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	691a      	ldr	r2, [r3, #16]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	4413      	add	r3, r2
 80071f6:	1e5a      	subs	r2, r3, #1
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007200:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	4413      	add	r3, r2
 800720a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800720e:	691a      	ldr	r2, [r3, #16]
 8007210:	8afb      	ldrh	r3, [r7, #22]
 8007212:	04d9      	lsls	r1, r3, #19
 8007214:	4b6c      	ldr	r3, [pc, #432]	@ (80073c8 <USB_EPStartXfer+0x2ec>)
 8007216:	400b      	ands	r3, r1
 8007218:	69b9      	ldr	r1, [r7, #24]
 800721a:	0148      	lsls	r0, r1, #5
 800721c:	69f9      	ldr	r1, [r7, #28]
 800721e:	4401      	add	r1, r0
 8007220:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007224:	4313      	orrs	r3, r2
 8007226:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	791b      	ldrb	r3, [r3, #4]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d122      	bne.n	8007276 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	4413      	add	r3, r2
 8007238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	69ba      	ldr	r2, [r7, #24]
 8007240:	0151      	lsls	r1, r2, #5
 8007242:	69fa      	ldr	r2, [r7, #28]
 8007244:	440a      	add	r2, r1
 8007246:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800724a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800724e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	4413      	add	r3, r2
 8007258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800725c:	691a      	ldr	r2, [r3, #16]
 800725e:	8afb      	ldrh	r3, [r7, #22]
 8007260:	075b      	lsls	r3, r3, #29
 8007262:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007266:	69b9      	ldr	r1, [r7, #24]
 8007268:	0148      	lsls	r0, r1, #5
 800726a:	69f9      	ldr	r1, [r7, #28]
 800726c:	4401      	add	r1, r0
 800726e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007272:	4313      	orrs	r3, r2
 8007274:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	015a      	lsls	r2, r3, #5
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	4413      	add	r3, r2
 800727e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007282:	691a      	ldr	r2, [r3, #16]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800728c:	69b9      	ldr	r1, [r7, #24]
 800728e:	0148      	lsls	r0, r1, #5
 8007290:	69f9      	ldr	r1, [r7, #28]
 8007292:	4401      	add	r1, r0
 8007294:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007298:	4313      	orrs	r3, r2
 800729a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800729c:	79fb      	ldrb	r3, [r7, #7]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d14b      	bne.n	800733a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	69db      	ldr	r3, [r3, #28]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d009      	beq.n	80072be <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	015a      	lsls	r2, r3, #5
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072b6:	461a      	mov	r2, r3
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	791b      	ldrb	r3, [r3, #4]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d128      	bne.n	8007318 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d110      	bne.n	80072f8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	015a      	lsls	r2, r3, #5
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	4413      	add	r3, r2
 80072de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	69ba      	ldr	r2, [r7, #24]
 80072e6:	0151      	lsls	r1, r2, #5
 80072e8:	69fa      	ldr	r2, [r7, #28]
 80072ea:	440a      	add	r2, r1
 80072ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80072f4:	6013      	str	r3, [r2, #0]
 80072f6:	e00f      	b.n	8007318 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	0151      	lsls	r1, r2, #5
 800730a:	69fa      	ldr	r2, [r7, #28]
 800730c:	440a      	add	r2, r1
 800730e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007312:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007316:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	69ba      	ldr	r2, [r7, #24]
 8007328:	0151      	lsls	r1, r2, #5
 800732a:	69fa      	ldr	r2, [r7, #28]
 800732c:	440a      	add	r2, r1
 800732e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007332:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007336:	6013      	str	r3, [r2, #0]
 8007338:	e169      	b.n	800760e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	015a      	lsls	r2, r3, #5
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	4413      	add	r3, r2
 8007342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	69ba      	ldr	r2, [r7, #24]
 800734a:	0151      	lsls	r1, r2, #5
 800734c:	69fa      	ldr	r2, [r7, #28]
 800734e:	440a      	add	r2, r1
 8007350:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007354:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007358:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	791b      	ldrb	r3, [r3, #4]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d015      	beq.n	800738e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	f000 8151 	beq.w	800760e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007372:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	f003 030f 	and.w	r3, r3, #15
 800737c:	2101      	movs	r1, #1
 800737e:	fa01 f303 	lsl.w	r3, r1, r3
 8007382:	69f9      	ldr	r1, [r7, #28]
 8007384:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007388:	4313      	orrs	r3, r2
 800738a:	634b      	str	r3, [r1, #52]	@ 0x34
 800738c:	e13f      	b.n	800760e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800739a:	2b00      	cmp	r3, #0
 800739c:	d116      	bne.n	80073cc <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	69ba      	ldr	r2, [r7, #24]
 80073ae:	0151      	lsls	r1, r2, #5
 80073b0:	69fa      	ldr	r2, [r7, #28]
 80073b2:	440a      	add	r2, r1
 80073b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80073bc:	6013      	str	r3, [r2, #0]
 80073be:	e015      	b.n	80073ec <USB_EPStartXfer+0x310>
 80073c0:	e007ffff 	.word	0xe007ffff
 80073c4:	fff80000 	.word	0xfff80000
 80073c8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	015a      	lsls	r2, r3, #5
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	4413      	add	r3, r2
 80073d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	0151      	lsls	r1, r2, #5
 80073de:	69fa      	ldr	r2, [r7, #28]
 80073e0:	440a      	add	r2, r1
 80073e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073ea:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	68d9      	ldr	r1, [r3, #12]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	781a      	ldrb	r2, [r3, #0]
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	691b      	ldr	r3, [r3, #16]
 80073f8:	b298      	uxth	r0, r3
 80073fa:	79fb      	ldrb	r3, [r7, #7]
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	4603      	mov	r3, r0
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 f9b9 	bl	8007778 <USB_WritePacket>
 8007406:	e102      	b.n	800760e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007414:	691a      	ldr	r2, [r3, #16]
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	0159      	lsls	r1, r3, #5
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	440b      	add	r3, r1
 800741e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007422:	4619      	mov	r1, r3
 8007424:	4b7c      	ldr	r3, [pc, #496]	@ (8007618 <USB_EPStartXfer+0x53c>)
 8007426:	4013      	ands	r3, r2
 8007428:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007436:	691a      	ldr	r2, [r3, #16]
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	0159      	lsls	r1, r3, #5
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	440b      	add	r3, r1
 8007440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007444:	4619      	mov	r1, r3
 8007446:	4b75      	ldr	r3, [pc, #468]	@ (800761c <USB_EPStartXfer+0x540>)
 8007448:	4013      	ands	r3, r2
 800744a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d12f      	bne.n	80074b2 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	689a      	ldr	r2, [r3, #8]
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	4413      	add	r3, r2
 8007472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007476:	691a      	ldr	r2, [r3, #16]
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	6a1b      	ldr	r3, [r3, #32]
 800747c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007480:	69b9      	ldr	r1, [r7, #24]
 8007482:	0148      	lsls	r0, r1, #5
 8007484:	69f9      	ldr	r1, [r7, #28]
 8007486:	4401      	add	r1, r0
 8007488:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800748c:	4313      	orrs	r3, r2
 800748e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	015a      	lsls	r2, r3, #5
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	4413      	add	r3, r2
 8007498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	0151      	lsls	r1, r2, #5
 80074a2:	69fa      	ldr	r2, [r7, #28]
 80074a4:	440a      	add	r2, r1
 80074a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074ae:	6113      	str	r3, [r2, #16]
 80074b0:	e05f      	b.n	8007572 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d123      	bne.n	8007502 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	015a      	lsls	r2, r3, #5
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	4413      	add	r3, r2
 80074c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074c6:	691a      	ldr	r2, [r3, #16]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074d0:	69b9      	ldr	r1, [r7, #24]
 80074d2:	0148      	lsls	r0, r1, #5
 80074d4:	69f9      	ldr	r1, [r7, #28]
 80074d6:	4401      	add	r1, r0
 80074d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80074dc:	4313      	orrs	r3, r2
 80074de:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	0151      	lsls	r1, r2, #5
 80074f2:	69fa      	ldr	r2, [r7, #28]
 80074f4:	440a      	add	r2, r1
 80074f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074fe:	6113      	str	r3, [r2, #16]
 8007500:	e037      	b.n	8007572 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	691a      	ldr	r2, [r3, #16]
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	4413      	add	r3, r2
 800750c:	1e5a      	subs	r2, r3, #1
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	fbb2 f3f3 	udiv	r3, r2, r3
 8007516:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	8afa      	ldrh	r2, [r7, #22]
 800751e:	fb03 f202 	mul.w	r2, r3, r2
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	015a      	lsls	r2, r3, #5
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	4413      	add	r3, r2
 800752e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007532:	691a      	ldr	r2, [r3, #16]
 8007534:	8afb      	ldrh	r3, [r7, #22]
 8007536:	04d9      	lsls	r1, r3, #19
 8007538:	4b39      	ldr	r3, [pc, #228]	@ (8007620 <USB_EPStartXfer+0x544>)
 800753a:	400b      	ands	r3, r1
 800753c:	69b9      	ldr	r1, [r7, #24]
 800753e:	0148      	lsls	r0, r1, #5
 8007540:	69f9      	ldr	r1, [r7, #28]
 8007542:	4401      	add	r1, r0
 8007544:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007548:	4313      	orrs	r3, r2
 800754a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	4413      	add	r3, r2
 8007554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007558:	691a      	ldr	r2, [r3, #16]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007562:	69b9      	ldr	r1, [r7, #24]
 8007564:	0148      	lsls	r0, r1, #5
 8007566:	69f9      	ldr	r1, [r7, #28]
 8007568:	4401      	add	r1, r0
 800756a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800756e:	4313      	orrs	r3, r2
 8007570:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007572:	79fb      	ldrb	r3, [r7, #7]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d10d      	bne.n	8007594 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d009      	beq.n	8007594 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	68d9      	ldr	r1, [r3, #12]
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	015a      	lsls	r2, r3, #5
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	4413      	add	r3, r2
 800758c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007590:	460a      	mov	r2, r1
 8007592:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	791b      	ldrb	r3, [r3, #4]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d128      	bne.n	80075ee <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d110      	bne.n	80075ce <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	0151      	lsls	r1, r2, #5
 80075be:	69fa      	ldr	r2, [r7, #28]
 80075c0:	440a      	add	r2, r1
 80075c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075c6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	e00f      	b.n	80075ee <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	69ba      	ldr	r2, [r7, #24]
 80075de:	0151      	lsls	r1, r2, #5
 80075e0:	69fa      	ldr	r2, [r7, #28]
 80075e2:	440a      	add	r2, r1
 80075e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075ec:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	015a      	lsls	r2, r3, #5
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	69ba      	ldr	r2, [r7, #24]
 80075fe:	0151      	lsls	r1, r2, #5
 8007600:	69fa      	ldr	r2, [r7, #28]
 8007602:	440a      	add	r2, r1
 8007604:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007608:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800760c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3720      	adds	r7, #32
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	fff80000 	.word	0xfff80000
 800761c:	e007ffff 	.word	0xe007ffff
 8007620:	1ff80000 	.word	0x1ff80000

08007624 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007624:	b480      	push	{r7}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	785b      	ldrb	r3, [r3, #1]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d14a      	bne.n	80076d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007656:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800765a:	f040 8086 	bne.w	800776a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	015a      	lsls	r2, r3, #5
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	4413      	add	r3, r2
 8007668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	7812      	ldrb	r2, [r2, #0]
 8007672:	0151      	lsls	r1, r2, #5
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	440a      	add	r2, r1
 8007678:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800767c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007680:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	7812      	ldrb	r2, [r2, #0]
 8007696:	0151      	lsls	r1, r2, #5
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	440a      	add	r2, r1
 800769c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80076a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3301      	adds	r3, #1
 80076aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f242 7210 	movw	r2, #10000	@ 0x2710
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d902      	bls.n	80076bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	75fb      	strb	r3, [r7, #23]
          break;
 80076ba:	e056      	b.n	800776a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	015a      	lsls	r2, r3, #5
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	4413      	add	r3, r2
 80076c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076d4:	d0e7      	beq.n	80076a6 <USB_EPStopXfer+0x82>
 80076d6:	e048      	b.n	800776a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076f0:	d13b      	bne.n	800776a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	7812      	ldrb	r2, [r2, #0]
 8007706:	0151      	lsls	r1, r2, #5
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	440a      	add	r2, r1
 800770c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007710:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007714:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	4413      	add	r3, r2
 8007720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	7812      	ldrb	r2, [r2, #0]
 800772a:	0151      	lsls	r1, r2, #5
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	440a      	add	r2, r1
 8007730:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007734:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007738:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3301      	adds	r3, #1
 800773e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007746:	4293      	cmp	r3, r2
 8007748:	d902      	bls.n	8007750 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	75fb      	strb	r3, [r7, #23]
          break;
 800774e:	e00c      	b.n	800776a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	015a      	lsls	r2, r3, #5
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	4413      	add	r3, r2
 800775a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007764:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007768:	d0e7      	beq.n	800773a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800776a:	7dfb      	ldrb	r3, [r7, #23]
}
 800776c:	4618      	mov	r0, r3
 800776e:	371c      	adds	r7, #28
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007778:	b480      	push	{r7}
 800777a:	b089      	sub	sp, #36	@ 0x24
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	4611      	mov	r1, r2
 8007784:	461a      	mov	r2, r3
 8007786:	460b      	mov	r3, r1
 8007788:	71fb      	strb	r3, [r7, #7]
 800778a:	4613      	mov	r3, r2
 800778c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007796:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800779a:	2b00      	cmp	r3, #0
 800779c:	d123      	bne.n	80077e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800779e:	88bb      	ldrh	r3, [r7, #4]
 80077a0:	3303      	adds	r3, #3
 80077a2:	089b      	lsrs	r3, r3, #2
 80077a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80077a6:	2300      	movs	r3, #0
 80077a8:	61bb      	str	r3, [r7, #24]
 80077aa:	e018      	b.n	80077de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80077ac:	79fb      	ldrb	r3, [r7, #7]
 80077ae:	031a      	lsls	r2, r3, #12
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	4413      	add	r3, r2
 80077b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077b8:	461a      	mov	r2, r3
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	3301      	adds	r3, #1
 80077c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	3301      	adds	r3, #1
 80077ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	3301      	adds	r3, #1
 80077d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	3301      	adds	r3, #1
 80077d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	3301      	adds	r3, #1
 80077dc:	61bb      	str	r3, [r7, #24]
 80077de:	69ba      	ldr	r2, [r7, #24]
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d3e2      	bcc.n	80077ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3724      	adds	r7, #36	@ 0x24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b08b      	sub	sp, #44	@ 0x2c
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	4613      	mov	r3, r2
 8007800:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800780a:	88fb      	ldrh	r3, [r7, #6]
 800780c:	089b      	lsrs	r3, r3, #2
 800780e:	b29b      	uxth	r3, r3
 8007810:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007812:	88fb      	ldrh	r3, [r7, #6]
 8007814:	f003 0303 	and.w	r3, r3, #3
 8007818:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800781a:	2300      	movs	r3, #0
 800781c:	623b      	str	r3, [r7, #32]
 800781e:	e014      	b.n	800784a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782a:	601a      	str	r2, [r3, #0]
    pDest++;
 800782c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782e:	3301      	adds	r3, #1
 8007830:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007834:	3301      	adds	r3, #1
 8007836:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783a:	3301      	adds	r3, #1
 800783c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800783e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007840:	3301      	adds	r3, #1
 8007842:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	3301      	adds	r3, #1
 8007848:	623b      	str	r3, [r7, #32]
 800784a:	6a3a      	ldr	r2, [r7, #32]
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	429a      	cmp	r2, r3
 8007850:	d3e6      	bcc.n	8007820 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007852:	8bfb      	ldrh	r3, [r7, #30]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d01e      	beq.n	8007896 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007862:	461a      	mov	r2, r3
 8007864:	f107 0310 	add.w	r3, r7, #16
 8007868:	6812      	ldr	r2, [r2, #0]
 800786a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	00db      	lsls	r3, r3, #3
 8007874:	fa22 f303 	lsr.w	r3, r2, r3
 8007878:	b2da      	uxtb	r2, r3
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787c:	701a      	strb	r2, [r3, #0]
      i++;
 800787e:	6a3b      	ldr	r3, [r7, #32]
 8007880:	3301      	adds	r3, #1
 8007882:	623b      	str	r3, [r7, #32]
      pDest++;
 8007884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007886:	3301      	adds	r3, #1
 8007888:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800788a:	8bfb      	ldrh	r3, [r7, #30]
 800788c:	3b01      	subs	r3, #1
 800788e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007890:	8bfb      	ldrh	r3, [r7, #30]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1ea      	bne.n	800786c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007898:	4618      	mov	r0, r3
 800789a:	372c      	adds	r7, #44	@ 0x2c
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	785b      	ldrb	r3, [r3, #1]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d12c      	bne.n	800791a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	015a      	lsls	r2, r3, #5
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	db12      	blt.n	80078f8 <USB_EPSetStall+0x54>
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00f      	beq.n	80078f8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	0151      	lsls	r1, r2, #5
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	440a      	add	r2, r1
 80078ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80078f6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	015a      	lsls	r2, r3, #5
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4413      	add	r3, r2
 8007900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	0151      	lsls	r1, r2, #5
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	440a      	add	r2, r1
 800790e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007912:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007916:	6013      	str	r3, [r2, #0]
 8007918:	e02b      	b.n	8007972 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	4413      	add	r3, r2
 8007922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	db12      	blt.n	8007952 <USB_EPSetStall+0xae>
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00f      	beq.n	8007952 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	015a      	lsls	r2, r3, #5
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	4413      	add	r3, r2
 800793a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	0151      	lsls	r1, r2, #5
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	440a      	add	r2, r1
 8007948:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800794c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007950:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	0151      	lsls	r1, r2, #5
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	440a      	add	r2, r1
 8007968:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800796c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007970:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	785b      	ldrb	r3, [r3, #1]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d128      	bne.n	80079ee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	0151      	lsls	r1, r2, #5
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	440a      	add	r2, r1
 80079b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80079ba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	791b      	ldrb	r3, [r3, #4]
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	d003      	beq.n	80079cc <USB_EPClearStall+0x4c>
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	791b      	ldrb	r3, [r3, #4]
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d138      	bne.n	8007a3e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68ba      	ldr	r2, [r7, #8]
 80079dc:	0151      	lsls	r1, r2, #5
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	440a      	add	r2, r1
 80079e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079ea:	6013      	str	r3, [r2, #0]
 80079ec:	e027      	b.n	8007a3e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	015a      	lsls	r2, r3, #5
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	4413      	add	r3, r2
 80079f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	0151      	lsls	r1, r2, #5
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	440a      	add	r2, r1
 8007a04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a08:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	791b      	ldrb	r3, [r3, #4]
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	d003      	beq.n	8007a1e <USB_EPClearStall+0x9e>
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	791b      	ldrb	r3, [r3, #4]
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d10f      	bne.n	8007a3e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	0151      	lsls	r1, r2, #5
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	440a      	add	r2, r1
 8007a34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a3c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	460b      	mov	r3, r1
 8007a56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a6a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007a6e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	78fb      	ldrb	r3, [r7, #3]
 8007a7a:	011b      	lsls	r3, r3, #4
 8007a7c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007a80:	68f9      	ldr	r1, [r7, #12]
 8007a82:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a86:	4313      	orrs	r3, r2
 8007a88:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3714      	adds	r7, #20
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007ab2:	f023 0303 	bic.w	r3, r3, #3
 8007ab6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ac6:	f023 0302 	bic.w	r3, r3, #2
 8007aca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b085      	sub	sp, #20
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007af4:	f023 0303 	bic.w	r3, r3, #3
 8007af8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b08:	f043 0302 	orr.w	r3, r3, #2
 8007b0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	4013      	ands	r3, r2
 8007b32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007b34:	68fb      	ldr	r3, [r7, #12]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b085      	sub	sp, #20
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	4013      	ands	r3, r2
 8007b64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	0c1b      	lsrs	r3, r3, #16
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b085      	sub	sp, #20
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b92:	69db      	ldr	r3, [r3, #28]
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	4013      	ands	r3, r2
 8007b98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	b29b      	uxth	r3, r3
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3714      	adds	r7, #20
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b085      	sub	sp, #20
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007bba:	78fb      	ldrb	r3, [r7, #3]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007bd8:	68bb      	ldr	r3, [r7, #8]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3714      	adds	r7, #20
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007be6:	b480      	push	{r7}
 8007be8:	b087      	sub	sp, #28
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
 8007bee:	460b      	mov	r3, r1
 8007bf0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c08:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007c0a:	78fb      	ldrb	r3, [r7, #3]
 8007c0c:	f003 030f 	and.w	r3, r3, #15
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	fa22 f303 	lsr.w	r3, r2, r3
 8007c16:	01db      	lsls	r3, r3, #7
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007c20:	78fb      	ldrb	r3, [r7, #3]
 8007c22:	015a      	lsls	r2, r3, #5
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	4013      	ands	r3, r2
 8007c32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c34:	68bb      	ldr	r3, [r7, #8]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	371c      	adds	r7, #28
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr

08007c42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c42:	b480      	push	{r7}
 8007c44:	b083      	sub	sp, #12
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	f003 0301 	and.w	r3, r3, #1
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
	...

08007c60 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4b09      	ldr	r3, [pc, #36]	@ (8007ca4 <USB_ActivateSetup+0x44>)
 8007c7e:	4013      	ands	r3, r2
 8007c80:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3714      	adds	r7, #20
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr
 8007ca4:	fffff800 	.word	0xfffff800

08007ca8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b087      	sub	sp, #28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	607a      	str	r2, [r7, #4]
 8007cb4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	333c      	adds	r3, #60	@ 0x3c
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	4a26      	ldr	r2, [pc, #152]	@ (8007d60 <USB_EP0_OutStart+0xb8>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d90a      	bls.n	8007ce2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cdc:	d101      	bne.n	8007ce2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	e037      	b.n	8007d52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ce8:	461a      	mov	r2, r3
 8007cea:	2300      	movs	r3, #0
 8007cec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cfc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d10:	f043 0318 	orr.w	r3, r3, #24
 8007d14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d24:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007d28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007d2a:	7afb      	ldrb	r3, [r7, #11]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d10f      	bne.n	8007d50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d36:	461a      	mov	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d4a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007d4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	371c      	adds	r7, #28
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	4f54300a 	.word	0x4f54300a

08007d64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b085      	sub	sp, #20
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3301      	adds	r3, #1
 8007d74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d7c:	d901      	bls.n	8007d82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e022      	b.n	8007dc8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	daf2      	bge.n	8007d70 <USB_CoreReset+0xc>

  count = 10U;
 8007d8a:	230a      	movs	r3, #10
 8007d8c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007d8e:	e002      	b.n	8007d96 <USB_CoreReset+0x32>
  {
    count--;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	3b01      	subs	r3, #1
 8007d94:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1f9      	bne.n	8007d90 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	f043 0201 	orr.w	r2, r3, #1
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	3301      	adds	r3, #1
 8007dac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007db4:	d901      	bls.n	8007dba <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e006      	b.n	8007dc8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d0f0      	beq.n	8007da8 <USB_CoreReset+0x44>

  return HAL_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3714      	adds	r7, #20
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007dd4:	b5b0      	push	{r4, r5, r7, lr}
 8007dd6:	b08c      	sub	sp, #48	@ 0x30
 8007dd8:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007dda:	2100      	movs	r1, #0
 8007ddc:	2000      	movs	r0, #0
 8007dde:	f005 ff8d 	bl	800dcfc <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8007de2:	4b1a      	ldr	r3, [pc, #104]	@ (8007e4c <MX_LWIP_Init+0x78>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8007de8:	4b19      	ldr	r3, [pc, #100]	@ (8007e50 <MX_LWIP_Init+0x7c>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8007dee:	4b19      	ldr	r3, [pc, #100]	@ (8007e54 <MX_LWIP_Init+0x80>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007df4:	4b18      	ldr	r3, [pc, #96]	@ (8007e58 <MX_LWIP_Init+0x84>)
 8007df6:	9302      	str	r3, [sp, #8]
 8007df8:	4b18      	ldr	r3, [pc, #96]	@ (8007e5c <MX_LWIP_Init+0x88>)
 8007dfa:	9301      	str	r3, [sp, #4]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	4b14      	ldr	r3, [pc, #80]	@ (8007e54 <MX_LWIP_Init+0x80>)
 8007e02:	4a13      	ldr	r2, [pc, #76]	@ (8007e50 <MX_LWIP_Init+0x7c>)
 8007e04:	4911      	ldr	r1, [pc, #68]	@ (8007e4c <MX_LWIP_Init+0x78>)
 8007e06:	4816      	ldr	r0, [pc, #88]	@ (8007e60 <MX_LWIP_Init+0x8c>)
 8007e08:	f00b fafc 	bl	8013404 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007e0c:	4814      	ldr	r0, [pc, #80]	@ (8007e60 <MX_LWIP_Init+0x8c>)
 8007e0e:	f00b fcbf 	bl	8013790 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8007e12:	4813      	ldr	r0, [pc, #76]	@ (8007e60 <MX_LWIP_Init+0x8c>)
 8007e14:	f00b fccc 	bl	80137b0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007e18:	4912      	ldr	r1, [pc, #72]	@ (8007e64 <MX_LWIP_Init+0x90>)
 8007e1a:	4811      	ldr	r0, [pc, #68]	@ (8007e60 <MX_LWIP_Init+0x8c>)
 8007e1c:	f00b fdd8 	bl	80139d0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8007e20:	4b11      	ldr	r3, [pc, #68]	@ (8007e68 <MX_LWIP_Init+0x94>)
 8007e22:	1d3c      	adds	r4, r7, #4
 8007e24:	461d      	mov	r5, r3
 8007e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007e2e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8007e32:	1d3b      	adds	r3, r7, #4
 8007e34:	490a      	ldr	r1, [pc, #40]	@ (8007e60 <MX_LWIP_Init+0x8c>)
 8007e36:	4618      	mov	r0, r3
 8007e38:	f002 fde2 	bl	800aa00 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8007e3c:	4808      	ldr	r0, [pc, #32]	@ (8007e60 <MX_LWIP_Init+0x8c>)
 8007e3e:	f014 f87b 	bl	801bf38 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007e42:	bf00      	nop
 8007e44:	3720      	adds	r7, #32
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bdb0      	pop	{r4, r5, r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	200008d8 	.word	0x200008d8
 8007e50:	200008dc 	.word	0x200008dc
 8007e54:	200008e0 	.word	0x200008e0
 8007e58:	0800dc39 	.word	0x0800dc39
 8007e5c:	08008405 	.word	0x08008405
 8007e60:	20000894 	.word	0x20000894
 8007e64:	08007e6d 	.word	0x08007e6d
 8007e68:	08022758 	.word	0x08022758

08007e6c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b087      	sub	sp, #28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8007e92:	2320      	movs	r3, #32
 8007e94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007e96:	f3bf 8f4f 	dsb	sy
}
 8007e9a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8007e9c:	e00b      	b.n	8007eb6 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8007e9e:	4a0d      	ldr	r2, [pc, #52]	@ (8007ed4 <SCB_InvalidateDCache_by_Addr+0x54>)
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	4413      	add	r3, r2
 8007eac:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	dcf0      	bgt.n	8007e9e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8007ebc:	f3bf 8f4f 	dsb	sy
}
 8007ec0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007ec2:	f3bf 8f6f 	isb	sy
}
 8007ec6:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8007ec8:	bf00      	nop
 8007eca:	371c      	adds	r7, #28
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr
 8007ed4:	e000ed00 	.word	0xe000ed00

08007ed8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8007ee0:	4b04      	ldr	r3, [pc, #16]	@ (8007ef4 <HAL_ETH_RxCpltCallback+0x1c>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f002 ff13 	bl	800ad10 <osSemaphoreRelease>
}
 8007eea:	bf00      	nop
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	200008e8 	.word	0x200008e8

08007ef8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8007f00:	4b04      	ldr	r3, [pc, #16]	@ (8007f14 <HAL_ETH_TxCpltCallback+0x1c>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f002 ff03 	bl	800ad10 <osSemaphoreRelease>
}
 8007f0a:	bf00      	nop
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	200008ec 	.word	0x200008ec

08007f18 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7fa f966 	bl	80021f2 <HAL_ETH_GetDMAError>
 8007f26:	4603      	mov	r3, r0
 8007f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f2c:	2b80      	cmp	r3, #128	@ 0x80
 8007f2e:	d104      	bne.n	8007f3a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8007f30:	4b04      	ldr	r3, [pc, #16]	@ (8007f44 <HAL_ETH_ErrorCallback+0x2c>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f002 feeb 	bl	800ad10 <osSemaphoreRelease>
  }
}
 8007f3a:	bf00      	nop
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	200008e8 	.word	0x200008e8

08007f48 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007f48:	b5b0      	push	{r4, r5, r7, lr}
 8007f4a:	b0b4      	sub	sp, #208	@ 0xd0
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  uint32_t duplex, speed = 0;
 8007f56:	2300      	movs	r3, #0
 8007f58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  int32_t PHYLinkState = 0;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 8007f62:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007f66:	2264      	movs	r2, #100	@ 0x64
 8007f68:	2100      	movs	r1, #0
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f019 fbf2 	bl	8021754 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007f70:	4b9f      	ldr	r3, [pc, #636]	@ (80081f0 <low_level_init+0x2a8>)
 8007f72:	4aa0      	ldr	r2, [pc, #640]	@ (80081f4 <low_level_init+0x2ac>)
 8007f74:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007f76:	2300      	movs	r3, #0
 8007f78:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  MACAddr[1] = 0x80;
 8007f7c:	2380      	movs	r3, #128	@ 0x80
 8007f7e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  MACAddr[2] = 0xE1;
 8007f82:	23e1      	movs	r3, #225	@ 0xe1
 8007f84:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  MACAddr[3] = 0x00;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  MACAddr[4] = 0x00;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[5] = 0x00;
 8007f94:	2300      	movs	r3, #0
 8007f96:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  heth.Init.MACAddr = &MACAddr[0];
 8007f9a:	4a95      	ldr	r2, [pc, #596]	@ (80081f0 <low_level_init+0x2a8>)
 8007f9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007fa0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007fa2:	4b93      	ldr	r3, [pc, #588]	@ (80081f0 <low_level_init+0x2a8>)
 8007fa4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007fa8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007faa:	4b91      	ldr	r3, [pc, #580]	@ (80081f0 <low_level_init+0x2a8>)
 8007fac:	4a92      	ldr	r2, [pc, #584]	@ (80081f8 <low_level_init+0x2b0>)
 8007fae:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007fb0:	4b8f      	ldr	r3, [pc, #572]	@ (80081f0 <low_level_init+0x2a8>)
 8007fb2:	4a92      	ldr	r2, [pc, #584]	@ (80081fc <low_level_init+0x2b4>)
 8007fb4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007fb6:	4b8e      	ldr	r3, [pc, #568]	@ (80081f0 <low_level_init+0x2a8>)
 8007fb8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007fbc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007fbe:	488c      	ldr	r0, [pc, #560]	@ (80081f0 <low_level_init+0x2a8>)
 8007fc0:	f7f9 face 	bl	8001560 <HAL_ETH_Init>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007fca:	2238      	movs	r2, #56	@ 0x38
 8007fcc:	2100      	movs	r1, #0
 8007fce:	488c      	ldr	r0, [pc, #560]	@ (8008200 <low_level_init+0x2b8>)
 8007fd0:	f019 fbc0 	bl	8021754 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007fd4:	4b8a      	ldr	r3, [pc, #552]	@ (8008200 <low_level_init+0x2b8>)
 8007fd6:	2221      	movs	r2, #33	@ 0x21
 8007fd8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007fda:	4b89      	ldr	r3, [pc, #548]	@ (8008200 <low_level_init+0x2b8>)
 8007fdc:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8007fe0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007fe2:	4b87      	ldr	r3, [pc, #540]	@ (8008200 <low_level_init+0x2b8>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007fe8:	4886      	ldr	r0, [pc, #536]	@ (8008204 <low_level_init+0x2bc>)
 8007fea:	f00b f8ef 	bl	80131cc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2206      	movs	r2, #6
 8007ff2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007ff6:	4b7e      	ldr	r3, [pc, #504]	@ (80081f0 <low_level_init+0x2a8>)
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	781a      	ldrb	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008002:	4b7b      	ldr	r3, [pc, #492]	@ (80081f0 <low_level_init+0x2a8>)
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	785a      	ldrb	r2, [r3, #1]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800800e:	4b78      	ldr	r3, [pc, #480]	@ (80081f0 <low_level_init+0x2a8>)
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	789a      	ldrb	r2, [r3, #2]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800801a:	4b75      	ldr	r3, [pc, #468]	@ (80081f0 <low_level_init+0x2a8>)
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	78da      	ldrb	r2, [r3, #3]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008026:	4b72      	ldr	r3, [pc, #456]	@ (80081f0 <low_level_init+0x2a8>)
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	791a      	ldrb	r2, [r3, #4]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008032:	4b6f      	ldr	r3, [pc, #444]	@ (80081f0 <low_level_init+0x2a8>)
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	795a      	ldrb	r2, [r3, #5]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8008044:	861a      	strh	r2, [r3, #48]	@ 0x30

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_IGMP;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800804c:	f043 032a 	orr.w	r3, r3, #42	@ 0x2a
 8008050:	b2da      	uxtb	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  #else
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_IGMP;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8008058:	2300      	movs	r3, #0
 800805a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800805c:	2300      	movs	r3, #0
 800805e:	653b      	str	r3, [r7, #80]	@ 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8008060:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8008064:	2101      	movs	r1, #1
 8008066:	4618      	mov	r0, r3
 8008068:	f002 fdd2 	bl	800ac10 <osSemaphoreCreate>
 800806c:	4603      	mov	r3, r0
 800806e:	4a66      	ldr	r2, [pc, #408]	@ (8008208 <low_level_init+0x2c0>)
 8008070:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8008072:	2300      	movs	r3, #0
 8008074:	647b      	str	r3, [r7, #68]	@ 0x44
 8008076:	2300      	movs	r3, #0
 8008078:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800807a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800807e:	2101      	movs	r1, #1
 8008080:	4618      	mov	r0, r3
 8008082:	f002 fdc5 	bl	800ac10 <osSemaphoreCreate>
 8008086:	4603      	mov	r3, r0
 8008088:	4a60      	ldr	r2, [pc, #384]	@ (800820c <low_level_init+0x2c4>)
 800808a:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 800808c:	4b5e      	ldr	r3, [pc, #376]	@ (8008208 <low_level_init+0x2c0>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2100      	movs	r1, #0
 8008092:	4618      	mov	r0, r3
 8008094:	f002 fdee 	bl	800ac74 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8008098:	4b5c      	ldr	r3, [pc, #368]	@ (800820c <low_level_init+0x2c4>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2100      	movs	r1, #0
 800809e:	4618      	mov	r0, r3
 80080a0:	f002 fde8 	bl	800ac74 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80080a4:	4b5a      	ldr	r3, [pc, #360]	@ (8008210 <low_level_init+0x2c8>)
 80080a6:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80080aa:	461d      	mov	r5, r3
 80080ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80080b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80080b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80080bc:	6879      	ldr	r1, [r7, #4]
 80080be:	4618      	mov	r0, r3
 80080c0:	f002 fc9e 	bl	800aa00 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80080c4:	4953      	ldr	r1, [pc, #332]	@ (8008214 <low_level_init+0x2cc>)
 80080c6:	4854      	ldr	r0, [pc, #336]	@ (8008218 <low_level_init+0x2d0>)
 80080c8:	f7f9 f805 	bl	80010d6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80080cc:	4852      	ldr	r0, [pc, #328]	@ (8008218 <low_level_init+0x2d0>)
 80080ce:	f7f9 f834 	bl	800113a <LAN8742_Init>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d006      	beq.n	80080e6 <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f00b fc49 	bl	8013970 <netif_set_link_down>
    netif_set_down(netif);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f00b fbdc 	bl	801389c <netif_set_down>
 80080e4:	e081      	b.n	80081ea <low_level_init+0x2a2>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 80080e6:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d165      	bne.n	80081ba <low_level_init+0x272>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80080ee:	484a      	ldr	r0, [pc, #296]	@ (8008218 <low_level_init+0x2d0>)
 80080f0:	f7f9 f870 	bl	80011d4 <LAN8742_GetLinkState>
 80080f4:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80080f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	dc06      	bgt.n	800810e <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f00b fc35 	bl	8013970 <netif_set_link_down>
      netif_set_down(netif);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f00b fbc8 	bl	801389c <netif_set_down>
 800810c:	e057      	b.n	80081be <low_level_init+0x276>
    }
    else
    {
      switch (PHYLinkState)
 800810e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008112:	3b02      	subs	r3, #2
 8008114:	2b03      	cmp	r3, #3
 8008116:	d82b      	bhi.n	8008170 <low_level_init+0x228>
 8008118:	a201      	add	r2, pc, #4	@ (adr r2, 8008120 <low_level_init+0x1d8>)
 800811a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811e:	bf00      	nop
 8008120:	08008131 	.word	0x08008131
 8008124:	08008143 	.word	0x08008143
 8008128:	08008153 	.word	0x08008153
 800812c:	08008163 	.word	0x08008163
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8008130:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008134:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8008138:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800813c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8008140:	e01f      	b.n	8008182 <low_level_init+0x23a>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8008142:	2300      	movs	r3, #0
 8008144:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8008148:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800814c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8008150:	e017      	b.n	8008182 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8008152:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008156:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 800815a:	2300      	movs	r3, #0
 800815c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8008160:	e00f      	b.n	8008182 <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8008162:	2300      	movs	r3, #0
 8008164:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 8008168:	2300      	movs	r3, #0
 800816a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 800816e:	e008      	b.n	8008182 <low_level_init+0x23a>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8008170:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008174:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8008178:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800817c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8008180:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008182:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008186:	4619      	mov	r1, r3
 8008188:	4819      	ldr	r0, [pc, #100]	@ (80081f0 <low_level_init+0x2a8>)
 800818a:	f7f9 fed1 	bl	8001f30 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800818e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008192:	677b      	str	r3, [r7, #116]	@ 0x74
    MACConf.Speed = speed;
 8008194:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008198:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800819a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800819e:	4619      	mov	r1, r3
 80081a0:	4813      	ldr	r0, [pc, #76]	@ (80081f0 <low_level_init+0x2a8>)
 80081a2:	f7f9 ffbc 	bl	800211e <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 80081a6:	4812      	ldr	r0, [pc, #72]	@ (80081f0 <low_level_init+0x2a8>)
 80081a8:	f7f9 fa74 	bl	8001694 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f00b faff 	bl	80137b0 <netif_set_up>
    netif_set_link_up(netif);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f00b fba4 	bl	8013900 <netif_set_link_up>
 80081b8:	e001      	b.n	80081be <low_level_init+0x276>
    }

  }
  else
  {
    Error_Handler();
 80081ba:	f7f8 fd17 	bl	8000bec <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 80081be:	f7f9 f8e1 	bl	8001384 <HAL_GetREVID>
 80081c2:	4603      	mov	r3, r0
 80081c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081c8:	d10f      	bne.n	80081ea <low_level_init+0x2a2>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 80081ca:	4b14      	ldr	r3, [pc, #80]	@ (800821c <low_level_init+0x2d4>)
 80081cc:	f107 040c 	add.w	r4, r7, #12
 80081d0:	461d      	mov	r5, r3
 80081d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80081da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 80081de:	f107 030c 	add.w	r3, r7, #12
 80081e2:	2100      	movs	r1, #0
 80081e4:	4618      	mov	r0, r3
 80081e6:	f002 fc0b 	bl	800aa00 <osThreadCreate>
  }
}
 80081ea:	37d0      	adds	r7, #208	@ 0xd0
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bdb0      	pop	{r4, r5, r7, pc}
 80081f0:	200008f0 	.word	0x200008f0
 80081f4:	40028000 	.word	0x40028000
 80081f8:	20000238 	.word	0x20000238
 80081fc:	20000198 	.word	0x20000198
 8008200:	200009a0 	.word	0x200009a0
 8008204:	080267bc 	.word	0x080267bc
 8008208:	200008e8 	.word	0x200008e8
 800820c:	200008ec 	.word	0x200008ec
 8008210:	0802277c 	.word	0x0802277c
 8008214:	2000000c 	.word	0x2000000c
 8008218:	200009d8 	.word	0x200009d8
 800821c:	080227a8 	.word	0x080227a8

08008220 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b092      	sub	sp, #72	@ 0x48
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800822a:	2300      	movs	r3, #0
 800822c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800822e:	2300      	movs	r3, #0
 8008230:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8008232:	2300      	movs	r3, #0
 8008234:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8008238:	f107 030c 	add.w	r3, r7, #12
 800823c:	2230      	movs	r2, #48	@ 0x30
 800823e:	2100      	movs	r1, #0
 8008240:	4618      	mov	r0, r3
 8008242:	f019 fa87 	bl	8021754 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008246:	f107 030c 	add.w	r3, r7, #12
 800824a:	2230      	movs	r2, #48	@ 0x30
 800824c:	2100      	movs	r1, #0
 800824e:	4618      	mov	r0, r3
 8008250:	f019 fa80 	bl	8021754 <memset>

  for(q = p; q != NULL; q = q->next)
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	643b      	str	r3, [r7, #64]	@ 0x40
 8008258:	e045      	b.n	80082e6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800825a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800825c:	2b03      	cmp	r3, #3
 800825e:	d902      	bls.n	8008266 <low_level_output+0x46>
      return ERR_IF;
 8008260:	f06f 030b 	mvn.w	r3, #11
 8008264:	e07f      	b.n	8008366 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 8008266:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008268:	6859      	ldr	r1, [r3, #4]
 800826a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800826c:	4613      	mov	r3, r2
 800826e:	005b      	lsls	r3, r3, #1
 8008270:	4413      	add	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	3348      	adds	r3, #72	@ 0x48
 8008276:	443b      	add	r3, r7
 8008278:	3b3c      	subs	r3, #60	@ 0x3c
 800827a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800827c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800827e:	895b      	ldrh	r3, [r3, #10]
 8008280:	4619      	mov	r1, r3
 8008282:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008284:	4613      	mov	r3, r2
 8008286:	005b      	lsls	r3, r3, #1
 8008288:	4413      	add	r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	3348      	adds	r3, #72	@ 0x48
 800828e:	443b      	add	r3, r7
 8008290:	3b38      	subs	r3, #56	@ 0x38
 8008292:	6019      	str	r1, [r3, #0]

    if(i>0)
 8008294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008296:	2b00      	cmp	r3, #0
 8008298:	d011      	beq.n	80082be <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800829a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800829c:	1e5a      	subs	r2, r3, #1
 800829e:	f107 000c 	add.w	r0, r7, #12
 80082a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80082a4:	460b      	mov	r3, r1
 80082a6:	005b      	lsls	r3, r3, #1
 80082a8:	440b      	add	r3, r1
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	18c1      	adds	r1, r0, r3
 80082ae:	4613      	mov	r3, r2
 80082b0:	005b      	lsls	r3, r3, #1
 80082b2:	4413      	add	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	3348      	adds	r3, #72	@ 0x48
 80082b8:	443b      	add	r3, r7
 80082ba:	3b34      	subs	r3, #52	@ 0x34
 80082bc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80082be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d109      	bne.n	80082da <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80082c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082c8:	4613      	mov	r3, r2
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	4413      	add	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	3348      	adds	r3, #72	@ 0x48
 80082d2:	443b      	add	r3, r7
 80082d4:	3b34      	subs	r3, #52	@ 0x34
 80082d6:	2200      	movs	r2, #0
 80082d8:	601a      	str	r2, [r3, #0]
    }

    i++;
 80082da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082dc:	3301      	adds	r3, #1
 80082de:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80082e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80082e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1b6      	bne.n	800825a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	891b      	ldrh	r3, [r3, #8]
 80082f0:	461a      	mov	r2, r3
 80082f2:	4b1f      	ldr	r3, [pc, #124]	@ (8008370 <low_level_output+0x150>)
 80082f4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80082f6:	4a1e      	ldr	r2, [pc, #120]	@ (8008370 <low_level_output+0x150>)
 80082f8:	f107 030c 	add.w	r3, r7, #12
 80082fc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80082fe:	4a1c      	ldr	r2, [pc, #112]	@ (8008370 <low_level_output+0x150>)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8008304:	6838      	ldr	r0, [r7, #0]
 8008306:	f00b ffdd 	bl	80142c4 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800830a:	4919      	ldr	r1, [pc, #100]	@ (8008370 <low_level_output+0x150>)
 800830c:	4819      	ldr	r0, [pc, #100]	@ (8008374 <low_level_output+0x154>)
 800830e:	f7f9 fab1 	bl	8001874 <HAL_ETH_Transmit_IT>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d103      	bne.n	8008320 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8008318:	2300      	movs	r3, #0
 800831a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800831e:	e01b      	b.n	8008358 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8008320:	4814      	ldr	r0, [pc, #80]	@ (8008374 <low_level_output+0x154>)
 8008322:	f7f9 ff59 	bl	80021d8 <HAL_ETH_GetError>
 8008326:	4603      	mov	r3, r0
 8008328:	f003 0302 	and.w	r3, r3, #2
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00d      	beq.n	800834c <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8008330:	4b11      	ldr	r3, [pc, #68]	@ (8008378 <low_level_output+0x158>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8008338:	4618      	mov	r0, r3
 800833a:	f002 fc9b 	bl	800ac74 <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 800833e:	480d      	ldr	r0, [pc, #52]	@ (8008374 <low_level_output+0x154>)
 8008340:	f7f9 fc38 	bl	8001bb4 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8008344:	23fe      	movs	r3, #254	@ 0xfe
 8008346:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800834a:	e005      	b.n	8008358 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800834c:	6838      	ldr	r0, [r7, #0]
 800834e:	f00b ff13 	bl	8014178 <pbuf_free>
        errval =  ERR_IF;
 8008352:	23f4      	movs	r3, #244	@ 0xf4
 8008354:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8008358:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800835c:	f113 0f02 	cmn.w	r3, #2
 8008360:	d0d3      	beq.n	800830a <low_level_output+0xea>

  return errval;
 8008362:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8008366:	4618      	mov	r0, r3
 8008368:	3748      	adds	r7, #72	@ 0x48
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	200009a0 	.word	0x200009a0
 8008374:	200008f0 	.word	0x200008f0
 8008378:	200008ec 	.word	0x200008ec

0800837c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008384:	2300      	movs	r3, #0
 8008386:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8008388:	4b07      	ldr	r3, [pc, #28]	@ (80083a8 <low_level_input+0x2c>)
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d105      	bne.n	800839c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8008390:	f107 030c 	add.w	r3, r7, #12
 8008394:	4619      	mov	r1, r3
 8008396:	4805      	ldr	r0, [pc, #20]	@ (80083ac <low_level_input+0x30>)
 8008398:	f7f9 fac8 	bl	800192c <HAL_ETH_ReadData>
  }

  return p;
 800839c:	68fb      	ldr	r3, [r7, #12]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	200008e4 	.word	0x200008e4
 80083ac:	200008f0 	.word	0x200008f0

080083b0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80083b8:	2300      	movs	r3, #0
 80083ba:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80083c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008400 <ethernetif_input+0x50>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80083c8:	4618      	mov	r0, r3
 80083ca:	f002 fc53 	bl	800ac74 <osSemaphoreWait>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1f5      	bne.n	80083c0 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80083d4:	68b8      	ldr	r0, [r7, #8]
 80083d6:	f7ff ffd1 	bl	800837c <low_level_input>
 80083da:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00a      	beq.n	80083f8 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	68b9      	ldr	r1, [r7, #8]
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	4798      	blx	r3
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d002      	beq.n	80083f8 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f00b fec0 	bl	8014178 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1ea      	bne.n	80083d4 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80083fe:	e7df      	b.n	80083c0 <ethernetif_input+0x10>
 8008400:	200008e8 	.word	0x200008e8

08008404 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d106      	bne.n	8008420 <ethernetif_init+0x1c>
 8008412:	4b0e      	ldr	r3, [pc, #56]	@ (800844c <ethernetif_init+0x48>)
 8008414:	f240 2217 	movw	r2, #535	@ 0x217
 8008418:	490d      	ldr	r1, [pc, #52]	@ (8008450 <ethernetif_init+0x4c>)
 800841a:	480e      	ldr	r0, [pc, #56]	@ (8008454 <ethernetif_init+0x50>)
 800841c:	f018 ffca 	bl	80213b4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2273      	movs	r2, #115	@ 0x73
 8008424:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
  netif->name[1] = IFNAME1;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2274      	movs	r2, #116	@ 0x74
 800842c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a09      	ldr	r2, [pc, #36]	@ (8008458 <ethernetif_init+0x54>)
 8008434:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a08      	ldr	r2, [pc, #32]	@ (800845c <ethernetif_init+0x58>)
 800843a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f7ff fd83 	bl	8007f48 <low_level_init>

  return ERR_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}
 800844c:	080227c4 	.word	0x080227c4
 8008450:	080227e0 	.word	0x080227e0
 8008454:	080227f0 	.word	0x080227f0
 8008458:	0801ddf9 	.word	0x0801ddf9
 800845c:	08008221 	.word	0x08008221

08008460 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800846c:	68f9      	ldr	r1, [r7, #12]
 800846e:	4809      	ldr	r0, [pc, #36]	@ (8008494 <pbuf_free_custom+0x34>)
 8008470:	f00a ff72 	bl	8013358 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8008474:	4b08      	ldr	r3, [pc, #32]	@ (8008498 <pbuf_free_custom+0x38>)
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d107      	bne.n	800848c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800847c:	4b06      	ldr	r3, [pc, #24]	@ (8008498 <pbuf_free_custom+0x38>)
 800847e:	2200      	movs	r2, #0
 8008480:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8008482:	4b06      	ldr	r3, [pc, #24]	@ (800849c <pbuf_free_custom+0x3c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4618      	mov	r0, r3
 8008488:	f002 fc42 	bl	800ad10 <osSemaphoreRelease>
  }
}
 800848c:	bf00      	nop
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	080267bc 	.word	0x080267bc
 8008498:	200008e4 	.word	0x200008e4
 800849c:	200008e8 	.word	0x200008e8

080084a0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80084a4:	f7f8 ff3e 	bl	8001324 <HAL_GetTick>
 80084a8:	4603      	mov	r3, r0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	bd80      	pop	{r7, pc}
	...

080084b0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b08e      	sub	sp, #56	@ 0x38
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084bc:	2200      	movs	r2, #0
 80084be:	601a      	str	r2, [r3, #0]
 80084c0:	605a      	str	r2, [r3, #4]
 80084c2:	609a      	str	r2, [r3, #8]
 80084c4:	60da      	str	r2, [r3, #12]
 80084c6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a52      	ldr	r2, [pc, #328]	@ (8008618 <HAL_ETH_MspInit+0x168>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	f040 809e 	bne.w	8008610 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80084d4:	4b51      	ldr	r3, [pc, #324]	@ (800861c <HAL_ETH_MspInit+0x16c>)
 80084d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084d8:	4a50      	ldr	r2, [pc, #320]	@ (800861c <HAL_ETH_MspInit+0x16c>)
 80084da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80084de:	6313      	str	r3, [r2, #48]	@ 0x30
 80084e0:	4b4e      	ldr	r3, [pc, #312]	@ (800861c <HAL_ETH_MspInit+0x16c>)
 80084e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084e8:	623b      	str	r3, [r7, #32]
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	4b4b      	ldr	r3, [pc, #300]	@ (800861c <HAL_ETH_MspInit+0x16c>)
 80084ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084f0:	4a4a      	ldr	r2, [pc, #296]	@ (800861c <HAL_ETH_MspInit+0x16c>)
 80084f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80084f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80084f8:	4b48      	ldr	r3, [pc, #288]	@ (800861c <HAL_ETH_MspInit+0x16c>)
 80084fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008500:	61fb      	str	r3, [r7, #28]
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	4b45      	ldr	r3, [pc, #276]	@ (800861c <HAL_ETH_MspInit+0x16c>)
 8008506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008508:	4a44      	ldr	r2, [pc, #272]	@ (800861c <HAL_ETH_MspInit+0x16c>)
 800850a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800850e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008510:	4b42      	ldr	r3, [pc, #264]	@ (800861c <HAL_ETH_MspInit+0x16c>)
 8008512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008514:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008518:	61bb      	str	r3, [r7, #24]
 800851a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800851c:	4b3f      	ldr	r3, [pc, #252]	@ (800861c <HAL_ETH_MspInit+0x16c>)
 800851e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008520:	4a3e      	ldr	r2, [pc, #248]	@ (800861c <HAL_ETH_MspInit+0x16c>)
 8008522:	f043 0304 	orr.w	r3, r3, #4
 8008526:	6313      	str	r3, [r2, #48]	@ 0x30
 8008528:	4b3c      	ldr	r3, [pc, #240]	@ (800861c <HAL_ETH_MspInit+0x16c>)
 800852a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800852c:	f003 0304 	and.w	r3, r3, #4
 8008530:	617b      	str	r3, [r7, #20]
 8008532:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008534:	4b39      	ldr	r3, [pc, #228]	@ (800861c <HAL_ETH_MspInit+0x16c>)
 8008536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008538:	4a38      	ldr	r2, [pc, #224]	@ (800861c <HAL_ETH_MspInit+0x16c>)
 800853a:	f043 0301 	orr.w	r3, r3, #1
 800853e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008540:	4b36      	ldr	r3, [pc, #216]	@ (800861c <HAL_ETH_MspInit+0x16c>)
 8008542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008544:	f003 0301 	and.w	r3, r3, #1
 8008548:	613b      	str	r3, [r7, #16]
 800854a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800854c:	4b33      	ldr	r3, [pc, #204]	@ (800861c <HAL_ETH_MspInit+0x16c>)
 800854e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008550:	4a32      	ldr	r2, [pc, #200]	@ (800861c <HAL_ETH_MspInit+0x16c>)
 8008552:	f043 0302 	orr.w	r3, r3, #2
 8008556:	6313      	str	r3, [r2, #48]	@ 0x30
 8008558:	4b30      	ldr	r3, [pc, #192]	@ (800861c <HAL_ETH_MspInit+0x16c>)
 800855a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800855c:	f003 0302 	and.w	r3, r3, #2
 8008560:	60fb      	str	r3, [r7, #12]
 8008562:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8008564:	4b2d      	ldr	r3, [pc, #180]	@ (800861c <HAL_ETH_MspInit+0x16c>)
 8008566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008568:	4a2c      	ldr	r2, [pc, #176]	@ (800861c <HAL_ETH_MspInit+0x16c>)
 800856a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800856e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008570:	4b2a      	ldr	r3, [pc, #168]	@ (800861c <HAL_ETH_MspInit+0x16c>)
 8008572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008578:	60bb      	str	r3, [r7, #8]
 800857a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800857c:	2332      	movs	r3, #50	@ 0x32
 800857e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008580:	2302      	movs	r3, #2
 8008582:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008584:	2300      	movs	r3, #0
 8008586:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008588:	2303      	movs	r3, #3
 800858a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800858c:	230b      	movs	r3, #11
 800858e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008594:	4619      	mov	r1, r3
 8008596:	4822      	ldr	r0, [pc, #136]	@ (8008620 <HAL_ETH_MspInit+0x170>)
 8008598:	f7fa fa58 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800859c:	2386      	movs	r3, #134	@ 0x86
 800859e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085a0:	2302      	movs	r3, #2
 80085a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085a4:	2300      	movs	r3, #0
 80085a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085a8:	2303      	movs	r3, #3
 80085aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80085ac:	230b      	movs	r3, #11
 80085ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80085b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085b4:	4619      	mov	r1, r3
 80085b6:	481b      	ldr	r0, [pc, #108]	@ (8008624 <HAL_ETH_MspInit+0x174>)
 80085b8:	f7fa fa48 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80085bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80085c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085c2:	2302      	movs	r3, #2
 80085c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085c6:	2300      	movs	r3, #0
 80085c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085ca:	2303      	movs	r3, #3
 80085cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80085ce:	230b      	movs	r3, #11
 80085d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80085d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085d6:	4619      	mov	r1, r3
 80085d8:	4813      	ldr	r0, [pc, #76]	@ (8008628 <HAL_ETH_MspInit+0x178>)
 80085da:	f7fa fa37 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80085de:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80085e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085e4:	2302      	movs	r3, #2
 80085e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085e8:	2300      	movs	r3, #0
 80085ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085ec:	2303      	movs	r3, #3
 80085ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80085f0:	230b      	movs	r3, #11
 80085f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80085f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085f8:	4619      	mov	r1, r3
 80085fa:	480c      	ldr	r0, [pc, #48]	@ (800862c <HAL_ETH_MspInit+0x17c>)
 80085fc:	f7fa fa26 	bl	8002a4c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8008600:	2200      	movs	r2, #0
 8008602:	2105      	movs	r1, #5
 8008604:	203d      	movs	r0, #61	@ 0x3d
 8008606:	f7f8 ff81 	bl	800150c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800860a:	203d      	movs	r0, #61	@ 0x3d
 800860c:	f7f8 ff9a 	bl	8001544 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008610:	bf00      	nop
 8008612:	3738      	adds	r7, #56	@ 0x38
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	40028000 	.word	0x40028000
 800861c:	40023800 	.word	0x40023800
 8008620:	40020800 	.word	0x40020800
 8008624:	40020000 	.word	0x40020000
 8008628:	40020400 	.word	0x40020400
 800862c:	40021800 	.word	0x40021800

08008630 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008634:	4802      	ldr	r0, [pc, #8]	@ (8008640 <ETH_PHY_IO_Init+0x10>)
 8008636:	f7f9 fd8d 	bl	8002154 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	bd80      	pop	{r7, pc}
 8008640:	200008f0 	.word	0x200008f0

08008644 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008644:	b480      	push	{r7}
 8008646:	af00      	add	r7, sp, #0
  return 0;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	68f9      	ldr	r1, [r7, #12]
 8008666:	4807      	ldr	r0, [pc, #28]	@ (8008684 <ETH_PHY_IO_ReadReg+0x30>)
 8008668:	f7f9 fbce 	bl	8001e08 <HAL_ETH_ReadPHYRegister>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d002      	beq.n	8008678 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008672:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008676:	e000      	b.n	800867a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	200008f0 	.word	0x200008f0

08008688 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	68f9      	ldr	r1, [r7, #12]
 800869a:	4807      	ldr	r0, [pc, #28]	@ (80086b8 <ETH_PHY_IO_WriteReg+0x30>)
 800869c:	f7f9 fbff 	bl	8001e9e <HAL_ETH_WritePHYRegister>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d002      	beq.n	80086ac <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80086a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80086aa:	e000      	b.n	80086ae <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	200008f0 	.word	0x200008f0

080086bc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80086c0:	f7f8 fe30 	bl	8001324 <HAL_GetTick>
 80086c4:	4603      	mov	r3, r0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	bd80      	pop	{r7, pc}
	...

080086cc <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b0a0      	sub	sp, #128	@ 0x80
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80086d4:	f107 0308 	add.w	r3, r7, #8
 80086d8:	2264      	movs	r2, #100	@ 0x64
 80086da:	2100      	movs	r1, #0
 80086dc:	4618      	mov	r0, r3
 80086de:	f019 f839 	bl	8021754 <memset>
  int32_t PHYLinkState = 0;
 80086e2:	2300      	movs	r3, #0
 80086e4:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80086e6:	2300      	movs	r3, #0
 80086e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80086ea:	2300      	movs	r3, #0
 80086ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80086ee:	2300      	movs	r3, #0
 80086f0:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80086f6:	483a      	ldr	r0, [pc, #232]	@ (80087e0 <ethernet_link_thread+0x114>)
 80086f8:	f7f8 fd6c 	bl	80011d4 <LAN8742_GetLinkState>
 80086fc:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80086fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008700:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008704:	089b      	lsrs	r3, r3, #2
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	b2db      	uxtb	r3, r3
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00c      	beq.n	800872a <ethernet_link_thread+0x5e>
 8008710:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008712:	2b01      	cmp	r3, #1
 8008714:	dc09      	bgt.n	800872a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8008716:	4833      	ldr	r0, [pc, #204]	@ (80087e4 <ethernet_link_thread+0x118>)
 8008718:	f7f9 f82c 	bl	8001774 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800871c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800871e:	f00b f8bd 	bl	801389c <netif_set_down>
    netif_set_link_down(netif);
 8008722:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008724:	f00b f924 	bl	8013970 <netif_set_link_down>
 8008728:	e055      	b.n	80087d6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800872a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800872c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008730:	f003 0304 	and.w	r3, r3, #4
 8008734:	2b00      	cmp	r3, #0
 8008736:	d14e      	bne.n	80087d6 <ethernet_link_thread+0x10a>
 8008738:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800873a:	2b01      	cmp	r3, #1
 800873c:	dd4b      	ble.n	80087d6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800873e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008740:	3b02      	subs	r3, #2
 8008742:	2b03      	cmp	r3, #3
 8008744:	d82a      	bhi.n	800879c <ethernet_link_thread+0xd0>
 8008746:	a201      	add	r2, pc, #4	@ (adr r2, 800874c <ethernet_link_thread+0x80>)
 8008748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874c:	0800875d 	.word	0x0800875d
 8008750:	0800876f 	.word	0x0800876f
 8008754:	0800877f 	.word	0x0800877f
 8008758:	0800878f 	.word	0x0800878f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800875c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008760:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8008762:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008766:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008768:	2301      	movs	r3, #1
 800876a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800876c:	e017      	b.n	800879e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800876e:	2300      	movs	r3, #0
 8008770:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8008772:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008776:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008778:	2301      	movs	r3, #1
 800877a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800877c:	e00f      	b.n	800879e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800877e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008782:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8008784:	2300      	movs	r3, #0
 8008786:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008788:	2301      	movs	r3, #1
 800878a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800878c:	e007      	b.n	800879e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800878e:	2300      	movs	r3, #0
 8008790:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8008792:	2300      	movs	r3, #0
 8008794:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008796:	2301      	movs	r3, #1
 8008798:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800879a:	e000      	b.n	800879e <ethernet_link_thread+0xd2>
    default:
      break;
 800879c:	bf00      	nop
    }

    if(linkchanged)
 800879e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d018      	beq.n	80087d6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80087a4:	f107 0308 	add.w	r3, r7, #8
 80087a8:	4619      	mov	r1, r3
 80087aa:	480e      	ldr	r0, [pc, #56]	@ (80087e4 <ethernet_link_thread+0x118>)
 80087ac:	f7f9 fbc0 	bl	8001f30 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80087b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80087b2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80087b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087b6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80087b8:	f107 0308 	add.w	r3, r7, #8
 80087bc:	4619      	mov	r1, r3
 80087be:	4809      	ldr	r0, [pc, #36]	@ (80087e4 <ethernet_link_thread+0x118>)
 80087c0:	f7f9 fcad 	bl	800211e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80087c4:	4807      	ldr	r0, [pc, #28]	@ (80087e4 <ethernet_link_thread+0x118>)
 80087c6:	f7f8 ff65 	bl	8001694 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80087ca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80087cc:	f00a fff0 	bl	80137b0 <netif_set_up>
      netif_set_link_up(netif);
 80087d0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80087d2:	f00b f895 	bl	8013900 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80087d6:	2064      	movs	r0, #100	@ 0x64
 80087d8:	f002 f96a 	bl	800aab0 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80087dc:	e78b      	b.n	80086f6 <ethernet_link_thread+0x2a>
 80087de:	bf00      	nop
 80087e0:	200009d8 	.word	0x200009d8
 80087e4:	200008f0 	.word	0x200008f0

080087e8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af02      	add	r7, sp, #8
 80087ee:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80087f0:	4812      	ldr	r0, [pc, #72]	@ (800883c <HAL_ETH_RxAllocateCallback+0x54>)
 80087f2:	f00a fd43 	bl	801327c <memp_malloc_pool>
 80087f6:	60f8      	str	r0, [r7, #12]
  if (p)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d014      	beq.n	8008828 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f103 0220 	add.w	r2, r3, #32
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4a0d      	ldr	r2, [pc, #52]	@ (8008840 <HAL_ETH_RxAllocateCallback+0x58>)
 800880c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8008816:	9201      	str	r2, [sp, #4]
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2241      	movs	r2, #65	@ 0x41
 800881e:	2100      	movs	r1, #0
 8008820:	2000      	movs	r0, #0
 8008822:	f00b faef 	bl	8013e04 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8008826:	e005      	b.n	8008834 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008828:	4b06      	ldr	r3, [pc, #24]	@ (8008844 <HAL_ETH_RxAllocateCallback+0x5c>)
 800882a:	2201      	movs	r2, #1
 800882c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	601a      	str	r2, [r3, #0]
}
 8008834:	bf00      	nop
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	080267bc 	.word	0x080267bc
 8008840:	08008461 	.word	0x08008461
 8008844:	200008e4 	.word	0x200008e4

08008848 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b088      	sub	sp, #32
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
 8008854:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800885e:	2300      	movs	r3, #0
 8008860:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	3b20      	subs	r3, #32
 8008866:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	2200      	movs	r2, #0
 800886c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	2200      	movs	r2, #0
 8008872:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	887a      	ldrh	r2, [r7, #2]
 8008878:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d103      	bne.n	800888a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	69fa      	ldr	r2, [r7, #28]
 8008886:	601a      	str	r2, [r3, #0]
 8008888:	e003      	b.n	8008892 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	69fa      	ldr	r2, [r7, #28]
 8008890:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	69fa      	ldr	r2, [r7, #28]
 8008896:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	61fb      	str	r3, [r7, #28]
 800889e:	e009      	b.n	80088b4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	891a      	ldrh	r2, [r3, #8]
 80088a4:	887b      	ldrh	r3, [r7, #2]
 80088a6:	4413      	add	r3, r2
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	69fb      	ldr	r3, [r7, #28]
 80088ac:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	61fb      	str	r3, [r7, #28]
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d1f2      	bne.n	80088a0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80088ba:	887b      	ldrh	r3, [r7, #2]
 80088bc:	4619      	mov	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f7ff fade 	bl	8007e80 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80088c4:	bf00      	nop
 80088c6:	3720      	adds	r7, #32
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f00b fc4f 	bl	8014178 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80088da:	bf00      	nop
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
	...

080088e4 <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 80088ec:	4b15      	ldr	r3, [pc, #84]	@ (8008944 <RMII_Thread+0x60>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d003      	beq.n	8008900 <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 80088f8:	2000      	movs	r0, #0
 80088fa:	f002 f8cd 	bl	800aa98 <osThreadTerminate>
 80088fe:	e7f5      	b.n	80088ec <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 8008900:	4b10      	ldr	r3, [pc, #64]	@ (8008944 <RMII_Thread+0x60>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 8008908:	2b0a      	cmp	r3, #10
 800890a:	d916      	bls.n	800893a <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 800890c:	4b0e      	ldr	r3, [pc, #56]	@ (8008948 <RMII_Thread+0x64>)
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	4a0d      	ldr	r2, [pc, #52]	@ (8008948 <RMII_Thread+0x64>)
 8008912:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008916:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 8008918:	4b0b      	ldr	r3, [pc, #44]	@ (8008948 <RMII_Thread+0x64>)
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	4a0a      	ldr	r2, [pc, #40]	@ (8008948 <RMII_Thread+0x64>)
 800891e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008922:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 8008924:	4b07      	ldr	r3, [pc, #28]	@ (8008944 <RMII_Thread+0x60>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800892c:	4b05      	ldr	r3, [pc, #20]	@ (8008944 <RMII_Thread+0x60>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f042 0201 	orr.w	r2, r2, #1
 8008934:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008938:	e7d8      	b.n	80088ec <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 800893a:	20c8      	movs	r0, #200	@ 0xc8
 800893c:	f002 f8b8 	bl	800aab0 <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 8008940:	e7d4      	b.n	80088ec <RMII_Thread+0x8>
 8008942:	bf00      	nop
 8008944:	200008f0 	.word	0x200008f0
 8008948:	40013800 	.word	0x40013800

0800894c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	460b      	mov	r3, r1
 8008956:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008958:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800895c:	f018 fb6c 	bl	8021038 <malloc>
 8008960:	4603      	mov	r3, r0
 8008962:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d109      	bne.n	800897e <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	32b0      	adds	r2, #176	@ 0xb0
 8008974:	2100      	movs	r1, #0
 8008976:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800897a:	2302      	movs	r3, #2
 800897c:	e0d4      	b.n	8008b28 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800897e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008982:	2100      	movs	r1, #0
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f018 fee5 	bl	8021754 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	32b0      	adds	r2, #176	@ 0xb0
 8008994:	68f9      	ldr	r1, [r7, #12]
 8008996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	32b0      	adds	r2, #176	@ 0xb0
 80089a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	7c1b      	ldrb	r3, [r3, #16]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d138      	bne.n	8008a28 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80089b6:	4b5e      	ldr	r3, [pc, #376]	@ (8008b30 <USBD_CDC_Init+0x1e4>)
 80089b8:	7819      	ldrb	r1, [r3, #0]
 80089ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80089be:	2202      	movs	r2, #2
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f018 f996 	bl	8020cf2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80089c6:	4b5a      	ldr	r3, [pc, #360]	@ (8008b30 <USBD_CDC_Init+0x1e4>)
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	f003 020f 	and.w	r2, r3, #15
 80089ce:	6879      	ldr	r1, [r7, #4]
 80089d0:	4613      	mov	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	440b      	add	r3, r1
 80089da:	3323      	adds	r3, #35	@ 0x23
 80089dc:	2201      	movs	r2, #1
 80089de:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80089e0:	4b54      	ldr	r3, [pc, #336]	@ (8008b34 <USBD_CDC_Init+0x1e8>)
 80089e2:	7819      	ldrb	r1, [r3, #0]
 80089e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80089e8:	2202      	movs	r2, #2
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f018 f981 	bl	8020cf2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80089f0:	4b50      	ldr	r3, [pc, #320]	@ (8008b34 <USBD_CDC_Init+0x1e8>)
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	f003 020f 	and.w	r2, r3, #15
 80089f8:	6879      	ldr	r1, [r7, #4]
 80089fa:	4613      	mov	r3, r2
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	440b      	add	r3, r1
 8008a04:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008a08:	2201      	movs	r2, #1
 8008a0a:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008a0c:	4b4a      	ldr	r3, [pc, #296]	@ (8008b38 <USBD_CDC_Init+0x1ec>)
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	f003 020f 	and.w	r2, r3, #15
 8008a14:	6879      	ldr	r1, [r7, #4]
 8008a16:	4613      	mov	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4413      	add	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	440b      	add	r3, r1
 8008a20:	331c      	adds	r3, #28
 8008a22:	2210      	movs	r2, #16
 8008a24:	601a      	str	r2, [r3, #0]
 8008a26:	e035      	b.n	8008a94 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008a28:	4b41      	ldr	r3, [pc, #260]	@ (8008b30 <USBD_CDC_Init+0x1e4>)
 8008a2a:	7819      	ldrb	r1, [r3, #0]
 8008a2c:	2340      	movs	r3, #64	@ 0x40
 8008a2e:	2202      	movs	r2, #2
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f018 f95e 	bl	8020cf2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008a36:	4b3e      	ldr	r3, [pc, #248]	@ (8008b30 <USBD_CDC_Init+0x1e4>)
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	f003 020f 	and.w	r2, r3, #15
 8008a3e:	6879      	ldr	r1, [r7, #4]
 8008a40:	4613      	mov	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	440b      	add	r3, r1
 8008a4a:	3323      	adds	r3, #35	@ 0x23
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008a50:	4b38      	ldr	r3, [pc, #224]	@ (8008b34 <USBD_CDC_Init+0x1e8>)
 8008a52:	7819      	ldrb	r1, [r3, #0]
 8008a54:	2340      	movs	r3, #64	@ 0x40
 8008a56:	2202      	movs	r2, #2
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f018 f94a 	bl	8020cf2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008a5e:	4b35      	ldr	r3, [pc, #212]	@ (8008b34 <USBD_CDC_Init+0x1e8>)
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	f003 020f 	and.w	r2, r3, #15
 8008a66:	6879      	ldr	r1, [r7, #4]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4413      	add	r3, r2
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	440b      	add	r3, r1
 8008a72:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008a76:	2201      	movs	r2, #1
 8008a78:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8008b38 <USBD_CDC_Init+0x1ec>)
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	f003 020f 	and.w	r2, r3, #15
 8008a82:	6879      	ldr	r1, [r7, #4]
 8008a84:	4613      	mov	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4413      	add	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	440b      	add	r3, r1
 8008a8e:	331c      	adds	r3, #28
 8008a90:	2210      	movs	r2, #16
 8008a92:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a94:	4b28      	ldr	r3, [pc, #160]	@ (8008b38 <USBD_CDC_Init+0x1ec>)
 8008a96:	7819      	ldrb	r1, [r3, #0]
 8008a98:	2308      	movs	r3, #8
 8008a9a:	2203      	movs	r2, #3
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f018 f928 	bl	8020cf2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008aa2:	4b25      	ldr	r3, [pc, #148]	@ (8008b38 <USBD_CDC_Init+0x1ec>)
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	f003 020f 	and.w	r2, r3, #15
 8008aaa:	6879      	ldr	r1, [r7, #4]
 8008aac:	4613      	mov	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	4413      	add	r3, r2
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	440b      	add	r3, r1
 8008ab6:	3323      	adds	r3, #35	@ 0x23
 8008ab8:	2201      	movs	r2, #1
 8008aba:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	33b0      	adds	r3, #176	@ 0xb0
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	4413      	add	r3, r2
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d101      	bne.n	8008af6 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8008af2:	2302      	movs	r3, #2
 8008af4:	e018      	b.n	8008b28 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	7c1b      	ldrb	r3, [r3, #16]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10a      	bne.n	8008b14 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008afe:	4b0d      	ldr	r3, [pc, #52]	@ (8008b34 <USBD_CDC_Init+0x1e8>)
 8008b00:	7819      	ldrb	r1, [r3, #0]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f018 f9df 	bl	8020ed0 <USBD_LL_PrepareReceive>
 8008b12:	e008      	b.n	8008b26 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008b14:	4b07      	ldr	r3, [pc, #28]	@ (8008b34 <USBD_CDC_Init+0x1e8>)
 8008b16:	7819      	ldrb	r1, [r3, #0]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b1e:	2340      	movs	r3, #64	@ 0x40
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f018 f9d5 	bl	8020ed0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3710      	adds	r7, #16
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	200000a7 	.word	0x200000a7
 8008b34:	200000a8 	.word	0x200000a8
 8008b38:	200000a9 	.word	0x200000a9

08008b3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008b48:	4b3a      	ldr	r3, [pc, #232]	@ (8008c34 <USBD_CDC_DeInit+0xf8>)
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f018 f8f5 	bl	8020d3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008b54:	4b37      	ldr	r3, [pc, #220]	@ (8008c34 <USBD_CDC_DeInit+0xf8>)
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	f003 020f 	and.w	r2, r3, #15
 8008b5c:	6879      	ldr	r1, [r7, #4]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	440b      	add	r3, r1
 8008b68:	3323      	adds	r3, #35	@ 0x23
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008b6e:	4b32      	ldr	r3, [pc, #200]	@ (8008c38 <USBD_CDC_DeInit+0xfc>)
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	4619      	mov	r1, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f018 f8e2 	bl	8020d3e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8008c38 <USBD_CDC_DeInit+0xfc>)
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	f003 020f 	and.w	r2, r3, #15
 8008b82:	6879      	ldr	r1, [r7, #4]
 8008b84:	4613      	mov	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	440b      	add	r3, r1
 8008b8e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008b92:	2200      	movs	r2, #0
 8008b94:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008b96:	4b29      	ldr	r3, [pc, #164]	@ (8008c3c <USBD_CDC_DeInit+0x100>)
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f018 f8ce 	bl	8020d3e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008ba2:	4b26      	ldr	r3, [pc, #152]	@ (8008c3c <USBD_CDC_DeInit+0x100>)
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	f003 020f 	and.w	r2, r3, #15
 8008baa:	6879      	ldr	r1, [r7, #4]
 8008bac:	4613      	mov	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4413      	add	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	440b      	add	r3, r1
 8008bb6:	3323      	adds	r3, #35	@ 0x23
 8008bb8:	2200      	movs	r2, #0
 8008bba:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8008c3c <USBD_CDC_DeInit+0x100>)
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	f003 020f 	and.w	r2, r3, #15
 8008bc4:	6879      	ldr	r1, [r7, #4]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	440b      	add	r3, r1
 8008bd0:	331c      	adds	r3, #28
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	32b0      	adds	r2, #176	@ 0xb0
 8008be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d01f      	beq.n	8008c28 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	33b0      	adds	r3, #176	@ 0xb0
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	4413      	add	r3, r2
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	32b0      	adds	r2, #176	@ 0xb0
 8008c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f018 fa1c 	bl	8021048 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	32b0      	adds	r2, #176	@ 0xb0
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	200000a7 	.word	0x200000a7
 8008c38:	200000a8 	.word	0x200000a8
 8008c3c:	200000a9 	.word	0x200000a9

08008c40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b086      	sub	sp, #24
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	32b0      	adds	r2, #176	@ 0xb0
 8008c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c58:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d101      	bne.n	8008c70 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	e0bf      	b.n	8008df0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d050      	beq.n	8008d1e <USBD_CDC_Setup+0xde>
 8008c7c:	2b20      	cmp	r3, #32
 8008c7e:	f040 80af 	bne.w	8008de0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	88db      	ldrh	r3, [r3, #6]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d03a      	beq.n	8008d00 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	b25b      	sxtb	r3, r3
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	da1b      	bge.n	8008ccc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	33b0      	adds	r3, #176	@ 0xb0
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008caa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	88d2      	ldrh	r2, [r2, #6]
 8008cb0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	88db      	ldrh	r3, [r3, #6]
 8008cb6:	2b07      	cmp	r3, #7
 8008cb8:	bf28      	it	cs
 8008cba:	2307      	movcs	r3, #7
 8008cbc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	89fa      	ldrh	r2, [r7, #14]
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f001 fdd3 	bl	800a870 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008cca:	e090      	b.n	8008dee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	785a      	ldrb	r2, [r3, #1]
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	88db      	ldrh	r3, [r3, #6]
 8008cda:	2b3f      	cmp	r3, #63	@ 0x3f
 8008cdc:	d803      	bhi.n	8008ce6 <USBD_CDC_Setup+0xa6>
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	88db      	ldrh	r3, [r3, #6]
 8008ce2:	b2da      	uxtb	r2, r3
 8008ce4:	e000      	b.n	8008ce8 <USBD_CDC_Setup+0xa8>
 8008ce6:	2240      	movs	r2, #64	@ 0x40
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008cee:	6939      	ldr	r1, [r7, #16]
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f001 fde8 	bl	800a8ce <USBD_CtlPrepareRx>
      break;
 8008cfe:	e076      	b.n	8008dee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	33b0      	adds	r3, #176	@ 0xb0
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	7850      	ldrb	r0, [r2, #1]
 8008d16:	2200      	movs	r2, #0
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	4798      	blx	r3
      break;
 8008d1c:	e067      	b.n	8008dee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	785b      	ldrb	r3, [r3, #1]
 8008d22:	2b0b      	cmp	r3, #11
 8008d24:	d851      	bhi.n	8008dca <USBD_CDC_Setup+0x18a>
 8008d26:	a201      	add	r2, pc, #4	@ (adr r2, 8008d2c <USBD_CDC_Setup+0xec>)
 8008d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d2c:	08008d5d 	.word	0x08008d5d
 8008d30:	08008dd9 	.word	0x08008dd9
 8008d34:	08008dcb 	.word	0x08008dcb
 8008d38:	08008dcb 	.word	0x08008dcb
 8008d3c:	08008dcb 	.word	0x08008dcb
 8008d40:	08008dcb 	.word	0x08008dcb
 8008d44:	08008dcb 	.word	0x08008dcb
 8008d48:	08008dcb 	.word	0x08008dcb
 8008d4c:	08008dcb 	.word	0x08008dcb
 8008d50:	08008dcb 	.word	0x08008dcb
 8008d54:	08008d87 	.word	0x08008d87
 8008d58:	08008db1 	.word	0x08008db1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	2b03      	cmp	r3, #3
 8008d66:	d107      	bne.n	8008d78 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008d68:	f107 030a 	add.w	r3, r7, #10
 8008d6c:	2202      	movs	r2, #2
 8008d6e:	4619      	mov	r1, r3
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f001 fd7d 	bl	800a870 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d76:	e032      	b.n	8008dde <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f001 fcfb 	bl	800a776 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d80:	2303      	movs	r3, #3
 8008d82:	75fb      	strb	r3, [r7, #23]
          break;
 8008d84:	e02b      	b.n	8008dde <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	2b03      	cmp	r3, #3
 8008d90:	d107      	bne.n	8008da2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008d92:	f107 030d 	add.w	r3, r7, #13
 8008d96:	2201      	movs	r2, #1
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f001 fd68 	bl	800a870 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008da0:	e01d      	b.n	8008dde <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f001 fce6 	bl	800a776 <USBD_CtlError>
            ret = USBD_FAIL;
 8008daa:	2303      	movs	r3, #3
 8008dac:	75fb      	strb	r3, [r7, #23]
          break;
 8008dae:	e016      	b.n	8008dde <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	2b03      	cmp	r3, #3
 8008dba:	d00f      	beq.n	8008ddc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f001 fcd9 	bl	800a776 <USBD_CtlError>
            ret = USBD_FAIL;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008dc8:	e008      	b.n	8008ddc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f001 fcd2 	bl	800a776 <USBD_CtlError>
          ret = USBD_FAIL;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	75fb      	strb	r3, [r7, #23]
          break;
 8008dd6:	e002      	b.n	8008dde <USBD_CDC_Setup+0x19e>
          break;
 8008dd8:	bf00      	nop
 8008dda:	e008      	b.n	8008dee <USBD_CDC_Setup+0x1ae>
          break;
 8008ddc:	bf00      	nop
      }
      break;
 8008dde:	e006      	b.n	8008dee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008de0:	6839      	ldr	r1, [r7, #0]
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f001 fcc7 	bl	800a776 <USBD_CtlError>
      ret = USBD_FAIL;
 8008de8:	2303      	movs	r3, #3
 8008dea:	75fb      	strb	r3, [r7, #23]
      break;
 8008dec:	bf00      	nop
  }

  return (uint8_t)ret;
 8008dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	460b      	mov	r3, r1
 8008e02:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e0a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	32b0      	adds	r2, #176	@ 0xb0
 8008e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d101      	bne.n	8008e22 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e065      	b.n	8008eee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	32b0      	adds	r2, #176	@ 0xb0
 8008e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e30:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008e32:	78fb      	ldrb	r3, [r7, #3]
 8008e34:	f003 020f 	and.w	r2, r3, #15
 8008e38:	6879      	ldr	r1, [r7, #4]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	4413      	add	r3, r2
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	440b      	add	r3, r1
 8008e44:	3314      	adds	r3, #20
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d02f      	beq.n	8008eac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008e4c:	78fb      	ldrb	r3, [r7, #3]
 8008e4e:	f003 020f 	and.w	r2, r3, #15
 8008e52:	6879      	ldr	r1, [r7, #4]
 8008e54:	4613      	mov	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	440b      	add	r3, r1
 8008e5e:	3314      	adds	r3, #20
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	78fb      	ldrb	r3, [r7, #3]
 8008e64:	f003 010f 	and.w	r1, r3, #15
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	00db      	lsls	r3, r3, #3
 8008e6e:	440b      	add	r3, r1
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4403      	add	r3, r0
 8008e74:	331c      	adds	r3, #28
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	fbb2 f1f3 	udiv	r1, r2, r3
 8008e7c:	fb01 f303 	mul.w	r3, r1, r3
 8008e80:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d112      	bne.n	8008eac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008e86:	78fb      	ldrb	r3, [r7, #3]
 8008e88:	f003 020f 	and.w	r2, r3, #15
 8008e8c:	6879      	ldr	r1, [r7, #4]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	4413      	add	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	440b      	add	r3, r1
 8008e98:	3314      	adds	r3, #20
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008e9e:	78f9      	ldrb	r1, [r7, #3]
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f017 fff2 	bl	8020e8e <USBD_LL_Transmit>
 8008eaa:	e01f      	b.n	8008eec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	33b0      	adds	r3, #176	@ 0xb0
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d010      	beq.n	8008eec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	33b0      	adds	r3, #176	@ 0xb0
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4413      	add	r3, r2
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008ee8:	78fa      	ldrb	r2, [r7, #3]
 8008eea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3710      	adds	r7, #16
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b084      	sub	sp, #16
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	460b      	mov	r3, r1
 8008f00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	32b0      	adds	r2, #176	@ 0xb0
 8008f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	32b0      	adds	r2, #176	@ 0xb0
 8008f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008f24:	2303      	movs	r3, #3
 8008f26:	e01a      	b.n	8008f5e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008f28:	78fb      	ldrb	r3, [r7, #3]
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f017 fff0 	bl	8020f12 <USBD_LL_GetRxDataSize>
 8008f32:	4602      	mov	r2, r0
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	33b0      	adds	r3, #176	@ 0xb0
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	4413      	add	r3, r2
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008f58:	4611      	mov	r1, r2
 8008f5a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	32b0      	adds	r2, #176	@ 0xb0
 8008f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d101      	bne.n	8008f88 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008f84:	2303      	movs	r3, #3
 8008f86:	e024      	b.n	8008fd2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	33b0      	adds	r3, #176	@ 0xb0
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4413      	add	r3, r2
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d019      	beq.n	8008fd0 <USBD_CDC_EP0_RxReady+0x6a>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008fa2:	2bff      	cmp	r3, #255	@ 0xff
 8008fa4:	d014      	beq.n	8008fd0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	33b0      	adds	r3, #176	@ 0xb0
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	4413      	add	r3, r2
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008fbe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008fc6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	22ff      	movs	r2, #255	@ 0xff
 8008fcc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
	...

08008fdc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008fe4:	2182      	movs	r1, #130	@ 0x82
 8008fe6:	4818      	ldr	r0, [pc, #96]	@ (8009048 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008fe8:	f000 fd62 	bl	8009ab0 <USBD_GetEpDesc>
 8008fec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008fee:	2101      	movs	r1, #1
 8008ff0:	4815      	ldr	r0, [pc, #84]	@ (8009048 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ff2:	f000 fd5d 	bl	8009ab0 <USBD_GetEpDesc>
 8008ff6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ff8:	2181      	movs	r1, #129	@ 0x81
 8008ffa:	4813      	ldr	r0, [pc, #76]	@ (8009048 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ffc:	f000 fd58 	bl	8009ab0 <USBD_GetEpDesc>
 8009000:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d002      	beq.n	800900e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	2210      	movs	r2, #16
 800900c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d006      	beq.n	8009022 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	2200      	movs	r2, #0
 8009018:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800901c:	711a      	strb	r2, [r3, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d006      	beq.n	8009036 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009030:	711a      	strb	r2, [r3, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2243      	movs	r2, #67	@ 0x43
 800903a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800903c:	4b02      	ldr	r3, [pc, #8]	@ (8009048 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800903e:	4618      	mov	r0, r3
 8009040:	3718      	adds	r7, #24
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	20000064 	.word	0x20000064

0800904c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009054:	2182      	movs	r1, #130	@ 0x82
 8009056:	4818      	ldr	r0, [pc, #96]	@ (80090b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009058:	f000 fd2a 	bl	8009ab0 <USBD_GetEpDesc>
 800905c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800905e:	2101      	movs	r1, #1
 8009060:	4815      	ldr	r0, [pc, #84]	@ (80090b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009062:	f000 fd25 	bl	8009ab0 <USBD_GetEpDesc>
 8009066:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009068:	2181      	movs	r1, #129	@ 0x81
 800906a:	4813      	ldr	r0, [pc, #76]	@ (80090b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800906c:	f000 fd20 	bl	8009ab0 <USBD_GetEpDesc>
 8009070:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d002      	beq.n	800907e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	2210      	movs	r2, #16
 800907c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d006      	beq.n	8009092 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	2200      	movs	r2, #0
 8009088:	711a      	strb	r2, [r3, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	f042 0202 	orr.w	r2, r2, #2
 8009090:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d006      	beq.n	80090a6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	711a      	strb	r2, [r3, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	f042 0202 	orr.w	r2, r2, #2
 80090a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2243      	movs	r2, #67	@ 0x43
 80090aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80090ac:	4b02      	ldr	r3, [pc, #8]	@ (80090b8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	20000064 	.word	0x20000064

080090bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80090c4:	2182      	movs	r1, #130	@ 0x82
 80090c6:	4818      	ldr	r0, [pc, #96]	@ (8009128 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80090c8:	f000 fcf2 	bl	8009ab0 <USBD_GetEpDesc>
 80090cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80090ce:	2101      	movs	r1, #1
 80090d0:	4815      	ldr	r0, [pc, #84]	@ (8009128 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80090d2:	f000 fced 	bl	8009ab0 <USBD_GetEpDesc>
 80090d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80090d8:	2181      	movs	r1, #129	@ 0x81
 80090da:	4813      	ldr	r0, [pc, #76]	@ (8009128 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80090dc:	f000 fce8 	bl	8009ab0 <USBD_GetEpDesc>
 80090e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d002      	beq.n	80090ee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	2210      	movs	r2, #16
 80090ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d006      	beq.n	8009102 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090fc:	711a      	strb	r2, [r3, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d006      	beq.n	8009116 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2200      	movs	r2, #0
 800910c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009110:	711a      	strb	r2, [r3, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2243      	movs	r2, #67	@ 0x43
 800911a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800911c:	4b02      	ldr	r3, [pc, #8]	@ (8009128 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800911e:	4618      	mov	r0, r3
 8009120:	3718      	adds	r7, #24
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	20000064 	.word	0x20000064

0800912c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	220a      	movs	r2, #10
 8009138:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800913a:	4b03      	ldr	r3, [pc, #12]	@ (8009148 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800913c:	4618      	mov	r0, r3
 800913e:	370c      	adds	r7, #12
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr
 8009148:	20000020 	.word	0x20000020

0800914c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d101      	bne.n	8009160 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800915c:	2303      	movs	r3, #3
 800915e:	e009      	b.n	8009174 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	33b0      	adds	r3, #176	@ 0xb0
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	4413      	add	r3, r2
 800916e:	683a      	ldr	r2, [r7, #0]
 8009170:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009180:	b480      	push	{r7}
 8009182:	b087      	sub	sp, #28
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	32b0      	adds	r2, #176	@ 0xb0
 8009196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800919a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d101      	bne.n	80091a6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80091a2:	2303      	movs	r3, #3
 80091a4:	e008      	b.n	80091b8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	371c      	adds	r7, #28
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	32b0      	adds	r2, #176	@ 0xb0
 80091d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80091e4:	2303      	movs	r3, #3
 80091e6:	e004      	b.n	80091f2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	683a      	ldr	r2, [r7, #0]
 80091ec:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3714      	adds	r7, #20
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
	...

08009200 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	32b0      	adds	r2, #176	@ 0xb0
 8009212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009216:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009218:	2301      	movs	r3, #1
 800921a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009222:	2303      	movs	r3, #3
 8009224:	e025      	b.n	8009272 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800922c:	2b00      	cmp	r3, #0
 800922e:	d11f      	bne.n	8009270 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	2201      	movs	r2, #1
 8009234:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009238:	4b10      	ldr	r3, [pc, #64]	@ (800927c <USBD_CDC_TransmitPacket+0x7c>)
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	f003 020f 	and.w	r2, r3, #15
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	4613      	mov	r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4413      	add	r3, r2
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	4403      	add	r3, r0
 8009252:	3314      	adds	r3, #20
 8009254:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009256:	4b09      	ldr	r3, [pc, #36]	@ (800927c <USBD_CDC_TransmitPacket+0x7c>)
 8009258:	7819      	ldrb	r1, [r3, #0]
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f017 fe11 	bl	8020e8e <USBD_LL_Transmit>

    ret = USBD_OK;
 800926c:	2300      	movs	r3, #0
 800926e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009270:	7bfb      	ldrb	r3, [r7, #15]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	200000a7 	.word	0x200000a7

08009280 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	32b0      	adds	r2, #176	@ 0xb0
 8009292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009296:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	32b0      	adds	r2, #176	@ 0xb0
 80092a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d101      	bne.n	80092ae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80092aa:	2303      	movs	r3, #3
 80092ac:	e018      	b.n	80092e0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	7c1b      	ldrb	r3, [r3, #16]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10a      	bne.n	80092cc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80092b6:	4b0c      	ldr	r3, [pc, #48]	@ (80092e8 <USBD_CDC_ReceivePacket+0x68>)
 80092b8:	7819      	ldrb	r1, [r3, #0]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80092c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f017 fe03 	bl	8020ed0 <USBD_LL_PrepareReceive>
 80092ca:	e008      	b.n	80092de <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80092cc:	4b06      	ldr	r3, [pc, #24]	@ (80092e8 <USBD_CDC_ReceivePacket+0x68>)
 80092ce:	7819      	ldrb	r1, [r3, #0]
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80092d6:	2340      	movs	r3, #64	@ 0x40
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f017 fdf9 	bl	8020ed0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	200000a8 	.word	0x200000a8

080092ec <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b086      	sub	sp, #24
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	4613      	mov	r3, r2
 80092f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d101      	bne.n	8009304 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009300:	2303      	movs	r3, #3
 8009302:	e01f      	b.n	8009344 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d003      	beq.n	800932a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	79fa      	ldrb	r2, [r7, #7]
 8009336:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f017 fc73 	bl	8020c24 <USBD_LL_Init>
 800933e:	4603      	mov	r3, r0
 8009340:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009342:	7dfb      	ldrb	r3, [r7, #23]
}
 8009344:	4618      	mov	r0, r3
 8009346:	3718      	adds	r7, #24
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009356:	2300      	movs	r3, #0
 8009358:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d101      	bne.n	8009364 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009360:	2303      	movs	r3, #3
 8009362:	e025      	b.n	80093b0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	683a      	ldr	r2, [r7, #0]
 8009368:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	32ae      	adds	r2, #174	@ 0xae
 8009376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800937a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00f      	beq.n	80093a0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	32ae      	adds	r2, #174	@ 0xae
 800938a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800938e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009390:	f107 020e 	add.w	r2, r7, #14
 8009394:	4610      	mov	r0, r2
 8009396:	4798      	blx	r3
 8009398:	4602      	mov	r2, r0
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80093a6:	1c5a      	adds	r2, r3, #1
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f017 fc7b 	bl	8020cbc <USBD_LL_Start>
 80093c6:	4603      	mov	r3, r0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80093d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80093da:	4618      	mov	r0, r3
 80093dc:	370c      	adds	r7, #12
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr

080093e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b084      	sub	sp, #16
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
 80093ee:	460b      	mov	r3, r1
 80093f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80093f2:	2300      	movs	r3, #0
 80093f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d009      	beq.n	8009414 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	78fa      	ldrb	r2, [r7, #3]
 800940a:	4611      	mov	r1, r2
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	4798      	blx	r3
 8009410:	4603      	mov	r3, r0
 8009412:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009414:	7bfb      	ldrb	r3, [r7, #15]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b084      	sub	sp, #16
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	460b      	mov	r3, r1
 8009428:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800942a:	2300      	movs	r3, #0
 800942c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	78fa      	ldrb	r2, [r7, #3]
 8009438:	4611      	mov	r1, r2
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	4798      	blx	r3
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d001      	beq.n	8009448 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009444:	2303      	movs	r3, #3
 8009446:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009448:	7bfb      	ldrb	r3, [r7, #15]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b084      	sub	sp, #16
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
 800945a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009462:	6839      	ldr	r1, [r7, #0]
 8009464:	4618      	mov	r0, r3
 8009466:	f001 f94c 	bl	800a702 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2201      	movs	r2, #1
 800946e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009478:	461a      	mov	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009486:	f003 031f 	and.w	r3, r3, #31
 800948a:	2b02      	cmp	r3, #2
 800948c:	d01a      	beq.n	80094c4 <USBD_LL_SetupStage+0x72>
 800948e:	2b02      	cmp	r3, #2
 8009490:	d822      	bhi.n	80094d8 <USBD_LL_SetupStage+0x86>
 8009492:	2b00      	cmp	r3, #0
 8009494:	d002      	beq.n	800949c <USBD_LL_SetupStage+0x4a>
 8009496:	2b01      	cmp	r3, #1
 8009498:	d00a      	beq.n	80094b0 <USBD_LL_SetupStage+0x5e>
 800949a:	e01d      	b.n	80094d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80094a2:	4619      	mov	r1, r3
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 fb77 	bl	8009b98 <USBD_StdDevReq>
 80094aa:	4603      	mov	r3, r0
 80094ac:	73fb      	strb	r3, [r7, #15]
      break;
 80094ae:	e020      	b.n	80094f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80094b6:	4619      	mov	r1, r3
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 fbdf 	bl	8009c7c <USBD_StdItfReq>
 80094be:	4603      	mov	r3, r0
 80094c0:	73fb      	strb	r3, [r7, #15]
      break;
 80094c2:	e016      	b.n	80094f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80094ca:	4619      	mov	r1, r3
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 fc41 	bl	8009d54 <USBD_StdEPReq>
 80094d2:	4603      	mov	r3, r0
 80094d4:	73fb      	strb	r3, [r7, #15]
      break;
 80094d6:	e00c      	b.n	80094f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80094de:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f017 fc48 	bl	8020d7c <USBD_LL_StallEP>
 80094ec:	4603      	mov	r3, r0
 80094ee:	73fb      	strb	r3, [r7, #15]
      break;
 80094f0:	bf00      	nop
  }

  return ret;
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b086      	sub	sp, #24
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	460b      	mov	r3, r1
 8009506:	607a      	str	r2, [r7, #4]
 8009508:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800950e:	7afb      	ldrb	r3, [r7, #11]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d177      	bne.n	8009604 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800951a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009522:	2b03      	cmp	r3, #3
 8009524:	f040 80a1 	bne.w	800966a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	693a      	ldr	r2, [r7, #16]
 800952e:	8992      	ldrh	r2, [r2, #12]
 8009530:	4293      	cmp	r3, r2
 8009532:	d91c      	bls.n	800956e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	8992      	ldrh	r2, [r2, #12]
 800953c:	1a9a      	subs	r2, r3, r2
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	693a      	ldr	r2, [r7, #16]
 8009548:	8992      	ldrh	r2, [r2, #12]
 800954a:	441a      	add	r2, r3
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	6919      	ldr	r1, [r3, #16]
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	899b      	ldrh	r3, [r3, #12]
 8009558:	461a      	mov	r2, r3
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	4293      	cmp	r3, r2
 8009560:	bf38      	it	cc
 8009562:	4613      	movcc	r3, r2
 8009564:	461a      	mov	r2, r3
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f001 f9d2 	bl	800a910 <USBD_CtlContinueRx>
 800956c:	e07d      	b.n	800966a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009574:	f003 031f 	and.w	r3, r3, #31
 8009578:	2b02      	cmp	r3, #2
 800957a:	d014      	beq.n	80095a6 <USBD_LL_DataOutStage+0xaa>
 800957c:	2b02      	cmp	r3, #2
 800957e:	d81d      	bhi.n	80095bc <USBD_LL_DataOutStage+0xc0>
 8009580:	2b00      	cmp	r3, #0
 8009582:	d002      	beq.n	800958a <USBD_LL_DataOutStage+0x8e>
 8009584:	2b01      	cmp	r3, #1
 8009586:	d003      	beq.n	8009590 <USBD_LL_DataOutStage+0x94>
 8009588:	e018      	b.n	80095bc <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800958a:	2300      	movs	r3, #0
 800958c:	75bb      	strb	r3, [r7, #22]
            break;
 800958e:	e018      	b.n	80095c2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009596:	b2db      	uxtb	r3, r3
 8009598:	4619      	mov	r1, r3
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f000 fa6e 	bl	8009a7c <USBD_CoreFindIF>
 80095a0:	4603      	mov	r3, r0
 80095a2:	75bb      	strb	r3, [r7, #22]
            break;
 80095a4:	e00d      	b.n	80095c2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	4619      	mov	r1, r3
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f000 fa70 	bl	8009a96 <USBD_CoreFindEP>
 80095b6:	4603      	mov	r3, r0
 80095b8:	75bb      	strb	r3, [r7, #22]
            break;
 80095ba:	e002      	b.n	80095c2 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80095bc:	2300      	movs	r3, #0
 80095be:	75bb      	strb	r3, [r7, #22]
            break;
 80095c0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80095c2:	7dbb      	ldrb	r3, [r7, #22]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d119      	bne.n	80095fc <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	2b03      	cmp	r3, #3
 80095d2:	d113      	bne.n	80095fc <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80095d4:	7dba      	ldrb	r2, [r7, #22]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	32ae      	adds	r2, #174	@ 0xae
 80095da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d00b      	beq.n	80095fc <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80095e4:	7dba      	ldrb	r2, [r7, #22]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80095ec:	7dba      	ldrb	r2, [r7, #22]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	32ae      	adds	r2, #174	@ 0xae
 80095f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f001 f998 	bl	800a932 <USBD_CtlSendStatus>
 8009602:	e032      	b.n	800966a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009604:	7afb      	ldrb	r3, [r7, #11]
 8009606:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800960a:	b2db      	uxtb	r3, r3
 800960c:	4619      	mov	r1, r3
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f000 fa41 	bl	8009a96 <USBD_CoreFindEP>
 8009614:	4603      	mov	r3, r0
 8009616:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009618:	7dbb      	ldrb	r3, [r7, #22]
 800961a:	2bff      	cmp	r3, #255	@ 0xff
 800961c:	d025      	beq.n	800966a <USBD_LL_DataOutStage+0x16e>
 800961e:	7dbb      	ldrb	r3, [r7, #22]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d122      	bne.n	800966a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800962a:	b2db      	uxtb	r3, r3
 800962c:	2b03      	cmp	r3, #3
 800962e:	d117      	bne.n	8009660 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009630:	7dba      	ldrb	r2, [r7, #22]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	32ae      	adds	r2, #174	@ 0xae
 8009636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00f      	beq.n	8009660 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8009640:	7dba      	ldrb	r2, [r7, #22]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009648:	7dba      	ldrb	r2, [r7, #22]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	32ae      	adds	r2, #174	@ 0xae
 800964e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	7afa      	ldrb	r2, [r7, #11]
 8009656:	4611      	mov	r1, r2
 8009658:	68f8      	ldr	r0, [r7, #12]
 800965a:	4798      	blx	r3
 800965c:	4603      	mov	r3, r0
 800965e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009660:	7dfb      	ldrb	r3, [r7, #23]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8009666:	7dfb      	ldrb	r3, [r7, #23]
 8009668:	e000      	b.n	800966c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3718      	adds	r7, #24
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	460b      	mov	r3, r1
 800967e:	607a      	str	r2, [r7, #4]
 8009680:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8009682:	7afb      	ldrb	r3, [r7, #11]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d178      	bne.n	800977a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	3314      	adds	r3, #20
 800968c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009694:	2b02      	cmp	r3, #2
 8009696:	d163      	bne.n	8009760 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	693a      	ldr	r2, [r7, #16]
 800969e:	8992      	ldrh	r2, [r2, #12]
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d91c      	bls.n	80096de <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	8992      	ldrh	r2, [r2, #12]
 80096ac:	1a9a      	subs	r2, r3, r2
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80096b2:	693b      	ldr	r3, [r7, #16]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	8992      	ldrh	r2, [r2, #12]
 80096ba:	441a      	add	r2, r3
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	6919      	ldr	r1, [r3, #16]
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	461a      	mov	r2, r3
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f001 f8ee 	bl	800a8ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096d0:	2300      	movs	r3, #0
 80096d2:	2200      	movs	r2, #0
 80096d4:	2100      	movs	r1, #0
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f017 fbfa 	bl	8020ed0 <USBD_LL_PrepareReceive>
 80096dc:	e040      	b.n	8009760 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	899b      	ldrh	r3, [r3, #12]
 80096e2:	461a      	mov	r2, r3
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	d11c      	bne.n	8009726 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	693a      	ldr	r2, [r7, #16]
 80096f2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d316      	bcc.n	8009726 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009702:	429a      	cmp	r2, r3
 8009704:	d20f      	bcs.n	8009726 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009706:	2200      	movs	r2, #0
 8009708:	2100      	movs	r1, #0
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f001 f8ce 	bl	800a8ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009718:	2300      	movs	r3, #0
 800971a:	2200      	movs	r2, #0
 800971c:	2100      	movs	r1, #0
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f017 fbd6 	bl	8020ed0 <USBD_LL_PrepareReceive>
 8009724:	e01c      	b.n	8009760 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800972c:	b2db      	uxtb	r3, r3
 800972e:	2b03      	cmp	r3, #3
 8009730:	d10f      	bne.n	8009752 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d009      	beq.n	8009752 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009752:	2180      	movs	r1, #128	@ 0x80
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f017 fb11 	bl	8020d7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f001 f8fc 	bl	800a958 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d03a      	beq.n	80097e0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f7ff fe30 	bl	80093d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009778:	e032      	b.n	80097e0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800977a:	7afb      	ldrb	r3, [r7, #11]
 800977c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009780:	b2db      	uxtb	r3, r3
 8009782:	4619      	mov	r1, r3
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f000 f986 	bl	8009a96 <USBD_CoreFindEP>
 800978a:	4603      	mov	r3, r0
 800978c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800978e:	7dfb      	ldrb	r3, [r7, #23]
 8009790:	2bff      	cmp	r3, #255	@ 0xff
 8009792:	d025      	beq.n	80097e0 <USBD_LL_DataInStage+0x16c>
 8009794:	7dfb      	ldrb	r3, [r7, #23]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d122      	bne.n	80097e0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b03      	cmp	r3, #3
 80097a4:	d11c      	bne.n	80097e0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80097a6:	7dfa      	ldrb	r2, [r7, #23]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	32ae      	adds	r2, #174	@ 0xae
 80097ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097b0:	695b      	ldr	r3, [r3, #20]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d014      	beq.n	80097e0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80097b6:	7dfa      	ldrb	r2, [r7, #23]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80097be:	7dfa      	ldrb	r2, [r7, #23]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	32ae      	adds	r2, #174	@ 0xae
 80097c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097c8:	695b      	ldr	r3, [r3, #20]
 80097ca:	7afa      	ldrb	r2, [r7, #11]
 80097cc:	4611      	mov	r1, r2
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	4798      	blx	r3
 80097d2:	4603      	mov	r3, r0
 80097d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80097d6:	7dbb      	ldrb	r3, [r7, #22]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d001      	beq.n	80097e0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80097dc:	7dbb      	ldrb	r3, [r7, #22]
 80097de:	e000      	b.n	80097e2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3718      	adds	r7, #24
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b084      	sub	sp, #16
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80097f2:	2300      	movs	r3, #0
 80097f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2201      	movs	r2, #1
 80097fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009822:	2b00      	cmp	r3, #0
 8009824:	d014      	beq.n	8009850 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00e      	beq.n	8009850 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	6852      	ldr	r2, [r2, #4]
 800983e:	b2d2      	uxtb	r2, r2
 8009840:	4611      	mov	r1, r2
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	4798      	blx	r3
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d001      	beq.n	8009850 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800984c:	2303      	movs	r3, #3
 800984e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009850:	2340      	movs	r3, #64	@ 0x40
 8009852:	2200      	movs	r2, #0
 8009854:	2100      	movs	r1, #0
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f017 fa4b 	bl	8020cf2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2240      	movs	r2, #64	@ 0x40
 8009868:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800986c:	2340      	movs	r3, #64	@ 0x40
 800986e:	2200      	movs	r2, #0
 8009870:	2180      	movs	r1, #128	@ 0x80
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f017 fa3d 	bl	8020cf2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2201      	movs	r2, #1
 800987c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2240      	movs	r2, #64	@ 0x40
 8009884:	841a      	strh	r2, [r3, #32]

  return ret;
 8009886:	7bfb      	ldrb	r3, [r7, #15]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	460b      	mov	r3, r1
 800989a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	78fa      	ldrb	r2, [r7, #3]
 80098a0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	2b04      	cmp	r3, #4
 80098c2:	d006      	beq.n	80098d2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098ca:	b2da      	uxtb	r2, r3
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2204      	movs	r2, #4
 80098d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80098da:	2300      	movs	r3, #0
}
 80098dc:	4618      	mov	r0, r3
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	2b04      	cmp	r3, #4
 80098fa:	d106      	bne.n	800990a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8009902:	b2da      	uxtb	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009926:	b2db      	uxtb	r3, r3
 8009928:	2b03      	cmp	r3, #3
 800992a:	d110      	bne.n	800994e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009932:	2b00      	cmp	r3, #0
 8009934:	d00b      	beq.n	800994e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800993c:	69db      	ldr	r3, [r3, #28]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d005      	beq.n	800994e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009948:	69db      	ldr	r3, [r3, #28]
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800994e:	2300      	movs	r3, #0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3708      	adds	r7, #8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	460b      	mov	r3, r1
 8009962:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	32ae      	adds	r2, #174	@ 0xae
 800996e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d101      	bne.n	800997a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009976:	2303      	movs	r3, #3
 8009978:	e01c      	b.n	80099b4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009980:	b2db      	uxtb	r3, r3
 8009982:	2b03      	cmp	r3, #3
 8009984:	d115      	bne.n	80099b2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	32ae      	adds	r2, #174	@ 0xae
 8009990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009994:	6a1b      	ldr	r3, [r3, #32]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00b      	beq.n	80099b2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	32ae      	adds	r2, #174	@ 0xae
 80099a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	78fa      	ldrb	r2, [r7, #3]
 80099ac:	4611      	mov	r1, r2
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80099b2:	2300      	movs	r3, #0
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	3708      	adds	r7, #8
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	460b      	mov	r3, r1
 80099c6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	32ae      	adds	r2, #174	@ 0xae
 80099d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d101      	bne.n	80099de <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80099da:	2303      	movs	r3, #3
 80099dc:	e01c      	b.n	8009a18 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	2b03      	cmp	r3, #3
 80099e8:	d115      	bne.n	8009a16 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	32ae      	adds	r2, #174	@ 0xae
 80099f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00b      	beq.n	8009a16 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	32ae      	adds	r2, #174	@ 0xae
 8009a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a0e:	78fa      	ldrb	r2, [r7, #3]
 8009a10:	4611      	mov	r1, r2
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a16:	2300      	movs	r3, #0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3708      	adds	r7, #8
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	370c      	adds	r7, #12
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr

08009a36 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b084      	sub	sp, #16
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2201      	movs	r2, #1
 8009a46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d00e      	beq.n	8009a72 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	6852      	ldr	r2, [r2, #4]
 8009a60:	b2d2      	uxtb	r2, r2
 8009a62:	4611      	mov	r1, r2
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	4798      	blx	r3
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	460b      	mov	r3, r1
 8009a86:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009a88:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	370c      	adds	r7, #12
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009a96:	b480      	push	{r7}
 8009a98:	b083      	sub	sp, #12
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009aa2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr

08009ab0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	460b      	mov	r3, r1
 8009aba:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	885b      	ldrh	r3, [r3, #2]
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	7812      	ldrb	r2, [r2, #0]
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d91f      	bls.n	8009b16 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009adc:	e013      	b.n	8009b06 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009ade:	f107 030a 	add.w	r3, r7, #10
 8009ae2:	4619      	mov	r1, r3
 8009ae4:	6978      	ldr	r0, [r7, #20]
 8009ae6:	f000 f81b 	bl	8009b20 <USBD_GetNextDesc>
 8009aea:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	785b      	ldrb	r3, [r3, #1]
 8009af0:	2b05      	cmp	r3, #5
 8009af2:	d108      	bne.n	8009b06 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	789b      	ldrb	r3, [r3, #2]
 8009afc:	78fa      	ldrb	r2, [r7, #3]
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d008      	beq.n	8009b14 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009b02:	2300      	movs	r3, #0
 8009b04:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	885b      	ldrh	r3, [r3, #2]
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	897b      	ldrh	r3, [r7, #10]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d8e5      	bhi.n	8009ade <USBD_GetEpDesc+0x2e>
 8009b12:	e000      	b.n	8009b16 <USBD_GetEpDesc+0x66>
          break;
 8009b14:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009b16:	693b      	ldr	r3, [r7, #16]
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3718      	adds	r7, #24
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	881b      	ldrh	r3, [r3, #0]
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	7812      	ldrb	r2, [r2, #0]
 8009b36:	4413      	add	r3, r2
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	461a      	mov	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4413      	add	r3, r2
 8009b48:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3714      	adds	r7, #20
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b087      	sub	sp, #28
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009b76:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009b7a:	021b      	lsls	r3, r3, #8
 8009b7c:	b21a      	sxth	r2, r3
 8009b7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	b21b      	sxth	r3, r3
 8009b86:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009b88:	89fb      	ldrh	r3, [r7, #14]
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	371c      	adds	r7, #28
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
	...

08009b98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009bae:	2b40      	cmp	r3, #64	@ 0x40
 8009bb0:	d005      	beq.n	8009bbe <USBD_StdDevReq+0x26>
 8009bb2:	2b40      	cmp	r3, #64	@ 0x40
 8009bb4:	d857      	bhi.n	8009c66 <USBD_StdDevReq+0xce>
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00f      	beq.n	8009bda <USBD_StdDevReq+0x42>
 8009bba:	2b20      	cmp	r3, #32
 8009bbc:	d153      	bne.n	8009c66 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	32ae      	adds	r2, #174	@ 0xae
 8009bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bcc:	689b      	ldr	r3, [r3, #8]
 8009bce:	6839      	ldr	r1, [r7, #0]
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	4798      	blx	r3
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8009bd8:	e04a      	b.n	8009c70 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	785b      	ldrb	r3, [r3, #1]
 8009bde:	2b09      	cmp	r3, #9
 8009be0:	d83b      	bhi.n	8009c5a <USBD_StdDevReq+0xc2>
 8009be2:	a201      	add	r2, pc, #4	@ (adr r2, 8009be8 <USBD_StdDevReq+0x50>)
 8009be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be8:	08009c3d 	.word	0x08009c3d
 8009bec:	08009c51 	.word	0x08009c51
 8009bf0:	08009c5b 	.word	0x08009c5b
 8009bf4:	08009c47 	.word	0x08009c47
 8009bf8:	08009c5b 	.word	0x08009c5b
 8009bfc:	08009c1b 	.word	0x08009c1b
 8009c00:	08009c11 	.word	0x08009c11
 8009c04:	08009c5b 	.word	0x08009c5b
 8009c08:	08009c33 	.word	0x08009c33
 8009c0c:	08009c25 	.word	0x08009c25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009c10:	6839      	ldr	r1, [r7, #0]
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 fa3e 	bl	800a094 <USBD_GetDescriptor>
          break;
 8009c18:	e024      	b.n	8009c64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009c1a:	6839      	ldr	r1, [r7, #0]
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f000 fbcd 	bl	800a3bc <USBD_SetAddress>
          break;
 8009c22:	e01f      	b.n	8009c64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009c24:	6839      	ldr	r1, [r7, #0]
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fc0c 	bl	800a444 <USBD_SetConfig>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	73fb      	strb	r3, [r7, #15]
          break;
 8009c30:	e018      	b.n	8009c64 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c32:	6839      	ldr	r1, [r7, #0]
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 fcaf 	bl	800a598 <USBD_GetConfig>
          break;
 8009c3a:	e013      	b.n	8009c64 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c3c:	6839      	ldr	r1, [r7, #0]
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 fce0 	bl	800a604 <USBD_GetStatus>
          break;
 8009c44:	e00e      	b.n	8009c64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fd0f 	bl	800a66c <USBD_SetFeature>
          break;
 8009c4e:	e009      	b.n	8009c64 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c50:	6839      	ldr	r1, [r7, #0]
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fd33 	bl	800a6be <USBD_ClrFeature>
          break;
 8009c58:	e004      	b.n	8009c64 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009c5a:	6839      	ldr	r1, [r7, #0]
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fd8a 	bl	800a776 <USBD_CtlError>
          break;
 8009c62:	bf00      	nop
      }
      break;
 8009c64:	e004      	b.n	8009c70 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009c66:	6839      	ldr	r1, [r7, #0]
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fd84 	bl	800a776 <USBD_CtlError>
      break;
 8009c6e:	bf00      	nop
  }

  return ret;
 8009c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop

08009c7c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c86:	2300      	movs	r3, #0
 8009c88:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c92:	2b40      	cmp	r3, #64	@ 0x40
 8009c94:	d005      	beq.n	8009ca2 <USBD_StdItfReq+0x26>
 8009c96:	2b40      	cmp	r3, #64	@ 0x40
 8009c98:	d852      	bhi.n	8009d40 <USBD_StdItfReq+0xc4>
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d001      	beq.n	8009ca2 <USBD_StdItfReq+0x26>
 8009c9e:	2b20      	cmp	r3, #32
 8009ca0:	d14e      	bne.n	8009d40 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	3b01      	subs	r3, #1
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d840      	bhi.n	8009d32 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	889b      	ldrh	r3, [r3, #4]
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d836      	bhi.n	8009d28 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	889b      	ldrh	r3, [r3, #4]
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f7ff feda 	bl	8009a7c <USBD_CoreFindIF>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ccc:	7bbb      	ldrb	r3, [r7, #14]
 8009cce:	2bff      	cmp	r3, #255	@ 0xff
 8009cd0:	d01d      	beq.n	8009d0e <USBD_StdItfReq+0x92>
 8009cd2:	7bbb      	ldrb	r3, [r7, #14]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d11a      	bne.n	8009d0e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009cd8:	7bba      	ldrb	r2, [r7, #14]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	32ae      	adds	r2, #174	@ 0xae
 8009cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d00f      	beq.n	8009d08 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009ce8:	7bba      	ldrb	r2, [r7, #14]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009cf0:	7bba      	ldrb	r2, [r7, #14]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	32ae      	adds	r2, #174	@ 0xae
 8009cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	6839      	ldr	r1, [r7, #0]
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	4798      	blx	r3
 8009d02:	4603      	mov	r3, r0
 8009d04:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009d06:	e004      	b.n	8009d12 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009d08:	2303      	movs	r3, #3
 8009d0a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009d0c:	e001      	b.n	8009d12 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009d0e:	2303      	movs	r3, #3
 8009d10:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	88db      	ldrh	r3, [r3, #6]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d110      	bne.n	8009d3c <USBD_StdItfReq+0xc0>
 8009d1a:	7bfb      	ldrb	r3, [r7, #15]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10d      	bne.n	8009d3c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fe06 	bl	800a932 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009d26:	e009      	b.n	8009d3c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009d28:	6839      	ldr	r1, [r7, #0]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fd23 	bl	800a776 <USBD_CtlError>
          break;
 8009d30:	e004      	b.n	8009d3c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009d32:	6839      	ldr	r1, [r7, #0]
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fd1e 	bl	800a776 <USBD_CtlError>
          break;
 8009d3a:	e000      	b.n	8009d3e <USBD_StdItfReq+0xc2>
          break;
 8009d3c:	bf00      	nop
      }
      break;
 8009d3e:	e004      	b.n	8009d4a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009d40:	6839      	ldr	r1, [r7, #0]
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 fd17 	bl	800a776 <USBD_CtlError>
      break;
 8009d48:	bf00      	nop
  }

  return ret;
 8009d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	889b      	ldrh	r3, [r3, #4]
 8009d66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d70:	2b40      	cmp	r3, #64	@ 0x40
 8009d72:	d007      	beq.n	8009d84 <USBD_StdEPReq+0x30>
 8009d74:	2b40      	cmp	r3, #64	@ 0x40
 8009d76:	f200 8181 	bhi.w	800a07c <USBD_StdEPReq+0x328>
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d02a      	beq.n	8009dd4 <USBD_StdEPReq+0x80>
 8009d7e:	2b20      	cmp	r3, #32
 8009d80:	f040 817c 	bne.w	800a07c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d84:	7bbb      	ldrb	r3, [r7, #14]
 8009d86:	4619      	mov	r1, r3
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f7ff fe84 	bl	8009a96 <USBD_CoreFindEP>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d92:	7b7b      	ldrb	r3, [r7, #13]
 8009d94:	2bff      	cmp	r3, #255	@ 0xff
 8009d96:	f000 8176 	beq.w	800a086 <USBD_StdEPReq+0x332>
 8009d9a:	7b7b      	ldrb	r3, [r7, #13]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f040 8172 	bne.w	800a086 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8009da2:	7b7a      	ldrb	r2, [r7, #13]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009daa:	7b7a      	ldrb	r2, [r7, #13]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	32ae      	adds	r2, #174	@ 0xae
 8009db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009db4:	689b      	ldr	r3, [r3, #8]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	f000 8165 	beq.w	800a086 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009dbc:	7b7a      	ldrb	r2, [r7, #13]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	32ae      	adds	r2, #174	@ 0xae
 8009dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	6839      	ldr	r1, [r7, #0]
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	4798      	blx	r3
 8009dce:	4603      	mov	r3, r0
 8009dd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009dd2:	e158      	b.n	800a086 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	785b      	ldrb	r3, [r3, #1]
 8009dd8:	2b03      	cmp	r3, #3
 8009dda:	d008      	beq.n	8009dee <USBD_StdEPReq+0x9a>
 8009ddc:	2b03      	cmp	r3, #3
 8009dde:	f300 8147 	bgt.w	800a070 <USBD_StdEPReq+0x31c>
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f000 809b 	beq.w	8009f1e <USBD_StdEPReq+0x1ca>
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d03c      	beq.n	8009e66 <USBD_StdEPReq+0x112>
 8009dec:	e140      	b.n	800a070 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d002      	beq.n	8009e00 <USBD_StdEPReq+0xac>
 8009dfa:	2b03      	cmp	r3, #3
 8009dfc:	d016      	beq.n	8009e2c <USBD_StdEPReq+0xd8>
 8009dfe:	e02c      	b.n	8009e5a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e00:	7bbb      	ldrb	r3, [r7, #14]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d00d      	beq.n	8009e22 <USBD_StdEPReq+0xce>
 8009e06:	7bbb      	ldrb	r3, [r7, #14]
 8009e08:	2b80      	cmp	r3, #128	@ 0x80
 8009e0a:	d00a      	beq.n	8009e22 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e0c:	7bbb      	ldrb	r3, [r7, #14]
 8009e0e:	4619      	mov	r1, r3
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f016 ffb3 	bl	8020d7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e16:	2180      	movs	r1, #128	@ 0x80
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f016 ffaf 	bl	8020d7c <USBD_LL_StallEP>
 8009e1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e20:	e020      	b.n	8009e64 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009e22:	6839      	ldr	r1, [r7, #0]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fca6 	bl	800a776 <USBD_CtlError>
              break;
 8009e2a:	e01b      	b.n	8009e64 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	885b      	ldrh	r3, [r3, #2]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d10e      	bne.n	8009e52 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009e34:	7bbb      	ldrb	r3, [r7, #14]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d00b      	beq.n	8009e52 <USBD_StdEPReq+0xfe>
 8009e3a:	7bbb      	ldrb	r3, [r7, #14]
 8009e3c:	2b80      	cmp	r3, #128	@ 0x80
 8009e3e:	d008      	beq.n	8009e52 <USBD_StdEPReq+0xfe>
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	88db      	ldrh	r3, [r3, #6]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d104      	bne.n	8009e52 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e48:	7bbb      	ldrb	r3, [r7, #14]
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f016 ff95 	bl	8020d7c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 fd6d 	bl	800a932 <USBD_CtlSendStatus>

              break;
 8009e58:	e004      	b.n	8009e64 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009e5a:	6839      	ldr	r1, [r7, #0]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 fc8a 	bl	800a776 <USBD_CtlError>
              break;
 8009e62:	bf00      	nop
          }
          break;
 8009e64:	e109      	b.n	800a07a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	2b02      	cmp	r3, #2
 8009e70:	d002      	beq.n	8009e78 <USBD_StdEPReq+0x124>
 8009e72:	2b03      	cmp	r3, #3
 8009e74:	d016      	beq.n	8009ea4 <USBD_StdEPReq+0x150>
 8009e76:	e04b      	b.n	8009f10 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e78:	7bbb      	ldrb	r3, [r7, #14]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00d      	beq.n	8009e9a <USBD_StdEPReq+0x146>
 8009e7e:	7bbb      	ldrb	r3, [r7, #14]
 8009e80:	2b80      	cmp	r3, #128	@ 0x80
 8009e82:	d00a      	beq.n	8009e9a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e84:	7bbb      	ldrb	r3, [r7, #14]
 8009e86:	4619      	mov	r1, r3
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f016 ff77 	bl	8020d7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e8e:	2180      	movs	r1, #128	@ 0x80
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f016 ff73 	bl	8020d7c <USBD_LL_StallEP>
 8009e96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e98:	e040      	b.n	8009f1c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009e9a:	6839      	ldr	r1, [r7, #0]
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 fc6a 	bl	800a776 <USBD_CtlError>
              break;
 8009ea2:	e03b      	b.n	8009f1c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	885b      	ldrh	r3, [r3, #2]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d136      	bne.n	8009f1a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009eac:	7bbb      	ldrb	r3, [r7, #14]
 8009eae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d004      	beq.n	8009ec0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009eb6:	7bbb      	ldrb	r3, [r7, #14]
 8009eb8:	4619      	mov	r1, r3
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f016 ff7d 	bl	8020dba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 fd36 	bl	800a932 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009ec6:	7bbb      	ldrb	r3, [r7, #14]
 8009ec8:	4619      	mov	r1, r3
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f7ff fde3 	bl	8009a96 <USBD_CoreFindEP>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ed4:	7b7b      	ldrb	r3, [r7, #13]
 8009ed6:	2bff      	cmp	r3, #255	@ 0xff
 8009ed8:	d01f      	beq.n	8009f1a <USBD_StdEPReq+0x1c6>
 8009eda:	7b7b      	ldrb	r3, [r7, #13]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d11c      	bne.n	8009f1a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009ee0:	7b7a      	ldrb	r2, [r7, #13]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009ee8:	7b7a      	ldrb	r2, [r7, #13]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	32ae      	adds	r2, #174	@ 0xae
 8009eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d010      	beq.n	8009f1a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009ef8:	7b7a      	ldrb	r2, [r7, #13]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	32ae      	adds	r2, #174	@ 0xae
 8009efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f02:	689b      	ldr	r3, [r3, #8]
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	4798      	blx	r3
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009f0e:	e004      	b.n	8009f1a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009f10:	6839      	ldr	r1, [r7, #0]
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 fc2f 	bl	800a776 <USBD_CtlError>
              break;
 8009f18:	e000      	b.n	8009f1c <USBD_StdEPReq+0x1c8>
              break;
 8009f1a:	bf00      	nop
          }
          break;
 8009f1c:	e0ad      	b.n	800a07a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	d002      	beq.n	8009f30 <USBD_StdEPReq+0x1dc>
 8009f2a:	2b03      	cmp	r3, #3
 8009f2c:	d033      	beq.n	8009f96 <USBD_StdEPReq+0x242>
 8009f2e:	e099      	b.n	800a064 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f30:	7bbb      	ldrb	r3, [r7, #14]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d007      	beq.n	8009f46 <USBD_StdEPReq+0x1f2>
 8009f36:	7bbb      	ldrb	r3, [r7, #14]
 8009f38:	2b80      	cmp	r3, #128	@ 0x80
 8009f3a:	d004      	beq.n	8009f46 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 fc19 	bl	800a776 <USBD_CtlError>
                break;
 8009f44:	e093      	b.n	800a06e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	da0b      	bge.n	8009f66 <USBD_StdEPReq+0x212>
 8009f4e:	7bbb      	ldrb	r3, [r7, #14]
 8009f50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f54:	4613      	mov	r3, r2
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	4413      	add	r3, r2
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	3310      	adds	r3, #16
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	4413      	add	r3, r2
 8009f62:	3304      	adds	r3, #4
 8009f64:	e00b      	b.n	8009f7e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f66:	7bbb      	ldrb	r3, [r7, #14]
 8009f68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4413      	add	r3, r2
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	3304      	adds	r3, #4
 8009f7e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	2200      	movs	r2, #0
 8009f84:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	330e      	adds	r3, #14
 8009f8a:	2202      	movs	r2, #2
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fc6e 	bl	800a870 <USBD_CtlSendData>
              break;
 8009f94:	e06b      	b.n	800a06e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009f96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	da11      	bge.n	8009fc2 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f9e:	7bbb      	ldrb	r3, [r7, #14]
 8009fa0:	f003 020f 	and.w	r2, r3, #15
 8009fa4:	6879      	ldr	r1, [r7, #4]
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	4413      	add	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	440b      	add	r3, r1
 8009fb0:	3323      	adds	r3, #35	@ 0x23
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d117      	bne.n	8009fe8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009fb8:	6839      	ldr	r1, [r7, #0]
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 fbdb 	bl	800a776 <USBD_CtlError>
                  break;
 8009fc0:	e055      	b.n	800a06e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009fc2:	7bbb      	ldrb	r3, [r7, #14]
 8009fc4:	f003 020f 	and.w	r2, r3, #15
 8009fc8:	6879      	ldr	r1, [r7, #4]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4413      	add	r3, r2
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	440b      	add	r3, r1
 8009fd4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d104      	bne.n	8009fe8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009fde:	6839      	ldr	r1, [r7, #0]
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 fbc8 	bl	800a776 <USBD_CtlError>
                  break;
 8009fe6:	e042      	b.n	800a06e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fe8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	da0b      	bge.n	800a008 <USBD_StdEPReq+0x2b4>
 8009ff0:	7bbb      	ldrb	r3, [r7, #14]
 8009ff2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	4413      	add	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	3310      	adds	r3, #16
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	4413      	add	r3, r2
 800a004:	3304      	adds	r3, #4
 800a006:	e00b      	b.n	800a020 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a008:	7bbb      	ldrb	r3, [r7, #14]
 800a00a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a00e:	4613      	mov	r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4413      	add	r3, r2
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	4413      	add	r3, r2
 800a01e:	3304      	adds	r3, #4
 800a020:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a022:	7bbb      	ldrb	r3, [r7, #14]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d002      	beq.n	800a02e <USBD_StdEPReq+0x2da>
 800a028:	7bbb      	ldrb	r3, [r7, #14]
 800a02a:	2b80      	cmp	r3, #128	@ 0x80
 800a02c:	d103      	bne.n	800a036 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	2200      	movs	r2, #0
 800a032:	739a      	strb	r2, [r3, #14]
 800a034:	e00e      	b.n	800a054 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a036:	7bbb      	ldrb	r3, [r7, #14]
 800a038:	4619      	mov	r1, r3
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f016 fedc 	bl	8020df8 <USBD_LL_IsStallEP>
 800a040:	4603      	mov	r3, r0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d003      	beq.n	800a04e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	2201      	movs	r2, #1
 800a04a:	739a      	strb	r2, [r3, #14]
 800a04c:	e002      	b.n	800a054 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	2200      	movs	r2, #0
 800a052:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	330e      	adds	r3, #14
 800a058:	2202      	movs	r2, #2
 800a05a:	4619      	mov	r1, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fc07 	bl	800a870 <USBD_CtlSendData>
              break;
 800a062:	e004      	b.n	800a06e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800a064:	6839      	ldr	r1, [r7, #0]
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 fb85 	bl	800a776 <USBD_CtlError>
              break;
 800a06c:	bf00      	nop
          }
          break;
 800a06e:	e004      	b.n	800a07a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800a070:	6839      	ldr	r1, [r7, #0]
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fb7f 	bl	800a776 <USBD_CtlError>
          break;
 800a078:	bf00      	nop
      }
      break;
 800a07a:	e005      	b.n	800a088 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fb79 	bl	800a776 <USBD_CtlError>
      break;
 800a084:	e000      	b.n	800a088 <USBD_StdEPReq+0x334>
      break;
 800a086:	bf00      	nop
  }

  return ret;
 800a088:	7bfb      	ldrb	r3, [r7, #15]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
	...

0800a094 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	885b      	ldrh	r3, [r3, #2]
 800a0ae:	0a1b      	lsrs	r3, r3, #8
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	2b0e      	cmp	r3, #14
 800a0b6:	f200 8152 	bhi.w	800a35e <USBD_GetDescriptor+0x2ca>
 800a0ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a0c0 <USBD_GetDescriptor+0x2c>)
 800a0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c0:	0800a131 	.word	0x0800a131
 800a0c4:	0800a149 	.word	0x0800a149
 800a0c8:	0800a189 	.word	0x0800a189
 800a0cc:	0800a35f 	.word	0x0800a35f
 800a0d0:	0800a35f 	.word	0x0800a35f
 800a0d4:	0800a2ff 	.word	0x0800a2ff
 800a0d8:	0800a32b 	.word	0x0800a32b
 800a0dc:	0800a35f 	.word	0x0800a35f
 800a0e0:	0800a35f 	.word	0x0800a35f
 800a0e4:	0800a35f 	.word	0x0800a35f
 800a0e8:	0800a35f 	.word	0x0800a35f
 800a0ec:	0800a35f 	.word	0x0800a35f
 800a0f0:	0800a35f 	.word	0x0800a35f
 800a0f4:	0800a35f 	.word	0x0800a35f
 800a0f8:	0800a0fd 	.word	0x0800a0fd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a102:	69db      	ldr	r3, [r3, #28]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00b      	beq.n	800a120 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a10e:	69db      	ldr	r3, [r3, #28]
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	7c12      	ldrb	r2, [r2, #16]
 800a114:	f107 0108 	add.w	r1, r7, #8
 800a118:	4610      	mov	r0, r2
 800a11a:	4798      	blx	r3
 800a11c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a11e:	e126      	b.n	800a36e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a120:	6839      	ldr	r1, [r7, #0]
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 fb27 	bl	800a776 <USBD_CtlError>
        err++;
 800a128:	7afb      	ldrb	r3, [r7, #11]
 800a12a:	3301      	adds	r3, #1
 800a12c:	72fb      	strb	r3, [r7, #11]
      break;
 800a12e:	e11e      	b.n	800a36e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	7c12      	ldrb	r2, [r2, #16]
 800a13c:	f107 0108 	add.w	r1, r7, #8
 800a140:	4610      	mov	r0, r2
 800a142:	4798      	blx	r3
 800a144:	60f8      	str	r0, [r7, #12]
      break;
 800a146:	e112      	b.n	800a36e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	7c1b      	ldrb	r3, [r3, #16]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d10d      	bne.n	800a16c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a158:	f107 0208 	add.w	r2, r7, #8
 800a15c:	4610      	mov	r0, r2
 800a15e:	4798      	blx	r3
 800a160:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	3301      	adds	r3, #1
 800a166:	2202      	movs	r2, #2
 800a168:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a16a:	e100      	b.n	800a36e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a174:	f107 0208 	add.w	r2, r7, #8
 800a178:	4610      	mov	r0, r2
 800a17a:	4798      	blx	r3
 800a17c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	3301      	adds	r3, #1
 800a182:	2202      	movs	r2, #2
 800a184:	701a      	strb	r2, [r3, #0]
      break;
 800a186:	e0f2      	b.n	800a36e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	885b      	ldrh	r3, [r3, #2]
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	2b05      	cmp	r3, #5
 800a190:	f200 80ac 	bhi.w	800a2ec <USBD_GetDescriptor+0x258>
 800a194:	a201      	add	r2, pc, #4	@ (adr r2, 800a19c <USBD_GetDescriptor+0x108>)
 800a196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19a:	bf00      	nop
 800a19c:	0800a1b5 	.word	0x0800a1b5
 800a1a0:	0800a1e9 	.word	0x0800a1e9
 800a1a4:	0800a21d 	.word	0x0800a21d
 800a1a8:	0800a251 	.word	0x0800a251
 800a1ac:	0800a285 	.word	0x0800a285
 800a1b0:	0800a2b9 	.word	0x0800a2b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d00b      	beq.n	800a1d8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	7c12      	ldrb	r2, [r2, #16]
 800a1cc:	f107 0108 	add.w	r1, r7, #8
 800a1d0:	4610      	mov	r0, r2
 800a1d2:	4798      	blx	r3
 800a1d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1d6:	e091      	b.n	800a2fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1d8:	6839      	ldr	r1, [r7, #0]
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 facb 	bl	800a776 <USBD_CtlError>
            err++;
 800a1e0:	7afb      	ldrb	r3, [r7, #11]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1e6:	e089      	b.n	800a2fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d00b      	beq.n	800a20c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	7c12      	ldrb	r2, [r2, #16]
 800a200:	f107 0108 	add.w	r1, r7, #8
 800a204:	4610      	mov	r0, r2
 800a206:	4798      	blx	r3
 800a208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a20a:	e077      	b.n	800a2fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a20c:	6839      	ldr	r1, [r7, #0]
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 fab1 	bl	800a776 <USBD_CtlError>
            err++;
 800a214:	7afb      	ldrb	r3, [r7, #11]
 800a216:	3301      	adds	r3, #1
 800a218:	72fb      	strb	r3, [r7, #11]
          break;
 800a21a:	e06f      	b.n	800a2fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a222:	68db      	ldr	r3, [r3, #12]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00b      	beq.n	800a240 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	7c12      	ldrb	r2, [r2, #16]
 800a234:	f107 0108 	add.w	r1, r7, #8
 800a238:	4610      	mov	r0, r2
 800a23a:	4798      	blx	r3
 800a23c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a23e:	e05d      	b.n	800a2fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a240:	6839      	ldr	r1, [r7, #0]
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 fa97 	bl	800a776 <USBD_CtlError>
            err++;
 800a248:	7afb      	ldrb	r3, [r7, #11]
 800a24a:	3301      	adds	r3, #1
 800a24c:	72fb      	strb	r3, [r7, #11]
          break;
 800a24e:	e055      	b.n	800a2fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00b      	beq.n	800a274 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	7c12      	ldrb	r2, [r2, #16]
 800a268:	f107 0108 	add.w	r1, r7, #8
 800a26c:	4610      	mov	r0, r2
 800a26e:	4798      	blx	r3
 800a270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a272:	e043      	b.n	800a2fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a274:	6839      	ldr	r1, [r7, #0]
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 fa7d 	bl	800a776 <USBD_CtlError>
            err++;
 800a27c:	7afb      	ldrb	r3, [r7, #11]
 800a27e:	3301      	adds	r3, #1
 800a280:	72fb      	strb	r3, [r7, #11]
          break;
 800a282:	e03b      	b.n	800a2fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a28a:	695b      	ldr	r3, [r3, #20]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00b      	beq.n	800a2a8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	7c12      	ldrb	r2, [r2, #16]
 800a29c:	f107 0108 	add.w	r1, r7, #8
 800a2a0:	4610      	mov	r0, r2
 800a2a2:	4798      	blx	r3
 800a2a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2a6:	e029      	b.n	800a2fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2a8:	6839      	ldr	r1, [r7, #0]
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 fa63 	bl	800a776 <USBD_CtlError>
            err++;
 800a2b0:	7afb      	ldrb	r3, [r7, #11]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a2b6:	e021      	b.n	800a2fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2be:	699b      	ldr	r3, [r3, #24]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00b      	beq.n	800a2dc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	7c12      	ldrb	r2, [r2, #16]
 800a2d0:	f107 0108 	add.w	r1, r7, #8
 800a2d4:	4610      	mov	r0, r2
 800a2d6:	4798      	blx	r3
 800a2d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2da:	e00f      	b.n	800a2fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a2dc:	6839      	ldr	r1, [r7, #0]
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fa49 	bl	800a776 <USBD_CtlError>
            err++;
 800a2e4:	7afb      	ldrb	r3, [r7, #11]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a2ea:	e007      	b.n	800a2fc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a2ec:	6839      	ldr	r1, [r7, #0]
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 fa41 	bl	800a776 <USBD_CtlError>
          err++;
 800a2f4:	7afb      	ldrb	r3, [r7, #11]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a2fa:	bf00      	nop
      }
      break;
 800a2fc:	e037      	b.n	800a36e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	7c1b      	ldrb	r3, [r3, #16]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d109      	bne.n	800a31a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a30c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a30e:	f107 0208 	add.w	r2, r7, #8
 800a312:	4610      	mov	r0, r2
 800a314:	4798      	blx	r3
 800a316:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a318:	e029      	b.n	800a36e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a31a:	6839      	ldr	r1, [r7, #0]
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 fa2a 	bl	800a776 <USBD_CtlError>
        err++;
 800a322:	7afb      	ldrb	r3, [r7, #11]
 800a324:	3301      	adds	r3, #1
 800a326:	72fb      	strb	r3, [r7, #11]
      break;
 800a328:	e021      	b.n	800a36e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	7c1b      	ldrb	r3, [r3, #16]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d10d      	bne.n	800a34e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a33a:	f107 0208 	add.w	r2, r7, #8
 800a33e:	4610      	mov	r0, r2
 800a340:	4798      	blx	r3
 800a342:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	3301      	adds	r3, #1
 800a348:	2207      	movs	r2, #7
 800a34a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a34c:	e00f      	b.n	800a36e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a34e:	6839      	ldr	r1, [r7, #0]
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 fa10 	bl	800a776 <USBD_CtlError>
        err++;
 800a356:	7afb      	ldrb	r3, [r7, #11]
 800a358:	3301      	adds	r3, #1
 800a35a:	72fb      	strb	r3, [r7, #11]
      break;
 800a35c:	e007      	b.n	800a36e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a35e:	6839      	ldr	r1, [r7, #0]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 fa08 	bl	800a776 <USBD_CtlError>
      err++;
 800a366:	7afb      	ldrb	r3, [r7, #11]
 800a368:	3301      	adds	r3, #1
 800a36a:	72fb      	strb	r3, [r7, #11]
      break;
 800a36c:	bf00      	nop
  }

  if (err != 0U)
 800a36e:	7afb      	ldrb	r3, [r7, #11]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d11e      	bne.n	800a3b2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	88db      	ldrh	r3, [r3, #6]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d016      	beq.n	800a3aa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a37c:	893b      	ldrh	r3, [r7, #8]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00e      	beq.n	800a3a0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	88da      	ldrh	r2, [r3, #6]
 800a386:	893b      	ldrh	r3, [r7, #8]
 800a388:	4293      	cmp	r3, r2
 800a38a:	bf28      	it	cs
 800a38c:	4613      	movcs	r3, r2
 800a38e:	b29b      	uxth	r3, r3
 800a390:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a392:	893b      	ldrh	r3, [r7, #8]
 800a394:	461a      	mov	r2, r3
 800a396:	68f9      	ldr	r1, [r7, #12]
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 fa69 	bl	800a870 <USBD_CtlSendData>
 800a39e:	e009      	b.n	800a3b4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a3a0:	6839      	ldr	r1, [r7, #0]
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 f9e7 	bl	800a776 <USBD_CtlError>
 800a3a8:	e004      	b.n	800a3b4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 fac1 	bl	800a932 <USBD_CtlSendStatus>
 800a3b0:	e000      	b.n	800a3b4 <USBD_GetDescriptor+0x320>
    return;
 800a3b2:	bf00      	nop
  }
}
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop

0800a3bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	889b      	ldrh	r3, [r3, #4]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d131      	bne.n	800a432 <USBD_SetAddress+0x76>
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	88db      	ldrh	r3, [r3, #6]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d12d      	bne.n	800a432 <USBD_SetAddress+0x76>
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	885b      	ldrh	r3, [r3, #2]
 800a3da:	2b7f      	cmp	r3, #127	@ 0x7f
 800a3dc:	d829      	bhi.n	800a432 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	885b      	ldrh	r3, [r3, #2]
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	2b03      	cmp	r3, #3
 800a3f4:	d104      	bne.n	800a400 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a3f6:	6839      	ldr	r1, [r7, #0]
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 f9bc 	bl	800a776 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3fe:	e01d      	b.n	800a43c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	7bfa      	ldrb	r2, [r7, #15]
 800a404:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a408:	7bfb      	ldrb	r3, [r7, #15]
 800a40a:	4619      	mov	r1, r3
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f016 fd1f 	bl	8020e50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 fa8d 	bl	800a932 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a418:	7bfb      	ldrb	r3, [r7, #15]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d004      	beq.n	800a428 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2202      	movs	r2, #2
 800a422:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a426:	e009      	b.n	800a43c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a430:	e004      	b.n	800a43c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a432:	6839      	ldr	r1, [r7, #0]
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 f99e 	bl	800a776 <USBD_CtlError>
  }
}
 800a43a:	bf00      	nop
 800a43c:	bf00      	nop
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	885b      	ldrh	r3, [r3, #2]
 800a456:	b2da      	uxtb	r2, r3
 800a458:	4b4e      	ldr	r3, [pc, #312]	@ (800a594 <USBD_SetConfig+0x150>)
 800a45a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a45c:	4b4d      	ldr	r3, [pc, #308]	@ (800a594 <USBD_SetConfig+0x150>)
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	2b01      	cmp	r3, #1
 800a462:	d905      	bls.n	800a470 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a464:	6839      	ldr	r1, [r7, #0]
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f985 	bl	800a776 <USBD_CtlError>
    return USBD_FAIL;
 800a46c:	2303      	movs	r3, #3
 800a46e:	e08c      	b.n	800a58a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a476:	b2db      	uxtb	r3, r3
 800a478:	2b02      	cmp	r3, #2
 800a47a:	d002      	beq.n	800a482 <USBD_SetConfig+0x3e>
 800a47c:	2b03      	cmp	r3, #3
 800a47e:	d029      	beq.n	800a4d4 <USBD_SetConfig+0x90>
 800a480:	e075      	b.n	800a56e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a482:	4b44      	ldr	r3, [pc, #272]	@ (800a594 <USBD_SetConfig+0x150>)
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d020      	beq.n	800a4cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a48a:	4b42      	ldr	r3, [pc, #264]	@ (800a594 <USBD_SetConfig+0x150>)
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	461a      	mov	r2, r3
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a494:	4b3f      	ldr	r3, [pc, #252]	@ (800a594 <USBD_SetConfig+0x150>)
 800a496:	781b      	ldrb	r3, [r3, #0]
 800a498:	4619      	mov	r1, r3
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f7fe ffa3 	bl	80093e6 <USBD_SetClassConfig>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a4a4:	7bfb      	ldrb	r3, [r7, #15]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d008      	beq.n	800a4bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a4aa:	6839      	ldr	r1, [r7, #0]
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 f962 	bl	800a776 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2202      	movs	r2, #2
 800a4b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a4ba:	e065      	b.n	800a588 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 fa38 	bl	800a932 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2203      	movs	r2, #3
 800a4c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a4ca:	e05d      	b.n	800a588 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 fa30 	bl	800a932 <USBD_CtlSendStatus>
      break;
 800a4d2:	e059      	b.n	800a588 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a4d4:	4b2f      	ldr	r3, [pc, #188]	@ (800a594 <USBD_SetConfig+0x150>)
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d112      	bne.n	800a502 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2202      	movs	r2, #2
 800a4e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a4e4:	4b2b      	ldr	r3, [pc, #172]	@ (800a594 <USBD_SetConfig+0x150>)
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a4ee:	4b29      	ldr	r3, [pc, #164]	@ (800a594 <USBD_SetConfig+0x150>)
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f7fe ff92 	bl	800941e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 fa19 	bl	800a932 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a500:	e042      	b.n	800a588 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a502:	4b24      	ldr	r3, [pc, #144]	@ (800a594 <USBD_SetConfig+0x150>)
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	461a      	mov	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d02a      	beq.n	800a566 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	b2db      	uxtb	r3, r3
 800a516:	4619      	mov	r1, r3
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f7fe ff80 	bl	800941e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a51e:	4b1d      	ldr	r3, [pc, #116]	@ (800a594 <USBD_SetConfig+0x150>)
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	461a      	mov	r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a528:	4b1a      	ldr	r3, [pc, #104]	@ (800a594 <USBD_SetConfig+0x150>)
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	4619      	mov	r1, r3
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7fe ff59 	bl	80093e6 <USBD_SetClassConfig>
 800a534:	4603      	mov	r3, r0
 800a536:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a538:	7bfb      	ldrb	r3, [r7, #15]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00f      	beq.n	800a55e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a53e:	6839      	ldr	r1, [r7, #0]
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 f918 	bl	800a776 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	4619      	mov	r1, r3
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f7fe ff65 	bl	800941e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2202      	movs	r2, #2
 800a558:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a55c:	e014      	b.n	800a588 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 f9e7 	bl	800a932 <USBD_CtlSendStatus>
      break;
 800a564:	e010      	b.n	800a588 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f9e3 	bl	800a932 <USBD_CtlSendStatus>
      break;
 800a56c:	e00c      	b.n	800a588 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a56e:	6839      	ldr	r1, [r7, #0]
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 f900 	bl	800a776 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a576:	4b07      	ldr	r3, [pc, #28]	@ (800a594 <USBD_SetConfig+0x150>)
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	4619      	mov	r1, r3
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f7fe ff4e 	bl	800941e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a582:	2303      	movs	r3, #3
 800a584:	73fb      	strb	r3, [r7, #15]
      break;
 800a586:	bf00      	nop
  }

  return ret;
 800a588:	7bfb      	ldrb	r3, [r7, #15]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3710      	adds	r7, #16
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	200009f8 	.word	0x200009f8

0800a598 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	88db      	ldrh	r3, [r3, #6]
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d004      	beq.n	800a5b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a5aa:	6839      	ldr	r1, [r7, #0]
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 f8e2 	bl	800a776 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a5b2:	e023      	b.n	800a5fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	dc02      	bgt.n	800a5c6 <USBD_GetConfig+0x2e>
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	dc03      	bgt.n	800a5cc <USBD_GetConfig+0x34>
 800a5c4:	e015      	b.n	800a5f2 <USBD_GetConfig+0x5a>
 800a5c6:	2b03      	cmp	r3, #3
 800a5c8:	d00b      	beq.n	800a5e2 <USBD_GetConfig+0x4a>
 800a5ca:	e012      	b.n	800a5f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	3308      	adds	r3, #8
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	4619      	mov	r1, r3
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 f948 	bl	800a870 <USBD_CtlSendData>
        break;
 800a5e0:	e00c      	b.n	800a5fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	3304      	adds	r3, #4
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 f940 	bl	800a870 <USBD_CtlSendData>
        break;
 800a5f0:	e004      	b.n	800a5fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a5f2:	6839      	ldr	r1, [r7, #0]
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 f8be 	bl	800a776 <USBD_CtlError>
        break;
 800a5fa:	bf00      	nop
}
 800a5fc:	bf00      	nop
 800a5fe:	3708      	adds	r7, #8
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a614:	b2db      	uxtb	r3, r3
 800a616:	3b01      	subs	r3, #1
 800a618:	2b02      	cmp	r3, #2
 800a61a:	d81e      	bhi.n	800a65a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	88db      	ldrh	r3, [r3, #6]
 800a620:	2b02      	cmp	r3, #2
 800a622:	d004      	beq.n	800a62e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a624:	6839      	ldr	r1, [r7, #0]
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 f8a5 	bl	800a776 <USBD_CtlError>
        break;
 800a62c:	e01a      	b.n	800a664 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d005      	beq.n	800a64a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	f043 0202 	orr.w	r2, r3, #2
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	330c      	adds	r3, #12
 800a64e:	2202      	movs	r2, #2
 800a650:	4619      	mov	r1, r3
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 f90c 	bl	800a870 <USBD_CtlSendData>
      break;
 800a658:	e004      	b.n	800a664 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a65a:	6839      	ldr	r1, [r7, #0]
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 f88a 	bl	800a776 <USBD_CtlError>
      break;
 800a662:	bf00      	nop
  }
}
 800a664:	bf00      	nop
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	885b      	ldrh	r3, [r3, #2]
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d107      	bne.n	800a68e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2201      	movs	r2, #1
 800a682:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f953 	bl	800a932 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a68c:	e013      	b.n	800a6b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	885b      	ldrh	r3, [r3, #2]
 800a692:	2b02      	cmp	r3, #2
 800a694:	d10b      	bne.n	800a6ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	889b      	ldrh	r3, [r3, #4]
 800a69a:	0a1b      	lsrs	r3, r3, #8
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	b2da      	uxtb	r2, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f943 	bl	800a932 <USBD_CtlSendStatus>
}
 800a6ac:	e003      	b.n	800a6b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a6ae:	6839      	ldr	r1, [r7, #0]
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 f860 	bl	800a776 <USBD_CtlError>
}
 800a6b6:	bf00      	nop
 800a6b8:	3708      	adds	r7, #8
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}

0800a6be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b082      	sub	sp, #8
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
 800a6c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	2b02      	cmp	r3, #2
 800a6d4:	d80b      	bhi.n	800a6ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	885b      	ldrh	r3, [r3, #2]
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d10c      	bne.n	800a6f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 f923 	bl	800a932 <USBD_CtlSendStatus>
      }
      break;
 800a6ec:	e004      	b.n	800a6f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a6ee:	6839      	ldr	r1, [r7, #0]
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 f840 	bl	800a776 <USBD_CtlError>
      break;
 800a6f6:	e000      	b.n	800a6fa <USBD_ClrFeature+0x3c>
      break;
 800a6f8:	bf00      	nop
  }
}
 800a6fa:	bf00      	nop
 800a6fc:	3708      	adds	r7, #8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b084      	sub	sp, #16
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
 800a70a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	781a      	ldrb	r2, [r3, #0]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	3301      	adds	r3, #1
 800a71c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	781a      	ldrb	r2, [r3, #0]
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	3301      	adds	r3, #1
 800a72a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f7ff fa13 	bl	8009b58 <SWAPBYTE>
 800a732:	4603      	mov	r3, r0
 800a734:	461a      	mov	r2, r3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	3301      	adds	r3, #1
 800a73e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	3301      	adds	r3, #1
 800a744:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f7ff fa06 	bl	8009b58 <SWAPBYTE>
 800a74c:	4603      	mov	r3, r0
 800a74e:	461a      	mov	r2, r3
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	3301      	adds	r3, #1
 800a758:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	3301      	adds	r3, #1
 800a75e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f7ff f9f9 	bl	8009b58 <SWAPBYTE>
 800a766:	4603      	mov	r3, r0
 800a768:	461a      	mov	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	80da      	strh	r2, [r3, #6]
}
 800a76e:	bf00      	nop
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a776:	b580      	push	{r7, lr}
 800a778:	b082      	sub	sp, #8
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
 800a77e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a780:	2180      	movs	r1, #128	@ 0x80
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f016 fafa 	bl	8020d7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a788:	2100      	movs	r1, #0
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f016 faf6 	bl	8020d7c <USBD_LL_StallEP>
}
 800a790:	bf00      	nop
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b086      	sub	sp, #24
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	60b9      	str	r1, [r7, #8]
 800a7a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d042      	beq.n	800a834 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a7b2:	6938      	ldr	r0, [r7, #16]
 800a7b4:	f000 f842 	bl	800a83c <USBD_GetLen>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	005b      	lsls	r3, r3, #1
 800a7be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7c2:	d808      	bhi.n	800a7d6 <USBD_GetString+0x3e>
 800a7c4:	6938      	ldr	r0, [r7, #16]
 800a7c6:	f000 f839 	bl	800a83c <USBD_GetLen>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	005b      	lsls	r3, r3, #1
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	e001      	b.n	800a7da <USBD_GetString+0x42>
 800a7d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a7de:	7dfb      	ldrb	r3, [r7, #23]
 800a7e0:	68ba      	ldr	r2, [r7, #8]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	7812      	ldrb	r2, [r2, #0]
 800a7e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a7ea:	7dfb      	ldrb	r3, [r7, #23]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a7f0:	7dfb      	ldrb	r3, [r7, #23]
 800a7f2:	68ba      	ldr	r2, [r7, #8]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	2203      	movs	r2, #3
 800a7f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a7fa:	7dfb      	ldrb	r3, [r7, #23]
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a800:	e013      	b.n	800a82a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a802:	7dfb      	ldrb	r3, [r7, #23]
 800a804:	68ba      	ldr	r2, [r7, #8]
 800a806:	4413      	add	r3, r2
 800a808:	693a      	ldr	r2, [r7, #16]
 800a80a:	7812      	ldrb	r2, [r2, #0]
 800a80c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	3301      	adds	r3, #1
 800a812:	613b      	str	r3, [r7, #16]
    idx++;
 800a814:	7dfb      	ldrb	r3, [r7, #23]
 800a816:	3301      	adds	r3, #1
 800a818:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a81a:	7dfb      	ldrb	r3, [r7, #23]
 800a81c:	68ba      	ldr	r2, [r7, #8]
 800a81e:	4413      	add	r3, r2
 800a820:	2200      	movs	r2, #0
 800a822:	701a      	strb	r2, [r3, #0]
    idx++;
 800a824:	7dfb      	ldrb	r3, [r7, #23]
 800a826:	3301      	adds	r3, #1
 800a828:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d1e7      	bne.n	800a802 <USBD_GetString+0x6a>
 800a832:	e000      	b.n	800a836 <USBD_GetString+0x9e>
    return;
 800a834:	bf00      	nop
  }
}
 800a836:	3718      	adds	r7, #24
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a844:	2300      	movs	r3, #0
 800a846:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a84c:	e005      	b.n	800a85a <USBD_GetLen+0x1e>
  {
    len++;
 800a84e:	7bfb      	ldrb	r3, [r7, #15]
 800a850:	3301      	adds	r3, #1
 800a852:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	3301      	adds	r3, #1
 800a858:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d1f5      	bne.n	800a84e <USBD_GetLen+0x12>
  }

  return len;
 800a862:	7bfb      	ldrb	r3, [r7, #15]
}
 800a864:	4618      	mov	r0, r3
 800a866:	3714      	adds	r7, #20
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2202      	movs	r2, #2
 800a880:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	2100      	movs	r1, #0
 800a89c:	68f8      	ldr	r0, [r7, #12]
 800a89e:	f016 faf6 	bl	8020e8e <USBD_LL_Transmit>

  return USBD_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	2100      	movs	r1, #0
 800a8be:	68f8      	ldr	r0, [r7, #12]
 800a8c0:	f016 fae5 	bl	8020e8e <USBD_LL_Transmit>

  return USBD_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b084      	sub	sp, #16
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	60f8      	str	r0, [r7, #12]
 800a8d6:	60b9      	str	r1, [r7, #8]
 800a8d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2203      	movs	r2, #3
 800a8de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	68ba      	ldr	r2, [r7, #8]
 800a8ee:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	68ba      	ldr	r2, [r7, #8]
 800a8fe:	2100      	movs	r1, #0
 800a900:	68f8      	ldr	r0, [r7, #12]
 800a902:	f016 fae5 	bl	8020ed0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	68ba      	ldr	r2, [r7, #8]
 800a920:	2100      	movs	r1, #0
 800a922:	68f8      	ldr	r0, [r7, #12]
 800a924:	f016 fad4 	bl	8020ed0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b082      	sub	sp, #8
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2204      	movs	r2, #4
 800a93e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a942:	2300      	movs	r3, #0
 800a944:	2200      	movs	r2, #0
 800a946:	2100      	movs	r1, #0
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f016 faa0 	bl	8020e8e <USBD_LL_Transmit>

  return USBD_OK;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2205      	movs	r2, #5
 800a964:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a968:	2300      	movs	r3, #0
 800a96a:	2200      	movs	r2, #0
 800a96c:	2100      	movs	r1, #0
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f016 faae 	bl	8020ed0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3708      	adds	r7, #8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a97e:	b480      	push	{r7}
 800a980:	b085      	sub	sp, #20
 800a982:	af00      	add	r7, sp, #0
 800a984:	4603      	mov	r3, r0
 800a986:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a988:	2300      	movs	r3, #0
 800a98a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a98c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a990:	2b84      	cmp	r3, #132	@ 0x84
 800a992:	d005      	beq.n	800a9a0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a994:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	4413      	add	r3, r2
 800a99c:	3303      	adds	r3, #3
 800a99e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3714      	adds	r7, #20
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr

0800a9ae <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a9ae:	b480      	push	{r7}
 800a9b0:	b083      	sub	sp, #12
 800a9b2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9b4:	f3ef 8305 	mrs	r3, IPSR
 800a9b8:	607b      	str	r3, [r7, #4]
  return(result);
 800a9ba:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	bf14      	ite	ne
 800a9c0:	2301      	movne	r3, #1
 800a9c2:	2300      	moveq	r3, #0
 800a9c4:	b2db      	uxtb	r3, r3
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	370c      	adds	r7, #12
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr

0800a9d2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a9d2:	b580      	push	{r7, lr}
 800a9d4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a9d6:	f001 fd7b 	bl	800c4d0 <vTaskStartScheduler>
  
  return osOK;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a9e4:	f7ff ffe3 	bl	800a9ae <inHandlerMode>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d003      	beq.n	800a9f6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a9ee:	f001 fe9b 	bl	800c728 <xTaskGetTickCountFromISR>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	e002      	b.n	800a9fc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a9f6:	f001 fe87 	bl	800c708 <xTaskGetTickCount>
 800a9fa:	4603      	mov	r3, r0
  }
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800aa00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa02:	b089      	sub	sp, #36	@ 0x24
 800aa04:	af04      	add	r7, sp, #16
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	695b      	ldr	r3, [r3, #20]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d020      	beq.n	800aa54 <osThreadCreate+0x54>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	699b      	ldr	r3, [r3, #24]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d01c      	beq.n	800aa54 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	685c      	ldr	r4, [r3, #4]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	691e      	ldr	r6, [r3, #16]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7ff ffa6 	bl	800a97e <makeFreeRtosPriority>
 800aa32:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	695b      	ldr	r3, [r3, #20]
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa3c:	9202      	str	r2, [sp, #8]
 800aa3e:	9301      	str	r3, [sp, #4]
 800aa40:	9100      	str	r1, [sp, #0]
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	4632      	mov	r2, r6
 800aa46:	4629      	mov	r1, r5
 800aa48:	4620      	mov	r0, r4
 800aa4a:	f001 fabf 	bl	800bfcc <xTaskCreateStatic>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	60fb      	str	r3, [r7, #12]
 800aa52:	e01c      	b.n	800aa8e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	685c      	ldr	r4, [r3, #4]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa60:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f7ff ff88 	bl	800a97e <makeFreeRtosPriority>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	f107 030c 	add.w	r3, r7, #12
 800aa74:	9301      	str	r3, [sp, #4]
 800aa76:	9200      	str	r2, [sp, #0]
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	4632      	mov	r2, r6
 800aa7c:	4629      	mov	r1, r5
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f001 fb0a 	bl	800c098 <xTaskCreate>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b01      	cmp	r3, #1
 800aa88:	d001      	beq.n	800aa8e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	e000      	b.n	800aa90 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3714      	adds	r7, #20
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aa98 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f001 fc4b 	bl	800c33c <vTaskDelete>
  return osOK;
 800aaa6:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3708      	adds	r7, #8
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d001      	beq.n	800aac6 <osDelay+0x16>
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	e000      	b.n	800aac8 <osDelay+0x18>
 800aac6:	2301      	movs	r3, #1
 800aac8:	4618      	mov	r0, r3
 800aaca:	f001 fcc9 	bl	800c460 <vTaskDelay>
  
  return osOK;
 800aace:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d007      	beq.n	800aaf8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	4619      	mov	r1, r3
 800aaee:	2001      	movs	r0, #1
 800aaf0:	f000 fc5b 	bl	800b3aa <xQueueCreateMutexStatic>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	e003      	b.n	800ab00 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800aaf8:	2001      	movs	r0, #1
 800aafa:	f000 fc3e 	bl	800b37a <xQueueCreateMutex>
 800aafe:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ab12:	2300      	movs	r3, #0
 800ab14:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d101      	bne.n	800ab20 <osMutexWait+0x18>
    return osErrorParameter;
 800ab1c:	2380      	movs	r3, #128	@ 0x80
 800ab1e:	e03a      	b.n	800ab96 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800ab20:	2300      	movs	r3, #0
 800ab22:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab2a:	d103      	bne.n	800ab34 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800ab2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab30:	60fb      	str	r3, [r7, #12]
 800ab32:	e009      	b.n	800ab48 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d006      	beq.n	800ab48 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d101      	bne.n	800ab48 <osMutexWait+0x40>
      ticks = 1;
 800ab44:	2301      	movs	r3, #1
 800ab46:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ab48:	f7ff ff31 	bl	800a9ae <inHandlerMode>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d017      	beq.n	800ab82 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ab52:	f107 0308 	add.w	r3, r7, #8
 800ab56:	461a      	mov	r2, r3
 800ab58:	2100      	movs	r1, #0
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f001 f886 	bl	800bc6c <xQueueReceiveFromISR>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d001      	beq.n	800ab6a <osMutexWait+0x62>
      return osErrorOS;
 800ab66:	23ff      	movs	r3, #255	@ 0xff
 800ab68:	e015      	b.n	800ab96 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d011      	beq.n	800ab94 <osMutexWait+0x8c>
 800ab70:	4b0b      	ldr	r3, [pc, #44]	@ (800aba0 <osMutexWait+0x98>)
 800ab72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab76:	601a      	str	r2, [r3, #0]
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	f3bf 8f6f 	isb	sy
 800ab80:	e008      	b.n	800ab94 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800ab82:	68f9      	ldr	r1, [r7, #12]
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 ff59 	bl	800ba3c <xQueueSemaphoreTake>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d001      	beq.n	800ab94 <osMutexWait+0x8c>
    return osErrorOS;
 800ab90:	23ff      	movs	r3, #255	@ 0xff
 800ab92:	e000      	b.n	800ab96 <osMutexWait+0x8e>
  }
  
  return osOK;
 800ab94:	2300      	movs	r3, #0
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	e000ed04 	.word	0xe000ed04

0800aba4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800abac:	2300      	movs	r3, #0
 800abae:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800abb0:	2300      	movs	r3, #0
 800abb2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800abb4:	f7ff fefb 	bl	800a9ae <inHandlerMode>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d016      	beq.n	800abec <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800abbe:	f107 0308 	add.w	r3, r7, #8
 800abc2:	4619      	mov	r1, r3
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 fdb8 	bl	800b73a <xQueueGiveFromISR>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d001      	beq.n	800abd4 <osMutexRelease+0x30>
      return osErrorOS;
 800abd0:	23ff      	movs	r3, #255	@ 0xff
 800abd2:	e017      	b.n	800ac04 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d013      	beq.n	800ac02 <osMutexRelease+0x5e>
 800abda:	4b0c      	ldr	r3, [pc, #48]	@ (800ac0c <osMutexRelease+0x68>)
 800abdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abe0:	601a      	str	r2, [r3, #0]
 800abe2:	f3bf 8f4f 	dsb	sy
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	e00a      	b.n	800ac02 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800abec:	2300      	movs	r3, #0
 800abee:	2200      	movs	r2, #0
 800abf0:	2100      	movs	r1, #0
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 fbf4 	bl	800b3e0 <xQueueGenericSend>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d001      	beq.n	800ac02 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800abfe:	23ff      	movs	r3, #255	@ 0xff
 800ac00:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800ac02:	68fb      	ldr	r3, [r7, #12]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	e000ed04 	.word	0xe000ed04

0800ac10 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b086      	sub	sp, #24
 800ac14:	af02      	add	r7, sp, #8
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d00f      	beq.n	800ac42 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d10a      	bne.n	800ac3e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	2203      	movs	r2, #3
 800ac2e:	9200      	str	r2, [sp, #0]
 800ac30:	2200      	movs	r2, #0
 800ac32:	2100      	movs	r1, #0
 800ac34:	2001      	movs	r0, #1
 800ac36:	f000 fa9d 	bl	800b174 <xQueueGenericCreateStatic>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	e016      	b.n	800ac6c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	e014      	b.n	800ac6c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d110      	bne.n	800ac6a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800ac48:	2203      	movs	r2, #3
 800ac4a:	2100      	movs	r1, #0
 800ac4c:	2001      	movs	r0, #1
 800ac4e:	f000 fb18 	bl	800b282 <xQueueGenericCreate>
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d005      	beq.n	800ac66 <osSemaphoreCreate+0x56>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	2100      	movs	r1, #0
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f000 fbbd 	bl	800b3e0 <xQueueGenericSend>
      return sema;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	e000      	b.n	800ac6c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800ac6a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3710      	adds	r7, #16
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ac7e:	2300      	movs	r3, #0
 800ac80:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d101      	bne.n	800ac8c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800ac88:	2380      	movs	r3, #128	@ 0x80
 800ac8a:	e03a      	b.n	800ad02 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac96:	d103      	bne.n	800aca0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800ac98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ac9c:	60fb      	str	r3, [r7, #12]
 800ac9e:	e009      	b.n	800acb4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d006      	beq.n	800acb4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d101      	bne.n	800acb4 <osSemaphoreWait+0x40>
      ticks = 1;
 800acb0:	2301      	movs	r3, #1
 800acb2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800acb4:	f7ff fe7b 	bl	800a9ae <inHandlerMode>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d017      	beq.n	800acee <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800acbe:	f107 0308 	add.w	r3, r7, #8
 800acc2:	461a      	mov	r2, r3
 800acc4:	2100      	movs	r1, #0
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 ffd0 	bl	800bc6c <xQueueReceiveFromISR>
 800accc:	4603      	mov	r3, r0
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d001      	beq.n	800acd6 <osSemaphoreWait+0x62>
      return osErrorOS;
 800acd2:	23ff      	movs	r3, #255	@ 0xff
 800acd4:	e015      	b.n	800ad02 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d011      	beq.n	800ad00 <osSemaphoreWait+0x8c>
 800acdc:	4b0b      	ldr	r3, [pc, #44]	@ (800ad0c <osSemaphoreWait+0x98>)
 800acde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ace2:	601a      	str	r2, [r3, #0]
 800ace4:	f3bf 8f4f 	dsb	sy
 800ace8:	f3bf 8f6f 	isb	sy
 800acec:	e008      	b.n	800ad00 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800acee:	68f9      	ldr	r1, [r7, #12]
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 fea3 	bl	800ba3c <xQueueSemaphoreTake>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d001      	beq.n	800ad00 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800acfc:	23ff      	movs	r3, #255	@ 0xff
 800acfe:	e000      	b.n	800ad02 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	e000ed04 	.word	0xe000ed04

0800ad10 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ad20:	f7ff fe45 	bl	800a9ae <inHandlerMode>
 800ad24:	4603      	mov	r3, r0
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d016      	beq.n	800ad58 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ad2a:	f107 0308 	add.w	r3, r7, #8
 800ad2e:	4619      	mov	r1, r3
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 fd02 	bl	800b73a <xQueueGiveFromISR>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d001      	beq.n	800ad40 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ad3c:	23ff      	movs	r3, #255	@ 0xff
 800ad3e:	e017      	b.n	800ad70 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d013      	beq.n	800ad6e <osSemaphoreRelease+0x5e>
 800ad46:	4b0c      	ldr	r3, [pc, #48]	@ (800ad78 <osSemaphoreRelease+0x68>)
 800ad48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad4c:	601a      	str	r2, [r3, #0]
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	e00a      	b.n	800ad6e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ad58:	2300      	movs	r3, #0
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	2100      	movs	r1, #0
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fb3e 	bl	800b3e0 <xQueueGenericSend>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d001      	beq.n	800ad6e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ad6a:	23ff      	movs	r3, #255	@ 0xff
 800ad6c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3710      	adds	r7, #16
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	e000ed04 	.word	0xe000ed04

0800ad7c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ad7c:	b590      	push	{r4, r7, lr}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af02      	add	r7, sp, #8
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d011      	beq.n	800adb2 <osMessageCreate+0x36>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00d      	beq.n	800adb2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6818      	ldr	r0, [r3, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6859      	ldr	r1, [r3, #4]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	689a      	ldr	r2, [r3, #8]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	2400      	movs	r4, #0
 800ada8:	9400      	str	r4, [sp, #0]
 800adaa:	f000 f9e3 	bl	800b174 <xQueueGenericCreateStatic>
 800adae:	4603      	mov	r3, r0
 800adb0:	e008      	b.n	800adc4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6818      	ldr	r0, [r3, #0]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	4619      	mov	r1, r3
 800adbe:	f000 fa60 	bl	800b282 <xQueueGenericCreate>
 800adc2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd90      	pop	{r4, r7, pc}

0800adcc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b086      	sub	sp, #24
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800add8:	2300      	movs	r3, #0
 800adda:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d101      	bne.n	800adea <osMessagePut+0x1e>
    ticks = 1;
 800ade6:	2301      	movs	r3, #1
 800ade8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800adea:	f7ff fde0 	bl	800a9ae <inHandlerMode>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d018      	beq.n	800ae26 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800adf4:	f107 0210 	add.w	r2, r7, #16
 800adf8:	f107 0108 	add.w	r1, r7, #8
 800adfc:	2300      	movs	r3, #0
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	f000 fbf8 	bl	800b5f4 <xQueueGenericSendFromISR>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d001      	beq.n	800ae0e <osMessagePut+0x42>
      return osErrorOS;
 800ae0a:	23ff      	movs	r3, #255	@ 0xff
 800ae0c:	e018      	b.n	800ae40 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d014      	beq.n	800ae3e <osMessagePut+0x72>
 800ae14:	4b0c      	ldr	r3, [pc, #48]	@ (800ae48 <osMessagePut+0x7c>)
 800ae16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae1a:	601a      	str	r2, [r3, #0]
 800ae1c:	f3bf 8f4f 	dsb	sy
 800ae20:	f3bf 8f6f 	isb	sy
 800ae24:	e00b      	b.n	800ae3e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ae26:	f107 0108 	add.w	r1, r7, #8
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	697a      	ldr	r2, [r7, #20]
 800ae2e:	68f8      	ldr	r0, [r7, #12]
 800ae30:	f000 fad6 	bl	800b3e0 <xQueueGenericSend>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	d001      	beq.n	800ae3e <osMessagePut+0x72>
      return osErrorOS;
 800ae3a:	23ff      	movs	r3, #255	@ 0xff
 800ae3c:	e000      	b.n	800ae40 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ae3e:	2300      	movs	r3, #0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3718      	adds	r7, #24
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	e000ed04 	.word	0xe000ed04

0800ae4c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ae4c:	b590      	push	{r4, r7, lr}
 800ae4e:	b08b      	sub	sp, #44	@ 0x2c
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d10a      	bne.n	800ae7c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ae66:	2380      	movs	r3, #128	@ 0x80
 800ae68:	617b      	str	r3, [r7, #20]
    return event;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	461c      	mov	r4, r3
 800ae6e:	f107 0314 	add.w	r3, r7, #20
 800ae72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ae76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ae7a:	e054      	b.n	800af26 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ae80:	2300      	movs	r3, #0
 800ae82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae8a:	d103      	bne.n	800ae94 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ae8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae90:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae92:	e009      	b.n	800aea8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d006      	beq.n	800aea8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800ae9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d101      	bne.n	800aea8 <osMessageGet+0x5c>
      ticks = 1;
 800aea4:	2301      	movs	r3, #1
 800aea6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800aea8:	f7ff fd81 	bl	800a9ae <inHandlerMode>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d01c      	beq.n	800aeec <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800aeb2:	f107 0220 	add.w	r2, r7, #32
 800aeb6:	f107 0314 	add.w	r3, r7, #20
 800aeba:	3304      	adds	r3, #4
 800aebc:	4619      	mov	r1, r3
 800aebe:	68b8      	ldr	r0, [r7, #8]
 800aec0:	f000 fed4 	bl	800bc6c <xQueueReceiveFromISR>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d102      	bne.n	800aed0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800aeca:	2310      	movs	r3, #16
 800aecc:	617b      	str	r3, [r7, #20]
 800aece:	e001      	b.n	800aed4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800aed0:	2300      	movs	r3, #0
 800aed2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aed4:	6a3b      	ldr	r3, [r7, #32]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d01d      	beq.n	800af16 <osMessageGet+0xca>
 800aeda:	4b15      	ldr	r3, [pc, #84]	@ (800af30 <osMessageGet+0xe4>)
 800aedc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aee0:	601a      	str	r2, [r3, #0]
 800aee2:	f3bf 8f4f 	dsb	sy
 800aee6:	f3bf 8f6f 	isb	sy
 800aeea:	e014      	b.n	800af16 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800aeec:	f107 0314 	add.w	r3, r7, #20
 800aef0:	3304      	adds	r3, #4
 800aef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aef4:	4619      	mov	r1, r3
 800aef6:	68b8      	ldr	r0, [r7, #8]
 800aef8:	f000 fcb8 	bl	800b86c <xQueueReceive>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d102      	bne.n	800af08 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800af02:	2310      	movs	r3, #16
 800af04:	617b      	str	r3, [r7, #20]
 800af06:	e006      	b.n	800af16 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800af08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d101      	bne.n	800af12 <osMessageGet+0xc6>
 800af0e:	2300      	movs	r3, #0
 800af10:	e000      	b.n	800af14 <osMessageGet+0xc8>
 800af12:	2340      	movs	r3, #64	@ 0x40
 800af14:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	461c      	mov	r4, r3
 800af1a:	f107 0314 	add.w	r3, r7, #20
 800af1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800af22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800af26:	68f8      	ldr	r0, [r7, #12]
 800af28:	372c      	adds	r7, #44	@ 0x2c
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd90      	pop	{r4, r7, pc}
 800af2e:	bf00      	nop
 800af30:	e000ed04 	.word	0xe000ed04

0800af34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f103 0208 	add.w	r2, r3, #8
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f103 0208 	add.w	r2, r3, #8
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f103 0208 	add.w	r2, r3, #8
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800af68:	bf00      	nop
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800af82:	bf00      	nop
 800af84:	370c      	adds	r7, #12
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr

0800af8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af8e:	b480      	push	{r7}
 800af90:	b085      	sub	sp, #20
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
 800af96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	689a      	ldr	r2, [r3, #8]
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	683a      	ldr	r2, [r7, #0]
 800afb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	683a      	ldr	r2, [r7, #0]
 800afb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	1c5a      	adds	r2, r3, #1
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	601a      	str	r2, [r3, #0]
}
 800afca:	bf00      	nop
 800afcc:	3714      	adds	r7, #20
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr

0800afd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800afd6:	b480      	push	{r7}
 800afd8:	b085      	sub	sp, #20
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
 800afde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800afec:	d103      	bne.n	800aff6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	691b      	ldr	r3, [r3, #16]
 800aff2:	60fb      	str	r3, [r7, #12]
 800aff4:	e00c      	b.n	800b010 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	3308      	adds	r3, #8
 800affa:	60fb      	str	r3, [r7, #12]
 800affc:	e002      	b.n	800b004 <vListInsert+0x2e>
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	60fb      	str	r3, [r7, #12]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	68ba      	ldr	r2, [r7, #8]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d2f6      	bcs.n	800affe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	685a      	ldr	r2, [r3, #4]
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	683a      	ldr	r2, [r7, #0]
 800b01e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	683a      	ldr	r2, [r7, #0]
 800b02a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	1c5a      	adds	r2, r3, #1
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	601a      	str	r2, [r3, #0]
}
 800b03c:	bf00      	nop
 800b03e:	3714      	adds	r7, #20
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	6892      	ldr	r2, [r2, #8]
 800b05e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	6852      	ldr	r2, [r2, #4]
 800b068:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	429a      	cmp	r2, r3
 800b072:	d103      	bne.n	800b07c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	689a      	ldr	r2, [r3, #8]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	1e5a      	subs	r2, r3, #1
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
}
 800b090:	4618      	mov	r0, r3
 800b092:	3714      	adds	r7, #20
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d10d      	bne.n	800b0cc <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0b4:	b672      	cpsid	i
 800b0b6:	f383 8811 	msr	BASEPRI, r3
 800b0ba:	f3bf 8f6f 	isb	sy
 800b0be:	f3bf 8f4f 	dsb	sy
 800b0c2:	b662      	cpsie	i
 800b0c4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b0c6:	bf00      	nop
 800b0c8:	bf00      	nop
 800b0ca:	e7fd      	b.n	800b0c8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b0cc:	f002 f9a6 	bl	800d41c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0d8:	68f9      	ldr	r1, [r7, #12]
 800b0da:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b0dc:	fb01 f303 	mul.w	r3, r1, r3
 800b0e0:	441a      	add	r2, r3
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	68f9      	ldr	r1, [r7, #12]
 800b100:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b102:	fb01 f303 	mul.w	r3, r1, r3
 800b106:	441a      	add	r2, r3
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	22ff      	movs	r2, #255	@ 0xff
 800b110:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	22ff      	movs	r2, #255	@ 0xff
 800b118:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d114      	bne.n	800b14c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	691b      	ldr	r3, [r3, #16]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d01a      	beq.n	800b160 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	3310      	adds	r3, #16
 800b12e:	4618      	mov	r0, r3
 800b130:	f001 fc56 	bl	800c9e0 <xTaskRemoveFromEventList>
 800b134:	4603      	mov	r3, r0
 800b136:	2b00      	cmp	r3, #0
 800b138:	d012      	beq.n	800b160 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b13a:	4b0d      	ldr	r3, [pc, #52]	@ (800b170 <xQueueGenericReset+0xd4>)
 800b13c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b140:	601a      	str	r2, [r3, #0]
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	f3bf 8f6f 	isb	sy
 800b14a:	e009      	b.n	800b160 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	3310      	adds	r3, #16
 800b150:	4618      	mov	r0, r3
 800b152:	f7ff feef 	bl	800af34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	3324      	adds	r3, #36	@ 0x24
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7ff feea 	bl	800af34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b160:	f002 f992 	bl	800d488 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b164:	2301      	movs	r3, #1
}
 800b166:	4618      	mov	r0, r3
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	e000ed04 	.word	0xe000ed04

0800b174 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b174:	b580      	push	{r7, lr}
 800b176:	b08e      	sub	sp, #56	@ 0x38
 800b178:	af02      	add	r7, sp, #8
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]
 800b180:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d10d      	bne.n	800b1a4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800b188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b18c:	b672      	cpsid	i
 800b18e:	f383 8811 	msr	BASEPRI, r3
 800b192:	f3bf 8f6f 	isb	sy
 800b196:	f3bf 8f4f 	dsb	sy
 800b19a:	b662      	cpsie	i
 800b19c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b19e:	bf00      	nop
 800b1a0:	bf00      	nop
 800b1a2:	e7fd      	b.n	800b1a0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d10d      	bne.n	800b1c6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800b1aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ae:	b672      	cpsid	i
 800b1b0:	f383 8811 	msr	BASEPRI, r3
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	b662      	cpsie	i
 800b1be:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b1c0:	bf00      	nop
 800b1c2:	bf00      	nop
 800b1c4:	e7fd      	b.n	800b1c2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d002      	beq.n	800b1d2 <xQueueGenericCreateStatic+0x5e>
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <xQueueGenericCreateStatic+0x62>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e000      	b.n	800b1d8 <xQueueGenericCreateStatic+0x64>
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d10d      	bne.n	800b1f8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800b1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e0:	b672      	cpsid	i
 800b1e2:	f383 8811 	msr	BASEPRI, r3
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	f3bf 8f4f 	dsb	sy
 800b1ee:	b662      	cpsie	i
 800b1f0:	623b      	str	r3, [r7, #32]
}
 800b1f2:	bf00      	nop
 800b1f4:	bf00      	nop
 800b1f6:	e7fd      	b.n	800b1f4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d102      	bne.n	800b204 <xQueueGenericCreateStatic+0x90>
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d101      	bne.n	800b208 <xQueueGenericCreateStatic+0x94>
 800b204:	2301      	movs	r3, #1
 800b206:	e000      	b.n	800b20a <xQueueGenericCreateStatic+0x96>
 800b208:	2300      	movs	r3, #0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d10d      	bne.n	800b22a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800b20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b212:	b672      	cpsid	i
 800b214:	f383 8811 	msr	BASEPRI, r3
 800b218:	f3bf 8f6f 	isb	sy
 800b21c:	f3bf 8f4f 	dsb	sy
 800b220:	b662      	cpsie	i
 800b222:	61fb      	str	r3, [r7, #28]
}
 800b224:	bf00      	nop
 800b226:	bf00      	nop
 800b228:	e7fd      	b.n	800b226 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b22a:	2348      	movs	r3, #72	@ 0x48
 800b22c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	2b48      	cmp	r3, #72	@ 0x48
 800b232:	d00d      	beq.n	800b250 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800b234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b238:	b672      	cpsid	i
 800b23a:	f383 8811 	msr	BASEPRI, r3
 800b23e:	f3bf 8f6f 	isb	sy
 800b242:	f3bf 8f4f 	dsb	sy
 800b246:	b662      	cpsie	i
 800b248:	61bb      	str	r3, [r7, #24]
}
 800b24a:	bf00      	nop
 800b24c:	bf00      	nop
 800b24e:	e7fd      	b.n	800b24c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b250:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d00d      	beq.n	800b278 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b25e:	2201      	movs	r2, #1
 800b260:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b264:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b26a:	9300      	str	r3, [sp, #0]
 800b26c:	4613      	mov	r3, r2
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	68b9      	ldr	r1, [r7, #8]
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f000 f848 	bl	800b308 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3730      	adds	r7, #48	@ 0x30
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b282:	b580      	push	{r7, lr}
 800b284:	b08a      	sub	sp, #40	@ 0x28
 800b286:	af02      	add	r7, sp, #8
 800b288:	60f8      	str	r0, [r7, #12]
 800b28a:	60b9      	str	r1, [r7, #8]
 800b28c:	4613      	mov	r3, r2
 800b28e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d10d      	bne.n	800b2b2 <xQueueGenericCreate+0x30>
	__asm volatile
 800b296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b29a:	b672      	cpsid	i
 800b29c:	f383 8811 	msr	BASEPRI, r3
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	f3bf 8f4f 	dsb	sy
 800b2a8:	b662      	cpsie	i
 800b2aa:	613b      	str	r3, [r7, #16]
}
 800b2ac:	bf00      	nop
 800b2ae:	bf00      	nop
 800b2b0:	e7fd      	b.n	800b2ae <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d102      	bne.n	800b2be <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	61fb      	str	r3, [r7, #28]
 800b2bc:	e004      	b.n	800b2c8 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	68ba      	ldr	r2, [r7, #8]
 800b2c2:	fb02 f303 	mul.w	r3, r2, r3
 800b2c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b2c8:	69fb      	ldr	r3, [r7, #28]
 800b2ca:	3348      	adds	r3, #72	@ 0x48
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f002 f9d3 	bl	800d678 <pvPortMalloc>
 800b2d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b2d4:	69bb      	ldr	r3, [r7, #24]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d011      	beq.n	800b2fe <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	3348      	adds	r3, #72	@ 0x48
 800b2e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b2e4:	69bb      	ldr	r3, [r7, #24]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b2ec:	79fa      	ldrb	r2, [r7, #7]
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	9300      	str	r3, [sp, #0]
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	697a      	ldr	r2, [r7, #20]
 800b2f6:	68b9      	ldr	r1, [r7, #8]
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	f000 f805 	bl	800b308 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b2fe:	69bb      	ldr	r3, [r7, #24]
	}
 800b300:	4618      	mov	r0, r3
 800b302:	3720      	adds	r7, #32
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	60b9      	str	r1, [r7, #8]
 800b312:	607a      	str	r2, [r7, #4]
 800b314:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d103      	bne.n	800b324 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	69ba      	ldr	r2, [r7, #24]
 800b320:	601a      	str	r2, [r3, #0]
 800b322:	e002      	b.n	800b32a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	68fa      	ldr	r2, [r7, #12]
 800b32e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	68ba      	ldr	r2, [r7, #8]
 800b334:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b336:	2101      	movs	r1, #1
 800b338:	69b8      	ldr	r0, [r7, #24]
 800b33a:	f7ff feaf 	bl	800b09c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b33e:	bf00      	nop
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b346:	b580      	push	{r7, lr}
 800b348:	b082      	sub	sp, #8
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d00e      	beq.n	800b372 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b366:	2300      	movs	r3, #0
 800b368:	2200      	movs	r2, #0
 800b36a:	2100      	movs	r1, #0
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 f837 	bl	800b3e0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b372:	bf00      	nop
 800b374:	3708      	adds	r7, #8
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b086      	sub	sp, #24
 800b37e:	af00      	add	r7, sp, #0
 800b380:	4603      	mov	r3, r0
 800b382:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b384:	2301      	movs	r3, #1
 800b386:	617b      	str	r3, [r7, #20]
 800b388:	2300      	movs	r3, #0
 800b38a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b38c:	79fb      	ldrb	r3, [r7, #7]
 800b38e:	461a      	mov	r2, r3
 800b390:	6939      	ldr	r1, [r7, #16]
 800b392:	6978      	ldr	r0, [r7, #20]
 800b394:	f7ff ff75 	bl	800b282 <xQueueGenericCreate>
 800b398:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b39a:	68f8      	ldr	r0, [r7, #12]
 800b39c:	f7ff ffd3 	bl	800b346 <prvInitialiseMutex>

		return xNewQueue;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
	}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3718      	adds	r7, #24
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b3aa:	b580      	push	{r7, lr}
 800b3ac:	b088      	sub	sp, #32
 800b3ae:	af02      	add	r7, sp, #8
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	6039      	str	r1, [r7, #0]
 800b3b4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	617b      	str	r3, [r7, #20]
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b3be:	79fb      	ldrb	r3, [r7, #7]
 800b3c0:	9300      	str	r3, [sp, #0]
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	6939      	ldr	r1, [r7, #16]
 800b3c8:	6978      	ldr	r0, [r7, #20]
 800b3ca:	f7ff fed3 	bl	800b174 <xQueueGenericCreateStatic>
 800b3ce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f7ff ffb8 	bl	800b346 <prvInitialiseMutex>

		return xNewQueue;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
	}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3718      	adds	r7, #24
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b08e      	sub	sp, #56	@ 0x38
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	60b9      	str	r1, [r7, #8]
 800b3ea:	607a      	str	r2, [r7, #4]
 800b3ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10d      	bne.n	800b418 <xQueueGenericSend+0x38>
	__asm volatile
 800b3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b400:	b672      	cpsid	i
 800b402:	f383 8811 	msr	BASEPRI, r3
 800b406:	f3bf 8f6f 	isb	sy
 800b40a:	f3bf 8f4f 	dsb	sy
 800b40e:	b662      	cpsie	i
 800b410:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b412:	bf00      	nop
 800b414:	bf00      	nop
 800b416:	e7fd      	b.n	800b414 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d103      	bne.n	800b426 <xQueueGenericSend+0x46>
 800b41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b422:	2b00      	cmp	r3, #0
 800b424:	d101      	bne.n	800b42a <xQueueGenericSend+0x4a>
 800b426:	2301      	movs	r3, #1
 800b428:	e000      	b.n	800b42c <xQueueGenericSend+0x4c>
 800b42a:	2300      	movs	r3, #0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10d      	bne.n	800b44c <xQueueGenericSend+0x6c>
	__asm volatile
 800b430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b434:	b672      	cpsid	i
 800b436:	f383 8811 	msr	BASEPRI, r3
 800b43a:	f3bf 8f6f 	isb	sy
 800b43e:	f3bf 8f4f 	dsb	sy
 800b442:	b662      	cpsie	i
 800b444:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b446:	bf00      	nop
 800b448:	bf00      	nop
 800b44a:	e7fd      	b.n	800b448 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	2b02      	cmp	r3, #2
 800b450:	d103      	bne.n	800b45a <xQueueGenericSend+0x7a>
 800b452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b456:	2b01      	cmp	r3, #1
 800b458:	d101      	bne.n	800b45e <xQueueGenericSend+0x7e>
 800b45a:	2301      	movs	r3, #1
 800b45c:	e000      	b.n	800b460 <xQueueGenericSend+0x80>
 800b45e:	2300      	movs	r3, #0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d10d      	bne.n	800b480 <xQueueGenericSend+0xa0>
	__asm volatile
 800b464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b468:	b672      	cpsid	i
 800b46a:	f383 8811 	msr	BASEPRI, r3
 800b46e:	f3bf 8f6f 	isb	sy
 800b472:	f3bf 8f4f 	dsb	sy
 800b476:	b662      	cpsie	i
 800b478:	623b      	str	r3, [r7, #32]
}
 800b47a:	bf00      	nop
 800b47c:	bf00      	nop
 800b47e:	e7fd      	b.n	800b47c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b480:	f001 fc7c 	bl	800cd7c <xTaskGetSchedulerState>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d102      	bne.n	800b490 <xQueueGenericSend+0xb0>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d101      	bne.n	800b494 <xQueueGenericSend+0xb4>
 800b490:	2301      	movs	r3, #1
 800b492:	e000      	b.n	800b496 <xQueueGenericSend+0xb6>
 800b494:	2300      	movs	r3, #0
 800b496:	2b00      	cmp	r3, #0
 800b498:	d10d      	bne.n	800b4b6 <xQueueGenericSend+0xd6>
	__asm volatile
 800b49a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b49e:	b672      	cpsid	i
 800b4a0:	f383 8811 	msr	BASEPRI, r3
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	f3bf 8f4f 	dsb	sy
 800b4ac:	b662      	cpsie	i
 800b4ae:	61fb      	str	r3, [r7, #28]
}
 800b4b0:	bf00      	nop
 800b4b2:	bf00      	nop
 800b4b4:	e7fd      	b.n	800b4b2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b4b6:	f001 ffb1 	bl	800d41c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d302      	bcc.n	800b4cc <xQueueGenericSend+0xec>
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	d129      	bne.n	800b520 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b4cc:	683a      	ldr	r2, [r7, #0]
 800b4ce:	68b9      	ldr	r1, [r7, #8]
 800b4d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b4d2:	f000 fc6b 	bl	800bdac <prvCopyDataToQueue>
 800b4d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d010      	beq.n	800b502 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e2:	3324      	adds	r3, #36	@ 0x24
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f001 fa7b 	bl	800c9e0 <xTaskRemoveFromEventList>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d013      	beq.n	800b518 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b4f0:	4b3f      	ldr	r3, [pc, #252]	@ (800b5f0 <xQueueGenericSend+0x210>)
 800b4f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4f6:	601a      	str	r2, [r3, #0]
 800b4f8:	f3bf 8f4f 	dsb	sy
 800b4fc:	f3bf 8f6f 	isb	sy
 800b500:	e00a      	b.n	800b518 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b504:	2b00      	cmp	r3, #0
 800b506:	d007      	beq.n	800b518 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b508:	4b39      	ldr	r3, [pc, #228]	@ (800b5f0 <xQueueGenericSend+0x210>)
 800b50a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b50e:	601a      	str	r2, [r3, #0]
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b518:	f001 ffb6 	bl	800d488 <vPortExitCritical>
				return pdPASS;
 800b51c:	2301      	movs	r3, #1
 800b51e:	e063      	b.n	800b5e8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d103      	bne.n	800b52e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b526:	f001 ffaf 	bl	800d488 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b52a:	2300      	movs	r3, #0
 800b52c:	e05c      	b.n	800b5e8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b52e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b530:	2b00      	cmp	r3, #0
 800b532:	d106      	bne.n	800b542 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b534:	f107 0314 	add.w	r3, r7, #20
 800b538:	4618      	mov	r0, r3
 800b53a:	f001 fab7 	bl	800caac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b53e:	2301      	movs	r3, #1
 800b540:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b542:	f001 ffa1 	bl	800d488 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b546:	f001 f831 	bl	800c5ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b54a:	f001 ff67 	bl	800d41c <vPortEnterCritical>
 800b54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b550:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b554:	b25b      	sxtb	r3, r3
 800b556:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b55a:	d103      	bne.n	800b564 <xQueueGenericSend+0x184>
 800b55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55e:	2200      	movs	r2, #0
 800b560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b566:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b56a:	b25b      	sxtb	r3, r3
 800b56c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b570:	d103      	bne.n	800b57a <xQueueGenericSend+0x19a>
 800b572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b574:	2200      	movs	r2, #0
 800b576:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b57a:	f001 ff85 	bl	800d488 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b57e:	1d3a      	adds	r2, r7, #4
 800b580:	f107 0314 	add.w	r3, r7, #20
 800b584:	4611      	mov	r1, r2
 800b586:	4618      	mov	r0, r3
 800b588:	f001 faa6 	bl	800cad8 <xTaskCheckForTimeOut>
 800b58c:	4603      	mov	r3, r0
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d124      	bne.n	800b5dc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b592:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b594:	f000 fd02 	bl	800bf9c <prvIsQueueFull>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d018      	beq.n	800b5d0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a0:	3310      	adds	r3, #16
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	4611      	mov	r1, r2
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f001 f9f2 	bl	800c990 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b5ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b5ae:	f000 fc8d 	bl	800becc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b5b2:	f001 f809 	bl	800c5c8 <xTaskResumeAll>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f47f af7c 	bne.w	800b4b6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800b5be:	4b0c      	ldr	r3, [pc, #48]	@ (800b5f0 <xQueueGenericSend+0x210>)
 800b5c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5c4:	601a      	str	r2, [r3, #0]
 800b5c6:	f3bf 8f4f 	dsb	sy
 800b5ca:	f3bf 8f6f 	isb	sy
 800b5ce:	e772      	b.n	800b4b6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b5d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b5d2:	f000 fc7b 	bl	800becc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b5d6:	f000 fff7 	bl	800c5c8 <xTaskResumeAll>
 800b5da:	e76c      	b.n	800b4b6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b5dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b5de:	f000 fc75 	bl	800becc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b5e2:	f000 fff1 	bl	800c5c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b5e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3738      	adds	r7, #56	@ 0x38
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	e000ed04 	.word	0xe000ed04

0800b5f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b08e      	sub	sp, #56	@ 0x38
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	607a      	str	r2, [r7, #4]
 800b600:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d10d      	bne.n	800b628 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800b60c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b610:	b672      	cpsid	i
 800b612:	f383 8811 	msr	BASEPRI, r3
 800b616:	f3bf 8f6f 	isb	sy
 800b61a:	f3bf 8f4f 	dsb	sy
 800b61e:	b662      	cpsie	i
 800b620:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b622:	bf00      	nop
 800b624:	bf00      	nop
 800b626:	e7fd      	b.n	800b624 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d103      	bne.n	800b636 <xQueueGenericSendFromISR+0x42>
 800b62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b632:	2b00      	cmp	r3, #0
 800b634:	d101      	bne.n	800b63a <xQueueGenericSendFromISR+0x46>
 800b636:	2301      	movs	r3, #1
 800b638:	e000      	b.n	800b63c <xQueueGenericSendFromISR+0x48>
 800b63a:	2300      	movs	r3, #0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d10d      	bne.n	800b65c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800b640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b644:	b672      	cpsid	i
 800b646:	f383 8811 	msr	BASEPRI, r3
 800b64a:	f3bf 8f6f 	isb	sy
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	b662      	cpsie	i
 800b654:	623b      	str	r3, [r7, #32]
}
 800b656:	bf00      	nop
 800b658:	bf00      	nop
 800b65a:	e7fd      	b.n	800b658 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	2b02      	cmp	r3, #2
 800b660:	d103      	bne.n	800b66a <xQueueGenericSendFromISR+0x76>
 800b662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b666:	2b01      	cmp	r3, #1
 800b668:	d101      	bne.n	800b66e <xQueueGenericSendFromISR+0x7a>
 800b66a:	2301      	movs	r3, #1
 800b66c:	e000      	b.n	800b670 <xQueueGenericSendFromISR+0x7c>
 800b66e:	2300      	movs	r3, #0
 800b670:	2b00      	cmp	r3, #0
 800b672:	d10d      	bne.n	800b690 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800b674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b678:	b672      	cpsid	i
 800b67a:	f383 8811 	msr	BASEPRI, r3
 800b67e:	f3bf 8f6f 	isb	sy
 800b682:	f3bf 8f4f 	dsb	sy
 800b686:	b662      	cpsie	i
 800b688:	61fb      	str	r3, [r7, #28]
}
 800b68a:	bf00      	nop
 800b68c:	bf00      	nop
 800b68e:	e7fd      	b.n	800b68c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b690:	f001 ffac 	bl	800d5ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b694:	f3ef 8211 	mrs	r2, BASEPRI
 800b698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b69c:	b672      	cpsid	i
 800b69e:	f383 8811 	msr	BASEPRI, r3
 800b6a2:	f3bf 8f6f 	isb	sy
 800b6a6:	f3bf 8f4f 	dsb	sy
 800b6aa:	b662      	cpsie	i
 800b6ac:	61ba      	str	r2, [r7, #24]
 800b6ae:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b6b0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b6b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d302      	bcc.n	800b6c6 <xQueueGenericSendFromISR+0xd2>
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d12c      	bne.n	800b720 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b6c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b6cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b6d0:	683a      	ldr	r2, [r7, #0]
 800b6d2:	68b9      	ldr	r1, [r7, #8]
 800b6d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b6d6:	f000 fb69 	bl	800bdac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b6da:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800b6de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b6e2:	d112      	bne.n	800b70a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d016      	beq.n	800b71a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ee:	3324      	adds	r3, #36	@ 0x24
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f001 f975 	bl	800c9e0 <xTaskRemoveFromEventList>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d00e      	beq.n	800b71a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d00b      	beq.n	800b71a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2201      	movs	r2, #1
 800b706:	601a      	str	r2, [r3, #0]
 800b708:	e007      	b.n	800b71a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b70a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b70e:	3301      	adds	r3, #1
 800b710:	b2db      	uxtb	r3, r3
 800b712:	b25a      	sxtb	r2, r3
 800b714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b716:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b71a:	2301      	movs	r3, #1
 800b71c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800b71e:	e001      	b.n	800b724 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b720:	2300      	movs	r3, #0
 800b722:	637b      	str	r3, [r7, #52]	@ 0x34
 800b724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b726:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b72e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b732:	4618      	mov	r0, r3
 800b734:	3738      	adds	r7, #56	@ 0x38
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b08e      	sub	sp, #56	@ 0x38
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
 800b742:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d10d      	bne.n	800b76a <xQueueGiveFromISR+0x30>
	__asm volatile
 800b74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b752:	b672      	cpsid	i
 800b754:	f383 8811 	msr	BASEPRI, r3
 800b758:	f3bf 8f6f 	isb	sy
 800b75c:	f3bf 8f4f 	dsb	sy
 800b760:	b662      	cpsie	i
 800b762:	623b      	str	r3, [r7, #32]
}
 800b764:	bf00      	nop
 800b766:	bf00      	nop
 800b768:	e7fd      	b.n	800b766 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b76a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b76c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00d      	beq.n	800b78e <xQueueGiveFromISR+0x54>
	__asm volatile
 800b772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b776:	b672      	cpsid	i
 800b778:	f383 8811 	msr	BASEPRI, r3
 800b77c:	f3bf 8f6f 	isb	sy
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	b662      	cpsie	i
 800b786:	61fb      	str	r3, [r7, #28]
}
 800b788:	bf00      	nop
 800b78a:	bf00      	nop
 800b78c:	e7fd      	b.n	800b78a <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b78e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d103      	bne.n	800b79e <xQueueGiveFromISR+0x64>
 800b796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d101      	bne.n	800b7a2 <xQueueGiveFromISR+0x68>
 800b79e:	2301      	movs	r3, #1
 800b7a0:	e000      	b.n	800b7a4 <xQueueGiveFromISR+0x6a>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d10d      	bne.n	800b7c4 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800b7a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ac:	b672      	cpsid	i
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	b662      	cpsie	i
 800b7bc:	61bb      	str	r3, [r7, #24]
}
 800b7be:	bf00      	nop
 800b7c0:	bf00      	nop
 800b7c2:	e7fd      	b.n	800b7c0 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b7c4:	f001 ff12 	bl	800d5ec <vPortValidateInterruptPriority>
	__asm volatile
 800b7c8:	f3ef 8211 	mrs	r2, BASEPRI
 800b7cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7d0:	b672      	cpsid	i
 800b7d2:	f383 8811 	msr	BASEPRI, r3
 800b7d6:	f3bf 8f6f 	isb	sy
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	b662      	cpsie	i
 800b7e0:	617a      	str	r2, [r7, #20]
 800b7e2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b7e4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b7e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7ec:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b7f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d22b      	bcs.n	800b850 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b7fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b804:	1c5a      	adds	r2, r3, #1
 800b806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b808:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b80a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b80e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b812:	d112      	bne.n	800b83a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d016      	beq.n	800b84a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b81e:	3324      	adds	r3, #36	@ 0x24
 800b820:	4618      	mov	r0, r3
 800b822:	f001 f8dd 	bl	800c9e0 <xTaskRemoveFromEventList>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d00e      	beq.n	800b84a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d00b      	beq.n	800b84a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	2201      	movs	r2, #1
 800b836:	601a      	str	r2, [r3, #0]
 800b838:	e007      	b.n	800b84a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b83a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b83e:	3301      	adds	r3, #1
 800b840:	b2db      	uxtb	r3, r3
 800b842:	b25a      	sxtb	r2, r3
 800b844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b846:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b84a:	2301      	movs	r3, #1
 800b84c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b84e:	e001      	b.n	800b854 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b850:	2300      	movs	r3, #0
 800b852:	637b      	str	r3, [r7, #52]	@ 0x34
 800b854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b856:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f383 8811 	msr	BASEPRI, r3
}
 800b85e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b860:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b862:	4618      	mov	r0, r3
 800b864:	3738      	adds	r7, #56	@ 0x38
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
	...

0800b86c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b08c      	sub	sp, #48	@ 0x30
 800b870:	af00      	add	r7, sp, #0
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	60b9      	str	r1, [r7, #8]
 800b876:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b878:	2300      	movs	r3, #0
 800b87a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b882:	2b00      	cmp	r3, #0
 800b884:	d10d      	bne.n	800b8a2 <xQueueReceive+0x36>
	__asm volatile
 800b886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b88a:	b672      	cpsid	i
 800b88c:	f383 8811 	msr	BASEPRI, r3
 800b890:	f3bf 8f6f 	isb	sy
 800b894:	f3bf 8f4f 	dsb	sy
 800b898:	b662      	cpsie	i
 800b89a:	623b      	str	r3, [r7, #32]
}
 800b89c:	bf00      	nop
 800b89e:	bf00      	nop
 800b8a0:	e7fd      	b.n	800b89e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d103      	bne.n	800b8b0 <xQueueReceive+0x44>
 800b8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d101      	bne.n	800b8b4 <xQueueReceive+0x48>
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e000      	b.n	800b8b6 <xQueueReceive+0x4a>
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10d      	bne.n	800b8d6 <xQueueReceive+0x6a>
	__asm volatile
 800b8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8be:	b672      	cpsid	i
 800b8c0:	f383 8811 	msr	BASEPRI, r3
 800b8c4:	f3bf 8f6f 	isb	sy
 800b8c8:	f3bf 8f4f 	dsb	sy
 800b8cc:	b662      	cpsie	i
 800b8ce:	61fb      	str	r3, [r7, #28]
}
 800b8d0:	bf00      	nop
 800b8d2:	bf00      	nop
 800b8d4:	e7fd      	b.n	800b8d2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b8d6:	f001 fa51 	bl	800cd7c <xTaskGetSchedulerState>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d102      	bne.n	800b8e6 <xQueueReceive+0x7a>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d101      	bne.n	800b8ea <xQueueReceive+0x7e>
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	e000      	b.n	800b8ec <xQueueReceive+0x80>
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d10d      	bne.n	800b90c <xQueueReceive+0xa0>
	__asm volatile
 800b8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f4:	b672      	cpsid	i
 800b8f6:	f383 8811 	msr	BASEPRI, r3
 800b8fa:	f3bf 8f6f 	isb	sy
 800b8fe:	f3bf 8f4f 	dsb	sy
 800b902:	b662      	cpsie	i
 800b904:	61bb      	str	r3, [r7, #24]
}
 800b906:	bf00      	nop
 800b908:	bf00      	nop
 800b90a:	e7fd      	b.n	800b908 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b90c:	f001 fd86 	bl	800d41c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b914:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d01f      	beq.n	800b95c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b91c:	68b9      	ldr	r1, [r7, #8]
 800b91e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b920:	f000 faae 	bl	800be80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b926:	1e5a      	subs	r2, r3, #1
 800b928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b92a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b92e:	691b      	ldr	r3, [r3, #16]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d00f      	beq.n	800b954 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b936:	3310      	adds	r3, #16
 800b938:	4618      	mov	r0, r3
 800b93a:	f001 f851 	bl	800c9e0 <xTaskRemoveFromEventList>
 800b93e:	4603      	mov	r3, r0
 800b940:	2b00      	cmp	r3, #0
 800b942:	d007      	beq.n	800b954 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b944:	4b3c      	ldr	r3, [pc, #240]	@ (800ba38 <xQueueReceive+0x1cc>)
 800b946:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b94a:	601a      	str	r2, [r3, #0]
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b954:	f001 fd98 	bl	800d488 <vPortExitCritical>
				return pdPASS;
 800b958:	2301      	movs	r3, #1
 800b95a:	e069      	b.n	800ba30 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d103      	bne.n	800b96a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b962:	f001 fd91 	bl	800d488 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b966:	2300      	movs	r3, #0
 800b968:	e062      	b.n	800ba30 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b96a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d106      	bne.n	800b97e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b970:	f107 0310 	add.w	r3, r7, #16
 800b974:	4618      	mov	r0, r3
 800b976:	f001 f899 	bl	800caac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b97a:	2301      	movs	r3, #1
 800b97c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b97e:	f001 fd83 	bl	800d488 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b982:	f000 fe13 	bl	800c5ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b986:	f001 fd49 	bl	800d41c <vPortEnterCritical>
 800b98a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b98c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b990:	b25b      	sxtb	r3, r3
 800b992:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b996:	d103      	bne.n	800b9a0 <xQueueReceive+0x134>
 800b998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b99a:	2200      	movs	r2, #0
 800b99c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b9a6:	b25b      	sxtb	r3, r3
 800b9a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b9ac:	d103      	bne.n	800b9b6 <xQueueReceive+0x14a>
 800b9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b9b6:	f001 fd67 	bl	800d488 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b9ba:	1d3a      	adds	r2, r7, #4
 800b9bc:	f107 0310 	add.w	r3, r7, #16
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f001 f888 	bl	800cad8 <xTaskCheckForTimeOut>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d123      	bne.n	800ba16 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b9ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9d0:	f000 face 	bl	800bf70 <prvIsQueueEmpty>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d017      	beq.n	800ba0a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b9da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9dc:	3324      	adds	r3, #36	@ 0x24
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	4611      	mov	r1, r2
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f000 ffd4 	bl	800c990 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b9e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9ea:	f000 fa6f 	bl	800becc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b9ee:	f000 fdeb 	bl	800c5c8 <xTaskResumeAll>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d189      	bne.n	800b90c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800b9f8:	4b0f      	ldr	r3, [pc, #60]	@ (800ba38 <xQueueReceive+0x1cc>)
 800b9fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9fe:	601a      	str	r2, [r3, #0]
 800ba00:	f3bf 8f4f 	dsb	sy
 800ba04:	f3bf 8f6f 	isb	sy
 800ba08:	e780      	b.n	800b90c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ba0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba0c:	f000 fa5e 	bl	800becc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba10:	f000 fdda 	bl	800c5c8 <xTaskResumeAll>
 800ba14:	e77a      	b.n	800b90c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ba16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba18:	f000 fa58 	bl	800becc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba1c:	f000 fdd4 	bl	800c5c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ba20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba22:	f000 faa5 	bl	800bf70 <prvIsQueueEmpty>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	f43f af6f 	beq.w	800b90c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ba2e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3730      	adds	r7, #48	@ 0x30
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	e000ed04 	.word	0xe000ed04

0800ba3c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b08e      	sub	sp, #56	@ 0x38
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ba46:	2300      	movs	r3, #0
 800ba48:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ba52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d10d      	bne.n	800ba74 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800ba58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba5c:	b672      	cpsid	i
 800ba5e:	f383 8811 	msr	BASEPRI, r3
 800ba62:	f3bf 8f6f 	isb	sy
 800ba66:	f3bf 8f4f 	dsb	sy
 800ba6a:	b662      	cpsie	i
 800ba6c:	623b      	str	r3, [r7, #32]
}
 800ba6e:	bf00      	nop
 800ba70:	bf00      	nop
 800ba72:	e7fd      	b.n	800ba70 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ba74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d00d      	beq.n	800ba98 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800ba7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba80:	b672      	cpsid	i
 800ba82:	f383 8811 	msr	BASEPRI, r3
 800ba86:	f3bf 8f6f 	isb	sy
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	b662      	cpsie	i
 800ba90:	61fb      	str	r3, [r7, #28]
}
 800ba92:	bf00      	nop
 800ba94:	bf00      	nop
 800ba96:	e7fd      	b.n	800ba94 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba98:	f001 f970 	bl	800cd7c <xTaskGetSchedulerState>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d102      	bne.n	800baa8 <xQueueSemaphoreTake+0x6c>
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d101      	bne.n	800baac <xQueueSemaphoreTake+0x70>
 800baa8:	2301      	movs	r3, #1
 800baaa:	e000      	b.n	800baae <xQueueSemaphoreTake+0x72>
 800baac:	2300      	movs	r3, #0
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d10d      	bne.n	800bace <xQueueSemaphoreTake+0x92>
	__asm volatile
 800bab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bab6:	b672      	cpsid	i
 800bab8:	f383 8811 	msr	BASEPRI, r3
 800babc:	f3bf 8f6f 	isb	sy
 800bac0:	f3bf 8f4f 	dsb	sy
 800bac4:	b662      	cpsie	i
 800bac6:	61bb      	str	r3, [r7, #24]
}
 800bac8:	bf00      	nop
 800baca:	bf00      	nop
 800bacc:	e7fd      	b.n	800baca <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bace:	f001 fca5 	bl	800d41c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bad6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bada:	2b00      	cmp	r3, #0
 800badc:	d024      	beq.n	800bb28 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae0:	1e5a      	subs	r2, r3, #1
 800bae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bae4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d104      	bne.n	800baf8 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800baee:	f001 fb0f 	bl	800d110 <pvTaskIncrementMutexHeldCount>
 800baf2:	4602      	mov	r2, r0
 800baf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baf6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800baf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bafa:	691b      	ldr	r3, [r3, #16]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d00f      	beq.n	800bb20 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb02:	3310      	adds	r3, #16
 800bb04:	4618      	mov	r0, r3
 800bb06:	f000 ff6b 	bl	800c9e0 <xTaskRemoveFromEventList>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d007      	beq.n	800bb20 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bb10:	4b55      	ldr	r3, [pc, #340]	@ (800bc68 <xQueueSemaphoreTake+0x22c>)
 800bb12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb16:	601a      	str	r2, [r3, #0]
 800bb18:	f3bf 8f4f 	dsb	sy
 800bb1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bb20:	f001 fcb2 	bl	800d488 <vPortExitCritical>
				return pdPASS;
 800bb24:	2301      	movs	r3, #1
 800bb26:	e09a      	b.n	800bc5e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d114      	bne.n	800bb58 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bb2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d00d      	beq.n	800bb50 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800bb34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb38:	b672      	cpsid	i
 800bb3a:	f383 8811 	msr	BASEPRI, r3
 800bb3e:	f3bf 8f6f 	isb	sy
 800bb42:	f3bf 8f4f 	dsb	sy
 800bb46:	b662      	cpsie	i
 800bb48:	617b      	str	r3, [r7, #20]
}
 800bb4a:	bf00      	nop
 800bb4c:	bf00      	nop
 800bb4e:	e7fd      	b.n	800bb4c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bb50:	f001 fc9a 	bl	800d488 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bb54:	2300      	movs	r3, #0
 800bb56:	e082      	b.n	800bc5e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d106      	bne.n	800bb6c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb5e:	f107 030c 	add.w	r3, r7, #12
 800bb62:	4618      	mov	r0, r3
 800bb64:	f000 ffa2 	bl	800caac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb6c:	f001 fc8c 	bl	800d488 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb70:	f000 fd1c 	bl	800c5ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb74:	f001 fc52 	bl	800d41c <vPortEnterCritical>
 800bb78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bb7e:	b25b      	sxtb	r3, r3
 800bb80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb84:	d103      	bne.n	800bb8e <xQueueSemaphoreTake+0x152>
 800bb86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb88:	2200      	movs	r2, #0
 800bb8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bb94:	b25b      	sxtb	r3, r3
 800bb96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb9a:	d103      	bne.n	800bba4 <xQueueSemaphoreTake+0x168>
 800bb9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bba4:	f001 fc70 	bl	800d488 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bba8:	463a      	mov	r2, r7
 800bbaa:	f107 030c 	add.w	r3, r7, #12
 800bbae:	4611      	mov	r1, r2
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f000 ff91 	bl	800cad8 <xTaskCheckForTimeOut>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d132      	bne.n	800bc22 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bbbe:	f000 f9d7 	bl	800bf70 <prvIsQueueEmpty>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d026      	beq.n	800bc16 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bbc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d109      	bne.n	800bbe4 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800bbd0:	f001 fc24 	bl	800d41c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bbd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f001 f8ed 	bl	800cdb8 <xTaskPriorityInherit>
 800bbde:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800bbe0:	f001 fc52 	bl	800d488 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bbe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbe6:	3324      	adds	r3, #36	@ 0x24
 800bbe8:	683a      	ldr	r2, [r7, #0]
 800bbea:	4611      	mov	r1, r2
 800bbec:	4618      	mov	r0, r3
 800bbee:	f000 fecf 	bl	800c990 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bbf2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bbf4:	f000 f96a 	bl	800becc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bbf8:	f000 fce6 	bl	800c5c8 <xTaskResumeAll>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	f47f af65 	bne.w	800bace <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800bc04:	4b18      	ldr	r3, [pc, #96]	@ (800bc68 <xQueueSemaphoreTake+0x22c>)
 800bc06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc0a:	601a      	str	r2, [r3, #0]
 800bc0c:	f3bf 8f4f 	dsb	sy
 800bc10:	f3bf 8f6f 	isb	sy
 800bc14:	e75b      	b.n	800bace <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bc16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bc18:	f000 f958 	bl	800becc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bc1c:	f000 fcd4 	bl	800c5c8 <xTaskResumeAll>
 800bc20:	e755      	b.n	800bace <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bc22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bc24:	f000 f952 	bl	800becc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bc28:	f000 fcce 	bl	800c5c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bc2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bc2e:	f000 f99f 	bl	800bf70 <prvIsQueueEmpty>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	f43f af4a 	beq.w	800bace <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bc3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d00d      	beq.n	800bc5c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800bc40:	f001 fbec 	bl	800d41c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bc44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bc46:	f000 f899 	bl	800bd7c <prvGetDisinheritPriorityAfterTimeout>
 800bc4a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bc4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc4e:	689b      	ldr	r3, [r3, #8]
 800bc50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bc52:	4618      	mov	r0, r3
 800bc54:	f001 f9bc 	bl	800cfd0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bc58:	f001 fc16 	bl	800d488 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bc5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3738      	adds	r7, #56	@ 0x38
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	e000ed04 	.word	0xe000ed04

0800bc6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b08e      	sub	sp, #56	@ 0x38
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bc7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10d      	bne.n	800bc9e <xQueueReceiveFromISR+0x32>
	__asm volatile
 800bc82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc86:	b672      	cpsid	i
 800bc88:	f383 8811 	msr	BASEPRI, r3
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	b662      	cpsie	i
 800bc96:	623b      	str	r3, [r7, #32]
}
 800bc98:	bf00      	nop
 800bc9a:	bf00      	nop
 800bc9c:	e7fd      	b.n	800bc9a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d103      	bne.n	800bcac <xQueueReceiveFromISR+0x40>
 800bca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d101      	bne.n	800bcb0 <xQueueReceiveFromISR+0x44>
 800bcac:	2301      	movs	r3, #1
 800bcae:	e000      	b.n	800bcb2 <xQueueReceiveFromISR+0x46>
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d10d      	bne.n	800bcd2 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800bcb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcba:	b672      	cpsid	i
 800bcbc:	f383 8811 	msr	BASEPRI, r3
 800bcc0:	f3bf 8f6f 	isb	sy
 800bcc4:	f3bf 8f4f 	dsb	sy
 800bcc8:	b662      	cpsie	i
 800bcca:	61fb      	str	r3, [r7, #28]
}
 800bccc:	bf00      	nop
 800bcce:	bf00      	nop
 800bcd0:	e7fd      	b.n	800bcce <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bcd2:	f001 fc8b 	bl	800d5ec <vPortValidateInterruptPriority>
	__asm volatile
 800bcd6:	f3ef 8211 	mrs	r2, BASEPRI
 800bcda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcde:	b672      	cpsid	i
 800bce0:	f383 8811 	msr	BASEPRI, r3
 800bce4:	f3bf 8f6f 	isb	sy
 800bce8:	f3bf 8f4f 	dsb	sy
 800bcec:	b662      	cpsie	i
 800bcee:	61ba      	str	r2, [r7, #24]
 800bcf0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bcf2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bcf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bcf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcfa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bcfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d02f      	beq.n	800bd62 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bd08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bd0c:	68b9      	ldr	r1, [r7, #8]
 800bd0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bd10:	f000 f8b6 	bl	800be80 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd16:	1e5a      	subs	r2, r3, #1
 800bd18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd1a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bd1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bd20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd24:	d112      	bne.n	800bd4c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd28:	691b      	ldr	r3, [r3, #16]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d016      	beq.n	800bd5c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd30:	3310      	adds	r3, #16
 800bd32:	4618      	mov	r0, r3
 800bd34:	f000 fe54 	bl	800c9e0 <xTaskRemoveFromEventList>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d00e      	beq.n	800bd5c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d00b      	beq.n	800bd5c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2201      	movs	r2, #1
 800bd48:	601a      	str	r2, [r3, #0]
 800bd4a:	e007      	b.n	800bd5c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bd4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bd50:	3301      	adds	r3, #1
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	b25a      	sxtb	r2, r3
 800bd56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd60:	e001      	b.n	800bd66 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800bd62:	2300      	movs	r3, #0
 800bd64:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd68:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	f383 8811 	msr	BASEPRI, r3
}
 800bd70:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3738      	adds	r7, #56	@ 0x38
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b085      	sub	sp, #20
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d006      	beq.n	800bd9a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f1c3 0307 	rsb	r3, r3, #7
 800bd96:	60fb      	str	r3, [r7, #12]
 800bd98:	e001      	b.n	800bd9e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
	}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3714      	adds	r7, #20
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b086      	sub	sp, #24
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	60b9      	str	r1, [r7, #8]
 800bdb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdc0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d10d      	bne.n	800bde6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d14d      	bne.n	800be6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f001 f86e 	bl	800ceb8 <xTaskPriorityDisinherit>
 800bddc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2200      	movs	r2, #0
 800bde2:	609a      	str	r2, [r3, #8]
 800bde4:	e043      	b.n	800be6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d119      	bne.n	800be20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	6858      	ldr	r0, [r3, #4]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	68b9      	ldr	r1, [r7, #8]
 800bdf8:	f015 fdc5 	bl	8021986 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	685a      	ldr	r2, [r3, #4]
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be04:	441a      	add	r2, r3
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	685a      	ldr	r2, [r3, #4]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	429a      	cmp	r2, r3
 800be14:	d32b      	bcc.n	800be6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	605a      	str	r2, [r3, #4]
 800be1e:	e026      	b.n	800be6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	68d8      	ldr	r0, [r3, #12]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be28:	461a      	mov	r2, r3
 800be2a:	68b9      	ldr	r1, [r7, #8]
 800be2c:	f015 fdab 	bl	8021986 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	68da      	ldr	r2, [r3, #12]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be38:	425b      	negs	r3, r3
 800be3a:	441a      	add	r2, r3
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	68da      	ldr	r2, [r3, #12]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d207      	bcs.n	800be5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	689a      	ldr	r2, [r3, #8]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be54:	425b      	negs	r3, r3
 800be56:	441a      	add	r2, r3
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2b02      	cmp	r3, #2
 800be60:	d105      	bne.n	800be6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d002      	beq.n	800be6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	3b01      	subs	r3, #1
 800be6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	1c5a      	adds	r2, r3, #1
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800be76:	697b      	ldr	r3, [r7, #20]
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3718      	adds	r7, #24
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d018      	beq.n	800bec4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	68da      	ldr	r2, [r3, #12]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be9a:	441a      	add	r2, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	68da      	ldr	r2, [r3, #12]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	689b      	ldr	r3, [r3, #8]
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d303      	bcc.n	800beb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	68d9      	ldr	r1, [r3, #12]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bebc:	461a      	mov	r2, r3
 800bebe:	6838      	ldr	r0, [r7, #0]
 800bec0:	f015 fd61 	bl	8021986 <memcpy>
	}
}
 800bec4:	bf00      	nop
 800bec6:	3708      	adds	r7, #8
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bed4:	f001 faa2 	bl	800d41c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bede:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bee0:	e011      	b.n	800bf06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d012      	beq.n	800bf10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	3324      	adds	r3, #36	@ 0x24
 800beee:	4618      	mov	r0, r3
 800bef0:	f000 fd76 	bl	800c9e0 <xTaskRemoveFromEventList>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d001      	beq.n	800befe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800befa:	f000 fe55 	bl	800cba8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800befe:	7bfb      	ldrb	r3, [r7, #15]
 800bf00:	3b01      	subs	r3, #1
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	dce9      	bgt.n	800bee2 <prvUnlockQueue+0x16>
 800bf0e:	e000      	b.n	800bf12 <prvUnlockQueue+0x46>
					break;
 800bf10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	22ff      	movs	r2, #255	@ 0xff
 800bf16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bf1a:	f001 fab5 	bl	800d488 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bf1e:	f001 fa7d 	bl	800d41c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bf28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bf2a:	e011      	b.n	800bf50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	691b      	ldr	r3, [r3, #16]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d012      	beq.n	800bf5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	3310      	adds	r3, #16
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f000 fd51 	bl	800c9e0 <xTaskRemoveFromEventList>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d001      	beq.n	800bf48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bf44:	f000 fe30 	bl	800cba8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bf48:	7bbb      	ldrb	r3, [r7, #14]
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bf50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	dce9      	bgt.n	800bf2c <prvUnlockQueue+0x60>
 800bf58:	e000      	b.n	800bf5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bf5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	22ff      	movs	r2, #255	@ 0xff
 800bf60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bf64:	f001 fa90 	bl	800d488 <vPortExitCritical>
}
 800bf68:	bf00      	nop
 800bf6a:	3710      	adds	r7, #16
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bf78:	f001 fa50 	bl	800d41c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d102      	bne.n	800bf8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bf84:	2301      	movs	r3, #1
 800bf86:	60fb      	str	r3, [r7, #12]
 800bf88:	e001      	b.n	800bf8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bf8e:	f001 fa7b 	bl	800d488 <vPortExitCritical>

	return xReturn;
 800bf92:	68fb      	ldr	r3, [r7, #12]
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3710      	adds	r7, #16
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	bd80      	pop	{r7, pc}

0800bf9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b084      	sub	sp, #16
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bfa4:	f001 fa3a 	bl	800d41c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d102      	bne.n	800bfba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	60fb      	str	r3, [r7, #12]
 800bfb8:	e001      	b.n	800bfbe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bfbe:	f001 fa63 	bl	800d488 <vPortExitCritical>

	return xReturn;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3710      	adds	r7, #16
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b08e      	sub	sp, #56	@ 0x38
 800bfd0:	af04      	add	r7, sp, #16
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	607a      	str	r2, [r7, #4]
 800bfd8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bfda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d10d      	bne.n	800bffc <xTaskCreateStatic+0x30>
	__asm volatile
 800bfe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfe4:	b672      	cpsid	i
 800bfe6:	f383 8811 	msr	BASEPRI, r3
 800bfea:	f3bf 8f6f 	isb	sy
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	b662      	cpsie	i
 800bff4:	623b      	str	r3, [r7, #32]
}
 800bff6:	bf00      	nop
 800bff8:	bf00      	nop
 800bffa:	e7fd      	b.n	800bff8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800bffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d10d      	bne.n	800c01e <xTaskCreateStatic+0x52>
	__asm volatile
 800c002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c006:	b672      	cpsid	i
 800c008:	f383 8811 	msr	BASEPRI, r3
 800c00c:	f3bf 8f6f 	isb	sy
 800c010:	f3bf 8f4f 	dsb	sy
 800c014:	b662      	cpsie	i
 800c016:	61fb      	str	r3, [r7, #28]
}
 800c018:	bf00      	nop
 800c01a:	bf00      	nop
 800c01c:	e7fd      	b.n	800c01a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c01e:	23a0      	movs	r3, #160	@ 0xa0
 800c020:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	2ba0      	cmp	r3, #160	@ 0xa0
 800c026:	d00d      	beq.n	800c044 <xTaskCreateStatic+0x78>
	__asm volatile
 800c028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c02c:	b672      	cpsid	i
 800c02e:	f383 8811 	msr	BASEPRI, r3
 800c032:	f3bf 8f6f 	isb	sy
 800c036:	f3bf 8f4f 	dsb	sy
 800c03a:	b662      	cpsie	i
 800c03c:	61bb      	str	r3, [r7, #24]
}
 800c03e:	bf00      	nop
 800c040:	bf00      	nop
 800c042:	e7fd      	b.n	800c040 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c044:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d01e      	beq.n	800c08a <xTaskCreateStatic+0xbe>
 800c04c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d01b      	beq.n	800c08a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c054:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c058:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c05a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c05e:	2202      	movs	r2, #2
 800c060:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c064:	2300      	movs	r3, #0
 800c066:	9303      	str	r3, [sp, #12]
 800c068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c06a:	9302      	str	r3, [sp, #8]
 800c06c:	f107 0314 	add.w	r3, r7, #20
 800c070:	9301      	str	r3, [sp, #4]
 800c072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c074:	9300      	str	r3, [sp, #0]
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	68b9      	ldr	r1, [r7, #8]
 800c07c:	68f8      	ldr	r0, [r7, #12]
 800c07e:	f000 f851 	bl	800c124 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c082:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c084:	f000 f8f0 	bl	800c268 <prvAddNewTaskToReadyList>
 800c088:	e001      	b.n	800c08e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800c08a:	2300      	movs	r3, #0
 800c08c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c08e:	697b      	ldr	r3, [r7, #20]
	}
 800c090:	4618      	mov	r0, r3
 800c092:	3728      	adds	r7, #40	@ 0x28
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b08c      	sub	sp, #48	@ 0x30
 800c09c:	af04      	add	r7, sp, #16
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	60b9      	str	r1, [r7, #8]
 800c0a2:	603b      	str	r3, [r7, #0]
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c0a8:	88fb      	ldrh	r3, [r7, #6]
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f001 fae3 	bl	800d678 <pvPortMalloc>
 800c0b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00e      	beq.n	800c0d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c0ba:	20a0      	movs	r0, #160	@ 0xa0
 800c0bc:	f001 fadc 	bl	800d678 <pvPortMalloc>
 800c0c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c0c2:	69fb      	ldr	r3, [r7, #28]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d003      	beq.n	800c0d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	697a      	ldr	r2, [r7, #20]
 800c0cc:	631a      	str	r2, [r3, #48]	@ 0x30
 800c0ce:	e005      	b.n	800c0dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c0d0:	6978      	ldr	r0, [r7, #20]
 800c0d2:	f001 fb9f 	bl	800d814 <vPortFree>
 800c0d6:	e001      	b.n	800c0dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c0dc:	69fb      	ldr	r3, [r7, #28]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d017      	beq.n	800c112 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c0e2:	69fb      	ldr	r3, [r7, #28]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c0ea:	88fa      	ldrh	r2, [r7, #6]
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	9303      	str	r3, [sp, #12]
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	9302      	str	r3, [sp, #8]
 800c0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0f6:	9301      	str	r3, [sp, #4]
 800c0f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0fa:	9300      	str	r3, [sp, #0]
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	68b9      	ldr	r1, [r7, #8]
 800c100:	68f8      	ldr	r0, [r7, #12]
 800c102:	f000 f80f 	bl	800c124 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c106:	69f8      	ldr	r0, [r7, #28]
 800c108:	f000 f8ae 	bl	800c268 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c10c:	2301      	movs	r3, #1
 800c10e:	61bb      	str	r3, [r7, #24]
 800c110:	e002      	b.n	800c118 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c112:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c116:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c118:	69bb      	ldr	r3, [r7, #24]
	}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3720      	adds	r7, #32
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
	...

0800c124 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b088      	sub	sp, #32
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	607a      	str	r2, [r7, #4]
 800c130:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c134:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c136:	6879      	ldr	r1, [r7, #4]
 800c138:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c13c:	440b      	add	r3, r1
 800c13e:	009b      	lsls	r3, r3, #2
 800c140:	4413      	add	r3, r2
 800c142:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	f023 0307 	bic.w	r3, r3, #7
 800c14a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	f003 0307 	and.w	r3, r3, #7
 800c152:	2b00      	cmp	r3, #0
 800c154:	d00d      	beq.n	800c172 <prvInitialiseNewTask+0x4e>
	__asm volatile
 800c156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c15a:	b672      	cpsid	i
 800c15c:	f383 8811 	msr	BASEPRI, r3
 800c160:	f3bf 8f6f 	isb	sy
 800c164:	f3bf 8f4f 	dsb	sy
 800c168:	b662      	cpsie	i
 800c16a:	617b      	str	r3, [r7, #20]
}
 800c16c:	bf00      	nop
 800c16e:	bf00      	nop
 800c170:	e7fd      	b.n	800c16e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d01f      	beq.n	800c1b8 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c178:	2300      	movs	r3, #0
 800c17a:	61fb      	str	r3, [r7, #28]
 800c17c:	e012      	b.n	800c1a4 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c17e:	68ba      	ldr	r2, [r7, #8]
 800c180:	69fb      	ldr	r3, [r7, #28]
 800c182:	4413      	add	r3, r2
 800c184:	7819      	ldrb	r1, [r3, #0]
 800c186:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c188:	69fb      	ldr	r3, [r7, #28]
 800c18a:	4413      	add	r3, r2
 800c18c:	3334      	adds	r3, #52	@ 0x34
 800c18e:	460a      	mov	r2, r1
 800c190:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	69fb      	ldr	r3, [r7, #28]
 800c196:	4413      	add	r3, r2
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d006      	beq.n	800c1ac <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	61fb      	str	r3, [r7, #28]
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	2b0f      	cmp	r3, #15
 800c1a8:	d9e9      	bls.n	800c17e <prvInitialiseNewTask+0x5a>
 800c1aa:	e000      	b.n	800c1ae <prvInitialiseNewTask+0x8a>
			{
				break;
 800c1ac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c1b6:	e003      	b.n	800c1c0 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c1c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c2:	2b06      	cmp	r3, #6
 800c1c4:	d901      	bls.n	800c1ca <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c1c6:	2306      	movs	r3, #6
 800c1c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1d4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d8:	2200      	movs	r2, #0
 800c1da:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1de:	3304      	adds	r3, #4
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7fe fec7 	bl	800af74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1e8:	3318      	adds	r3, #24
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7fe fec2 	bl	800af74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c1f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1f8:	f1c3 0207 	rsb	r2, r3, #7
 800c1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c202:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c204:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c208:	2200      	movs	r2, #0
 800c20a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c210:	2200      	movs	r2, #0
 800c212:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c218:	334c      	adds	r3, #76	@ 0x4c
 800c21a:	224c      	movs	r2, #76	@ 0x4c
 800c21c:	2100      	movs	r1, #0
 800c21e:	4618      	mov	r0, r3
 800c220:	f015 fa98 	bl	8021754 <memset>
 800c224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c226:	4a0d      	ldr	r2, [pc, #52]	@ (800c25c <prvInitialiseNewTask+0x138>)
 800c228:	651a      	str	r2, [r3, #80]	@ 0x50
 800c22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c22c:	4a0c      	ldr	r2, [pc, #48]	@ (800c260 <prvInitialiseNewTask+0x13c>)
 800c22e:	655a      	str	r2, [r3, #84]	@ 0x54
 800c230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c232:	4a0c      	ldr	r2, [pc, #48]	@ (800c264 <prvInitialiseNewTask+0x140>)
 800c234:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c236:	683a      	ldr	r2, [r7, #0]
 800c238:	68f9      	ldr	r1, [r7, #12]
 800c23a:	69b8      	ldr	r0, [r7, #24]
 800c23c:	f000 ffe2 	bl	800d204 <pxPortInitialiseStack>
 800c240:	4602      	mov	r2, r0
 800c242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c244:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d002      	beq.n	800c252 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c24e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c250:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c252:	bf00      	nop
 800c254:	3720      	adds	r7, #32
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	20006750 	.word	0x20006750
 800c260:	200067b8 	.word	0x200067b8
 800c264:	20006820 	.word	0x20006820

0800c268 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c270:	f001 f8d4 	bl	800d41c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c274:	4b2a      	ldr	r3, [pc, #168]	@ (800c320 <prvAddNewTaskToReadyList+0xb8>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	3301      	adds	r3, #1
 800c27a:	4a29      	ldr	r2, [pc, #164]	@ (800c320 <prvAddNewTaskToReadyList+0xb8>)
 800c27c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c27e:	4b29      	ldr	r3, [pc, #164]	@ (800c324 <prvAddNewTaskToReadyList+0xbc>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d109      	bne.n	800c29a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c286:	4a27      	ldr	r2, [pc, #156]	@ (800c324 <prvAddNewTaskToReadyList+0xbc>)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c28c:	4b24      	ldr	r3, [pc, #144]	@ (800c320 <prvAddNewTaskToReadyList+0xb8>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2b01      	cmp	r3, #1
 800c292:	d110      	bne.n	800c2b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c294:	f000 fcac 	bl	800cbf0 <prvInitialiseTaskLists>
 800c298:	e00d      	b.n	800c2b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c29a:	4b23      	ldr	r3, [pc, #140]	@ (800c328 <prvAddNewTaskToReadyList+0xc0>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d109      	bne.n	800c2b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c2a2:	4b20      	ldr	r3, [pc, #128]	@ (800c324 <prvAddNewTaskToReadyList+0xbc>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d802      	bhi.n	800c2b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c2b0:	4a1c      	ldr	r2, [pc, #112]	@ (800c324 <prvAddNewTaskToReadyList+0xbc>)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c2b6:	4b1d      	ldr	r3, [pc, #116]	@ (800c32c <prvAddNewTaskToReadyList+0xc4>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	4a1b      	ldr	r2, [pc, #108]	@ (800c32c <prvAddNewTaskToReadyList+0xc4>)
 800c2be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2c4:	2201      	movs	r2, #1
 800c2c6:	409a      	lsls	r2, r3
 800c2c8:	4b19      	ldr	r3, [pc, #100]	@ (800c330 <prvAddNewTaskToReadyList+0xc8>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	4a18      	ldr	r2, [pc, #96]	@ (800c330 <prvAddNewTaskToReadyList+0xc8>)
 800c2d0:	6013      	str	r3, [r2, #0]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	4413      	add	r3, r2
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	4a15      	ldr	r2, [pc, #84]	@ (800c334 <prvAddNewTaskToReadyList+0xcc>)
 800c2e0:	441a      	add	r2, r3
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	f7fe fe50 	bl	800af8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c2ee:	f001 f8cb 	bl	800d488 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c2f2:	4b0d      	ldr	r3, [pc, #52]	@ (800c328 <prvAddNewTaskToReadyList+0xc0>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d00e      	beq.n	800c318 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c2fa:	4b0a      	ldr	r3, [pc, #40]	@ (800c324 <prvAddNewTaskToReadyList+0xbc>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c304:	429a      	cmp	r2, r3
 800c306:	d207      	bcs.n	800c318 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c308:	4b0b      	ldr	r3, [pc, #44]	@ (800c338 <prvAddNewTaskToReadyList+0xd0>)
 800c30a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c30e:	601a      	str	r2, [r3, #0]
 800c310:	f3bf 8f4f 	dsb	sy
 800c314:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c318:	bf00      	nop
 800c31a:	3708      	adds	r7, #8
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	20000afc 	.word	0x20000afc
 800c324:	200009fc 	.word	0x200009fc
 800c328:	20000b08 	.word	0x20000b08
 800c32c:	20000b18 	.word	0x20000b18
 800c330:	20000b04 	.word	0x20000b04
 800c334:	20000a00 	.word	0x20000a00
 800c338:	e000ed04 	.word	0xe000ed04

0800c33c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c344:	f001 f86a 	bl	800d41c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d102      	bne.n	800c354 <vTaskDelete+0x18>
 800c34e:	4b3a      	ldr	r3, [pc, #232]	@ (800c438 <vTaskDelete+0xfc>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	e000      	b.n	800c356 <vTaskDelete+0x1a>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	3304      	adds	r3, #4
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7fe fe73 	bl	800b048 <uxListRemove>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d115      	bne.n	800c394 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c36c:	4933      	ldr	r1, [pc, #204]	@ (800c43c <vTaskDelete+0x100>)
 800c36e:	4613      	mov	r3, r2
 800c370:	009b      	lsls	r3, r3, #2
 800c372:	4413      	add	r3, r2
 800c374:	009b      	lsls	r3, r3, #2
 800c376:	440b      	add	r3, r1
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d10a      	bne.n	800c394 <vTaskDelete+0x58>
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c382:	2201      	movs	r2, #1
 800c384:	fa02 f303 	lsl.w	r3, r2, r3
 800c388:	43da      	mvns	r2, r3
 800c38a:	4b2d      	ldr	r3, [pc, #180]	@ (800c440 <vTaskDelete+0x104>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4013      	ands	r3, r2
 800c390:	4a2b      	ldr	r2, [pc, #172]	@ (800c440 <vTaskDelete+0x104>)
 800c392:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d004      	beq.n	800c3a6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	3318      	adds	r3, #24
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7fe fe51 	bl	800b048 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c3a6:	4b27      	ldr	r3, [pc, #156]	@ (800c444 <vTaskDelete+0x108>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	4a25      	ldr	r2, [pc, #148]	@ (800c444 <vTaskDelete+0x108>)
 800c3ae:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c3b0:	4b21      	ldr	r3, [pc, #132]	@ (800c438 <vTaskDelete+0xfc>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	68fa      	ldr	r2, [r7, #12]
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d10b      	bne.n	800c3d2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	3304      	adds	r3, #4
 800c3be:	4619      	mov	r1, r3
 800c3c0:	4821      	ldr	r0, [pc, #132]	@ (800c448 <vTaskDelete+0x10c>)
 800c3c2:	f7fe fde4 	bl	800af8e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c3c6:	4b21      	ldr	r3, [pc, #132]	@ (800c44c <vTaskDelete+0x110>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	3301      	adds	r3, #1
 800c3cc:	4a1f      	ldr	r2, [pc, #124]	@ (800c44c <vTaskDelete+0x110>)
 800c3ce:	6013      	str	r3, [r2, #0]
 800c3d0:	e009      	b.n	800c3e6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c3d2:	4b1f      	ldr	r3, [pc, #124]	@ (800c450 <vTaskDelete+0x114>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	4a1d      	ldr	r2, [pc, #116]	@ (800c450 <vTaskDelete+0x114>)
 800c3da:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800c3dc:	68f8      	ldr	r0, [r7, #12]
 800c3de:	f000 fc75 	bl	800cccc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c3e2:	f000 fcab 	bl	800cd3c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800c3e6:	f001 f84f 	bl	800d488 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c3ea:	4b1a      	ldr	r3, [pc, #104]	@ (800c454 <vTaskDelete+0x118>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d01e      	beq.n	800c430 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 800c3f2:	4b11      	ldr	r3, [pc, #68]	@ (800c438 <vTaskDelete+0xfc>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	68fa      	ldr	r2, [r7, #12]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d119      	bne.n	800c430 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c3fc:	4b16      	ldr	r3, [pc, #88]	@ (800c458 <vTaskDelete+0x11c>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d00d      	beq.n	800c420 <vTaskDelete+0xe4>
	__asm volatile
 800c404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c408:	b672      	cpsid	i
 800c40a:	f383 8811 	msr	BASEPRI, r3
 800c40e:	f3bf 8f6f 	isb	sy
 800c412:	f3bf 8f4f 	dsb	sy
 800c416:	b662      	cpsie	i
 800c418:	60bb      	str	r3, [r7, #8]
}
 800c41a:	bf00      	nop
 800c41c:	bf00      	nop
 800c41e:	e7fd      	b.n	800c41c <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800c420:	4b0e      	ldr	r3, [pc, #56]	@ (800c45c <vTaskDelete+0x120>)
 800c422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c426:	601a      	str	r2, [r3, #0]
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c430:	bf00      	nop
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	200009fc 	.word	0x200009fc
 800c43c:	20000a00 	.word	0x20000a00
 800c440:	20000b04 	.word	0x20000b04
 800c444:	20000b18 	.word	0x20000b18
 800c448:	20000ad0 	.word	0x20000ad0
 800c44c:	20000ae4 	.word	0x20000ae4
 800c450:	20000afc 	.word	0x20000afc
 800c454:	20000b08 	.word	0x20000b08
 800c458:	20000b24 	.word	0x20000b24
 800c45c:	e000ed04 	.word	0xe000ed04

0800c460 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c468:	2300      	movs	r3, #0
 800c46a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d01a      	beq.n	800c4a8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c472:	4b15      	ldr	r3, [pc, #84]	@ (800c4c8 <vTaskDelay+0x68>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d00d      	beq.n	800c496 <vTaskDelay+0x36>
	__asm volatile
 800c47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c47e:	b672      	cpsid	i
 800c480:	f383 8811 	msr	BASEPRI, r3
 800c484:	f3bf 8f6f 	isb	sy
 800c488:	f3bf 8f4f 	dsb	sy
 800c48c:	b662      	cpsie	i
 800c48e:	60bb      	str	r3, [r7, #8]
}
 800c490:	bf00      	nop
 800c492:	bf00      	nop
 800c494:	e7fd      	b.n	800c492 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c496:	f000 f889 	bl	800c5ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c49a:	2100      	movs	r1, #0
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 fe4b 	bl	800d138 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c4a2:	f000 f891 	bl	800c5c8 <xTaskResumeAll>
 800c4a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d107      	bne.n	800c4be <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800c4ae:	4b07      	ldr	r3, [pc, #28]	@ (800c4cc <vTaskDelay+0x6c>)
 800c4b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4b4:	601a      	str	r2, [r3, #0]
 800c4b6:	f3bf 8f4f 	dsb	sy
 800c4ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c4be:	bf00      	nop
 800c4c0:	3710      	adds	r7, #16
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	20000b24 	.word	0x20000b24
 800c4cc:	e000ed04 	.word	0xe000ed04

0800c4d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b08a      	sub	sp, #40	@ 0x28
 800c4d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c4de:	463a      	mov	r2, r7
 800c4e0:	1d39      	adds	r1, r7, #4
 800c4e2:	f107 0308 	add.w	r3, r7, #8
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7f4 f8a8 	bl	800063c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c4ec:	6839      	ldr	r1, [r7, #0]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	68ba      	ldr	r2, [r7, #8]
 800c4f2:	9202      	str	r2, [sp, #8]
 800c4f4:	9301      	str	r3, [sp, #4]
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	9300      	str	r3, [sp, #0]
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	460a      	mov	r2, r1
 800c4fe:	4923      	ldr	r1, [pc, #140]	@ (800c58c <vTaskStartScheduler+0xbc>)
 800c500:	4823      	ldr	r0, [pc, #140]	@ (800c590 <vTaskStartScheduler+0xc0>)
 800c502:	f7ff fd63 	bl	800bfcc <xTaskCreateStatic>
 800c506:	4603      	mov	r3, r0
 800c508:	4a22      	ldr	r2, [pc, #136]	@ (800c594 <vTaskStartScheduler+0xc4>)
 800c50a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c50c:	4b21      	ldr	r3, [pc, #132]	@ (800c594 <vTaskStartScheduler+0xc4>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d002      	beq.n	800c51a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c514:	2301      	movs	r3, #1
 800c516:	617b      	str	r3, [r7, #20]
 800c518:	e001      	b.n	800c51e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c51a:	2300      	movs	r3, #0
 800c51c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	2b01      	cmp	r3, #1
 800c522:	d11d      	bne.n	800c560 <vTaskStartScheduler+0x90>
	__asm volatile
 800c524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c528:	b672      	cpsid	i
 800c52a:	f383 8811 	msr	BASEPRI, r3
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	f3bf 8f4f 	dsb	sy
 800c536:	b662      	cpsie	i
 800c538:	613b      	str	r3, [r7, #16]
}
 800c53a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c53c:	4b16      	ldr	r3, [pc, #88]	@ (800c598 <vTaskStartScheduler+0xc8>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	334c      	adds	r3, #76	@ 0x4c
 800c542:	4a16      	ldr	r2, [pc, #88]	@ (800c59c <vTaskStartScheduler+0xcc>)
 800c544:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c546:	4b16      	ldr	r3, [pc, #88]	@ (800c5a0 <vTaskStartScheduler+0xd0>)
 800c548:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c54c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c54e:	4b15      	ldr	r3, [pc, #84]	@ (800c5a4 <vTaskStartScheduler+0xd4>)
 800c550:	2201      	movs	r2, #1
 800c552:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c554:	4b14      	ldr	r3, [pc, #80]	@ (800c5a8 <vTaskStartScheduler+0xd8>)
 800c556:	2200      	movs	r2, #0
 800c558:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c55a:	f000 fee1 	bl	800d320 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c55e:	e011      	b.n	800c584 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c566:	d10d      	bne.n	800c584 <vTaskStartScheduler+0xb4>
	__asm volatile
 800c568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c56c:	b672      	cpsid	i
 800c56e:	f383 8811 	msr	BASEPRI, r3
 800c572:	f3bf 8f6f 	isb	sy
 800c576:	f3bf 8f4f 	dsb	sy
 800c57a:	b662      	cpsie	i
 800c57c:	60fb      	str	r3, [r7, #12]
}
 800c57e:	bf00      	nop
 800c580:	bf00      	nop
 800c582:	e7fd      	b.n	800c580 <vTaskStartScheduler+0xb0>
}
 800c584:	bf00      	nop
 800c586:	3718      	adds	r7, #24
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	08022818 	.word	0x08022818
 800c590:	0800cbc1 	.word	0x0800cbc1
 800c594:	20000b20 	.word	0x20000b20
 800c598:	200009fc 	.word	0x200009fc
 800c59c:	20000148 	.word	0x20000148
 800c5a0:	20000b1c 	.word	0x20000b1c
 800c5a4:	20000b08 	.word	0x20000b08
 800c5a8:	20000b00 	.word	0x20000b00

0800c5ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c5b0:	4b04      	ldr	r3, [pc, #16]	@ (800c5c4 <vTaskSuspendAll+0x18>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	4a03      	ldr	r2, [pc, #12]	@ (800c5c4 <vTaskSuspendAll+0x18>)
 800c5b8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c5ba:	bf00      	nop
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr
 800c5c4:	20000b24 	.word	0x20000b24

0800c5c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c5d6:	4b43      	ldr	r3, [pc, #268]	@ (800c6e4 <xTaskResumeAll+0x11c>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d10d      	bne.n	800c5fa <xTaskResumeAll+0x32>
	__asm volatile
 800c5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e2:	b672      	cpsid	i
 800c5e4:	f383 8811 	msr	BASEPRI, r3
 800c5e8:	f3bf 8f6f 	isb	sy
 800c5ec:	f3bf 8f4f 	dsb	sy
 800c5f0:	b662      	cpsie	i
 800c5f2:	603b      	str	r3, [r7, #0]
}
 800c5f4:	bf00      	nop
 800c5f6:	bf00      	nop
 800c5f8:	e7fd      	b.n	800c5f6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c5fa:	f000 ff0f 	bl	800d41c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c5fe:	4b39      	ldr	r3, [pc, #228]	@ (800c6e4 <xTaskResumeAll+0x11c>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	3b01      	subs	r3, #1
 800c604:	4a37      	ldr	r2, [pc, #220]	@ (800c6e4 <xTaskResumeAll+0x11c>)
 800c606:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c608:	4b36      	ldr	r3, [pc, #216]	@ (800c6e4 <xTaskResumeAll+0x11c>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d161      	bne.n	800c6d4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c610:	4b35      	ldr	r3, [pc, #212]	@ (800c6e8 <xTaskResumeAll+0x120>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d05d      	beq.n	800c6d4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c618:	e02e      	b.n	800c678 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c61a:	4b34      	ldr	r3, [pc, #208]	@ (800c6ec <xTaskResumeAll+0x124>)
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	68db      	ldr	r3, [r3, #12]
 800c620:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	3318      	adds	r3, #24
 800c626:	4618      	mov	r0, r3
 800c628:	f7fe fd0e 	bl	800b048 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	3304      	adds	r3, #4
 800c630:	4618      	mov	r0, r3
 800c632:	f7fe fd09 	bl	800b048 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c63a:	2201      	movs	r2, #1
 800c63c:	409a      	lsls	r2, r3
 800c63e:	4b2c      	ldr	r3, [pc, #176]	@ (800c6f0 <xTaskResumeAll+0x128>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4313      	orrs	r3, r2
 800c644:	4a2a      	ldr	r2, [pc, #168]	@ (800c6f0 <xTaskResumeAll+0x128>)
 800c646:	6013      	str	r3, [r2, #0]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c64c:	4613      	mov	r3, r2
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	4413      	add	r3, r2
 800c652:	009b      	lsls	r3, r3, #2
 800c654:	4a27      	ldr	r2, [pc, #156]	@ (800c6f4 <xTaskResumeAll+0x12c>)
 800c656:	441a      	add	r2, r3
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	3304      	adds	r3, #4
 800c65c:	4619      	mov	r1, r3
 800c65e:	4610      	mov	r0, r2
 800c660:	f7fe fc95 	bl	800af8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c668:	4b23      	ldr	r3, [pc, #140]	@ (800c6f8 <xTaskResumeAll+0x130>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c66e:	429a      	cmp	r2, r3
 800c670:	d302      	bcc.n	800c678 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800c672:	4b22      	ldr	r3, [pc, #136]	@ (800c6fc <xTaskResumeAll+0x134>)
 800c674:	2201      	movs	r2, #1
 800c676:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c678:	4b1c      	ldr	r3, [pc, #112]	@ (800c6ec <xTaskResumeAll+0x124>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d1cc      	bne.n	800c61a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d001      	beq.n	800c68a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c686:	f000 fb59 	bl	800cd3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c68a:	4b1d      	ldr	r3, [pc, #116]	@ (800c700 <xTaskResumeAll+0x138>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d010      	beq.n	800c6b8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c696:	f000 f859 	bl	800c74c <xTaskIncrementTick>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d002      	beq.n	800c6a6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800c6a0:	4b16      	ldr	r3, [pc, #88]	@ (800c6fc <xTaskResumeAll+0x134>)
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	3b01      	subs	r3, #1
 800c6aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d1f1      	bne.n	800c696 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800c6b2:	4b13      	ldr	r3, [pc, #76]	@ (800c700 <xTaskResumeAll+0x138>)
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c6b8:	4b10      	ldr	r3, [pc, #64]	@ (800c6fc <xTaskResumeAll+0x134>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d009      	beq.n	800c6d4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c6c4:	4b0f      	ldr	r3, [pc, #60]	@ (800c704 <xTaskResumeAll+0x13c>)
 800c6c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6ca:	601a      	str	r2, [r3, #0]
 800c6cc:	f3bf 8f4f 	dsb	sy
 800c6d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c6d4:	f000 fed8 	bl	800d488 <vPortExitCritical>

	return xAlreadyYielded;
 800c6d8:	68bb      	ldr	r3, [r7, #8]
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3710      	adds	r7, #16
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	20000b24 	.word	0x20000b24
 800c6e8:	20000afc 	.word	0x20000afc
 800c6ec:	20000abc 	.word	0x20000abc
 800c6f0:	20000b04 	.word	0x20000b04
 800c6f4:	20000a00 	.word	0x20000a00
 800c6f8:	200009fc 	.word	0x200009fc
 800c6fc:	20000b10 	.word	0x20000b10
 800c700:	20000b0c 	.word	0x20000b0c
 800c704:	e000ed04 	.word	0xe000ed04

0800c708 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c708:	b480      	push	{r7}
 800c70a:	b083      	sub	sp, #12
 800c70c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c70e:	4b05      	ldr	r3, [pc, #20]	@ (800c724 <xTaskGetTickCount+0x1c>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c714:	687b      	ldr	r3, [r7, #4]
}
 800c716:	4618      	mov	r0, r3
 800c718:	370c      	adds	r7, #12
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr
 800c722:	bf00      	nop
 800c724:	20000b00 	.word	0x20000b00

0800c728 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c72e:	f000 ff5d 	bl	800d5ec <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c732:	2300      	movs	r3, #0
 800c734:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c736:	4b04      	ldr	r3, [pc, #16]	@ (800c748 <xTaskGetTickCountFromISR+0x20>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c73c:	683b      	ldr	r3, [r7, #0]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3708      	adds	r7, #8
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	20000b00 	.word	0x20000b00

0800c74c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b086      	sub	sp, #24
 800c750:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c752:	2300      	movs	r3, #0
 800c754:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c756:	4b50      	ldr	r3, [pc, #320]	@ (800c898 <xTaskIncrementTick+0x14c>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	f040 808b 	bne.w	800c876 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c760:	4b4e      	ldr	r3, [pc, #312]	@ (800c89c <xTaskIncrementTick+0x150>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	3301      	adds	r3, #1
 800c766:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c768:	4a4c      	ldr	r2, [pc, #304]	@ (800c89c <xTaskIncrementTick+0x150>)
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d123      	bne.n	800c7bc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800c774:	4b4a      	ldr	r3, [pc, #296]	@ (800c8a0 <xTaskIncrementTick+0x154>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00d      	beq.n	800c79a <xTaskIncrementTick+0x4e>
	__asm volatile
 800c77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c782:	b672      	cpsid	i
 800c784:	f383 8811 	msr	BASEPRI, r3
 800c788:	f3bf 8f6f 	isb	sy
 800c78c:	f3bf 8f4f 	dsb	sy
 800c790:	b662      	cpsie	i
 800c792:	603b      	str	r3, [r7, #0]
}
 800c794:	bf00      	nop
 800c796:	bf00      	nop
 800c798:	e7fd      	b.n	800c796 <xTaskIncrementTick+0x4a>
 800c79a:	4b41      	ldr	r3, [pc, #260]	@ (800c8a0 <xTaskIncrementTick+0x154>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	60fb      	str	r3, [r7, #12]
 800c7a0:	4b40      	ldr	r3, [pc, #256]	@ (800c8a4 <xTaskIncrementTick+0x158>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4a3e      	ldr	r2, [pc, #248]	@ (800c8a0 <xTaskIncrementTick+0x154>)
 800c7a6:	6013      	str	r3, [r2, #0]
 800c7a8:	4a3e      	ldr	r2, [pc, #248]	@ (800c8a4 <xTaskIncrementTick+0x158>)
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	6013      	str	r3, [r2, #0]
 800c7ae:	4b3e      	ldr	r3, [pc, #248]	@ (800c8a8 <xTaskIncrementTick+0x15c>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	4a3c      	ldr	r2, [pc, #240]	@ (800c8a8 <xTaskIncrementTick+0x15c>)
 800c7b6:	6013      	str	r3, [r2, #0]
 800c7b8:	f000 fac0 	bl	800cd3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c7bc:	4b3b      	ldr	r3, [pc, #236]	@ (800c8ac <xTaskIncrementTick+0x160>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	693a      	ldr	r2, [r7, #16]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d348      	bcc.n	800c858 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7c6:	4b36      	ldr	r3, [pc, #216]	@ (800c8a0 <xTaskIncrementTick+0x154>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d104      	bne.n	800c7da <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7d0:	4b36      	ldr	r3, [pc, #216]	@ (800c8ac <xTaskIncrementTick+0x160>)
 800c7d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c7d6:	601a      	str	r2, [r3, #0]
					break;
 800c7d8:	e03e      	b.n	800c858 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7da:	4b31      	ldr	r3, [pc, #196]	@ (800c8a0 <xTaskIncrementTick+0x154>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	68db      	ldr	r3, [r3, #12]
 800c7e0:	68db      	ldr	r3, [r3, #12]
 800c7e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c7ea:	693a      	ldr	r2, [r7, #16]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d203      	bcs.n	800c7fa <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c7f2:	4a2e      	ldr	r2, [pc, #184]	@ (800c8ac <xTaskIncrementTick+0x160>)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c7f8:	e02e      	b.n	800c858 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	3304      	adds	r3, #4
 800c7fe:	4618      	mov	r0, r3
 800c800:	f7fe fc22 	bl	800b048 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d004      	beq.n	800c816 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	3318      	adds	r3, #24
 800c810:	4618      	mov	r0, r3
 800c812:	f7fe fc19 	bl	800b048 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c81a:	2201      	movs	r2, #1
 800c81c:	409a      	lsls	r2, r3
 800c81e:	4b24      	ldr	r3, [pc, #144]	@ (800c8b0 <xTaskIncrementTick+0x164>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4313      	orrs	r3, r2
 800c824:	4a22      	ldr	r2, [pc, #136]	@ (800c8b0 <xTaskIncrementTick+0x164>)
 800c826:	6013      	str	r3, [r2, #0]
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c82c:	4613      	mov	r3, r2
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	4413      	add	r3, r2
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	4a1f      	ldr	r2, [pc, #124]	@ (800c8b4 <xTaskIncrementTick+0x168>)
 800c836:	441a      	add	r2, r3
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	3304      	adds	r3, #4
 800c83c:	4619      	mov	r1, r3
 800c83e:	4610      	mov	r0, r2
 800c840:	f7fe fba5 	bl	800af8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c848:	4b1b      	ldr	r3, [pc, #108]	@ (800c8b8 <xTaskIncrementTick+0x16c>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c84e:	429a      	cmp	r2, r3
 800c850:	d3b9      	bcc.n	800c7c6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800c852:	2301      	movs	r3, #1
 800c854:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c856:	e7b6      	b.n	800c7c6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c858:	4b17      	ldr	r3, [pc, #92]	@ (800c8b8 <xTaskIncrementTick+0x16c>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c85e:	4915      	ldr	r1, [pc, #84]	@ (800c8b4 <xTaskIncrementTick+0x168>)
 800c860:	4613      	mov	r3, r2
 800c862:	009b      	lsls	r3, r3, #2
 800c864:	4413      	add	r3, r2
 800c866:	009b      	lsls	r3, r3, #2
 800c868:	440b      	add	r3, r1
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d907      	bls.n	800c880 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800c870:	2301      	movs	r3, #1
 800c872:	617b      	str	r3, [r7, #20]
 800c874:	e004      	b.n	800c880 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c876:	4b11      	ldr	r3, [pc, #68]	@ (800c8bc <xTaskIncrementTick+0x170>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	3301      	adds	r3, #1
 800c87c:	4a0f      	ldr	r2, [pc, #60]	@ (800c8bc <xTaskIncrementTick+0x170>)
 800c87e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c880:	4b0f      	ldr	r3, [pc, #60]	@ (800c8c0 <xTaskIncrementTick+0x174>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d001      	beq.n	800c88c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800c888:	2301      	movs	r3, #1
 800c88a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c88c:	697b      	ldr	r3, [r7, #20]
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3718      	adds	r7, #24
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	20000b24 	.word	0x20000b24
 800c89c:	20000b00 	.word	0x20000b00
 800c8a0:	20000ab4 	.word	0x20000ab4
 800c8a4:	20000ab8 	.word	0x20000ab8
 800c8a8:	20000b14 	.word	0x20000b14
 800c8ac:	20000b1c 	.word	0x20000b1c
 800c8b0:	20000b04 	.word	0x20000b04
 800c8b4:	20000a00 	.word	0x20000a00
 800c8b8:	200009fc 	.word	0x200009fc
 800c8bc:	20000b0c 	.word	0x20000b0c
 800c8c0:	20000b10 	.word	0x20000b10

0800c8c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b087      	sub	sp, #28
 800c8c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c8ca:	4b2b      	ldr	r3, [pc, #172]	@ (800c978 <vTaskSwitchContext+0xb4>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d003      	beq.n	800c8da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c8d2:	4b2a      	ldr	r3, [pc, #168]	@ (800c97c <vTaskSwitchContext+0xb8>)
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c8d8:	e047      	b.n	800c96a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c8da:	4b28      	ldr	r3, [pc, #160]	@ (800c97c <vTaskSwitchContext+0xb8>)
 800c8dc:	2200      	movs	r2, #0
 800c8de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8e0:	4b27      	ldr	r3, [pc, #156]	@ (800c980 <vTaskSwitchContext+0xbc>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	fab3 f383 	clz	r3, r3
 800c8ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c8ee:	7afb      	ldrb	r3, [r7, #11]
 800c8f0:	f1c3 031f 	rsb	r3, r3, #31
 800c8f4:	617b      	str	r3, [r7, #20]
 800c8f6:	4923      	ldr	r1, [pc, #140]	@ (800c984 <vTaskSwitchContext+0xc0>)
 800c8f8:	697a      	ldr	r2, [r7, #20]
 800c8fa:	4613      	mov	r3, r2
 800c8fc:	009b      	lsls	r3, r3, #2
 800c8fe:	4413      	add	r3, r2
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	440b      	add	r3, r1
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d10d      	bne.n	800c926 <vTaskSwitchContext+0x62>
	__asm volatile
 800c90a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c90e:	b672      	cpsid	i
 800c910:	f383 8811 	msr	BASEPRI, r3
 800c914:	f3bf 8f6f 	isb	sy
 800c918:	f3bf 8f4f 	dsb	sy
 800c91c:	b662      	cpsie	i
 800c91e:	607b      	str	r3, [r7, #4]
}
 800c920:	bf00      	nop
 800c922:	bf00      	nop
 800c924:	e7fd      	b.n	800c922 <vTaskSwitchContext+0x5e>
 800c926:	697a      	ldr	r2, [r7, #20]
 800c928:	4613      	mov	r3, r2
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	4413      	add	r3, r2
 800c92e:	009b      	lsls	r3, r3, #2
 800c930:	4a14      	ldr	r2, [pc, #80]	@ (800c984 <vTaskSwitchContext+0xc0>)
 800c932:	4413      	add	r3, r2
 800c934:	613b      	str	r3, [r7, #16]
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	685b      	ldr	r3, [r3, #4]
 800c93a:	685a      	ldr	r2, [r3, #4]
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	605a      	str	r2, [r3, #4]
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	685a      	ldr	r2, [r3, #4]
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	3308      	adds	r3, #8
 800c948:	429a      	cmp	r2, r3
 800c94a:	d104      	bne.n	800c956 <vTaskSwitchContext+0x92>
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	685a      	ldr	r2, [r3, #4]
 800c952:	693b      	ldr	r3, [r7, #16]
 800c954:	605a      	str	r2, [r3, #4]
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	4a0a      	ldr	r2, [pc, #40]	@ (800c988 <vTaskSwitchContext+0xc4>)
 800c95e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c960:	4b09      	ldr	r3, [pc, #36]	@ (800c988 <vTaskSwitchContext+0xc4>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	334c      	adds	r3, #76	@ 0x4c
 800c966:	4a09      	ldr	r2, [pc, #36]	@ (800c98c <vTaskSwitchContext+0xc8>)
 800c968:	6013      	str	r3, [r2, #0]
}
 800c96a:	bf00      	nop
 800c96c:	371c      	adds	r7, #28
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr
 800c976:	bf00      	nop
 800c978:	20000b24 	.word	0x20000b24
 800c97c:	20000b10 	.word	0x20000b10
 800c980:	20000b04 	.word	0x20000b04
 800c984:	20000a00 	.word	0x20000a00
 800c988:	200009fc 	.word	0x200009fc
 800c98c:	20000148 	.word	0x20000148

0800c990 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d10d      	bne.n	800c9bc <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800c9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a4:	b672      	cpsid	i
 800c9a6:	f383 8811 	msr	BASEPRI, r3
 800c9aa:	f3bf 8f6f 	isb	sy
 800c9ae:	f3bf 8f4f 	dsb	sy
 800c9b2:	b662      	cpsie	i
 800c9b4:	60fb      	str	r3, [r7, #12]
}
 800c9b6:	bf00      	nop
 800c9b8:	bf00      	nop
 800c9ba:	e7fd      	b.n	800c9b8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c9bc:	4b07      	ldr	r3, [pc, #28]	@ (800c9dc <vTaskPlaceOnEventList+0x4c>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	3318      	adds	r3, #24
 800c9c2:	4619      	mov	r1, r3
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f7fe fb06 	bl	800afd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c9ca:	2101      	movs	r1, #1
 800c9cc:	6838      	ldr	r0, [r7, #0]
 800c9ce:	f000 fbb3 	bl	800d138 <prvAddCurrentTaskToDelayedList>
}
 800c9d2:	bf00      	nop
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	200009fc 	.word	0x200009fc

0800c9e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b086      	sub	sp, #24
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	68db      	ldr	r3, [r3, #12]
 800c9ec:	68db      	ldr	r3, [r3, #12]
 800c9ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d10d      	bne.n	800ca12 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800c9f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9fa:	b672      	cpsid	i
 800c9fc:	f383 8811 	msr	BASEPRI, r3
 800ca00:	f3bf 8f6f 	isb	sy
 800ca04:	f3bf 8f4f 	dsb	sy
 800ca08:	b662      	cpsie	i
 800ca0a:	60fb      	str	r3, [r7, #12]
}
 800ca0c:	bf00      	nop
 800ca0e:	bf00      	nop
 800ca10:	e7fd      	b.n	800ca0e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	3318      	adds	r3, #24
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7fe fb16 	bl	800b048 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca1c:	4b1d      	ldr	r3, [pc, #116]	@ (800ca94 <xTaskRemoveFromEventList+0xb4>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d11c      	bne.n	800ca5e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	3304      	adds	r3, #4
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7fe fb0d 	bl	800b048 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca32:	2201      	movs	r2, #1
 800ca34:	409a      	lsls	r2, r3
 800ca36:	4b18      	ldr	r3, [pc, #96]	@ (800ca98 <xTaskRemoveFromEventList+0xb8>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	4a16      	ldr	r2, [pc, #88]	@ (800ca98 <xTaskRemoveFromEventList+0xb8>)
 800ca3e:	6013      	str	r3, [r2, #0]
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca44:	4613      	mov	r3, r2
 800ca46:	009b      	lsls	r3, r3, #2
 800ca48:	4413      	add	r3, r2
 800ca4a:	009b      	lsls	r3, r3, #2
 800ca4c:	4a13      	ldr	r2, [pc, #76]	@ (800ca9c <xTaskRemoveFromEventList+0xbc>)
 800ca4e:	441a      	add	r2, r3
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	3304      	adds	r3, #4
 800ca54:	4619      	mov	r1, r3
 800ca56:	4610      	mov	r0, r2
 800ca58:	f7fe fa99 	bl	800af8e <vListInsertEnd>
 800ca5c:	e005      	b.n	800ca6a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	3318      	adds	r3, #24
 800ca62:	4619      	mov	r1, r3
 800ca64:	480e      	ldr	r0, [pc, #56]	@ (800caa0 <xTaskRemoveFromEventList+0xc0>)
 800ca66:	f7fe fa92 	bl	800af8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca6e:	4b0d      	ldr	r3, [pc, #52]	@ (800caa4 <xTaskRemoveFromEventList+0xc4>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d905      	bls.n	800ca84 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ca78:	2301      	movs	r3, #1
 800ca7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ca7c:	4b0a      	ldr	r3, [pc, #40]	@ (800caa8 <xTaskRemoveFromEventList+0xc8>)
 800ca7e:	2201      	movs	r2, #1
 800ca80:	601a      	str	r2, [r3, #0]
 800ca82:	e001      	b.n	800ca88 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800ca84:	2300      	movs	r3, #0
 800ca86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ca88:	697b      	ldr	r3, [r7, #20]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3718      	adds	r7, #24
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	20000b24 	.word	0x20000b24
 800ca98:	20000b04 	.word	0x20000b04
 800ca9c:	20000a00 	.word	0x20000a00
 800caa0:	20000abc 	.word	0x20000abc
 800caa4:	200009fc 	.word	0x200009fc
 800caa8:	20000b10 	.word	0x20000b10

0800caac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cab4:	4b06      	ldr	r3, [pc, #24]	@ (800cad0 <vTaskInternalSetTimeOutState+0x24>)
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cabc:	4b05      	ldr	r3, [pc, #20]	@ (800cad4 <vTaskInternalSetTimeOutState+0x28>)
 800cabe:	681a      	ldr	r2, [r3, #0]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	605a      	str	r2, [r3, #4]
}
 800cac4:	bf00      	nop
 800cac6:	370c      	adds	r7, #12
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr
 800cad0:	20000b14 	.word	0x20000b14
 800cad4:	20000b00 	.word	0x20000b00

0800cad8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b088      	sub	sp, #32
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d10d      	bne.n	800cb04 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800cae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caec:	b672      	cpsid	i
 800caee:	f383 8811 	msr	BASEPRI, r3
 800caf2:	f3bf 8f6f 	isb	sy
 800caf6:	f3bf 8f4f 	dsb	sy
 800cafa:	b662      	cpsie	i
 800cafc:	613b      	str	r3, [r7, #16]
}
 800cafe:	bf00      	nop
 800cb00:	bf00      	nop
 800cb02:	e7fd      	b.n	800cb00 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d10d      	bne.n	800cb26 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800cb0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb0e:	b672      	cpsid	i
 800cb10:	f383 8811 	msr	BASEPRI, r3
 800cb14:	f3bf 8f6f 	isb	sy
 800cb18:	f3bf 8f4f 	dsb	sy
 800cb1c:	b662      	cpsie	i
 800cb1e:	60fb      	str	r3, [r7, #12]
}
 800cb20:	bf00      	nop
 800cb22:	bf00      	nop
 800cb24:	e7fd      	b.n	800cb22 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800cb26:	f000 fc79 	bl	800d41c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cb2a:	4b1d      	ldr	r3, [pc, #116]	@ (800cba0 <xTaskCheckForTimeOut+0xc8>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	69ba      	ldr	r2, [r7, #24]
 800cb36:	1ad3      	subs	r3, r2, r3
 800cb38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cb42:	d102      	bne.n	800cb4a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cb44:	2300      	movs	r3, #0
 800cb46:	61fb      	str	r3, [r7, #28]
 800cb48:	e023      	b.n	800cb92 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681a      	ldr	r2, [r3, #0]
 800cb4e:	4b15      	ldr	r3, [pc, #84]	@ (800cba4 <xTaskCheckForTimeOut+0xcc>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d007      	beq.n	800cb66 <xTaskCheckForTimeOut+0x8e>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	69ba      	ldr	r2, [r7, #24]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d302      	bcc.n	800cb66 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cb60:	2301      	movs	r3, #1
 800cb62:	61fb      	str	r3, [r7, #28]
 800cb64:	e015      	b.n	800cb92 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	697a      	ldr	r2, [r7, #20]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d20b      	bcs.n	800cb88 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	1ad2      	subs	r2, r2, r3
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f7ff ff95 	bl	800caac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cb82:	2300      	movs	r3, #0
 800cb84:	61fb      	str	r3, [r7, #28]
 800cb86:	e004      	b.n	800cb92 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cb92:	f000 fc79 	bl	800d488 <vPortExitCritical>

	return xReturn;
 800cb96:	69fb      	ldr	r3, [r7, #28]
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3720      	adds	r7, #32
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	20000b00 	.word	0x20000b00
 800cba4:	20000b14 	.word	0x20000b14

0800cba8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cba8:	b480      	push	{r7}
 800cbaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cbac:	4b03      	ldr	r3, [pc, #12]	@ (800cbbc <vTaskMissedYield+0x14>)
 800cbae:	2201      	movs	r2, #1
 800cbb0:	601a      	str	r2, [r3, #0]
}
 800cbb2:	bf00      	nop
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr
 800cbbc:	20000b10 	.word	0x20000b10

0800cbc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cbc8:	f000 f852 	bl	800cc70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cbcc:	4b06      	ldr	r3, [pc, #24]	@ (800cbe8 <prvIdleTask+0x28>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	d9f9      	bls.n	800cbc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cbd4:	4b05      	ldr	r3, [pc, #20]	@ (800cbec <prvIdleTask+0x2c>)
 800cbd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbda:	601a      	str	r2, [r3, #0]
 800cbdc:	f3bf 8f4f 	dsb	sy
 800cbe0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cbe4:	e7f0      	b.n	800cbc8 <prvIdleTask+0x8>
 800cbe6:	bf00      	nop
 800cbe8:	20000a00 	.word	0x20000a00
 800cbec:	e000ed04 	.word	0xe000ed04

0800cbf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	607b      	str	r3, [r7, #4]
 800cbfa:	e00c      	b.n	800cc16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	4613      	mov	r3, r2
 800cc00:	009b      	lsls	r3, r3, #2
 800cc02:	4413      	add	r3, r2
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	4a12      	ldr	r2, [pc, #72]	@ (800cc50 <prvInitialiseTaskLists+0x60>)
 800cc08:	4413      	add	r3, r2
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7fe f992 	bl	800af34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	3301      	adds	r3, #1
 800cc14:	607b      	str	r3, [r7, #4]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2b06      	cmp	r3, #6
 800cc1a:	d9ef      	bls.n	800cbfc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cc1c:	480d      	ldr	r0, [pc, #52]	@ (800cc54 <prvInitialiseTaskLists+0x64>)
 800cc1e:	f7fe f989 	bl	800af34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cc22:	480d      	ldr	r0, [pc, #52]	@ (800cc58 <prvInitialiseTaskLists+0x68>)
 800cc24:	f7fe f986 	bl	800af34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cc28:	480c      	ldr	r0, [pc, #48]	@ (800cc5c <prvInitialiseTaskLists+0x6c>)
 800cc2a:	f7fe f983 	bl	800af34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cc2e:	480c      	ldr	r0, [pc, #48]	@ (800cc60 <prvInitialiseTaskLists+0x70>)
 800cc30:	f7fe f980 	bl	800af34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cc34:	480b      	ldr	r0, [pc, #44]	@ (800cc64 <prvInitialiseTaskLists+0x74>)
 800cc36:	f7fe f97d 	bl	800af34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cc3a:	4b0b      	ldr	r3, [pc, #44]	@ (800cc68 <prvInitialiseTaskLists+0x78>)
 800cc3c:	4a05      	ldr	r2, [pc, #20]	@ (800cc54 <prvInitialiseTaskLists+0x64>)
 800cc3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cc40:	4b0a      	ldr	r3, [pc, #40]	@ (800cc6c <prvInitialiseTaskLists+0x7c>)
 800cc42:	4a05      	ldr	r2, [pc, #20]	@ (800cc58 <prvInitialiseTaskLists+0x68>)
 800cc44:	601a      	str	r2, [r3, #0]
}
 800cc46:	bf00      	nop
 800cc48:	3708      	adds	r7, #8
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	20000a00 	.word	0x20000a00
 800cc54:	20000a8c 	.word	0x20000a8c
 800cc58:	20000aa0 	.word	0x20000aa0
 800cc5c:	20000abc 	.word	0x20000abc
 800cc60:	20000ad0 	.word	0x20000ad0
 800cc64:	20000ae8 	.word	0x20000ae8
 800cc68:	20000ab4 	.word	0x20000ab4
 800cc6c:	20000ab8 	.word	0x20000ab8

0800cc70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc76:	e019      	b.n	800ccac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cc78:	f000 fbd0 	bl	800d41c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc7c:	4b10      	ldr	r3, [pc, #64]	@ (800ccc0 <prvCheckTasksWaitingTermination+0x50>)
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	68db      	ldr	r3, [r3, #12]
 800cc82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	3304      	adds	r3, #4
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f7fe f9dd 	bl	800b048 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cc8e:	4b0d      	ldr	r3, [pc, #52]	@ (800ccc4 <prvCheckTasksWaitingTermination+0x54>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	3b01      	subs	r3, #1
 800cc94:	4a0b      	ldr	r2, [pc, #44]	@ (800ccc4 <prvCheckTasksWaitingTermination+0x54>)
 800cc96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cc98:	4b0b      	ldr	r3, [pc, #44]	@ (800ccc8 <prvCheckTasksWaitingTermination+0x58>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	3b01      	subs	r3, #1
 800cc9e:	4a0a      	ldr	r2, [pc, #40]	@ (800ccc8 <prvCheckTasksWaitingTermination+0x58>)
 800cca0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cca2:	f000 fbf1 	bl	800d488 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f000 f810 	bl	800cccc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ccac:	4b06      	ldr	r3, [pc, #24]	@ (800ccc8 <prvCheckTasksWaitingTermination+0x58>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d1e1      	bne.n	800cc78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ccb4:	bf00      	nop
 800ccb6:	bf00      	nop
 800ccb8:	3708      	adds	r7, #8
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	20000ad0 	.word	0x20000ad0
 800ccc4:	20000afc 	.word	0x20000afc
 800ccc8:	20000ae4 	.word	0x20000ae4

0800cccc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	334c      	adds	r3, #76	@ 0x4c
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f014 fd89 	bl	80217f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d108      	bne.n	800ccfa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccec:	4618      	mov	r0, r3
 800ccee:	f000 fd91 	bl	800d814 <vPortFree>
				vPortFree( pxTCB );
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 fd8e 	bl	800d814 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ccf8:	e01b      	b.n	800cd32 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800cd00:	2b01      	cmp	r3, #1
 800cd02:	d103      	bne.n	800cd0c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 fd85 	bl	800d814 <vPortFree>
	}
 800cd0a:	e012      	b.n	800cd32 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800cd12:	2b02      	cmp	r3, #2
 800cd14:	d00d      	beq.n	800cd32 <prvDeleteTCB+0x66>
	__asm volatile
 800cd16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd1a:	b672      	cpsid	i
 800cd1c:	f383 8811 	msr	BASEPRI, r3
 800cd20:	f3bf 8f6f 	isb	sy
 800cd24:	f3bf 8f4f 	dsb	sy
 800cd28:	b662      	cpsie	i
 800cd2a:	60fb      	str	r3, [r7, #12]
}
 800cd2c:	bf00      	nop
 800cd2e:	bf00      	nop
 800cd30:	e7fd      	b.n	800cd2e <prvDeleteTCB+0x62>
	}
 800cd32:	bf00      	nop
 800cd34:	3710      	adds	r7, #16
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
	...

0800cd3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b083      	sub	sp, #12
 800cd40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd42:	4b0c      	ldr	r3, [pc, #48]	@ (800cd74 <prvResetNextTaskUnblockTime+0x38>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d104      	bne.n	800cd56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cd4c:	4b0a      	ldr	r3, [pc, #40]	@ (800cd78 <prvResetNextTaskUnblockTime+0x3c>)
 800cd4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cd52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cd54:	e008      	b.n	800cd68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd56:	4b07      	ldr	r3, [pc, #28]	@ (800cd74 <prvResetNextTaskUnblockTime+0x38>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	68db      	ldr	r3, [r3, #12]
 800cd5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	4a04      	ldr	r2, [pc, #16]	@ (800cd78 <prvResetNextTaskUnblockTime+0x3c>)
 800cd66:	6013      	str	r3, [r2, #0]
}
 800cd68:	bf00      	nop
 800cd6a:	370c      	adds	r7, #12
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr
 800cd74:	20000ab4 	.word	0x20000ab4
 800cd78:	20000b1c 	.word	0x20000b1c

0800cd7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cd82:	4b0b      	ldr	r3, [pc, #44]	@ (800cdb0 <xTaskGetSchedulerState+0x34>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d102      	bne.n	800cd90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	607b      	str	r3, [r7, #4]
 800cd8e:	e008      	b.n	800cda2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd90:	4b08      	ldr	r3, [pc, #32]	@ (800cdb4 <xTaskGetSchedulerState+0x38>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d102      	bne.n	800cd9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cd98:	2302      	movs	r3, #2
 800cd9a:	607b      	str	r3, [r7, #4]
 800cd9c:	e001      	b.n	800cda2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cda2:	687b      	ldr	r3, [r7, #4]
	}
 800cda4:	4618      	mov	r0, r3
 800cda6:	370c      	adds	r7, #12
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr
 800cdb0:	20000b08 	.word	0x20000b08
 800cdb4:	20000b24 	.word	0x20000b24

0800cdb8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b084      	sub	sp, #16
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d069      	beq.n	800cea2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdd2:	4b36      	ldr	r3, [pc, #216]	@ (800ceac <xTaskPriorityInherit+0xf4>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d259      	bcs.n	800ce90 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	699b      	ldr	r3, [r3, #24]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	db06      	blt.n	800cdf2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cde4:	4b31      	ldr	r3, [pc, #196]	@ (800ceac <xTaskPriorityInherit+0xf4>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdea:	f1c3 0207 	rsb	r2, r3, #7
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	6959      	ldr	r1, [r3, #20]
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	009b      	lsls	r3, r3, #2
 800cdfe:	4413      	add	r3, r2
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	4a2b      	ldr	r2, [pc, #172]	@ (800ceb0 <xTaskPriorityInherit+0xf8>)
 800ce04:	4413      	add	r3, r2
 800ce06:	4299      	cmp	r1, r3
 800ce08:	d13a      	bne.n	800ce80 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	3304      	adds	r3, #4
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7fe f91a 	bl	800b048 <uxListRemove>
 800ce14:	4603      	mov	r3, r0
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d115      	bne.n	800ce46 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce1e:	4924      	ldr	r1, [pc, #144]	@ (800ceb0 <xTaskPriorityInherit+0xf8>)
 800ce20:	4613      	mov	r3, r2
 800ce22:	009b      	lsls	r3, r3, #2
 800ce24:	4413      	add	r3, r2
 800ce26:	009b      	lsls	r3, r3, #2
 800ce28:	440b      	add	r3, r1
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d10a      	bne.n	800ce46 <xTaskPriorityInherit+0x8e>
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce34:	2201      	movs	r2, #1
 800ce36:	fa02 f303 	lsl.w	r3, r2, r3
 800ce3a:	43da      	mvns	r2, r3
 800ce3c:	4b1d      	ldr	r3, [pc, #116]	@ (800ceb4 <xTaskPriorityInherit+0xfc>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4013      	ands	r3, r2
 800ce42:	4a1c      	ldr	r2, [pc, #112]	@ (800ceb4 <xTaskPriorityInherit+0xfc>)
 800ce44:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ce46:	4b19      	ldr	r3, [pc, #100]	@ (800ceac <xTaskPriorityInherit+0xf4>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce54:	2201      	movs	r2, #1
 800ce56:	409a      	lsls	r2, r3
 800ce58:	4b16      	ldr	r3, [pc, #88]	@ (800ceb4 <xTaskPriorityInherit+0xfc>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	4a15      	ldr	r2, [pc, #84]	@ (800ceb4 <xTaskPriorityInherit+0xfc>)
 800ce60:	6013      	str	r3, [r2, #0]
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce66:	4613      	mov	r3, r2
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	4413      	add	r3, r2
 800ce6c:	009b      	lsls	r3, r3, #2
 800ce6e:	4a10      	ldr	r2, [pc, #64]	@ (800ceb0 <xTaskPriorityInherit+0xf8>)
 800ce70:	441a      	add	r2, r3
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	3304      	adds	r3, #4
 800ce76:	4619      	mov	r1, r3
 800ce78:	4610      	mov	r0, r2
 800ce7a:	f7fe f888 	bl	800af8e <vListInsertEnd>
 800ce7e:	e004      	b.n	800ce8a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ce80:	4b0a      	ldr	r3, [pc, #40]	@ (800ceac <xTaskPriorityInherit+0xf4>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	60fb      	str	r3, [r7, #12]
 800ce8e:	e008      	b.n	800cea2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ce94:	4b05      	ldr	r3, [pc, #20]	@ (800ceac <xTaskPriorityInherit+0xf4>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d201      	bcs.n	800cea2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cea2:	68fb      	ldr	r3, [r7, #12]
	}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3710      	adds	r7, #16
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	200009fc 	.word	0x200009fc
 800ceb0:	20000a00 	.word	0x20000a00
 800ceb4:	20000b04 	.word	0x20000b04

0800ceb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b086      	sub	sp, #24
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cec4:	2300      	movs	r3, #0
 800cec6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d074      	beq.n	800cfb8 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800cece:	4b3d      	ldr	r3, [pc, #244]	@ (800cfc4 <xTaskPriorityDisinherit+0x10c>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	693a      	ldr	r2, [r7, #16]
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d00d      	beq.n	800cef4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800ced8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cedc:	b672      	cpsid	i
 800cede:	f383 8811 	msr	BASEPRI, r3
 800cee2:	f3bf 8f6f 	isb	sy
 800cee6:	f3bf 8f4f 	dsb	sy
 800ceea:	b662      	cpsie	i
 800ceec:	60fb      	str	r3, [r7, #12]
}
 800ceee:	bf00      	nop
 800cef0:	bf00      	nop
 800cef2:	e7fd      	b.n	800cef0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d10d      	bne.n	800cf18 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800cefc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf00:	b672      	cpsid	i
 800cf02:	f383 8811 	msr	BASEPRI, r3
 800cf06:	f3bf 8f6f 	isb	sy
 800cf0a:	f3bf 8f4f 	dsb	sy
 800cf0e:	b662      	cpsie	i
 800cf10:	60bb      	str	r3, [r7, #8]
}
 800cf12:	bf00      	nop
 800cf14:	bf00      	nop
 800cf16:	e7fd      	b.n	800cf14 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cf1c:	1e5a      	subs	r2, r3, #1
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d044      	beq.n	800cfb8 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d140      	bne.n	800cfb8 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	3304      	adds	r3, #4
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7fe f884 	bl	800b048 <uxListRemove>
 800cf40:	4603      	mov	r3, r0
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d115      	bne.n	800cf72 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf4a:	491f      	ldr	r1, [pc, #124]	@ (800cfc8 <xTaskPriorityDisinherit+0x110>)
 800cf4c:	4613      	mov	r3, r2
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	4413      	add	r3, r2
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	440b      	add	r3, r1
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d10a      	bne.n	800cf72 <xTaskPriorityDisinherit+0xba>
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf60:	2201      	movs	r2, #1
 800cf62:	fa02 f303 	lsl.w	r3, r2, r3
 800cf66:	43da      	mvns	r2, r3
 800cf68:	4b18      	ldr	r3, [pc, #96]	@ (800cfcc <xTaskPriorityDisinherit+0x114>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	4013      	ands	r3, r2
 800cf6e:	4a17      	ldr	r2, [pc, #92]	@ (800cfcc <xTaskPriorityDisinherit+0x114>)
 800cf70:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf7e:	f1c3 0207 	rsb	r2, r3, #7
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	409a      	lsls	r2, r3
 800cf8e:	4b0f      	ldr	r3, [pc, #60]	@ (800cfcc <xTaskPriorityDisinherit+0x114>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	4313      	orrs	r3, r2
 800cf94:	4a0d      	ldr	r2, [pc, #52]	@ (800cfcc <xTaskPriorityDisinherit+0x114>)
 800cf96:	6013      	str	r3, [r2, #0]
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf9c:	4613      	mov	r3, r2
 800cf9e:	009b      	lsls	r3, r3, #2
 800cfa0:	4413      	add	r3, r2
 800cfa2:	009b      	lsls	r3, r3, #2
 800cfa4:	4a08      	ldr	r2, [pc, #32]	@ (800cfc8 <xTaskPriorityDisinherit+0x110>)
 800cfa6:	441a      	add	r2, r3
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	3304      	adds	r3, #4
 800cfac:	4619      	mov	r1, r3
 800cfae:	4610      	mov	r0, r2
 800cfb0:	f7fd ffed 	bl	800af8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cfb8:	697b      	ldr	r3, [r7, #20]
	}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3718      	adds	r7, #24
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	bf00      	nop
 800cfc4:	200009fc 	.word	0x200009fc
 800cfc8:	20000a00 	.word	0x20000a00
 800cfcc:	20000b04 	.word	0x20000b04

0800cfd0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b088      	sub	sp, #32
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cfde:	2301      	movs	r3, #1
 800cfe0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	f000 8089 	beq.w	800d0fc <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cfea:	69bb      	ldr	r3, [r7, #24]
 800cfec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d10d      	bne.n	800d00e <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800cff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cff6:	b672      	cpsid	i
 800cff8:	f383 8811 	msr	BASEPRI, r3
 800cffc:	f3bf 8f6f 	isb	sy
 800d000:	f3bf 8f4f 	dsb	sy
 800d004:	b662      	cpsie	i
 800d006:	60fb      	str	r3, [r7, #12]
}
 800d008:	bf00      	nop
 800d00a:	bf00      	nop
 800d00c:	e7fd      	b.n	800d00a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d00e:	69bb      	ldr	r3, [r7, #24]
 800d010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d012:	683a      	ldr	r2, [r7, #0]
 800d014:	429a      	cmp	r2, r3
 800d016:	d902      	bls.n	800d01e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	61fb      	str	r3, [r7, #28]
 800d01c:	e002      	b.n	800d024 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d01e:	69bb      	ldr	r3, [r7, #24]
 800d020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d022:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d024:	69bb      	ldr	r3, [r7, #24]
 800d026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d028:	69fa      	ldr	r2, [r7, #28]
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d066      	beq.n	800d0fc <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d02e:	69bb      	ldr	r3, [r7, #24]
 800d030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d032:	697a      	ldr	r2, [r7, #20]
 800d034:	429a      	cmp	r2, r3
 800d036:	d161      	bne.n	800d0fc <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d038:	4b32      	ldr	r3, [pc, #200]	@ (800d104 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	69ba      	ldr	r2, [r7, #24]
 800d03e:	429a      	cmp	r2, r3
 800d040:	d10d      	bne.n	800d05e <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800d042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d046:	b672      	cpsid	i
 800d048:	f383 8811 	msr	BASEPRI, r3
 800d04c:	f3bf 8f6f 	isb	sy
 800d050:	f3bf 8f4f 	dsb	sy
 800d054:	b662      	cpsie	i
 800d056:	60bb      	str	r3, [r7, #8]
}
 800d058:	bf00      	nop
 800d05a:	bf00      	nop
 800d05c:	e7fd      	b.n	800d05a <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d05e:	69bb      	ldr	r3, [r7, #24]
 800d060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d062:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d064:	69bb      	ldr	r3, [r7, #24]
 800d066:	69fa      	ldr	r2, [r7, #28]
 800d068:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d06a:	69bb      	ldr	r3, [r7, #24]
 800d06c:	699b      	ldr	r3, [r3, #24]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	db04      	blt.n	800d07c <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d072:	69fb      	ldr	r3, [r7, #28]
 800d074:	f1c3 0207 	rsb	r2, r3, #7
 800d078:	69bb      	ldr	r3, [r7, #24]
 800d07a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	6959      	ldr	r1, [r3, #20]
 800d080:	693a      	ldr	r2, [r7, #16]
 800d082:	4613      	mov	r3, r2
 800d084:	009b      	lsls	r3, r3, #2
 800d086:	4413      	add	r3, r2
 800d088:	009b      	lsls	r3, r3, #2
 800d08a:	4a1f      	ldr	r2, [pc, #124]	@ (800d108 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d08c:	4413      	add	r3, r2
 800d08e:	4299      	cmp	r1, r3
 800d090:	d134      	bne.n	800d0fc <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d092:	69bb      	ldr	r3, [r7, #24]
 800d094:	3304      	adds	r3, #4
 800d096:	4618      	mov	r0, r3
 800d098:	f7fd ffd6 	bl	800b048 <uxListRemove>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d115      	bne.n	800d0ce <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d0a2:	69bb      	ldr	r3, [r7, #24]
 800d0a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0a6:	4918      	ldr	r1, [pc, #96]	@ (800d108 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d0a8:	4613      	mov	r3, r2
 800d0aa:	009b      	lsls	r3, r3, #2
 800d0ac:	4413      	add	r3, r2
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	440b      	add	r3, r1
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d10a      	bne.n	800d0ce <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800d0b8:	69bb      	ldr	r3, [r7, #24]
 800d0ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0bc:	2201      	movs	r2, #1
 800d0be:	fa02 f303 	lsl.w	r3, r2, r3
 800d0c2:	43da      	mvns	r2, r3
 800d0c4:	4b11      	ldr	r3, [pc, #68]	@ (800d10c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4013      	ands	r3, r2
 800d0ca:	4a10      	ldr	r2, [pc, #64]	@ (800d10c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d0cc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d0ce:	69bb      	ldr	r3, [r7, #24]
 800d0d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	409a      	lsls	r2, r3
 800d0d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d10c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	4a0b      	ldr	r2, [pc, #44]	@ (800d10c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d0de:	6013      	str	r3, [r2, #0]
 800d0e0:	69bb      	ldr	r3, [r7, #24]
 800d0e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0e4:	4613      	mov	r3, r2
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	4413      	add	r3, r2
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	4a06      	ldr	r2, [pc, #24]	@ (800d108 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d0ee:	441a      	add	r2, r3
 800d0f0:	69bb      	ldr	r3, [r7, #24]
 800d0f2:	3304      	adds	r3, #4
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	4610      	mov	r0, r2
 800d0f8:	f7fd ff49 	bl	800af8e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0fc:	bf00      	nop
 800d0fe:	3720      	adds	r7, #32
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	200009fc 	.word	0x200009fc
 800d108:	20000a00 	.word	0x20000a00
 800d10c:	20000b04 	.word	0x20000b04

0800d110 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d110:	b480      	push	{r7}
 800d112:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d114:	4b07      	ldr	r3, [pc, #28]	@ (800d134 <pvTaskIncrementMutexHeldCount+0x24>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d004      	beq.n	800d126 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d11c:	4b05      	ldr	r3, [pc, #20]	@ (800d134 <pvTaskIncrementMutexHeldCount+0x24>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d122:	3201      	adds	r2, #1
 800d124:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800d126:	4b03      	ldr	r3, [pc, #12]	@ (800d134 <pvTaskIncrementMutexHeldCount+0x24>)
 800d128:	681b      	ldr	r3, [r3, #0]
	}
 800d12a:	4618      	mov	r0, r3
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr
 800d134:	200009fc 	.word	0x200009fc

0800d138 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d142:	4b29      	ldr	r3, [pc, #164]	@ (800d1e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d148:	4b28      	ldr	r3, [pc, #160]	@ (800d1ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	3304      	adds	r3, #4
 800d14e:	4618      	mov	r0, r3
 800d150:	f7fd ff7a 	bl	800b048 <uxListRemove>
 800d154:	4603      	mov	r3, r0
 800d156:	2b00      	cmp	r3, #0
 800d158:	d10b      	bne.n	800d172 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d15a:	4b24      	ldr	r3, [pc, #144]	@ (800d1ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d160:	2201      	movs	r2, #1
 800d162:	fa02 f303 	lsl.w	r3, r2, r3
 800d166:	43da      	mvns	r2, r3
 800d168:	4b21      	ldr	r3, [pc, #132]	@ (800d1f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4013      	ands	r3, r2
 800d16e:	4a20      	ldr	r2, [pc, #128]	@ (800d1f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d170:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d178:	d10a      	bne.n	800d190 <prvAddCurrentTaskToDelayedList+0x58>
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d007      	beq.n	800d190 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d180:	4b1a      	ldr	r3, [pc, #104]	@ (800d1ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	3304      	adds	r3, #4
 800d186:	4619      	mov	r1, r3
 800d188:	481a      	ldr	r0, [pc, #104]	@ (800d1f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d18a:	f7fd ff00 	bl	800af8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d18e:	e026      	b.n	800d1de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d190:	68fa      	ldr	r2, [r7, #12]
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	4413      	add	r3, r2
 800d196:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d198:	4b14      	ldr	r3, [pc, #80]	@ (800d1ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	68ba      	ldr	r2, [r7, #8]
 800d19e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d1a0:	68ba      	ldr	r2, [r7, #8]
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d209      	bcs.n	800d1bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d1a8:	4b13      	ldr	r3, [pc, #76]	@ (800d1f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d1aa:	681a      	ldr	r2, [r3, #0]
 800d1ac:	4b0f      	ldr	r3, [pc, #60]	@ (800d1ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	3304      	adds	r3, #4
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	4610      	mov	r0, r2
 800d1b6:	f7fd ff0e 	bl	800afd6 <vListInsert>
}
 800d1ba:	e010      	b.n	800d1de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d1bc:	4b0f      	ldr	r3, [pc, #60]	@ (800d1fc <prvAddCurrentTaskToDelayedList+0xc4>)
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	4b0a      	ldr	r3, [pc, #40]	@ (800d1ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3304      	adds	r3, #4
 800d1c6:	4619      	mov	r1, r3
 800d1c8:	4610      	mov	r0, r2
 800d1ca:	f7fd ff04 	bl	800afd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d1ce:	4b0c      	ldr	r3, [pc, #48]	@ (800d200 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	68ba      	ldr	r2, [r7, #8]
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d202      	bcs.n	800d1de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d1d8:	4a09      	ldr	r2, [pc, #36]	@ (800d200 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	6013      	str	r3, [r2, #0]
}
 800d1de:	bf00      	nop
 800d1e0:	3710      	adds	r7, #16
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	20000b00 	.word	0x20000b00
 800d1ec:	200009fc 	.word	0x200009fc
 800d1f0:	20000b04 	.word	0x20000b04
 800d1f4:	20000ae8 	.word	0x20000ae8
 800d1f8:	20000ab8 	.word	0x20000ab8
 800d1fc:	20000ab4 	.word	0x20000ab4
 800d200:	20000b1c 	.word	0x20000b1c

0800d204 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d204:	b480      	push	{r7}
 800d206:	b085      	sub	sp, #20
 800d208:	af00      	add	r7, sp, #0
 800d20a:	60f8      	str	r0, [r7, #12]
 800d20c:	60b9      	str	r1, [r7, #8]
 800d20e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	3b04      	subs	r3, #4
 800d214:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d21c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	3b04      	subs	r3, #4
 800d222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	f023 0201 	bic.w	r2, r3, #1
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	3b04      	subs	r3, #4
 800d232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d234:	4a0c      	ldr	r2, [pc, #48]	@ (800d268 <pxPortInitialiseStack+0x64>)
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	3b14      	subs	r3, #20
 800d23e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d240:	687a      	ldr	r2, [r7, #4]
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	3b04      	subs	r3, #4
 800d24a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	f06f 0202 	mvn.w	r2, #2
 800d252:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	3b20      	subs	r3, #32
 800d258:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d25a:	68fb      	ldr	r3, [r7, #12]
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3714      	adds	r7, #20
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr
 800d268:	0800d26d 	.word	0x0800d26d

0800d26c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d26c:	b480      	push	{r7}
 800d26e:	b085      	sub	sp, #20
 800d270:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d272:	2300      	movs	r3, #0
 800d274:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d276:	4b15      	ldr	r3, [pc, #84]	@ (800d2cc <prvTaskExitError+0x60>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d27e:	d00d      	beq.n	800d29c <prvTaskExitError+0x30>
	__asm volatile
 800d280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d284:	b672      	cpsid	i
 800d286:	f383 8811 	msr	BASEPRI, r3
 800d28a:	f3bf 8f6f 	isb	sy
 800d28e:	f3bf 8f4f 	dsb	sy
 800d292:	b662      	cpsie	i
 800d294:	60fb      	str	r3, [r7, #12]
}
 800d296:	bf00      	nop
 800d298:	bf00      	nop
 800d29a:	e7fd      	b.n	800d298 <prvTaskExitError+0x2c>
	__asm volatile
 800d29c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a0:	b672      	cpsid	i
 800d2a2:	f383 8811 	msr	BASEPRI, r3
 800d2a6:	f3bf 8f6f 	isb	sy
 800d2aa:	f3bf 8f4f 	dsb	sy
 800d2ae:	b662      	cpsie	i
 800d2b0:	60bb      	str	r3, [r7, #8]
}
 800d2b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d2b4:	bf00      	nop
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d0fc      	beq.n	800d2b6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d2bc:	bf00      	nop
 800d2be:	bf00      	nop
 800d2c0:	3714      	adds	r7, #20
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr
 800d2ca:	bf00      	nop
 800d2cc:	200000ac 	.word	0x200000ac

0800d2d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d2d0:	4b07      	ldr	r3, [pc, #28]	@ (800d2f0 <pxCurrentTCBConst2>)
 800d2d2:	6819      	ldr	r1, [r3, #0]
 800d2d4:	6808      	ldr	r0, [r1, #0]
 800d2d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2da:	f380 8809 	msr	PSP, r0
 800d2de:	f3bf 8f6f 	isb	sy
 800d2e2:	f04f 0000 	mov.w	r0, #0
 800d2e6:	f380 8811 	msr	BASEPRI, r0
 800d2ea:	4770      	bx	lr
 800d2ec:	f3af 8000 	nop.w

0800d2f0 <pxCurrentTCBConst2>:
 800d2f0:	200009fc 	.word	0x200009fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d2f4:	bf00      	nop
 800d2f6:	bf00      	nop

0800d2f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d2f8:	4808      	ldr	r0, [pc, #32]	@ (800d31c <prvPortStartFirstTask+0x24>)
 800d2fa:	6800      	ldr	r0, [r0, #0]
 800d2fc:	6800      	ldr	r0, [r0, #0]
 800d2fe:	f380 8808 	msr	MSP, r0
 800d302:	f04f 0000 	mov.w	r0, #0
 800d306:	f380 8814 	msr	CONTROL, r0
 800d30a:	b662      	cpsie	i
 800d30c:	b661      	cpsie	f
 800d30e:	f3bf 8f4f 	dsb	sy
 800d312:	f3bf 8f6f 	isb	sy
 800d316:	df00      	svc	0
 800d318:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d31a:	bf00      	nop
 800d31c:	e000ed08 	.word	0xe000ed08

0800d320 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d326:	4b37      	ldr	r3, [pc, #220]	@ (800d404 <xPortStartScheduler+0xe4>)
 800d328:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	b2db      	uxtb	r3, r3
 800d330:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	22ff      	movs	r2, #255	@ 0xff
 800d336:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	781b      	ldrb	r3, [r3, #0]
 800d33c:	b2db      	uxtb	r3, r3
 800d33e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d340:	78fb      	ldrb	r3, [r7, #3]
 800d342:	b2db      	uxtb	r3, r3
 800d344:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d348:	b2da      	uxtb	r2, r3
 800d34a:	4b2f      	ldr	r3, [pc, #188]	@ (800d408 <xPortStartScheduler+0xe8>)
 800d34c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d34e:	4b2f      	ldr	r3, [pc, #188]	@ (800d40c <xPortStartScheduler+0xec>)
 800d350:	2207      	movs	r2, #7
 800d352:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d354:	e009      	b.n	800d36a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d356:	4b2d      	ldr	r3, [pc, #180]	@ (800d40c <xPortStartScheduler+0xec>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	3b01      	subs	r3, #1
 800d35c:	4a2b      	ldr	r2, [pc, #172]	@ (800d40c <xPortStartScheduler+0xec>)
 800d35e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d360:	78fb      	ldrb	r3, [r7, #3]
 800d362:	b2db      	uxtb	r3, r3
 800d364:	005b      	lsls	r3, r3, #1
 800d366:	b2db      	uxtb	r3, r3
 800d368:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d36a:	78fb      	ldrb	r3, [r7, #3]
 800d36c:	b2db      	uxtb	r3, r3
 800d36e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d372:	2b80      	cmp	r3, #128	@ 0x80
 800d374:	d0ef      	beq.n	800d356 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d376:	4b25      	ldr	r3, [pc, #148]	@ (800d40c <xPortStartScheduler+0xec>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f1c3 0307 	rsb	r3, r3, #7
 800d37e:	2b04      	cmp	r3, #4
 800d380:	d00d      	beq.n	800d39e <xPortStartScheduler+0x7e>
	__asm volatile
 800d382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d386:	b672      	cpsid	i
 800d388:	f383 8811 	msr	BASEPRI, r3
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	b662      	cpsie	i
 800d396:	60bb      	str	r3, [r7, #8]
}
 800d398:	bf00      	nop
 800d39a:	bf00      	nop
 800d39c:	e7fd      	b.n	800d39a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d39e:	4b1b      	ldr	r3, [pc, #108]	@ (800d40c <xPortStartScheduler+0xec>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	021b      	lsls	r3, r3, #8
 800d3a4:	4a19      	ldr	r2, [pc, #100]	@ (800d40c <xPortStartScheduler+0xec>)
 800d3a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d3a8:	4b18      	ldr	r3, [pc, #96]	@ (800d40c <xPortStartScheduler+0xec>)
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d3b0:	4a16      	ldr	r2, [pc, #88]	@ (800d40c <xPortStartScheduler+0xec>)
 800d3b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	b2da      	uxtb	r2, r3
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d3bc:	4b14      	ldr	r3, [pc, #80]	@ (800d410 <xPortStartScheduler+0xf0>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	4a13      	ldr	r2, [pc, #76]	@ (800d410 <xPortStartScheduler+0xf0>)
 800d3c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d3c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d3c8:	4b11      	ldr	r3, [pc, #68]	@ (800d410 <xPortStartScheduler+0xf0>)
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4a10      	ldr	r2, [pc, #64]	@ (800d410 <xPortStartScheduler+0xf0>)
 800d3ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d3d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d3d4:	f000 f8dc 	bl	800d590 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d3d8:	4b0e      	ldr	r3, [pc, #56]	@ (800d414 <xPortStartScheduler+0xf4>)
 800d3da:	2200      	movs	r2, #0
 800d3dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d3de:	f000 f8fb 	bl	800d5d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d3e2:	4b0d      	ldr	r3, [pc, #52]	@ (800d418 <xPortStartScheduler+0xf8>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	4a0c      	ldr	r2, [pc, #48]	@ (800d418 <xPortStartScheduler+0xf8>)
 800d3e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d3ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d3ee:	f7ff ff83 	bl	800d2f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d3f2:	f7ff fa67 	bl	800c8c4 <vTaskSwitchContext>
	prvTaskExitError();
 800d3f6:	f7ff ff39 	bl	800d26c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d3fa:	2300      	movs	r3, #0
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3710      	adds	r7, #16
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}
 800d404:	e000e400 	.word	0xe000e400
 800d408:	20000b28 	.word	0x20000b28
 800d40c:	20000b2c 	.word	0x20000b2c
 800d410:	e000ed20 	.word	0xe000ed20
 800d414:	200000ac 	.word	0x200000ac
 800d418:	e000ef34 	.word	0xe000ef34

0800d41c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d41c:	b480      	push	{r7}
 800d41e:	b083      	sub	sp, #12
 800d420:	af00      	add	r7, sp, #0
	__asm volatile
 800d422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d426:	b672      	cpsid	i
 800d428:	f383 8811 	msr	BASEPRI, r3
 800d42c:	f3bf 8f6f 	isb	sy
 800d430:	f3bf 8f4f 	dsb	sy
 800d434:	b662      	cpsie	i
 800d436:	607b      	str	r3, [r7, #4]
}
 800d438:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d43a:	4b11      	ldr	r3, [pc, #68]	@ (800d480 <vPortEnterCritical+0x64>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	3301      	adds	r3, #1
 800d440:	4a0f      	ldr	r2, [pc, #60]	@ (800d480 <vPortEnterCritical+0x64>)
 800d442:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d444:	4b0e      	ldr	r3, [pc, #56]	@ (800d480 <vPortEnterCritical+0x64>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	2b01      	cmp	r3, #1
 800d44a:	d112      	bne.n	800d472 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d44c:	4b0d      	ldr	r3, [pc, #52]	@ (800d484 <vPortEnterCritical+0x68>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	b2db      	uxtb	r3, r3
 800d452:	2b00      	cmp	r3, #0
 800d454:	d00d      	beq.n	800d472 <vPortEnterCritical+0x56>
	__asm volatile
 800d456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d45a:	b672      	cpsid	i
 800d45c:	f383 8811 	msr	BASEPRI, r3
 800d460:	f3bf 8f6f 	isb	sy
 800d464:	f3bf 8f4f 	dsb	sy
 800d468:	b662      	cpsie	i
 800d46a:	603b      	str	r3, [r7, #0]
}
 800d46c:	bf00      	nop
 800d46e:	bf00      	nop
 800d470:	e7fd      	b.n	800d46e <vPortEnterCritical+0x52>
	}
}
 800d472:	bf00      	nop
 800d474:	370c      	adds	r7, #12
 800d476:	46bd      	mov	sp, r7
 800d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47c:	4770      	bx	lr
 800d47e:	bf00      	nop
 800d480:	200000ac 	.word	0x200000ac
 800d484:	e000ed04 	.word	0xe000ed04

0800d488 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d48e:	4b13      	ldr	r3, [pc, #76]	@ (800d4dc <vPortExitCritical+0x54>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d10d      	bne.n	800d4b2 <vPortExitCritical+0x2a>
	__asm volatile
 800d496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d49a:	b672      	cpsid	i
 800d49c:	f383 8811 	msr	BASEPRI, r3
 800d4a0:	f3bf 8f6f 	isb	sy
 800d4a4:	f3bf 8f4f 	dsb	sy
 800d4a8:	b662      	cpsie	i
 800d4aa:	607b      	str	r3, [r7, #4]
}
 800d4ac:	bf00      	nop
 800d4ae:	bf00      	nop
 800d4b0:	e7fd      	b.n	800d4ae <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d4b2:	4b0a      	ldr	r3, [pc, #40]	@ (800d4dc <vPortExitCritical+0x54>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	3b01      	subs	r3, #1
 800d4b8:	4a08      	ldr	r2, [pc, #32]	@ (800d4dc <vPortExitCritical+0x54>)
 800d4ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d4bc:	4b07      	ldr	r3, [pc, #28]	@ (800d4dc <vPortExitCritical+0x54>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d105      	bne.n	800d4d0 <vPortExitCritical+0x48>
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	f383 8811 	msr	BASEPRI, r3
}
 800d4ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d4d0:	bf00      	nop
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr
 800d4dc:	200000ac 	.word	0x200000ac

0800d4e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d4e0:	f3ef 8009 	mrs	r0, PSP
 800d4e4:	f3bf 8f6f 	isb	sy
 800d4e8:	4b15      	ldr	r3, [pc, #84]	@ (800d540 <pxCurrentTCBConst>)
 800d4ea:	681a      	ldr	r2, [r3, #0]
 800d4ec:	f01e 0f10 	tst.w	lr, #16
 800d4f0:	bf08      	it	eq
 800d4f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d4f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4fa:	6010      	str	r0, [r2, #0]
 800d4fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d500:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d504:	b672      	cpsid	i
 800d506:	f380 8811 	msr	BASEPRI, r0
 800d50a:	f3bf 8f4f 	dsb	sy
 800d50e:	f3bf 8f6f 	isb	sy
 800d512:	b662      	cpsie	i
 800d514:	f7ff f9d6 	bl	800c8c4 <vTaskSwitchContext>
 800d518:	f04f 0000 	mov.w	r0, #0
 800d51c:	f380 8811 	msr	BASEPRI, r0
 800d520:	bc09      	pop	{r0, r3}
 800d522:	6819      	ldr	r1, [r3, #0]
 800d524:	6808      	ldr	r0, [r1, #0]
 800d526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d52a:	f01e 0f10 	tst.w	lr, #16
 800d52e:	bf08      	it	eq
 800d530:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d534:	f380 8809 	msr	PSP, r0
 800d538:	f3bf 8f6f 	isb	sy
 800d53c:	4770      	bx	lr
 800d53e:	bf00      	nop

0800d540 <pxCurrentTCBConst>:
 800d540:	200009fc 	.word	0x200009fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d544:	bf00      	nop
 800d546:	bf00      	nop

0800d548 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
	__asm volatile
 800d54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d552:	b672      	cpsid	i
 800d554:	f383 8811 	msr	BASEPRI, r3
 800d558:	f3bf 8f6f 	isb	sy
 800d55c:	f3bf 8f4f 	dsb	sy
 800d560:	b662      	cpsie	i
 800d562:	607b      	str	r3, [r7, #4]
}
 800d564:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d566:	f7ff f8f1 	bl	800c74c <xTaskIncrementTick>
 800d56a:	4603      	mov	r3, r0
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d003      	beq.n	800d578 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d570:	4b06      	ldr	r3, [pc, #24]	@ (800d58c <SysTick_Handler+0x44>)
 800d572:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d576:	601a      	str	r2, [r3, #0]
 800d578:	2300      	movs	r3, #0
 800d57a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	f383 8811 	msr	BASEPRI, r3
}
 800d582:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d584:	bf00      	nop
 800d586:	3708      	adds	r7, #8
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	e000ed04 	.word	0xe000ed04

0800d590 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d590:	b480      	push	{r7}
 800d592:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d594:	4b0b      	ldr	r3, [pc, #44]	@ (800d5c4 <vPortSetupTimerInterrupt+0x34>)
 800d596:	2200      	movs	r2, #0
 800d598:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d59a:	4b0b      	ldr	r3, [pc, #44]	@ (800d5c8 <vPortSetupTimerInterrupt+0x38>)
 800d59c:	2200      	movs	r2, #0
 800d59e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d5a0:	4b0a      	ldr	r3, [pc, #40]	@ (800d5cc <vPortSetupTimerInterrupt+0x3c>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4a0a      	ldr	r2, [pc, #40]	@ (800d5d0 <vPortSetupTimerInterrupt+0x40>)
 800d5a6:	fba2 2303 	umull	r2, r3, r2, r3
 800d5aa:	099b      	lsrs	r3, r3, #6
 800d5ac:	4a09      	ldr	r2, [pc, #36]	@ (800d5d4 <vPortSetupTimerInterrupt+0x44>)
 800d5ae:	3b01      	subs	r3, #1
 800d5b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d5b2:	4b04      	ldr	r3, [pc, #16]	@ (800d5c4 <vPortSetupTimerInterrupt+0x34>)
 800d5b4:	2207      	movs	r2, #7
 800d5b6:	601a      	str	r2, [r3, #0]
}
 800d5b8:	bf00      	nop
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c0:	4770      	bx	lr
 800d5c2:	bf00      	nop
 800d5c4:	e000e010 	.word	0xe000e010
 800d5c8:	e000e018 	.word	0xe000e018
 800d5cc:	20000000 	.word	0x20000000
 800d5d0:	10624dd3 	.word	0x10624dd3
 800d5d4:	e000e014 	.word	0xe000e014

0800d5d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d5d8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d5e8 <vPortEnableVFP+0x10>
 800d5dc:	6801      	ldr	r1, [r0, #0]
 800d5de:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d5e2:	6001      	str	r1, [r0, #0]
 800d5e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d5e6:	bf00      	nop
 800d5e8:	e000ed88 	.word	0xe000ed88

0800d5ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b085      	sub	sp, #20
 800d5f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d5f2:	f3ef 8305 	mrs	r3, IPSR
 800d5f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2b0f      	cmp	r3, #15
 800d5fc:	d917      	bls.n	800d62e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d5fe:	4a1a      	ldr	r2, [pc, #104]	@ (800d668 <vPortValidateInterruptPriority+0x7c>)
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	4413      	add	r3, r2
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d608:	4b18      	ldr	r3, [pc, #96]	@ (800d66c <vPortValidateInterruptPriority+0x80>)
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	7afa      	ldrb	r2, [r7, #11]
 800d60e:	429a      	cmp	r2, r3
 800d610:	d20d      	bcs.n	800d62e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800d612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d616:	b672      	cpsid	i
 800d618:	f383 8811 	msr	BASEPRI, r3
 800d61c:	f3bf 8f6f 	isb	sy
 800d620:	f3bf 8f4f 	dsb	sy
 800d624:	b662      	cpsie	i
 800d626:	607b      	str	r3, [r7, #4]
}
 800d628:	bf00      	nop
 800d62a:	bf00      	nop
 800d62c:	e7fd      	b.n	800d62a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d62e:	4b10      	ldr	r3, [pc, #64]	@ (800d670 <vPortValidateInterruptPriority+0x84>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d636:	4b0f      	ldr	r3, [pc, #60]	@ (800d674 <vPortValidateInterruptPriority+0x88>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	429a      	cmp	r2, r3
 800d63c:	d90d      	bls.n	800d65a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800d63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d642:	b672      	cpsid	i
 800d644:	f383 8811 	msr	BASEPRI, r3
 800d648:	f3bf 8f6f 	isb	sy
 800d64c:	f3bf 8f4f 	dsb	sy
 800d650:	b662      	cpsie	i
 800d652:	603b      	str	r3, [r7, #0]
}
 800d654:	bf00      	nop
 800d656:	bf00      	nop
 800d658:	e7fd      	b.n	800d656 <vPortValidateInterruptPriority+0x6a>
	}
 800d65a:	bf00      	nop
 800d65c:	3714      	adds	r7, #20
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr
 800d666:	bf00      	nop
 800d668:	e000e3f0 	.word	0xe000e3f0
 800d66c:	20000b28 	.word	0x20000b28
 800d670:	e000ed0c 	.word	0xe000ed0c
 800d674:	20000b2c 	.word	0x20000b2c

0800d678 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b08a      	sub	sp, #40	@ 0x28
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d680:	2300      	movs	r3, #0
 800d682:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d684:	f7fe ff92 	bl	800c5ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d688:	4b5d      	ldr	r3, [pc, #372]	@ (800d800 <pvPortMalloc+0x188>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d101      	bne.n	800d694 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d690:	f000 f920 	bl	800d8d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d694:	4b5b      	ldr	r3, [pc, #364]	@ (800d804 <pvPortMalloc+0x18c>)
 800d696:	681a      	ldr	r2, [r3, #0]
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	4013      	ands	r3, r2
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	f040 8094 	bne.w	800d7ca <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d020      	beq.n	800d6ea <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800d6a8:	2208      	movs	r2, #8
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	4413      	add	r3, r2
 800d6ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f003 0307 	and.w	r3, r3, #7
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d017      	beq.n	800d6ea <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f023 0307 	bic.w	r3, r3, #7
 800d6c0:	3308      	adds	r3, #8
 800d6c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f003 0307 	and.w	r3, r3, #7
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d00d      	beq.n	800d6ea <pvPortMalloc+0x72>
	__asm volatile
 800d6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d2:	b672      	cpsid	i
 800d6d4:	f383 8811 	msr	BASEPRI, r3
 800d6d8:	f3bf 8f6f 	isb	sy
 800d6dc:	f3bf 8f4f 	dsb	sy
 800d6e0:	b662      	cpsie	i
 800d6e2:	617b      	str	r3, [r7, #20]
}
 800d6e4:	bf00      	nop
 800d6e6:	bf00      	nop
 800d6e8:	e7fd      	b.n	800d6e6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d06c      	beq.n	800d7ca <pvPortMalloc+0x152>
 800d6f0:	4b45      	ldr	r3, [pc, #276]	@ (800d808 <pvPortMalloc+0x190>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d867      	bhi.n	800d7ca <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d6fa:	4b44      	ldr	r3, [pc, #272]	@ (800d80c <pvPortMalloc+0x194>)
 800d6fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d6fe:	4b43      	ldr	r3, [pc, #268]	@ (800d80c <pvPortMalloc+0x194>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d704:	e004      	b.n	800d710 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800d706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d708:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	429a      	cmp	r2, r3
 800d718:	d903      	bls.n	800d722 <pvPortMalloc+0xaa>
 800d71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d1f1      	bne.n	800d706 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d722:	4b37      	ldr	r3, [pc, #220]	@ (800d800 <pvPortMalloc+0x188>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d728:	429a      	cmp	r2, r3
 800d72a:	d04e      	beq.n	800d7ca <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d72c:	6a3b      	ldr	r3, [r7, #32]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	2208      	movs	r2, #8
 800d732:	4413      	add	r3, r2
 800d734:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d738:	681a      	ldr	r2, [r3, #0]
 800d73a:	6a3b      	ldr	r3, [r7, #32]
 800d73c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d740:	685a      	ldr	r2, [r3, #4]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	1ad2      	subs	r2, r2, r3
 800d746:	2308      	movs	r3, #8
 800d748:	005b      	lsls	r3, r3, #1
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d922      	bls.n	800d794 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d74e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	4413      	add	r3, r2
 800d754:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	f003 0307 	and.w	r3, r3, #7
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d00d      	beq.n	800d77c <pvPortMalloc+0x104>
	__asm volatile
 800d760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d764:	b672      	cpsid	i
 800d766:	f383 8811 	msr	BASEPRI, r3
 800d76a:	f3bf 8f6f 	isb	sy
 800d76e:	f3bf 8f4f 	dsb	sy
 800d772:	b662      	cpsie	i
 800d774:	613b      	str	r3, [r7, #16]
}
 800d776:	bf00      	nop
 800d778:	bf00      	nop
 800d77a:	e7fd      	b.n	800d778 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77e:	685a      	ldr	r2, [r3, #4]
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	1ad2      	subs	r2, r2, r3
 800d784:	69bb      	ldr	r3, [r7, #24]
 800d786:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d78a:	687a      	ldr	r2, [r7, #4]
 800d78c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d78e:	69b8      	ldr	r0, [r7, #24]
 800d790:	f000 f902 	bl	800d998 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d794:	4b1c      	ldr	r3, [pc, #112]	@ (800d808 <pvPortMalloc+0x190>)
 800d796:	681a      	ldr	r2, [r3, #0]
 800d798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d79a:	685b      	ldr	r3, [r3, #4]
 800d79c:	1ad3      	subs	r3, r2, r3
 800d79e:	4a1a      	ldr	r2, [pc, #104]	@ (800d808 <pvPortMalloc+0x190>)
 800d7a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d7a2:	4b19      	ldr	r3, [pc, #100]	@ (800d808 <pvPortMalloc+0x190>)
 800d7a4:	681a      	ldr	r2, [r3, #0]
 800d7a6:	4b1a      	ldr	r3, [pc, #104]	@ (800d810 <pvPortMalloc+0x198>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	d203      	bcs.n	800d7b6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d7ae:	4b16      	ldr	r3, [pc, #88]	@ (800d808 <pvPortMalloc+0x190>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	4a17      	ldr	r2, [pc, #92]	@ (800d810 <pvPortMalloc+0x198>)
 800d7b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7b8:	685a      	ldr	r2, [r3, #4]
 800d7ba:	4b12      	ldr	r3, [pc, #72]	@ (800d804 <pvPortMalloc+0x18c>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	431a      	orrs	r2, r3
 800d7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d7ca:	f7fe fefd 	bl	800c5c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7ce:	69fb      	ldr	r3, [r7, #28]
 800d7d0:	f003 0307 	and.w	r3, r3, #7
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d00d      	beq.n	800d7f4 <pvPortMalloc+0x17c>
	__asm volatile
 800d7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7dc:	b672      	cpsid	i
 800d7de:	f383 8811 	msr	BASEPRI, r3
 800d7e2:	f3bf 8f6f 	isb	sy
 800d7e6:	f3bf 8f4f 	dsb	sy
 800d7ea:	b662      	cpsie	i
 800d7ec:	60fb      	str	r3, [r7, #12]
}
 800d7ee:	bf00      	nop
 800d7f0:	bf00      	nop
 800d7f2:	e7fd      	b.n	800d7f0 <pvPortMalloc+0x178>
	return pvReturn;
 800d7f4:	69fb      	ldr	r3, [r7, #28]
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3728      	adds	r7, #40	@ 0x28
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
 800d7fe:	bf00      	nop
 800d800:	20004738 	.word	0x20004738
 800d804:	20004744 	.word	0x20004744
 800d808:	2000473c 	.word	0x2000473c
 800d80c:	20004730 	.word	0x20004730
 800d810:	20004740 	.word	0x20004740

0800d814 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b086      	sub	sp, #24
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d04e      	beq.n	800d8c4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d826:	2308      	movs	r3, #8
 800d828:	425b      	negs	r3, r3
 800d82a:	697a      	ldr	r2, [r7, #20]
 800d82c:	4413      	add	r3, r2
 800d82e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	685a      	ldr	r2, [r3, #4]
 800d838:	4b24      	ldr	r3, [pc, #144]	@ (800d8cc <vPortFree+0xb8>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	4013      	ands	r3, r2
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d10d      	bne.n	800d85e <vPortFree+0x4a>
	__asm volatile
 800d842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d846:	b672      	cpsid	i
 800d848:	f383 8811 	msr	BASEPRI, r3
 800d84c:	f3bf 8f6f 	isb	sy
 800d850:	f3bf 8f4f 	dsb	sy
 800d854:	b662      	cpsie	i
 800d856:	60fb      	str	r3, [r7, #12]
}
 800d858:	bf00      	nop
 800d85a:	bf00      	nop
 800d85c:	e7fd      	b.n	800d85a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d00d      	beq.n	800d882 <vPortFree+0x6e>
	__asm volatile
 800d866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d86a:	b672      	cpsid	i
 800d86c:	f383 8811 	msr	BASEPRI, r3
 800d870:	f3bf 8f6f 	isb	sy
 800d874:	f3bf 8f4f 	dsb	sy
 800d878:	b662      	cpsie	i
 800d87a:	60bb      	str	r3, [r7, #8]
}
 800d87c:	bf00      	nop
 800d87e:	bf00      	nop
 800d880:	e7fd      	b.n	800d87e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	685a      	ldr	r2, [r3, #4]
 800d886:	4b11      	ldr	r3, [pc, #68]	@ (800d8cc <vPortFree+0xb8>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4013      	ands	r3, r2
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d019      	beq.n	800d8c4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d890:	693b      	ldr	r3, [r7, #16]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d115      	bne.n	800d8c4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d898:	693b      	ldr	r3, [r7, #16]
 800d89a:	685a      	ldr	r2, [r3, #4]
 800d89c:	4b0b      	ldr	r3, [pc, #44]	@ (800d8cc <vPortFree+0xb8>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	43db      	mvns	r3, r3
 800d8a2:	401a      	ands	r2, r3
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d8a8:	f7fe fe80 	bl	800c5ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	685a      	ldr	r2, [r3, #4]
 800d8b0:	4b07      	ldr	r3, [pc, #28]	@ (800d8d0 <vPortFree+0xbc>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4413      	add	r3, r2
 800d8b6:	4a06      	ldr	r2, [pc, #24]	@ (800d8d0 <vPortFree+0xbc>)
 800d8b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d8ba:	6938      	ldr	r0, [r7, #16]
 800d8bc:	f000 f86c 	bl	800d998 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d8c0:	f7fe fe82 	bl	800c5c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d8c4:	bf00      	nop
 800d8c6:	3718      	adds	r7, #24
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}
 800d8cc:	20004744 	.word	0x20004744
 800d8d0:	2000473c 	.word	0x2000473c

0800d8d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b085      	sub	sp, #20
 800d8d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d8da:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d8de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d8e0:	4b27      	ldr	r3, [pc, #156]	@ (800d980 <prvHeapInit+0xac>)
 800d8e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f003 0307 	and.w	r3, r3, #7
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d00c      	beq.n	800d908 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	3307      	adds	r3, #7
 800d8f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f023 0307 	bic.w	r3, r3, #7
 800d8fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d8fc:	68ba      	ldr	r2, [r7, #8]
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	1ad3      	subs	r3, r2, r3
 800d902:	4a1f      	ldr	r2, [pc, #124]	@ (800d980 <prvHeapInit+0xac>)
 800d904:	4413      	add	r3, r2
 800d906:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d90c:	4a1d      	ldr	r2, [pc, #116]	@ (800d984 <prvHeapInit+0xb0>)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d912:	4b1c      	ldr	r3, [pc, #112]	@ (800d984 <prvHeapInit+0xb0>)
 800d914:	2200      	movs	r2, #0
 800d916:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	68ba      	ldr	r2, [r7, #8]
 800d91c:	4413      	add	r3, r2
 800d91e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d920:	2208      	movs	r2, #8
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	1a9b      	subs	r3, r3, r2
 800d926:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	f023 0307 	bic.w	r3, r3, #7
 800d92e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	4a15      	ldr	r2, [pc, #84]	@ (800d988 <prvHeapInit+0xb4>)
 800d934:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d936:	4b14      	ldr	r3, [pc, #80]	@ (800d988 <prvHeapInit+0xb4>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	2200      	movs	r2, #0
 800d93c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d93e:	4b12      	ldr	r3, [pc, #72]	@ (800d988 <prvHeapInit+0xb4>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	2200      	movs	r2, #0
 800d944:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	68fa      	ldr	r2, [r7, #12]
 800d94e:	1ad2      	subs	r2, r2, r3
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d954:	4b0c      	ldr	r3, [pc, #48]	@ (800d988 <prvHeapInit+0xb4>)
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	685b      	ldr	r3, [r3, #4]
 800d960:	4a0a      	ldr	r2, [pc, #40]	@ (800d98c <prvHeapInit+0xb8>)
 800d962:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	685b      	ldr	r3, [r3, #4]
 800d968:	4a09      	ldr	r2, [pc, #36]	@ (800d990 <prvHeapInit+0xbc>)
 800d96a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d96c:	4b09      	ldr	r3, [pc, #36]	@ (800d994 <prvHeapInit+0xc0>)
 800d96e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d972:	601a      	str	r2, [r3, #0]
}
 800d974:	bf00      	nop
 800d976:	3714      	adds	r7, #20
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr
 800d980:	20000b30 	.word	0x20000b30
 800d984:	20004730 	.word	0x20004730
 800d988:	20004738 	.word	0x20004738
 800d98c:	20004740 	.word	0x20004740
 800d990:	2000473c 	.word	0x2000473c
 800d994:	20004744 	.word	0x20004744

0800d998 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d998:	b480      	push	{r7}
 800d99a:	b085      	sub	sp, #20
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d9a0:	4b28      	ldr	r3, [pc, #160]	@ (800da44 <prvInsertBlockIntoFreeList+0xac>)
 800d9a2:	60fb      	str	r3, [r7, #12]
 800d9a4:	e002      	b.n	800d9ac <prvInsertBlockIntoFreeList+0x14>
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	60fb      	str	r3, [r7, #12]
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d8f7      	bhi.n	800d9a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	68ba      	ldr	r2, [r7, #8]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	687a      	ldr	r2, [r7, #4]
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d108      	bne.n	800d9da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	685a      	ldr	r2, [r3, #4]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	441a      	add	r2, r3
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	685b      	ldr	r3, [r3, #4]
 800d9e2:	68ba      	ldr	r2, [r7, #8]
 800d9e4:	441a      	add	r2, r3
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d118      	bne.n	800da20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	4b15      	ldr	r3, [pc, #84]	@ (800da48 <prvInsertBlockIntoFreeList+0xb0>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d00d      	beq.n	800da16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	685a      	ldr	r2, [r3, #4]
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	685b      	ldr	r3, [r3, #4]
 800da04:	441a      	add	r2, r3
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	681a      	ldr	r2, [r3, #0]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	601a      	str	r2, [r3, #0]
 800da14:	e008      	b.n	800da28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800da16:	4b0c      	ldr	r3, [pc, #48]	@ (800da48 <prvInsertBlockIntoFreeList+0xb0>)
 800da18:	681a      	ldr	r2, [r3, #0]
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	601a      	str	r2, [r3, #0]
 800da1e:	e003      	b.n	800da28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681a      	ldr	r2, [r3, #0]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800da28:	68fa      	ldr	r2, [r7, #12]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d002      	beq.n	800da36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da36:	bf00      	nop
 800da38:	3714      	adds	r7, #20
 800da3a:	46bd      	mov	sp, r7
 800da3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da40:	4770      	bx	lr
 800da42:	bf00      	nop
 800da44:	20004730 	.word	0x20004730
 800da48:	20004738 	.word	0x20004738

0800da4c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800da56:	f00d f9d1 	bl	801adfc <sys_timeouts_sleeptime>
 800da5a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da62:	d10b      	bne.n	800da7c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800da64:	4813      	ldr	r0, [pc, #76]	@ (800dab4 <tcpip_timeouts_mbox_fetch+0x68>)
 800da66:	f012 fd00 	bl	802046a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800da6a:	2200      	movs	r2, #0
 800da6c:	6839      	ldr	r1, [r7, #0]
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f012 fc72 	bl	8020358 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800da74:	480f      	ldr	r0, [pc, #60]	@ (800dab4 <tcpip_timeouts_mbox_fetch+0x68>)
 800da76:	f012 fce9 	bl	802044c <sys_mutex_lock>
    return;
 800da7a:	e018      	b.n	800daae <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d102      	bne.n	800da88 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800da82:	f00d f981 	bl	801ad88 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800da86:	e7e6      	b.n	800da56 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800da88:	480a      	ldr	r0, [pc, #40]	@ (800dab4 <tcpip_timeouts_mbox_fetch+0x68>)
 800da8a:	f012 fcee 	bl	802046a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800da8e:	68fa      	ldr	r2, [r7, #12]
 800da90:	6839      	ldr	r1, [r7, #0]
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f012 fc60 	bl	8020358 <sys_arch_mbox_fetch>
 800da98:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800da9a:	4806      	ldr	r0, [pc, #24]	@ (800dab4 <tcpip_timeouts_mbox_fetch+0x68>)
 800da9c:	f012 fcd6 	bl	802044c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800daa6:	d102      	bne.n	800daae <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800daa8:	f00d f96e 	bl	801ad88 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800daac:	e7d3      	b.n	800da56 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800daae:	3710      	adds	r7, #16
 800dab0:	46bd      	mov	sp, r7
 800dab2:	bd80      	pop	{r7, pc}
 800dab4:	20004754 	.word	0x20004754

0800dab8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b084      	sub	sp, #16
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800dac0:	4810      	ldr	r0, [pc, #64]	@ (800db04 <tcpip_thread+0x4c>)
 800dac2:	f012 fcc3 	bl	802044c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800dac6:	4b10      	ldr	r3, [pc, #64]	@ (800db08 <tcpip_thread+0x50>)
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d005      	beq.n	800dada <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800dace:	4b0e      	ldr	r3, [pc, #56]	@ (800db08 <tcpip_thread+0x50>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	4a0e      	ldr	r2, [pc, #56]	@ (800db0c <tcpip_thread+0x54>)
 800dad4:	6812      	ldr	r2, [r2, #0]
 800dad6:	4610      	mov	r0, r2
 800dad8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800dada:	f107 030c 	add.w	r3, r7, #12
 800dade:	4619      	mov	r1, r3
 800dae0:	480b      	ldr	r0, [pc, #44]	@ (800db10 <tcpip_thread+0x58>)
 800dae2:	f7ff ffb3 	bl	800da4c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d106      	bne.n	800dafa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800daec:	4b09      	ldr	r3, [pc, #36]	@ (800db14 <tcpip_thread+0x5c>)
 800daee:	2291      	movs	r2, #145	@ 0x91
 800daf0:	4909      	ldr	r1, [pc, #36]	@ (800db18 <tcpip_thread+0x60>)
 800daf2:	480a      	ldr	r0, [pc, #40]	@ (800db1c <tcpip_thread+0x64>)
 800daf4:	f013 fc5e 	bl	80213b4 <iprintf>
      continue;
 800daf8:	e003      	b.n	800db02 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	4618      	mov	r0, r3
 800dafe:	f000 f80f 	bl	800db20 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800db02:	e7ea      	b.n	800dada <tcpip_thread+0x22>
 800db04:	20004754 	.word	0x20004754
 800db08:	20004748 	.word	0x20004748
 800db0c:	2000474c 	.word	0x2000474c
 800db10:	20004750 	.word	0x20004750
 800db14:	08022820 	.word	0x08022820
 800db18:	08022850 	.word	0x08022850
 800db1c:	08022870 	.word	0x08022870

0800db20 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b082      	sub	sp, #8
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	2b02      	cmp	r3, #2
 800db2e:	d026      	beq.n	800db7e <tcpip_thread_handle_msg+0x5e>
 800db30:	2b02      	cmp	r3, #2
 800db32:	dc2b      	bgt.n	800db8c <tcpip_thread_handle_msg+0x6c>
 800db34:	2b00      	cmp	r3, #0
 800db36:	d002      	beq.n	800db3e <tcpip_thread_handle_msg+0x1e>
 800db38:	2b01      	cmp	r3, #1
 800db3a:	d015      	beq.n	800db68 <tcpip_thread_handle_msg+0x48>
 800db3c:	e026      	b.n	800db8c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	68db      	ldr	r3, [r3, #12]
 800db42:	687a      	ldr	r2, [r7, #4]
 800db44:	6850      	ldr	r0, [r2, #4]
 800db46:	687a      	ldr	r2, [r7, #4]
 800db48:	6892      	ldr	r2, [r2, #8]
 800db4a:	4611      	mov	r1, r2
 800db4c:	4798      	blx	r3
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d004      	beq.n	800db5e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	4618      	mov	r0, r3
 800db5a:	f006 fb0d 	bl	8014178 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800db5e:	6879      	ldr	r1, [r7, #4]
 800db60:	2009      	movs	r0, #9
 800db62:	f005 fc1d 	bl	80133a0 <memp_free>
      break;
 800db66:	e018      	b.n	800db9a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	685b      	ldr	r3, [r3, #4]
 800db6c:	687a      	ldr	r2, [r7, #4]
 800db6e:	6892      	ldr	r2, [r2, #8]
 800db70:	4610      	mov	r0, r2
 800db72:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800db74:	6879      	ldr	r1, [r7, #4]
 800db76:	2008      	movs	r0, #8
 800db78:	f005 fc12 	bl	80133a0 <memp_free>
      break;
 800db7c:	e00d      	b.n	800db9a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	685b      	ldr	r3, [r3, #4]
 800db82:	687a      	ldr	r2, [r7, #4]
 800db84:	6892      	ldr	r2, [r2, #8]
 800db86:	4610      	mov	r0, r2
 800db88:	4798      	blx	r3
      break;
 800db8a:	e006      	b.n	800db9a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800db8c:	4b05      	ldr	r3, [pc, #20]	@ (800dba4 <tcpip_thread_handle_msg+0x84>)
 800db8e:	22cf      	movs	r2, #207	@ 0xcf
 800db90:	4905      	ldr	r1, [pc, #20]	@ (800dba8 <tcpip_thread_handle_msg+0x88>)
 800db92:	4806      	ldr	r0, [pc, #24]	@ (800dbac <tcpip_thread_handle_msg+0x8c>)
 800db94:	f013 fc0e 	bl	80213b4 <iprintf>
      break;
 800db98:	bf00      	nop
  }
}
 800db9a:	bf00      	nop
 800db9c:	3708      	adds	r7, #8
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	08022820 	.word	0x08022820
 800dba8:	08022850 	.word	0x08022850
 800dbac:	08022870 	.word	0x08022870

0800dbb0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b086      	sub	sp, #24
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	60f8      	str	r0, [r7, #12]
 800dbb8:	60b9      	str	r1, [r7, #8]
 800dbba:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800dbbc:	481a      	ldr	r0, [pc, #104]	@ (800dc28 <tcpip_inpkt+0x78>)
 800dbbe:	f012 fc0a 	bl	80203d6 <sys_mbox_valid>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d105      	bne.n	800dbd4 <tcpip_inpkt+0x24>
 800dbc8:	4b18      	ldr	r3, [pc, #96]	@ (800dc2c <tcpip_inpkt+0x7c>)
 800dbca:	22fc      	movs	r2, #252	@ 0xfc
 800dbcc:	4918      	ldr	r1, [pc, #96]	@ (800dc30 <tcpip_inpkt+0x80>)
 800dbce:	4819      	ldr	r0, [pc, #100]	@ (800dc34 <tcpip_inpkt+0x84>)
 800dbd0:	f013 fbf0 	bl	80213b4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800dbd4:	2009      	movs	r0, #9
 800dbd6:	f005 fb73 	bl	80132c0 <memp_malloc>
 800dbda:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d102      	bne.n	800dbe8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800dbe2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dbe6:	e01a      	b.n	800dc1e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	2200      	movs	r2, #0
 800dbec:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	68fa      	ldr	r2, [r7, #12]
 800dbf2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	68ba      	ldr	r2, [r7, #8]
 800dbf8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800dc00:	6979      	ldr	r1, [r7, #20]
 800dc02:	4809      	ldr	r0, [pc, #36]	@ (800dc28 <tcpip_inpkt+0x78>)
 800dc04:	f012 fb8e 	bl	8020324 <sys_mbox_trypost>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d006      	beq.n	800dc1c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800dc0e:	6979      	ldr	r1, [r7, #20]
 800dc10:	2009      	movs	r0, #9
 800dc12:	f005 fbc5 	bl	80133a0 <memp_free>
    return ERR_MEM;
 800dc16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dc1a:	e000      	b.n	800dc1e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800dc1c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3718      	adds	r7, #24
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}
 800dc26:	bf00      	nop
 800dc28:	20004750 	.word	0x20004750
 800dc2c:	08022820 	.word	0x08022820
 800dc30:	08022898 	.word	0x08022898
 800dc34:	08022870 	.word	0x08022870

0800dc38 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b082      	sub	sp, #8
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800dc48:	f003 0318 	and.w	r3, r3, #24
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d006      	beq.n	800dc5e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800dc50:	4a08      	ldr	r2, [pc, #32]	@ (800dc74 <tcpip_input+0x3c>)
 800dc52:	6839      	ldr	r1, [r7, #0]
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f7ff ffab 	bl	800dbb0 <tcpip_inpkt>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	e005      	b.n	800dc6a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800dc5e:	4a06      	ldr	r2, [pc, #24]	@ (800dc78 <tcpip_input+0x40>)
 800dc60:	6839      	ldr	r1, [r7, #0]
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f7ff ffa4 	bl	800dbb0 <tcpip_inpkt>
 800dc68:	4603      	mov	r3, r0
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3708      	adds	r7, #8
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	bf00      	nop
 800dc74:	08020135 	.word	0x08020135
 800dc78:	0801eea5 	.word	0x0801eea5

0800dc7c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b084      	sub	sp, #16
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800dc86:	4819      	ldr	r0, [pc, #100]	@ (800dcec <tcpip_try_callback+0x70>)
 800dc88:	f012 fba5 	bl	80203d6 <sys_mbox_valid>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d106      	bne.n	800dca0 <tcpip_try_callback+0x24>
 800dc92:	4b17      	ldr	r3, [pc, #92]	@ (800dcf0 <tcpip_try_callback+0x74>)
 800dc94:	f240 125d 	movw	r2, #349	@ 0x15d
 800dc98:	4916      	ldr	r1, [pc, #88]	@ (800dcf4 <tcpip_try_callback+0x78>)
 800dc9a:	4817      	ldr	r0, [pc, #92]	@ (800dcf8 <tcpip_try_callback+0x7c>)
 800dc9c:	f013 fb8a 	bl	80213b4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800dca0:	2008      	movs	r0, #8
 800dca2:	f005 fb0d 	bl	80132c0 <memp_malloc>
 800dca6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d102      	bne.n	800dcb4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800dcae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dcb2:	e017      	b.n	800dce4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	687a      	ldr	r2, [r7, #4]
 800dcbe:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	683a      	ldr	r2, [r7, #0]
 800dcc4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800dcc6:	68f9      	ldr	r1, [r7, #12]
 800dcc8:	4808      	ldr	r0, [pc, #32]	@ (800dcec <tcpip_try_callback+0x70>)
 800dcca:	f012 fb2b 	bl	8020324 <sys_mbox_trypost>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d006      	beq.n	800dce2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800dcd4:	68f9      	ldr	r1, [r7, #12]
 800dcd6:	2008      	movs	r0, #8
 800dcd8:	f005 fb62 	bl	80133a0 <memp_free>
    return ERR_MEM;
 800dcdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dce0:	e000      	b.n	800dce4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800dce2:	2300      	movs	r3, #0
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3710      	adds	r7, #16
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}
 800dcec:	20004750 	.word	0x20004750
 800dcf0:	08022820 	.word	0x08022820
 800dcf4:	08022898 	.word	0x08022898
 800dcf8:	08022870 	.word	0x08022870

0800dcfc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b084      	sub	sp, #16
 800dd00:	af02      	add	r7, sp, #8
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
  lwip_init();
 800dd06:	f004 fe30 	bl	801296a <lwip_init>

  tcpip_init_done = initfunc;
 800dd0a:	4a17      	ldr	r2, [pc, #92]	@ (800dd68 <tcpip_init+0x6c>)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800dd10:	4a16      	ldr	r2, [pc, #88]	@ (800dd6c <tcpip_init+0x70>)
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800dd16:	2106      	movs	r1, #6
 800dd18:	4815      	ldr	r0, [pc, #84]	@ (800dd70 <tcpip_init+0x74>)
 800dd1a:	f012 fae1 	bl	80202e0 <sys_mbox_new>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d006      	beq.n	800dd32 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800dd24:	4b13      	ldr	r3, [pc, #76]	@ (800dd74 <tcpip_init+0x78>)
 800dd26:	f240 2261 	movw	r2, #609	@ 0x261
 800dd2a:	4913      	ldr	r1, [pc, #76]	@ (800dd78 <tcpip_init+0x7c>)
 800dd2c:	4813      	ldr	r0, [pc, #76]	@ (800dd7c <tcpip_init+0x80>)
 800dd2e:	f013 fb41 	bl	80213b4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800dd32:	4813      	ldr	r0, [pc, #76]	@ (800dd80 <tcpip_init+0x84>)
 800dd34:	f012 fb6e 	bl	8020414 <sys_mutex_new>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d006      	beq.n	800dd4c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800dd3e:	4b0d      	ldr	r3, [pc, #52]	@ (800dd74 <tcpip_init+0x78>)
 800dd40:	f240 2265 	movw	r2, #613	@ 0x265
 800dd44:	490f      	ldr	r1, [pc, #60]	@ (800dd84 <tcpip_init+0x88>)
 800dd46:	480d      	ldr	r0, [pc, #52]	@ (800dd7c <tcpip_init+0x80>)
 800dd48:	f013 fb34 	bl	80213b4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	9300      	str	r3, [sp, #0]
 800dd50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd54:	2200      	movs	r2, #0
 800dd56:	490c      	ldr	r1, [pc, #48]	@ (800dd88 <tcpip_init+0x8c>)
 800dd58:	480c      	ldr	r0, [pc, #48]	@ (800dd8c <tcpip_init+0x90>)
 800dd5a:	f012 fb93 	bl	8020484 <sys_thread_new>
}
 800dd5e:	bf00      	nop
 800dd60:	3708      	adds	r7, #8
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
 800dd66:	bf00      	nop
 800dd68:	20004748 	.word	0x20004748
 800dd6c:	2000474c 	.word	0x2000474c
 800dd70:	20004750 	.word	0x20004750
 800dd74:	08022820 	.word	0x08022820
 800dd78:	080228a8 	.word	0x080228a8
 800dd7c:	08022870 	.word	0x08022870
 800dd80:	20004754 	.word	0x20004754
 800dd84:	080228cc 	.word	0x080228cc
 800dd88:	0800dab9 	.word	0x0800dab9
 800dd8c:	080228f0 	.word	0x080228f0

0800dd90 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d002      	beq.n	800dda6 <fs_open+0x16>
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d102      	bne.n	800ddac <fs_open+0x1c>
    return ERR_ARG;
 800dda6:	f06f 030f 	mvn.w	r3, #15
 800ddaa:	e028      	b.n	800ddfe <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800ddac:	4b16      	ldr	r3, [pc, #88]	@ (800de08 <fs_open+0x78>)
 800ddae:	60fb      	str	r3, [r7, #12]
 800ddb0:	e020      	b.n	800ddf4 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	685b      	ldr	r3, [r3, #4]
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	6838      	ldr	r0, [r7, #0]
 800ddba:	f7f2 fa41 	bl	8000240 <strcmp>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d114      	bne.n	800ddee <fs_open+0x5e>
      file->data = (const char *)f->data;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	689a      	ldr	r2, [r3, #8]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	68da      	ldr	r2, [r3, #12]
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	68da      	ldr	r2, [r3, #12]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2200      	movs	r2, #0
 800dde0:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	7c1a      	ldrb	r2, [r3, #16]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800ddea:	2300      	movs	r3, #0
 800ddec:	e007      	b.n	800ddfe <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	60fb      	str	r3, [r7, #12]
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d1db      	bne.n	800ddb2 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800ddfa:	f06f 0305 	mvn.w	r3, #5
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3710      	adds	r7, #16
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	08027588 	.word	0x08027588

0800de0c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b083      	sub	sp, #12
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800de14:	bf00      	nop
 800de16:	370c      	adds	r7, #12
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr

0800de20 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800de20:	b480      	push	{r7}
 800de22:	b083      	sub	sp, #12
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	685a      	ldr	r2, [r3, #4]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	689b      	ldr	r3, [r3, #8]
 800de30:	1ad3      	subs	r3, r2, r3
}
 800de32:	4618      	mov	r0, r3
 800de34:	370c      	adds	r7, #12
 800de36:	46bd      	mov	sp, r7
 800de38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3c:	4770      	bx	lr

0800de3e <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 800de3e:	b580      	push	{r7, lr}
 800de40:	b082      	sub	sp, #8
 800de42:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 800de44:	20e0      	movs	r0, #224	@ 0xe0
 800de46:	f005 f893 	bl	8012f70 <mem_malloc>
 800de4a:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d004      	beq.n	800de5c <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 800de52:	22e0      	movs	r2, #224	@ 0xe0
 800de54:	2100      	movs	r1, #0
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f013 fc7c 	bl	8021754 <memset>
  }
  return ret;
 800de5c:	687b      	ldr	r3, [r7, #4]
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3708      	adds	r7, #8
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}

0800de66 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 800de66:	b580      	push	{r7, lr}
 800de68:	b082      	sub	sp, #8
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d002      	beq.n	800de7a <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f004 fee1 	bl	8012c3c <mem_free>
  }
}
 800de7a:	bf00      	nop
 800de7c:	3708      	adds	r7, #8
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}

0800de82 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800de82:	b580      	push	{r7, lr}
 800de84:	b082      	sub	sp, #8
 800de86:	af00      	add	r7, sp, #0
 800de88:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800de8a:	22d4      	movs	r2, #212	@ 0xd4
 800de8c:	2100      	movs	r1, #0
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f013 fc60 	bl	8021754 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2205      	movs	r2, #5
 800de98:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800de9c:	bf00      	nop
 800de9e:	3708      	adds	r7, #8
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800deaa:	20d4      	movs	r0, #212	@ 0xd4
 800deac:	f005 f860 	bl	8012f70 <mem_malloc>
 800deb0:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d002      	beq.n	800debe <http_state_alloc+0x1a>
    http_state_init(ret);
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f7ff ffe2 	bl	800de82 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800debe:	687b      	ldr	r3, [r7, #4]
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	3708      	adds	r7, #8
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}

0800dec8 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	695b      	ldr	r3, [r3, #20]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d007      	beq.n	800dee8 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	695b      	ldr	r3, [r3, #20]
 800dedc:	4618      	mov	r0, r3
 800dede:	f7ff ff95 	bl	800de0c <fs_close>
    hs->handle = NULL;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2200      	movs	r2, #0
 800dee6:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800deec:	2b00      	cmp	r3, #0
 800deee:	d007      	beq.n	800df00 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800def4:	4618      	mov	r0, r3
 800def6:	f7ff ffb6 	bl	800de66 <http_ssi_state_free>
    hs->ssi = NULL;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2200      	movs	r2, #0
 800defe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6a1b      	ldr	r3, [r3, #32]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d007      	beq.n	800df18 <http_state_eof+0x50>
    pbuf_free(hs->req);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6a1b      	ldr	r3, [r3, #32]
 800df0c:	4618      	mov	r0, r3
 800df0e:	f006 f933 	bl	8014178 <pbuf_free>
    hs->req = NULL;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2200      	movs	r2, #0
 800df16:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800df18:	bf00      	nop
 800df1a:	3708      	adds	r7, #8
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d005      	beq.n	800df3a <http_state_free+0x1a>
    http_state_eof(hs);
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f7ff ffca 	bl	800dec8 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f004 fe81 	bl	8012c3c <mem_free>
  }
}
 800df3a:	bf00      	nop
 800df3c:	3708      	adds	r7, #8
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
	...

0800df44 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b086      	sub	sp, #24
 800df48:	af00      	add	r7, sp, #0
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	60b9      	str	r1, [r7, #8]
 800df4e:	607a      	str	r2, [r7, #4]
 800df50:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d106      	bne.n	800df66 <http_write+0x22>
 800df58:	4b2c      	ldr	r3, [pc, #176]	@ (800e00c <http_write+0xc8>)
 800df5a:	f240 2219 	movw	r2, #537	@ 0x219
 800df5e:	492c      	ldr	r1, [pc, #176]	@ (800e010 <http_write+0xcc>)
 800df60:	482c      	ldr	r0, [pc, #176]	@ (800e014 <http_write+0xd0>)
 800df62:	f013 fa27 	bl	80213b4 <iprintf>
  len = *length;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	881b      	ldrh	r3, [r3, #0]
 800df6a:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800df6c:	8afb      	ldrh	r3, [r7, #22]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d101      	bne.n	800df76 <http_write+0x32>
    return ERR_OK;
 800df72:	2300      	movs	r3, #0
 800df74:	e045      	b.n	800e002 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800df7c:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800df7e:	8aba      	ldrh	r2, [r7, #20]
 800df80:	8afb      	ldrh	r3, [r7, #22]
 800df82:	429a      	cmp	r2, r3
 800df84:	d201      	bcs.n	800df8a <http_write+0x46>
    len = max_len;
 800df86:	8abb      	ldrh	r3, [r7, #20]
 800df88:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800df8e:	005b      	lsls	r3, r3, #1
 800df90:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800df92:	8afa      	ldrh	r2, [r7, #22]
 800df94:	8abb      	ldrh	r3, [r7, #20]
 800df96:	429a      	cmp	r2, r3
 800df98:	d901      	bls.n	800df9e <http_write+0x5a>
    len = max_len;
 800df9a:	8abb      	ldrh	r3, [r7, #20]
 800df9c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800df9e:	78fb      	ldrb	r3, [r7, #3]
 800dfa0:	8afa      	ldrh	r2, [r7, #22]
 800dfa2:	68b9      	ldr	r1, [r7, #8]
 800dfa4:	68f8      	ldr	r0, [r7, #12]
 800dfa6:	f00b f84d 	bl	8019044 <tcp_write>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800dfae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dfb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dfb6:	d10f      	bne.n	800dfd8 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d004      	beq.n	800dfcc <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800dfc8:	2b08      	cmp	r3, #8
 800dfca:	d902      	bls.n	800dfd2 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800dfcc:	2301      	movs	r3, #1
 800dfce:	82fb      	strh	r3, [r7, #22]
 800dfd0:	e002      	b.n	800dfd8 <http_write+0x94>
      } else {
        len /= 2;
 800dfd2:	8afb      	ldrh	r3, [r7, #22]
 800dfd4:	085b      	lsrs	r3, r3, #1
 800dfd6:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800dfd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dfdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dfe0:	d102      	bne.n	800dfe8 <http_write+0xa4>
 800dfe2:	8afb      	ldrh	r3, [r7, #22]
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	d8da      	bhi.n	800df9e <http_write+0x5a>

  if (err == ERR_OK) {
 800dfe8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d103      	bne.n	800dff8 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	8afa      	ldrh	r2, [r7, #22]
 800dff4:	801a      	strh	r2, [r3, #0]
 800dff6:	e002      	b.n	800dffe <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2200      	movs	r2, #0
 800dffc:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800dffe:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e002:	4618      	mov	r0, r3
 800e004:	3718      	adds	r7, #24
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
 800e00a:	bf00      	nop
 800e00c:	08022dd0 	.word	0x08022dd0
 800e010:	08022e08 	.word	0x08022e08
 800e014:	08022e18 	.word	0x08022e18

0800e018 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b086      	sub	sp, #24
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	60f8      	str	r0, [r7, #12]
 800e020:	60b9      	str	r1, [r7, #8]
 800e022:	4613      	mov	r3, r2
 800e024:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800e026:	2100      	movs	r1, #0
 800e028:	68f8      	ldr	r0, [r7, #12]
 800e02a:	f008 f8cf 	bl	80161cc <tcp_arg>
  altcp_recv(pcb, NULL);
 800e02e:	2100      	movs	r1, #0
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f008 f8dd 	bl	80161f0 <tcp_recv>
  altcp_err(pcb, NULL);
 800e036:	2100      	movs	r1, #0
 800e038:	68f8      	ldr	r0, [r7, #12]
 800e03a:	f008 f91d 	bl	8016278 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800e03e:	2200      	movs	r2, #0
 800e040:	2100      	movs	r1, #0
 800e042:	68f8      	ldr	r0, [r7, #12]
 800e044:	f008 f952 	bl	80162ec <tcp_poll>
  altcp_sent(pcb, NULL);
 800e048:	2100      	movs	r1, #0
 800e04a:	68f8      	ldr	r0, [r7, #12]
 800e04c:	f008 f8f2 	bl	8016234 <tcp_sent>
  if (hs != NULL) {
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d002      	beq.n	800e05c <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800e056:	68b8      	ldr	r0, [r7, #8]
 800e058:	f7ff ff62 	bl	800df20 <http_state_free>
  }

  if (abort_conn) {
 800e05c:	79fb      	ldrb	r3, [r7, #7]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d004      	beq.n	800e06c <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800e062:	68f8      	ldr	r0, [r7, #12]
 800e064:	f006 fff2 	bl	801504c <tcp_abort>
    return ERR_OK;
 800e068:	2300      	movs	r3, #0
 800e06a:	e00f      	b.n	800e08c <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800e06c:	68f8      	ldr	r0, [r7, #12]
 800e06e:	f006 ff03 	bl	8014e78 <tcp_close>
 800e072:	4603      	mov	r3, r0
 800e074:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800e076:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d004      	beq.n	800e088 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800e07e:	2204      	movs	r2, #4
 800e080:	4904      	ldr	r1, [pc, #16]	@ (800e094 <http_close_or_abort_conn+0x7c>)
 800e082:	68f8      	ldr	r0, [r7, #12]
 800e084:	f008 f932 	bl	80162ec <tcp_poll>
  }
  return err;
 800e088:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3718      	adds	r7, #24
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}
 800e094:	0800f553 	.word	0x0800f553

0800e098 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	6839      	ldr	r1, [r7, #0]
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f7ff ffb6 	bl	800e018 <http_close_or_abort_conn>
 800e0ac:	4603      	mov	r3, r0
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3708      	adds	r7, #8
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}

0800e0b6 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800e0b6:	b580      	push	{r7, lr}
 800e0b8:	b082      	sub	sp, #8
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	6078      	str	r0, [r7, #4]
 800e0be:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800e0c0:	6839      	ldr	r1, [r7, #0]
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f7ff ffe8 	bl	800e098 <http_close_conn>
  }
}
 800e0c8:	bf00      	nop
 800e0ca:	3708      	adds	r7, #8
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b086      	sub	sp, #24
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d003      	beq.n	800e0e8 <extract_uri_parameters+0x18>
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	781b      	ldrb	r3, [r3, #0]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d101      	bne.n	800e0ec <extract_uri_parameters+0x1c>
    return (0);
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	e04b      	b.n	800e184 <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	613b      	str	r3, [r7, #16]
 800e0f4:	e03f      	b.n	800e176 <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	693a      	ldr	r2, [r7, #16]
 800e0fa:	320c      	adds	r2, #12
 800e0fc:	6979      	ldr	r1, [r7, #20]
 800e0fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800e106:	2126      	movs	r1, #38	@ 0x26
 800e108:	6978      	ldr	r0, [r7, #20]
 800e10a:	f013 fb2b 	bl	8021764 <strchr>
 800e10e:	6178      	str	r0, [r7, #20]
    if (pair) {
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d006      	beq.n	800e124 <extract_uri_parameters+0x54>
      *pair = '\0';
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	2200      	movs	r2, #0
 800e11a:	701a      	strb	r2, [r3, #0]
      pair++;
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	3301      	adds	r3, #1
 800e120:	617b      	str	r3, [r7, #20]
 800e122:	e00c      	b.n	800e13e <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 800e124:	2120      	movs	r1, #32
 800e126:	68f8      	ldr	r0, [r7, #12]
 800e128:	f013 fb1c 	bl	8021764 <strchr>
 800e12c:	6178      	str	r0, [r7, #20]
      if (pair) {
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d002      	beq.n	800e13a <extract_uri_parameters+0x6a>
        *pair = '\0';
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	2200      	movs	r2, #0
 800e138:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 800e13a:	2300      	movs	r3, #0
 800e13c:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800e13e:	213d      	movs	r1, #61	@ 0x3d
 800e140:	68f8      	ldr	r0, [r7, #12]
 800e142:	f013 fb0f 	bl	8021764 <strchr>
 800e146:	60f8      	str	r0, [r7, #12]
    if (equals) {
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d00a      	beq.n	800e164 <extract_uri_parameters+0x94>
      *equals = '\0';
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2200      	movs	r2, #0
 800e152:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	1c59      	adds	r1, r3, #1
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	693a      	ldr	r2, [r7, #16]
 800e15c:	321c      	adds	r2, #28
 800e15e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e162:	e005      	b.n	800e170 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	693a      	ldr	r2, [r7, #16]
 800e168:	321c      	adds	r2, #28
 800e16a:	2100      	movs	r1, #0
 800e16c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	3301      	adds	r3, #1
 800e174:	613b      	str	r3, [r7, #16]
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	2b0f      	cmp	r3, #15
 800e17a:	dc02      	bgt.n	800e182 <extract_uri_parameters+0xb2>
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d1b9      	bne.n	800e0f6 <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800e182:	693b      	ldr	r3, [r7, #16]
}
 800e184:	4618      	mov	r0, r3
 800e186:	3718      	adds	r7, #24
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b086      	sub	sp, #24
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d106      	bne.n	800e1a8 <get_tag_insert+0x1c>
 800e19a:	4b45      	ldr	r3, [pc, #276]	@ (800e2b0 <get_tag_insert+0x124>)
 800e19c:	f44f 7241 	mov.w	r2, #772	@ 0x304
 800e1a0:	4944      	ldr	r1, [pc, #272]	@ (800e2b4 <get_tag_insert+0x128>)
 800e1a2:	4845      	ldr	r0, [pc, #276]	@ (800e2b8 <get_tag_insert+0x12c>)
 800e1a4:	f013 f906 	bl	80213b4 <iprintf>
  ssi = hs->ssi;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1ac:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d106      	bne.n	800e1c2 <get_tag_insert+0x36>
 800e1b4:	4b3e      	ldr	r3, [pc, #248]	@ (800e2b0 <get_tag_insert+0x124>)
 800e1b6:	f240 3206 	movw	r2, #774	@ 0x306
 800e1ba:	4940      	ldr	r1, [pc, #256]	@ (800e2bc <get_tag_insert+0x130>)
 800e1bc:	483e      	ldr	r0, [pc, #248]	@ (800e2b8 <get_tag_insert+0x12c>)
 800e1be:	f013 f8f9 	bl	80213b4 <iprintf>
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
  ssi->tag_part = HTTPD_LAST_TAG_PART;
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	3312      	adds	r3, #18
 800e1c6:	613b      	str	r3, [r7, #16]
#endif

  if (httpd_ssi_handler
 800e1c8:	4b3d      	ldr	r3, [pc, #244]	@ (800e2c0 <get_tag_insert+0x134>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d011      	beq.n	800e1f4 <get_tag_insert+0x68>
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 800e1d0:	4b3b      	ldr	r3, [pc, #236]	@ (800e2c0 <get_tag_insert+0x134>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	697a      	ldr	r2, [r7, #20]
 800e1d6:	f102 011b 	add.w	r1, r2, #27
 800e1da:	22c0      	movs	r2, #192	@ 0xc0
 800e1dc:	6938      	ldr	r0, [r7, #16]
 800e1de:	4798      	blx	r3
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	697b      	ldr	r3, [r7, #20]
 800e1e6:	81da      	strh	r2, [r3, #14]
#if LWIP_HTTPD_FILE_STATE
                                              , (hs->handle ? hs->handle->state : NULL)
#endif /* LWIP_HTTPD_FILE_STATE */
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	89db      	ldrh	r3, [r3, #14]
 800e1ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	d159      	bne.n	800e2a8 <get_tag_insert+0x11c>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	3312      	adds	r3, #18
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	f7f2 f82b 	bl	8000254 <strlen>
 800e1fe:	4603      	mov	r3, r0
 800e200:	2ba6      	cmp	r3, #166	@ 0xa6
 800e202:	d818      	bhi.n	800e236 <get_tag_insert+0xaa>
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	3312      	adds	r3, #18
 800e208:	4618      	mov	r0, r3
 800e20a:	f7f2 f823 	bl	8000254 <strlen>
 800e20e:	4603      	mov	r3, r0
 800e210:	2b09      	cmp	r3, #9
 800e212:	d810      	bhi.n	800e236 <get_tag_insert+0xaa>
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	3312      	adds	r3, #18
 800e218:	4618      	mov	r0, r3
 800e21a:	f7f2 f81b 	bl	8000254 <strlen>
 800e21e:	4603      	mov	r3, r0
 800e220:	2ba6      	cmp	r3, #166	@ 0xa6
 800e222:	d806      	bhi.n	800e232 <get_tag_insert+0xa6>
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	3312      	adds	r3, #18
 800e228:	4618      	mov	r0, r3
 800e22a:	f7f2 f813 	bl	8000254 <strlen>
 800e22e:	4603      	mov	r3, r0
 800e230:	e002      	b.n	800e238 <get_tag_insert+0xac>
 800e232:	23a7      	movs	r3, #167	@ 0xa7
 800e234:	e000      	b.n	800e238 <get_tag_insert+0xac>
 800e236:	2309      	movs	r3, #9
 800e238:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	331b      	adds	r3, #27
 800e23e:	2212      	movs	r2, #18
 800e240:	4920      	ldr	r1, [pc, #128]	@ (800e2c4 <get_tag_insert+0x138>)
 800e242:	4618      	mov	r0, r3
 800e244:	f013 fb9f 	bl	8021986 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	f103 002d 	add.w	r0, r3, #45	@ 0x2d
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	3312      	adds	r3, #18
 800e252:	68fa      	ldr	r2, [r7, #12]
 800e254:	4619      	mov	r1, r3
 800e256:	f013 fb96 	bl	8021986 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	3312      	adds	r3, #18
 800e25e:	3318      	adds	r3, #24
 800e260:	697a      	ldr	r2, [r7, #20]
 800e262:	4413      	add	r3, r2
 800e264:	3303      	adds	r3, #3
 800e266:	2207      	movs	r2, #7
 800e268:	4917      	ldr	r1, [pc, #92]	@ (800e2c8 <get_tag_insert+0x13c>)
 800e26a:	4618      	mov	r0, r3
 800e26c:	f013 fb8b 	bl	8021986 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	3319      	adds	r3, #25
 800e274:	697a      	ldr	r2, [r7, #20]
 800e276:	4413      	add	r3, r2
 800e278:	2200      	movs	r2, #0
 800e27a:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	331b      	adds	r3, #27
 800e280:	4618      	mov	r0, r3
 800e282:	f7f1 ffe7 	bl	8000254 <strlen>
 800e286:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e28e:	d306      	bcc.n	800e29e <get_tag_insert+0x112>
 800e290:	4b07      	ldr	r3, [pc, #28]	@ (800e2b0 <get_tag_insert+0x124>)
 800e292:	f240 323f 	movw	r2, #831	@ 0x33f
 800e296:	490d      	ldr	r1, [pc, #52]	@ (800e2cc <get_tag_insert+0x140>)
 800e298:	4807      	ldr	r0, [pc, #28]	@ (800e2b8 <get_tag_insert+0x12c>)
 800e29a:	f013 f88b 	bl	80213b4 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	b29a      	uxth	r2, r3
 800e2a2:	697b      	ldr	r3, [r7, #20]
 800e2a4:	81da      	strh	r2, [r3, #14]
 800e2a6:	e000      	b.n	800e2aa <get_tag_insert+0x11e>
          return;
 800e2a8:	bf00      	nop
}
 800e2aa:	3718      	adds	r7, #24
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}
 800e2b0:	08022dd0 	.word	0x08022dd0
 800e2b4:	08022e40 	.word	0x08022e40
 800e2b8:	08022e18 	.word	0x08022e18
 800e2bc:	08022e4c 	.word	0x08022e4c
 800e2c0:	20004b98 	.word	0x20004b98
 800e2c4:	08022e58 	.word	0x08022e58
 800e2c8:	08022e6c 	.word	0x08022e6c
 800e2cc:	08022e74 	.word	0x08022e74

0800e2d0 <get_http_headers>:
 * Generate the relevant HTTP headers for the given filename and write
 * them into the supplied buffer.
 */
static void
get_http_headers(struct http_state *hs, const char *uri)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b086      	sub	sp, #24
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	6039      	str	r1, [r7, #0]
  char *ext;
  char *vars;

  /* In all cases, the second header we send is the server identification
     so set it here. */
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 800e2da:	4a55      	ldr	r2, [pc, #340]	@ (800e430 <get_http_headers+0x160>)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = NULL;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

  /* Is this a normal file or the special case we use to send back the
     default "404: Page not found" response? */
  if (uri == NULL) {
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d110      	bne.n	800e31a <get_http_headers+0x4a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800e2f8:	4a4e      	ldr	r2, [pc, #312]	@ (800e434 <get_http_headers+0x164>)
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    if (hs->keepalive) {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML_PERSISTENT];
    } else
#endif
    {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 800e300:	4a4d      	ldr	r2, [pc, #308]	@ (800e438 <get_http_headers+0x168>)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
    }

    /* Set up to send the first header string. */
    hs->hdr_index = 0;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2200      	movs	r2, #0
 800e30c:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
    hs->hdr_pos = 0;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2200      	movs	r2, #0
 800e314:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
    return;
 800e318:	e087      	b.n	800e42a <get_http_headers+0x15a>
  }
  /* We are dealing with a particular filename. Look for one other
      special case.  We assume that any filename with "404" in it must be
      indicative of a 404 server error whereas all other files require
      the 200 OK header. */
  if (strstr(uri, "404")) {
 800e31a:	4948      	ldr	r1, [pc, #288]	@ (800e43c <get_http_headers+0x16c>)
 800e31c:	6838      	ldr	r0, [r7, #0]
 800e31e:	f013 fa40 	bl	80217a2 <strstr>
 800e322:	4603      	mov	r3, r0
 800e324:	2b00      	cmp	r3, #0
 800e326:	d004      	beq.n	800e332 <get_http_headers+0x62>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800e328:	4a42      	ldr	r2, [pc, #264]	@ (800e434 <get_http_headers+0x164>)
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800e330:	e01b      	b.n	800e36a <get_http_headers+0x9a>
  } else if (strstr(uri, "400")) {
 800e332:	4943      	ldr	r1, [pc, #268]	@ (800e440 <get_http_headers+0x170>)
 800e334:	6838      	ldr	r0, [r7, #0]
 800e336:	f013 fa34 	bl	80217a2 <strstr>
 800e33a:	4603      	mov	r3, r0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d004      	beq.n	800e34a <get_http_headers+0x7a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 800e340:	4a40      	ldr	r2, [pc, #256]	@ (800e444 <get_http_headers+0x174>)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800e348:	e00f      	b.n	800e36a <get_http_headers+0x9a>
  } else if (strstr(uri, "501")) {
 800e34a:	493f      	ldr	r1, [pc, #252]	@ (800e448 <get_http_headers+0x178>)
 800e34c:	6838      	ldr	r0, [r7, #0]
 800e34e:	f013 fa28 	bl	80217a2 <strstr>
 800e352:	4603      	mov	r3, r0
 800e354:	2b00      	cmp	r3, #0
 800e356:	d004      	beq.n	800e362 <get_http_headers+0x92>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 800e358:	4a3c      	ldr	r2, [pc, #240]	@ (800e44c <get_http_headers+0x17c>)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800e360:	e003      	b.n	800e36a <get_http_headers+0x9a>
  } else {
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 800e362:	4a3b      	ldr	r2, [pc, #236]	@ (800e450 <get_http_headers+0x180>)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  }

  /* Determine if the URI has any variables and, if so, temporarily remove
      them. */
  vars = strchr(uri, '?');
 800e36a:	213f      	movs	r1, #63	@ 0x3f
 800e36c:	6838      	ldr	r0, [r7, #0]
 800e36e:	f013 f9f9 	bl	8021764 <strchr>
 800e372:	60b8      	str	r0, [r7, #8]
  if (vars) {
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d002      	beq.n	800e380 <get_http_headers+0xb0>
    *vars = '\0';
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	2200      	movs	r2, #0
 800e37e:	701a      	strb	r2, [r3, #0]
  }

  /* Get a pointer to the file extension.  We find this by looking for the
      last occurrence of "." in the filename passed. */
  ext = NULL;
 800e380:	2300      	movs	r3, #0
 800e382:	60fb      	str	r3, [r7, #12]
  tmp = strchr(uri, '.');
 800e384:	212e      	movs	r1, #46	@ 0x2e
 800e386:	6838      	ldr	r0, [r7, #0]
 800e388:	f013 f9ec 	bl	8021764 <strchr>
 800e38c:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800e38e:	e007      	b.n	800e3a0 <get_http_headers+0xd0>
    ext = tmp + 1;
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	3301      	adds	r3, #1
 800e394:	60fb      	str	r3, [r7, #12]
    tmp = strchr(ext, '.');
 800e396:	212e      	movs	r1, #46	@ 0x2e
 800e398:	68f8      	ldr	r0, [r7, #12]
 800e39a:	f013 f9e3 	bl	8021764 <strchr>
 800e39e:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800e3a0:	693b      	ldr	r3, [r7, #16]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d1f4      	bne.n	800e390 <get_http_headers+0xc0>
  }
  if (ext != NULL) {
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d014      	beq.n	800e3d6 <get_http_headers+0x106>
    /* Now determine the content type and add the relevant header for that. */
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	617b      	str	r3, [r7, #20]
 800e3b0:	e00d      	b.n	800e3ce <get_http_headers+0xfe>
      /* Have we found a matching extension? */
      if (!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 800e3b2:	4a28      	ldr	r2, [pc, #160]	@ (800e454 <get_http_headers+0x184>)
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e3ba:	68f9      	ldr	r1, [r7, #12]
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f004 f982 	bl	80126c6 <lwip_stricmp>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d009      	beq.n	800e3dc <get_http_headers+0x10c>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	617b      	str	r3, [r7, #20]
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	2b13      	cmp	r3, #19
 800e3d2:	d9ee      	bls.n	800e3b2 <get_http_headers+0xe2>
 800e3d4:	e003      	b.n	800e3de <get_http_headers+0x10e>
        break;
      }
    }
  } else {
    content_type = NUM_HTTP_HEADERS;
 800e3d6:	2314      	movs	r3, #20
 800e3d8:	617b      	str	r3, [r7, #20]
 800e3da:	e000      	b.n	800e3de <get_http_headers+0x10e>
        break;
 800e3dc:	bf00      	nop
  }

  /* Reinstate the parameter marker if there was one in the original URI. */
  if (vars) {
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d002      	beq.n	800e3ea <get_http_headers+0x11a>
    *vars = '?';
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	223f      	movs	r2, #63	@ 0x3f
 800e3e8:	701a      	strb	r2, [r3, #0]
    hs->hdr_index = NUM_FILE_HDR_STRINGS;
    return;
  }
#endif /* LWIP_HTTPD_OMIT_HEADER_FOR_EXTENSIONLESS_URI */
  /* Did we find a matching extension? */
  if (content_type < NUM_HTTP_HEADERS) {
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	2b13      	cmp	r3, #19
 800e3ee:	d808      	bhi.n	800e402 <get_http_headers+0x132>
    /* yes, store it */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 800e3f0:	4a18      	ldr	r2, [pc, #96]	@ (800e454 <get_http_headers+0x184>)
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	00db      	lsls	r3, r3, #3
 800e3f6:	4413      	add	r3, r2
 800e3f8:	685a      	ldr	r2, [r3, #4]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 800e400:	e00b      	b.n	800e41a <get_http_headers+0x14a>
  } else if (!ext) {
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d104      	bne.n	800e412 <get_http_headers+0x142>
    /* no, no extension found -> use binary transfer to prevent the browser adding '.txt' on save */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	4a13      	ldr	r2, [pc, #76]	@ (800e458 <get_http_headers+0x188>)
 800e40c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 800e410:	e003      	b.n	800e41a <get_http_headers+0x14a>
  } else {
    /* No - use the default, plain text file type. */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	4a11      	ldr	r2, [pc, #68]	@ (800e45c <get_http_headers+0x18c>)
 800e416:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }
  /* Set up to send the first header string. */
  hs->hdr_index = 0;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2200      	movs	r2, #0
 800e41e:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
  hs->hdr_pos = 0;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2200      	movs	r2, #0
 800e426:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
}
 800e42a:	3718      	adds	r7, #24
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}
 800e430:	08022a50 	.word	0x08022a50
 800e434:	08022914 	.word	0x08022914
 800e438:	08022a90 	.word	0x08022a90
 800e43c:	08022e84 	.word	0x08022e84
 800e440:	08022e88 	.word	0x08022e88
 800e444:	08022934 	.word	0x08022934
 800e448:	08022e8c 	.word	0x08022e8c
 800e44c:	08022950 	.word	0x08022950
 800e450:	08022900 	.word	0x08022900
 800e454:	0802759c 	.word	0x0802759c
 800e458:	08022c24 	.word	0x08022c24
 800e45c:	08022e90 	.word	0x08022e90

0800e460 <get_http_content_length>:

/* Add content-length header? */
static void
get_http_content_length(struct http_state *hs)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b084      	sub	sp, #16
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  u8_t add_content_len = 0;
 800e468:	2300      	movs	r3, #0
 800e46a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("already been here?", hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e472:	2b00      	cmp	r3, #0
 800e474:	d006      	beq.n	800e484 <get_http_content_length+0x24>
 800e476:	4b27      	ldr	r3, [pc, #156]	@ (800e514 <get_http_content_length+0xb4>)
 800e478:	f44f 726e 	mov.w	r2, #952	@ 0x3b8
 800e47c:	4926      	ldr	r1, [pc, #152]	@ (800e518 <get_http_content_length+0xb8>)
 800e47e:	4827      	ldr	r0, [pc, #156]	@ (800e51c <get_http_content_length+0xbc>)
 800e480:	f012 ff98 	bl	80213b4 <iprintf>

  add_content_len = 0;
 800e484:	2300      	movs	r3, #0
 800e486:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SSI
  if (hs->ssi == NULL) /* @todo: get maximum file length from SSI */
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d10c      	bne.n	800e4aa <get_http_content_length+0x4a>
#endif /* LWIP_HTTPD_SSI */
  {
    if ((hs->handle != NULL) && (hs->handle->flags & FS_FILE_FLAGS_HEADER_PERSISTENT)) {
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	695b      	ldr	r3, [r3, #20]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d008      	beq.n	800e4aa <get_http_content_length+0x4a>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	695b      	ldr	r3, [r3, #20]
 800e49c:	7c1b      	ldrb	r3, [r3, #16]
 800e49e:	f003 0302 	and.w	r3, r3, #2
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d001      	beq.n	800e4aa <get_http_content_length+0x4a>
      add_content_len = 1;
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	73fb      	strb	r3, [r7, #15]
    }
  }
  if (add_content_len) {
 800e4aa:	7bfb      	ldrb	r3, [r7, #15]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d025      	beq.n	800e4fc <get_http_content_length+0x9c>
    size_t len;
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f103 00c4 	add.w	r0, r3, #196	@ 0xc4
              hs->handle->len);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	695b      	ldr	r3, [r3, #20]
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800e4ba:	685b      	ldr	r3, [r3, #4]
 800e4bc:	461a      	mov	r2, r3
 800e4be:	210c      	movs	r1, #12
 800e4c0:	f004 f970 	bl	80127a4 <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	33c4      	adds	r3, #196	@ 0xc4
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f7f1 fec3 	bl	8000254 <strlen>
 800e4ce:	60b8      	str	r0, [r7, #8]
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	2b09      	cmp	r3, #9
 800e4d4:	d810      	bhi.n	800e4f8 <get_http_content_length+0x98>
      SMEMCPY(&hs->hdr_content_len[len], CRLF, 3);
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	33c0      	adds	r3, #192	@ 0xc0
 800e4da:	687a      	ldr	r2, [r7, #4]
 800e4dc:	4413      	add	r3, r2
 800e4de:	3304      	adds	r3, #4
 800e4e0:	2203      	movs	r2, #3
 800e4e2:	490f      	ldr	r1, [pc, #60]	@ (800e520 <get_http_content_length+0xc0>)
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f013 fa4e 	bl	8021986 <memcpy>
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
 800e4f6:	e001      	b.n	800e4fc <get_http_content_length+0x9c>
    } else {
      add_content_len = 0;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	73fb      	strb	r3, [r7, #15]
  } else {
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONN_CLOSE];
    hs->keepalive = 0;
  }
#else /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  if (add_content_len) {
 800e4fc:	7bfb      	ldrb	r3, [r7, #15]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d003      	beq.n	800e50a <get_http_content_length+0xaa>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 800e502:	4a08      	ldr	r2, [pc, #32]	@ (800e524 <get_http_content_length+0xc4>)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
}
 800e50a:	bf00      	nop
 800e50c:	3710      	adds	r7, #16
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop
 800e514:	08022dd0 	.word	0x08022dd0
 800e518:	08022eb0 	.word	0x08022eb0
 800e51c:	08022e18 	.word	0x08022e18
 800e520:	08022ec4 	.word	0x08022ec4
 800e524:	080229e0 	.word	0x080229e0

0800e528 <http_send_headers>:
 *                                      so don't send HTTP body yet
 *           - HTTP_DATA_TO_SEND_FREED: http_state and pcb are already freed
 */
static u8_t
http_send_headers(struct altcp_pcb *pcb, struct http_state *hs)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b088      	sub	sp, #32
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800e532:	2300      	movs	r3, #0
 800e534:	777b      	strb	r3, [r7, #29]
  u16_t hdrlen, sendlen;

  if (hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL) {
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d102      	bne.n	800e546 <http_send_headers+0x1e>
    /* set up "content-length" and "connection:" headers */
    get_http_content_length(hs);
 800e540:	6838      	ldr	r0, [r7, #0]
 800e542:	f7ff ff8d 	bl	800e460 <get_http_content_length>
  }

  /* How much data can we send? */
  len = altcp_sndbuf(pcb);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800e54c:	83fb      	strh	r3, [r7, #30]
  sendlen = len;
 800e54e:	8bfb      	ldrh	r3, [r7, #30]
 800e550:	81fb      	strh	r3, [r7, #14]

  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800e552:	e08b      	b.n	800e66c <http_send_headers+0x144>
    const void *ptr;
    u16_t old_sendlen;
    u8_t apiflags;
    /* How much do we have to send from the current header? */
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 800e55a:	461a      	mov	r2, r3
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	322c      	adds	r2, #44	@ 0x2c
 800e560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e564:	4618      	mov	r0, r3
 800e566:	f7f1 fe75 	bl	8000254 <strlen>
 800e56a:	4603      	mov	r3, r0
 800e56c:	837b      	strh	r3, [r7, #26]

    /* How much of this can we send? */
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 800e56e:	8b7b      	ldrh	r3, [r7, #26]
 800e570:	683a      	ldr	r2, [r7, #0]
 800e572:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	@ 0xd0
 800e576:	1a9a      	subs	r2, r3, r2
 800e578:	8bfb      	ldrh	r3, [r7, #30]
 800e57a:	4293      	cmp	r3, r2
 800e57c:	bfa8      	it	ge
 800e57e:	4613      	movge	r3, r2
 800e580:	b29b      	uxth	r3, r3
 800e582:	81fb      	strh	r3, [r7, #14]

    /* Send this amount of data or as much as we can given memory
     * constraints. */
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 800e58a:	461a      	mov	r2, r3
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	322c      	adds	r2, #44	@ 0x2c
 800e590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e594:	683a      	ldr	r2, [r7, #0]
 800e596:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	@ 0xd0
 800e59a:	4413      	add	r3, r2
 800e59c:	617b      	str	r3, [r7, #20]
    old_sendlen = sendlen;
 800e59e:	89fb      	ldrh	r3, [r7, #14]
 800e5a0:	827b      	strh	r3, [r7, #18]
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	773b      	strb	r3, [r7, #28]
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 800e5ac:	2b03      	cmp	r3, #3
 800e5ae:	d103      	bne.n	800e5b8 <http_send_headers+0x90>
      /* content-length is always volatile */
      apiflags |= TCP_WRITE_FLAG_COPY;
 800e5b0:	7f3b      	ldrb	r3, [r7, #28]
 800e5b2:	f043 0301 	orr.w	r3, r3, #1
 800e5b6:	773b      	strb	r3, [r7, #28]
    }
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 800e5be:	2b03      	cmp	r3, #3
 800e5c0:	d803      	bhi.n	800e5ca <http_send_headers+0xa2>
      apiflags |= TCP_WRITE_FLAG_MORE;
 800e5c2:	7f3b      	ldrb	r3, [r7, #28]
 800e5c4:	f043 0302 	orr.w	r3, r3, #2
 800e5c8:	773b      	strb	r3, [r7, #28]
    }
    err = http_write(pcb, ptr, &sendlen, apiflags);
 800e5ca:	7f3b      	ldrb	r3, [r7, #28]
 800e5cc:	f107 020e 	add.w	r2, r7, #14
 800e5d0:	6979      	ldr	r1, [r7, #20]
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f7ff fcb6 	bl	800df44 <http_write>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	747b      	strb	r3, [r7, #17]
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 800e5dc:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d106      	bne.n	800e5f2 <http_send_headers+0xca>
 800e5e4:	89fb      	ldrh	r3, [r7, #14]
 800e5e6:	8a7a      	ldrh	r2, [r7, #18]
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d002      	beq.n	800e5f2 <http_send_headers+0xca>
      /* Remember that we added some more data to be transmitted. */
      data_to_send = HTTP_DATA_TO_SEND_CONTINUE;
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	777b      	strb	r3, [r7, #29]
 800e5f0:	e005      	b.n	800e5fe <http_send_headers+0xd6>
    } else if (err != ERR_OK) {
 800e5f2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d001      	beq.n	800e5fe <http_send_headers+0xd6>
      /* special case: http_write does not try to send 1 byte */
      sendlen = 0;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	81fb      	strh	r3, [r7, #14]
    }

    /* Fix up the header position for the next time round. */
    hs->hdr_pos += sendlen;
 800e5fe:	683b      	ldr	r3, [r7, #0]
 800e600:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 800e604:	89fb      	ldrh	r3, [r7, #14]
 800e606:	4413      	add	r3, r2
 800e608:	b29a      	uxth	r2, r3
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
    len -= sendlen;
 800e610:	89fb      	ldrh	r3, [r7, #14]
 800e612:	8bfa      	ldrh	r2, [r7, #30]
 800e614:	1ad3      	subs	r3, r2, r3
 800e616:	83fb      	strh	r3, [r7, #30]

    /* Have we finished sending this string? */
    if (hs->hdr_pos == hdrlen) {
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	@ 0xd0
 800e61e:	8b7a      	ldrh	r2, [r7, #26]
 800e620:	429a      	cmp	r2, r3
 800e622:	d123      	bne.n	800e66c <http_send_headers+0x144>
      /* Yes - move on to the next one */
      hs->hdr_index++;
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 800e62a:	3301      	adds	r3, #1
 800e62c:	b29a      	uxth	r2, r3
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
      /* skip headers that are NULL (not all headers are required) */
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800e634:	e007      	b.n	800e646 <http_send_headers+0x11e>
             (hs->hdrs[hs->hdr_index] == NULL)) {
        hs->hdr_index++;
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 800e63c:	3301      	adds	r3, #1
 800e63e:	b29a      	uxth	r2, r3
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 800e64c:	2b04      	cmp	r3, #4
 800e64e:	d809      	bhi.n	800e664 <http_send_headers+0x13c>
             (hs->hdrs[hs->hdr_index] == NULL)) {
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 800e656:	461a      	mov	r2, r3
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	322c      	adds	r2, #44	@ 0x2c
 800e65c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800e660:	2b00      	cmp	r3, #0
 800e662:	d0e8      	beq.n	800e636 <http_send_headers+0x10e>
      }
      hs->hdr_pos = 0;
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	2200      	movs	r2, #0
 800e668:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800e66c:	8bfb      	ldrh	r3, [r7, #30]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d008      	beq.n	800e684 <http_send_headers+0x15c>
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 800e678:	2b04      	cmp	r3, #4
 800e67a:	d803      	bhi.n	800e684 <http_send_headers+0x15c>
 800e67c:	89fb      	ldrh	r3, [r7, #14]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	f47f af68 	bne.w	800e554 <http_send_headers+0x2c>
    }
  }

  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 800e68a:	2b04      	cmp	r3, #4
 800e68c:	d90f      	bls.n	800e6ae <http_send_headers+0x186>
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	699b      	ldr	r3, [r3, #24]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d10b      	bne.n	800e6ae <http_send_headers+0x186>
    /* When we are at the end of the headers, check for data to send
     * instead of waiting for ACK from remote side to continue
     * (which would happen when sending files from async read). */
    if (http_check_eof(pcb, hs)) {
 800e696:	6839      	ldr	r1, [r7, #0]
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f000 f819 	bl	800e6d0 <http_check_eof>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d002      	beq.n	800e6aa <http_send_headers+0x182>
      data_to_send = HTTP_DATA_TO_SEND_BREAK;
 800e6a4:	2302      	movs	r3, #2
 800e6a6:	777b      	strb	r3, [r7, #29]
 800e6a8:	e001      	b.n	800e6ae <http_send_headers+0x186>
    } else {
      /* At this point, for non-keepalive connections, hs is deallocated an
         pcb is closed. */
      return HTTP_DATA_TO_SEND_FREED;
 800e6aa:	2303      	movs	r3, #3
 800e6ac:	e00b      	b.n	800e6c6 <http_send_headers+0x19e>
  }
  /* If we get here and there are still header bytes to send, we send
   * the header information we just wrote immediately. If there are no
   * more headers to send, but we do have file data to send, drop through
   * to try to send some file data too. */
  if ((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 800e6b4:	2b04      	cmp	r3, #4
 800e6b6:	d903      	bls.n	800e6c0 <http_send_headers+0x198>
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	699b      	ldr	r3, [r3, #24]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d101      	bne.n	800e6c4 <http_send_headers+0x19c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("tcp_output\n"));
    return HTTP_DATA_TO_SEND_BREAK;
 800e6c0:	2302      	movs	r3, #2
 800e6c2:	e000      	b.n	800e6c6 <http_send_headers+0x19e>
  }
  return data_to_send;
 800e6c4:	7f7b      	ldrb	r3, [r7, #29]
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3720      	adds	r7, #32
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
	...

0800e6d0 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b084      	sub	sp, #16
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
 800e6d8:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	695b      	ldr	r3, [r3, #20]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d105      	bne.n	800e6ee <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800e6e2:	6839      	ldr	r1, [r7, #0]
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f7ff fce6 	bl	800e0b6 <http_eof>
    return 0;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	e016      	b.n	800e71c <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	695b      	ldr	r3, [r3, #20]
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	f7ff fb94 	bl	800de20 <fs_bytes_left>
 800e6f8:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	dc05      	bgt.n	800e70c <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800e700:	6839      	ldr	r1, [r7, #0]
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f7ff fcd7 	bl	800e0b6 <http_eof>
    return 0;
 800e708:	2300      	movs	r3, #0
 800e70a:	e007      	b.n	800e71c <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800e70c:	4b05      	ldr	r3, [pc, #20]	@ (800e724 <http_check_eof+0x54>)
 800e70e:	f240 429d 	movw	r2, #1181	@ 0x49d
 800e712:	4905      	ldr	r1, [pc, #20]	@ (800e728 <http_check_eof+0x58>)
 800e714:	4805      	ldr	r0, [pc, #20]	@ (800e72c <http_check_eof+0x5c>)
 800e716:	f012 fe4d 	bl	80213b4 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800e71a:	2301      	movs	r3, #1
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3710      	adds	r7, #16
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}
 800e724:	08022dd0 	.word	0x08022dd0
 800e728:	08022ec8 	.word	0x08022ec8
 800e72c:	08022e18 	.word	0x08022e18

0800e730 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800e73a:	2300      	movs	r3, #0
 800e73c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e742:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800e746:	4293      	cmp	r3, r2
 800e748:	d803      	bhi.n	800e752 <http_send_data_nonssi+0x22>
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e74e:	b29b      	uxth	r3, r3
 800e750:	e001      	b.n	800e756 <http_send_data_nonssi+0x26>
 800e752:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e756:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	6999      	ldr	r1, [r3, #24]
 800e75c:	f107 020c 	add.w	r2, r7, #12
 800e760:	2300      	movs	r3, #0
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f7ff fbee 	bl	800df44 <http_write>
 800e768:	4603      	mov	r3, r0
 800e76a:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800e76c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d10d      	bne.n	800e790 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800e774:	2301      	movs	r3, #1
 800e776:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	699b      	ldr	r3, [r3, #24]
 800e77c:	89ba      	ldrh	r2, [r7, #12]
 800e77e:	441a      	add	r2, r3
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e788:	89ba      	ldrh	r2, [r7, #12]
 800e78a:	1a9a      	subs	r2, r3, r2
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 800e790:	7bfb      	ldrb	r3, [r7, #15]
}
 800e792:	4618      	mov	r0, r3
 800e794:	3710      	adds	r7, #16
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}
	...

0800e79c <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b086      	sub	sp, #24
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7b2:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d106      	bne.n	800e7c8 <http_send_data_ssi+0x2c>
 800e7ba:	4b87      	ldr	r3, [pc, #540]	@ (800e9d8 <http_send_data_ssi+0x23c>)
 800e7bc:	f240 42cb 	movw	r2, #1227	@ 0x4cb
 800e7c0:	4986      	ldr	r1, [pc, #536]	@ (800e9dc <http_send_data_ssi+0x240>)
 800e7c2:	4887      	ldr	r0, [pc, #540]	@ (800e9e0 <http_send_data_ssi+0x244>)
 800e7c4:	f012 fdf6 	bl	80213b4 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800e7ce:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	681a      	ldr	r2, [r3, #0]
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	699b      	ldr	r3, [r3, #24]
 800e7d8:	429a      	cmp	r2, r3
 800e7da:	f240 8273 	bls.w	800ecc4 <http_send_data_ssi+0x528>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	681a      	ldr	r2, [r3, #0]
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	699b      	ldr	r3, [r3, #24]
 800e7e6:	1ad3      	subs	r3, r2, r3
 800e7e8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	dc06      	bgt.n	800e7fe <http_send_data_ssi+0x62>
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	699b      	ldr	r3, [r3, #24]
 800e7f8:	1ad3      	subs	r3, r2, r3
 800e7fa:	b29b      	uxth	r3, r3
 800e7fc:	e001      	b.n	800e802 <http_send_data_ssi+0x66>
 800e7fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e802:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	6999      	ldr	r1, [r3, #24]
 800e808:	f107 020e 	add.w	r2, r7, #14
 800e80c:	2300      	movs	r3, #0
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	f7ff fb98 	bl	800df44 <http_write>
 800e814:	4603      	mov	r3, r0
 800e816:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800e818:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d10d      	bne.n	800e83c <http_send_data_ssi+0xa0>
      data_to_send = 1;
 800e820:	2301      	movs	r3, #1
 800e822:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	699b      	ldr	r3, [r3, #24]
 800e828:	89fa      	ldrh	r2, [r7, #14]
 800e82a:	441a      	add	r2, r3
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e834:	89fa      	ldrh	r2, [r7, #14]
 800e836:	1a9a      	subs	r2, r3, r2
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800e842:	2b00      	cmp	r3, #0
 800e844:	f040 823e 	bne.w	800ecc4 <http_send_data_ssi+0x528>
      return data_to_send;
 800e848:	7dbb      	ldrb	r3, [r7, #22]
 800e84a:	e284      	b.n	800ed56 <http_send_data_ssi+0x5ba>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800e84c:	89fb      	ldrh	r3, [r7, #14]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d101      	bne.n	800e856 <http_send_data_ssi+0xba>
      return data_to_send;
 800e852:	7dbb      	ldrb	r3, [r7, #22]
 800e854:	e27f      	b.n	800ed56 <http_send_data_ssi+0x5ba>
    }
    switch (ssi->tag_state) {
 800e856:	693b      	ldr	r3, [r7, #16]
 800e858:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800e85c:	2b04      	cmp	r3, #4
 800e85e:	f200 822c 	bhi.w	800ecba <http_send_data_ssi+0x51e>
 800e862:	a201      	add	r2, pc, #4	@ (adr r2, 800e868 <http_send_data_ssi+0xcc>)
 800e864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e868:	0800e87d 	.word	0x0800e87d
 800e86c:	0800e8cf 	.word	0x0800e8cf
 800e870:	0800e941 	.word	0x0800e941
 800e874:	0800ea89 	.word	0x0800ea89
 800e878:	0800ebd1 	.word	0x0800ebd1
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800e87c:	2300      	movs	r3, #0
 800e87e:	757b      	strb	r3, [r7, #21]
 800e880:	e017      	b.n	800e8b2 <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	781a      	ldrb	r2, [r3, #0]
 800e888:	7d7b      	ldrb	r3, [r7, #21]
 800e88a:	4956      	ldr	r1, [pc, #344]	@ (800e9e4 <http_send_data_ssi+0x248>)
 800e88c:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800e890:	781b      	ldrb	r3, [r3, #0]
 800e892:	429a      	cmp	r2, r3
 800e894:	d10a      	bne.n	800e8ac <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800e896:	693b      	ldr	r3, [r7, #16]
 800e898:	7d7a      	ldrb	r2, [r7, #21]
 800e89a:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	2201      	movs	r2, #1
 800e8a0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            ssi->tag_index = 1;
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	2201      	movs	r2, #1
 800e8a8:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800e8aa:	e005      	b.n	800e8b8 <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800e8ac:	7d7b      	ldrb	r3, [r7, #21]
 800e8ae:	3301      	adds	r3, #1
 800e8b0:	757b      	strb	r3, [r7, #21]
 800e8b2:	7d7b      	ldrb	r3, [r7, #21]
 800e8b4:	2b01      	cmp	r3, #1
 800e8b6:	d9e4      	bls.n	800e882 <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	689b      	ldr	r3, [r3, #8]
 800e8bc:	1e5a      	subs	r2, r3, #1
 800e8be:	693b      	ldr	r3, [r7, #16]
 800e8c0:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	1c5a      	adds	r2, r3, #1
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	601a      	str	r2, [r3, #0]
        break;
 800e8cc:	e1fa      	b.n	800ecc4 <http_send_data_ssi+0x528>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	7c1b      	ldrb	r3, [r3, #16]
 800e8d2:	461a      	mov	r2, r3
 800e8d4:	4b43      	ldr	r3, [pc, #268]	@ (800e9e4 <http_send_data_ssi+0x248>)
 800e8d6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800e8da:	693a      	ldr	r2, [r7, #16]
 800e8dc:	8992      	ldrh	r2, [r2, #12]
 800e8de:	4413      	add	r3, r2
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d107      	bne.n	800e8f6 <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	2202      	movs	r2, #2
 800e8f0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
          ssi->parsed++;
        }
        break;
 800e8f4:	e1e6      	b.n	800ecc4 <http_send_data_ssi+0x528>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	781a      	ldrb	r2, [r3, #0]
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	7c1b      	ldrb	r3, [r3, #16]
 800e900:	4619      	mov	r1, r3
 800e902:	4b38      	ldr	r3, [pc, #224]	@ (800e9e4 <http_send_data_ssi+0x248>)
 800e904:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800e908:	6939      	ldr	r1, [r7, #16]
 800e90a:	8989      	ldrh	r1, [r1, #12]
 800e90c:	440b      	add	r3, r1
 800e90e:	781b      	ldrb	r3, [r3, #0]
 800e910:	429a      	cmp	r2, r3
 800e912:	d106      	bne.n	800e922 <http_send_data_ssi+0x186>
            ssi->tag_index++;
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	899b      	ldrh	r3, [r3, #12]
 800e918:	3301      	adds	r3, #1
 800e91a:	b29a      	uxth	r2, r3
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	819a      	strh	r2, [r3, #12]
 800e920:	e003      	b.n	800e92a <http_send_data_ssi+0x18e>
            ssi->tag_state = TAG_NONE;
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	2200      	movs	r2, #0
 800e926:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
          ssi->parse_left--;
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	689b      	ldr	r3, [r3, #8]
 800e92e:	1e5a      	subs	r2, r3, #1
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	1c5a      	adds	r2, r3, #1
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	601a      	str	r2, [r3, #0]
        break;
 800e93e:	e1c1      	b.n	800ecc4 <http_send_data_ssi+0x528>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	899b      	ldrh	r3, [r3, #12]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d11e      	bne.n	800e986 <http_send_data_ssi+0x1ea>
 800e948:	693b      	ldr	r3, [r7, #16]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	781b      	ldrb	r3, [r3, #0]
 800e94e:	2b20      	cmp	r3, #32
 800e950:	d00e      	beq.n	800e970 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800e958:	2b09      	cmp	r3, #9
 800e95a:	d009      	beq.n	800e970 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	2b0a      	cmp	r3, #10
 800e964:	d004      	beq.n	800e970 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800e96c:	2b0d      	cmp	r3, #13
 800e96e:	d10a      	bne.n	800e986 <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800e970:	693b      	ldr	r3, [r7, #16]
 800e972:	689b      	ldr	r3, [r3, #8]
 800e974:	1e5a      	subs	r2, r3, #1
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800e97a:	693b      	ldr	r3, [r7, #16]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	1c5a      	adds	r2, r3, #1
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	601a      	str	r2, [r3, #0]
          break;
 800e984:	e19e      	b.n	800ecc4 <http_send_data_ssi+0x528>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	781a      	ldrb	r2, [r3, #0]
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	7c1b      	ldrb	r3, [r3, #16]
 800e990:	4914      	ldr	r1, [pc, #80]	@ (800e9e4 <http_send_data_ssi+0x248>)
 800e992:	00db      	lsls	r3, r3, #3
 800e994:	440b      	add	r3, r1
 800e996:	685b      	ldr	r3, [r3, #4]
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d013      	beq.n	800e9c6 <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800e9a4:	2b20      	cmp	r3, #32
 800e9a6:	d00e      	beq.n	800e9c6 <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	2b09      	cmp	r3, #9
 800e9b0:	d009      	beq.n	800e9c6 <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800e9b8:	2b0a      	cmp	r3, #10
 800e9ba:	d004      	beq.n	800e9c6 <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	781b      	ldrb	r3, [r3, #0]
 800e9c2:	2b0d      	cmp	r3, #13
 800e9c4:	d13f      	bne.n	800ea46 <http_send_data_ssi+0x2aa>

          if (ssi->tag_index == 0) {
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	899b      	ldrh	r3, [r3, #12]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d10c      	bne.n	800e9e8 <http_send_data_ssi+0x24c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
          if (ssi->tag_index == 0) {
 800e9d6:	e04c      	b.n	800ea72 <http_send_data_ssi+0x2d6>
 800e9d8:	08022dd0 	.word	0x08022dd0
 800e9dc:	08022e4c 	.word	0x08022e4c
 800e9e0:	08022e18 	.word	0x08022e18
 800e9e4:	08027678 	.word	0x08027678
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	2203      	movs	r2, #3
 800e9ec:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	899b      	ldrh	r3, [r3, #12]
 800e9f4:	2bff      	cmp	r3, #255	@ 0xff
 800e9f6:	d906      	bls.n	800ea06 <http_send_data_ssi+0x26a>
 800e9f8:	4b93      	ldr	r3, [pc, #588]	@ (800ec48 <http_send_data_ssi+0x4ac>)
 800e9fa:	f240 523a 	movw	r2, #1338	@ 0x53a
 800e9fe:	4993      	ldr	r1, [pc, #588]	@ (800ec4c <http_send_data_ssi+0x4b0>)
 800ea00:	4893      	ldr	r0, [pc, #588]	@ (800ec50 <http_send_data_ssi+0x4b4>)
 800ea02:	f012 fcd7 	bl	80213b4 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	899b      	ldrh	r3, [r3, #12]
 800ea0a:	b2da      	uxtb	r2, r3
 800ea0c:	693b      	ldr	r3, [r7, #16]
 800ea0e:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	899b      	ldrh	r3, [r3, #12]
 800ea14:	461a      	mov	r2, r3
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	4413      	add	r3, r2
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	781a      	ldrb	r2, [r3, #0]
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	7c1b      	ldrb	r3, [r3, #16]
 800ea28:	498a      	ldr	r1, [pc, #552]	@ (800ec54 <http_send_data_ssi+0x4b8>)
 800ea2a:	00db      	lsls	r3, r3, #3
 800ea2c:	440b      	add	r3, r1
 800ea2e:	685b      	ldr	r3, [r3, #4]
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d103      	bne.n	800ea3e <http_send_data_ssi+0x2a2>
              ssi->tag_index = 1;
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	2201      	movs	r2, #1
 800ea3a:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 800ea3c:	e019      	b.n	800ea72 <http_send_data_ssi+0x2d6>
            } else {
              ssi->tag_index = 0;
 800ea3e:	693b      	ldr	r3, [r7, #16]
 800ea40:	2200      	movs	r2, #0
 800ea42:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 800ea44:	e015      	b.n	800ea72 <http_send_data_ssi+0x2d6>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	899b      	ldrh	r3, [r3, #12]
 800ea4a:	2b07      	cmp	r3, #7
 800ea4c:	d80d      	bhi.n	800ea6a <http_send_data_ssi+0x2ce>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	681a      	ldr	r2, [r3, #0]
 800ea52:	693b      	ldr	r3, [r7, #16]
 800ea54:	899b      	ldrh	r3, [r3, #12]
 800ea56:	1c59      	adds	r1, r3, #1
 800ea58:	b288      	uxth	r0, r1
 800ea5a:	6939      	ldr	r1, [r7, #16]
 800ea5c:	8188      	strh	r0, [r1, #12]
 800ea5e:	4619      	mov	r1, r3
 800ea60:	7812      	ldrb	r2, [r2, #0]
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	440b      	add	r3, r1
 800ea66:	749a      	strb	r2, [r3, #18]
 800ea68:	e003      	b.n	800ea72 <http_send_data_ssi+0x2d6>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	689b      	ldr	r3, [r3, #8]
 800ea76:	1e5a      	subs	r2, r3, #1
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	1c5a      	adds	r2, r3, #1
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	601a      	str	r2, [r3, #0]

        break;
 800ea86:	e11d      	b.n	800ecc4 <http_send_data_ssi+0x528>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	899b      	ldrh	r3, [r3, #12]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d11e      	bne.n	800eace <http_send_data_ssi+0x332>
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	2b20      	cmp	r3, #32
 800ea98:	d00e      	beq.n	800eab8 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800ea9a:	693b      	ldr	r3, [r7, #16]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800eaa0:	2b09      	cmp	r3, #9
 800eaa2:	d009      	beq.n	800eab8 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	2b0a      	cmp	r3, #10
 800eaac:	d004      	beq.n	800eab8 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\r'))) {
 800eaae:	693b      	ldr	r3, [r7, #16]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800eab4:	2b0d      	cmp	r3, #13
 800eab6:	d10a      	bne.n	800eace <http_send_data_ssi+0x332>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	689b      	ldr	r3, [r3, #8]
 800eabc:	1e5a      	subs	r2, r3, #1
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	1c5a      	adds	r2, r3, #1
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	601a      	str	r2, [r3, #0]
          break;
 800eacc:	e0fa      	b.n	800ecc4 <http_send_data_ssi+0x528>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800eace:	693b      	ldr	r3, [r7, #16]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	781a      	ldrb	r2, [r3, #0]
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	7c1b      	ldrb	r3, [r3, #16]
 800ead8:	495e      	ldr	r1, [pc, #376]	@ (800ec54 <http_send_data_ssi+0x4b8>)
 800eada:	00db      	lsls	r3, r3, #3
 800eadc:	440b      	add	r3, r1
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	6939      	ldr	r1, [r7, #16]
 800eae2:	8989      	ldrh	r1, [r1, #12]
 800eae4:	440b      	add	r3, r1
 800eae6:	781b      	ldrb	r3, [r3, #0]
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d162      	bne.n	800ebb2 <http_send_data_ssi+0x416>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	689b      	ldr	r3, [r3, #8]
 800eaf0:	1e5a      	subs	r2, r3, #1
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	1c5a      	adds	r2, r3, #1
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	899b      	ldrh	r3, [r3, #12]
 800eb04:	3301      	adds	r3, #1
 800eb06:	b29a      	uxth	r2, r3
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 800eb0c:	693b      	ldr	r3, [r7, #16]
 800eb0e:	7c1b      	ldrb	r3, [r3, #16]
 800eb10:	4a50      	ldr	r2, [pc, #320]	@ (800ec54 <http_send_data_ssi+0x4b8>)
 800eb12:	00db      	lsls	r3, r3, #3
 800eb14:	4413      	add	r3, r2
 800eb16:	685b      	ldr	r3, [r3, #4]
 800eb18:	693a      	ldr	r2, [r7, #16]
 800eb1a:	8992      	ldrh	r2, [r2, #12]
 800eb1c:	4413      	add	r3, r2
 800eb1e:	781b      	ldrb	r3, [r3, #0]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	f040 80cc 	bne.w	800ecbe <http_send_data_ssi+0x522>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800eb26:	6838      	ldr	r0, [r7, #0]
 800eb28:	f7ff fb30 	bl	800e18c <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800eb2c:	693b      	ldr	r3, [r7, #16]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	2204      	movs	r2, #4
 800eb36:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            ssi->tag_end = ssi->parsed;
 800eb3a:	693b      	ldr	r3, [r7, #16]
 800eb3c:	681a      	ldr	r2, [r3, #0]
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	685a      	ldr	r2, [r3, #4]
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	699b      	ldr	r3, [r3, #24]
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	f240 80b7 	bls.w	800ecbe <http_send_data_ssi+0x522>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	685a      	ldr	r2, [r3, #4]
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	699b      	ldr	r3, [r3, #24]
 800eb58:	1ad3      	subs	r3, r2, r3
 800eb5a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800eb5e:	4293      	cmp	r3, r2
 800eb60:	dc06      	bgt.n	800eb70 <http_send_data_ssi+0x3d4>
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	685a      	ldr	r2, [r3, #4]
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	699b      	ldr	r3, [r3, #24]
 800eb6a:	1ad3      	subs	r3, r2, r3
 800eb6c:	b29b      	uxth	r3, r3
 800eb6e:	e001      	b.n	800eb74 <http_send_data_ssi+0x3d8>
 800eb70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800eb74:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	6999      	ldr	r1, [r3, #24]
 800eb7a:	f107 020e 	add.w	r2, r7, #14
 800eb7e:	2300      	movs	r3, #0
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f7ff f9df 	bl	800df44 <http_write>
 800eb86:	4603      	mov	r3, r0
 800eb88:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800eb8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	f040 8095 	bne.w	800ecbe <http_send_data_ssi+0x522>
                data_to_send = 1;
 800eb94:	2301      	movs	r3, #1
 800eb96:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	699b      	ldr	r3, [r3, #24]
 800eb9c:	89fa      	ldrh	r2, [r7, #14]
 800eb9e:	441a      	add	r2, r3
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eba8:	89fa      	ldrh	r2, [r7, #14]
 800ebaa:	1a9a      	subs	r2, r3, r2
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	625a      	str	r2, [r3, #36]	@ 0x24
           * back to idle state. */
          ssi->parse_left--;
          ssi->parsed++;
          ssi->tag_state = TAG_NONE;
        }
        break;
 800ebb0:	e085      	b.n	800ecbe <http_send_data_ssi+0x522>
          ssi->parse_left--;
 800ebb2:	693b      	ldr	r3, [r7, #16]
 800ebb4:	689b      	ldr	r3, [r3, #8]
 800ebb6:	1e5a      	subs	r2, r3, #1
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	1c5a      	adds	r2, r3, #1
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
        break;
 800ebce:	e076      	b.n	800ecbe <http_send_data_ssi+0x522>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	685a      	ldr	r2, [r3, #4]
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	699b      	ldr	r3, [r3, #24]
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d93d      	bls.n	800ec58 <http_send_data_ssi+0x4bc>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	685a      	ldr	r2, [r3, #4]
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	699b      	ldr	r3, [r3, #24]
 800ebe4:	1ad3      	subs	r3, r2, r3
 800ebe6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ebea:	4293      	cmp	r3, r2
 800ebec:	dc06      	bgt.n	800ebfc <http_send_data_ssi+0x460>
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	685a      	ldr	r2, [r3, #4]
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	699b      	ldr	r3, [r3, #24]
 800ebf6:	1ad3      	subs	r3, r2, r3
 800ebf8:	b29b      	uxth	r3, r3
 800ebfa:	e001      	b.n	800ec00 <http_send_data_ssi+0x464>
 800ebfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ec00:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800ec02:	89fb      	ldrh	r3, [r7, #14]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d00a      	beq.n	800ec1e <http_send_data_ssi+0x482>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	6999      	ldr	r1, [r3, #24]
 800ec0c:	f107 020e 	add.w	r2, r7, #14
 800ec10:	2300      	movs	r3, #0
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f7ff f996 	bl	800df44 <http_write>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	75fb      	strb	r3, [r7, #23]
 800ec1c:	e001      	b.n	800ec22 <http_send_data_ssi+0x486>
          } else {
            err = ERR_OK;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800ec22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d14c      	bne.n	800ecc4 <http_send_data_ssi+0x528>
            data_to_send = 1;
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	699b      	ldr	r3, [r3, #24]
 800ec32:	89fa      	ldrh	r2, [r7, #14]
 800ec34:	441a      	add	r2, r3
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec3e:	89fa      	ldrh	r2, [r7, #14]
 800ec40:	1a9a      	subs	r2, r3, r2
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	625a      	str	r2, [r3, #36]	@ 0x24
 800ec46:	e03d      	b.n	800ecc4 <http_send_data_ssi+0x528>
 800ec48:	08022dd0 	.word	0x08022dd0
 800ec4c:	08022f00 	.word	0x08022f00
 800ec50:	08022e18 	.word	0x08022e18
 800ec54:	08027678 	.word	0x08027678
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	899a      	ldrh	r2, [r3, #12]
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	89db      	ldrh	r3, [r3, #14]
 800ec60:	429a      	cmp	r2, r3
 800ec62:	d222      	bcs.n	800ecaa <http_send_data_ssi+0x50e>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800ec64:	693b      	ldr	r3, [r7, #16]
 800ec66:	89da      	ldrh	r2, [r3, #14]
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	899b      	ldrh	r3, [r3, #12]
 800ec6c:	1ad3      	subs	r3, r2, r3
 800ec6e:	b29b      	uxth	r3, r3
 800ec70:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	899b      	ldrh	r3, [r3, #12]
 800ec76:	3318      	adds	r3, #24
 800ec78:	693a      	ldr	r2, [r7, #16]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	1cd9      	adds	r1, r3, #3
 800ec7e:	f107 020e 	add.w	r2, r7, #14
 800ec82:	2301      	movs	r3, #1
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f7ff f95d 	bl	800df44 <http_write>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800ec8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d115      	bne.n	800ecc2 <http_send_data_ssi+0x526>
              data_to_send = 1;
 800ec96:	2301      	movs	r3, #1
 800ec98:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	899a      	ldrh	r2, [r3, #12]
 800ec9e:	89fb      	ldrh	r3, [r7, #14]
 800eca0:	4413      	add	r3, r2
 800eca2:	b29a      	uxth	r2, r3
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	819a      	strh	r2, [r3, #12]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800eca8:	e00b      	b.n	800ecc2 <http_send_data_ssi+0x526>
              ssi->tag_index = 0;
 800ecaa:	693b      	ldr	r3, [r7, #16]
 800ecac:	2200      	movs	r2, #0
 800ecae:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
          break;
 800ecb8:	e003      	b.n	800ecc2 <http_send_data_ssi+0x526>
        default:
          break;
 800ecba:	bf00      	nop
 800ecbc:	e002      	b.n	800ecc4 <http_send_data_ssi+0x528>
        break;
 800ecbe:	bf00      	nop
 800ecc0:	e000      	b.n	800ecc4 <http_send_data_ssi+0x528>
          break;
 800ecc2:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800ecca:	2b04      	cmp	r3, #4
 800eccc:	d003      	beq.n	800ecd6 <http_send_data_ssi+0x53a>
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	689b      	ldr	r3, [r3, #8]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d004      	beq.n	800ece0 <http_send_data_ssi+0x544>
 800ecd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	f43f adb6 	beq.w	800e84c <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	f893 30dc 	ldrb.w	r3, [r3, #220]	@ 0xdc
 800ece6:	2b04      	cmp	r3, #4
 800ece8:	d034      	beq.n	800ed54 <http_send_data_ssi+0x5b8>
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	681a      	ldr	r2, [r3, #0]
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	699b      	ldr	r3, [r3, #24]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d92e      	bls.n	800ed54 <http_send_data_ssi+0x5b8>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	681a      	ldr	r2, [r3, #0]
 800ecfa:	683b      	ldr	r3, [r7, #0]
 800ecfc:	699b      	ldr	r3, [r3, #24]
 800ecfe:	1ad3      	subs	r3, r2, r3
 800ed00:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ed04:	4293      	cmp	r3, r2
 800ed06:	dc06      	bgt.n	800ed16 <http_send_data_ssi+0x57a>
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	681a      	ldr	r2, [r3, #0]
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	699b      	ldr	r3, [r3, #24]
 800ed10:	1ad3      	subs	r3, r2, r3
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	e001      	b.n	800ed1a <http_send_data_ssi+0x57e>
 800ed16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ed1a:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	6999      	ldr	r1, [r3, #24]
 800ed20:	f107 020e 	add.w	r2, r7, #14
 800ed24:	2300      	movs	r3, #0
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f7ff f90c 	bl	800df44 <http_write>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800ed30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d10d      	bne.n	800ed54 <http_send_data_ssi+0x5b8>
      data_to_send = 1;
 800ed38:	2301      	movs	r3, #1
 800ed3a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	699b      	ldr	r3, [r3, #24]
 800ed40:	89fa      	ldrh	r2, [r7, #14]
 800ed42:	441a      	add	r2, r3
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed4c:	89fa      	ldrh	r2, [r7, #14]
 800ed4e:	1a9a      	subs	r2, r3, r2
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	625a      	str	r2, [r3, #36]	@ 0x24
    }
  }
  return data_to_send;
 800ed54:	7dbb      	ldrb	r3, [r7, #22]
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3718      	adds	r7, #24
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
 800ed5e:	bf00      	nop

0800ed60 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b084      	sub	sp, #16
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d101      	bne.n	800ed78 <http_send+0x18>
    return 0;
 800ed74:	2300      	movs	r3, #0
 800ed76:	e048      	b.n	800ee0a <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_FS_ASYNC_READ */

#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Do we have any more header data to send for this file? */
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 800ed7e:	2b04      	cmp	r3, #4
 800ed80:	d812      	bhi.n	800eda8 <http_send+0x48>
    data_to_send = http_send_headers(pcb, hs);
 800ed82:	6839      	ldr	r1, [r7, #0]
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f7ff fbcf 	bl	800e528 <http_send_headers>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	73fb      	strb	r3, [r7, #15]
    if ((data_to_send == HTTP_DATA_TO_SEND_FREED) ||
 800ed8e:	7bfb      	ldrb	r3, [r7, #15]
 800ed90:	2b03      	cmp	r3, #3
 800ed92:	d007      	beq.n	800eda4 <http_send+0x44>
 800ed94:	7bfb      	ldrb	r3, [r7, #15]
 800ed96:	2b01      	cmp	r3, #1
 800ed98:	d006      	beq.n	800eda8 <http_send+0x48>
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
         (hs->hdr_index < NUM_FILE_HDR_STRINGS))) {
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
 800eda0:	2b04      	cmp	r3, #4
 800eda2:	d801      	bhi.n	800eda8 <http_send+0x48>
      return data_to_send;
 800eda4:	7bfb      	ldrb	r3, [r7, #15]
 800eda6:	e030      	b.n	800ee0a <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edac:	2b00      	cmp	r3, #0
 800edae:	d108      	bne.n	800edc2 <http_send+0x62>
    if (!http_check_eof(pcb, hs)) {
 800edb0:	6839      	ldr	r1, [r7, #0]
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f7ff fc8c 	bl	800e6d0 <http_check_eof>
 800edb8:	4603      	mov	r3, r0
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d101      	bne.n	800edc2 <http_send+0x62>
      return 0;
 800edbe:	2300      	movs	r3, #0
 800edc0:	e023      	b.n	800ee0a <http_send+0xaa>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d006      	beq.n	800edd8 <http_send+0x78>
    data_to_send = http_send_data_ssi(pcb, hs);
 800edca:	6839      	ldr	r1, [r7, #0]
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f7ff fce5 	bl	800e79c <http_send_data_ssi>
 800edd2:	4603      	mov	r3, r0
 800edd4:	73fb      	strb	r3, [r7, #15]
 800edd6:	e005      	b.n	800ede4 <http_send+0x84>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800edd8:	6839      	ldr	r1, [r7, #0]
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f7ff fca8 	bl	800e730 <http_send_data_nonssi>
 800ede0:	4603      	mov	r3, r0
 800ede2:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d10d      	bne.n	800ee08 <http_send+0xa8>
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	695b      	ldr	r3, [r3, #20]
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7ff f815 	bl	800de20 <fs_bytes_left>
 800edf6:	4603      	mov	r3, r0
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	dc05      	bgt.n	800ee08 <http_send+0xa8>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800edfc:	6839      	ldr	r1, [r7, #0]
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f7ff f959 	bl	800e0b6 <http_eof>
    return 0;
 800ee04:	2300      	movs	r3, #0
 800ee06:	e000      	b.n	800ee0a <http_send+0xaa>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800ee08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3710      	adds	r7, #16
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}
	...

0800ee14 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b084      	sub	sp, #16
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
 800ee1c:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	4a1c      	ldr	r2, [pc, #112]	@ (800ee94 <http_get_404_file+0x80>)
 800ee22:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800ee24:	687a      	ldr	r2, [r7, #4]
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	4619      	mov	r1, r3
 800ee2c:	4610      	mov	r0, r2
 800ee2e:	f7fe ffaf 	bl	800dd90 <fs_open>
 800ee32:	4603      	mov	r3, r0
 800ee34:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800ee36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d024      	beq.n	800ee88 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	4a15      	ldr	r2, [pc, #84]	@ (800ee98 <http_get_404_file+0x84>)
 800ee42:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800ee44:	687a      	ldr	r2, [r7, #4]
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	4610      	mov	r0, r2
 800ee4e:	f7fe ff9f 	bl	800dd90 <fs_open>
 800ee52:	4603      	mov	r3, r0
 800ee54:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ee56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d014      	beq.n	800ee88 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	4a0e      	ldr	r2, [pc, #56]	@ (800ee9c <http_get_404_file+0x88>)
 800ee62:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800ee64:	687a      	ldr	r2, [r7, #4]
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	4619      	mov	r1, r3
 800ee6c:	4610      	mov	r0, r2
 800ee6e:	f7fe ff8f 	bl	800dd90 <fs_open>
 800ee72:	4603      	mov	r3, r0
 800ee74:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800ee76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d004      	beq.n	800ee88 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	2200      	movs	r2, #0
 800ee82:	601a      	str	r2, [r3, #0]
        return NULL;
 800ee84:	2300      	movs	r3, #0
 800ee86:	e000      	b.n	800ee8a <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800ee88:	687b      	ldr	r3, [r7, #4]
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3710      	adds	r7, #16
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
 800ee92:	bf00      	nop
 800ee94:	08022f18 	.word	0x08022f18
 800ee98:	08022f24 	.word	0x08022f24
 800ee9c:	08022f30 	.word	0x08022f30

0800eea0 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b08e      	sub	sp, #56	@ 0x38
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	60f8      	str	r0, [r7, #12]
 800eea8:	60b9      	str	r1, [r7, #8]
 800eeaa:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800eeb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d106      	bne.n	800eec4 <http_parse_request+0x24>
 800eeb6:	4b65      	ldr	r3, [pc, #404]	@ (800f04c <http_parse_request+0x1ac>)
 800eeb8:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 800eebc:	4964      	ldr	r1, [pc, #400]	@ (800f050 <http_parse_request+0x1b0>)
 800eebe:	4865      	ldr	r0, [pc, #404]	@ (800f054 <http_parse_request+0x1b4>)
 800eec0:	f012 fa78 	bl	80213b4 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d106      	bne.n	800eed8 <http_parse_request+0x38>
 800eeca:	4b60      	ldr	r3, [pc, #384]	@ (800f04c <http_parse_request+0x1ac>)
 800eecc:	f240 72af 	movw	r2, #1967	@ 0x7af
 800eed0:	4961      	ldr	r1, [pc, #388]	@ (800f058 <http_parse_request+0x1b8>)
 800eed2:	4860      	ldr	r0, [pc, #384]	@ (800f054 <http_parse_request+0x1b4>)
 800eed4:	f012 fa6e 	bl	80213b4 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	695b      	ldr	r3, [r3, #20]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d103      	bne.n	800eee8 <http_parse_request+0x48>
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	699b      	ldr	r3, [r3, #24]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d002      	beq.n	800eeee <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800eee8:	f06f 0307 	mvn.w	r3, #7
 800eeec:	e0a9      	b.n	800f042 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	6a1b      	ldr	r3, [r3, #32]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d103      	bne.n	800eefe <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eefa:	621a      	str	r2, [r3, #32]
 800eefc:	e005      	b.n	800ef0a <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	6a1b      	ldr	r3, [r3, #32]
 800ef02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ef04:	4618      	mov	r0, r3
 800ef06:	f005 fa05 	bl	8014314 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800ef0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ef0c:	f005 f9da 	bl	80142c4 <pbuf_ref>

  if (hs->req->next != NULL) {
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	6a1b      	ldr	r3, [r3, #32]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d012      	beq.n	800ef40 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	6a1b      	ldr	r3, [r3, #32]
 800ef1e:	891b      	ldrh	r3, [r3, #8]
 800ef20:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 800ef24:	4293      	cmp	r3, r2
 800ef26:	bf28      	it	cs
 800ef28:	4613      	movcs	r3, r2
 800ef2a:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	6a18      	ldr	r0, [r3, #32]
 800ef30:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800ef32:	2300      	movs	r3, #0
 800ef34:	4949      	ldr	r1, [pc, #292]	@ (800f05c <http_parse_request+0x1bc>)
 800ef36:	f005 fb25 	bl	8014584 <pbuf_copy_partial>
    data = httpd_req_buf;
 800ef3a:	4b48      	ldr	r3, [pc, #288]	@ (800f05c <http_parse_request+0x1bc>)
 800ef3c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef3e:	e005      	b.n	800ef4c <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800ef40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef42:	685b      	ldr	r3, [r3, #4]
 800ef44:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 800ef46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef48:	895b      	ldrh	r3, [r3, #10]
 800ef4a:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800ef4c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ef4e:	2b06      	cmp	r3, #6
 800ef50:	d962      	bls.n	800f018 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800ef52:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ef54:	461a      	mov	r2, r3
 800ef56:	4942      	ldr	r1, [pc, #264]	@ (800f060 <http_parse_request+0x1c0>)
 800ef58:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ef5a:	f003 fb7e 	bl	801265a <lwip_strnstr>
 800ef5e:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800ef60:	6a3b      	ldr	r3, [r7, #32]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d058      	beq.n	800f018 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800ef66:	2300      	movs	r3, #0
 800ef68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800ef6a:	2204      	movs	r2, #4
 800ef6c:	493d      	ldr	r1, [pc, #244]	@ (800f064 <http_parse_request+0x1c4>)
 800ef6e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ef70:	f012 fc05 	bl	802177e <strncmp>
 800ef74:	4603      	mov	r3, r0
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d116      	bne.n	800efa8 <http_parse_request+0x108>
        sp1 = data + 3;
 800ef7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef7c:	3303      	adds	r3, #3
 800ef7e:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800ef80:	69fb      	ldr	r3, [r7, #28]
 800ef82:	1c5a      	adds	r2, r3, #1
 800ef84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef86:	1ad3      	subs	r3, r2, r3
 800ef88:	b29b      	uxth	r3, r3
 800ef8a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800ef8c:	1ad3      	subs	r3, r2, r3
 800ef8e:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800ef90:	69fb      	ldr	r3, [r7, #28]
 800ef92:	3301      	adds	r3, #1
 800ef94:	8b7a      	ldrh	r2, [r7, #26]
 800ef96:	4934      	ldr	r1, [pc, #208]	@ (800f068 <http_parse_request+0x1c8>)
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f003 fb5e 	bl	801265a <lwip_strnstr>
 800ef9e:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800efa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d111      	bne.n	800efca <http_parse_request+0x12a>
 800efa6:	e006      	b.n	800efb6 <http_parse_request+0x116>
        data[4] = 0;
 800efa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efaa:	3304      	adds	r3, #4
 800efac:	2200      	movs	r2, #0
 800efae:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800efb0:	f06f 030f 	mvn.w	r3, #15
 800efb4:	e045      	b.n	800f042 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800efb6:	69fb      	ldr	r3, [r7, #28]
 800efb8:	3301      	adds	r3, #1
 800efba:	8b7a      	ldrh	r2, [r7, #26]
 800efbc:	4928      	ldr	r1, [pc, #160]	@ (800f060 <http_parse_request+0x1c0>)
 800efbe:	4618      	mov	r0, r3
 800efc0:	f003 fb4b 	bl	801265a <lwip_strnstr>
 800efc4:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 800efc6:	2301      	movs	r3, #1
 800efc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800efca:	69fb      	ldr	r3, [r7, #28]
 800efcc:	3301      	adds	r3, #1
 800efce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800efd0:	1ad3      	subs	r3, r2, r3
 800efd2:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800efd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d01e      	beq.n	800f018 <http_parse_request+0x178>
 800efda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800efdc:	69fb      	ldr	r3, [r7, #28]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d91a      	bls.n	800f018 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800efe2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800efe4:	461a      	mov	r2, r3
 800efe6:	4921      	ldr	r1, [pc, #132]	@ (800f06c <http_parse_request+0x1cc>)
 800efe8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800efea:	f003 fb36 	bl	801265a <lwip_strnstr>
 800efee:	4603      	mov	r3, r0
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d011      	beq.n	800f018 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800eff4:	69fb      	ldr	r3, [r7, #28]
 800eff6:	3301      	adds	r3, #1
 800eff8:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800effa:	69fb      	ldr	r3, [r7, #28]
 800effc:	2200      	movs	r2, #0
 800effe:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800f000:	8b3b      	ldrh	r3, [r7, #24]
 800f002:	697a      	ldr	r2, [r7, #20]
 800f004:	4413      	add	r3, r2
 800f006:	2200      	movs	r2, #0
 800f008:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800f00a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f00c:	6979      	ldr	r1, [r7, #20]
 800f00e:	68b8      	ldr	r0, [r7, #8]
 800f010:	f000 f880 	bl	800f114 <http_find_file>
 800f014:	4603      	mov	r3, r0
 800f016:	e014      	b.n	800f042 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	6a1b      	ldr	r3, [r3, #32]
 800f01c:	4618      	mov	r0, r3
 800f01e:	f005 f939 	bl	8014294 <pbuf_clen>
 800f022:	4603      	mov	r3, r0
 800f024:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	6a1b      	ldr	r3, [r3, #32]
 800f02a:	891b      	ldrh	r3, [r3, #8]
 800f02c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f030:	d205      	bcs.n	800f03e <http_parse_request+0x19e>
 800f032:	8a7b      	ldrh	r3, [r7, #18]
 800f034:	2b05      	cmp	r3, #5
 800f036:	d802      	bhi.n	800f03e <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800f038:	f06f 0304 	mvn.w	r3, #4
 800f03c:	e001      	b.n	800f042 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800f03e:	f06f 030f 	mvn.w	r3, #15
  }
}
 800f042:	4618      	mov	r0, r3
 800f044:	3738      	adds	r7, #56	@ 0x38
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}
 800f04a:	bf00      	nop
 800f04c:	08022dd0 	.word	0x08022dd0
 800f050:	08022f3c 	.word	0x08022f3c
 800f054:	08022e18 	.word	0x08022e18
 800f058:	08022e40 	.word	0x08022e40
 800f05c:	20004758 	.word	0x20004758
 800f060:	08022ec4 	.word	0x08022ec4
 800f064:	08022f48 	.word	0x08022f48
 800f068:	08022f50 	.word	0x08022f50
 800f06c:	08022f54 	.word	0x08022f54

0800f070 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b088      	sub	sp, #32
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 800f07a:	2300      	movs	r3, #0
 800f07c:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d040      	beq.n	800f106 <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 800f084:	2300      	movs	r3, #0
 800f086:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 800f088:	213f      	movs	r1, #63	@ 0x3f
 800f08a:	6838      	ldr	r0, [r7, #0]
 800f08c:	f012 fb6a 	bl	8021764 <strchr>
 800f090:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d002      	beq.n	800f09e <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	2200      	movs	r2, #0
 800f09c:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	613b      	str	r3, [r7, #16]
    ext = uri;
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800f0a6:	212e      	movs	r1, #46	@ 0x2e
 800f0a8:	6938      	ldr	r0, [r7, #16]
 800f0aa:	f012 fb5b 	bl	8021764 <strchr>
 800f0ae:	6138      	str	r0, [r7, #16]
 800f0b0:	e009      	b.n	800f0c6 <http_uri_is_ssi+0x56>
      ext = sub;
 800f0b2:	693b      	ldr	r3, [r7, #16]
 800f0b4:	617b      	str	r3, [r7, #20]
      sub++;
 800f0b6:	693b      	ldr	r3, [r7, #16]
 800f0b8:	3301      	adds	r3, #1
 800f0ba:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800f0bc:	212e      	movs	r1, #46	@ 0x2e
 800f0be:	6938      	ldr	r0, [r7, #16]
 800f0c0:	f012 fb50 	bl	8021764 <strchr>
 800f0c4:	6138      	str	r0, [r7, #16]
 800f0c6:	693b      	ldr	r3, [r7, #16]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d1f2      	bne.n	800f0b2 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	61fb      	str	r3, [r7, #28]
 800f0d0:	e010      	b.n	800f0f4 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800f0d2:	4a0f      	ldr	r2, [pc, #60]	@ (800f110 <http_uri_is_ssi+0xa0>)
 800f0d4:	69fb      	ldr	r3, [r7, #28]
 800f0d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0da:	4619      	mov	r1, r3
 800f0dc:	6978      	ldr	r0, [r7, #20]
 800f0de:	f003 faf2 	bl	80126c6 <lwip_stricmp>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d102      	bne.n	800f0ee <http_uri_is_ssi+0x7e>
        tag_check = 1;
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	76fb      	strb	r3, [r7, #27]
        break;
 800f0ec:	e005      	b.n	800f0fa <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800f0ee:	69fb      	ldr	r3, [r7, #28]
 800f0f0:	3301      	adds	r3, #1
 800f0f2:	61fb      	str	r3, [r7, #28]
 800f0f4:	69fb      	ldr	r3, [r7, #28]
 800f0f6:	2b04      	cmp	r3, #4
 800f0f8:	d9eb      	bls.n	800f0d2 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d002      	beq.n	800f106 <http_uri_is_ssi+0x96>
      *param = '?';
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	223f      	movs	r2, #63	@ 0x3f
 800f104:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 800f106:	7efb      	ldrb	r3, [r7, #27]
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3720      	adds	r7, #32
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}
 800f110:	0802763c 	.word	0x0802763c

0800f114 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800f114:	b590      	push	{r4, r7, lr}
 800f116:	b093      	sub	sp, #76	@ 0x4c
 800f118:	af02      	add	r7, sp, #8
 800f11a:	60f8      	str	r0, [r7, #12]
 800f11c:	60b9      	str	r1, [r7, #8]
 800f11e:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800f120:	2300      	movs	r3, #0
 800f122:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 800f124:	2300      	movs	r3, #0
 800f126:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800f128:	2300      	movs	r3, #0
 800f12a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	4618      	mov	r0, r3
 800f132:	f7f1 f88f 	bl	8000254 <strlen>
 800f136:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800f138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d072      	beq.n	800f224 <http_find_file+0x110>
 800f13e:	68ba      	ldr	r2, [r7, #8]
 800f140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f142:	3b01      	subs	r3, #1
 800f144:	4413      	add	r3, r2
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	2b2f      	cmp	r3, #47	@ 0x2f
 800f14a:	d16b      	bne.n	800f224 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800f14c:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800f14e:	4a80      	ldr	r2, [pc, #512]	@ (800f350 <http_find_file+0x23c>)
 800f150:	4293      	cmp	r3, r2
 800f152:	d102      	bne.n	800f15a <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800f154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f156:	2b01      	cmp	r3, #1
 800f158:	d164      	bne.n	800f224 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800f15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f15c:	3b01      	subs	r3, #1
 800f15e:	2b3f      	cmp	r3, #63	@ 0x3f
 800f160:	bf28      	it	cs
 800f162:	233f      	movcs	r3, #63	@ 0x3f
 800f164:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800f166:	6a3b      	ldr	r3, [r7, #32]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d00a      	beq.n	800f182 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	6a3a      	ldr	r2, [r7, #32]
 800f170:	4619      	mov	r1, r3
 800f172:	4877      	ldr	r0, [pc, #476]	@ (800f350 <http_find_file+0x23c>)
 800f174:	f012 fc07 	bl	8021986 <memcpy>
      http_uri_buf[copy_len] = 0;
 800f178:	4a75      	ldr	r2, [pc, #468]	@ (800f350 <http_find_file+0x23c>)
 800f17a:	6a3b      	ldr	r3, [r7, #32]
 800f17c:	4413      	add	r3, r2
 800f17e:	2200      	movs	r2, #0
 800f180:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800f182:	2300      	movs	r3, #0
 800f184:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f186:	e04a      	b.n	800f21e <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800f188:	6a3b      	ldr	r3, [r7, #32]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d028      	beq.n	800f1e0 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800f18e:	6a3b      	ldr	r3, [r7, #32]
 800f190:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800f194:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800f196:	69fb      	ldr	r3, [r7, #28]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d01e      	beq.n	800f1da <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800f19c:	4a6d      	ldr	r2, [pc, #436]	@ (800f354 <http_find_file+0x240>)
 800f19e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f7f1 f855 	bl	8000254 <strlen>
 800f1aa:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800f1ac:	69ba      	ldr	r2, [r7, #24]
 800f1ae:	69fb      	ldr	r3, [r7, #28]
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	bf28      	it	cs
 800f1b4:	4613      	movcs	r3, r2
 800f1b6:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800f1b8:	6a3b      	ldr	r3, [r7, #32]
 800f1ba:	4a65      	ldr	r2, [pc, #404]	@ (800f350 <http_find_file+0x23c>)
 800f1bc:	1898      	adds	r0, r3, r2
 800f1be:	4a65      	ldr	r2, [pc, #404]	@ (800f354 <http_find_file+0x240>)
 800f1c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1c2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f1c6:	697a      	ldr	r2, [r7, #20]
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	f012 fbdc 	bl	8021986 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800f1ce:	6a3a      	ldr	r2, [r7, #32]
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	4413      	add	r3, r2
 800f1d4:	4a5e      	ldr	r2, [pc, #376]	@ (800f350 <http_find_file+0x23c>)
 800f1d6:	2100      	movs	r1, #0
 800f1d8:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800f1da:	4b5d      	ldr	r3, [pc, #372]	@ (800f350 <http_find_file+0x23c>)
 800f1dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f1de:	e004      	b.n	800f1ea <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800f1e0:	4a5c      	ldr	r2, [pc, #368]	@ (800f354 <http_find_file+0x240>)
 800f1e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f1e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7fe fdce 	bl	800dd90 <fs_open>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 800f1f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d10b      	bne.n	800f218 <http_find_file+0x104>
        uri = file_name;
 800f200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f202:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 800f208:	4a52      	ldr	r2, [pc, #328]	@ (800f354 <http_find_file+0x240>)
 800f20a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f20c:	00db      	lsls	r3, r3, #3
 800f20e:	4413      	add	r3, r2
 800f210:	791b      	ldrb	r3, [r3, #4]
 800f212:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 800f216:	e005      	b.n	800f224 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800f218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f21a:	3301      	adds	r3, #1
 800f21c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f21e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f220:	2b04      	cmp	r3, #4
 800f222:	d9b1      	bls.n	800f188 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800f224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f226:	2b00      	cmp	r3, #0
 800f228:	d176      	bne.n	800f318 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	213f      	movs	r1, #63	@ 0x3f
 800f22e:	4618      	mov	r0, r3
 800f230:	f012 fa98 	bl	8021764 <strchr>
 800f234:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 800f236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d005      	beq.n	800f248 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800f23c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f23e:	2200      	movs	r2, #0
 800f240:	701a      	strb	r2, [r3, #0]
      params++;
 800f242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f244:	3301      	adds	r3, #1
 800f246:	637b      	str	r3, [r7, #52]	@ 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800f248:	4b43      	ldr	r3, [pc, #268]	@ (800f358 <http_find_file+0x244>)
 800f24a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f24e:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800f250:	4b42      	ldr	r3, [pc, #264]	@ (800f35c <http_find_file+0x248>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d034      	beq.n	800f2c2 <http_find_file+0x1ae>
 800f258:	4b41      	ldr	r3, [pc, #260]	@ (800f360 <http_find_file+0x24c>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d030      	beq.n	800f2c2 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800f260:	2300      	movs	r3, #0
 800f262:	633b      	str	r3, [r7, #48]	@ 0x30
 800f264:	e028      	b.n	800f2b8 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 800f266:	68b8      	ldr	r0, [r7, #8]
 800f268:	4b3d      	ldr	r3, [pc, #244]	@ (800f360 <http_find_file+0x24c>)
 800f26a:	681a      	ldr	r2, [r3, #0]
 800f26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f26e:	00db      	lsls	r3, r3, #3
 800f270:	4413      	add	r3, r2
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	4619      	mov	r1, r3
 800f276:	f7f0 ffe3 	bl	8000240 <strcmp>
 800f27a:	4603      	mov	r3, r0
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d118      	bne.n	800f2b2 <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 800f280:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f282:	68f8      	ldr	r0, [r7, #12]
 800f284:	f7fe ff24 	bl	800e0d0 <extract_uri_parameters>
 800f288:	4603      	mov	r3, r0
 800f28a:	4a33      	ldr	r2, [pc, #204]	@ (800f358 <http_find_file+0x244>)
 800f28c:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800f28e:	4b34      	ldr	r3, [pc, #208]	@ (800f360 <http_find_file+0x24c>)
 800f290:	681a      	ldr	r2, [r3, #0]
 800f292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f294:	00db      	lsls	r3, r3, #3
 800f296:	4413      	add	r3, r2
 800f298:	685c      	ldr	r4, [r3, #4]
 800f29a:	4b2f      	ldr	r3, [pc, #188]	@ (800f358 <http_find_file+0x244>)
 800f29c:	6819      	ldr	r1, [r3, #0]
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
                                         hs->param_vals);
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	3370      	adds	r3, #112	@ 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800f2a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f2aa:	47a0      	blx	r4
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	60bb      	str	r3, [r7, #8]
          break;
 800f2b0:	e007      	b.n	800f2c2 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800f2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f2b4:	3301      	adds	r3, #1
 800f2b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800f2b8:	4b28      	ldr	r3, [pc, #160]	@ (800f35c <http_find_file+0x248>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f2be:	429a      	cmp	r2, r3
 800f2c0:	dbd1      	blt.n	800f266 <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	68ba      	ldr	r2, [r7, #8]
 800f2c6:	4611      	mov	r1, r2
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f7fe fd61 	bl	800dd90 <fs_open>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800f2d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d102      	bne.n	800f2e0 <http_find_file+0x1cc>
      file = &hs->file_handle;
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f2de:	e006      	b.n	800f2ee <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 800f2e0:	f107 0308 	add.w	r3, r7, #8
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	68f8      	ldr	r0, [r7, #12]
 800f2e8:	f7ff fd94 	bl	800ee14 <http_get_404_file>
 800f2ec:	63b8      	str	r0, [r7, #56]	@ 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800f2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d011      	beq.n	800f318 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800f2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2f6:	7c1b      	ldrb	r3, [r3, #16]
 800f2f8:	f003 0308 	and.w	r3, r3, #8
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d003      	beq.n	800f308 <http_find_file+0x1f4>
        tag_check = 1;
 800f300:	2301      	movs	r3, #1
 800f302:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f306:	e007      	b.n	800f318 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	4619      	mov	r1, r3
 800f30c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f30e:	f7ff feaf 	bl	800f070 <http_uri_is_ssi>
 800f312:	4603      	mov	r3, r0
 800f314:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800f318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d106      	bne.n	800f32c <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800f31e:	f107 0308 	add.w	r3, r7, #8
 800f322:	4619      	mov	r1, r3
 800f324:	68f8      	ldr	r0, [r7, #12]
 800f326:	f7ff fd75 	bl	800ee14 <http_get_404_file>
 800f32a:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800f32c:	68ba      	ldr	r2, [r7, #8]
 800f32e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f330:	9301      	str	r3, [sp, #4]
 800f332:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f336:	9300      	str	r3, [sp, #0]
 800f338:	4613      	mov	r3, r2
 800f33a:	687a      	ldr	r2, [r7, #4]
 800f33c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f33e:	68f8      	ldr	r0, [r7, #12]
 800f340:	f000 f810 	bl	800f364 <http_init_file>
 800f344:	4603      	mov	r3, r0
}
 800f346:	4618      	mov	r0, r3
 800f348:	3744      	adds	r7, #68	@ 0x44
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd90      	pop	{r4, r7, pc}
 800f34e:	bf00      	nop
 800f350:	20004b58 	.word	0x20004b58
 800f354:	08027650 	.word	0x08027650
 800f358:	20004ba4 	.word	0x20004ba4
 800f35c:	20004ba0 	.word	0x20004ba0
 800f360:	20004b9c 	.word	0x20004b9c

0800f364 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b08a      	sub	sp, #40	@ 0x28
 800f368:	af02      	add	r7, sp, #8
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	60b9      	str	r1, [r7, #8]
 800f36e:	607a      	str	r2, [r7, #4]
 800f370:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	2b00      	cmp	r3, #0
 800f376:	f000 808f 	beq.w	800f498 <http_init_file+0x134>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d106      	bne.n	800f390 <http_init_file+0x2c>
 800f382:	4b56      	ldr	r3, [pc, #344]	@ (800f4dc <http_init_file+0x178>)
 800f384:	f640 120b 	movw	r2, #2315	@ 0x90b
 800f388:	4955      	ldr	r1, [pc, #340]	@ (800f4e0 <http_init_file+0x17c>)
 800f38a:	4856      	ldr	r0, [pc, #344]	@ (800f4e4 <http_init_file+0x180>)
 800f38c:	f012 f812 	bl	80213b4 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 800f390:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f394:	2b00      	cmp	r3, #0
 800f396:	d01c      	beq.n	800f3d2 <http_init_file+0x6e>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800f398:	f7fe fd51 	bl	800de3e <http_ssi_state_alloc>
 800f39c:	61b8      	str	r0, [r7, #24]
      if (ssi != NULL) {
 800f39e:	69bb      	ldr	r3, [r7, #24]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d016      	beq.n	800f3d2 <http_init_file+0x6e>
        ssi->tag_index = 0;
 800f3a4:	69bb      	ldr	r3, [r7, #24]
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 800f3aa:	69bb      	ldr	r3, [r7, #24]
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
        ssi->parsed = file->data;
 800f3b2:	68bb      	ldr	r3, [r7, #8]
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	69bb      	ldr	r3, [r7, #24]
 800f3b8:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	685b      	ldr	r3, [r3, #4]
 800f3be:	461a      	mov	r2, r3
 800f3c0:	69bb      	ldr	r3, [r7, #24]
 800f3c2:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	681a      	ldr	r2, [r3, #0]
 800f3c8:	69bb      	ldr	r3, [r7, #24]
 800f3ca:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	69ba      	ldr	r2, [r7, #24]
 800f3d0:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	68ba      	ldr	r2, [r7, #8]
 800f3d6:	615a      	str	r2, [r3, #20]
#if LWIP_HTTPD_CGI_SSI
    if (params != NULL) {
 800f3d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d01b      	beq.n	800f416 <http_init_file+0xb2>
      /* URI contains parameters, call generic CGI handler */
      int count;
#if LWIP_HTTPD_CGI
      if (http_cgi_paramcount >= 0) {
 800f3de:	4b42      	ldr	r3, [pc, #264]	@ (800f4e8 <http_init_file+0x184>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	db03      	blt.n	800f3ee <http_init_file+0x8a>
        count = http_cgi_paramcount;
 800f3e6:	4b40      	ldr	r3, [pc, #256]	@ (800f4e8 <http_init_file+0x184>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	61fb      	str	r3, [r7, #28]
 800f3ec:	e004      	b.n	800f3f8 <http_init_file+0x94>
      } else
#endif
      {
        count = extract_uri_parameters(hs, params);
 800f3ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f3f0:	68f8      	ldr	r0, [r7, #12]
 800f3f2:	f7fe fe6d 	bl	800e0d0 <extract_uri_parameters>
 800f3f6:	61f8      	str	r0, [r7, #28]
      }
      printf("here here");
 800f3f8:	483c      	ldr	r0, [pc, #240]	@ (800f4ec <http_init_file+0x188>)
 800f3fa:	f011 ffdb 	bl	80213b4 <iprintf>
      httpd_cgi_handler(file, uri, count, http_cgi_params, http_cgi_param_vals
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	3370      	adds	r3, #112	@ 0x70
 800f408:	9300      	str	r3, [sp, #0]
 800f40a:	4613      	mov	r3, r2
 800f40c:	69fa      	ldr	r2, [r7, #28]
 800f40e:	6839      	ldr	r1, [r7, #0]
 800f410:	68b8      	ldr	r0, [r7, #8]
 800f412:	f7f1 f967 	bl	80006e4 <httpd_cgi_handler>
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	681a      	ldr	r2, [r3, #0]
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	685b      	ldr	r3, [r3, #4]
 800f422:	2b00      	cmp	r3, #0
 800f424:	da06      	bge.n	800f434 <http_init_file+0xd0>
 800f426:	4b2d      	ldr	r3, [pc, #180]	@ (800f4dc <http_init_file+0x178>)
 800f428:	f640 1235 	movw	r2, #2357	@ 0x935
 800f42c:	4930      	ldr	r1, [pc, #192]	@ (800f4f0 <http_init_file+0x18c>)
 800f42e:	482d      	ldr	r0, [pc, #180]	@ (800f4e4 <http_init_file+0x180>)
 800f430:	f011 ffc0 	bl	80213b4 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800f434:	68bb      	ldr	r3, [r7, #8]
 800f436:	685b      	ldr	r3, [r3, #4]
 800f438:	461a      	mov	r2, r3
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	2200      	movs	r2, #0
 800f442:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d032      	beq.n	800f4b2 <http_init_file+0x14e>
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	695b      	ldr	r3, [r3, #20]
 800f450:	7c1b      	ldrb	r3, [r3, #16]
 800f452:	f003 0301 	and.w	r3, r3, #1
 800f456:	2b00      	cmp	r3, #0
 800f458:	d02b      	beq.n	800f4b2 <http_init_file+0x14e>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	6998      	ldr	r0, [r3, #24]
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f462:	461a      	mov	r2, r3
 800f464:	4923      	ldr	r1, [pc, #140]	@ (800f4f4 <http_init_file+0x190>)
 800f466:	f003 f8f8 	bl	801265a <lwip_strnstr>
 800f46a:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d01f      	beq.n	800f4b2 <http_init_file+0x14e>
        int diff = file_start + 4 - hs->file;
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	1d1a      	adds	r2, r3, #4
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	699b      	ldr	r3, [r3, #24]
 800f47a:	1ad3      	subs	r3, r2, r3
 800f47c:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	699a      	ldr	r2, [r3, #24]
 800f482:	693b      	ldr	r3, [r7, #16]
 800f484:	441a      	add	r2, r3
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f48e:	693b      	ldr	r3, [r7, #16]
 800f490:	1ad2      	subs	r2, r2, r3
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	625a      	str	r2, [r3, #36]	@ 0x24
 800f496:	e00c      	b.n	800f4b2 <http_init_file+0x14e>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	2200      	movs	r2, #0
 800f49c:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  }
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Determine the HTTP headers to send based on the file extension of
   * the requested URI. */
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	695b      	ldr	r3, [r3, #20]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d006      	beq.n	800f4c8 <http_init_file+0x164>
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	695b      	ldr	r3, [r3, #20]
 800f4be:	7c1b      	ldrb	r3, [r3, #16]
 800f4c0:	f003 0301 	and.w	r3, r3, #1
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d103      	bne.n	800f4d0 <http_init_file+0x16c>
    get_http_headers(hs, uri);
 800f4c8:	6839      	ldr	r1, [r7, #0]
 800f4ca:	68f8      	ldr	r0, [r7, #12]
 800f4cc:	f7fe ff00 	bl	800e2d0 <get_http_headers>
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800f4d0:	2300      	movs	r3, #0
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	3720      	adds	r7, #32
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}
 800f4da:	bf00      	nop
 800f4dc:	08022dd0 	.word	0x08022dd0
 800f4e0:	08022f5c 	.word	0x08022f5c
 800f4e4:	08022e18 	.word	0x08022e18
 800f4e8:	20004ba4 	.word	0x20004ba4
 800f4ec:	08022f70 	.word	0x08022f70
 800f4f0:	08022f7c 	.word	0x08022f7c
 800f4f4:	08022f54 	.word	0x08022f54

0800f4f8 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b084      	sub	sp, #16
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	460b      	mov	r3, r1
 800f502:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d002      	beq.n	800f514 <http_err+0x1c>
    http_state_free(hs);
 800f50e:	68f8      	ldr	r0, [r7, #12]
 800f510:	f7fe fd06 	bl	800df20 <http_state_free>
  }
}
 800f514:	bf00      	nop
 800f516:	3710      	adds	r7, #16
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}

0800f51c <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b086      	sub	sp, #24
 800f520:	af00      	add	r7, sp, #0
 800f522:	60f8      	str	r0, [r7, #12]
 800f524:	60b9      	str	r1, [r7, #8]
 800f526:	4613      	mov	r3, r2
 800f528:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d101      	bne.n	800f538 <http_sent+0x1c>
    return ERR_OK;
 800f534:	2300      	movs	r3, #0
 800f536:	e008      	b.n	800f54a <http_sent+0x2e>
  }

  hs->retries = 0;
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	2200      	movs	r2, #0
 800f53c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 800f540:	6979      	ldr	r1, [r7, #20]
 800f542:	68b8      	ldr	r0, [r7, #8]
 800f544:	f7ff fc0c 	bl	800ed60 <http_send>

  return ERR_OK;
 800f548:	2300      	movs	r3, #0
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3718      	adds	r7, #24
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}

0800f552 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800f552:	b580      	push	{r7, lr}
 800f554:	b084      	sub	sp, #16
 800f556:	af00      	add	r7, sp, #0
 800f558:	6078      	str	r0, [r7, #4]
 800f55a:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d107      	bne.n	800f576 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800f566:	2100      	movs	r1, #0
 800f568:	6838      	ldr	r0, [r7, #0]
 800f56a:	f7fe fd95 	bl	800e098 <http_close_conn>
 800f56e:	4603      	mov	r3, r0
 800f570:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800f572:	2300      	movs	r3, #0
 800f574:	e021      	b.n	800f5ba <http_poll+0x68>
  } else {
    hs->retries++;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f57c:	3301      	adds	r3, #1
 800f57e:	b2da      	uxtb	r2, r3
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f58c:	2b04      	cmp	r3, #4
 800f58e:	d105      	bne.n	800f59c <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800f590:	68f9      	ldr	r1, [r7, #12]
 800f592:	6838      	ldr	r0, [r7, #0]
 800f594:	f7fe fd80 	bl	800e098 <http_close_conn>
      return ERR_OK;
 800f598:	2300      	movs	r3, #0
 800f59a:	e00e      	b.n	800f5ba <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	695b      	ldr	r3, [r3, #20]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d009      	beq.n	800f5b8 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800f5a4:	68f9      	ldr	r1, [r7, #12]
 800f5a6:	6838      	ldr	r0, [r7, #0]
 800f5a8:	f7ff fbda 	bl	800ed60 <http_send>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d002      	beq.n	800f5b8 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800f5b2:	6838      	ldr	r0, [r7, #0]
 800f5b4:	f00a fb30 	bl	8019c18 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800f5b8:	2300      	movs	r3, #0
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3710      	adds	r7, #16
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}
	...

0800f5c4 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b086      	sub	sp, #24
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	60f8      	str	r0, [r7, #12]
 800f5cc:	60b9      	str	r1, [r7, #8]
 800f5ce:	607a      	str	r2, [r7, #4]
 800f5d0:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800f5d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d105      	bne.n	800f5ea <http_recv+0x26>
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d002      	beq.n	800f5ea <http_recv+0x26>
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d111      	bne.n	800f60e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d008      	beq.n	800f602 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	891b      	ldrh	r3, [r3, #8]
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	68b8      	ldr	r0, [r7, #8]
 800f5f8:	f005 ff02 	bl	8015400 <tcp_recved>
      pbuf_free(p);
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f004 fdbb 	bl	8014178 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800f602:	6979      	ldr	r1, [r7, #20]
 800f604:	68b8      	ldr	r0, [r7, #8]
 800f606:	f7fe fd47 	bl	800e098 <http_close_conn>
    return ERR_OK;
 800f60a:	2300      	movs	r3, #0
 800f60c:	e055      	b.n	800f6ba <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	891b      	ldrh	r3, [r3, #8]
 800f612:	4619      	mov	r1, r3
 800f614:	68b8      	ldr	r0, [r7, #8]
 800f616:	f005 fef3 	bl	8015400 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	695b      	ldr	r3, [r3, #20]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d147      	bne.n	800f6b2 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800f622:	68ba      	ldr	r2, [r7, #8]
 800f624:	6979      	ldr	r1, [r7, #20]
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f7ff fc3a 	bl	800eea0 <http_parse_request>
 800f62c:	4603      	mov	r3, r0
 800f62e:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800f630:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d015      	beq.n	800f664 <http_recv+0xa0>
 800f638:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f63c:	f113 0f05 	cmn.w	r3, #5
 800f640:	d010      	beq.n	800f664 <http_recv+0xa0>
 800f642:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f646:	f113 0f10 	cmn.w	r3, #16
 800f64a:	d00b      	beq.n	800f664 <http_recv+0xa0>
 800f64c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f650:	f113 0f08 	cmn.w	r3, #8
 800f654:	d006      	beq.n	800f664 <http_recv+0xa0>
 800f656:	4b1b      	ldr	r3, [pc, #108]	@ (800f6c4 <http_recv+0x100>)
 800f658:	f640 2205 	movw	r2, #2565	@ 0xa05
 800f65c:	491a      	ldr	r1, [pc, #104]	@ (800f6c8 <http_recv+0x104>)
 800f65e:	481b      	ldr	r0, [pc, #108]	@ (800f6cc <http_recv+0x108>)
 800f660:	f011 fea8 	bl	80213b4 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800f664:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f668:	f113 0f05 	cmn.w	r3, #5
 800f66c:	d00b      	beq.n	800f686 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	6a1b      	ldr	r3, [r3, #32]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d007      	beq.n	800f686 <http_recv+0xc2>
          pbuf_free(hs->req);
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	6a1b      	ldr	r3, [r3, #32]
 800f67a:	4618      	mov	r0, r3
 800f67c:	f004 fd7c 	bl	8014178 <pbuf_free>
          hs->req = NULL;
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	2200      	movs	r2, #0
 800f684:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f004 fd76 	bl	8014178 <pbuf_free>
      if (parsed == ERR_OK) {
 800f68c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d104      	bne.n	800f69e <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800f694:	6979      	ldr	r1, [r7, #20]
 800f696:	68b8      	ldr	r0, [r7, #8]
 800f698:	f7ff fb62 	bl	800ed60 <http_send>
 800f69c:	e00c      	b.n	800f6b8 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800f69e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f6a2:	f113 0f10 	cmn.w	r3, #16
 800f6a6:	d107      	bne.n	800f6b8 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800f6a8:	6979      	ldr	r1, [r7, #20]
 800f6aa:	68b8      	ldr	r0, [r7, #8]
 800f6ac:	f7fe fcf4 	bl	800e098 <http_close_conn>
 800f6b0:	e002      	b.n	800f6b8 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f004 fd60 	bl	8014178 <pbuf_free>
    }
  }
  return ERR_OK;
 800f6b8:	2300      	movs	r3, #0
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3718      	adds	r7, #24
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}
 800f6c2:	bf00      	nop
 800f6c4:	08022dd0 	.word	0x08022dd0
 800f6c8:	08022f9c 	.word	0x08022f9c
 800f6cc:	08022e18 	.word	0x08022e18

0800f6d0 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b086      	sub	sp, #24
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	60f8      	str	r0, [r7, #12]
 800f6d8:	60b9      	str	r1, [r7, #8]
 800f6da:	4613      	mov	r3, r2
 800f6dc:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800f6de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d102      	bne.n	800f6ec <http_accept+0x1c>
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d102      	bne.n	800f6f2 <http_accept+0x22>
    return ERR_VAL;
 800f6ec:	f06f 0305 	mvn.w	r3, #5
 800f6f0:	e025      	b.n	800f73e <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800f6f2:	2101      	movs	r1, #1
 800f6f4:	68b8      	ldr	r0, [r7, #8]
 800f6f6:	f006 fb69 	bl	8015dcc <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800f6fa:	f7fe fbd3 	bl	800dea4 <http_state_alloc>
 800f6fe:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800f700:	697b      	ldr	r3, [r7, #20]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d102      	bne.n	800f70c <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800f706:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f70a:	e018      	b.n	800f73e <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800f70c:	697b      	ldr	r3, [r7, #20]
 800f70e:	68ba      	ldr	r2, [r7, #8]
 800f710:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800f712:	6979      	ldr	r1, [r7, #20]
 800f714:	68b8      	ldr	r0, [r7, #8]
 800f716:	f006 fd59 	bl	80161cc <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800f71a:	490b      	ldr	r1, [pc, #44]	@ (800f748 <http_accept+0x78>)
 800f71c:	68b8      	ldr	r0, [r7, #8]
 800f71e:	f006 fd67 	bl	80161f0 <tcp_recv>
  altcp_err(pcb, http_err);
 800f722:	490a      	ldr	r1, [pc, #40]	@ (800f74c <http_accept+0x7c>)
 800f724:	68b8      	ldr	r0, [r7, #8]
 800f726:	f006 fda7 	bl	8016278 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800f72a:	2204      	movs	r2, #4
 800f72c:	4908      	ldr	r1, [pc, #32]	@ (800f750 <http_accept+0x80>)
 800f72e:	68b8      	ldr	r0, [r7, #8]
 800f730:	f006 fddc 	bl	80162ec <tcp_poll>
  altcp_sent(pcb, http_sent);
 800f734:	4907      	ldr	r1, [pc, #28]	@ (800f754 <http_accept+0x84>)
 800f736:	68b8      	ldr	r0, [r7, #8]
 800f738:	f006 fd7c 	bl	8016234 <tcp_sent>

  return ERR_OK;
 800f73c:	2300      	movs	r3, #0
}
 800f73e:	4618      	mov	r0, r3
 800f740:	3718      	adds	r7, #24
 800f742:	46bd      	mov	sp, r7
 800f744:	bd80      	pop	{r7, pc}
 800f746:	bf00      	nop
 800f748:	0800f5c5 	.word	0x0800f5c5
 800f74c:	0800f4f9 	.word	0x0800f4f9
 800f750:	0800f553 	.word	0x0800f553
 800f754:	0800f51d 	.word	0x0800f51d

0800f758 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b084      	sub	sp, #16
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	460b      	mov	r3, r1
 800f762:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d029      	beq.n	800f7be <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800f76a:	2101      	movs	r1, #1
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f006 fb2d 	bl	8015dcc <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800f772:	887b      	ldrh	r3, [r7, #2]
 800f774:	461a      	mov	r2, r3
 800f776:	4914      	ldr	r1, [pc, #80]	@ (800f7c8 <httpd_init_pcb+0x70>)
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f005 fc73 	bl	8015064 <tcp_bind>
 800f77e:	4603      	mov	r3, r0
 800f780:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800f782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d006      	beq.n	800f798 <httpd_init_pcb+0x40>
 800f78a:	4b10      	ldr	r3, [pc, #64]	@ (800f7cc <httpd_init_pcb+0x74>)
 800f78c:	f640 2258 	movw	r2, #2648	@ 0xa58
 800f790:	490f      	ldr	r1, [pc, #60]	@ (800f7d0 <httpd_init_pcb+0x78>)
 800f792:	4810      	ldr	r0, [pc, #64]	@ (800f7d4 <httpd_init_pcb+0x7c>)
 800f794:	f011 fe0e 	bl	80213b4 <iprintf>
    pcb = altcp_listen(pcb);
 800f798:	21ff      	movs	r1, #255	@ 0xff
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f005 fd1a 	bl	80151d4 <tcp_listen_with_backlog>
 800f7a0:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d106      	bne.n	800f7b6 <httpd_init_pcb+0x5e>
 800f7a8:	4b08      	ldr	r3, [pc, #32]	@ (800f7cc <httpd_init_pcb+0x74>)
 800f7aa:	f640 225a 	movw	r2, #2650	@ 0xa5a
 800f7ae:	490a      	ldr	r1, [pc, #40]	@ (800f7d8 <httpd_init_pcb+0x80>)
 800f7b0:	4808      	ldr	r0, [pc, #32]	@ (800f7d4 <httpd_init_pcb+0x7c>)
 800f7b2:	f011 fdff 	bl	80213b4 <iprintf>
    altcp_accept(pcb, http_accept);
 800f7b6:	4909      	ldr	r1, [pc, #36]	@ (800f7dc <httpd_init_pcb+0x84>)
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f006 fd7f 	bl	80162bc <tcp_accept>
  }
}
 800f7be:	bf00      	nop
 800f7c0:	3710      	adds	r7, #16
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	bf00      	nop
 800f7c8:	08027754 	.word	0x08027754
 800f7cc:	08022dd0 	.word	0x08022dd0
 800f7d0:	08022fc8 	.word	0x08022fc8
 800f7d4:	08022e18 	.word	0x08022e18
 800f7d8:	08022fe4 	.word	0x08022fe4
 800f7dc:	0800f6d1 	.word	0x0800f6d1

0800f7e0 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b082      	sub	sp, #8
 800f7e4:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800f7e6:	202e      	movs	r0, #46	@ 0x2e
 800f7e8:	f006 fce2 	bl	80161b0 <tcp_new_ip_type>
 800f7ec:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d106      	bne.n	800f802 <httpd_init+0x22>
 800f7f4:	4b07      	ldr	r3, [pc, #28]	@ (800f814 <httpd_init+0x34>)
 800f7f6:	f640 2273 	movw	r2, #2675	@ 0xa73
 800f7fa:	4907      	ldr	r1, [pc, #28]	@ (800f818 <httpd_init+0x38>)
 800f7fc:	4807      	ldr	r0, [pc, #28]	@ (800f81c <httpd_init+0x3c>)
 800f7fe:	f011 fdd9 	bl	80213b4 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800f802:	2150      	movs	r1, #80	@ 0x50
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f7ff ffa7 	bl	800f758 <httpd_init_pcb>
}
 800f80a:	bf00      	nop
 800f80c:	3708      	adds	r7, #8
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd80      	pop	{r7, pc}
 800f812:	bf00      	nop
 800f814:	08022dd0 	.word	0x08022dd0
 800f818:	08023004 	.word	0x08023004
 800f81c:	08022e18 	.word	0x08022e18

0800f820 <mdns_domain_add_label_base>:
static err_t mdns_send_outpacket(struct mdns_outpacket *outpkt, u8_t flags);
static void mdns_probe(void* arg);

static err_t
mdns_domain_add_label_base(struct mdns_domain *domain, u8_t len)
{
 800f820:	b480      	push	{r7}
 800f822:	b083      	sub	sp, #12
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
 800f828:	460b      	mov	r3, r1
 800f82a:	70fb      	strb	r3, [r7, #3]
  if (len > MDNS_LABEL_MAXLEN) {
 800f82c:	78fb      	ldrb	r3, [r7, #3]
 800f82e:	2b3f      	cmp	r3, #63	@ 0x3f
 800f830:	d902      	bls.n	800f838 <mdns_domain_add_label_base+0x18>
    return ERR_VAL;
 800f832:	f06f 0305 	mvn.w	r3, #5
 800f836:	e028      	b.n	800f88a <mdns_domain_add_label_base+0x6a>
  }
  if (len > 0 && (1 + len + domain->length >= MDNS_DOMAIN_MAXLEN)) {
 800f838:	78fb      	ldrb	r3, [r7, #3]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d00a      	beq.n	800f854 <mdns_domain_add_label_base+0x34>
 800f83e:	78fb      	ldrb	r3, [r7, #3]
 800f840:	3301      	adds	r3, #1
 800f842:	687a      	ldr	r2, [r7, #4]
 800f844:	f8b2 2100 	ldrh.w	r2, [r2, #256]	@ 0x100
 800f848:	4413      	add	r3, r2
 800f84a:	2bff      	cmp	r3, #255	@ 0xff
 800f84c:	dd02      	ble.n	800f854 <mdns_domain_add_label_base+0x34>
    return ERR_VAL;
 800f84e:	f06f 0305 	mvn.w	r3, #5
 800f852:	e01a      	b.n	800f88a <mdns_domain_add_label_base+0x6a>
  }
  /* Allow only zero marker on last byte */
  if (len == 0 && (1 + domain->length > MDNS_DOMAIN_MAXLEN)) {
 800f854:	78fb      	ldrb	r3, [r7, #3]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d107      	bne.n	800f86a <mdns_domain_add_label_base+0x4a>
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800f860:	2bff      	cmp	r3, #255	@ 0xff
 800f862:	d902      	bls.n	800f86a <mdns_domain_add_label_base+0x4a>
    return ERR_VAL;
 800f864:	f06f 0305 	mvn.w	r3, #5
 800f868:	e00f      	b.n	800f88a <mdns_domain_add_label_base+0x6a>
  }
  domain->name[domain->length] = len;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800f870:	4619      	mov	r1, r3
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	78fa      	ldrb	r2, [r7, #3]
 800f876:	545a      	strb	r2, [r3, r1]
  domain->length++;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800f87e:	3301      	adds	r3, #1
 800f880:	b29a      	uxth	r2, r3
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
  return ERR_OK;
 800f888:	2300      	movs	r3, #0
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	370c      	adds	r7, #12
 800f88e:	46bd      	mov	sp, r7
 800f890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f894:	4770      	bx	lr

0800f896 <mdns_domain_add_label>:
 * @param len The length of the label
 * @return ERR_OK on success, an err_t otherwise if label too long
 */
err_t
mdns_domain_add_label(struct mdns_domain *domain, const char *label, u8_t len)
{
 800f896:	b580      	push	{r7, lr}
 800f898:	b086      	sub	sp, #24
 800f89a:	af00      	add	r7, sp, #0
 800f89c:	60f8      	str	r0, [r7, #12]
 800f89e:	60b9      	str	r1, [r7, #8]
 800f8a0:	4613      	mov	r3, r2
 800f8a2:	71fb      	strb	r3, [r7, #7]
  err_t err = mdns_domain_add_label_base(domain, len);
 800f8a4:	79fb      	ldrb	r3, [r7, #7]
 800f8a6:	4619      	mov	r1, r3
 800f8a8:	68f8      	ldr	r0, [r7, #12]
 800f8aa:	f7ff ffb9 	bl	800f820 <mdns_domain_add_label_base>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800f8b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d002      	beq.n	800f8c0 <mdns_domain_add_label+0x2a>
    return err;
 800f8ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f8be:	e018      	b.n	800f8f2 <mdns_domain_add_label+0x5c>
  }
  if (len) {
 800f8c0:	79fb      	ldrb	r3, [r7, #7]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d014      	beq.n	800f8f0 <mdns_domain_add_label+0x5a>
    MEMCPY(&domain->name[domain->length], label, len);
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	4413      	add	r3, r2
 800f8d2:	79fa      	ldrb	r2, [r7, #7]
 800f8d4:	68b9      	ldr	r1, [r7, #8]
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f012 f855 	bl	8021986 <memcpy>
    domain->length += len;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	f8b3 2100 	ldrh.w	r2, [r3, #256]	@ 0x100
 800f8e2:	79fb      	ldrb	r3, [r7, #7]
 800f8e4:	b29b      	uxth	r3, r3
 800f8e6:	4413      	add	r3, r2
 800f8e8:	b29a      	uxth	r2, r3
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
  }
  return ERR_OK;
 800f8f0:	2300      	movs	r3, #0
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	3718      	adds	r7, #24
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	bd80      	pop	{r7, pc}

0800f8fa <mdns_domain_add_label_pbuf>:
/**
 * Add a label part to a domain (@see mdns_domain_add_label but copy directly from pbuf)
 */
static err_t
mdns_domain_add_label_pbuf(struct mdns_domain *domain, const struct pbuf *p, u16_t offset, u8_t len)
{
 800f8fa:	b580      	push	{r7, lr}
 800f8fc:	b086      	sub	sp, #24
 800f8fe:	af00      	add	r7, sp, #0
 800f900:	60f8      	str	r0, [r7, #12]
 800f902:	60b9      	str	r1, [r7, #8]
 800f904:	4611      	mov	r1, r2
 800f906:	461a      	mov	r2, r3
 800f908:	460b      	mov	r3, r1
 800f90a:	80fb      	strh	r3, [r7, #6]
 800f90c:	4613      	mov	r3, r2
 800f90e:	717b      	strb	r3, [r7, #5]
  err_t err = mdns_domain_add_label_base(domain, len);
 800f910:	797b      	ldrb	r3, [r7, #5]
 800f912:	4619      	mov	r1, r3
 800f914:	68f8      	ldr	r0, [r7, #12]
 800f916:	f7ff ff83 	bl	800f820 <mdns_domain_add_label_base>
 800f91a:	4603      	mov	r3, r0
 800f91c:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800f91e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d002      	beq.n	800f92c <mdns_domain_add_label_pbuf+0x32>
    return err;
 800f926:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f92a:	e02a      	b.n	800f982 <mdns_domain_add_label_pbuf+0x88>
  }
  if (len) {
 800f92c:	797b      	ldrb	r3, [r7, #5]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d026      	beq.n	800f980 <mdns_domain_add_label_pbuf+0x86>
    if (pbuf_copy_partial(p, &domain->name[domain->length], len, offset) != len) {
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800f938:	461a      	mov	r2, r3
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	1899      	adds	r1, r3, r2
 800f93e:	797b      	ldrb	r3, [r7, #5]
 800f940:	b29a      	uxth	r2, r3
 800f942:	88fb      	ldrh	r3, [r7, #6]
 800f944:	68b8      	ldr	r0, [r7, #8]
 800f946:	f004 fe1d 	bl	8014584 <pbuf_copy_partial>
 800f94a:	4603      	mov	r3, r0
 800f94c:	461a      	mov	r2, r3
 800f94e:	797b      	ldrb	r3, [r7, #5]
 800f950:	b29b      	uxth	r3, r3
 800f952:	429a      	cmp	r2, r3
 800f954:	d00a      	beq.n	800f96c <mdns_domain_add_label_pbuf+0x72>
      /* take back the ++ done before */
      domain->length--;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800f95c:	3b01      	subs	r3, #1
 800f95e:	b29a      	uxth	r2, r3
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
      return ERR_ARG;
 800f966:	f06f 030f 	mvn.w	r3, #15
 800f96a:	e00a      	b.n	800f982 <mdns_domain_add_label_pbuf+0x88>
    }
    domain->length += len;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	f8b3 2100 	ldrh.w	r2, [r3, #256]	@ 0x100
 800f972:	797b      	ldrb	r3, [r7, #5]
 800f974:	b29b      	uxth	r3, r3
 800f976:	4413      	add	r3, r2
 800f978:	b29a      	uxth	r2, r3
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
  }
  return ERR_OK;
 800f980:	2300      	movs	r3, #0
}
 800f982:	4618      	mov	r0, r3
 800f984:	3718      	adds	r7, #24
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}

0800f98a <mdns_readname_loop>:
 * Internal readname function with max 6 levels of recursion following jumps
 * while decompressing name
 */
static u16_t
mdns_readname_loop(struct pbuf *p, u16_t offset, struct mdns_domain *domain, unsigned depth)
{
 800f98a:	b590      	push	{r4, r7, lr}
 800f98c:	b087      	sub	sp, #28
 800f98e:	af00      	add	r7, sp, #0
 800f990:	60f8      	str	r0, [r7, #12]
 800f992:	607a      	str	r2, [r7, #4]
 800f994:	603b      	str	r3, [r7, #0]
 800f996:	460b      	mov	r3, r1
 800f998:	817b      	strh	r3, [r7, #10]
  u8_t c;

  do {
    if (depth > 5) {
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	2b05      	cmp	r3, #5
 800f99e:	d902      	bls.n	800f9a6 <mdns_readname_loop+0x1c>
      /* Too many jumps */
      return MDNS_READNAME_ERROR;
 800f9a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f9a4:	e070      	b.n	800fa88 <mdns_readname_loop+0xfe>
    }

    c = pbuf_get_at(p, offset);
 800f9a6:	897b      	ldrh	r3, [r7, #10]
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	68f8      	ldr	r0, [r7, #12]
 800f9ac:	f004 ffc6 	bl	801493c <pbuf_get_at>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	75fb      	strb	r3, [r7, #23]
    offset++;
 800f9b4:	897b      	ldrh	r3, [r7, #10]
 800f9b6:	3301      	adds	r3, #1
 800f9b8:	817b      	strh	r3, [r7, #10]

    /* is this a compressed label? */
    if ((c & 0xc0) == 0xc0) {
 800f9ba:	7dfb      	ldrb	r3, [r7, #23]
 800f9bc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800f9c0:	2bc0      	cmp	r3, #192	@ 0xc0
 800f9c2:	d138      	bne.n	800fa36 <mdns_readname_loop+0xac>
      u16_t jumpaddr;
      if (offset >= p->tot_len) {
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	891b      	ldrh	r3, [r3, #8]
 800f9c8:	897a      	ldrh	r2, [r7, #10]
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d302      	bcc.n	800f9d4 <mdns_readname_loop+0x4a>
        /* Make sure both jump bytes fit in the packet */
        return MDNS_READNAME_ERROR;
 800f9ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f9d2:	e059      	b.n	800fa88 <mdns_readname_loop+0xfe>
      }
      jumpaddr = (((c & 0x3f) << 8) | (pbuf_get_at(p, offset) & 0xff));
 800f9d4:	7dfb      	ldrb	r3, [r7, #23]
 800f9d6:	b21b      	sxth	r3, r3
 800f9d8:	021b      	lsls	r3, r3, #8
 800f9da:	b21b      	sxth	r3, r3
 800f9dc:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800f9e0:	b21c      	sxth	r4, r3
 800f9e2:	897b      	ldrh	r3, [r7, #10]
 800f9e4:	4619      	mov	r1, r3
 800f9e6:	68f8      	ldr	r0, [r7, #12]
 800f9e8:	f004 ffa8 	bl	801493c <pbuf_get_at>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	b21b      	sxth	r3, r3
 800f9f0:	4323      	orrs	r3, r4
 800f9f2:	b21b      	sxth	r3, r3
 800f9f4:	82bb      	strh	r3, [r7, #20]
      offset++;
 800f9f6:	897b      	ldrh	r3, [r7, #10]
 800f9f8:	3301      	adds	r3, #1
 800f9fa:	817b      	strh	r3, [r7, #10]
      if (jumpaddr >= SIZEOF_DNS_HDR && jumpaddr < p->tot_len) {
 800f9fc:	8abb      	ldrh	r3, [r7, #20]
 800f9fe:	2b0b      	cmp	r3, #11
 800fa00:	d914      	bls.n	800fa2c <mdns_readname_loop+0xa2>
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	891b      	ldrh	r3, [r3, #8]
 800fa06:	8aba      	ldrh	r2, [r7, #20]
 800fa08:	429a      	cmp	r2, r3
 800fa0a:	d20f      	bcs.n	800fa2c <mdns_readname_loop+0xa2>
        u16_t res;
        /* Recursive call, maximum depth will be checked */
        res = mdns_readname_loop(p, jumpaddr, domain, depth + 1);
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	3301      	adds	r3, #1
 800fa10:	8ab9      	ldrh	r1, [r7, #20]
 800fa12:	687a      	ldr	r2, [r7, #4]
 800fa14:	68f8      	ldr	r0, [r7, #12]
 800fa16:	f7ff ffb8 	bl	800f98a <mdns_readname_loop>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	827b      	strh	r3, [r7, #18]
        /* Dont return offset since new bytes were not read (jumped to somewhere in packet) */
        if (res == MDNS_READNAME_ERROR) {
 800fa1e:	8a7b      	ldrh	r3, [r7, #18]
 800fa20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fa24:	4293      	cmp	r3, r2
 800fa26:	d104      	bne.n	800fa32 <mdns_readname_loop+0xa8>
          return res;
 800fa28:	8a7b      	ldrh	r3, [r7, #18]
 800fa2a:	e02d      	b.n	800fa88 <mdns_readname_loop+0xfe>
        }
      } else {
        return MDNS_READNAME_ERROR;
 800fa2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fa30:	e02a      	b.n	800fa88 <mdns_readname_loop+0xfe>
      if (jumpaddr >= SIZEOF_DNS_HDR && jumpaddr < p->tot_len) {
 800fa32:	bf00      	nop
      }
      break;
 800fa34:	e027      	b.n	800fa86 <mdns_readname_loop+0xfc>
    }

    /* normal label */
    if (c <= MDNS_LABEL_MAXLEN) {
 800fa36:	7dfb      	ldrb	r3, [r7, #23]
 800fa38:	2b3f      	cmp	r3, #63	@ 0x3f
 800fa3a:	d81e      	bhi.n	800fa7a <mdns_readname_loop+0xf0>
      err_t res;

      if (c + domain->length >= MDNS_DOMAIN_MAXLEN) {
 800fa3c:	7dfb      	ldrb	r3, [r7, #23]
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	f8b2 2100 	ldrh.w	r2, [r2, #256]	@ 0x100
 800fa44:	4413      	add	r3, r2
 800fa46:	2bff      	cmp	r3, #255	@ 0xff
 800fa48:	dd02      	ble.n	800fa50 <mdns_readname_loop+0xc6>
        return MDNS_READNAME_ERROR;
 800fa4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fa4e:	e01b      	b.n	800fa88 <mdns_readname_loop+0xfe>
      }
      res = mdns_domain_add_label_pbuf(domain, p, offset, c);
 800fa50:	7dfb      	ldrb	r3, [r7, #23]
 800fa52:	897a      	ldrh	r2, [r7, #10]
 800fa54:	68f9      	ldr	r1, [r7, #12]
 800fa56:	6878      	ldr	r0, [r7, #4]
 800fa58:	f7ff ff4f 	bl	800f8fa <mdns_domain_add_label_pbuf>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	75bb      	strb	r3, [r7, #22]
      if (res != ERR_OK) {
 800fa60:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d002      	beq.n	800fa6e <mdns_readname_loop+0xe4>
        return MDNS_READNAME_ERROR;
 800fa68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fa6c:	e00c      	b.n	800fa88 <mdns_readname_loop+0xfe>
      }
      offset += c;
 800fa6e:	7dfb      	ldrb	r3, [r7, #23]
 800fa70:	b29a      	uxth	r2, r3
 800fa72:	897b      	ldrh	r3, [r7, #10]
 800fa74:	4413      	add	r3, r2
 800fa76:	817b      	strh	r3, [r7, #10]
 800fa78:	e002      	b.n	800fa80 <mdns_readname_loop+0xf6>
    } else {
      /* bad length byte */
      return MDNS_READNAME_ERROR;
 800fa7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fa7e:	e003      	b.n	800fa88 <mdns_readname_loop+0xfe>
    }
  } while (c != 0);
 800fa80:	7dfb      	ldrb	r3, [r7, #23]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d189      	bne.n	800f99a <mdns_readname_loop+0x10>

  return offset;
 800fa86:	897b      	ldrh	r3, [r7, #10]
}
 800fa88:	4618      	mov	r0, r3
 800fa8a:	371c      	adds	r7, #28
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd90      	pop	{r4, r7, pc}

0800fa90 <mdns_readname>:
 * @return The new offset after the domain, or MDNS_READNAME_ERROR
 *         if reading failed
 */
u16_t
mdns_readname(struct pbuf *p, u16_t offset, struct mdns_domain *domain)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b084      	sub	sp, #16
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	60f8      	str	r0, [r7, #12]
 800fa98:	460b      	mov	r3, r1
 800fa9a:	607a      	str	r2, [r7, #4]
 800fa9c:	817b      	strh	r3, [r7, #10]
  memset(domain, 0, sizeof(struct mdns_domain));
 800fa9e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800faa2:	2100      	movs	r1, #0
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f011 fe55 	bl	8021754 <memset>
  return mdns_readname_loop(p, offset, domain, 0);
 800faaa:	8979      	ldrh	r1, [r7, #10]
 800faac:	2300      	movs	r3, #0
 800faae:	687a      	ldr	r2, [r7, #4]
 800fab0:	68f8      	ldr	r0, [r7, #12]
 800fab2:	f7ff ff6a 	bl	800f98a <mdns_readname_loop>
 800fab6:	4603      	mov	r3, r0
}
 800fab8:	4618      	mov	r0, r3
 800faba:	3710      	adds	r7, #16
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}

0800fac0 <mdns_domain_debug_print>:
 * Print domain name to debug output
 * @param domain The domain name
 */
static void
mdns_domain_debug_print(struct mdns_domain *domain)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b085      	sub	sp, #20
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  u8_t *src = domain->name;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	60fb      	str	r3, [r7, #12]
  u8_t i;

  while (*src) {
 800facc:	e013      	b.n	800faf6 <mdns_domain_debug_print+0x36>
    u8_t label_len = *src;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	781b      	ldrb	r3, [r3, #0]
 800fad2:	72bb      	strb	r3, [r7, #10]
    src++;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	3301      	adds	r3, #1
 800fad8:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < label_len; i++) {
 800fada:	2300      	movs	r3, #0
 800fadc:	72fb      	strb	r3, [r7, #11]
 800fade:	e002      	b.n	800fae6 <mdns_domain_debug_print+0x26>
 800fae0:	7afb      	ldrb	r3, [r7, #11]
 800fae2:	3301      	adds	r3, #1
 800fae4:	72fb      	strb	r3, [r7, #11]
 800fae6:	7afa      	ldrb	r2, [r7, #11]
 800fae8:	7abb      	ldrb	r3, [r7, #10]
 800faea:	429a      	cmp	r2, r3
 800faec:	d3f8      	bcc.n	800fae0 <mdns_domain_debug_print+0x20>
      LWIP_DEBUGF(MDNS_DEBUG, ("%c", src[i]));
    }
    src += label_len;
 800faee:	7abb      	ldrb	r3, [r7, #10]
 800faf0:	68fa      	ldr	r2, [r7, #12]
 800faf2:	4413      	add	r3, r2
 800faf4:	60fb      	str	r3, [r7, #12]
  while (*src) {
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	781b      	ldrb	r3, [r3, #0]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d1e7      	bne.n	800face <mdns_domain_debug_print+0xe>
    LWIP_DEBUGF(MDNS_DEBUG, ("."));
  }
}
 800fafe:	bf00      	nop
 800fb00:	bf00      	nop
 800fb02:	3714      	adds	r7, #20
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr

0800fb0c <mdns_domain_eq>:
 * @param b Domain name to compare 2
 * @return 1 if domains are equal ignoring case, 0 otherwise
 */
int
mdns_domain_eq(struct mdns_domain *a, struct mdns_domain *b)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b086      	sub	sp, #24
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
 800fb14:	6039      	str	r1, [r7, #0]
  u8_t *ptra, *ptrb;
  u8_t len;
  int res;

  if (a->length != b->length) {
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f8b3 2100 	ldrh.w	r2, [r3, #256]	@ 0x100
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d001      	beq.n	800fb2a <mdns_domain_eq+0x1e>
    return 0;
 800fb26:	2300      	movs	r3, #0
 800fb28:	e04c      	b.n	800fbc4 <mdns_domain_eq+0xb8>
  }

  ptra = a->name;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	617b      	str	r3, [r7, #20]
  ptrb = b->name;
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	613b      	str	r3, [r7, #16]
  while (*ptra && *ptrb && ptra < &a->name[a->length]) {
 800fb32:	e024      	b.n	800fb7e <mdns_domain_eq+0x72>
    if (*ptra != *ptrb) {
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	781a      	ldrb	r2, [r3, #0]
 800fb38:	693b      	ldr	r3, [r7, #16]
 800fb3a:	781b      	ldrb	r3, [r3, #0]
 800fb3c:	429a      	cmp	r2, r3
 800fb3e:	d001      	beq.n	800fb44 <mdns_domain_eq+0x38>
      return 0;
 800fb40:	2300      	movs	r3, #0
 800fb42:	e03f      	b.n	800fbc4 <mdns_domain_eq+0xb8>
    }
    len = *ptra;
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	73fb      	strb	r3, [r7, #15]
    ptra++;
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	3301      	adds	r3, #1
 800fb4e:	617b      	str	r3, [r7, #20]
    ptrb++;
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	3301      	adds	r3, #1
 800fb54:	613b      	str	r3, [r7, #16]
    res = lwip_strnicmp((char *) ptra, (char *) ptrb, len);
 800fb56:	7bfb      	ldrb	r3, [r7, #15]
 800fb58:	461a      	mov	r2, r3
 800fb5a:	6939      	ldr	r1, [r7, #16]
 800fb5c:	6978      	ldr	r0, [r7, #20]
 800fb5e:	f002 fde6 	bl	801272e <lwip_strnicmp>
 800fb62:	60b8      	str	r0, [r7, #8]
    if (res != 0) {
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d001      	beq.n	800fb6e <mdns_domain_eq+0x62>
      return 0;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	e02a      	b.n	800fbc4 <mdns_domain_eq+0xb8>
    }
    ptra += len;
 800fb6e:	7bfb      	ldrb	r3, [r7, #15]
 800fb70:	697a      	ldr	r2, [r7, #20]
 800fb72:	4413      	add	r3, r2
 800fb74:	617b      	str	r3, [r7, #20]
    ptrb += len;
 800fb76:	7bfb      	ldrb	r3, [r7, #15]
 800fb78:	693a      	ldr	r2, [r7, #16]
 800fb7a:	4413      	add	r3, r2
 800fb7c:	613b      	str	r3, [r7, #16]
  while (*ptra && *ptrb && ptra < &a->name[a->length]) {
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	781b      	ldrb	r3, [r3, #0]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d00c      	beq.n	800fba0 <mdns_domain_eq+0x94>
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d008      	beq.n	800fba0 <mdns_domain_eq+0x94>
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800fb94:	461a      	mov	r2, r3
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	4413      	add	r3, r2
 800fb9a:	697a      	ldr	r2, [r7, #20]
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	d3c9      	bcc.n	800fb34 <mdns_domain_eq+0x28>
  }
  if (*ptra != *ptrb && ptra < &a->name[a->length]) {
 800fba0:	697b      	ldr	r3, [r7, #20]
 800fba2:	781a      	ldrb	r2, [r3, #0]
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	781b      	ldrb	r3, [r3, #0]
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	d00a      	beq.n	800fbc2 <mdns_domain_eq+0xb6>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800fbb2:	461a      	mov	r2, r3
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	4413      	add	r3, r2
 800fbb8:	697a      	ldr	r2, [r7, #20]
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	d201      	bcs.n	800fbc2 <mdns_domain_eq+0xb6>
    return 0;
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	e000      	b.n	800fbc4 <mdns_domain_eq+0xb8>
  }
  return 1;
 800fbc2:	2301      	movs	r3, #1
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3718      	adds	r7, #24
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}

0800fbcc <mdns_prepare_txtdata>:
 * Call user supplied function to setup TXT data
 * @param service The service to build TXT record for
 */
static void
mdns_prepare_txtdata(struct mdns_service *service)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b082      	sub	sp, #8
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
  memset(&service->txtdata, 0, sizeof(struct mdns_domain));
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800fbda:	2100      	movs	r1, #0
 800fbdc:	4618      	mov	r0, r3
 800fbde:	f011 fdb9 	bl	8021754 <memset>
  if (service->txt_fn) {
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d008      	beq.n	800fbfe <mdns_prepare_txtdata+0x32>
    service->txt_fn(service, service->txt_userdata);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800fbf2:	687a      	ldr	r2, [r7, #4]
 800fbf4:	f8d2 2188 	ldr.w	r2, [r2, #392]	@ 0x188
 800fbf8:	4611      	mov	r1, r2
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	4798      	blx	r3
  }
}
 800fbfe:	bf00      	nop
 800fc00:	3708      	adds	r7, #8
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
	...

0800fc08 <mdns_build_reverse_v4_domain>:
 * @param addr Pointer to an IPv4 address to encode
 * @return ERR_OK if domain was written, an err_t otherwise
 */
static err_t
mdns_build_reverse_v4_domain(struct mdns_domain *domain, const ip4_addr_t *addr)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b086      	sub	sp, #24
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	6039      	str	r1, [r7, #0]
  int i;
  err_t res;
  const u8_t *ptr;

  LWIP_UNUSED_ARG(res);
  if (!domain || !addr) {
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d002      	beq.n	800fc1e <mdns_build_reverse_v4_domain+0x16>
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d102      	bne.n	800fc24 <mdns_build_reverse_v4_domain+0x1c>
    return ERR_ARG;
 800fc1e:	f06f 030f 	mvn.w	r3, #15
 800fc22:	e079      	b.n	800fd18 <mdns_build_reverse_v4_domain+0x110>
  }
  memset(domain, 0, sizeof(struct mdns_domain));
 800fc24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800fc28:	2100      	movs	r1, #0
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f011 fd92 	bl	8021754 <memset>
  ptr = (const u8_t *) addr;
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	613b      	str	r3, [r7, #16]
  for (i = sizeof(ip4_addr_t) - 1; i >= 0; i--) {
 800fc34:	2303      	movs	r3, #3
 800fc36:	617b      	str	r3, [r7, #20]
 800fc38:	e02b      	b.n	800fc92 <mdns_build_reverse_v4_domain+0x8a>
    char buf[4];
    u8_t val = ptr[i];
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	693a      	ldr	r2, [r7, #16]
 800fc3e:	4413      	add	r3, r2
 800fc40:	781b      	ldrb	r3, [r3, #0]
 800fc42:	73bb      	strb	r3, [r7, #14]

    lwip_itoa(buf, sizeof(buf), val);
 800fc44:	7bba      	ldrb	r2, [r7, #14]
 800fc46:	f107 0308 	add.w	r3, r7, #8
 800fc4a:	2104      	movs	r1, #4
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	f002 fda9 	bl	80127a4 <lwip_itoa>
    res = mdns_domain_add_label(domain, buf, (u8_t)strlen(buf));
 800fc52:	f107 0308 	add.w	r3, r7, #8
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7f0 fafc 	bl	8000254 <strlen>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	b2da      	uxtb	r2, r3
 800fc60:	f107 0308 	add.w	r3, r7, #8
 800fc64:	4619      	mov	r1, r3
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f7ff fe15 	bl	800f896 <mdns_domain_add_label>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	73fb      	strb	r3, [r7, #15]
    LWIP_ERROR("mdns_build_reverse_v4_domain: Failed to add label", (res == ERR_OK), return res);
 800fc70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d009      	beq.n	800fc8c <mdns_build_reverse_v4_domain+0x84>
 800fc78:	4b29      	ldr	r3, [pc, #164]	@ (800fd20 <mdns_build_reverse_v4_domain+0x118>)
 800fc7a:	f240 220f 	movw	r2, #527	@ 0x20f
 800fc7e:	4929      	ldr	r1, [pc, #164]	@ (800fd24 <mdns_build_reverse_v4_domain+0x11c>)
 800fc80:	4829      	ldr	r0, [pc, #164]	@ (800fd28 <mdns_build_reverse_v4_domain+0x120>)
 800fc82:	f011 fb97 	bl	80213b4 <iprintf>
 800fc86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc8a:	e045      	b.n	800fd18 <mdns_build_reverse_v4_domain+0x110>
  for (i = sizeof(ip4_addr_t) - 1; i >= 0; i--) {
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	3b01      	subs	r3, #1
 800fc90:	617b      	str	r3, [r7, #20]
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	dad0      	bge.n	800fc3a <mdns_build_reverse_v4_domain+0x32>
  }
  res = mdns_domain_add_label(domain, REVERSE_PTR_V4_DOMAIN, (u8_t)(sizeof(REVERSE_PTR_V4_DOMAIN) - 1));
 800fc98:	2207      	movs	r2, #7
 800fc9a:	4924      	ldr	r1, [pc, #144]	@ (800fd2c <mdns_build_reverse_v4_domain+0x124>)
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f7ff fdfa 	bl	800f896 <mdns_domain_add_label>
 800fca2:	4603      	mov	r3, r0
 800fca4:	73fb      	strb	r3, [r7, #15]
  LWIP_ERROR("mdns_build_reverse_v4_domain: Failed to add label", (res == ERR_OK), return res);
 800fca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d009      	beq.n	800fcc2 <mdns_build_reverse_v4_domain+0xba>
 800fcae:	4b1c      	ldr	r3, [pc, #112]	@ (800fd20 <mdns_build_reverse_v4_domain+0x118>)
 800fcb0:	f240 2212 	movw	r2, #530	@ 0x212
 800fcb4:	491b      	ldr	r1, [pc, #108]	@ (800fd24 <mdns_build_reverse_v4_domain+0x11c>)
 800fcb6:	481c      	ldr	r0, [pc, #112]	@ (800fd28 <mdns_build_reverse_v4_domain+0x120>)
 800fcb8:	f011 fb7c 	bl	80213b4 <iprintf>
 800fcbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcc0:	e02a      	b.n	800fd18 <mdns_build_reverse_v4_domain+0x110>
  res = mdns_domain_add_label(domain, REVERSE_PTR_TOPDOMAIN, (u8_t)(sizeof(REVERSE_PTR_TOPDOMAIN) - 1));
 800fcc2:	2204      	movs	r2, #4
 800fcc4:	491a      	ldr	r1, [pc, #104]	@ (800fd30 <mdns_build_reverse_v4_domain+0x128>)
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f7ff fde5 	bl	800f896 <mdns_domain_add_label>
 800fccc:	4603      	mov	r3, r0
 800fcce:	73fb      	strb	r3, [r7, #15]
  LWIP_ERROR("mdns_build_reverse_v4_domain: Failed to add label", (res == ERR_OK), return res);
 800fcd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d009      	beq.n	800fcec <mdns_build_reverse_v4_domain+0xe4>
 800fcd8:	4b11      	ldr	r3, [pc, #68]	@ (800fd20 <mdns_build_reverse_v4_domain+0x118>)
 800fcda:	f44f 7205 	mov.w	r2, #532	@ 0x214
 800fcde:	4911      	ldr	r1, [pc, #68]	@ (800fd24 <mdns_build_reverse_v4_domain+0x11c>)
 800fce0:	4811      	ldr	r0, [pc, #68]	@ (800fd28 <mdns_build_reverse_v4_domain+0x120>)
 800fce2:	f011 fb67 	bl	80213b4 <iprintf>
 800fce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcea:	e015      	b.n	800fd18 <mdns_build_reverse_v4_domain+0x110>
  res = mdns_domain_add_label(domain, NULL, 0);
 800fcec:	2200      	movs	r2, #0
 800fcee:	2100      	movs	r1, #0
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f7ff fdd0 	bl	800f896 <mdns_domain_add_label>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	73fb      	strb	r3, [r7, #15]
  LWIP_ERROR("mdns_build_reverse_v4_domain: Failed to add label", (res == ERR_OK), return res);
 800fcfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d009      	beq.n	800fd16 <mdns_build_reverse_v4_domain+0x10e>
 800fd02:	4b07      	ldr	r3, [pc, #28]	@ (800fd20 <mdns_build_reverse_v4_domain+0x118>)
 800fd04:	f240 2216 	movw	r2, #534	@ 0x216
 800fd08:	4906      	ldr	r1, [pc, #24]	@ (800fd24 <mdns_build_reverse_v4_domain+0x11c>)
 800fd0a:	4807      	ldr	r0, [pc, #28]	@ (800fd28 <mdns_build_reverse_v4_domain+0x120>)
 800fd0c:	f011 fb52 	bl	80213b4 <iprintf>
 800fd10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd14:	e000      	b.n	800fd18 <mdns_build_reverse_v4_domain+0x110>

  return ERR_OK;
 800fd16:	2300      	movs	r3, #0
}
 800fd18:	4618      	mov	r0, r3
 800fd1a:	3718      	adds	r7, #24
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bd80      	pop	{r7, pc}
 800fd20:	08023074 	.word	0x08023074
 800fd24:	080230ac 	.word	0x080230ac
 800fd28:	080230e0 	.word	0x080230e0
 800fd2c:	08023108 	.word	0x08023108
 800fd30:	08023110 	.word	0x08023110

0800fd34 <mdns_add_dotlocal>:
#endif

/* Add .local. to domain */
static err_t
mdns_add_dotlocal(struct mdns_domain *domain)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b084      	sub	sp, #16
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
  err_t res = mdns_domain_add_label(domain, TOPDOMAIN_LOCAL, (u8_t)(sizeof(TOPDOMAIN_LOCAL) - 1));
 800fd3c:	2205      	movs	r2, #5
 800fd3e:	490f      	ldr	r1, [pc, #60]	@ (800fd7c <mdns_add_dotlocal+0x48>)
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f7ff fda8 	bl	800f896 <mdns_domain_add_label>
 800fd46:	4603      	mov	r3, r0
 800fd48:	73fb      	strb	r3, [r7, #15]
  LWIP_UNUSED_ARG(res);
  LWIP_ERROR("mdns_add_dotlocal: Failed to add label", (res == ERR_OK), return res);
 800fd4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d009      	beq.n	800fd66 <mdns_add_dotlocal+0x32>
 800fd52:	4b0b      	ldr	r3, [pc, #44]	@ (800fd80 <mdns_add_dotlocal+0x4c>)
 800fd54:	f44f 7214 	mov.w	r2, #592	@ 0x250
 800fd58:	490a      	ldr	r1, [pc, #40]	@ (800fd84 <mdns_add_dotlocal+0x50>)
 800fd5a:	480b      	ldr	r0, [pc, #44]	@ (800fd88 <mdns_add_dotlocal+0x54>)
 800fd5c:	f011 fb2a 	bl	80213b4 <iprintf>
 800fd60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd64:	e005      	b.n	800fd72 <mdns_add_dotlocal+0x3e>
  return mdns_domain_add_label(domain, NULL, 0);
 800fd66:	2200      	movs	r2, #0
 800fd68:	2100      	movs	r1, #0
 800fd6a:	6878      	ldr	r0, [r7, #4]
 800fd6c:	f7ff fd93 	bl	800f896 <mdns_domain_add_label>
 800fd70:	4603      	mov	r3, r0
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	3710      	adds	r7, #16
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}
 800fd7a:	bf00      	nop
 800fd7c:	08023118 	.word	0x08023118
 800fd80:	08023074 	.word	0x08023074
 800fd84:	08023120 	.word	0x08023120
 800fd88:	080230e0 	.word	0x080230e0

0800fd8c <mdns_build_host_domain>:
 * @param mdns TMDNS netif descriptor.
 * @return ERR_OK if domain <hostname>.local. was written, an err_t otherwise
 */
static err_t
mdns_build_host_domain(struct mdns_domain *domain, struct mdns_host *mdns)
{
 800fd8c:	b590      	push	{r4, r7, lr}
 800fd8e:	b085      	sub	sp, #20
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
 800fd94:	6039      	str	r1, [r7, #0]
  err_t res;
  LWIP_UNUSED_ARG(res);
  memset(domain, 0, sizeof(struct mdns_domain));
 800fd96:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800fd9a:	2100      	movs	r1, #0
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f011 fcd9 	bl	8021754 <memset>
  LWIP_ERROR("mdns_build_host_domain: mdns != NULL", (mdns != NULL), return ERR_VAL);
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d109      	bne.n	800fdbc <mdns_build_host_domain+0x30>
 800fda8:	4b16      	ldr	r3, [pc, #88]	@ (800fe04 <mdns_build_host_domain+0x78>)
 800fdaa:	f44f 7218 	mov.w	r2, #608	@ 0x260
 800fdae:	4916      	ldr	r1, [pc, #88]	@ (800fe08 <mdns_build_host_domain+0x7c>)
 800fdb0:	4816      	ldr	r0, [pc, #88]	@ (800fe0c <mdns_build_host_domain+0x80>)
 800fdb2:	f011 faff 	bl	80213b4 <iprintf>
 800fdb6:	f06f 0305 	mvn.w	r3, #5
 800fdba:	e01f      	b.n	800fdfc <mdns_build_host_domain+0x70>
  res = mdns_domain_add_label(domain, mdns->name, (u8_t)strlen(mdns->name));
 800fdbc:	683c      	ldr	r4, [r7, #0]
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f7f0 fa47 	bl	8000254 <strlen>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	b2db      	uxtb	r3, r3
 800fdca:	461a      	mov	r2, r3
 800fdcc:	4621      	mov	r1, r4
 800fdce:	6878      	ldr	r0, [r7, #4]
 800fdd0:	f7ff fd61 	bl	800f896 <mdns_domain_add_label>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	73fb      	strb	r3, [r7, #15]
  LWIP_ERROR("mdns_build_host_domain: Failed to add label", (res == ERR_OK), return res);
 800fdd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d009      	beq.n	800fdf4 <mdns_build_host_domain+0x68>
 800fde0:	4b08      	ldr	r3, [pc, #32]	@ (800fe04 <mdns_build_host_domain+0x78>)
 800fde2:	f240 2262 	movw	r2, #610	@ 0x262
 800fde6:	490a      	ldr	r1, [pc, #40]	@ (800fe10 <mdns_build_host_domain+0x84>)
 800fde8:	4808      	ldr	r0, [pc, #32]	@ (800fe0c <mdns_build_host_domain+0x80>)
 800fdea:	f011 fae3 	bl	80213b4 <iprintf>
 800fdee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdf2:	e003      	b.n	800fdfc <mdns_build_host_domain+0x70>
  return mdns_add_dotlocal(domain);
 800fdf4:	6878      	ldr	r0, [r7, #4]
 800fdf6:	f7ff ff9d 	bl	800fd34 <mdns_add_dotlocal>
 800fdfa:	4603      	mov	r3, r0
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3714      	adds	r7, #20
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd90      	pop	{r4, r7, pc}
 800fe04:	08023074 	.word	0x08023074
 800fe08:	08023148 	.word	0x08023148
 800fe0c:	080230e0 	.word	0x080230e0
 800fe10:	08023170 	.word	0x08023170

0800fe14 <mdns_build_dnssd_domain>:
 * @param domain Where to write the domain name
 * @return ERR_OK if domain _services._dns-sd._udp.local. was written, an err_t otherwise
 */
static err_t
mdns_build_dnssd_domain(struct mdns_domain *domain)
{
 800fe14:	b590      	push	{r4, r7, lr}
 800fe16:	b085      	sub	sp, #20
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
  err_t res;
  LWIP_UNUSED_ARG(res);
  memset(domain, 0, sizeof(struct mdns_domain));
 800fe1c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800fe20:	2100      	movs	r1, #0
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f011 fc96 	bl	8021754 <memset>
  res = mdns_domain_add_label(domain, "_services", (u8_t)(sizeof("_services") - 1));
 800fe28:	2209      	movs	r2, #9
 800fe2a:	4927      	ldr	r1, [pc, #156]	@ (800fec8 <mdns_build_dnssd_domain+0xb4>)
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f7ff fd32 	bl	800f896 <mdns_domain_add_label>
 800fe32:	4603      	mov	r3, r0
 800fe34:	73fb      	strb	r3, [r7, #15]
  LWIP_ERROR("mdns_build_dnssd_domain: Failed to add label", (res == ERR_OK), return res);
 800fe36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d009      	beq.n	800fe52 <mdns_build_dnssd_domain+0x3e>
 800fe3e:	4b23      	ldr	r3, [pc, #140]	@ (800fecc <mdns_build_dnssd_domain+0xb8>)
 800fe40:	f240 2272 	movw	r2, #626	@ 0x272
 800fe44:	4922      	ldr	r1, [pc, #136]	@ (800fed0 <mdns_build_dnssd_domain+0xbc>)
 800fe46:	4823      	ldr	r0, [pc, #140]	@ (800fed4 <mdns_build_dnssd_domain+0xc0>)
 800fe48:	f011 fab4 	bl	80213b4 <iprintf>
 800fe4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe50:	e036      	b.n	800fec0 <mdns_build_dnssd_domain+0xac>
  res = mdns_domain_add_label(domain, "_dns-sd", (u8_t)(sizeof("_dns-sd") - 1));
 800fe52:	2207      	movs	r2, #7
 800fe54:	4920      	ldr	r1, [pc, #128]	@ (800fed8 <mdns_build_dnssd_domain+0xc4>)
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f7ff fd1d 	bl	800f896 <mdns_domain_add_label>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	73fb      	strb	r3, [r7, #15]
  LWIP_ERROR("mdns_build_dnssd_domain: Failed to add label", (res == ERR_OK), return res);
 800fe60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d009      	beq.n	800fe7c <mdns_build_dnssd_domain+0x68>
 800fe68:	4b18      	ldr	r3, [pc, #96]	@ (800fecc <mdns_build_dnssd_domain+0xb8>)
 800fe6a:	f44f 721d 	mov.w	r2, #628	@ 0x274
 800fe6e:	4918      	ldr	r1, [pc, #96]	@ (800fed0 <mdns_build_dnssd_domain+0xbc>)
 800fe70:	4818      	ldr	r0, [pc, #96]	@ (800fed4 <mdns_build_dnssd_domain+0xc0>)
 800fe72:	f011 fa9f 	bl	80213b4 <iprintf>
 800fe76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe7a:	e021      	b.n	800fec0 <mdns_build_dnssd_domain+0xac>
  res = mdns_domain_add_label(domain, dnssd_protos[DNSSD_PROTO_UDP], (u8_t)strlen(dnssd_protos[DNSSD_PROTO_UDP]));
 800fe7c:	4b17      	ldr	r3, [pc, #92]	@ (800fedc <mdns_build_dnssd_domain+0xc8>)
 800fe7e:	681c      	ldr	r4, [r3, #0]
 800fe80:	4b16      	ldr	r3, [pc, #88]	@ (800fedc <mdns_build_dnssd_domain+0xc8>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	4618      	mov	r0, r3
 800fe86:	f7f0 f9e5 	bl	8000254 <strlen>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	b2db      	uxtb	r3, r3
 800fe8e:	461a      	mov	r2, r3
 800fe90:	4621      	mov	r1, r4
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f7ff fcff 	bl	800f896 <mdns_domain_add_label>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	73fb      	strb	r3, [r7, #15]
  LWIP_ERROR("mdns_build_dnssd_domain: Failed to add label", (res == ERR_OK), return res);
 800fe9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d009      	beq.n	800feb8 <mdns_build_dnssd_domain+0xa4>
 800fea4:	4b09      	ldr	r3, [pc, #36]	@ (800fecc <mdns_build_dnssd_domain+0xb8>)
 800fea6:	f240 2276 	movw	r2, #630	@ 0x276
 800feaa:	4909      	ldr	r1, [pc, #36]	@ (800fed0 <mdns_build_dnssd_domain+0xbc>)
 800feac:	4809      	ldr	r0, [pc, #36]	@ (800fed4 <mdns_build_dnssd_domain+0xc0>)
 800feae:	f011 fa81 	bl	80213b4 <iprintf>
 800feb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800feb6:	e003      	b.n	800fec0 <mdns_build_dnssd_domain+0xac>
  return mdns_add_dotlocal(domain);
 800feb8:	6878      	ldr	r0, [r7, #4]
 800feba:	f7ff ff3b 	bl	800fd34 <mdns_add_dotlocal>
 800febe:	4603      	mov	r3, r0
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3714      	adds	r7, #20
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd90      	pop	{r4, r7, pc}
 800fec8:	0802319c 	.word	0x0802319c
 800fecc:	08023074 	.word	0x08023074
 800fed0:	080231a8 	.word	0x080231a8
 800fed4:	080230e0 	.word	0x080230e0
 800fed8:	080231d8 	.word	0x080231d8
 800fedc:	200000b0 	.word	0x200000b0

0800fee0 <mdns_build_service_domain>:
 *         <name>.<type>.<proto>.local. will be written, otherwise <type>.<proto>.local.
 *         An err_t is returned on error.
 */
static err_t
mdns_build_service_domain(struct mdns_domain *domain, struct mdns_service *service, int include_name)
{
 800fee0:	b590      	push	{r4, r7, lr}
 800fee2:	b087      	sub	sp, #28
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	60f8      	str	r0, [r7, #12]
 800fee8:	60b9      	str	r1, [r7, #8]
 800feea:	607a      	str	r2, [r7, #4]
  err_t res;
  LWIP_UNUSED_ARG(res);
  memset(domain, 0, sizeof(struct mdns_domain));
 800feec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800fef0:	2100      	movs	r1, #0
 800fef2:	68f8      	ldr	r0, [r7, #12]
 800fef4:	f011 fc2e 	bl	8021754 <memset>
  if (include_name) {
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d01f      	beq.n	800ff3e <mdns_build_service_domain+0x5e>
    res = mdns_domain_add_label(domain, service->name, (u8_t)strlen(service->name));
 800fefe:	68bb      	ldr	r3, [r7, #8]
 800ff00:	f503 7482 	add.w	r4, r3, #260	@ 0x104
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f7f0 f9a2 	bl	8000254 <strlen>
 800ff10:	4603      	mov	r3, r0
 800ff12:	b2db      	uxtb	r3, r3
 800ff14:	461a      	mov	r2, r3
 800ff16:	4621      	mov	r1, r4
 800ff18:	68f8      	ldr	r0, [r7, #12]
 800ff1a:	f7ff fcbc 	bl	800f896 <mdns_domain_add_label>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	75fb      	strb	r3, [r7, #23]
    LWIP_ERROR("mdns_build_service_domain: Failed to add label", (res == ERR_OK), return res);
 800ff22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d009      	beq.n	800ff3e <mdns_build_service_domain+0x5e>
 800ff2a:	4b2d      	ldr	r3, [pc, #180]	@ (800ffe0 <mdns_build_service_domain+0x100>)
 800ff2c:	f240 228b 	movw	r2, #651	@ 0x28b
 800ff30:	492c      	ldr	r1, [pc, #176]	@ (800ffe4 <mdns_build_service_domain+0x104>)
 800ff32:	482d      	ldr	r0, [pc, #180]	@ (800ffe8 <mdns_build_service_domain+0x108>)
 800ff34:	f011 fa3e 	bl	80213b4 <iprintf>
 800ff38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ff3c:	e04b      	b.n	800ffd6 <mdns_build_service_domain+0xf6>
  }
  res = mdns_domain_add_label(domain, service->service, (u8_t)strlen(service->service));
 800ff3e:	68bb      	ldr	r3, [r7, #8]
 800ff40:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f7f0 f982 	bl	8000254 <strlen>
 800ff50:	4603      	mov	r3, r0
 800ff52:	b2db      	uxtb	r3, r3
 800ff54:	461a      	mov	r2, r3
 800ff56:	4621      	mov	r1, r4
 800ff58:	68f8      	ldr	r0, [r7, #12]
 800ff5a:	f7ff fc9c 	bl	800f896 <mdns_domain_add_label>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	75fb      	strb	r3, [r7, #23]
  LWIP_ERROR("mdns_build_service_domain: Failed to add label", (res == ERR_OK), return res);
 800ff62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d009      	beq.n	800ff7e <mdns_build_service_domain+0x9e>
 800ff6a:	4b1d      	ldr	r3, [pc, #116]	@ (800ffe0 <mdns_build_service_domain+0x100>)
 800ff6c:	f240 228e 	movw	r2, #654	@ 0x28e
 800ff70:	491c      	ldr	r1, [pc, #112]	@ (800ffe4 <mdns_build_service_domain+0x104>)
 800ff72:	481d      	ldr	r0, [pc, #116]	@ (800ffe8 <mdns_build_service_domain+0x108>)
 800ff74:	f011 fa1e 	bl	80213b4 <iprintf>
 800ff78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ff7c:	e02b      	b.n	800ffd6 <mdns_build_service_domain+0xf6>
  res = mdns_domain_add_label(domain, dnssd_protos[service->proto], (u8_t)strlen(dnssd_protos[service->proto]));
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 800ff84:	461a      	mov	r2, r3
 800ff86:	4b19      	ldr	r3, [pc, #100]	@ (800ffec <mdns_build_service_domain+0x10c>)
 800ff88:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 800ff92:	461a      	mov	r2, r3
 800ff94:	4b15      	ldr	r3, [pc, #84]	@ (800ffec <mdns_build_service_domain+0x10c>)
 800ff96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7f0 f95a 	bl	8000254 <strlen>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	b2db      	uxtb	r3, r3
 800ffa4:	461a      	mov	r2, r3
 800ffa6:	4621      	mov	r1, r4
 800ffa8:	68f8      	ldr	r0, [r7, #12]
 800ffaa:	f7ff fc74 	bl	800f896 <mdns_domain_add_label>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	75fb      	strb	r3, [r7, #23]
  LWIP_ERROR("mdns_build_service_domain: Failed to add label", (res == ERR_OK), return res);
 800ffb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d009      	beq.n	800ffce <mdns_build_service_domain+0xee>
 800ffba:	4b09      	ldr	r3, [pc, #36]	@ (800ffe0 <mdns_build_service_domain+0x100>)
 800ffbc:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800ffc0:	4908      	ldr	r1, [pc, #32]	@ (800ffe4 <mdns_build_service_domain+0x104>)
 800ffc2:	4809      	ldr	r0, [pc, #36]	@ (800ffe8 <mdns_build_service_domain+0x108>)
 800ffc4:	f011 f9f6 	bl	80213b4 <iprintf>
 800ffc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ffcc:	e003      	b.n	800ffd6 <mdns_build_service_domain+0xf6>
  return mdns_add_dotlocal(domain);
 800ffce:	68f8      	ldr	r0, [r7, #12]
 800ffd0:	f7ff feb0 	bl	800fd34 <mdns_add_dotlocal>
 800ffd4:	4603      	mov	r3, r0
}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	371c      	adds	r7, #28
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	bd90      	pop	{r4, r7, pc}
 800ffde:	bf00      	nop
 800ffe0:	08023074 	.word	0x08023074
 800ffe4:	080231e0 	.word	0x080231e0
 800ffe8:	080230e0 	.word	0x080230e0
 800ffec:	200000b0 	.word	0x200000b0

0800fff0 <check_host>:
 *                         if reply bit has REPLY_HOST_PTR_V6 set
 * @return Bitmask of which replies to send
 */
static int
check_host(struct netif *netif, struct mdns_rr_info *rr, u8_t *reverse_v6_reply)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b0c8      	sub	sp, #288	@ 0x120
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800fffa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800fffe:	6018      	str	r0, [r3, #0]
 8010000:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010004:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8010008:	6019      	str	r1, [r3, #0]
 801000a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801000e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8010012:	601a      	str	r2, [r3, #0]
  err_t res;
  int replies = 0;
 8010014:	2300      	movs	r3, #0
 8010016:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  struct mdns_domain mydomain;

  LWIP_UNUSED_ARG(reverse_v6_reply); /* if ipv6 is disabled */

  if (rr->klass != DNS_RRCLASS_IN && rr->klass != DNS_RRCLASS_ANY) {
 801001a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801001e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8010028:	2b01      	cmp	r3, #1
 801002a:	d00b      	beq.n	8010044 <check_host+0x54>
 801002c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010030:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 801003a:	2bff      	cmp	r3, #255	@ 0xff
 801003c:	d002      	beq.n	8010044 <check_host+0x54>
    /* Invalid class */
    return replies;
 801003e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010042:	e08c      	b.n	801015e <check_host+0x16e>
  }

  /* Handle PTR for our addresses */
  if (rr->type == DNS_RRTYPE_PTR || rr->type == DNS_RRTYPE_ANY) {
 8010044:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010048:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8010052:	2b0c      	cmp	r3, #12
 8010054:	d008      	beq.n	8010068 <check_host+0x78>
 8010056:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801005a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8010064:	2bff      	cmp	r3, #255	@ 0xff
 8010066:	d12f      	bne.n	80100c8 <check_host+0xd8>
        }
      }
    }
#endif
#if LWIP_IPV4
    if (!ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010068:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801006c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	3304      	adds	r3, #4
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d026      	beq.n	80100c8 <check_host+0xd8>
      res = mdns_build_reverse_v4_domain(&mydomain, netif_ip4_addr(netif));
 801007a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801007e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	1d1a      	adds	r2, r3, #4
 8010086:	f107 0314 	add.w	r3, r7, #20
 801008a:	4611      	mov	r1, r2
 801008c:	4618      	mov	r0, r3
 801008e:	f7ff fdbb 	bl	800fc08 <mdns_build_reverse_v4_domain>
 8010092:	4603      	mov	r3, r0
 8010094:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
      if (res == ERR_OK && mdns_domain_eq(&rr->domain, &mydomain)) {
 8010098:	f997 311b 	ldrsb.w	r3, [r7, #283]	@ 0x11b
 801009c:	2b00      	cmp	r3, #0
 801009e:	d113      	bne.n	80100c8 <check_host+0xd8>
 80100a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80100a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	f107 0214 	add.w	r2, r7, #20
 80100ae:	4611      	mov	r1, r2
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7ff fd2b 	bl	800fb0c <mdns_domain_eq>
 80100b6:	4603      	mov	r3, r0
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d005      	beq.n	80100c8 <check_host+0xd8>
        replies |= REPLY_HOST_PTR_V4;
 80100bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80100c0:	f043 0302 	orr.w	r3, r3, #2
 80100c4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
      }
    }
#endif
  }

  res = mdns_build_host_domain(&mydomain, NETIF_TO_HOST(netif));
 80100c8:	4b27      	ldr	r3, [pc, #156]	@ (8010168 <check_host+0x178>)
 80100ca:	781b      	ldrb	r3, [r3, #0]
 80100cc:	4619      	mov	r1, r3
 80100ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80100d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80100d6:	681a      	ldr	r2, [r3, #0]
 80100d8:	f101 0308 	add.w	r3, r1, #8
 80100dc:	009b      	lsls	r3, r3, #2
 80100de:	4413      	add	r3, r2
 80100e0:	685a      	ldr	r2, [r3, #4]
 80100e2:	f107 0314 	add.w	r3, r7, #20
 80100e6:	4611      	mov	r1, r2
 80100e8:	4618      	mov	r0, r3
 80100ea:	f7ff fe4f 	bl	800fd8c <mdns_build_host_domain>
 80100ee:	4603      	mov	r3, r0
 80100f0:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
  /* Handle requests for our hostname */
  if (res == ERR_OK && mdns_domain_eq(&rr->domain, &mydomain)) {
 80100f4:	f997 311b 	ldrsb.w	r3, [r7, #283]	@ 0x11b
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d12e      	bne.n	801015a <check_host+0x16a>
 80100fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010100:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	f107 0214 	add.w	r2, r7, #20
 801010a:	4611      	mov	r1, r2
 801010c:	4618      	mov	r0, r3
 801010e:	f7ff fcfd 	bl	800fb0c <mdns_domain_eq>
 8010112:	4603      	mov	r3, r0
 8010114:	2b00      	cmp	r3, #0
 8010116:	d020      	beq.n	801015a <check_host+0x16a>
    /* TODO return NSEC if unsupported protocol requested */
#if LWIP_IPV4
    if (!ip4_addr_isany_val(*netif_ip4_addr(netif))
 8010118:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801011c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	3304      	adds	r3, #4
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d017      	beq.n	801015a <check_host+0x16a>
        && (rr->type == DNS_RRTYPE_A || rr->type == DNS_RRTYPE_ANY)) {
 801012a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801012e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8010138:	2b01      	cmp	r3, #1
 801013a:	d008      	beq.n	801014e <check_host+0x15e>
 801013c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010140:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 801014a:	2bff      	cmp	r3, #255	@ 0xff
 801014c:	d105      	bne.n	801015a <check_host+0x16a>
      replies |= REPLY_HOST_A;
 801014e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010152:	f043 0301 	orr.w	r3, r3, #1
 8010156:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
      replies |= REPLY_HOST_AAAA;
    }
#endif
  }

  return replies;
 801015a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
}
 801015e:	4618      	mov	r0, r3
 8010160:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}
 8010168:	20004ba8 	.word	0x20004ba8

0801016c <check_service>:
 * @param rr Domain/type/class from a question
 * @return Bitmask of which replies to send
 */
static int
check_service(struct mdns_service *service, struct mdns_rr_info *rr)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b0c6      	sub	sp, #280	@ 0x118
 8010170:	af00      	add	r7, sp, #0
 8010172:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010176:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801017a:	6018      	str	r0, [r3, #0]
 801017c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010180:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8010184:	6019      	str	r1, [r3, #0]
  err_t res;
  int replies = 0;
 8010186:	2300      	movs	r3, #0
 8010188:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  struct mdns_domain mydomain;

  if (rr->klass != DNS_RRCLASS_IN && rr->klass != DNS_RRCLASS_ANY) {
 801018c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010190:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 801019a:	2b01      	cmp	r3, #1
 801019c:	d00a      	beq.n	80101b4 <check_service+0x48>
 801019e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80101a2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 80101ac:	2bff      	cmp	r3, #255	@ 0xff
 80101ae:	d001      	beq.n	80101b4 <check_service+0x48>
    /* Invalid class */
    return 0;
 80101b0:	2300      	movs	r3, #0
 80101b2:	e0b9      	b.n	8010328 <check_service+0x1bc>
  }

  res = mdns_build_dnssd_domain(&mydomain);
 80101b4:	f107 030c 	add.w	r3, r7, #12
 80101b8:	4618      	mov	r0, r3
 80101ba:	f7ff fe2b 	bl	800fe14 <mdns_build_dnssd_domain>
 80101be:	4603      	mov	r3, r0
 80101c0:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
  if (res == ERR_OK && mdns_domain_eq(&rr->domain, &mydomain) &&
 80101c4:	f997 3113 	ldrsb.w	r3, [r7, #275]	@ 0x113
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d125      	bne.n	8010218 <check_service+0xac>
 80101cc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80101d0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	f107 020c 	add.w	r2, r7, #12
 80101da:	4611      	mov	r1, r2
 80101dc:	4618      	mov	r0, r3
 80101de:	f7ff fc95 	bl	800fb0c <mdns_domain_eq>
 80101e2:	4603      	mov	r3, r0
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d017      	beq.n	8010218 <check_service+0xac>
      (rr->type == DNS_RRTYPE_PTR || rr->type == DNS_RRTYPE_ANY)) {
 80101e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80101ec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
  if (res == ERR_OK && mdns_domain_eq(&rr->domain, &mydomain) &&
 80101f6:	2b0c      	cmp	r3, #12
 80101f8:	d008      	beq.n	801020c <check_service+0xa0>
      (rr->type == DNS_RRTYPE_PTR || rr->type == DNS_RRTYPE_ANY)) {
 80101fa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80101fe:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8010208:	2bff      	cmp	r3, #255	@ 0xff
 801020a:	d105      	bne.n	8010218 <check_service+0xac>
    /* Request for all service types */
    replies |= REPLY_SERVICE_TYPE_PTR;
 801020c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8010210:	f043 0310 	orr.w	r3, r3, #16
 8010214:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  }

  res = mdns_build_service_domain(&mydomain, service, 0);
 8010218:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801021c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8010220:	f107 000c 	add.w	r0, r7, #12
 8010224:	2200      	movs	r2, #0
 8010226:	6819      	ldr	r1, [r3, #0]
 8010228:	f7ff fe5a 	bl	800fee0 <mdns_build_service_domain>
 801022c:	4603      	mov	r3, r0
 801022e:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
  if (res == ERR_OK && mdns_domain_eq(&rr->domain, &mydomain) &&
 8010232:	f997 3113 	ldrsb.w	r3, [r7, #275]	@ 0x113
 8010236:	2b00      	cmp	r3, #0
 8010238:	d125      	bne.n	8010286 <check_service+0x11a>
 801023a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801023e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	f107 020c 	add.w	r2, r7, #12
 8010248:	4611      	mov	r1, r2
 801024a:	4618      	mov	r0, r3
 801024c:	f7ff fc5e 	bl	800fb0c <mdns_domain_eq>
 8010250:	4603      	mov	r3, r0
 8010252:	2b00      	cmp	r3, #0
 8010254:	d017      	beq.n	8010286 <check_service+0x11a>
      (rr->type == DNS_RRTYPE_PTR || rr->type == DNS_RRTYPE_ANY)) {
 8010256:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801025a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
  if (res == ERR_OK && mdns_domain_eq(&rr->domain, &mydomain) &&
 8010264:	2b0c      	cmp	r3, #12
 8010266:	d008      	beq.n	801027a <check_service+0x10e>
      (rr->type == DNS_RRTYPE_PTR || rr->type == DNS_RRTYPE_ANY)) {
 8010268:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801026c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8010276:	2bff      	cmp	r3, #255	@ 0xff
 8010278:	d105      	bne.n	8010286 <check_service+0x11a>
    /* Request for the instance of my service */
    replies |= REPLY_SERVICE_NAME_PTR;
 801027a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801027e:	f043 0320 	orr.w	r3, r3, #32
 8010282:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  }

  res = mdns_build_service_domain(&mydomain, service, 1);
 8010286:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801028a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801028e:	f107 000c 	add.w	r0, r7, #12
 8010292:	2201      	movs	r2, #1
 8010294:	6819      	ldr	r1, [r3, #0]
 8010296:	f7ff fe23 	bl	800fee0 <mdns_build_service_domain>
 801029a:	4603      	mov	r3, r0
 801029c:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
  if (res == ERR_OK && mdns_domain_eq(&rr->domain, &mydomain)) {
 80102a0:	f997 3113 	ldrsb.w	r3, [r7, #275]	@ 0x113
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d13d      	bne.n	8010324 <check_service+0x1b8>
 80102a8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80102ac:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	f107 020c 	add.w	r2, r7, #12
 80102b6:	4611      	mov	r1, r2
 80102b8:	4618      	mov	r0, r3
 80102ba:	f7ff fc27 	bl	800fb0c <mdns_domain_eq>
 80102be:	4603      	mov	r3, r0
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d02f      	beq.n	8010324 <check_service+0x1b8>
    /* Request for info about my service */
    if (rr->type == DNS_RRTYPE_SRV || rr->type == DNS_RRTYPE_ANY) {
 80102c4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80102c8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80102d2:	2b21      	cmp	r3, #33	@ 0x21
 80102d4:	d008      	beq.n	80102e8 <check_service+0x17c>
 80102d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80102da:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80102e4:	2bff      	cmp	r3, #255	@ 0xff
 80102e6:	d105      	bne.n	80102f4 <check_service+0x188>
      replies |= REPLY_SERVICE_SRV;
 80102e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80102ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80102f0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    }
    if (rr->type == DNS_RRTYPE_TXT || rr->type == DNS_RRTYPE_ANY) {
 80102f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80102f8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8010302:	2b10      	cmp	r3, #16
 8010304:	d008      	beq.n	8010318 <check_service+0x1ac>
 8010306:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801030a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8010314:	2bff      	cmp	r3, #255	@ 0xff
 8010316:	d105      	bne.n	8010324 <check_service+0x1b8>
      replies |= REPLY_SERVICE_TXT;
 8010318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801031c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010320:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    }
  }

  return replies;
 8010324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
}
 8010328:	4618      	mov	r0, r3
 801032a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}

08010332 <mdns_compress_domain>:
 *         If compression can not be done against this previous domain name, the full new
 *         domain length is returned.
 */
u16_t
mdns_compress_domain(struct pbuf *pbuf, u16_t *offset, struct mdns_domain *domain)
{
 8010332:	b580      	push	{r7, lr}
 8010334:	b0ca      	sub	sp, #296	@ 0x128
 8010336:	af00      	add	r7, sp, #0
 8010338:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801033c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8010340:	6018      	str	r0, [r3, #0]
 8010342:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010346:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801034a:	6019      	str	r1, [r3, #0]
 801034c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010350:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8010354:	601a      	str	r2, [r3, #0]
  struct mdns_domain target;
  u16_t target_end;
  u8_t target_len;
  u8_t writelen = 0;
 8010356:	2300      	movs	r3, #0
 8010358:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  u8_t *ptr;
  if (pbuf == NULL) {
 801035c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010360:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d107      	bne.n	801037a <mdns_compress_domain+0x48>
    return domain->length;
 801036a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801036e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8010378:	e0c5      	b.n	8010506 <mdns_compress_domain+0x1d4>
  }
  target_end = mdns_readname(pbuf, *offset, &target);
 801037a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801037e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	8819      	ldrh	r1, [r3, #0]
 8010386:	f107 0214 	add.w	r2, r7, #20
 801038a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801038e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8010392:	6818      	ldr	r0, [r3, #0]
 8010394:	f7ff fb7c 	bl	800fa90 <mdns_readname>
 8010398:	4603      	mov	r3, r0
 801039a:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
  if (target_end == MDNS_READNAME_ERROR) {
 801039e:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 80103a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80103a6:	4293      	cmp	r3, r2
 80103a8:	d107      	bne.n	80103ba <mdns_compress_domain+0x88>
    return domain->length;
 80103aa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80103ae:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80103b8:	e0a5      	b.n	8010506 <mdns_compress_domain+0x1d4>
  }
  target_len = (u8_t)(target_end - *offset);
 80103ba:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 80103be:	b2da      	uxtb	r2, r3
 80103c0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80103c4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	881b      	ldrh	r3, [r3, #0]
 80103cc:	b2db      	uxtb	r3, r3
 80103ce:	1ad3      	subs	r3, r2, r3
 80103d0:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
  ptr = domain->name;
 80103d4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80103d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  while (writelen < domain->length) {
 80103e2:	e07a      	b.n	80104da <mdns_compress_domain+0x1a8>
    u8_t domainlen = (u8_t)(domain->length - writelen);
 80103e4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80103e8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80103f2:	b2da      	uxtb	r2, r3
 80103f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80103f8:	1ad3      	subs	r3, r2, r3
 80103fa:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
    u8_t labellen;
    if (domainlen <= target.length && domainlen > DOMAIN_JUMP_SIZE) {
 80103fe:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8010402:	b29a      	uxth	r2, r3
 8010404:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010408:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801040c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8010410:	429a      	cmp	r2, r3
 8010412:	d84b      	bhi.n	80104ac <mdns_compress_domain+0x17a>
 8010414:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8010418:	2b02      	cmp	r3, #2
 801041a:	d947      	bls.n	80104ac <mdns_compress_domain+0x17a>
      /* Compare domains if target is long enough, and we have enough left of the domain */
      u8_t targetpos = (u8_t)(target.length - domainlen);
 801041c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010420:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8010424:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8010428:	b2da      	uxtb	r2, r3
 801042a:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 801042e:	1ad3      	subs	r3, r2, r3
 8010430:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
      if ((targetpos + DOMAIN_JUMP_SIZE) >= target_len) {
 8010434:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8010438:	1c9a      	adds	r2, r3, #2
 801043a:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 801043e:	429a      	cmp	r2, r3
 8010440:	da59      	bge.n	80104f6 <mdns_compress_domain+0x1c4>
        /* We are checking at or beyond a jump in the original, stop looking */
        break;
      }
      if (target.length >= domainlen &&
 8010442:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010446:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801044a:	f8b3 2100 	ldrh.w	r2, [r3, #256]	@ 0x100
 801044e:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 8010452:	b29b      	uxth	r3, r3
 8010454:	429a      	cmp	r2, r3
 8010456:	d329      	bcc.n	80104ac <mdns_compress_domain+0x17a>
          memcmp(&domain->name[writelen], &target.name[targetpos], domainlen) == 0) {
 8010458:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801045c:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8010460:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8010464:	6812      	ldr	r2, [r2, #0]
 8010466:	18d0      	adds	r0, r2, r3
 8010468:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 801046c:	f107 0214 	add.w	r2, r7, #20
 8010470:	4413      	add	r3, r2
 8010472:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
 8010476:	4619      	mov	r1, r3
 8010478:	f011 f942 	bl	8021700 <memcmp>
 801047c:	4603      	mov	r3, r0
      if (target.length >= domainlen &&
 801047e:	2b00      	cmp	r3, #0
 8010480:	d114      	bne.n	80104ac <mdns_compress_domain+0x17a>
        *offset += targetpos;
 8010482:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8010486:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	881a      	ldrh	r2, [r3, #0]
 801048e:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 8010492:	b29b      	uxth	r3, r3
 8010494:	4413      	add	r3, r2
 8010496:	b29a      	uxth	r2, r3
 8010498:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801049c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	801a      	strh	r2, [r3, #0]
        return writelen;
 80104a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	e02c      	b.n	8010506 <mdns_compress_domain+0x1d4>
      }
    }
    /* Skip to next label in domain */
    labellen = *ptr;
 80104ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
    writelen += 1 + labellen;
 80104b6:	f897 211a 	ldrb.w	r2, [r7, #282]	@ 0x11a
 80104ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80104be:	4413      	add	r3, r2
 80104c0:	b2db      	uxtb	r3, r3
 80104c2:	3301      	adds	r3, #1
 80104c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    ptr += 1 + labellen;
 80104c8:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
 80104cc:	3301      	adds	r3, #1
 80104ce:	461a      	mov	r2, r3
 80104d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80104d4:	4413      	add	r3, r2
 80104d6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  while (writelen < domain->length) {
 80104da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80104de:	b29a      	uxth	r2, r3
 80104e0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80104e4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80104ee:	429a      	cmp	r2, r3
 80104f0:	f4ff af78 	bcc.w	80103e4 <mdns_compress_domain+0xb2>
 80104f4:	e000      	b.n	80104f8 <mdns_compress_domain+0x1c6>
        break;
 80104f6:	bf00      	nop
  }
  /* Nothing found */
  return domain->length;
 80104f8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80104fc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
}
 8010506:	4618      	mov	r0, r3
 8010508:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <mdns_write_domain>:
 * @param domain The domain name to write
 * @return ERR_OK on success, an err_t otherwise
 */
static err_t
mdns_write_domain(struct mdns_outpacket *outpkt, struct mdns_domain *domain)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b086      	sub	sp, #24
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	6039      	str	r1, [r7, #0]
  int i;
  err_t res;
  u16_t writelen = domain->length;
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8010520:	827b      	strh	r3, [r7, #18]
  u16_t jump_offset = 0;
 8010522:	2300      	movs	r3, #0
 8010524:	823b      	strh	r3, [r7, #16]
  u16_t jump;

  if (!domain->skip_compression) {
 8010526:	683b      	ldr	r3, [r7, #0]
 8010528:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 801052c:	2b00      	cmp	r3, #0
 801052e:	d124      	bne.n	801057a <mdns_write_domain+0x6a>
    for (i = 0; i < NUM_DOMAIN_OFFSETS; i++) {
 8010530:	2300      	movs	r3, #0
 8010532:	617b      	str	r3, [r7, #20]
 8010534:	e01e      	b.n	8010574 <mdns_write_domain+0x64>
      u16_t offset = outpkt->domain_offsets[i];
 8010536:	687a      	ldr	r2, [r7, #4]
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	330c      	adds	r3, #12
 801053c:	005b      	lsls	r3, r3, #1
 801053e:	4413      	add	r3, r2
 8010540:	885b      	ldrh	r3, [r3, #2]
 8010542:	813b      	strh	r3, [r7, #8]
      if (offset) {
 8010544:	893b      	ldrh	r3, [r7, #8]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d011      	beq.n	801056e <mdns_write_domain+0x5e>
        u16_t len = mdns_compress_domain(outpkt->pbuf, &offset, domain);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	685b      	ldr	r3, [r3, #4]
 801054e:	f107 0108 	add.w	r1, r7, #8
 8010552:	683a      	ldr	r2, [r7, #0]
 8010554:	4618      	mov	r0, r3
 8010556:	f7ff feec 	bl	8010332 <mdns_compress_domain>
 801055a:	4603      	mov	r3, r0
 801055c:	81fb      	strh	r3, [r7, #14]
        if (len < writelen) {
 801055e:	89fa      	ldrh	r2, [r7, #14]
 8010560:	8a7b      	ldrh	r3, [r7, #18]
 8010562:	429a      	cmp	r2, r3
 8010564:	d203      	bcs.n	801056e <mdns_write_domain+0x5e>
          writelen = len;
 8010566:	89fb      	ldrh	r3, [r7, #14]
 8010568:	827b      	strh	r3, [r7, #18]
          jump_offset = offset;
 801056a:	893b      	ldrh	r3, [r7, #8]
 801056c:	823b      	strh	r3, [r7, #16]
    for (i = 0; i < NUM_DOMAIN_OFFSETS; i++) {
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	3301      	adds	r3, #1
 8010572:	617b      	str	r3, [r7, #20]
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	2b09      	cmp	r3, #9
 8010578:	dddd      	ble.n	8010536 <mdns_write_domain+0x26>
        }
      }
    }
  }

  if (writelen) {
 801057a:	8a7b      	ldrh	r3, [r7, #18]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d032      	beq.n	80105e6 <mdns_write_domain+0xd6>
    /* Write uncompressed part of name */
    res = pbuf_take_at(outpkt->pbuf, domain->name, writelen, outpkt->write_offset);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	6858      	ldr	r0, [r3, #4]
 8010584:	6839      	ldr	r1, [r7, #0]
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	891b      	ldrh	r3, [r3, #8]
 801058a:	8a7a      	ldrh	r2, [r7, #18]
 801058c:	f004 f93a 	bl	8014804 <pbuf_take_at>
 8010590:	4603      	mov	r3, r0
 8010592:	737b      	strb	r3, [r7, #13]
    if (res != ERR_OK) {
 8010594:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d002      	beq.n	80105a2 <mdns_write_domain+0x92>
      return res;
 801059c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80105a0:	e048      	b.n	8010634 <mdns_write_domain+0x124>
    }

    /* Store offset of this new domain */
    for (i = 0; i < NUM_DOMAIN_OFFSETS; i++) {
 80105a2:	2300      	movs	r3, #0
 80105a4:	617b      	str	r3, [r7, #20]
 80105a6:	e014      	b.n	80105d2 <mdns_write_domain+0xc2>
      if (outpkt->domain_offsets[i] == 0) {
 80105a8:	687a      	ldr	r2, [r7, #4]
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	330c      	adds	r3, #12
 80105ae:	005b      	lsls	r3, r3, #1
 80105b0:	4413      	add	r3, r2
 80105b2:	885b      	ldrh	r3, [r3, #2]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d109      	bne.n	80105cc <mdns_write_domain+0xbc>
        outpkt->domain_offsets[i] = outpkt->write_offset;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	8919      	ldrh	r1, [r3, #8]
 80105bc:	687a      	ldr	r2, [r7, #4]
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	330c      	adds	r3, #12
 80105c2:	005b      	lsls	r3, r3, #1
 80105c4:	4413      	add	r3, r2
 80105c6:	460a      	mov	r2, r1
 80105c8:	805a      	strh	r2, [r3, #2]
        break;
 80105ca:	e005      	b.n	80105d8 <mdns_write_domain+0xc8>
    for (i = 0; i < NUM_DOMAIN_OFFSETS; i++) {
 80105cc:	697b      	ldr	r3, [r7, #20]
 80105ce:	3301      	adds	r3, #1
 80105d0:	617b      	str	r3, [r7, #20]
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	2b09      	cmp	r3, #9
 80105d6:	dde7      	ble.n	80105a8 <mdns_write_domain+0x98>
      }
    }

    outpkt->write_offset += writelen;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	891a      	ldrh	r2, [r3, #8]
 80105dc:	8a7b      	ldrh	r3, [r7, #18]
 80105de:	4413      	add	r3, r2
 80105e0:	b29a      	uxth	r2, r3
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	811a      	strh	r2, [r3, #8]
  }
  if (jump_offset) {
 80105e6:	8a3b      	ldrh	r3, [r7, #16]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d022      	beq.n	8010632 <mdns_write_domain+0x122>
    /* Write jump */
    jump = lwip_htons(DOMAIN_JUMP | jump_offset);
 80105ec:	8a3b      	ldrh	r3, [r7, #16]
 80105ee:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 80105f2:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 80105f6:	b29b      	uxth	r3, r3
 80105f8:	4618      	mov	r0, r3
 80105fa:	f001 ffff 	bl	80125fc <lwip_htons>
 80105fe:	4603      	mov	r3, r0
 8010600:	817b      	strh	r3, [r7, #10]
    res = pbuf_take_at(outpkt->pbuf, &jump, DOMAIN_JUMP_SIZE, outpkt->write_offset);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6858      	ldr	r0, [r3, #4]
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	891b      	ldrh	r3, [r3, #8]
 801060a:	f107 010a 	add.w	r1, r7, #10
 801060e:	2202      	movs	r2, #2
 8010610:	f004 f8f8 	bl	8014804 <pbuf_take_at>
 8010614:	4603      	mov	r3, r0
 8010616:	737b      	strb	r3, [r7, #13]
    if (res != ERR_OK) {
 8010618:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d002      	beq.n	8010626 <mdns_write_domain+0x116>
      return res;
 8010620:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010624:	e006      	b.n	8010634 <mdns_write_domain+0x124>
    }
    outpkt->write_offset += DOMAIN_JUMP_SIZE;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	891b      	ldrh	r3, [r3, #8]
 801062a:	3302      	adds	r3, #2
 801062c:	b29a      	uxth	r2, r3
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	811a      	strh	r2, [r3, #8]
  }
  return ERR_OK;
 8010632:	2300      	movs	r3, #0
}
 8010634:	4618      	mov	r0, r3
 8010636:	3718      	adds	r7, #24
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <mdns_add_question>:
 *                reply with a unicast packet
 * @return ERR_OK on success, an err_t otherwise
 */
static err_t
mdns_add_question(struct mdns_outpacket *outpkt, struct mdns_domain *domain, u16_t type, u16_t klass, u16_t unicast)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b086      	sub	sp, #24
 8010640:	af00      	add	r7, sp, #0
 8010642:	60f8      	str	r0, [r7, #12]
 8010644:	60b9      	str	r1, [r7, #8]
 8010646:	4611      	mov	r1, r2
 8010648:	461a      	mov	r2, r3
 801064a:	460b      	mov	r3, r1
 801064c:	80fb      	strh	r3, [r7, #6]
 801064e:	4613      	mov	r3, r2
 8010650:	80bb      	strh	r3, [r7, #4]
  u16_t question_len;
  u16_t field16;
  err_t res;

  if (!outpkt->pbuf) {
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	685b      	ldr	r3, [r3, #4]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d113      	bne.n	8010682 <mdns_add_question+0x46>
    /* If no pbuf is active, allocate one */
    outpkt->pbuf = pbuf_alloc(PBUF_TRANSPORT, OUTPACKET_SIZE, PBUF_RAM);
 801065a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801065e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8010662:	2036      	movs	r0, #54	@ 0x36
 8010664:	f003 faa4 	bl	8013bb0 <pbuf_alloc>
 8010668:	4602      	mov	r2, r0
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	605a      	str	r2, [r3, #4]
    if (!outpkt->pbuf) {
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	685b      	ldr	r3, [r3, #4]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d102      	bne.n	801067c <mdns_add_question+0x40>
      return ERR_MEM;
 8010676:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801067a:	e067      	b.n	801074c <mdns_add_question+0x110>
    }
    outpkt->write_offset = SIZEOF_DNS_HDR;
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	220c      	movs	r2, #12
 8010680:	811a      	strh	r2, [r3, #8]
  }

  /* Worst case calculation. Domain string might be compressed */
  question_len = domain->length + sizeof(type) + sizeof(klass);
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8010688:	3304      	adds	r3, #4
 801068a:	82fb      	strh	r3, [r7, #22]
  if (outpkt->write_offset + question_len > outpkt->pbuf->tot_len) {
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	891b      	ldrh	r3, [r3, #8]
 8010690:	461a      	mov	r2, r3
 8010692:	8afb      	ldrh	r3, [r7, #22]
 8010694:	4413      	add	r3, r2
 8010696:	68fa      	ldr	r2, [r7, #12]
 8010698:	6852      	ldr	r2, [r2, #4]
 801069a:	8912      	ldrh	r2, [r2, #8]
 801069c:	4293      	cmp	r3, r2
 801069e:	dd02      	ble.n	80106a6 <mdns_add_question+0x6a>
    /* No space */
    return ERR_MEM;
 80106a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80106a4:	e052      	b.n	801074c <mdns_add_question+0x110>
  }

  /* Write name */
  res = mdns_write_domain(outpkt, domain);
 80106a6:	68b9      	ldr	r1, [r7, #8]
 80106a8:	68f8      	ldr	r0, [r7, #12]
 80106aa:	f7ff ff31 	bl	8010510 <mdns_write_domain>
 80106ae:	4603      	mov	r3, r0
 80106b0:	757b      	strb	r3, [r7, #21]
  if (res != ERR_OK) {
 80106b2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d002      	beq.n	80106c0 <mdns_add_question+0x84>
    return res;
 80106ba:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80106be:	e045      	b.n	801074c <mdns_add_question+0x110>
  }

  /* Write type */
  field16 = lwip_htons(type);
 80106c0:	88fb      	ldrh	r3, [r7, #6]
 80106c2:	4618      	mov	r0, r3
 80106c4:	f001 ff9a 	bl	80125fc <lwip_htons>
 80106c8:	4603      	mov	r3, r0
 80106ca:	827b      	strh	r3, [r7, #18]
  res = pbuf_take_at(outpkt->pbuf, &field16, sizeof(field16), outpkt->write_offset);
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	6858      	ldr	r0, [r3, #4]
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	891b      	ldrh	r3, [r3, #8]
 80106d4:	f107 0112 	add.w	r1, r7, #18
 80106d8:	2202      	movs	r2, #2
 80106da:	f004 f893 	bl	8014804 <pbuf_take_at>
 80106de:	4603      	mov	r3, r0
 80106e0:	757b      	strb	r3, [r7, #21]
  if (res != ERR_OK) {
 80106e2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d002      	beq.n	80106f0 <mdns_add_question+0xb4>
    return res;
 80106ea:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80106ee:	e02d      	b.n	801074c <mdns_add_question+0x110>
  }
  outpkt->write_offset += sizeof(field16);
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	891b      	ldrh	r3, [r3, #8]
 80106f4:	3302      	adds	r3, #2
 80106f6:	b29a      	uxth	r2, r3
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	811a      	strh	r2, [r3, #8]

  /* Write class */
  if (unicast) {
 80106fc:	8c3b      	ldrh	r3, [r7, #32]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d005      	beq.n	801070e <mdns_add_question+0xd2>
    klass |= 0x8000;
 8010702:	88bb      	ldrh	r3, [r7, #4]
 8010704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801070c:	80bb      	strh	r3, [r7, #4]
  }
  field16 = lwip_htons(klass);
 801070e:	88bb      	ldrh	r3, [r7, #4]
 8010710:	4618      	mov	r0, r3
 8010712:	f001 ff73 	bl	80125fc <lwip_htons>
 8010716:	4603      	mov	r3, r0
 8010718:	827b      	strh	r3, [r7, #18]
  res = pbuf_take_at(outpkt->pbuf, &field16, sizeof(field16), outpkt->write_offset);
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	6858      	ldr	r0, [r3, #4]
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	891b      	ldrh	r3, [r3, #8]
 8010722:	f107 0112 	add.w	r1, r7, #18
 8010726:	2202      	movs	r2, #2
 8010728:	f004 f86c 	bl	8014804 <pbuf_take_at>
 801072c:	4603      	mov	r3, r0
 801072e:	757b      	strb	r3, [r7, #21]
  if (res != ERR_OK) {
 8010730:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d002      	beq.n	801073e <mdns_add_question+0x102>
    return res;
 8010738:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801073c:	e006      	b.n	801074c <mdns_add_question+0x110>
  }
  outpkt->write_offset += sizeof(field16);
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	891b      	ldrh	r3, [r3, #8]
 8010742:	3302      	adds	r3, #2
 8010744:	b29a      	uxth	r2, r3
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	811a      	strh	r2, [r3, #8]

  return ERR_OK;
 801074a:	2300      	movs	r3, #0
}
 801074c:	4618      	mov	r0, r3
 801074e:	3718      	adds	r7, #24
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}

08010754 <mdns_add_answer>:
 * @return ERR_OK on success, an err_t otherwise
 */
static err_t
mdns_add_answer(struct mdns_outpacket *reply, struct mdns_domain *domain, u16_t type, u16_t klass, u16_t cache_flush,
                u32_t ttl, const u8_t *buf, size_t buf_length, struct mdns_domain *answer_domain)
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b08a      	sub	sp, #40	@ 0x28
 8010758:	af02      	add	r7, sp, #8
 801075a:	60f8      	str	r0, [r7, #12]
 801075c:	60b9      	str	r1, [r7, #8]
 801075e:	4611      	mov	r1, r2
 8010760:	461a      	mov	r2, r3
 8010762:	460b      	mov	r3, r1
 8010764:	80fb      	strh	r3, [r7, #6]
 8010766:	4613      	mov	r3, r2
 8010768:	80bb      	strh	r3, [r7, #4]
  u16_t rdlen_offset;
  u16_t answer_offset;
  u32_t field32;
  err_t res;

  if (!reply->pbuf) {
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	685b      	ldr	r3, [r3, #4]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d113      	bne.n	801079a <mdns_add_answer+0x46>
    /* If no pbuf is active, allocate one */
    reply->pbuf = pbuf_alloc(PBUF_TRANSPORT, OUTPACKET_SIZE, PBUF_RAM);
 8010772:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010776:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 801077a:	2036      	movs	r0, #54	@ 0x36
 801077c:	f003 fa18 	bl	8013bb0 <pbuf_alloc>
 8010780:	4602      	mov	r2, r0
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	605a      	str	r2, [r3, #4]
    if (!reply->pbuf) {
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	685b      	ldr	r3, [r3, #4]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d102      	bne.n	8010794 <mdns_add_answer+0x40>
      return ERR_MEM;
 801078e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010792:	e09a      	b.n	80108ca <mdns_add_answer+0x176>
    }
    reply->write_offset = SIZEOF_DNS_HDR;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	220c      	movs	r2, #12
 8010798:	811a      	strh	r2, [r3, #8]
  }

  /* Worst case calculation. Domain strings might be compressed */
  answer_len = domain->length + sizeof(type) + sizeof(klass) + sizeof(ttl) + sizeof(field16)/*rd_length*/;
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80107a0:	330a      	adds	r3, #10
 80107a2:	83fb      	strh	r3, [r7, #30]
  if (buf) {
 80107a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d004      	beq.n	80107b4 <mdns_add_answer+0x60>
    answer_len += (u16_t)buf_length;
 80107aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107ac:	b29a      	uxth	r2, r3
 80107ae:	8bfb      	ldrh	r3, [r7, #30]
 80107b0:	4413      	add	r3, r2
 80107b2:	83fb      	strh	r3, [r7, #30]
  }
  if (answer_domain) {
 80107b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d005      	beq.n	80107c6 <mdns_add_answer+0x72>
    answer_len += answer_domain->length;
 80107ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107bc:	f8b3 2100 	ldrh.w	r2, [r3, #256]	@ 0x100
 80107c0:	8bfb      	ldrh	r3, [r7, #30]
 80107c2:	4413      	add	r3, r2
 80107c4:	83fb      	strh	r3, [r7, #30]
  }
  if (reply->write_offset + answer_len > reply->pbuf->tot_len) {
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	891b      	ldrh	r3, [r3, #8]
 80107ca:	461a      	mov	r2, r3
 80107cc:	8bfb      	ldrh	r3, [r7, #30]
 80107ce:	4413      	add	r3, r2
 80107d0:	68fa      	ldr	r2, [r7, #12]
 80107d2:	6852      	ldr	r2, [r2, #4]
 80107d4:	8912      	ldrh	r2, [r2, #8]
 80107d6:	4293      	cmp	r3, r2
 80107d8:	dd02      	ble.n	80107e0 <mdns_add_answer+0x8c>
    /* No space */
    return ERR_MEM;
 80107da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80107de:	e074      	b.n	80108ca <mdns_add_answer+0x176>
  }

  /* Answer starts with same data as question, then more fields */
  mdns_add_question(reply, domain, type, klass, cache_flush);
 80107e0:	88b9      	ldrh	r1, [r7, #4]
 80107e2:	88fa      	ldrh	r2, [r7, #6]
 80107e4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80107e6:	9300      	str	r3, [sp, #0]
 80107e8:	460b      	mov	r3, r1
 80107ea:	68b9      	ldr	r1, [r7, #8]
 80107ec:	68f8      	ldr	r0, [r7, #12]
 80107ee:	f7ff ff25 	bl	801063c <mdns_add_question>

  /* Write TTL */
  field32 = lwip_htonl(ttl);
 80107f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80107f4:	f001 ff18 	bl	8012628 <lwip_htonl>
 80107f8:	4603      	mov	r3, r0
 80107fa:	613b      	str	r3, [r7, #16]
  res = pbuf_take_at(reply->pbuf, &field32, sizeof(field32), reply->write_offset);
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	6858      	ldr	r0, [r3, #4]
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	891b      	ldrh	r3, [r3, #8]
 8010804:	f107 0110 	add.w	r1, r7, #16
 8010808:	2204      	movs	r2, #4
 801080a:	f003 fffb 	bl	8014804 <pbuf_take_at>
 801080e:	4603      	mov	r3, r0
 8010810:	777b      	strb	r3, [r7, #29]
  if (res != ERR_OK) {
 8010812:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d002      	beq.n	8010820 <mdns_add_answer+0xcc>
    return res;
 801081a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801081e:	e054      	b.n	80108ca <mdns_add_answer+0x176>
  }
  reply->write_offset += sizeof(field32);
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	891b      	ldrh	r3, [r3, #8]
 8010824:	3304      	adds	r3, #4
 8010826:	b29a      	uxth	r2, r3
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	811a      	strh	r2, [r3, #8]

  /* Store offsets and skip forward to the data */
  rdlen_offset = reply->write_offset;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	891b      	ldrh	r3, [r3, #8]
 8010830:	837b      	strh	r3, [r7, #26]
  reply->write_offset += sizeof(field16);
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	891b      	ldrh	r3, [r3, #8]
 8010836:	3302      	adds	r3, #2
 8010838:	b29a      	uxth	r2, r3
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	811a      	strh	r2, [r3, #8]
  answer_offset = reply->write_offset;
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	891b      	ldrh	r3, [r3, #8]
 8010842:	833b      	strh	r3, [r7, #24]

  if (buf) {
 8010844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010846:	2b00      	cmp	r3, #0
 8010848:	d019      	beq.n	801087e <mdns_add_answer+0x12a>
    /* Write static data */
    res = pbuf_take_at(reply->pbuf, buf, (u16_t)buf_length, reply->write_offset);
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	6858      	ldr	r0, [r3, #4]
 801084e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010850:	b29a      	uxth	r2, r3
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	891b      	ldrh	r3, [r3, #8]
 8010856:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010858:	f003 ffd4 	bl	8014804 <pbuf_take_at>
 801085c:	4603      	mov	r3, r0
 801085e:	777b      	strb	r3, [r7, #29]
    if (res != ERR_OK) {
 8010860:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d002      	beq.n	801086e <mdns_add_answer+0x11a>
      return res;
 8010868:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801086c:	e02d      	b.n	80108ca <mdns_add_answer+0x176>
    }
    reply->write_offset += (u16_t)buf_length;
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	891a      	ldrh	r2, [r3, #8]
 8010872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010874:	b29b      	uxth	r3, r3
 8010876:	4413      	add	r3, r2
 8010878:	b29a      	uxth	r2, r3
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	811a      	strh	r2, [r3, #8]
  }

  if (answer_domain) {
 801087e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010880:	2b00      	cmp	r3, #0
 8010882:	d00c      	beq.n	801089e <mdns_add_answer+0x14a>
    /* Write name answer (compressed if possible) */
    res = mdns_write_domain(reply, answer_domain);
 8010884:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010886:	68f8      	ldr	r0, [r7, #12]
 8010888:	f7ff fe42 	bl	8010510 <mdns_write_domain>
 801088c:	4603      	mov	r3, r0
 801088e:	777b      	strb	r3, [r7, #29]
    if (res != ERR_OK) {
 8010890:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d002      	beq.n	801089e <mdns_add_answer+0x14a>
      return res;
 8010898:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801089c:	e015      	b.n	80108ca <mdns_add_answer+0x176>
    }
  }

  /* Write rd_length after when we know the answer size */
  field16 = lwip_htons(reply->write_offset - answer_offset);
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	891a      	ldrh	r2, [r3, #8]
 80108a2:	8b3b      	ldrh	r3, [r7, #24]
 80108a4:	1ad3      	subs	r3, r2, r3
 80108a6:	b29b      	uxth	r3, r3
 80108a8:	4618      	mov	r0, r3
 80108aa:	f001 fea7 	bl	80125fc <lwip_htons>
 80108ae:	4603      	mov	r3, r0
 80108b0:	82fb      	strh	r3, [r7, #22]
  res = pbuf_take_at(reply->pbuf, &field16, sizeof(field16), rdlen_offset);
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	6858      	ldr	r0, [r3, #4]
 80108b6:	8b7b      	ldrh	r3, [r7, #26]
 80108b8:	f107 0116 	add.w	r1, r7, #22
 80108bc:	2202      	movs	r2, #2
 80108be:	f003 ffa1 	bl	8014804 <pbuf_take_at>
 80108c2:	4603      	mov	r3, r0
 80108c4:	777b      	strb	r3, [r7, #29]

  return res;
 80108c6:	f997 301d 	ldrsb.w	r3, [r7, #29]
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	3720      	adds	r7, #32
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}

080108d2 <mdns_read_rr_info>:
 * @param info The struct to fill with domain, type and class
 * @return ERR_OK on success, an err_t otherwise
 */
static err_t
mdns_read_rr_info(struct mdns_packet *pkt, struct mdns_rr_info *info)
{
 80108d2:	b580      	push	{r7, lr}
 80108d4:	b084      	sub	sp, #16
 80108d6:	af00      	add	r7, sp, #0
 80108d8:	6078      	str	r0, [r7, #4]
 80108da:	6039      	str	r1, [r7, #0]
  u16_t field16, copied;
  pkt->parse_offset = mdns_readname(pkt->pbuf, pkt->parse_offset, &info->domain);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	68d8      	ldr	r0, [r3, #12]
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	8a1b      	ldrh	r3, [r3, #16]
 80108e4:	683a      	ldr	r2, [r7, #0]
 80108e6:	4619      	mov	r1, r3
 80108e8:	f7ff f8d2 	bl	800fa90 <mdns_readname>
 80108ec:	4603      	mov	r3, r0
 80108ee:	461a      	mov	r2, r3
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	821a      	strh	r2, [r3, #16]
  if (pkt->parse_offset == MDNS_READNAME_ERROR) {
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	8a1b      	ldrh	r3, [r3, #16]
 80108f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80108fc:	4293      	cmp	r3, r2
 80108fe:	d102      	bne.n	8010906 <mdns_read_rr_info+0x34>
    return ERR_VAL;
 8010900:	f06f 0305 	mvn.w	r3, #5
 8010904:	e042      	b.n	801098c <mdns_read_rr_info+0xba>
  }

  copied = pbuf_copy_partial(pkt->pbuf, &field16, sizeof(field16), pkt->parse_offset);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	68d8      	ldr	r0, [r3, #12]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	8a1b      	ldrh	r3, [r3, #16]
 801090e:	f107 010c 	add.w	r1, r7, #12
 8010912:	2202      	movs	r2, #2
 8010914:	f003 fe36 	bl	8014584 <pbuf_copy_partial>
 8010918:	4603      	mov	r3, r0
 801091a:	81fb      	strh	r3, [r7, #14]
  if (copied != sizeof(field16)) {
 801091c:	89fb      	ldrh	r3, [r7, #14]
 801091e:	2b02      	cmp	r3, #2
 8010920:	d002      	beq.n	8010928 <mdns_read_rr_info+0x56>
    return ERR_VAL;
 8010922:	f06f 0305 	mvn.w	r3, #5
 8010926:	e031      	b.n	801098c <mdns_read_rr_info+0xba>
  }
  pkt->parse_offset += copied;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	8a1a      	ldrh	r2, [r3, #16]
 801092c:	89fb      	ldrh	r3, [r7, #14]
 801092e:	4413      	add	r3, r2
 8010930:	b29a      	uxth	r2, r3
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	821a      	strh	r2, [r3, #16]
  info->type = lwip_ntohs(field16);
 8010936:	89bb      	ldrh	r3, [r7, #12]
 8010938:	4618      	mov	r0, r3
 801093a:	f001 fe5f 	bl	80125fc <lwip_htons>
 801093e:	4603      	mov	r3, r0
 8010940:	461a      	mov	r2, r3
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104

  copied = pbuf_copy_partial(pkt->pbuf, &field16, sizeof(field16), pkt->parse_offset);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	68d8      	ldr	r0, [r3, #12]
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	8a1b      	ldrh	r3, [r3, #16]
 8010950:	f107 010c 	add.w	r1, r7, #12
 8010954:	2202      	movs	r2, #2
 8010956:	f003 fe15 	bl	8014584 <pbuf_copy_partial>
 801095a:	4603      	mov	r3, r0
 801095c:	81fb      	strh	r3, [r7, #14]
  if (copied != sizeof(field16)) {
 801095e:	89fb      	ldrh	r3, [r7, #14]
 8010960:	2b02      	cmp	r3, #2
 8010962:	d002      	beq.n	801096a <mdns_read_rr_info+0x98>
    return ERR_VAL;
 8010964:	f06f 0305 	mvn.w	r3, #5
 8010968:	e010      	b.n	801098c <mdns_read_rr_info+0xba>
  }
  pkt->parse_offset += copied;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	8a1a      	ldrh	r2, [r3, #16]
 801096e:	89fb      	ldrh	r3, [r7, #14]
 8010970:	4413      	add	r3, r2
 8010972:	b29a      	uxth	r2, r3
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	821a      	strh	r2, [r3, #16]
  info->klass = lwip_ntohs(field16);
 8010978:	89bb      	ldrh	r3, [r7, #12]
 801097a:	4618      	mov	r0, r3
 801097c:	f001 fe3e 	bl	80125fc <lwip_htons>
 8010980:	4603      	mov	r3, r0
 8010982:	461a      	mov	r2, r3
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106

  return ERR_OK;
 801098a:	2300      	movs	r3, #0
}
 801098c:	4618      	mov	r0, r3
 801098e:	3710      	adds	r7, #16
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}

08010994 <mdns_read_question>:
 * @param question The struct to fill with question data
 * @return ERR_OK on success, an err_t otherwise
 */
static err_t
mdns_read_question(struct mdns_packet *pkt, struct mdns_question *question)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b084      	sub	sp, #16
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
 801099c:	6039      	str	r1, [r7, #0]
  /* Safety check */
  if (pkt->pbuf->tot_len < pkt->parse_offset) {
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	68db      	ldr	r3, [r3, #12]
 80109a2:	891a      	ldrh	r2, [r3, #8]
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	8a1b      	ldrh	r3, [r3, #16]
 80109a8:	429a      	cmp	r2, r3
 80109aa:	d202      	bcs.n	80109b2 <mdns_read_question+0x1e>
    return ERR_VAL;
 80109ac:	f06f 0305 	mvn.w	r3, #5
 80109b0:	e033      	b.n	8010a1a <mdns_read_question+0x86>
  }

  if (pkt->questions_left) {
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	8adb      	ldrh	r3, [r3, #22]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d02d      	beq.n	8010a16 <mdns_read_question+0x82>
    err_t res;
    pkt->questions_left--;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	8adb      	ldrh	r3, [r3, #22]
 80109be:	3b01      	subs	r3, #1
 80109c0:	b29a      	uxth	r2, r3
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	82da      	strh	r2, [r3, #22]

    memset(question, 0, sizeof(struct mdns_question));
 80109c6:	f44f 7285 	mov.w	r2, #266	@ 0x10a
 80109ca:	2100      	movs	r1, #0
 80109cc:	6838      	ldr	r0, [r7, #0]
 80109ce:	f010 fec1 	bl	8021754 <memset>
    res = mdns_read_rr_info(pkt, &question->info);
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	4619      	mov	r1, r3
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f7ff ff7b 	bl	80108d2 <mdns_read_rr_info>
 80109dc:	4603      	mov	r3, r0
 80109de:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 80109e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d002      	beq.n	80109ee <mdns_read_question+0x5a>
      return res;
 80109e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109ec:	e015      	b.n	8010a1a <mdns_read_question+0x86>
    }

    /* Extract unicast flag from class field */
    question->unicast = question->info.klass & 0x8000;
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 80109f4:	4b0b      	ldr	r3, [pc, #44]	@ (8010a24 <mdns_read_question+0x90>)
 80109f6:	4013      	ands	r3, r2
 80109f8:	b29a      	uxth	r2, r3
 80109fa:	683b      	ldr	r3, [r7, #0]
 80109fc:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    question->info.klass &= 0x7FFF;
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8010a06:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106

    return ERR_OK;
 8010a12:	2300      	movs	r3, #0
 8010a14:	e001      	b.n	8010a1a <mdns_read_question+0x86>
  }
  return ERR_VAL;
 8010a16:	f06f 0305 	mvn.w	r3, #5
}
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	3710      	adds	r7, #16
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}
 8010a22:	bf00      	nop
 8010a24:	ffff8000 	.word	0xffff8000

08010a28 <mdns_read_answer>:
 * @param answer The struct to fill with answer data
 * @return ERR_OK on success, an err_t otherwise
 */
static err_t
mdns_read_answer(struct mdns_packet *pkt, struct mdns_answer *answer)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b086      	sub	sp, #24
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
 8010a30:	6039      	str	r1, [r7, #0]
  /* Read questions first */
  if (pkt->questions_left) {
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	8adb      	ldrh	r3, [r3, #22]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d002      	beq.n	8010a40 <mdns_read_answer+0x18>
    return ERR_VAL;
 8010a3a:	f06f 0305 	mvn.w	r3, #5
 8010a3e:	e08c      	b.n	8010b5a <mdns_read_answer+0x132>
  }

  /* Safety check */
  if (pkt->pbuf->tot_len < pkt->parse_offset) {
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	68db      	ldr	r3, [r3, #12]
 8010a44:	891a      	ldrh	r2, [r3, #8]
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	8a1b      	ldrh	r3, [r3, #16]
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d202      	bcs.n	8010a54 <mdns_read_answer+0x2c>
    return ERR_VAL;
 8010a4e:	f06f 0305 	mvn.w	r3, #5
 8010a52:	e082      	b.n	8010b5a <mdns_read_answer+0x132>
  }

  if (pkt->answers_left) {
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	8b5b      	ldrh	r3, [r3, #26]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d07c      	beq.n	8010b56 <mdns_read_answer+0x12e>
    u16_t copied, field16;
    u32_t ttl;
    err_t res;
    pkt->answers_left--;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	8b5b      	ldrh	r3, [r3, #26]
 8010a60:	3b01      	subs	r3, #1
 8010a62:	b29a      	uxth	r2, r3
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	835a      	strh	r2, [r3, #26]

    memset(answer, 0, sizeof(struct mdns_answer));
 8010a68:	f44f 728a 	mov.w	r2, #276	@ 0x114
 8010a6c:	2100      	movs	r1, #0
 8010a6e:	6838      	ldr	r0, [r7, #0]
 8010a70:	f010 fe70 	bl	8021754 <memset>
    res = mdns_read_rr_info(pkt, &answer->info);
 8010a74:	683b      	ldr	r3, [r7, #0]
 8010a76:	4619      	mov	r1, r3
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f7ff ff2a 	bl	80108d2 <mdns_read_rr_info>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	75fb      	strb	r3, [r7, #23]
    if (res != ERR_OK) {
 8010a82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d002      	beq.n	8010a90 <mdns_read_answer+0x68>
      return res;
 8010a8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010a8e:	e064      	b.n	8010b5a <mdns_read_answer+0x132>
    }

    /* Extract cache_flush flag from class field */
    answer->cache_flush = answer->info.klass & 0x8000;
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 8010a96:	4b33      	ldr	r3, [pc, #204]	@ (8010b64 <mdns_read_answer+0x13c>)
 8010a98:	4013      	ands	r3, r2
 8010a9a:	b29a      	uxth	r2, r3
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    answer->info.klass &= 0x7FFF;
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8010aa8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8010aac:	b29a      	uxth	r2, r3
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106

    copied = pbuf_copy_partial(pkt->pbuf, &ttl, sizeof(ttl), pkt->parse_offset);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	68d8      	ldr	r0, [r3, #12]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	8a1b      	ldrh	r3, [r3, #16]
 8010abc:	f107 010c 	add.w	r1, r7, #12
 8010ac0:	2204      	movs	r2, #4
 8010ac2:	f003 fd5f 	bl	8014584 <pbuf_copy_partial>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	82bb      	strh	r3, [r7, #20]
    if (copied != sizeof(ttl)) {
 8010aca:	8abb      	ldrh	r3, [r7, #20]
 8010acc:	2b04      	cmp	r3, #4
 8010ace:	d002      	beq.n	8010ad6 <mdns_read_answer+0xae>
      return ERR_VAL;
 8010ad0:	f06f 0305 	mvn.w	r3, #5
 8010ad4:	e041      	b.n	8010b5a <mdns_read_answer+0x132>
    }
    pkt->parse_offset += copied;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	8a1a      	ldrh	r2, [r3, #16]
 8010ada:	8abb      	ldrh	r3, [r7, #20]
 8010adc:	4413      	add	r3, r2
 8010ade:	b29a      	uxth	r2, r3
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	821a      	strh	r2, [r3, #16]
    answer->ttl = lwip_ntohl(ttl);
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f001 fd9e 	bl	8012628 <lwip_htonl>
 8010aec:	4602      	mov	r2, r0
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

    copied = pbuf_copy_partial(pkt->pbuf, &field16, sizeof(field16), pkt->parse_offset);
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	68d8      	ldr	r0, [r3, #12]
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	8a1b      	ldrh	r3, [r3, #16]
 8010afc:	f107 0112 	add.w	r1, r7, #18
 8010b00:	2202      	movs	r2, #2
 8010b02:	f003 fd3f 	bl	8014584 <pbuf_copy_partial>
 8010b06:	4603      	mov	r3, r0
 8010b08:	82bb      	strh	r3, [r7, #20]
    if (copied != sizeof(field16)) {
 8010b0a:	8abb      	ldrh	r3, [r7, #20]
 8010b0c:	2b02      	cmp	r3, #2
 8010b0e:	d002      	beq.n	8010b16 <mdns_read_answer+0xee>
      return ERR_VAL;
 8010b10:	f06f 0305 	mvn.w	r3, #5
 8010b14:	e021      	b.n	8010b5a <mdns_read_answer+0x132>
    }
    pkt->parse_offset += copied;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	8a1a      	ldrh	r2, [r3, #16]
 8010b1a:	8abb      	ldrh	r3, [r7, #20]
 8010b1c:	4413      	add	r3, r2
 8010b1e:	b29a      	uxth	r2, r3
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	821a      	strh	r2, [r3, #16]
    answer->rd_length = lwip_ntohs(field16);
 8010b24:	8a7b      	ldrh	r3, [r7, #18]
 8010b26:	4618      	mov	r0, r3
 8010b28:	f001 fd68 	bl	80125fc <lwip_htons>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	461a      	mov	r2, r3
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110

    answer->rd_offset = pkt->parse_offset;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	8a1a      	ldrh	r2, [r3, #16]
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112
    pkt->parse_offset += answer->rd_length;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	8a1a      	ldrh	r2, [r3, #16]
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8010b4a:	4413      	add	r3, r2
 8010b4c:	b29a      	uxth	r2, r3
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	821a      	strh	r2, [r3, #16]

    return ERR_OK;
 8010b52:	2300      	movs	r3, #0
 8010b54:	e001      	b.n	8010b5a <mdns_read_answer+0x132>
  }
  return ERR_VAL;
 8010b56:	f06f 0305 	mvn.w	r3, #5
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	3718      	adds	r7, #24
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}
 8010b62:	bf00      	nop
 8010b64:	ffff8000 	.word	0xffff8000

08010b68 <mdns_add_a_answer>:

#if LWIP_IPV4
/** Write an IPv4 address (A) RR to outpacket */
static err_t
mdns_add_a_answer(struct mdns_outpacket *reply, u16_t cache_flush, struct netif *netif)
{
 8010b68:	b590      	push	{r4, r7, lr}
 8010b6a:	b0cd      	sub	sp, #308	@ 0x134
 8010b6c:	af06      	add	r7, sp, #24
 8010b6e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010b72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010b76:	6018      	str	r0, [r3, #0]
 8010b78:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010b7c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8010b80:	601a      	str	r2, [r3, #0]
 8010b82:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010b86:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8010b8a:	460a      	mov	r2, r1
 8010b8c:	801a      	strh	r2, [r3, #0]
  struct mdns_domain host;
  mdns_build_host_domain(&host, NETIF_TO_HOST(netif));
 8010b8e:	4b22      	ldr	r3, [pc, #136]	@ (8010c18 <mdns_add_a_answer+0xb0>)
 8010b90:	781b      	ldrb	r3, [r3, #0]
 8010b92:	4619      	mov	r1, r3
 8010b94:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010b98:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8010b9c:	681a      	ldr	r2, [r3, #0]
 8010b9e:	f101 0308 	add.w	r3, r1, #8
 8010ba2:	009b      	lsls	r3, r3, #2
 8010ba4:	4413      	add	r3, r2
 8010ba6:	685a      	ldr	r2, [r3, #4]
 8010ba8:	f107 0314 	add.w	r3, r7, #20
 8010bac:	4611      	mov	r1, r2
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7ff f8ec 	bl	800fd8c <mdns_build_host_domain>
  LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Responding with A record\n"));
  return mdns_add_answer(reply, &host, DNS_RRTYPE_A, DNS_RRCLASS_IN, cache_flush, (NETIF_TO_HOST(netif))->dns_ttl, (const u8_t *) netif_ip4_addr(netif), sizeof(ip4_addr_t), NULL);
 8010bb4:	4b18      	ldr	r3, [pc, #96]	@ (8010c18 <mdns_add_a_answer+0xb0>)
 8010bb6:	781b      	ldrb	r3, [r3, #0]
 8010bb8:	4619      	mov	r1, r3
 8010bba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010bbe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8010bc2:	681a      	ldr	r2, [r3, #0]
 8010bc4:	f101 0308 	add.w	r3, r1, #8
 8010bc8:	009b      	lsls	r3, r3, #2
 8010bca:	4413      	add	r3, r2
 8010bcc:	685b      	ldr	r3, [r3, #4]
 8010bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010bd0:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8010bd4:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8010bd8:	6812      	ldr	r2, [r2, #0]
 8010bda:	3204      	adds	r2, #4
 8010bdc:	f107 0114 	add.w	r1, r7, #20
 8010be0:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8010be4:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8010be8:	2400      	movs	r4, #0
 8010bea:	9404      	str	r4, [sp, #16]
 8010bec:	2404      	movs	r4, #4
 8010bee:	9403      	str	r4, [sp, #12]
 8010bf0:	9202      	str	r2, [sp, #8]
 8010bf2:	9301      	str	r3, [sp, #4]
 8010bf4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010bf8:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8010bfc:	881b      	ldrh	r3, [r3, #0]
 8010bfe:	9300      	str	r3, [sp, #0]
 8010c00:	2301      	movs	r3, #1
 8010c02:	2201      	movs	r2, #1
 8010c04:	6800      	ldr	r0, [r0, #0]
 8010c06:	f7ff fda5 	bl	8010754 <mdns_add_answer>
 8010c0a:	4603      	mov	r3, r0
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bd90      	pop	{r4, r7, pc}
 8010c16:	bf00      	nop
 8010c18:	20004ba8 	.word	0x20004ba8

08010c1c <mdns_add_hostv4_ptr_answer>:

/** Write a 4.3.2.1.in-addr.arpa -> hostname.local PTR RR to outpacket */
static err_t
mdns_add_hostv4_ptr_answer(struct mdns_outpacket *reply, u16_t cache_flush, struct netif *netif)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8010c22:	af06      	add	r7, sp, #24
 8010c24:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8010c28:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8010c2c:	6018      	str	r0, [r3, #0]
 8010c2e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8010c32:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8010c36:	601a      	str	r2, [r3, #0]
 8010c38:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8010c3c:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 8010c40:	460a      	mov	r2, r1
 8010c42:	801a      	strh	r2, [r3, #0]
  struct mdns_domain host, revhost;
  mdns_build_host_domain(&host, NETIF_TO_HOST(netif));
 8010c44:	4b25      	ldr	r3, [pc, #148]	@ (8010cdc <mdns_add_hostv4_ptr_answer+0xc0>)
 8010c46:	781b      	ldrb	r3, [r3, #0]
 8010c48:	4619      	mov	r1, r3
 8010c4a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8010c4e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8010c52:	681a      	ldr	r2, [r3, #0]
 8010c54:	f101 0308 	add.w	r3, r1, #8
 8010c58:	009b      	lsls	r3, r3, #2
 8010c5a:	4413      	add	r3, r2
 8010c5c:	685a      	ldr	r2, [r3, #4]
 8010c5e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8010c62:	4611      	mov	r1, r2
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7ff f891 	bl	800fd8c <mdns_build_host_domain>
  mdns_build_reverse_v4_domain(&revhost, netif_ip4_addr(netif));
 8010c6a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8010c6e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	1d1a      	adds	r2, r3, #4
 8010c76:	f107 0310 	add.w	r3, r7, #16
 8010c7a:	4611      	mov	r1, r2
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	f7fe ffc3 	bl	800fc08 <mdns_build_reverse_v4_domain>
  LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Responding with v4 PTR record\n"));
  return mdns_add_answer(reply, &revhost, DNS_RRTYPE_PTR, DNS_RRCLASS_IN, cache_flush, (NETIF_TO_HOST(netif))->dns_ttl, NULL, 0, &host);
 8010c82:	4b16      	ldr	r3, [pc, #88]	@ (8010cdc <mdns_add_hostv4_ptr_answer+0xc0>)
 8010c84:	781b      	ldrb	r3, [r3, #0]
 8010c86:	4619      	mov	r1, r3
 8010c88:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8010c8c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8010c90:	681a      	ldr	r2, [r3, #0]
 8010c92:	f101 0308 	add.w	r3, r1, #8
 8010c96:	009b      	lsls	r3, r3, #2
 8010c98:	4413      	add	r3, r2
 8010c9a:	685b      	ldr	r3, [r3, #4]
 8010c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c9e:	f107 0110 	add.w	r1, r7, #16
 8010ca2:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 8010ca6:	f5a2 7003 	sub.w	r0, r2, #524	@ 0x20c
 8010caa:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8010cae:	9204      	str	r2, [sp, #16]
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	9203      	str	r2, [sp, #12]
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	9202      	str	r2, [sp, #8]
 8010cb8:	9301      	str	r3, [sp, #4]
 8010cba:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8010cbe:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 8010cc2:	881b      	ldrh	r3, [r3, #0]
 8010cc4:	9300      	str	r3, [sp, #0]
 8010cc6:	2301      	movs	r3, #1
 8010cc8:	220c      	movs	r2, #12
 8010cca:	6800      	ldr	r0, [r0, #0]
 8010ccc:	f7ff fd42 	bl	8010754 <mdns_add_answer>
 8010cd0:	4603      	mov	r3, r0
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}
 8010cdc:	20004ba8 	.word	0x20004ba8

08010ce0 <mdns_add_servicetype_ptr_answer>:
#endif

/** Write an all-services -> servicetype PTR RR to outpacket */
static err_t
mdns_add_servicetype_ptr_answer(struct mdns_outpacket *reply, struct mdns_service *service)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8010ce6:	af06      	add	r7, sp, #24
 8010ce8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8010cec:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8010cf0:	6018      	str	r0, [r3, #0]
 8010cf2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8010cf6:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8010cfa:	6019      	str	r1, [r3, #0]
  struct mdns_domain service_type, service_dnssd;
  mdns_build_service_domain(&service_type, service, 0);
 8010cfc:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8010d00:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8010d04:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8010d08:	2200      	movs	r2, #0
 8010d0a:	6819      	ldr	r1, [r3, #0]
 8010d0c:	f7ff f8e8 	bl	800fee0 <mdns_build_service_domain>
  mdns_build_dnssd_domain(&service_dnssd);
 8010d10:	f107 0308 	add.w	r3, r7, #8
 8010d14:	4618      	mov	r0, r3
 8010d16:	f7ff f87d 	bl	800fe14 <mdns_build_dnssd_domain>
  LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Responding with service type PTR record\n"));
  return mdns_add_answer(reply, &service_dnssd, DNS_RRTYPE_PTR, DNS_RRCLASS_IN, 0, service->dns_ttl, NULL, 0, &service_type);
 8010d1a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8010d1e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8010d28:	f107 0108 	add.w	r1, r7, #8
 8010d2c:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8010d30:	f5a2 7003 	sub.w	r0, r2, #524	@ 0x20c
 8010d34:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8010d38:	9204      	str	r2, [sp, #16]
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	9203      	str	r2, [sp, #12]
 8010d3e:	2200      	movs	r2, #0
 8010d40:	9202      	str	r2, [sp, #8]
 8010d42:	9301      	str	r3, [sp, #4]
 8010d44:	2300      	movs	r3, #0
 8010d46:	9300      	str	r3, [sp, #0]
 8010d48:	2301      	movs	r3, #1
 8010d4a:	220c      	movs	r2, #12
 8010d4c:	6800      	ldr	r0, [r0, #0]
 8010d4e:	f7ff fd01 	bl	8010754 <mdns_add_answer>
 8010d52:	4603      	mov	r3, r0
}
 8010d54:	4618      	mov	r0, r3
 8010d56:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}

08010d5e <mdns_add_servicename_ptr_answer>:

/** Write a servicetype -> servicename PTR RR to outpacket */
static err_t
mdns_add_servicename_ptr_answer(struct mdns_outpacket *reply, struct mdns_service *service)
{
 8010d5e:	b580      	push	{r7, lr}
 8010d60:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 8010d64:	af06      	add	r7, sp, #24
 8010d66:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8010d6a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8010d6e:	6018      	str	r0, [r3, #0]
 8010d70:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8010d74:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8010d78:	6019      	str	r1, [r3, #0]
  struct mdns_domain service_type, service_instance;
  mdns_build_service_domain(&service_type, service, 0);
 8010d7a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8010d7e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8010d82:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8010d86:	2200      	movs	r2, #0
 8010d88:	6819      	ldr	r1, [r3, #0]
 8010d8a:	f7ff f8a9 	bl	800fee0 <mdns_build_service_domain>
  mdns_build_service_domain(&service_instance, service, 1);
 8010d8e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8010d92:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8010d96:	f107 0008 	add.w	r0, r7, #8
 8010d9a:	2201      	movs	r2, #1
 8010d9c:	6819      	ldr	r1, [r3, #0]
 8010d9e:	f7ff f89f 	bl	800fee0 <mdns_build_service_domain>
  LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Responding with service name PTR record\n"));
  return mdns_add_answer(reply, &service_type, DNS_RRTYPE_PTR, DNS_RRCLASS_IN, 0, service->dns_ttl, NULL, 0, &service_instance);
 8010da2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8010da6:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8010db0:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8010db4:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8010db8:	f5a2 7003 	sub.w	r0, r2, #524	@ 0x20c
 8010dbc:	f107 0208 	add.w	r2, r7, #8
 8010dc0:	9204      	str	r2, [sp, #16]
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	9203      	str	r2, [sp, #12]
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	9202      	str	r2, [sp, #8]
 8010dca:	9301      	str	r3, [sp, #4]
 8010dcc:	2300      	movs	r3, #0
 8010dce:	9300      	str	r3, [sp, #0]
 8010dd0:	2301      	movs	r3, #1
 8010dd2:	220c      	movs	r2, #12
 8010dd4:	6800      	ldr	r0, [r0, #0]
 8010dd6:	f7ff fcbd 	bl	8010754 <mdns_add_answer>
 8010dda:	4603      	mov	r3, r0
}
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8010de2:	46bd      	mov	sp, r7
 8010de4:	bd80      	pop	{r7, pc}

08010de6 <mdns_add_srv_answer>:

/** Write a SRV RR to outpacket */
static err_t
mdns_add_srv_answer(struct mdns_outpacket *reply, u16_t cache_flush, struct mdns_host *mdns, struct mdns_service *service)
{
 8010de6:	b590      	push	{r4, r7, lr}
 8010de8:	f5ad 7d0f 	sub.w	sp, sp, #572	@ 0x23c
 8010dec:	af06      	add	r7, sp, #24
 8010dee:	f507 7408 	add.w	r4, r7, #544	@ 0x220
 8010df2:	f5a4 7405 	sub.w	r4, r4, #532	@ 0x214
 8010df6:	6020      	str	r0, [r4, #0]
 8010df8:	4608      	mov	r0, r1
 8010dfa:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 8010dfe:	f5a1 7107 	sub.w	r1, r1, #540	@ 0x21c
 8010e02:	600a      	str	r2, [r1, #0]
 8010e04:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8010e08:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8010e0c:	6013      	str	r3, [r2, #0]
 8010e0e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010e12:	f2a3 2316 	subw	r3, r3, #534	@ 0x216
 8010e16:	4602      	mov	r2, r0
 8010e18:	801a      	strh	r2, [r3, #0]
  struct mdns_domain service_instance, srvhost;
  u16_t srvdata[3];
  mdns_build_service_domain(&service_instance, service, 1);
 8010e1a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010e1e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8010e22:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 8010e26:	2201      	movs	r2, #1
 8010e28:	6819      	ldr	r1, [r3, #0]
 8010e2a:	f7ff f859 	bl	800fee0 <mdns_build_service_domain>
  mdns_build_host_domain(&srvhost, mdns);
 8010e2e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010e32:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8010e36:	f107 0218 	add.w	r2, r7, #24
 8010e3a:	6819      	ldr	r1, [r3, #0]
 8010e3c:	4610      	mov	r0, r2
 8010e3e:	f7fe ffa5 	bl	800fd8c <mdns_build_host_domain>
  if (reply->legacy_query) {
 8010e42:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010e46:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d006      	beq.n	8010e62 <mdns_add_srv_answer+0x7c>
    /* RFC 6762 section 18.14:
     * In legacy unicast responses generated to answer legacy queries,
     * name compression MUST NOT be performed on SRV records.
     */
    srvhost.skip_compression = 1;
 8010e54:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010e58:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8010e5c:	2201      	movs	r2, #1
 8010e5e:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
  }
  srvdata[0] = lwip_htons(SRV_PRIORITY);
 8010e62:	2000      	movs	r0, #0
 8010e64:	f001 fbca 	bl	80125fc <lwip_htons>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	461a      	mov	r2, r3
 8010e6c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010e70:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8010e74:	801a      	strh	r2, [r3, #0]
  srvdata[1] = lwip_htons(SRV_WEIGHT);
 8010e76:	2000      	movs	r0, #0
 8010e78:	f001 fbc0 	bl	80125fc <lwip_htons>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	461a      	mov	r2, r3
 8010e80:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010e84:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8010e88:	805a      	strh	r2, [r3, #2]
  srvdata[2] = lwip_htons(service->port);
 8010e8a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010e8e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f001 fbaf 	bl	80125fc <lwip_htons>
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	461a      	mov	r2, r3
 8010ea2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010ea6:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8010eaa:	809a      	strh	r2, [r3, #4]
  LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Responding with SRV record\n"));
  return mdns_add_answer(reply, &service_instance, DNS_RRTYPE_SRV, DNS_RRCLASS_IN, cache_flush, service->dns_ttl,
 8010eac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010eb0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8010eba:	f507 718e 	add.w	r1, r7, #284	@ 0x11c
 8010ebe:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8010ec2:	f5a2 7005 	sub.w	r0, r2, #532	@ 0x214
 8010ec6:	f107 0218 	add.w	r2, r7, #24
 8010eca:	9204      	str	r2, [sp, #16]
 8010ecc:	2206      	movs	r2, #6
 8010ece:	9203      	str	r2, [sp, #12]
 8010ed0:	f107 0210 	add.w	r2, r7, #16
 8010ed4:	9202      	str	r2, [sp, #8]
 8010ed6:	9301      	str	r3, [sp, #4]
 8010ed8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8010edc:	f2a3 2316 	subw	r3, r3, #534	@ 0x216
 8010ee0:	881b      	ldrh	r3, [r3, #0]
 8010ee2:	9300      	str	r3, [sp, #0]
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	2221      	movs	r2, #33	@ 0x21
 8010ee8:	6800      	ldr	r0, [r0, #0]
 8010eea:	f7ff fc33 	bl	8010754 <mdns_add_answer>
 8010eee:	4603      	mov	r3, r0
                         (const u8_t *) &srvdata, sizeof(srvdata), &srvhost);
}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f507 7709 	add.w	r7, r7, #548	@ 0x224
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bd90      	pop	{r4, r7, pc}

08010efa <mdns_add_txt_answer>:

/** Write a TXT RR to outpacket */
static err_t
mdns_add_txt_answer(struct mdns_outpacket *reply, u16_t cache_flush, struct mdns_service *service)
{
 8010efa:	b5b0      	push	{r4, r5, r7, lr}
 8010efc:	b0cc      	sub	sp, #304	@ 0x130
 8010efe:	af06      	add	r7, sp, #24
 8010f00:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010f04:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8010f08:	6018      	str	r0, [r3, #0]
 8010f0a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010f0e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8010f12:	601a      	str	r2, [r3, #0]
 8010f14:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010f18:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8010f1c:	460a      	mov	r2, r1
 8010f1e:	801a      	strh	r2, [r3, #0]
  struct mdns_domain service_instance;
  mdns_build_service_domain(&service_instance, service, 1);
 8010f20:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010f24:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8010f28:	f107 0014 	add.w	r0, r7, #20
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	6819      	ldr	r1, [r3, #0]
 8010f30:	f7fe ffd6 	bl	800fee0 <mdns_build_service_domain>
  mdns_prepare_txtdata(service);
 8010f34:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010f38:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8010f3c:	6818      	ldr	r0, [r3, #0]
 8010f3e:	f7fe fe45 	bl	800fbcc <mdns_prepare_txtdata>
  LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Responding with TXT record\n"));
  return mdns_add_answer(reply, &service_instance, DNS_RRTYPE_TXT, DNS_RRCLASS_IN, cache_flush, service->dns_ttl,
 8010f42:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010f46:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
                         (u8_t *) &service->txtdata.name, service->txtdata.length, NULL);
 8010f50:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8010f54:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8010f58:	6812      	ldr	r2, [r2, #0]
 8010f5a:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8010f5e:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8010f62:	6809      	ldr	r1, [r1, #0]
 8010f64:	f8b1 1100 	ldrh.w	r1, [r1, #256]	@ 0x100
  return mdns_add_answer(reply, &service_instance, DNS_RRTYPE_TXT, DNS_RRCLASS_IN, cache_flush, service->dns_ttl,
 8010f68:	460d      	mov	r5, r1
 8010f6a:	f107 0114 	add.w	r1, r7, #20
 8010f6e:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8010f72:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 8010f76:	2400      	movs	r4, #0
 8010f78:	9404      	str	r4, [sp, #16]
 8010f7a:	9503      	str	r5, [sp, #12]
 8010f7c:	9202      	str	r2, [sp, #8]
 8010f7e:	9301      	str	r3, [sp, #4]
 8010f80:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010f84:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 8010f88:	881b      	ldrh	r3, [r3, #0]
 8010f8a:	9300      	str	r3, [sp, #0]
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	2210      	movs	r2, #16
 8010f90:	6800      	ldr	r0, [r0, #0]
 8010f92:	f7ff fbdf 	bl	8010754 <mdns_add_answer>
 8010f96:	4603      	mov	r3, r0
}
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bdb0      	pop	{r4, r5, r7, pc}

08010fa2 <mdns_init_outpacket>:
/**
 * Setup outpacket as a reply to the incoming packet
 */
static void
mdns_init_outpacket(struct mdns_outpacket *out, struct mdns_packet *in)
{
 8010fa2:	b580      	push	{r7, lr}
 8010fa4:	b082      	sub	sp, #8
 8010fa6:	af00      	add	r7, sp, #0
 8010fa8:	6078      	str	r0, [r7, #4]
 8010faa:	6039      	str	r1, [r7, #0]
  memset(out, 0, sizeof(struct mdns_outpacket));
 8010fac:	2234      	movs	r2, #52	@ 0x34
 8010fae:	2100      	movs	r1, #0
 8010fb0:	6878      	ldr	r0, [r7, #4]
 8010fb2:	f010 fbcf 	bl	8021754 <memset>
  out->cache_flush = 1;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	2201      	movs	r2, #1
 8010fba:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  out->netif = in->netif;
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	689a      	ldr	r2, [r3, #8]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	601a      	str	r2, [r3, #0]

  /* Copy source IP/port to use when responding unicast, or to choose
   * which pcb to use for multicast (IPv4/IPv6)
   */
  SMEMCPY(&out->dest_addr, &in->source_addr, sizeof(ip_addr_t));
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	330c      	adds	r3, #12
 8010fca:	683a      	ldr	r2, [r7, #0]
 8010fcc:	6812      	ldr	r2, [r2, #0]
 8010fce:	601a      	str	r2, [r3, #0]
  out->dest_port = in->source_port;
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	889a      	ldrh	r2, [r3, #4]
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	821a      	strh	r2, [r3, #16]

  if (in->source_port != LWIP_IANA_PORT_MDNS) {
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	889b      	ldrh	r3, [r3, #4]
 8010fdc:	f241 42e9 	movw	r2, #5353	@ 0x14e9
 8010fe0:	4293      	cmp	r3, r2
 8010fe2:	d013      	beq.n	801100c <mdns_init_outpacket+0x6a>
    out->unicast_reply = 1;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	2201      	movs	r2, #1
 8010fe8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
    out->cache_flush = 0;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2200      	movs	r2, #0
 8010ff0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
    if (in->questions == 1) {
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	8a9b      	ldrh	r3, [r3, #20]
 8010ff8:	2b01      	cmp	r3, #1
 8010ffa:	d107      	bne.n	801100c <mdns_init_outpacket+0x6a>
      out->legacy_query = 1;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2201      	movs	r2, #1
 8011000:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      out->tx_id = in->tx_id;
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	8a5a      	ldrh	r2, [r3, #18]
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	815a      	strh	r2, [r3, #10]
    }
  }

  if (in->recv_unicast) {
 801100c:	683b      	ldr	r3, [r7, #0]
 801100e:	88db      	ldrh	r3, [r3, #6]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d003      	beq.n	801101c <mdns_init_outpacket+0x7a>
    out->unicast_reply = 1;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2201      	movs	r2, #1
 8011018:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  }
}
 801101c:	bf00      	nop
 801101e:	3708      	adds	r7, #8
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}

08011024 <mdns_send_outpacket>:
 * Add additional answers based on the selected answers
 * Send the packet
 */
static err_t
mdns_send_outpacket(struct mdns_outpacket *outpkt, u8_t flags)
{
 8011024:	b590      	push	{r4, r7, lr}
 8011026:	b08f      	sub	sp, #60	@ 0x3c
 8011028:	af02      	add	r7, sp, #8
 801102a:	6078      	str	r0, [r7, #4]
 801102c:	460b      	mov	r3, r1
 801102e:	70fb      	strb	r3, [r7, #3]
  struct mdns_service *service;
  err_t res = ERR_ARG;
 8011030:	23f0      	movs	r3, #240	@ 0xf0
 8011032:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  int i;
  struct mdns_host *mdns = NETIF_TO_HOST(outpkt->netif);
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681a      	ldr	r2, [r3, #0]
 801103a:	4b69      	ldr	r3, [pc, #420]	@ (80111e0 <mdns_send_outpacket+0x1bc>)
 801103c:	781b      	ldrb	r3, [r3, #0]
 801103e:	3308      	adds	r3, #8
 8011040:	009b      	lsls	r3, r3, #2
 8011042:	4413      	add	r3, r2
 8011044:	685b      	ldr	r3, [r3, #4]
 8011046:	623b      	str	r3, [r7, #32]
  u16_t answers = 0;
 8011048:	2300      	movs	r3, #0
 801104a:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /* Write answers to host questions */
#if LWIP_IPV4
  if (outpkt->host_replies & REPLY_HOST_A) {
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011052:	f003 0301 	and.w	r3, r3, #1
 8011056:	2b00      	cmp	r3, #0
 8011058:	d014      	beq.n	8011084 <mdns_send_outpacket+0x60>
    res = mdns_add_a_answer(outpkt, outpkt->cache_flush, outpkt->netif);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8011060:	4619      	mov	r1, r3
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	461a      	mov	r2, r3
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f7ff fd7d 	bl	8010b68 <mdns_add_a_answer>
 801106e:	4603      	mov	r3, r0
 8011070:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (res != ERR_OK) {
 8011074:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011078:	2b00      	cmp	r3, #0
 801107a:	f040 81ab 	bne.w	80113d4 <mdns_send_outpacket+0x3b0>
      goto cleanup;
    }
    answers++;
 801107e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011080:	3301      	adds	r3, #1
 8011082:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }
  if (outpkt->host_replies & REPLY_HOST_PTR_V4) {
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801108a:	f003 0302 	and.w	r3, r3, #2
 801108e:	2b00      	cmp	r3, #0
 8011090:	d014      	beq.n	80110bc <mdns_send_outpacket+0x98>
    res = mdns_add_hostv4_ptr_answer(outpkt, outpkt->cache_flush, outpkt->netif);
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8011098:	4619      	mov	r1, r3
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	461a      	mov	r2, r3
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f7ff fdbb 	bl	8010c1c <mdns_add_hostv4_ptr_answer>
 80110a6:	4603      	mov	r3, r0
 80110a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (res != ERR_OK) {
 80110ac:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	f040 8191 	bne.w	80113d8 <mdns_send_outpacket+0x3b4>
      goto cleanup;
    }
    answers++;
 80110b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80110b8:	3301      	adds	r3, #1
 80110ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }
  }
#endif

  /* Write answers to service questions */
  for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 80110bc:	2300      	movs	r3, #0
 80110be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80110c0:	e075      	b.n	80111ae <mdns_send_outpacket+0x18a>
    service = mdns->services[i];
 80110c2:	6a3b      	ldr	r3, [r7, #32]
 80110c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80110c6:	3210      	adds	r2, #16
 80110c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110cc:	61bb      	str	r3, [r7, #24]
    if (!service) {
 80110ce:	69bb      	ldr	r3, [r7, #24]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d068      	beq.n	80111a6 <mdns_send_outpacket+0x182>
      continue;
    }

    if (outpkt->serv_replies[i] & REPLY_SERVICE_TYPE_PTR) {
 80110d4:	687a      	ldr	r2, [r7, #4]
 80110d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110d8:	4413      	add	r3, r2
 80110da:	3333      	adds	r3, #51	@ 0x33
 80110dc:	781b      	ldrb	r3, [r3, #0]
 80110de:	f003 0310 	and.w	r3, r3, #16
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d00e      	beq.n	8011104 <mdns_send_outpacket+0xe0>
      res = mdns_add_servicetype_ptr_answer(outpkt, service);
 80110e6:	69b9      	ldr	r1, [r7, #24]
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f7ff fdf9 	bl	8010ce0 <mdns_add_servicetype_ptr_answer>
 80110ee:	4603      	mov	r3, r0
 80110f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      if (res != ERR_OK) {
 80110f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	f040 816f 	bne.w	80113dc <mdns_send_outpacket+0x3b8>
        goto cleanup;
      }
      answers++;
 80110fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011100:	3301      	adds	r3, #1
 8011102:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    if (outpkt->serv_replies[i] & REPLY_SERVICE_NAME_PTR) {
 8011104:	687a      	ldr	r2, [r7, #4]
 8011106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011108:	4413      	add	r3, r2
 801110a:	3333      	adds	r3, #51	@ 0x33
 801110c:	781b      	ldrb	r3, [r3, #0]
 801110e:	f003 0320 	and.w	r3, r3, #32
 8011112:	2b00      	cmp	r3, #0
 8011114:	d00e      	beq.n	8011134 <mdns_send_outpacket+0x110>
      res = mdns_add_servicename_ptr_answer(outpkt, service);
 8011116:	69b9      	ldr	r1, [r7, #24]
 8011118:	6878      	ldr	r0, [r7, #4]
 801111a:	f7ff fe20 	bl	8010d5e <mdns_add_servicename_ptr_answer>
 801111e:	4603      	mov	r3, r0
 8011120:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      if (res != ERR_OK) {
 8011124:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011128:	2b00      	cmp	r3, #0
 801112a:	f040 8159 	bne.w	80113e0 <mdns_send_outpacket+0x3bc>
        goto cleanup;
      }
      answers++;
 801112e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011130:	3301      	adds	r3, #1
 8011132:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    if (outpkt->serv_replies[i] & REPLY_SERVICE_SRV) {
 8011134:	687a      	ldr	r2, [r7, #4]
 8011136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011138:	4413      	add	r3, r2
 801113a:	3333      	adds	r3, #51	@ 0x33
 801113c:	781b      	ldrb	r3, [r3, #0]
 801113e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011142:	2b00      	cmp	r3, #0
 8011144:	d013      	beq.n	801116e <mdns_send_outpacket+0x14a>
      res = mdns_add_srv_answer(outpkt, outpkt->cache_flush, mdns, service);
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801114c:	4619      	mov	r1, r3
 801114e:	69bb      	ldr	r3, [r7, #24]
 8011150:	6a3a      	ldr	r2, [r7, #32]
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	f7ff fe47 	bl	8010de6 <mdns_add_srv_answer>
 8011158:	4603      	mov	r3, r0
 801115a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      if (res != ERR_OK) {
 801115e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011162:	2b00      	cmp	r3, #0
 8011164:	f040 813e 	bne.w	80113e4 <mdns_send_outpacket+0x3c0>
        goto cleanup;
      }
      answers++;
 8011168:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801116a:	3301      	adds	r3, #1
 801116c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    if (outpkt->serv_replies[i] & REPLY_SERVICE_TXT) {
 801116e:	687a      	ldr	r2, [r7, #4]
 8011170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011172:	4413      	add	r3, r2
 8011174:	3333      	adds	r3, #51	@ 0x33
 8011176:	781b      	ldrb	r3, [r3, #0]
 8011178:	b25b      	sxtb	r3, r3
 801117a:	2b00      	cmp	r3, #0
 801117c:	da14      	bge.n	80111a8 <mdns_send_outpacket+0x184>
      res = mdns_add_txt_answer(outpkt, outpkt->cache_flush, service);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8011184:	69ba      	ldr	r2, [r7, #24]
 8011186:	4619      	mov	r1, r3
 8011188:	6878      	ldr	r0, [r7, #4]
 801118a:	f7ff feb6 	bl	8010efa <mdns_add_txt_answer>
 801118e:	4603      	mov	r3, r0
 8011190:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      if (res != ERR_OK) {
 8011194:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011198:	2b00      	cmp	r3, #0
 801119a:	f040 8125 	bne.w	80113e8 <mdns_send_outpacket+0x3c4>
        goto cleanup;
      }
      answers++;
 801119e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80111a0:	3301      	adds	r3, #1
 80111a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80111a4:	e000      	b.n	80111a8 <mdns_send_outpacket+0x184>
      continue;
 80111a6:	bf00      	nop
  for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 80111a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111aa:	3301      	adds	r3, #1
 80111ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80111ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	dd86      	ble.n	80110c2 <mdns_send_outpacket+0x9e>
    }
  }

  /* if this is a response, the data above is anwers, else this is a probe and the answers above goes into auth section */
  if (flags & DNS_FLAG1_RESPONSE) {
 80111b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	da07      	bge.n	80111cc <mdns_send_outpacket+0x1a8>
    outpkt->answers += answers;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	8a9a      	ldrh	r2, [r3, #20]
 80111c0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80111c2:	4413      	add	r3, r2
 80111c4:	b29a      	uxth	r2, r3
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	829a      	strh	r2, [r3, #20]
 80111ca:	e006      	b.n	80111da <mdns_send_outpacket+0x1b6>
  } else {
    outpkt->authoritative += answers;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	8ada      	ldrh	r2, [r3, #22]
 80111d0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80111d2:	4413      	add	r3, r2
 80111d4:	b29a      	uxth	r2, r3
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	82da      	strh	r2, [r3, #22]
  }

  /* All answers written, add additional RRs */
  for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 80111da:	2300      	movs	r3, #0
 80111dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80111de:	e08b      	b.n	80112f8 <mdns_send_outpacket+0x2d4>
 80111e0:	20004ba8 	.word	0x20004ba8
    service = mdns->services[i];
 80111e4:	6a3b      	ldr	r3, [r7, #32]
 80111e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80111e8:	3210      	adds	r2, #16
 80111ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111ee:	61bb      	str	r3, [r7, #24]
    if (!service) {
 80111f0:	69bb      	ldr	r3, [r7, #24]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d07c      	beq.n	80112f0 <mdns_send_outpacket+0x2cc>
      continue;
    }

    if (outpkt->serv_replies[i] & REPLY_SERVICE_NAME_PTR) {
 80111f6:	687a      	ldr	r2, [r7, #4]
 80111f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111fa:	4413      	add	r3, r2
 80111fc:	3333      	adds	r3, #51	@ 0x33
 80111fe:	781b      	ldrb	r3, [r3, #0]
 8011200:	f003 0320 	and.w	r3, r3, #32
 8011204:	2b00      	cmp	r3, #0
 8011206:	d03d      	beq.n	8011284 <mdns_send_outpacket+0x260>
      /* Our service instance requested, include SRV & TXT
       * if they are already not requested. */
      if (!(outpkt->serv_replies[i] & REPLY_SERVICE_SRV)) {
 8011208:	687a      	ldr	r2, [r7, #4]
 801120a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801120c:	4413      	add	r3, r2
 801120e:	3333      	adds	r3, #51	@ 0x33
 8011210:	781b      	ldrb	r3, [r3, #0]
 8011212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011216:	2b00      	cmp	r3, #0
 8011218:	d116      	bne.n	8011248 <mdns_send_outpacket+0x224>
        res = mdns_add_srv_answer(outpkt, outpkt->cache_flush, mdns, service);
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8011220:	4619      	mov	r1, r3
 8011222:	69bb      	ldr	r3, [r7, #24]
 8011224:	6a3a      	ldr	r2, [r7, #32]
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f7ff fddd 	bl	8010de6 <mdns_add_srv_answer>
 801122c:	4603      	mov	r3, r0
 801122e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (res != ERR_OK) {
 8011232:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011236:	2b00      	cmp	r3, #0
 8011238:	f040 80d8 	bne.w	80113ec <mdns_send_outpacket+0x3c8>
          goto cleanup;
        }
        outpkt->additional++;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	8b1b      	ldrh	r3, [r3, #24]
 8011240:	3301      	adds	r3, #1
 8011242:	b29a      	uxth	r2, r3
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	831a      	strh	r2, [r3, #24]
      }

      if (!(outpkt->serv_replies[i] & REPLY_SERVICE_TXT)) {
 8011248:	687a      	ldr	r2, [r7, #4]
 801124a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801124c:	4413      	add	r3, r2
 801124e:	3333      	adds	r3, #51	@ 0x33
 8011250:	781b      	ldrb	r3, [r3, #0]
 8011252:	b25b      	sxtb	r3, r3
 8011254:	2b00      	cmp	r3, #0
 8011256:	db15      	blt.n	8011284 <mdns_send_outpacket+0x260>
        res = mdns_add_txt_answer(outpkt, outpkt->cache_flush, service);
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801125e:	69ba      	ldr	r2, [r7, #24]
 8011260:	4619      	mov	r1, r3
 8011262:	6878      	ldr	r0, [r7, #4]
 8011264:	f7ff fe49 	bl	8010efa <mdns_add_txt_answer>
 8011268:	4603      	mov	r3, r0
 801126a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (res != ERR_OK) {
 801126e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011272:	2b00      	cmp	r3, #0
 8011274:	f040 80bc 	bne.w	80113f0 <mdns_send_outpacket+0x3cc>
          goto cleanup;
        }
        outpkt->additional++;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	8b1b      	ldrh	r3, [r3, #24]
 801127c:	3301      	adds	r3, #1
 801127e:	b29a      	uxth	r2, r3
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	831a      	strh	r2, [r3, #24]
    }

    /* If service instance, SRV, record or an IP address is requested,
     * supply all addresses for the host
     */
    if ((outpkt->serv_replies[i] & (REPLY_SERVICE_NAME_PTR | REPLY_SERVICE_SRV)) ||
 8011284:	687a      	ldr	r2, [r7, #4]
 8011286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011288:	4413      	add	r3, r2
 801128a:	3333      	adds	r3, #51	@ 0x33
 801128c:	781b      	ldrb	r3, [r3, #0]
 801128e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011292:	2b00      	cmp	r3, #0
 8011294:	d106      	bne.n	80112a4 <mdns_send_outpacket+0x280>
        (outpkt->host_replies & (REPLY_HOST_A | REPLY_HOST_AAAA))) {
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801129c:	f003 0305 	and.w	r3, r3, #5
    if ((outpkt->serv_replies[i] & (REPLY_SERVICE_NAME_PTR | REPLY_SERVICE_SRV)) ||
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d026      	beq.n	80112f2 <mdns_send_outpacket+0x2ce>
          }
        }
      }
#endif
#if LWIP_IPV4
      if (!(outpkt->host_replies & REPLY_HOST_A) &&
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80112aa:	f003 0301 	and.w	r3, r3, #1
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d11f      	bne.n	80112f2 <mdns_send_outpacket+0x2ce>
          !ip4_addr_isany_val(*netif_ip4_addr(outpkt->netif))) {
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	3304      	adds	r3, #4
 80112b8:	681b      	ldr	r3, [r3, #0]
      if (!(outpkt->host_replies & REPLY_HOST_A) &&
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d019      	beq.n	80112f2 <mdns_send_outpacket+0x2ce>
        res = mdns_add_a_answer(outpkt, outpkt->cache_flush, outpkt->netif);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80112c4:	4619      	mov	r1, r3
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	461a      	mov	r2, r3
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f7ff fc4b 	bl	8010b68 <mdns_add_a_answer>
 80112d2:	4603      	mov	r3, r0
 80112d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (res != ERR_OK) {
 80112d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80112dc:	2b00      	cmp	r3, #0
 80112de:	f040 8089 	bne.w	80113f4 <mdns_send_outpacket+0x3d0>
          goto cleanup;
        }
        outpkt->additional++;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	8b1b      	ldrh	r3, [r3, #24]
 80112e6:	3301      	adds	r3, #1
 80112e8:	b29a      	uxth	r2, r3
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	831a      	strh	r2, [r3, #24]
 80112ee:	e000      	b.n	80112f2 <mdns_send_outpacket+0x2ce>
      continue;
 80112f0:	bf00      	nop
  for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 80112f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112f4:	3301      	adds	r3, #1
 80112f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80112f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	f77f af72 	ble.w	80111e4 <mdns_send_outpacket+0x1c0>
      }
#endif
    }
  }

  if (outpkt->pbuf) {
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	685b      	ldr	r3, [r3, #4]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d077      	beq.n	80113f8 <mdns_send_outpacket+0x3d4>
    const ip_addr_t *mcast_destaddr;
    struct dns_hdr hdr;

    /* Write header */
    memset(&hdr, 0, sizeof(hdr));
 8011308:	f107 030c 	add.w	r3, r7, #12
 801130c:	220c      	movs	r2, #12
 801130e:	2100      	movs	r1, #0
 8011310:	4618      	mov	r0, r3
 8011312:	f010 fa1f 	bl	8021754 <memset>
    hdr.flags1 = flags;
 8011316:	78fb      	ldrb	r3, [r7, #3]
 8011318:	73bb      	strb	r3, [r7, #14]
    hdr.numquestions = lwip_htons(outpkt->questions);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	8a5b      	ldrh	r3, [r3, #18]
 801131e:	4618      	mov	r0, r3
 8011320:	f001 f96c 	bl	80125fc <lwip_htons>
 8011324:	4603      	mov	r3, r0
 8011326:	823b      	strh	r3, [r7, #16]
    hdr.numanswers = lwip_htons(outpkt->answers);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	8a9b      	ldrh	r3, [r3, #20]
 801132c:	4618      	mov	r0, r3
 801132e:	f001 f965 	bl	80125fc <lwip_htons>
 8011332:	4603      	mov	r3, r0
 8011334:	827b      	strh	r3, [r7, #18]
    hdr.numauthrr = lwip_htons(outpkt->authoritative);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	8adb      	ldrh	r3, [r3, #22]
 801133a:	4618      	mov	r0, r3
 801133c:	f001 f95e 	bl	80125fc <lwip_htons>
 8011340:	4603      	mov	r3, r0
 8011342:	82bb      	strh	r3, [r7, #20]
    hdr.numextrarr = lwip_htons(outpkt->additional);
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	8b1b      	ldrh	r3, [r3, #24]
 8011348:	4618      	mov	r0, r3
 801134a:	f001 f957 	bl	80125fc <lwip_htons>
 801134e:	4603      	mov	r3, r0
 8011350:	82fb      	strh	r3, [r7, #22]
    hdr.id = lwip_htons(outpkt->tx_id);
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	895b      	ldrh	r3, [r3, #10]
 8011356:	4618      	mov	r0, r3
 8011358:	f001 f950 	bl	80125fc <lwip_htons>
 801135c:	4603      	mov	r3, r0
 801135e:	81bb      	strh	r3, [r7, #12]
    pbuf_take(outpkt->pbuf, &hdr, sizeof(hdr));
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	685b      	ldr	r3, [r3, #4]
 8011364:	f107 010c 	add.w	r1, r7, #12
 8011368:	220c      	movs	r2, #12
 801136a:	4618      	mov	r0, r3
 801136c:	f003 f9b8 	bl	80146e0 <pbuf_take>

    /* Shrink packet */
    pbuf_realloc(outpkt->pbuf, outpkt->write_offset);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	685a      	ldr	r2, [r3, #4]
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	891b      	ldrh	r3, [r3, #8]
 8011378:	4619      	mov	r1, r3
 801137a:	4610      	mov	r0, r2
 801137c:	f002 fd76 	bl	8013e6c <pbuf_realloc>
#if LWIP_IPV6
      mcast_destaddr = &v6group;
#endif
    } else {
#if LWIP_IPV4
      mcast_destaddr = &v4group;
 8011380:	4b27      	ldr	r3, [pc, #156]	@ (8011420 <mdns_send_outpacket+0x3fc>)
 8011382:	61fb      	str	r3, [r7, #28]
#endif
    }
    /* Send created packet */
    LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Sending packet, len=%d, unicast=%d\n", outpkt->write_offset, outpkt->unicast_reply));
    if (outpkt->unicast_reply) {
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801138a:	2b00      	cmp	r3, #0
 801138c:	d012      	beq.n	80113b4 <mdns_send_outpacket+0x390>
      res = udp_sendto_if(mdns_pcb, outpkt->pbuf, &outpkt->dest_addr, outpkt->dest_port, outpkt->netif);
 801138e:	4b25      	ldr	r3, [pc, #148]	@ (8011424 <mdns_send_outpacket+0x400>)
 8011390:	6818      	ldr	r0, [r3, #0]
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	6859      	ldr	r1, [r3, #4]
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f103 020c 	add.w	r2, r3, #12
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	8a1c      	ldrh	r4, [r3, #16]
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	9300      	str	r3, [sp, #0]
 80113a6:	4623      	mov	r3, r4
 80113a8:	f009 ff22 	bl	801b1f0 <udp_sendto_if>
 80113ac:	4603      	mov	r3, r0
 80113ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80113b2:	e022      	b.n	80113fa <mdns_send_outpacket+0x3d6>
    } else {
      res = udp_sendto_if(mdns_pcb, outpkt->pbuf, mcast_destaddr, LWIP_IANA_PORT_MDNS, outpkt->netif);
 80113b4:	4b1b      	ldr	r3, [pc, #108]	@ (8011424 <mdns_send_outpacket+0x400>)
 80113b6:	6818      	ldr	r0, [r3, #0]
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6859      	ldr	r1, [r3, #4]
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	9300      	str	r3, [sp, #0]
 80113c2:	f241 43e9 	movw	r3, #5353	@ 0x14e9
 80113c6:	69fa      	ldr	r2, [r7, #28]
 80113c8:	f009 ff12 	bl	801b1f0 <udp_sendto_if>
 80113cc:	4603      	mov	r3, r0
 80113ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80113d2:	e012      	b.n	80113fa <mdns_send_outpacket+0x3d6>
      goto cleanup;
 80113d4:	bf00      	nop
 80113d6:	e010      	b.n	80113fa <mdns_send_outpacket+0x3d6>
      goto cleanup;
 80113d8:	bf00      	nop
 80113da:	e00e      	b.n	80113fa <mdns_send_outpacket+0x3d6>
        goto cleanup;
 80113dc:	bf00      	nop
 80113de:	e00c      	b.n	80113fa <mdns_send_outpacket+0x3d6>
        goto cleanup;
 80113e0:	bf00      	nop
 80113e2:	e00a      	b.n	80113fa <mdns_send_outpacket+0x3d6>
        goto cleanup;
 80113e4:	bf00      	nop
 80113e6:	e008      	b.n	80113fa <mdns_send_outpacket+0x3d6>
        goto cleanup;
 80113e8:	bf00      	nop
 80113ea:	e006      	b.n	80113fa <mdns_send_outpacket+0x3d6>
          goto cleanup;
 80113ec:	bf00      	nop
 80113ee:	e004      	b.n	80113fa <mdns_send_outpacket+0x3d6>
          goto cleanup;
 80113f0:	bf00      	nop
 80113f2:	e002      	b.n	80113fa <mdns_send_outpacket+0x3d6>
          goto cleanup;
 80113f4:	bf00      	nop
 80113f6:	e000      	b.n	80113fa <mdns_send_outpacket+0x3d6>
    }
  }

cleanup:
 80113f8:	bf00      	nop
  if (outpkt->pbuf) {
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	685b      	ldr	r3, [r3, #4]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d007      	beq.n	8011412 <mdns_send_outpacket+0x3ee>
    pbuf_free(outpkt->pbuf);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	685b      	ldr	r3, [r3, #4]
 8011406:	4618      	mov	r0, r3
 8011408:	f002 feb6 	bl	8014178 <pbuf_free>
    outpkt->pbuf = NULL;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	2200      	movs	r2, #0
 8011410:	605a      	str	r2, [r3, #4]
  }
  return res;
 8011412:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8011416:	4618      	mov	r0, r3
 8011418:	3734      	adds	r7, #52	@ 0x34
 801141a:	46bd      	mov	sp, r7
 801141c:	bd90      	pop	{r4, r7, pc}
 801141e:	bf00      	nop
 8011420:	08027688 	.word	0x08027688
 8011424:	20004bac 	.word	0x20004bac

08011428 <mdns_announce>:
 * @param netif The network interface to send on
 * @param destination The target address to send to (usually multicast address)
 */
static void
mdns_announce(struct netif *netif, const ip_addr_t *destination)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b092      	sub	sp, #72	@ 0x48
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
 8011430:	6039      	str	r1, [r7, #0]
  struct mdns_outpacket announce;
  int i;
  struct mdns_host *mdns = NETIF_TO_HOST(netif);
 8011432:	4b22      	ldr	r3, [pc, #136]	@ (80114bc <mdns_announce+0x94>)
 8011434:	781b      	ldrb	r3, [r3, #0]
 8011436:	687a      	ldr	r2, [r7, #4]
 8011438:	3308      	adds	r3, #8
 801143a:	009b      	lsls	r3, r3, #2
 801143c:	4413      	add	r3, r2
 801143e:	685b      	ldr	r3, [r3, #4]
 8011440:	643b      	str	r3, [r7, #64]	@ 0x40

  memset(&announce, 0, sizeof(announce));
 8011442:	f107 0308 	add.w	r3, r7, #8
 8011446:	2234      	movs	r2, #52	@ 0x34
 8011448:	2100      	movs	r1, #0
 801144a:	4618      	mov	r0, r3
 801144c:	f010 f982 	bl	8021754 <memset>
  announce.netif = netif;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	60bb      	str	r3, [r7, #8]
  announce.cache_flush = 1;
 8011454:	2301      	movs	r3, #1
 8011456:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
#if LWIP_IPV4
  if (!ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	3304      	adds	r3, #4
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d002      	beq.n	801146a <mdns_announce+0x42>
    announce.host_replies = REPLY_HOST_A | REPLY_HOST_PTR_V4;
 8011464:	2303      	movs	r3, #3
 8011466:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
      announce.host_reverse_v6_replies |= (1 << i);
    }
  }
#endif

  for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 801146a:	2300      	movs	r3, #0
 801146c:	647b      	str	r3, [r7, #68]	@ 0x44
 801146e:	e011      	b.n	8011494 <mdns_announce+0x6c>
    struct mdns_service *serv = mdns->services[i];
 8011470:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011472:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011474:	3210      	adds	r2, #16
 8011476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801147a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (serv) {
 801147c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801147e:	2b00      	cmp	r3, #0
 8011480:	d005      	beq.n	801148e <mdns_announce+0x66>
      announce.serv_replies[i] = REPLY_SERVICE_TYPE_PTR | REPLY_SERVICE_NAME_PTR |
 8011482:	f107 023b 	add.w	r2, r7, #59	@ 0x3b
 8011486:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011488:	4413      	add	r3, r2
 801148a:	22f0      	movs	r2, #240	@ 0xf0
 801148c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 801148e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011490:	3301      	adds	r3, #1
 8011492:	647b      	str	r3, [r7, #68]	@ 0x44
 8011494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011496:	2b00      	cmp	r3, #0
 8011498:	ddea      	ble.n	8011470 <mdns_announce+0x48>
                                 REPLY_SERVICE_SRV | REPLY_SERVICE_TXT;
    }
  }

  announce.dest_port = LWIP_IANA_PORT_MDNS;
 801149a:	f241 43e9 	movw	r3, #5353	@ 0x14e9
 801149e:	833b      	strh	r3, [r7, #24]
  SMEMCPY(&announce.dest_addr, destination, sizeof(announce.dest_addr));
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	617b      	str	r3, [r7, #20]
  mdns_send_outpacket(&announce, DNS_FLAG1_RESPONSE | DNS_FLAG1_AUTHORATIVE);
 80114a6:	f107 0308 	add.w	r3, r7, #8
 80114aa:	2184      	movs	r1, #132	@ 0x84
 80114ac:	4618      	mov	r0, r3
 80114ae:	f7ff fdb9 	bl	8011024 <mdns_send_outpacket>
}
 80114b2:	bf00      	nop
 80114b4:	3748      	adds	r7, #72	@ 0x48
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}
 80114ba:	bf00      	nop
 80114bc:	20004ba8 	.word	0x20004ba8

080114c0 <mdns_handle_question>:
 * 2. Clear pending answers if known answers are supplied
 * 3. Put chosen answers in new packet and send as reply
 */
static void
mdns_handle_question(struct mdns_packet *pkt)
{
 80114c0:	b590      	push	{r4, r7, lr}
 80114c2:	f5ad 7d63 	sub.w	sp, sp, #908	@ 0x38c
 80114c6:	af02      	add	r7, sp, #8
 80114c8:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80114cc:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 80114d0:	6018      	str	r0, [r3, #0]
  struct mdns_service *service;
  struct mdns_outpacket reply;
  int replies = 0;
 80114d2:	2300      	movs	r3, #0
 80114d4:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  int i;
  err_t res;
  struct mdns_host *mdns = NETIF_TO_HOST(pkt->netif);
 80114d8:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80114dc:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	689a      	ldr	r2, [r3, #8]
 80114e4:	4bd0      	ldr	r3, [pc, #832]	@ (8011828 <mdns_handle_question+0x368>)
 80114e6:	781b      	ldrb	r3, [r3, #0]
 80114e8:	3308      	adds	r3, #8
 80114ea:	009b      	lsls	r3, r3, #2
 80114ec:	4413      	add	r3, r2
 80114ee:	685b      	ldr	r3, [r3, #4]
 80114f0:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374

  if (mdns->probing_state != MDNS_PROBING_COMPLETE) {
 80114f4:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 80114f8:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80114fc:	2b02      	cmp	r3, #2
 80114fe:	f040 8378 	bne.w	8011bf2 <mdns_handle_question+0x732>
    /* Don't answer questions until we've verified our domains via probing */
    /* @todo we should check incoming questions during probing for tiebreaking */
    return;
  }

  mdns_init_outpacket(&reply, pkt);
 8011502:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8011506:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 801150a:	f507 724a 	add.w	r2, r7, #808	@ 0x328
 801150e:	6819      	ldr	r1, [r3, #0]
 8011510:	4610      	mov	r0, r2
 8011512:	f7ff fd46 	bl	8010fa2 <mdns_init_outpacket>

  while (pkt->questions_left) {
 8011516:	e0ab      	b.n	8011670 <mdns_handle_question+0x1b0>
    struct mdns_question q;

    res = mdns_read_question(pkt, &q);
 8011518:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 801151c:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8011520:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 8011524:	4611      	mov	r1, r2
 8011526:	6818      	ldr	r0, [r3, #0]
 8011528:	f7ff fa34 	bl	8010994 <mdns_read_question>
 801152c:	4603      	mov	r3, r0
 801152e:	f887 3373 	strb.w	r3, [r7, #883]	@ 0x373
    if (res != ERR_OK) {
 8011532:	f997 3373 	ldrsb.w	r3, [r7, #883]	@ 0x373
 8011536:	2b00      	cmp	r3, #0
 8011538:	f040 835d 	bne.w	8011bf6 <mdns_handle_question+0x736>
      LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Failed to parse question, skipping query packet\n"));
      return;
    }

    LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Query for domain "));
    mdns_domain_debug_print(&q.info.domain);
 801153c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011540:	4618      	mov	r0, r3
 8011542:	f7fe fabd 	bl	800fac0 <mdns_domain_debug_print>
    LWIP_DEBUGF(MDNS_DEBUG, (" type %d class %d\n", q.info.type, q.info.klass));

    if (q.unicast) {
 8011546:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 801154a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801154e:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8011552:	2b00      	cmp	r3, #0
 8011554:	d002      	beq.n	801155c <mdns_handle_question+0x9c>
      /* Reply unicast if any question is unicast */
      reply.unicast_reply = 1;
 8011556:	2301      	movs	r3, #1
 8011558:	f887 3357 	strb.w	r3, [r7, #855]	@ 0x357
    }

    reply.host_replies |= check_host(pkt->netif, &q.info, &reply.host_reverse_v6_replies);
 801155c:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8011560:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	6898      	ldr	r0, [r3, #8]
 8011568:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 801156c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8011570:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011574:	4619      	mov	r1, r3
 8011576:	f7fe fd3b 	bl	800fff0 <check_host>
 801157a:	4601      	mov	r1, r0
 801157c:	f897 3359 	ldrb.w	r3, [r7, #857]	@ 0x359
 8011580:	b25a      	sxtb	r2, r3
 8011582:	b24b      	sxtb	r3, r1
 8011584:	4313      	orrs	r3, r2
 8011586:	b25b      	sxtb	r3, r3
 8011588:	b2db      	uxtb	r3, r3
 801158a:	f887 3359 	strb.w	r3, [r7, #857]	@ 0x359
    replies |= reply.host_replies;
 801158e:	f897 3359 	ldrb.w	r3, [r7, #857]	@ 0x359
 8011592:	461a      	mov	r2, r3
 8011594:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8011598:	4313      	orrs	r3, r2
 801159a:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c

    for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 801159e:	2300      	movs	r3, #0
 80115a0:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 80115a4:	e039      	b.n	801161a <mdns_handle_question+0x15a>
      service = mdns->services[i];
 80115a6:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 80115aa:	f8d7 2378 	ldr.w	r2, [r7, #888]	@ 0x378
 80115ae:	3210      	adds	r2, #16
 80115b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115b4:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
      if (!service) {
 80115b8:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d026      	beq.n	801160e <mdns_handle_question+0x14e>
        continue;
      }
      reply.serv_replies[i] |= check_service(service, &q.info);
 80115c0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80115c4:	4619      	mov	r1, r3
 80115c6:	f8d7 0364 	ldr.w	r0, [r7, #868]	@ 0x364
 80115ca:	f7fe fdcf 	bl	801016c <check_service>
 80115ce:	4601      	mov	r1, r0
 80115d0:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 80115d4:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 80115d8:	4413      	add	r3, r2
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	b25a      	sxtb	r2, r3
 80115de:	b24b      	sxtb	r3, r1
 80115e0:	4313      	orrs	r3, r2
 80115e2:	b25b      	sxtb	r3, r3
 80115e4:	b2d9      	uxtb	r1, r3
 80115e6:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 80115ea:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 80115ee:	4413      	add	r3, r2
 80115f0:	460a      	mov	r2, r1
 80115f2:	701a      	strb	r2, [r3, #0]
      replies |= reply.serv_replies[i];
 80115f4:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 80115f8:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 80115fc:	4413      	add	r3, r2
 80115fe:	781b      	ldrb	r3, [r3, #0]
 8011600:	461a      	mov	r2, r3
 8011602:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8011606:	4313      	orrs	r3, r2
 8011608:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 801160c:	e000      	b.n	8011610 <mdns_handle_question+0x150>
        continue;
 801160e:	bf00      	nop
    for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 8011610:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8011614:	3301      	adds	r3, #1
 8011616:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 801161a:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 801161e:	2b00      	cmp	r3, #0
 8011620:	ddc1      	ble.n	80115a6 <mdns_handle_question+0xe6>
    }

    if (replies && reply.legacy_query) {
 8011622:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8011626:	2b00      	cmp	r3, #0
 8011628:	d022      	beq.n	8011670 <mdns_handle_question+0x1b0>
 801162a:	f897 3358 	ldrb.w	r3, [r7, #856]	@ 0x358
 801162e:	2b00      	cmp	r3, #0
 8011630:	d01e      	beq.n	8011670 <mdns_handle_question+0x1b0>
      /* Add question to reply packet (legacy packet only has 1 question) */
      res = mdns_add_question(&reply, &q.info.domain, q.info.type, q.info.klass, 0);
 8011632:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8011636:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801163a:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 801163e:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8011642:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8011646:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 801164a:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 801164e:	f507 704a 	add.w	r0, r7, #808	@ 0x328
 8011652:	2400      	movs	r4, #0
 8011654:	9400      	str	r4, [sp, #0]
 8011656:	f7fe fff1 	bl	801063c <mdns_add_question>
 801165a:	4603      	mov	r3, r0
 801165c:	f887 3373 	strb.w	r3, [r7, #883]	@ 0x373
      reply.questions = 1;
 8011660:	2301      	movs	r3, #1
 8011662:	f8a7 333a 	strh.w	r3, [r7, #826]	@ 0x33a
      if (res != ERR_OK) {
 8011666:	f997 3373 	ldrsb.w	r3, [r7, #883]	@ 0x373
 801166a:	2b00      	cmp	r3, #0
 801166c:	f040 82b1 	bne.w	8011bd2 <mdns_handle_question+0x712>
  while (pkt->questions_left) {
 8011670:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8011674:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	8adb      	ldrh	r3, [r3, #22]
 801167c:	2b00      	cmp	r3, #0
 801167e:	f47f af4b 	bne.w	8011518 <mdns_handle_question+0x58>
      }
    }
  }

  /* Handle known answers */
  while (pkt->answers_left) {
 8011682:	e296      	b.n	8011bb2 <mdns_handle_question+0x6f2>
    struct mdns_answer ans;
    u8_t rev_v6;
    int match;

    res = mdns_read_answer(pkt, &ans);
 8011684:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 8011688:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 801168c:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 8011690:	4611      	mov	r1, r2
 8011692:	6818      	ldr	r0, [r3, #0]
 8011694:	f7ff f9c8 	bl	8010a28 <mdns_read_answer>
 8011698:	4603      	mov	r3, r0
 801169a:	f887 3373 	strb.w	r3, [r7, #883]	@ 0x373
    if (res != ERR_OK) {
 801169e:	f997 3373 	ldrsb.w	r3, [r7, #883]	@ 0x373
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	f040 8297 	bne.w	8011bd6 <mdns_handle_question+0x716>
      LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Failed to parse answer, skipping query packet\n"));
      goto cleanup;
    }

    LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Known answer for domain "));
    mdns_domain_debug_print(&ans.info.domain);
 80116a8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80116ac:	4618      	mov	r0, r3
 80116ae:	f7fe fa07 	bl	800fac0 <mdns_domain_debug_print>
    LWIP_DEBUGF(MDNS_DEBUG, (" type %d class %d\n", ans.info.type, ans.info.klass));


    if (ans.info.type == DNS_RRTYPE_ANY || ans.info.klass == DNS_RRCLASS_ANY) {
 80116b2:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80116b6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80116ba:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 80116be:	2bff      	cmp	r3, #255	@ 0xff
 80116c0:	f000 8276 	beq.w	8011bb0 <mdns_handle_question+0x6f0>
 80116c4:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80116c8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80116cc:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 80116d0:	2bff      	cmp	r3, #255	@ 0xff
 80116d2:	f000 826d 	beq.w	8011bb0 <mdns_handle_question+0x6f0>
      /* Skip known answers for ANY type & class */
      continue;
    }

    rev_v6 = 0;
 80116d6:	2300      	movs	r3, #0
 80116d8:	f887 3327 	strb.w	r3, [r7, #807]	@ 0x327
    match = reply.host_replies & check_host(pkt->netif, &ans.info, &rev_v6);
 80116dc:	f897 3359 	ldrb.w	r3, [r7, #857]	@ 0x359
 80116e0:	461c      	mov	r4, r3
 80116e2:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80116e6:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	689b      	ldr	r3, [r3, #8]
 80116ee:	f207 3227 	addw	r2, r7, #807	@ 0x327
 80116f2:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 80116f6:	4618      	mov	r0, r3
 80116f8:	f7fe fc7a 	bl	800fff0 <check_host>
 80116fc:	4603      	mov	r3, r0
 80116fe:	4023      	ands	r3, r4
 8011700:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
    if (match && (ans.ttl > (mdns->dns_ttl / 2))) {
 8011704:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8011708:	2b00      	cmp	r3, #0
 801170a:	f000 8088 	beq.w	801181e <mdns_handle_question+0x35e>
 801170e:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8011712:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8011716:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 801171a:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 801171e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011720:	085b      	lsrs	r3, r3, #1
 8011722:	429a      	cmp	r2, r3
 8011724:	d97b      	bls.n	801181e <mdns_handle_question+0x35e>
      /* The RR in the known answer matches an RR we are planning to send,
       * and the TTL is less than half gone.
       * If the payload matches we should not send that answer.
       */
      if (ans.info.type == DNS_RRTYPE_PTR) {
 8011726:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 801172a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801172e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 8011732:	2b0c      	cmp	r3, #12
 8011734:	d140      	bne.n	80117b8 <mdns_handle_question+0x2f8>
        /* Read domain and compare */
        struct mdns_domain known_ans, my_ans;
        u16_t len;
        len = mdns_readname(pkt->pbuf, ans.rd_offset, &known_ans);
 8011736:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 801173a:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	68d8      	ldr	r0, [r3, #12]
 8011742:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8011746:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801174a:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 801174e:	f107 0208 	add.w	r2, r7, #8
 8011752:	4619      	mov	r1, r3
 8011754:	f7fe f99c 	bl	800fa90 <mdns_readname>
 8011758:	4603      	mov	r3, r0
 801175a:	f8a7 336a 	strh.w	r3, [r7, #874]	@ 0x36a
        res = mdns_build_host_domain(&my_ans, mdns);
 801175e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8011762:	f8d7 1374 	ldr.w	r1, [r7, #884]	@ 0x374
 8011766:	4618      	mov	r0, r3
 8011768:	f7fe fb10 	bl	800fd8c <mdns_build_host_domain>
 801176c:	4603      	mov	r3, r0
 801176e:	f887 3373 	strb.w	r3, [r7, #883]	@ 0x373
        if (len != MDNS_READNAME_ERROR && res == ERR_OK && mdns_domain_eq(&known_ans, &my_ans)) {
 8011772:	f8b7 336a 	ldrh.w	r3, [r7, #874]	@ 0x36a
 8011776:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801177a:	4293      	cmp	r3, r2
 801177c:	d04f      	beq.n	801181e <mdns_handle_question+0x35e>
 801177e:	f997 3373 	ldrsb.w	r3, [r7, #883]	@ 0x373
 8011782:	2b00      	cmp	r3, #0
 8011784:	d14b      	bne.n	801181e <mdns_handle_question+0x35e>
 8011786:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 801178a:	f107 0308 	add.w	r3, r7, #8
 801178e:	4611      	mov	r1, r2
 8011790:	4618      	mov	r0, r3
 8011792:	f7fe f9bb 	bl	800fb0c <mdns_domain_eq>
 8011796:	4603      	mov	r3, r0
 8011798:	2b00      	cmp	r3, #0
 801179a:	d040      	beq.n	801181e <mdns_handle_question+0x35e>
#if LWIP_IPV4
          if (match & REPLY_HOST_PTR_V4) {
 801179c:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80117a0:	f003 0302 	and.w	r3, r3, #2
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d03a      	beq.n	801181e <mdns_handle_question+0x35e>
            LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Skipping known answer: v4 PTR\n"));
            reply.host_replies &= ~REPLY_HOST_PTR_V4;
 80117a8:	f897 3359 	ldrb.w	r3, [r7, #857]	@ 0x359
 80117ac:	f023 0302 	bic.w	r3, r3, #2
 80117b0:	b2db      	uxtb	r3, r3
 80117b2:	f887 3359 	strb.w	r3, [r7, #857]	@ 0x359
 80117b6:	e032      	b.n	801181e <mdns_handle_question+0x35e>
              reply.host_replies &= ~REPLY_HOST_PTR_V6;
            }
          }
#endif
        }
      } else if (match & REPLY_HOST_A) {
 80117b8:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80117bc:	f003 0301 	and.w	r3, r3, #1
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d02c      	beq.n	801181e <mdns_handle_question+0x35e>
#if LWIP_IPV4
        if (ans.rd_length == sizeof(ip4_addr_t) &&
 80117c4:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80117c8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80117cc:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 80117d0:	2b04      	cmp	r3, #4
 80117d2:	d124      	bne.n	801181e <mdns_handle_question+0x35e>
            pbuf_memcmp(pkt->pbuf, ans.rd_offset, netif_ip4_addr(pkt->netif), ans.rd_length) == 0) {
 80117d4:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80117d8:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	68d8      	ldr	r0, [r3, #12]
 80117e0:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80117e4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80117e8:	f8b3 1112 	ldrh.w	r1, [r3, #274]	@ 0x112
 80117ec:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80117f0:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	689b      	ldr	r3, [r3, #8]
 80117f8:	1d1a      	adds	r2, r3, #4
 80117fa:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80117fe:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8011802:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8011806:	f003 f8d2 	bl	80149ae <pbuf_memcmp>
 801180a:	4603      	mov	r3, r0
        if (ans.rd_length == sizeof(ip4_addr_t) &&
 801180c:	2b00      	cmp	r3, #0
 801180e:	d106      	bne.n	801181e <mdns_handle_question+0x35e>
          LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Skipping known answer: A\n"));
          reply.host_replies &= ~REPLY_HOST_A;
 8011810:	f897 3359 	ldrb.w	r3, [r7, #857]	@ 0x359
 8011814:	f023 0301 	bic.w	r3, r3, #1
 8011818:	b2db      	uxtb	r3, r3
 801181a:	f887 3359 	strb.w	r3, [r7, #857]	@ 0x359
        }
#endif
      }
    }

    for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 801181e:	2300      	movs	r3, #0
 8011820:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 8011824:	e1be      	b.n	8011ba4 <mdns_handle_question+0x6e4>
 8011826:	bf00      	nop
 8011828:	20004ba8 	.word	0x20004ba8
      service = mdns->services[i];
 801182c:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8011830:	f8d7 2378 	ldr.w	r2, [r7, #888]	@ 0x378
 8011834:	3210      	adds	r2, #16
 8011836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801183a:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
      if (!service) {
 801183e:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8011842:	2b00      	cmp	r3, #0
 8011844:	f000 81a8 	beq.w	8011b98 <mdns_handle_question+0x6d8>
        continue;
      }
      match = reply.serv_replies[i] & check_service(service, &ans.info);
 8011848:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 801184c:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8011850:	4413      	add	r3, r2
 8011852:	781b      	ldrb	r3, [r3, #0]
 8011854:	461c      	mov	r4, r3
 8011856:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801185a:	4619      	mov	r1, r3
 801185c:	f8d7 0364 	ldr.w	r0, [r7, #868]	@ 0x364
 8011860:	f7fe fc84 	bl	801016c <check_service>
 8011864:	4603      	mov	r3, r0
 8011866:	4023      	ands	r3, r4
 8011868:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
      if (match && (ans.ttl > (service->dns_ttl / 2))) {
 801186c:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8011870:	2b00      	cmp	r3, #0
 8011872:	f000 8192 	beq.w	8011b9a <mdns_handle_question+0x6da>
 8011876:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 801187a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801187e:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8011882:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8011886:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 801188a:	085b      	lsrs	r3, r3, #1
 801188c:	429a      	cmp	r2, r3
 801188e:	f240 8184 	bls.w	8011b9a <mdns_handle_question+0x6da>
        /* The RR in the known answer matches an RR we are planning to send,
         * and the TTL is less than half gone.
         * If the payload matches we should not send that answer.
         */
        if (ans.info.type == DNS_RRTYPE_PTR) {
 8011892:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8011896:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801189a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 801189e:	2b0c      	cmp	r3, #12
 80118a0:	d17e      	bne.n	80119a0 <mdns_handle_question+0x4e0>
          /* Read domain and compare */
          struct mdns_domain known_ans, my_ans;
          u16_t len;
          len = mdns_readname(pkt->pbuf, ans.rd_offset, &known_ans);
 80118a2:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80118a6:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	68d8      	ldr	r0, [r3, #12]
 80118ae:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80118b2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80118b6:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 80118ba:	f107 0208 	add.w	r2, r7, #8
 80118be:	4619      	mov	r1, r3
 80118c0:	f7fe f8e6 	bl	800fa90 <mdns_readname>
 80118c4:	4603      	mov	r3, r0
 80118c6:	f8a7 335e 	strh.w	r3, [r7, #862]	@ 0x35e
          if (len != MDNS_READNAME_ERROR) {
 80118ca:	f8b7 335e 	ldrh.w	r3, [r7, #862]	@ 0x35e
 80118ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80118d2:	4293      	cmp	r3, r2
 80118d4:	f000 8161 	beq.w	8011b9a <mdns_handle_question+0x6da>
            if (match & REPLY_SERVICE_TYPE_PTR) {
 80118d8:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80118dc:	f003 0310 	and.w	r3, r3, #16
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d029      	beq.n	8011938 <mdns_handle_question+0x478>
              res = mdns_build_service_domain(&my_ans, service, 0);
 80118e4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 80118e8:	2200      	movs	r2, #0
 80118ea:	f8d7 1364 	ldr.w	r1, [r7, #868]	@ 0x364
 80118ee:	4618      	mov	r0, r3
 80118f0:	f7fe faf6 	bl	800fee0 <mdns_build_service_domain>
 80118f4:	4603      	mov	r3, r0
 80118f6:	f887 3373 	strb.w	r3, [r7, #883]	@ 0x373
              if (res == ERR_OK && mdns_domain_eq(&known_ans, &my_ans)) {
 80118fa:	f997 3373 	ldrsb.w	r3, [r7, #883]	@ 0x373
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d11a      	bne.n	8011938 <mdns_handle_question+0x478>
 8011902:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8011906:	f107 0308 	add.w	r3, r7, #8
 801190a:	4611      	mov	r1, r2
 801190c:	4618      	mov	r0, r3
 801190e:	f7fe f8fd 	bl	800fb0c <mdns_domain_eq>
 8011912:	4603      	mov	r3, r0
 8011914:	2b00      	cmp	r3, #0
 8011916:	d00f      	beq.n	8011938 <mdns_handle_question+0x478>
                LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Skipping known answer: service type PTR\n"));
                reply.serv_replies[i] &= ~REPLY_SERVICE_TYPE_PTR;
 8011918:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 801191c:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8011920:	4413      	add	r3, r2
 8011922:	781b      	ldrb	r3, [r3, #0]
 8011924:	f023 0310 	bic.w	r3, r3, #16
 8011928:	b2d9      	uxtb	r1, r3
 801192a:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 801192e:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8011932:	4413      	add	r3, r2
 8011934:	460a      	mov	r2, r1
 8011936:	701a      	strb	r2, [r3, #0]
              }
            }
            if (match & REPLY_SERVICE_NAME_PTR) {
 8011938:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 801193c:	f003 0320 	and.w	r3, r3, #32
 8011940:	2b00      	cmp	r3, #0
 8011942:	f000 812a 	beq.w	8011b9a <mdns_handle_question+0x6da>
              res = mdns_build_service_domain(&my_ans, service, 1);
 8011946:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 801194a:	2201      	movs	r2, #1
 801194c:	f8d7 1364 	ldr.w	r1, [r7, #868]	@ 0x364
 8011950:	4618      	mov	r0, r3
 8011952:	f7fe fac5 	bl	800fee0 <mdns_build_service_domain>
 8011956:	4603      	mov	r3, r0
 8011958:	f887 3373 	strb.w	r3, [r7, #883]	@ 0x373
              if (res == ERR_OK && mdns_domain_eq(&known_ans, &my_ans)) {
 801195c:	f997 3373 	ldrsb.w	r3, [r7, #883]	@ 0x373
 8011960:	2b00      	cmp	r3, #0
 8011962:	f040 811a 	bne.w	8011b9a <mdns_handle_question+0x6da>
 8011966:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 801196a:	f107 0308 	add.w	r3, r7, #8
 801196e:	4611      	mov	r1, r2
 8011970:	4618      	mov	r0, r3
 8011972:	f7fe f8cb 	bl	800fb0c <mdns_domain_eq>
 8011976:	4603      	mov	r3, r0
 8011978:	2b00      	cmp	r3, #0
 801197a:	f000 810e 	beq.w	8011b9a <mdns_handle_question+0x6da>
                LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Skipping known answer: service name PTR\n"));
                reply.serv_replies[i] &= ~REPLY_SERVICE_NAME_PTR;
 801197e:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 8011982:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8011986:	4413      	add	r3, r2
 8011988:	781b      	ldrb	r3, [r3, #0]
 801198a:	f023 0320 	bic.w	r3, r3, #32
 801198e:	b2d9      	uxtb	r1, r3
 8011990:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 8011994:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8011998:	4413      	add	r3, r2
 801199a:	460a      	mov	r2, r1
 801199c:	701a      	strb	r2, [r3, #0]
 801199e:	e0fc      	b.n	8011b9a <mdns_handle_question+0x6da>
              }
            }
          }
        } else if (match & REPLY_SERVICE_SRV) {
 80119a0:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80119a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	f000 80b5 	beq.w	8011b18 <mdns_handle_question+0x658>
          /* Read and compare to my SRV record */
          u16_t field16, len, read_pos;
          struct mdns_domain known_ans, my_ans;
          read_pos = ans.rd_offset;
 80119ae:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80119b2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80119b6:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 80119ba:	f8a7 3362 	strh.w	r3, [r7, #866]	@ 0x362
          do {
            /* Check priority field */
            len = pbuf_copy_partial(pkt->pbuf, &field16, sizeof(field16), read_pos);
 80119be:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80119c2:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	68d8      	ldr	r0, [r3, #12]
 80119ca:	f8b7 3362 	ldrh.w	r3, [r7, #866]	@ 0x362
 80119ce:	f507 7149 	add.w	r1, r7, #804	@ 0x324
 80119d2:	2202      	movs	r2, #2
 80119d4:	f002 fdd6 	bl	8014584 <pbuf_copy_partial>
 80119d8:	4603      	mov	r3, r0
 80119da:	f8a7 3360 	strh.w	r3, [r7, #864]	@ 0x360
            if (len != sizeof(field16) || lwip_ntohs(field16) != SRV_PRIORITY) {
 80119de:	f8b7 3360 	ldrh.w	r3, [r7, #864]	@ 0x360
 80119e2:	2b02      	cmp	r3, #2
 80119e4:	f040 80d9 	bne.w	8011b9a <mdns_handle_question+0x6da>
 80119e8:	f8b7 3324 	ldrh.w	r3, [r7, #804]	@ 0x324
 80119ec:	4618      	mov	r0, r3
 80119ee:	f000 fe05 	bl	80125fc <lwip_htons>
 80119f2:	4603      	mov	r3, r0
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	f040 80d0 	bne.w	8011b9a <mdns_handle_question+0x6da>
              break;
            }
            read_pos += len;
 80119fa:	f8b7 2362 	ldrh.w	r2, [r7, #866]	@ 0x362
 80119fe:	f8b7 3360 	ldrh.w	r3, [r7, #864]	@ 0x360
 8011a02:	4413      	add	r3, r2
 8011a04:	f8a7 3362 	strh.w	r3, [r7, #866]	@ 0x362
            /* Check weight field */
            len = pbuf_copy_partial(pkt->pbuf, &field16, sizeof(field16), read_pos);
 8011a08:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8011a0c:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	68d8      	ldr	r0, [r3, #12]
 8011a14:	f8b7 3362 	ldrh.w	r3, [r7, #866]	@ 0x362
 8011a18:	f507 7149 	add.w	r1, r7, #804	@ 0x324
 8011a1c:	2202      	movs	r2, #2
 8011a1e:	f002 fdb1 	bl	8014584 <pbuf_copy_partial>
 8011a22:	4603      	mov	r3, r0
 8011a24:	f8a7 3360 	strh.w	r3, [r7, #864]	@ 0x360
            if (len != sizeof(field16) || lwip_ntohs(field16) != SRV_WEIGHT) {
 8011a28:	f8b7 3360 	ldrh.w	r3, [r7, #864]	@ 0x360
 8011a2c:	2b02      	cmp	r3, #2
 8011a2e:	f040 80b4 	bne.w	8011b9a <mdns_handle_question+0x6da>
 8011a32:	f8b7 3324 	ldrh.w	r3, [r7, #804]	@ 0x324
 8011a36:	4618      	mov	r0, r3
 8011a38:	f000 fde0 	bl	80125fc <lwip_htons>
 8011a3c:	4603      	mov	r3, r0
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	f040 80ab 	bne.w	8011b9a <mdns_handle_question+0x6da>
              break;
            }
            read_pos += len;
 8011a44:	f8b7 2362 	ldrh.w	r2, [r7, #866]	@ 0x362
 8011a48:	f8b7 3360 	ldrh.w	r3, [r7, #864]	@ 0x360
 8011a4c:	4413      	add	r3, r2
 8011a4e:	f8a7 3362 	strh.w	r3, [r7, #866]	@ 0x362
            /* Check port field */
            len = pbuf_copy_partial(pkt->pbuf, &field16, sizeof(field16), read_pos);
 8011a52:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8011a56:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	68d8      	ldr	r0, [r3, #12]
 8011a5e:	f8b7 3362 	ldrh.w	r3, [r7, #866]	@ 0x362
 8011a62:	f507 7149 	add.w	r1, r7, #804	@ 0x324
 8011a66:	2202      	movs	r2, #2
 8011a68:	f002 fd8c 	bl	8014584 <pbuf_copy_partial>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	f8a7 3360 	strh.w	r3, [r7, #864]	@ 0x360
            if (len != sizeof(field16) || lwip_ntohs(field16) != service->port) {
 8011a72:	f8b7 3360 	ldrh.w	r3, [r7, #864]	@ 0x360
 8011a76:	2b02      	cmp	r3, #2
 8011a78:	f040 808f 	bne.w	8011b9a <mdns_handle_question+0x6da>
 8011a7c:	f8b7 3324 	ldrh.w	r3, [r7, #804]	@ 0x324
 8011a80:	4618      	mov	r0, r3
 8011a82:	f000 fdbb 	bl	80125fc <lwip_htons>
 8011a86:	4603      	mov	r3, r0
 8011a88:	461a      	mov	r2, r3
 8011a8a:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8011a8e:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 8011a92:	429a      	cmp	r2, r3
 8011a94:	f040 8081 	bne.w	8011b9a <mdns_handle_question+0x6da>
              break;
            }
            read_pos += len;
 8011a98:	f8b7 2362 	ldrh.w	r2, [r7, #866]	@ 0x362
 8011a9c:	f8b7 3360 	ldrh.w	r3, [r7, #864]	@ 0x360
 8011aa0:	4413      	add	r3, r2
 8011aa2:	f8a7 3362 	strh.w	r3, [r7, #866]	@ 0x362
            /* Check host field */
            len = mdns_readname(pkt->pbuf, read_pos, &known_ans);
 8011aa6:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8011aaa:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	68db      	ldr	r3, [r3, #12]
 8011ab2:	f107 0208 	add.w	r2, r7, #8
 8011ab6:	f8b7 1362 	ldrh.w	r1, [r7, #866]	@ 0x362
 8011aba:	4618      	mov	r0, r3
 8011abc:	f7fd ffe8 	bl	800fa90 <mdns_readname>
 8011ac0:	4603      	mov	r3, r0
 8011ac2:	f8a7 3360 	strh.w	r3, [r7, #864]	@ 0x360
            mdns_build_host_domain(&my_ans, mdns);
 8011ac6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8011aca:	f8d7 1374 	ldr.w	r1, [r7, #884]	@ 0x374
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7fe f95c 	bl	800fd8c <mdns_build_host_domain>
            if (len == MDNS_READNAME_ERROR || !mdns_domain_eq(&known_ans, &my_ans)) {
 8011ad4:	f8b7 3360 	ldrh.w	r3, [r7, #864]	@ 0x360
 8011ad8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011adc:	4293      	cmp	r3, r2
 8011ade:	d05c      	beq.n	8011b9a <mdns_handle_question+0x6da>
 8011ae0:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8011ae4:	f107 0308 	add.w	r3, r7, #8
 8011ae8:	4611      	mov	r1, r2
 8011aea:	4618      	mov	r0, r3
 8011aec:	f7fe f80e 	bl	800fb0c <mdns_domain_eq>
 8011af0:	4603      	mov	r3, r0
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d051      	beq.n	8011b9a <mdns_handle_question+0x6da>
              break;
            }
            LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Skipping known answer: SRV\n"));
            reply.serv_replies[i] &= ~REPLY_SERVICE_SRV;
 8011af6:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 8011afa:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8011afe:	4413      	add	r3, r2
 8011b00:	781b      	ldrb	r3, [r3, #0]
 8011b02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011b06:	b2d9      	uxtb	r1, r3
 8011b08:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 8011b0c:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8011b10:	4413      	add	r3, r2
 8011b12:	460a      	mov	r2, r1
 8011b14:	701a      	strb	r2, [r3, #0]
 8011b16:	e040      	b.n	8011b9a <mdns_handle_question+0x6da>
          } while (0);
        } else if (match & REPLY_SERVICE_TXT) {
 8011b18:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8011b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d03a      	beq.n	8011b9a <mdns_handle_question+0x6da>
          mdns_prepare_txtdata(service);
 8011b24:	f8d7 0364 	ldr.w	r0, [r7, #868]	@ 0x364
 8011b28:	f7fe f850 	bl	800fbcc <mdns_prepare_txtdata>
          if (service->txtdata.length == ans.rd_length &&
 8011b2c:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8011b30:	f8b3 2100 	ldrh.w	r2, [r3, #256]	@ 0x100
 8011b34:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8011b38:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8011b3c:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8011b40:	429a      	cmp	r2, r3
 8011b42:	d12a      	bne.n	8011b9a <mdns_handle_question+0x6da>
              pbuf_memcmp(pkt->pbuf, ans.rd_offset, service->txtdata.name, ans.rd_length) == 0) {
 8011b44:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8011b48:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	68d8      	ldr	r0, [r3, #12]
 8011b50:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8011b54:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8011b58:	f8b3 1112 	ldrh.w	r1, [r3, #274]	@ 0x112
 8011b5c:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8011b60:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8011b64:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8011b68:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8011b6c:	f002 ff1f 	bl	80149ae <pbuf_memcmp>
 8011b70:	4603      	mov	r3, r0
          if (service->txtdata.length == ans.rd_length &&
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d111      	bne.n	8011b9a <mdns_handle_question+0x6da>
            LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Skipping known answer: TXT\n"));
            reply.serv_replies[i] &= ~REPLY_SERVICE_TXT;
 8011b76:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 8011b7a:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8011b7e:	4413      	add	r3, r2
 8011b80:	781b      	ldrb	r3, [r3, #0]
 8011b82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011b86:	b2d9      	uxtb	r1, r3
 8011b88:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 8011b8c:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8011b90:	4413      	add	r3, r2
 8011b92:	460a      	mov	r2, r1
 8011b94:	701a      	strb	r2, [r3, #0]
 8011b96:	e000      	b.n	8011b9a <mdns_handle_question+0x6da>
        continue;
 8011b98:	bf00      	nop
    for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 8011b9a:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8011b9e:	3301      	adds	r3, #1
 8011ba0:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 8011ba4:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	f77f ae3f 	ble.w	801182c <mdns_handle_question+0x36c>
 8011bae:	e000      	b.n	8011bb2 <mdns_handle_question+0x6f2>
      continue;
 8011bb0:	bf00      	nop
  while (pkt->answers_left) {
 8011bb2:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8011bb6:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	8b5b      	ldrh	r3, [r3, #26]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	f47f ad60 	bne.w	8011684 <mdns_handle_question+0x1c4>
        }
      }
    }
  }

  mdns_send_outpacket(&reply, DNS_FLAG1_RESPONSE | DNS_FLAG1_AUTHORATIVE);
 8011bc4:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 8011bc8:	2184      	movs	r1, #132	@ 0x84
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f7ff fa2a 	bl	8011024 <mdns_send_outpacket>
 8011bd0:	e002      	b.n	8011bd8 <mdns_handle_question+0x718>
        goto cleanup;
 8011bd2:	bf00      	nop
 8011bd4:	e000      	b.n	8011bd8 <mdns_handle_question+0x718>
      goto cleanup;
 8011bd6:	bf00      	nop

cleanup:
  if (reply.pbuf) {
 8011bd8:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d00b      	beq.n	8011bf8 <mdns_handle_question+0x738>
    /* This should only happen if we fail to alloc/write question for legacy query */
    pbuf_free(reply.pbuf);
 8011be0:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8011be4:	4618      	mov	r0, r3
 8011be6:	f002 fac7 	bl	8014178 <pbuf_free>
    reply.pbuf = NULL;
 8011bea:	2300      	movs	r3, #0
 8011bec:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 8011bf0:	e002      	b.n	8011bf8 <mdns_handle_question+0x738>
    return;
 8011bf2:	bf00      	nop
 8011bf4:	e000      	b.n	8011bf8 <mdns_handle_question+0x738>
      return;
 8011bf6:	bf00      	nop
  }
}
 8011bf8:	f507 7761 	add.w	r7, r7, #900	@ 0x384
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd90      	pop	{r4, r7, pc}

08011c00 <mdns_handle_response>:
 * Handle response MDNS packet
 * Only prints debug for now. Will need more code to do conflict resolution.
 */
static void
mdns_handle_response(struct mdns_packet *pkt)
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 8011c06:	af00      	add	r7, sp, #0
 8011c08:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8011c0c:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8011c10:	6018      	str	r0, [r3, #0]
  struct mdns_host* mdns = NETIF_TO_HOST(pkt->netif);
 8011c12:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8011c16:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	689a      	ldr	r2, [r3, #8]
 8011c1e:	4b66      	ldr	r3, [pc, #408]	@ (8011db8 <mdns_handle_response+0x1b8>)
 8011c20:	781b      	ldrb	r3, [r3, #0]
 8011c22:	3308      	adds	r3, #8
 8011c24:	009b      	lsls	r3, r3, #2
 8011c26:	4413      	add	r3, r2
 8011c28:	685b      	ldr	r3, [r3, #4]
 8011c2a:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230

  /* Ignore all questions */
  while (pkt->questions_left) {
 8011c2e:	e011      	b.n	8011c54 <mdns_handle_response+0x54>
    struct mdns_question q;
    err_t res;

    res = mdns_read_question(pkt, &q);
 8011c30:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8011c34:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8011c38:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8011c3c:	4611      	mov	r1, r2
 8011c3e:	6818      	ldr	r0, [r3, #0]
 8011c40:	f7fe fea8 	bl	8010994 <mdns_read_question>
 8011c44:	4603      	mov	r3, r0
 8011c46:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
    if (res != ERR_OK) {
 8011c4a:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	f040 80ab 	bne.w	8011daa <mdns_handle_response+0x1aa>
  while (pkt->questions_left) {
 8011c54:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8011c58:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	8adb      	ldrh	r3, [r3, #22]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d1e5      	bne.n	8011c30 <mdns_handle_response+0x30>
      LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Failed to parse question, skipping response packet\n"));
      return;
    }
  }

  while (pkt->answers_left) {
 8011c64:	e097      	b.n	8011d96 <mdns_handle_response+0x196>
    struct mdns_answer ans;
    err_t res;

    res = mdns_read_answer(pkt, &ans);
 8011c66:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8011c6a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8011c6e:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8011c72:	4611      	mov	r1, r2
 8011c74:	6818      	ldr	r0, [r3, #0]
 8011c76:	f7fe fed7 	bl	8010a28 <mdns_read_answer>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
    if (res != ERR_OK) {
 8011c80:	f997 322f 	ldrsb.w	r3, [r7, #559]	@ 0x22f
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	f040 8092 	bne.w	8011dae <mdns_handle_response+0x1ae>
      LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Failed to parse answer, skipping response packet\n"));
      return;
    }

    LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Answer for domain "));
    mdns_domain_debug_print(&ans.info.domain);
 8011c8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7fd ff16 	bl	800fac0 <mdns_domain_debug_print>
    LWIP_DEBUGF(MDNS_DEBUG, (" type %d class %d\n", ans.info.type, ans.info.klass));

    /*"Apparently conflicting Multicast DNS responses received *before* the first probe packet is sent MUST
      be silently ignored" so drop answer if we haven't started probing yet*/
    if ((mdns->probing_state == MDNS_PROBING_ONGOING) && (mdns->probes_sent > 0)) {
 8011c94:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8011c98:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8011c9c:	2b01      	cmp	r3, #1
 8011c9e:	d17a      	bne.n	8011d96 <mdns_handle_response+0x196>
 8011ca0:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8011ca4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d074      	beq.n	8011d96 <mdns_handle_response+0x196>
      struct mdns_domain domain;
      u8_t i;
      u8_t conflict = 0;
 8011cac:	2300      	movs	r3, #0
 8011cae:	f887 3236 	strb.w	r3, [r7, #566]	@ 0x236

      res = mdns_build_host_domain(&domain, mdns);
 8011cb2:	f107 030c 	add.w	r3, r7, #12
 8011cb6:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f7fe f866 	bl	800fd8c <mdns_build_host_domain>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
      if (res == ERR_OK && mdns_domain_eq(&ans.info.domain, &domain)) {
 8011cc6:	f997 322f 	ldrsb.w	r3, [r7, #559]	@ 0x22f
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d10d      	bne.n	8011cea <mdns_handle_response+0xea>
 8011cce:	f107 020c 	add.w	r2, r7, #12
 8011cd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011cd6:	4611      	mov	r1, r2
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7fd ff17 	bl	800fb0c <mdns_domain_eq>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d002      	beq.n	8011cea <mdns_handle_response+0xea>
        LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Probe response matches host domain!"));
        conflict = 1;
 8011ce4:	2301      	movs	r3, #1
 8011ce6:	f887 3236 	strb.w	r3, [r7, #566]	@ 0x236
      }

      for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 8011cea:	2300      	movs	r3, #0
 8011cec:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
 8011cf0:	e030      	b.n	8011d54 <mdns_handle_response+0x154>
        struct mdns_service* service = mdns->services[i];
 8011cf2:	f897 2237 	ldrb.w	r2, [r7, #567]	@ 0x237
 8011cf6:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8011cfa:	3210      	adds	r2, #16
 8011cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d00:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
        if (!service) {
 8011d04:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d01d      	beq.n	8011d48 <mdns_handle_response+0x148>
          continue;
        }
        res = mdns_build_service_domain(&domain, service, 1);
 8011d0c:	f107 030c 	add.w	r3, r7, #12
 8011d10:	2201      	movs	r2, #1
 8011d12:	f8d7 1228 	ldr.w	r1, [r7, #552]	@ 0x228
 8011d16:	4618      	mov	r0, r3
 8011d18:	f7fe f8e2 	bl	800fee0 <mdns_build_service_domain>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
        if ((res == ERR_OK) && mdns_domain_eq(&ans.info.domain, &domain)) {
 8011d22:	f997 322f 	ldrsb.w	r3, [r7, #559]	@ 0x22f
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d10f      	bne.n	8011d4a <mdns_handle_response+0x14a>
 8011d2a:	f107 020c 	add.w	r2, r7, #12
 8011d2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011d32:	4611      	mov	r1, r2
 8011d34:	4618      	mov	r0, r3
 8011d36:	f7fd fee9 	bl	800fb0c <mdns_domain_eq>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d004      	beq.n	8011d4a <mdns_handle_response+0x14a>
          LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Probe response matches service domain!"));
          conflict = 1;
 8011d40:	2301      	movs	r3, #1
 8011d42:	f887 3236 	strb.w	r3, [r7, #566]	@ 0x236
 8011d46:	e000      	b.n	8011d4a <mdns_handle_response+0x14a>
          continue;
 8011d48:	bf00      	nop
      for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 8011d4a:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
 8011d4e:	3301      	adds	r3, #1
 8011d50:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
 8011d54:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d0ca      	beq.n	8011cf2 <mdns_handle_response+0xf2>
        }
      }

      if (conflict != 0) {
 8011d5c:	f897 3236 	ldrb.w	r3, [r7, #566]	@ 0x236
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d018      	beq.n	8011d96 <mdns_handle_response+0x196>
        sys_untimeout(mdns_probe, pkt->netif);
 8011d64:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8011d68:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	689b      	ldr	r3, [r3, #8]
 8011d70:	4619      	mov	r1, r3
 8011d72:	4812      	ldr	r0, [pc, #72]	@ (8011dbc <mdns_handle_response+0x1bc>)
 8011d74:	f008 ffce 	bl	801ad14 <sys_untimeout>
        if (mdns_name_result_cb != NULL) {
 8011d78:	4b11      	ldr	r3, [pc, #68]	@ (8011dc0 <mdns_handle_response+0x1c0>)
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d00a      	beq.n	8011d96 <mdns_handle_response+0x196>
          mdns_name_result_cb(pkt->netif, MDNS_PROBING_CONFLICT);
 8011d80:	4b0f      	ldr	r3, [pc, #60]	@ (8011dc0 <mdns_handle_response+0x1c0>)
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 8011d88:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 8011d8c:	6812      	ldr	r2, [r2, #0]
 8011d8e:	6892      	ldr	r2, [r2, #8]
 8011d90:	2100      	movs	r1, #0
 8011d92:	4610      	mov	r0, r2
 8011d94:	4798      	blx	r3
  while (pkt->answers_left) {
 8011d96:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8011d9a:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	8b5b      	ldrh	r3, [r3, #26]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	f47f af5f 	bne.w	8011c66 <mdns_handle_response+0x66>
 8011da8:	e002      	b.n	8011db0 <mdns_handle_response+0x1b0>
      return;
 8011daa:	bf00      	nop
 8011dac:	e000      	b.n	8011db0 <mdns_handle_response+0x1b0>
      return;
 8011dae:	bf00      	nop
        }
      }
    }
  }
}
 8011db0:	f507 770e 	add.w	r7, r7, #568	@ 0x238
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}
 8011db8:	20004ba8 	.word	0x20004ba8
 8011dbc:	080120a5 	.word	0x080120a5
 8011dc0:	20004bb0 	.word	0x20004bb0

08011dc4 <mdns_recv>:
 * Receive input function for MDNS packets.
 * Handles both IPv4 and IPv6 UDP pcbs.
 */
static void
mdns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8011dc4:	b590      	push	{r4, r7, lr}
 8011dc6:	b091      	sub	sp, #68	@ 0x44
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	60f8      	str	r0, [r7, #12]
 8011dcc:	60b9      	str	r1, [r7, #8]
 8011dce:	607a      	str	r2, [r7, #4]
 8011dd0:	603b      	str	r3, [r7, #0]
  struct dns_hdr hdr;
  struct mdns_packet packet;
  struct netif *recv_netif = ip_current_input_netif();
 8011dd2:	4b3f      	ldr	r3, [pc, #252]	@ (8011ed0 <mdns_recv+0x10c>)
 8011dd4:	685b      	ldr	r3, [r3, #4]
 8011dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  u16_t offset = 0;
 8011dd8:	2300      	movs	r3, #0
 8011dda:	877b      	strh	r3, [r7, #58]	@ 0x3a
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);

  LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Received IPv%d MDNS packet, len %d\n", IP_IS_V6(addr) ? 6 : 4, p->tot_len));

  if (NETIF_TO_HOST(recv_netif) == NULL) {
 8011ddc:	4b3d      	ldr	r3, [pc, #244]	@ (8011ed4 <mdns_recv+0x110>)
 8011dde:	781b      	ldrb	r3, [r3, #0]
 8011de0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011de2:	3308      	adds	r3, #8
 8011de4:	009b      	lsls	r3, r3, #2
 8011de6:	4413      	add	r3, r2
 8011de8:	685b      	ldr	r3, [r3, #4]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d064      	beq.n	8011eb8 <mdns_recv+0xf4>
    /* From netif not configured for MDNS */
    goto dealloc;
  }

  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, offset) < SIZEOF_DNS_HDR) {
 8011dee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011df0:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8011df4:	220c      	movs	r2, #12
 8011df6:	6878      	ldr	r0, [r7, #4]
 8011df8:	f002 fbc4 	bl	8014584 <pbuf_copy_partial>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	2b0b      	cmp	r3, #11
 8011e00:	d95c      	bls.n	8011ebc <mdns_recv+0xf8>
    /* Too small */
    goto dealloc;
  }
  offset += SIZEOF_DNS_HDR;
 8011e02:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011e04:	330c      	adds	r3, #12
 8011e06:	877b      	strh	r3, [r7, #58]	@ 0x3a

  if (DNS_HDR_GET_OPCODE(&hdr)) {
 8011e08:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011e0c:	08db      	lsrs	r3, r3, #3
 8011e0e:	b2db      	uxtb	r3, r3
 8011e10:	f003 030f 	and.w	r3, r3, #15
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d153      	bne.n	8011ec0 <mdns_recv+0xfc>
    /* Ignore non-standard queries in multicast packets (RFC 6762, section 18.3) */
    goto dealloc;
  }

  memset(&packet, 0, sizeof(packet));
 8011e18:	f107 0310 	add.w	r3, r7, #16
 8011e1c:	221c      	movs	r2, #28
 8011e1e:	2100      	movs	r1, #0
 8011e20:	4618      	mov	r0, r3
 8011e22:	f00f fc97 	bl	8021754 <memset>
  SMEMCPY(&packet.source_addr, addr, sizeof(packet.source_addr));
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	613b      	str	r3, [r7, #16]
  packet.source_port = port;
 8011e2c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8011e30:	82bb      	strh	r3, [r7, #20]
  packet.netif = recv_netif;
 8011e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e34:	61bb      	str	r3, [r7, #24]
  packet.pbuf = p;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	61fb      	str	r3, [r7, #28]
  packet.parse_offset = offset;
 8011e3a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011e3c:	843b      	strh	r3, [r7, #32]
  packet.tx_id = lwip_ntohs(hdr.id);
 8011e3e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011e40:	4618      	mov	r0, r3
 8011e42:	f000 fbdb 	bl	80125fc <lwip_htons>
 8011e46:	4603      	mov	r3, r0
 8011e48:	847b      	strh	r3, [r7, #34]	@ 0x22
  packet.questions = packet.questions_left = lwip_ntohs(hdr.numquestions);
 8011e4a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	f000 fbd5 	bl	80125fc <lwip_htons>
 8011e52:	4603      	mov	r3, r0
 8011e54:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011e56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011e58:	84bb      	strh	r3, [r7, #36]	@ 0x24
  packet.answers = packet.answers_left = lwip_ntohs(hdr.numanswers) + lwip_ntohs(hdr.numauthrr) + lwip_ntohs(hdr.numextrarr);
 8011e5a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	f000 fbcd 	bl	80125fc <lwip_htons>
 8011e62:	4603      	mov	r3, r0
 8011e64:	461c      	mov	r4, r3
 8011e66:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8011e68:	4618      	mov	r0, r3
 8011e6a:	f000 fbc7 	bl	80125fc <lwip_htons>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	4423      	add	r3, r4
 8011e72:	b29c      	uxth	r4, r3
 8011e74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011e76:	4618      	mov	r0, r3
 8011e78:	f000 fbc0 	bl	80125fc <lwip_htons>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	4423      	add	r3, r4
 8011e80:	b29b      	uxth	r3, r3
 8011e82:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8011e84:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011e86:	853b      	strh	r3, [r7, #40]	@ 0x28
    }
  }
#endif
#if LWIP_IPV4
  if (!IP_IS_V6(ip_current_dest_addr())) {
    if (!ip_addr_cmp(ip_current_dest_addr(), &v4group)) {
 8011e88:	4b11      	ldr	r3, [pc, #68]	@ (8011ed0 <mdns_recv+0x10c>)
 8011e8a:	695b      	ldr	r3, [r3, #20]
 8011e8c:	4a12      	ldr	r2, [pc, #72]	@ (8011ed8 <mdns_recv+0x114>)
 8011e8e:	4293      	cmp	r3, r2
 8011e90:	d001      	beq.n	8011e96 <mdns_recv+0xd2>
      packet.recv_unicast = 1;
 8011e92:	2301      	movs	r3, #1
 8011e94:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif

  if (hdr.flags1 & DNS_FLAG1_RESPONSE) {
 8011e96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011e9a:	b25b      	sxtb	r3, r3
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	da05      	bge.n	8011eac <mdns_recv+0xe8>
    mdns_handle_response(&packet);
 8011ea0:	f107 0310 	add.w	r3, r7, #16
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f7ff feab 	bl	8011c00 <mdns_handle_response>
 8011eaa:	e00a      	b.n	8011ec2 <mdns_recv+0xfe>
  } else {
    mdns_handle_question(&packet);
 8011eac:	f107 0310 	add.w	r3, r7, #16
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f7ff fb05 	bl	80114c0 <mdns_handle_question>
 8011eb6:	e004      	b.n	8011ec2 <mdns_recv+0xfe>
    goto dealloc;
 8011eb8:	bf00      	nop
 8011eba:	e002      	b.n	8011ec2 <mdns_recv+0xfe>
    goto dealloc;
 8011ebc:	bf00      	nop
 8011ebe:	e000      	b.n	8011ec2 <mdns_recv+0xfe>
    goto dealloc;
 8011ec0:	bf00      	nop
  }

dealloc:
  pbuf_free(p);
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	f002 f958 	bl	8014178 <pbuf_free>
}
 8011ec8:	bf00      	nop
 8011eca:	3744      	adds	r7, #68	@ 0x44
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bd90      	pop	{r4, r7, pc}
 8011ed0:	20004bb4 	.word	0x20004bb4
 8011ed4:	20004ba8 	.word	0x20004ba8
 8011ed8:	fb0000e0 	.word	0xfb0000e0

08011edc <mdns_send_probe>:
}
#endif /* LWIP_NETIF_EXT_STATUS_CALLBACK && MDNS_RESP_USENETIF_EXTCALLBACK */

static err_t
mdns_send_probe(struct netif* netif, const ip_addr_t *destination)
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b0d6      	sub	sp, #344	@ 0x158
 8011ee0:	af02      	add	r7, sp, #8
 8011ee2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011ee6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8011eea:	6018      	str	r0, [r3, #0]
 8011eec:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011ef0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8011ef4:	6019      	str	r1, [r3, #0]
  struct mdns_outpacket pkt;
  struct mdns_domain domain;
  u8_t i;
  err_t res;

  mdns = NETIF_TO_HOST(netif);
 8011ef6:	4b6a      	ldr	r3, [pc, #424]	@ (80120a0 <mdns_send_probe+0x1c4>)
 8011ef8:	781b      	ldrb	r3, [r3, #0]
 8011efa:	4619      	mov	r1, r3
 8011efc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011f00:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8011f04:	681a      	ldr	r2, [r3, #0]
 8011f06:	f101 0308 	add.w	r3, r1, #8
 8011f0a:	009b      	lsls	r3, r3, #2
 8011f0c:	4413      	add	r3, r2
 8011f0e:	685b      	ldr	r3, [r3, #4]
 8011f10:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

  memset(&pkt, 0, sizeof(pkt));
 8011f14:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8011f18:	2234      	movs	r2, #52	@ 0x34
 8011f1a:	2100      	movs	r1, #0
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f00f fc19 	bl	8021754 <memset>
  pkt.netif = netif;
 8011f22:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011f26:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

  /* Add unicast questions with rtype ANY for all our desired records */
  mdns_build_host_domain(&domain, mdns);
 8011f30:	f107 0308 	add.w	r3, r7, #8
 8011f34:	f8d7 1148 	ldr.w	r1, [r7, #328]	@ 0x148
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7fd ff27 	bl	800fd8c <mdns_build_host_domain>
  res = mdns_add_question(&pkt, &domain, DNS_RRTYPE_ANY, DNS_RRCLASS_IN, 1);
 8011f3e:	f107 0108 	add.w	r1, r7, #8
 8011f42:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8011f46:	2301      	movs	r3, #1
 8011f48:	9300      	str	r3, [sp, #0]
 8011f4a:	2301      	movs	r3, #1
 8011f4c:	22ff      	movs	r2, #255	@ 0xff
 8011f4e:	f7fe fb75 	bl	801063c <mdns_add_question>
 8011f52:	4603      	mov	r3, r0
 8011f54:	f887 314e 	strb.w	r3, [r7, #334]	@ 0x14e
  if (res != ERR_OK) {
 8011f58:	f997 314e 	ldrsb.w	r3, [r7, #334]	@ 0x14e
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	f040 8088 	bne.w	8012072 <mdns_send_probe+0x196>
    goto cleanup;
  }
  pkt.questions++;
 8011f62:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8011f66:	3301      	adds	r3, #1
 8011f68:	b29b      	uxth	r3, r3
 8011f6a:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
  for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 8011f6e:	2300      	movs	r3, #0
 8011f70:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 8011f74:	e032      	b.n	8011fdc <mdns_send_probe+0x100>
    struct mdns_service* service = mdns->services[i];
 8011f76:	f897 214f 	ldrb.w	r2, [r7, #335]	@ 0x14f
 8011f7a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8011f7e:	3210      	adds	r2, #16
 8011f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f84:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    if (!service) {
 8011f88:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d01f      	beq.n	8011fd0 <mdns_send_probe+0xf4>
      continue;
    }
    mdns_build_service_domain(&domain, service, 1);
 8011f90:	f107 0308 	add.w	r3, r7, #8
 8011f94:	2201      	movs	r2, #1
 8011f96:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f7fd ffa0 	bl	800fee0 <mdns_build_service_domain>
    res = mdns_add_question(&pkt, &domain, DNS_RRTYPE_ANY, DNS_RRCLASS_IN, 1);
 8011fa0:	f107 0108 	add.w	r1, r7, #8
 8011fa4:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8011fa8:	2301      	movs	r3, #1
 8011faa:	9300      	str	r3, [sp, #0]
 8011fac:	2301      	movs	r3, #1
 8011fae:	22ff      	movs	r2, #255	@ 0xff
 8011fb0:	f7fe fb44 	bl	801063c <mdns_add_question>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	f887 314e 	strb.w	r3, [r7, #334]	@ 0x14e
    if (res != ERR_OK) {
 8011fba:	f997 314e 	ldrsb.w	r3, [r7, #334]	@ 0x14e
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d159      	bne.n	8012076 <mdns_send_probe+0x19a>
      goto cleanup;
    }
    pkt.questions++;
 8011fc2:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8011fc6:	3301      	adds	r3, #1
 8011fc8:	b29b      	uxth	r3, r3
 8011fca:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
 8011fce:	e000      	b.n	8011fd2 <mdns_send_probe+0xf6>
      continue;
 8011fd0:	bf00      	nop
  for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 8011fd2:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8011fd6:	3301      	adds	r3, #1
 8011fd8:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 8011fdc:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d0c8      	beq.n	8011f76 <mdns_send_probe+0x9a>
  }

  /* Add answers to the questions above into the authority section for tiebreaking */
#if LWIP_IPV4
  if (!ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011fe4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8011fe8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	3304      	adds	r3, #4
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d002      	beq.n	8011ffc <mdns_send_probe+0x120>
    pkt.host_replies = REPLY_HOST_A;
 8011ff6:	2301      	movs	r3, #1
 8011ff8:	f887 313d 	strb.w	r3, [r7, #317]	@ 0x13d
      pkt.host_replies |= REPLY_HOST_AAAA;
    }
  }
#endif

  for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 8012002:	e019      	b.n	8012038 <mdns_send_probe+0x15c>
    struct mdns_service *serv = mdns->services[i];
 8012004:	f897 214f 	ldrb.w	r2, [r7, #335]	@ 0x14f
 8012008:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801200c:	3210      	adds	r2, #16
 801200e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012012:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    if (serv) {
 8012016:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801201a:	2b00      	cmp	r3, #0
 801201c:	d007      	beq.n	801202e <mdns_send_probe+0x152>
      pkt.serv_replies[i] = REPLY_SERVICE_SRV | REPLY_SERVICE_TXT;
 801201e:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8012022:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012026:	443b      	add	r3, r7
 8012028:	22c0      	movs	r2, #192	@ 0xc0
 801202a:	f803 2c11 	strb.w	r2, [r3, #-17]
  for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 801202e:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8012032:	3301      	adds	r3, #1
 8012034:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 8012038:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 801203c:	2b00      	cmp	r3, #0
 801203e:	d0e1      	beq.n	8012004 <mdns_send_probe+0x128>
    }
  }

  pkt.tx_id = 0;
 8012040:	2300      	movs	r3, #0
 8012042:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
  pkt.dest_port = LWIP_IANA_PORT_MDNS;
 8012046:	f241 43e9 	movw	r3, #5353	@ 0x14e9
 801204a:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
  SMEMCPY(&pkt.dest_addr, destination, sizeof(pkt.dest_addr));
 801204e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8012052:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  res = mdns_send_outpacket(&pkt, 0);
 801205e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8012062:	2100      	movs	r1, #0
 8012064:	4618      	mov	r0, r3
 8012066:	f7fe ffdd 	bl	8011024 <mdns_send_outpacket>
 801206a:	4603      	mov	r3, r0
 801206c:	f887 314e 	strb.w	r3, [r7, #334]	@ 0x14e
 8012070:	e002      	b.n	8012078 <mdns_send_probe+0x19c>
    goto cleanup;
 8012072:	bf00      	nop
 8012074:	e000      	b.n	8012078 <mdns_send_probe+0x19c>
      goto cleanup;
 8012076:	bf00      	nop

cleanup:
  if (pkt.pbuf) {
 8012078:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801207c:	2b00      	cmp	r3, #0
 801207e:	d007      	beq.n	8012090 <mdns_send_probe+0x1b4>
    pbuf_free(pkt.pbuf);
 8012080:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012084:	4618      	mov	r0, r3
 8012086:	f002 f877 	bl	8014178 <pbuf_free>
    pkt.pbuf = NULL;
 801208a:	2300      	movs	r3, #0
 801208c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  }
  return res;
 8012090:	f997 314e 	ldrsb.w	r3, [r7, #334]	@ 0x14e
}
 8012094:	4618      	mov	r0, r3
 8012096:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
 801209e:	bf00      	nop
 80120a0:	20004ba8 	.word	0x20004ba8

080120a4 <mdns_probe>:
/**
 * Timer callback for probing network.
 */
static void
mdns_probe(void* arg)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b084      	sub	sp, #16
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
  struct netif *netif = (struct netif *)arg;
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	60fb      	str	r3, [r7, #12]
  struct mdns_host* mdns = NETIF_TO_HOST(netif);
 80120b0:	4b1d      	ldr	r3, [pc, #116]	@ (8012128 <mdns_probe+0x84>)
 80120b2:	781b      	ldrb	r3, [r3, #0]
 80120b4:	68fa      	ldr	r2, [r7, #12]
 80120b6:	3308      	adds	r3, #8
 80120b8:	009b      	lsls	r3, r3, #2
 80120ba:	4413      	add	r3, r2
 80120bc:	685b      	ldr	r3, [r3, #4]
 80120be:	60bb      	str	r3, [r7, #8]

  if(mdns->probes_sent >= MDNS_PROBE_COUNT) {
 80120c0:	68bb      	ldr	r3, [r7, #8]
 80120c2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80120c6:	2b02      	cmp	r3, #2
 80120c8:	d910      	bls.n	80120ec <mdns_probe+0x48>
    /* probing successful, announce the new name */
    mdns->probing_state = MDNS_PROBING_COMPLETE;
 80120ca:	68bb      	ldr	r3, [r7, #8]
 80120cc:	2202      	movs	r2, #2
 80120ce:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    mdns_resp_announce(netif);
 80120d2:	68f8      	ldr	r0, [r7, #12]
 80120d4:	f000 f9be 	bl	8012454 <mdns_resp_announce>
    if (mdns_name_result_cb != NULL) {
 80120d8:	4b14      	ldr	r3, [pc, #80]	@ (801212c <mdns_probe+0x88>)
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d01e      	beq.n	801211e <mdns_probe+0x7a>
      mdns_name_result_cb(netif, MDNS_PROBING_SUCCESSFUL);
 80120e0:	4b12      	ldr	r3, [pc, #72]	@ (801212c <mdns_probe+0x88>)
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	2101      	movs	r1, #1
 80120e6:	68f8      	ldr	r0, [r7, #12]
 80120e8:	4798      	blx	r3
        mdns->probes_sent++;
      }
    }
    sys_timeout(MDNS_PROBE_DELAY_MS, mdns_probe, netif);
  }
}
 80120ea:	e018      	b.n	801211e <mdns_probe+0x7a>
    if (!ip4_addr_isany_val(*netif_ip4_addr(netif)) &&
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	3304      	adds	r3, #4
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d00e      	beq.n	8012114 <mdns_probe+0x70>
        mdns_send_probe(netif, IP4_ADDR_ANY) == ERR_OK)
 80120f6:	490e      	ldr	r1, [pc, #56]	@ (8012130 <mdns_probe+0x8c>)
 80120f8:	68f8      	ldr	r0, [r7, #12]
 80120fa:	f7ff feef 	bl	8011edc <mdns_send_probe>
 80120fe:	4603      	mov	r3, r0
    if (!ip4_addr_isany_val(*netif_ip4_addr(netif)) &&
 8012100:	2b00      	cmp	r3, #0
 8012102:	d107      	bne.n	8012114 <mdns_probe+0x70>
        mdns->probes_sent++;
 8012104:	68bb      	ldr	r3, [r7, #8]
 8012106:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801210a:	3301      	adds	r3, #1
 801210c:	b2da      	uxtb	r2, r3
 801210e:	68bb      	ldr	r3, [r7, #8]
 8012110:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    sys_timeout(MDNS_PROBE_DELAY_MS, mdns_probe, netif);
 8012114:	68fa      	ldr	r2, [r7, #12]
 8012116:	4907      	ldr	r1, [pc, #28]	@ (8012134 <mdns_probe+0x90>)
 8012118:	20fa      	movs	r0, #250	@ 0xfa
 801211a:	f008 fdd5 	bl	801acc8 <sys_timeout>
}
 801211e:	bf00      	nop
 8012120:	3710      	adds	r7, #16
 8012122:	46bd      	mov	sp, r7
 8012124:	bd80      	pop	{r7, pc}
 8012126:	bf00      	nop
 8012128:	20004ba8 	.word	0x20004ba8
 801212c:	20004bb0 	.word	0x20004bb0
 8012130:	08027754 	.word	0x08027754
 8012134:	080120a5 	.word	0x080120a5

08012138 <mdns_resp_add_netif>:
 * @param dns_ttl Validity time in seconds to send out for IP address data in DNS replies
 * @return ERR_OK if netif was added, an err_t otherwise
 */
err_t
mdns_resp_add_netif(struct netif *netif, const char *hostname, u32_t dns_ttl)
{
 8012138:	b590      	push	{r4, r7, lr}
 801213a:	b087      	sub	sp, #28
 801213c:	af00      	add	r7, sp, #0
 801213e:	60f8      	str	r0, [r7, #12]
 8012140:	60b9      	str	r1, [r7, #8]
 8012142:	607a      	str	r2, [r7, #4]
  err_t res;
  struct mdns_host *mdns;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("mdns_resp_add_netif: netif != NULL", (netif != NULL), return ERR_VAL);
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d109      	bne.n	801215e <mdns_resp_add_netif+0x26>
 801214a:	4b41      	ldr	r3, [pc, #260]	@ (8012250 <mdns_resp_add_netif+0x118>)
 801214c:	f640 0212 	movw	r2, #2066	@ 0x812
 8012150:	4940      	ldr	r1, [pc, #256]	@ (8012254 <mdns_resp_add_netif+0x11c>)
 8012152:	4841      	ldr	r0, [pc, #260]	@ (8012258 <mdns_resp_add_netif+0x120>)
 8012154:	f00f f92e 	bl	80213b4 <iprintf>
 8012158:	f06f 0305 	mvn.w	r3, #5
 801215c:	e073      	b.n	8012246 <mdns_resp_add_netif+0x10e>
  LWIP_ERROR("mdns_resp_add_netif: Hostname too long", (strlen(hostname) <= MDNS_LABEL_MAXLEN), return ERR_VAL);
 801215e:	68b8      	ldr	r0, [r7, #8]
 8012160:	f7ee f878 	bl	8000254 <strlen>
 8012164:	4603      	mov	r3, r0
 8012166:	2b3f      	cmp	r3, #63	@ 0x3f
 8012168:	d909      	bls.n	801217e <mdns_resp_add_netif+0x46>
 801216a:	4b39      	ldr	r3, [pc, #228]	@ (8012250 <mdns_resp_add_netif+0x118>)
 801216c:	f640 0213 	movw	r2, #2067	@ 0x813
 8012170:	493a      	ldr	r1, [pc, #232]	@ (801225c <mdns_resp_add_netif+0x124>)
 8012172:	4839      	ldr	r0, [pc, #228]	@ (8012258 <mdns_resp_add_netif+0x120>)
 8012174:	f00f f91e 	bl	80213b4 <iprintf>
 8012178:	f06f 0305 	mvn.w	r3, #5
 801217c:	e063      	b.n	8012246 <mdns_resp_add_netif+0x10e>

  LWIP_ASSERT("mdns_resp_add_netif: Double add", NETIF_TO_HOST(netif) == NULL);
 801217e:	4b38      	ldr	r3, [pc, #224]	@ (8012260 <mdns_resp_add_netif+0x128>)
 8012180:	781b      	ldrb	r3, [r3, #0]
 8012182:	68fa      	ldr	r2, [r7, #12]
 8012184:	3308      	adds	r3, #8
 8012186:	009b      	lsls	r3, r3, #2
 8012188:	4413      	add	r3, r2
 801218a:	685b      	ldr	r3, [r3, #4]
 801218c:	2b00      	cmp	r3, #0
 801218e:	d006      	beq.n	801219e <mdns_resp_add_netif+0x66>
 8012190:	4b2f      	ldr	r3, [pc, #188]	@ (8012250 <mdns_resp_add_netif+0x118>)
 8012192:	f640 0215 	movw	r2, #2069	@ 0x815
 8012196:	4933      	ldr	r1, [pc, #204]	@ (8012264 <mdns_resp_add_netif+0x12c>)
 8012198:	482f      	ldr	r0, [pc, #188]	@ (8012258 <mdns_resp_add_netif+0x120>)
 801219a:	f00f f90b 	bl	80213b4 <iprintf>
  mdns = (struct mdns_host *) mem_calloc(1, sizeof(struct mdns_host));
 801219e:	214c      	movs	r1, #76	@ 0x4c
 80121a0:	2001      	movs	r0, #1
 80121a2:	f000 ffeb 	bl	801317c <mem_calloc>
 80121a6:	6178      	str	r0, [r7, #20]
  LWIP_ERROR("mdns_resp_add_netif: Alloc failed", (mdns != NULL), return ERR_MEM);
 80121a8:	697b      	ldr	r3, [r7, #20]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d109      	bne.n	80121c2 <mdns_resp_add_netif+0x8a>
 80121ae:	4b28      	ldr	r3, [pc, #160]	@ (8012250 <mdns_resp_add_netif+0x118>)
 80121b0:	f640 0217 	movw	r2, #2071	@ 0x817
 80121b4:	492c      	ldr	r1, [pc, #176]	@ (8012268 <mdns_resp_add_netif+0x130>)
 80121b6:	4828      	ldr	r0, [pc, #160]	@ (8012258 <mdns_resp_add_netif+0x120>)
 80121b8:	f00f f8fc 	bl	80213b4 <iprintf>
 80121bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80121c0:	e041      	b.n	8012246 <mdns_resp_add_netif+0x10e>

  netif_set_client_data(netif, mdns_netif_client_id, mdns);
 80121c2:	4b27      	ldr	r3, [pc, #156]	@ (8012260 <mdns_resp_add_netif+0x128>)
 80121c4:	781b      	ldrb	r3, [r3, #0]
 80121c6:	68fa      	ldr	r2, [r7, #12]
 80121c8:	3308      	adds	r3, #8
 80121ca:	009b      	lsls	r3, r3, #2
 80121cc:	4413      	add	r3, r2
 80121ce:	697a      	ldr	r2, [r7, #20]
 80121d0:	605a      	str	r2, [r3, #4]

  MEMCPY(&mdns->name, hostname, LWIP_MIN(MDNS_LABEL_MAXLEN, strlen(hostname)));
 80121d2:	697c      	ldr	r4, [r7, #20]
 80121d4:	68b8      	ldr	r0, [r7, #8]
 80121d6:	f7ee f83d 	bl	8000254 <strlen>
 80121da:	4603      	mov	r3, r0
 80121dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80121de:	d804      	bhi.n	80121ea <mdns_resp_add_netif+0xb2>
 80121e0:	68b8      	ldr	r0, [r7, #8]
 80121e2:	f7ee f837 	bl	8000254 <strlen>
 80121e6:	4603      	mov	r3, r0
 80121e8:	e000      	b.n	80121ec <mdns_resp_add_netif+0xb4>
 80121ea:	233f      	movs	r3, #63	@ 0x3f
 80121ec:	461a      	mov	r2, r3
 80121ee:	68b9      	ldr	r1, [r7, #8]
 80121f0:	4620      	mov	r0, r4
 80121f2:	f00f fbc8 	bl	8021986 <memcpy>
  mdns->dns_ttl = dns_ttl;
 80121f6:	697b      	ldr	r3, [r7, #20]
 80121f8:	687a      	ldr	r2, [r7, #4]
 80121fa:	645a      	str	r2, [r3, #68]	@ 0x44
  mdns->probes_sent = 0;
 80121fc:	697b      	ldr	r3, [r7, #20]
 80121fe:	2200      	movs	r2, #0
 8012200:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  mdns->probing_state = MDNS_PROBING_NOT_STARTED;
 8012204:	697b      	ldr	r3, [r7, #20]
 8012206:	2200      	movs	r2, #0
 8012208:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Join multicast groups */
#if LWIP_IPV4
  res = igmp_joingroup_netif(netif, ip_2_ip4(&v4group));
 801220c:	4917      	ldr	r1, [pc, #92]	@ (801226c <mdns_resp_add_netif+0x134>)
 801220e:	68f8      	ldr	r0, [r7, #12]
 8012210:	f00c fbfe 	bl	801ea10 <igmp_joingroup_netif>
 8012214:	4603      	mov	r3, r0
 8012216:	74fb      	strb	r3, [r7, #19]
  if (res != ERR_OK) {
 8012218:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d104      	bne.n	801222a <mdns_resp_add_netif+0xf2>
  if (res != ERR_OK) {
    goto cleanup;
  }
#endif

  mdns_resp_restart(netif);
 8012220:	68f8      	ldr	r0, [r7, #12]
 8012222:	f000 f94f 	bl	80124c4 <mdns_resp_restart>

  return ERR_OK;
 8012226:	2300      	movs	r3, #0
 8012228:	e00d      	b.n	8012246 <mdns_resp_add_netif+0x10e>
    goto cleanup;
 801222a:	bf00      	nop

cleanup:
  mem_free(mdns);
 801222c:	6978      	ldr	r0, [r7, #20]
 801222e:	f000 fd05 	bl	8012c3c <mem_free>
  netif_set_client_data(netif, mdns_netif_client_id, NULL);
 8012232:	4b0b      	ldr	r3, [pc, #44]	@ (8012260 <mdns_resp_add_netif+0x128>)
 8012234:	781b      	ldrb	r3, [r3, #0]
 8012236:	68fa      	ldr	r2, [r7, #12]
 8012238:	3308      	adds	r3, #8
 801223a:	009b      	lsls	r3, r3, #2
 801223c:	4413      	add	r3, r2
 801223e:	2200      	movs	r2, #0
 8012240:	605a      	str	r2, [r3, #4]
  return res;
 8012242:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8012246:	4618      	mov	r0, r3
 8012248:	371c      	adds	r7, #28
 801224a:	46bd      	mov	sp, r7
 801224c:	bd90      	pop	{r4, r7, pc}
 801224e:	bf00      	nop
 8012250:	08023074 	.word	0x08023074
 8012254:	08023210 	.word	0x08023210
 8012258:	080230e0 	.word	0x080230e0
 801225c:	08023234 	.word	0x08023234
 8012260:	20004ba8 	.word	0x20004ba8
 8012264:	0802325c 	.word	0x0802325c
 8012268:	0802327c 	.word	0x0802327c
 801226c:	08027688 	.word	0x08027688

08012270 <mdns_resp_add_service>:
 * @param txt_data Userdata pointer for txt_fn
 * @return service_id if the service was added to the netif, an err_t otherwise
 */
s8_t
mdns_resp_add_service(struct netif *netif, const char *name, const char *service, enum mdns_sd_proto proto, u16_t port, u32_t dns_ttl, service_get_txt_fn_t txt_fn, void *txt_data)
{
 8012270:	b590      	push	{r4, r7, lr}
 8012272:	b089      	sub	sp, #36	@ 0x24
 8012274:	af00      	add	r7, sp, #0
 8012276:	60f8      	str	r0, [r7, #12]
 8012278:	60b9      	str	r1, [r7, #8]
 801227a:	607a      	str	r2, [r7, #4]
 801227c:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  s8_t slot = -1;
 801227e:	23ff      	movs	r3, #255	@ 0xff
 8012280:	77bb      	strb	r3, [r7, #30]
  struct mdns_service *srv;
  struct mdns_host *mdns;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mdns_resp_add_service: netif != NULL", netif);
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d106      	bne.n	8012296 <mdns_resp_add_service+0x26>
 8012288:	4b68      	ldr	r3, [pc, #416]	@ (801242c <mdns_resp_add_service+0x1bc>)
 801228a:	f640 0298 	movw	r2, #2200	@ 0x898
 801228e:	4968      	ldr	r1, [pc, #416]	@ (8012430 <mdns_resp_add_service+0x1c0>)
 8012290:	4868      	ldr	r0, [pc, #416]	@ (8012434 <mdns_resp_add_service+0x1c4>)
 8012292:	f00f f88f 	bl	80213b4 <iprintf>
  mdns = NETIF_TO_HOST(netif);
 8012296:	4b68      	ldr	r3, [pc, #416]	@ (8012438 <mdns_resp_add_service+0x1c8>)
 8012298:	781b      	ldrb	r3, [r3, #0]
 801229a:	68fa      	ldr	r2, [r7, #12]
 801229c:	3308      	adds	r3, #8
 801229e:	009b      	lsls	r3, r3, #2
 80122a0:	4413      	add	r3, r2
 80122a2:	685b      	ldr	r3, [r3, #4]
 80122a4:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mdns_resp_add_service: Not an mdns netif", (mdns != NULL), return ERR_VAL);
 80122a6:	69bb      	ldr	r3, [r7, #24]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d109      	bne.n	80122c0 <mdns_resp_add_service+0x50>
 80122ac:	4b5f      	ldr	r3, [pc, #380]	@ (801242c <mdns_resp_add_service+0x1bc>)
 80122ae:	f640 029a 	movw	r2, #2202	@ 0x89a
 80122b2:	4962      	ldr	r1, [pc, #392]	@ (801243c <mdns_resp_add_service+0x1cc>)
 80122b4:	485f      	ldr	r0, [pc, #380]	@ (8012434 <mdns_resp_add_service+0x1c4>)
 80122b6:	f00f f87d 	bl	80213b4 <iprintf>
 80122ba:	f06f 0305 	mvn.w	r3, #5
 80122be:	e0b1      	b.n	8012424 <mdns_resp_add_service+0x1b4>

  LWIP_ERROR("mdns_resp_add_service: Name too long", (strlen(name) <= MDNS_LABEL_MAXLEN), return ERR_VAL);
 80122c0:	68b8      	ldr	r0, [r7, #8]
 80122c2:	f7ed ffc7 	bl	8000254 <strlen>
 80122c6:	4603      	mov	r3, r0
 80122c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80122ca:	d909      	bls.n	80122e0 <mdns_resp_add_service+0x70>
 80122cc:	4b57      	ldr	r3, [pc, #348]	@ (801242c <mdns_resp_add_service+0x1bc>)
 80122ce:	f640 029c 	movw	r2, #2204	@ 0x89c
 80122d2:	495b      	ldr	r1, [pc, #364]	@ (8012440 <mdns_resp_add_service+0x1d0>)
 80122d4:	4857      	ldr	r0, [pc, #348]	@ (8012434 <mdns_resp_add_service+0x1c4>)
 80122d6:	f00f f86d 	bl	80213b4 <iprintf>
 80122da:	f06f 0305 	mvn.w	r3, #5
 80122de:	e0a1      	b.n	8012424 <mdns_resp_add_service+0x1b4>
  LWIP_ERROR("mdns_resp_add_service: Service too long", (strlen(service) <= MDNS_LABEL_MAXLEN), return ERR_VAL);
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f7ed ffb7 	bl	8000254 <strlen>
 80122e6:	4603      	mov	r3, r0
 80122e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80122ea:	d909      	bls.n	8012300 <mdns_resp_add_service+0x90>
 80122ec:	4b4f      	ldr	r3, [pc, #316]	@ (801242c <mdns_resp_add_service+0x1bc>)
 80122ee:	f640 029d 	movw	r2, #2205	@ 0x89d
 80122f2:	4954      	ldr	r1, [pc, #336]	@ (8012444 <mdns_resp_add_service+0x1d4>)
 80122f4:	484f      	ldr	r0, [pc, #316]	@ (8012434 <mdns_resp_add_service+0x1c4>)
 80122f6:	f00f f85d 	bl	80213b4 <iprintf>
 80122fa:	f06f 0305 	mvn.w	r3, #5
 80122fe:	e091      	b.n	8012424 <mdns_resp_add_service+0x1b4>
  LWIP_ERROR("mdns_resp_add_service: Bad proto (need TCP or UDP)", (proto == DNSSD_PROTO_TCP || proto == DNSSD_PROTO_UDP), return ERR_VAL);
 8012300:	78fb      	ldrb	r3, [r7, #3]
 8012302:	2b01      	cmp	r3, #1
 8012304:	d00c      	beq.n	8012320 <mdns_resp_add_service+0xb0>
 8012306:	78fb      	ldrb	r3, [r7, #3]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d009      	beq.n	8012320 <mdns_resp_add_service+0xb0>
 801230c:	4b47      	ldr	r3, [pc, #284]	@ (801242c <mdns_resp_add_service+0x1bc>)
 801230e:	f640 029e 	movw	r2, #2206	@ 0x89e
 8012312:	494d      	ldr	r1, [pc, #308]	@ (8012448 <mdns_resp_add_service+0x1d8>)
 8012314:	4847      	ldr	r0, [pc, #284]	@ (8012434 <mdns_resp_add_service+0x1c4>)
 8012316:	f00f f84d 	bl	80213b4 <iprintf>
 801231a:	f06f 0305 	mvn.w	r3, #5
 801231e:	e081      	b.n	8012424 <mdns_resp_add_service+0x1b4>

  for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 8012320:	2300      	movs	r3, #0
 8012322:	77fb      	strb	r3, [r7, #31]
 8012324:	e010      	b.n	8012348 <mdns_resp_add_service+0xd8>
    if (mdns->services[i] == NULL) {
 8012326:	f997 201f 	ldrsb.w	r2, [r7, #31]
 801232a:	69bb      	ldr	r3, [r7, #24]
 801232c:	3210      	adds	r2, #16
 801232e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d102      	bne.n	801233c <mdns_resp_add_service+0xcc>
      slot = i;
 8012336:	7ffb      	ldrb	r3, [r7, #31]
 8012338:	77bb      	strb	r3, [r7, #30]
      break;
 801233a:	e009      	b.n	8012350 <mdns_resp_add_service+0xe0>
  for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 801233c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012340:	b2db      	uxtb	r3, r3
 8012342:	3301      	adds	r3, #1
 8012344:	b2db      	uxtb	r3, r3
 8012346:	77fb      	strb	r3, [r7, #31]
 8012348:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801234c:	2b00      	cmp	r3, #0
 801234e:	ddea      	ble.n	8012326 <mdns_resp_add_service+0xb6>
    }
  }
  LWIP_ERROR("mdns_resp_add_service: Service list full (increase MDNS_MAX_SERVICES)", (slot >= 0), return ERR_MEM);
 8012350:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8012354:	2b00      	cmp	r3, #0
 8012356:	da09      	bge.n	801236c <mdns_resp_add_service+0xfc>
 8012358:	4b34      	ldr	r3, [pc, #208]	@ (801242c <mdns_resp_add_service+0x1bc>)
 801235a:	f640 02a6 	movw	r2, #2214	@ 0x8a6
 801235e:	493b      	ldr	r1, [pc, #236]	@ (801244c <mdns_resp_add_service+0x1dc>)
 8012360:	4834      	ldr	r0, [pc, #208]	@ (8012434 <mdns_resp_add_service+0x1c4>)
 8012362:	f00f f827 	bl	80213b4 <iprintf>
 8012366:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801236a:	e05b      	b.n	8012424 <mdns_resp_add_service+0x1b4>

  srv = (struct mdns_service *)mem_calloc(1, sizeof(struct mdns_service));
 801236c:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8012370:	2001      	movs	r0, #1
 8012372:	f000 ff03 	bl	801317c <mem_calloc>
 8012376:	6178      	str	r0, [r7, #20]
  LWIP_ERROR("mdns_resp_add_service: Alloc failed", (srv != NULL), return ERR_MEM);
 8012378:	697b      	ldr	r3, [r7, #20]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d109      	bne.n	8012392 <mdns_resp_add_service+0x122>
 801237e:	4b2b      	ldr	r3, [pc, #172]	@ (801242c <mdns_resp_add_service+0x1bc>)
 8012380:	f640 02a9 	movw	r2, #2217	@ 0x8a9
 8012384:	4932      	ldr	r1, [pc, #200]	@ (8012450 <mdns_resp_add_service+0x1e0>)
 8012386:	482b      	ldr	r0, [pc, #172]	@ (8012434 <mdns_resp_add_service+0x1c4>)
 8012388:	f00f f814 	bl	80213b4 <iprintf>
 801238c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012390:	e048      	b.n	8012424 <mdns_resp_add_service+0x1b4>

  MEMCPY(&srv->name, name, LWIP_MIN(MDNS_LABEL_MAXLEN, strlen(name)));
 8012392:	697b      	ldr	r3, [r7, #20]
 8012394:	f503 7482 	add.w	r4, r3, #260	@ 0x104
 8012398:	68b8      	ldr	r0, [r7, #8]
 801239a:	f7ed ff5b 	bl	8000254 <strlen>
 801239e:	4603      	mov	r3, r0
 80123a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80123a2:	d804      	bhi.n	80123ae <mdns_resp_add_service+0x13e>
 80123a4:	68b8      	ldr	r0, [r7, #8]
 80123a6:	f7ed ff55 	bl	8000254 <strlen>
 80123aa:	4603      	mov	r3, r0
 80123ac:	e000      	b.n	80123b0 <mdns_resp_add_service+0x140>
 80123ae:	233f      	movs	r3, #63	@ 0x3f
 80123b0:	461a      	mov	r2, r3
 80123b2:	68b9      	ldr	r1, [r7, #8]
 80123b4:	4620      	mov	r0, r4
 80123b6:	f00f fae6 	bl	8021986 <memcpy>
  MEMCPY(&srv->service, service, LWIP_MIN(MDNS_LABEL_MAXLEN, strlen(service)));
 80123ba:	697b      	ldr	r3, [r7, #20]
 80123bc:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 80123c0:	6878      	ldr	r0, [r7, #4]
 80123c2:	f7ed ff47 	bl	8000254 <strlen>
 80123c6:	4603      	mov	r3, r0
 80123c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80123ca:	d804      	bhi.n	80123d6 <mdns_resp_add_service+0x166>
 80123cc:	6878      	ldr	r0, [r7, #4]
 80123ce:	f7ed ff41 	bl	8000254 <strlen>
 80123d2:	4603      	mov	r3, r0
 80123d4:	e000      	b.n	80123d8 <mdns_resp_add_service+0x168>
 80123d6:	233f      	movs	r3, #63	@ 0x3f
 80123d8:	461a      	mov	r2, r3
 80123da:	6879      	ldr	r1, [r7, #4]
 80123dc:	4620      	mov	r0, r4
 80123de:	f00f fad2 	bl	8021986 <memcpy>
  srv->txt_fn = txt_fn;
 80123e2:	697b      	ldr	r3, [r7, #20]
 80123e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80123e6:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
  srv->txt_userdata = txt_data;
 80123ea:	697b      	ldr	r3, [r7, #20]
 80123ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80123ee:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
  srv->proto = (u16_t)proto;
 80123f2:	78fb      	ldrb	r3, [r7, #3]
 80123f4:	b29a      	uxth	r2, r3
 80123f6:	697b      	ldr	r3, [r7, #20]
 80123f8:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
  srv->port = port;
 80123fc:	697b      	ldr	r3, [r7, #20]
 80123fe:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8012400:	f8a3 2192 	strh.w	r2, [r3, #402]	@ 0x192
  srv->dns_ttl = dns_ttl;
 8012404:	697b      	ldr	r3, [r7, #20]
 8012406:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012408:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c

  mdns->services[slot] = srv;
 801240c:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8012410:	69bb      	ldr	r3, [r7, #24]
 8012412:	3210      	adds	r2, #16
 8012414:	6979      	ldr	r1, [r7, #20]
 8012416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  mdns_resp_restart(netif);
 801241a:	68f8      	ldr	r0, [r7, #12]
 801241c:	f000 f852 	bl	80124c4 <mdns_resp_restart>

  return slot;
 8012420:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8012424:	4618      	mov	r0, r3
 8012426:	3724      	adds	r7, #36	@ 0x24
 8012428:	46bd      	mov	sp, r7
 801242a:	bd90      	pop	{r4, r7, pc}
 801242c:	08023074 	.word	0x08023074
 8012430:	08023374 	.word	0x08023374
 8012434:	080230e0 	.word	0x080230e0
 8012438:	20004ba8 	.word	0x20004ba8
 801243c:	0802339c 	.word	0x0802339c
 8012440:	080233c8 	.word	0x080233c8
 8012444:	080233f0 	.word	0x080233f0
 8012448:	08023418 	.word	0x08023418
 801244c:	0802344c 	.word	0x0802344c
 8012450:	08023494 	.word	0x08023494

08012454 <mdns_resp_announce>:
 * Send unsolicited answer containing all our known data
 * @param netif The network interface to send on
 */
void
mdns_resp_announce(struct netif *netif)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b084      	sub	sp, #16
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
  struct mdns_host* mdns;
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("mdns_resp_announce: netif != NULL", (netif != NULL), return);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d107      	bne.n	8012472 <mdns_resp_announce+0x1e>
 8012462:	4b13      	ldr	r3, [pc, #76]	@ (80124b0 <mdns_resp_announce+0x5c>)
 8012464:	f640 1211 	movw	r2, #2321	@ 0x911
 8012468:	4912      	ldr	r1, [pc, #72]	@ (80124b4 <mdns_resp_announce+0x60>)
 801246a:	4813      	ldr	r0, [pc, #76]	@ (80124b8 <mdns_resp_announce+0x64>)
 801246c:	f00e ffa2 	bl	80213b4 <iprintf>
 8012470:	e01a      	b.n	80124a8 <mdns_resp_announce+0x54>

  mdns = NETIF_TO_HOST(netif);
 8012472:	4b12      	ldr	r3, [pc, #72]	@ (80124bc <mdns_resp_announce+0x68>)
 8012474:	781b      	ldrb	r3, [r3, #0]
 8012476:	687a      	ldr	r2, [r7, #4]
 8012478:	3308      	adds	r3, #8
 801247a:	009b      	lsls	r3, r3, #2
 801247c:	4413      	add	r3, r2
 801247e:	685b      	ldr	r3, [r3, #4]
 8012480:	60fb      	str	r3, [r7, #12]
  if (mdns == NULL) {
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d00e      	beq.n	80124a6 <mdns_resp_announce+0x52>
    return;
  }

  if (mdns->probing_state == MDNS_PROBING_COMPLETE) {
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 801248e:	2b02      	cmp	r3, #2
 8012490:	d10a      	bne.n	80124a8 <mdns_resp_announce+0x54>
    /* Announce on IPv6 and IPv4 */
#if LWIP_IPV6
    mdns_announce(netif, IP6_ADDR_ANY);
#endif
#if LWIP_IPV4
    if (!ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	3304      	adds	r3, #4
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d005      	beq.n	80124a8 <mdns_resp_announce+0x54>
      mdns_announce(netif, IP4_ADDR_ANY);
 801249c:	4908      	ldr	r1, [pc, #32]	@ (80124c0 <mdns_resp_announce+0x6c>)
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f7fe ffc2 	bl	8011428 <mdns_announce>
 80124a4:	e000      	b.n	80124a8 <mdns_resp_announce+0x54>
    return;
 80124a6:	bf00      	nop
    }
#endif
  } /* else: ip address changed while probing was ongoing? @todo reset counter to restart? */
}
 80124a8:	3710      	adds	r7, #16
 80124aa:	46bd      	mov	sp, r7
 80124ac:	bd80      	pop	{r7, pc}
 80124ae:	bf00      	nop
 80124b0:	08023074 	.word	0x08023074
 80124b4:	08023614 	.word	0x08023614
 80124b8:	080230e0 	.word	0x080230e0
 80124bc:	20004ba8 	.word	0x20004ba8
 80124c0:	08027754 	.word	0x08027754

080124c4 <mdns_resp_restart>:
 * administrative interface is set up after being down
 * @param netif The network interface to send on
 */
void
mdns_resp_restart(struct netif *netif)
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b084      	sub	sp, #16
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
  struct mdns_host* mdns;
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("mdns_resp_restart: netif != NULL", (netif != NULL), return);
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d107      	bne.n	80124e2 <mdns_resp_restart+0x1e>
 80124d2:	4b1d      	ldr	r3, [pc, #116]	@ (8012548 <mdns_resp_restart+0x84>)
 80124d4:	f640 1238 	movw	r2, #2360	@ 0x938
 80124d8:	491c      	ldr	r1, [pc, #112]	@ (801254c <mdns_resp_restart+0x88>)
 80124da:	481d      	ldr	r0, [pc, #116]	@ (8012550 <mdns_resp_restart+0x8c>)
 80124dc:	f00e ff6a 	bl	80213b4 <iprintf>
 80124e0:	e02e      	b.n	8012540 <mdns_resp_restart+0x7c>

  mdns = NETIF_TO_HOST(netif);
 80124e2:	4b1c      	ldr	r3, [pc, #112]	@ (8012554 <mdns_resp_restart+0x90>)
 80124e4:	781b      	ldrb	r3, [r3, #0]
 80124e6:	687a      	ldr	r2, [r7, #4]
 80124e8:	3308      	adds	r3, #8
 80124ea:	009b      	lsls	r3, r3, #2
 80124ec:	4413      	add	r3, r2
 80124ee:	685b      	ldr	r3, [r3, #4]
 80124f0:	60fb      	str	r3, [r7, #12]
  if (mdns == NULL) {
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d022      	beq.n	801253e <mdns_resp_restart+0x7a>
    return;
  }

  if (mdns->probing_state == MDNS_PROBING_ONGOING) {
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80124fe:	2b01      	cmp	r3, #1
 8012500:	d103      	bne.n	801250a <mdns_resp_restart+0x46>
    sys_untimeout(mdns_probe, netif);
 8012502:	6879      	ldr	r1, [r7, #4]
 8012504:	4814      	ldr	r0, [pc, #80]	@ (8012558 <mdns_resp_restart+0x94>)
 8012506:	f008 fc05 	bl	801ad14 <sys_untimeout>
  }
  /* @todo if we've failed 15 times within a 10 second period we MUST wait 5 seconds (or wait 5 seconds every time except first)*/
  mdns->probes_sent = 0;
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	2200      	movs	r2, #0
 801250e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  mdns->probing_state = MDNS_PROBING_ONGOING;
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	2201      	movs	r2, #1
 8012516:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
  sys_timeout(MDNS_INITIAL_PROBE_DELAY_MS, mdns_probe, netif);
 801251a:	f00e fe4b 	bl	80211b4 <rand>
 801251e:	4603      	mov	r3, r0
 8012520:	461a      	mov	r2, r3
 8012522:	4b0e      	ldr	r3, [pc, #56]	@ (801255c <mdns_resp_restart+0x98>)
 8012524:	fba3 1302 	umull	r1, r3, r3, r2
 8012528:	091b      	lsrs	r3, r3, #4
 801252a:	21fa      	movs	r1, #250	@ 0xfa
 801252c:	fb01 f303 	mul.w	r3, r1, r3
 8012530:	1ad3      	subs	r3, r2, r3
 8012532:	687a      	ldr	r2, [r7, #4]
 8012534:	4908      	ldr	r1, [pc, #32]	@ (8012558 <mdns_resp_restart+0x94>)
 8012536:	4618      	mov	r0, r3
 8012538:	f008 fbc6 	bl	801acc8 <sys_timeout>
 801253c:	e000      	b.n	8012540 <mdns_resp_restart+0x7c>
    return;
 801253e:	bf00      	nop
}
 8012540:	3710      	adds	r7, #16
 8012542:	46bd      	mov	sp, r7
 8012544:	bd80      	pop	{r7, pc}
 8012546:	bf00      	nop
 8012548:	08023074 	.word	0x08023074
 801254c:	08023638 	.word	0x08023638
 8012550:	080230e0 	.word	0x080230e0
 8012554:	20004ba8 	.word	0x20004ba8
 8012558:	080120a5 	.word	0x080120a5
 801255c:	10624dd3 	.word	0x10624dd3

08012560 <mdns_resp_init>:
 * @ingroup mdns
 * Initiate MDNS responder. Will open UDP sockets on port 5353
 */
void
mdns_resp_init(void)
{
 8012560:	b580      	push	{r7, lr}
 8012562:	b082      	sub	sp, #8
 8012564:	af00      	add	r7, sp, #0
  err_t res;

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by udp_new() */

  mdns_pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8012566:	202e      	movs	r0, #46	@ 0x2e
 8012568:	f009 f92a 	bl	801b7c0 <udp_new_ip_type>
 801256c:	4603      	mov	r3, r0
 801256e:	4a1b      	ldr	r2, [pc, #108]	@ (80125dc <mdns_resp_init+0x7c>)
 8012570:	6013      	str	r3, [r2, #0]
  LWIP_ASSERT("Failed to allocate pcb", mdns_pcb != NULL);
 8012572:	4b1a      	ldr	r3, [pc, #104]	@ (80125dc <mdns_resp_init+0x7c>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d106      	bne.n	8012588 <mdns_resp_init+0x28>
 801257a:	4b19      	ldr	r3, [pc, #100]	@ (80125e0 <mdns_resp_init+0x80>)
 801257c:	f640 1254 	movw	r2, #2388	@ 0x954
 8012580:	4918      	ldr	r1, [pc, #96]	@ (80125e4 <mdns_resp_init+0x84>)
 8012582:	4819      	ldr	r0, [pc, #100]	@ (80125e8 <mdns_resp_init+0x88>)
 8012584:	f00e ff16 	bl	80213b4 <iprintf>
#if LWIP_MULTICAST_TX_OPTIONS
  udp_set_multicast_ttl(mdns_pcb, MDNS_TTL);
 8012588:	4b14      	ldr	r3, [pc, #80]	@ (80125dc <mdns_resp_init+0x7c>)
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	22ff      	movs	r2, #255	@ 0xff
 801258e:	775a      	strb	r2, [r3, #29]
#else
  mdns_pcb->ttl = MDNS_TTL;
#endif
  res = udp_bind(mdns_pcb, IP_ANY_TYPE, LWIP_IANA_PORT_MDNS);
 8012590:	4b12      	ldr	r3, [pc, #72]	@ (80125dc <mdns_resp_init+0x7c>)
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	f241 42e9 	movw	r2, #5353	@ 0x14e9
 8012598:	4914      	ldr	r1, [pc, #80]	@ (80125ec <mdns_resp_init+0x8c>)
 801259a:	4618      	mov	r0, r3
 801259c:	f008 ff9e 	bl	801b4dc <udp_bind>
 80125a0:	4603      	mov	r3, r0
 80125a2:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(res); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("Failed to bind pcb", res == ERR_OK);
 80125a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d006      	beq.n	80125ba <mdns_resp_init+0x5a>
 80125ac:	4b0c      	ldr	r3, [pc, #48]	@ (80125e0 <mdns_resp_init+0x80>)
 80125ae:	f640 125c 	movw	r2, #2396	@ 0x95c
 80125b2:	490f      	ldr	r1, [pc, #60]	@ (80125f0 <mdns_resp_init+0x90>)
 80125b4:	480c      	ldr	r0, [pc, #48]	@ (80125e8 <mdns_resp_init+0x88>)
 80125b6:	f00e fefd 	bl	80213b4 <iprintf>
  udp_recv(mdns_pcb, mdns_recv, NULL);
 80125ba:	4b08      	ldr	r3, [pc, #32]	@ (80125dc <mdns_resp_init+0x7c>)
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	2200      	movs	r2, #0
 80125c0:	490c      	ldr	r1, [pc, #48]	@ (80125f4 <mdns_resp_init+0x94>)
 80125c2:	4618      	mov	r0, r3
 80125c4:	f009 f880 	bl	801b6c8 <udp_recv>

  mdns_netif_client_id = netif_alloc_client_data_id();
 80125c8:	f001 fa14 	bl	80139f4 <netif_alloc_client_data_id>
 80125cc:	4603      	mov	r3, r0
 80125ce:	461a      	mov	r2, r3
 80125d0:	4b09      	ldr	r3, [pc, #36]	@ (80125f8 <mdns_resp_init+0x98>)
 80125d2:	701a      	strb	r2, [r3, #0]

#if MDNS_RESP_USENETIF_EXTCALLBACK
  /* register for netif events when started on first netif */
  netif_add_ext_callback(&netif_callback, mdns_netif_ext_status_callback);
#endif
}
 80125d4:	bf00      	nop
 80125d6:	3708      	adds	r7, #8
 80125d8:	46bd      	mov	sp, r7
 80125da:	bd80      	pop	{r7, pc}
 80125dc:	20004bac 	.word	0x20004bac
 80125e0:	08023074 	.word	0x08023074
 80125e4:	0802365c 	.word	0x0802365c
 80125e8:	080230e0 	.word	0x080230e0
 80125ec:	08027754 	.word	0x08027754
 80125f0:	08023674 	.word	0x08023674
 80125f4:	08011dc5 	.word	0x08011dc5
 80125f8:	20004ba8 	.word	0x20004ba8

080125fc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80125fc:	b480      	push	{r7}
 80125fe:	b083      	sub	sp, #12
 8012600:	af00      	add	r7, sp, #0
 8012602:	4603      	mov	r3, r0
 8012604:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8012606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801260a:	021b      	lsls	r3, r3, #8
 801260c:	b21a      	sxth	r2, r3
 801260e:	88fb      	ldrh	r3, [r7, #6]
 8012610:	0a1b      	lsrs	r3, r3, #8
 8012612:	b29b      	uxth	r3, r3
 8012614:	b21b      	sxth	r3, r3
 8012616:	4313      	orrs	r3, r2
 8012618:	b21b      	sxth	r3, r3
 801261a:	b29b      	uxth	r3, r3
}
 801261c:	4618      	mov	r0, r3
 801261e:	370c      	adds	r7, #12
 8012620:	46bd      	mov	sp, r7
 8012622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012626:	4770      	bx	lr

08012628 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012628:	b480      	push	{r7}
 801262a:	b083      	sub	sp, #12
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	061a      	lsls	r2, r3, #24
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	021b      	lsls	r3, r3, #8
 8012638:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801263c:	431a      	orrs	r2, r3
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	0a1b      	lsrs	r3, r3, #8
 8012642:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012646:	431a      	orrs	r2, r3
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	0e1b      	lsrs	r3, r3, #24
 801264c:	4313      	orrs	r3, r2
}
 801264e:	4618      	mov	r0, r3
 8012650:	370c      	adds	r7, #12
 8012652:	46bd      	mov	sp, r7
 8012654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012658:	4770      	bx	lr

0801265a <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 801265a:	b580      	push	{r7, lr}
 801265c:	b086      	sub	sp, #24
 801265e:	af00      	add	r7, sp, #0
 8012660:	60f8      	str	r0, [r7, #12]
 8012662:	60b9      	str	r1, [r7, #8]
 8012664:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8012666:	68b8      	ldr	r0, [r7, #8]
 8012668:	f7ed fdf4 	bl	8000254 <strlen>
 801266c:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 801266e:	693b      	ldr	r3, [r7, #16]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d101      	bne.n	8012678 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	e022      	b.n	80126be <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	617b      	str	r3, [r7, #20]
 801267c:	e012      	b.n	80126a4 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	781a      	ldrb	r2, [r3, #0]
 8012682:	68bb      	ldr	r3, [r7, #8]
 8012684:	781b      	ldrb	r3, [r3, #0]
 8012686:	429a      	cmp	r2, r3
 8012688:	d109      	bne.n	801269e <lwip_strnstr+0x44>
 801268a:	693a      	ldr	r2, [r7, #16]
 801268c:	68b9      	ldr	r1, [r7, #8]
 801268e:	6978      	ldr	r0, [r7, #20]
 8012690:	f00f f875 	bl	802177e <strncmp>
 8012694:	4603      	mov	r3, r0
 8012696:	2b00      	cmp	r3, #0
 8012698:	d101      	bne.n	801269e <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 801269a:	697b      	ldr	r3, [r7, #20]
 801269c:	e00f      	b.n	80126be <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801269e:	697b      	ldr	r3, [r7, #20]
 80126a0:	3301      	adds	r3, #1
 80126a2:	617b      	str	r3, [r7, #20]
 80126a4:	697b      	ldr	r3, [r7, #20]
 80126a6:	781b      	ldrb	r3, [r3, #0]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d007      	beq.n	80126bc <lwip_strnstr+0x62>
 80126ac:	697a      	ldr	r2, [r7, #20]
 80126ae:	693b      	ldr	r3, [r7, #16]
 80126b0:	441a      	add	r2, r3
 80126b2:	68f9      	ldr	r1, [r7, #12]
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	440b      	add	r3, r1
 80126b8:	429a      	cmp	r2, r3
 80126ba:	d9e0      	bls.n	801267e <lwip_strnstr+0x24>
    }
  }
  return NULL;
 80126bc:	2300      	movs	r3, #0
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3718      	adds	r7, #24
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}

080126c6 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 80126c6:	b480      	push	{r7}
 80126c8:	b085      	sub	sp, #20
 80126ca:	af00      	add	r7, sp, #0
 80126cc:	6078      	str	r0, [r7, #4]
 80126ce:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	1c5a      	adds	r2, r3, #1
 80126d4:	607a      	str	r2, [r7, #4]
 80126d6:	781b      	ldrb	r3, [r3, #0]
 80126d8:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	1c5a      	adds	r2, r3, #1
 80126de:	603a      	str	r2, [r7, #0]
 80126e0:	781b      	ldrb	r3, [r3, #0]
 80126e2:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 80126e4:	7bfa      	ldrb	r2, [r7, #15]
 80126e6:	7bbb      	ldrb	r3, [r7, #14]
 80126e8:	429a      	cmp	r2, r3
 80126ea:	d016      	beq.n	801271a <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 80126ec:	7bfb      	ldrb	r3, [r7, #15]
 80126ee:	f043 0320 	orr.w	r3, r3, #32
 80126f2:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80126f4:	7b7b      	ldrb	r3, [r7, #13]
 80126f6:	2b60      	cmp	r3, #96	@ 0x60
 80126f8:	d90c      	bls.n	8012714 <lwip_stricmp+0x4e>
 80126fa:	7b7b      	ldrb	r3, [r7, #13]
 80126fc:	2b7a      	cmp	r3, #122	@ 0x7a
 80126fe:	d809      	bhi.n	8012714 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8012700:	7bbb      	ldrb	r3, [r7, #14]
 8012702:	f043 0320 	orr.w	r3, r3, #32
 8012706:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 8012708:	7b7a      	ldrb	r2, [r7, #13]
 801270a:	7b3b      	ldrb	r3, [r7, #12]
 801270c:	429a      	cmp	r2, r3
 801270e:	d003      	beq.n	8012718 <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8012710:	2301      	movs	r3, #1
 8012712:	e006      	b.n	8012722 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8012714:	2301      	movs	r3, #1
 8012716:	e004      	b.n	8012722 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8012718:	bf00      	nop
      }
    }
  } while (c1 != 0);
 801271a:	7bfb      	ldrb	r3, [r7, #15]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d1d7      	bne.n	80126d0 <lwip_stricmp+0xa>
  return 0;
 8012720:	2300      	movs	r3, #0
}
 8012722:	4618      	mov	r0, r3
 8012724:	3714      	adds	r7, #20
 8012726:	46bd      	mov	sp, r7
 8012728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272c:	4770      	bx	lr

0801272e <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 801272e:	b480      	push	{r7}
 8012730:	b087      	sub	sp, #28
 8012732:	af00      	add	r7, sp, #0
 8012734:	60f8      	str	r0, [r7, #12]
 8012736:	60b9      	str	r1, [r7, #8]
 8012738:	607a      	str	r2, [r7, #4]
  char c1, c2;

  do {
    c1 = *str1++;
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	1c5a      	adds	r2, r3, #1
 801273e:	60fa      	str	r2, [r7, #12]
 8012740:	781b      	ldrb	r3, [r3, #0]
 8012742:	75fb      	strb	r3, [r7, #23]
    c2 = *str2++;
 8012744:	68bb      	ldr	r3, [r7, #8]
 8012746:	1c5a      	adds	r2, r3, #1
 8012748:	60ba      	str	r2, [r7, #8]
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	75bb      	strb	r3, [r7, #22]
    if (c1 != c2) {
 801274e:	7dfa      	ldrb	r2, [r7, #23]
 8012750:	7dbb      	ldrb	r3, [r7, #22]
 8012752:	429a      	cmp	r2, r3
 8012754:	d016      	beq.n	8012784 <lwip_strnicmp+0x56>
      char c1_upc = c1 | 0x20;
 8012756:	7dfb      	ldrb	r3, [r7, #23]
 8012758:	f043 0320 	orr.w	r3, r3, #32
 801275c:	757b      	strb	r3, [r7, #21]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801275e:	7d7b      	ldrb	r3, [r7, #21]
 8012760:	2b60      	cmp	r3, #96	@ 0x60
 8012762:	d90c      	bls.n	801277e <lwip_strnicmp+0x50>
 8012764:	7d7b      	ldrb	r3, [r7, #21]
 8012766:	2b7a      	cmp	r3, #122	@ 0x7a
 8012768:	d809      	bhi.n	801277e <lwip_strnicmp+0x50>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 801276a:	7dbb      	ldrb	r3, [r7, #22]
 801276c:	f043 0320 	orr.w	r3, r3, #32
 8012770:	753b      	strb	r3, [r7, #20]
        if (c1_upc != c2_upc) {
 8012772:	7d7a      	ldrb	r2, [r7, #21]
 8012774:	7d3b      	ldrb	r3, [r7, #20]
 8012776:	429a      	cmp	r2, r3
 8012778:	d003      	beq.n	8012782 <lwip_strnicmp+0x54>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 801277a:	2301      	movs	r3, #1
 801277c:	e00c      	b.n	8012798 <lwip_strnicmp+0x6a>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 801277e:	2301      	movs	r3, #1
 8012780:	e00a      	b.n	8012798 <lwip_strnicmp+0x6a>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8012782:	bf00      	nop
      }
    }
    len--;
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	3b01      	subs	r3, #1
 8012788:	607b      	str	r3, [r7, #4]
  } while ((len != 0) && (c1 != 0));
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d002      	beq.n	8012796 <lwip_strnicmp+0x68>
 8012790:	7dfb      	ldrb	r3, [r7, #23]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d1d1      	bne.n	801273a <lwip_strnicmp+0xc>
  return 0;
 8012796:	2300      	movs	r3, #0
}
 8012798:	4618      	mov	r0, r3
 801279a:	371c      	adds	r7, #28
 801279c:	46bd      	mov	sp, r7
 801279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a2:	4770      	bx	lr

080127a4 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char *result, size_t bufsize, int number)
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	b088      	sub	sp, #32
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	60f8      	str	r0, [r7, #12]
 80127ac:	60b9      	str	r1, [r7, #8]
 80127ae:	607a      	str	r2, [r7, #4]
  char *res = result;
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	61fb      	str	r3, [r7, #28]
  char *tmp = result + bufsize - 1;
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	3b01      	subs	r3, #1
 80127b8:	68fa      	ldr	r2, [r7, #12]
 80127ba:	4413      	add	r3, r2
 80127bc:	61bb      	str	r3, [r7, #24]
  int n = (number >= 0) ? number : -number;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	bfb8      	it	lt
 80127c4:	425b      	neglt	r3, r3
 80127c6:	617b      	str	r3, [r7, #20]

  /* handle invalid bufsize */
  if (bufsize < 2) {
 80127c8:	68bb      	ldr	r3, [r7, #8]
 80127ca:	2b01      	cmp	r3, #1
 80127cc:	d806      	bhi.n	80127dc <lwip_itoa+0x38>
    if (bufsize == 1) {
 80127ce:	68bb      	ldr	r3, [r7, #8]
 80127d0:	2b01      	cmp	r3, #1
 80127d2:	d154      	bne.n	801287e <lwip_itoa+0xda>
      *result = 0;
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	2200      	movs	r2, #0
 80127d8:	701a      	strb	r2, [r3, #0]
    }
    return;
 80127da:	e050      	b.n	801287e <lwip_itoa+0xda>
  }

  /* First, add sign */
  if (number < 0) {
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	da04      	bge.n	80127ec <lwip_itoa+0x48>
    *res++ = '-';
 80127e2:	69fb      	ldr	r3, [r7, #28]
 80127e4:	1c5a      	adds	r2, r3, #1
 80127e6:	61fa      	str	r2, [r7, #28]
 80127e8:	222d      	movs	r2, #45	@ 0x2d
 80127ea:	701a      	strb	r2, [r3, #0]
  }
  /* Then create the string from the end and stop if buffer full,
     and ensure output string is zero terminated */
  *tmp = 0;
 80127ec:	69bb      	ldr	r3, [r7, #24]
 80127ee:	2200      	movs	r2, #0
 80127f0:	701a      	strb	r2, [r3, #0]
  while ((n != 0) && (tmp > res)) {
 80127f2:	e01c      	b.n	801282e <lwip_itoa+0x8a>
    char val = (char)('0' + (n % 10));
 80127f4:	697a      	ldr	r2, [r7, #20]
 80127f6:	4b24      	ldr	r3, [pc, #144]	@ (8012888 <lwip_itoa+0xe4>)
 80127f8:	fb83 1302 	smull	r1, r3, r3, r2
 80127fc:	1099      	asrs	r1, r3, #2
 80127fe:	17d3      	asrs	r3, r2, #31
 8012800:	1ac9      	subs	r1, r1, r3
 8012802:	460b      	mov	r3, r1
 8012804:	009b      	lsls	r3, r3, #2
 8012806:	440b      	add	r3, r1
 8012808:	005b      	lsls	r3, r3, #1
 801280a:	1ad1      	subs	r1, r2, r3
 801280c:	b2cb      	uxtb	r3, r1
 801280e:	3330      	adds	r3, #48	@ 0x30
 8012810:	74fb      	strb	r3, [r7, #19]
    tmp--;
 8012812:	69bb      	ldr	r3, [r7, #24]
 8012814:	3b01      	subs	r3, #1
 8012816:	61bb      	str	r3, [r7, #24]
    *tmp = val;
 8012818:	69bb      	ldr	r3, [r7, #24]
 801281a:	7cfa      	ldrb	r2, [r7, #19]
 801281c:	701a      	strb	r2, [r3, #0]
    n = n / 10;
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	4a19      	ldr	r2, [pc, #100]	@ (8012888 <lwip_itoa+0xe4>)
 8012822:	fb82 1203 	smull	r1, r2, r2, r3
 8012826:	1092      	asrs	r2, r2, #2
 8012828:	17db      	asrs	r3, r3, #31
 801282a:	1ad3      	subs	r3, r2, r3
 801282c:	617b      	str	r3, [r7, #20]
  while ((n != 0) && (tmp > res)) {
 801282e:	697b      	ldr	r3, [r7, #20]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d003      	beq.n	801283c <lwip_itoa+0x98>
 8012834:	69ba      	ldr	r2, [r7, #24]
 8012836:	69fb      	ldr	r3, [r7, #28]
 8012838:	429a      	cmp	r2, r3
 801283a:	d8db      	bhi.n	80127f4 <lwip_itoa+0x50>
  }
  if (n) {
 801283c:	697b      	ldr	r3, [r7, #20]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d003      	beq.n	801284a <lwip_itoa+0xa6>
    /* buffer is too small */
    *result = 0;
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	2200      	movs	r2, #0
 8012846:	701a      	strb	r2, [r3, #0]
    return;
 8012848:	e01a      	b.n	8012880 <lwip_itoa+0xdc>
  }
  if (*tmp == 0) {
 801284a:	69bb      	ldr	r3, [r7, #24]
 801284c:	781b      	ldrb	r3, [r3, #0]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d10a      	bne.n	8012868 <lwip_itoa+0xc4>
    /* Nothing added? */
    *res++ = '0';
 8012852:	69fb      	ldr	r3, [r7, #28]
 8012854:	1c5a      	adds	r2, r3, #1
 8012856:	61fa      	str	r2, [r7, #28]
 8012858:	2230      	movs	r2, #48	@ 0x30
 801285a:	701a      	strb	r2, [r3, #0]
    *res++ = 0;
 801285c:	69fb      	ldr	r3, [r7, #28]
 801285e:	1c5a      	adds	r2, r3, #1
 8012860:	61fa      	str	r2, [r7, #28]
 8012862:	2200      	movs	r2, #0
 8012864:	701a      	strb	r2, [r3, #0]
    return;
 8012866:	e00b      	b.n	8012880 <lwip_itoa+0xdc>
  }
  /* move from temporary buffer to output buffer (sign is not moved) */
  memmove(res, tmp, (size_t)((result + bufsize) - tmp));
 8012868:	68fa      	ldr	r2, [r7, #12]
 801286a:	68bb      	ldr	r3, [r7, #8]
 801286c:	441a      	add	r2, r3
 801286e:	69bb      	ldr	r3, [r7, #24]
 8012870:	1ad3      	subs	r3, r2, r3
 8012872:	461a      	mov	r2, r3
 8012874:	69b9      	ldr	r1, [r7, #24]
 8012876:	69f8      	ldr	r0, [r7, #28]
 8012878:	f00e ff52 	bl	8021720 <memmove>
 801287c:	e000      	b.n	8012880 <lwip_itoa+0xdc>
    return;
 801287e:	bf00      	nop
}
 8012880:	3720      	adds	r7, #32
 8012882:	46bd      	mov	sp, r7
 8012884:	bd80      	pop	{r7, pc}
 8012886:	bf00      	nop
 8012888:	66666667 	.word	0x66666667

0801288c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 801288c:	b480      	push	{r7}
 801288e:	b089      	sub	sp, #36	@ 0x24
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
 8012894:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 801289a:	2300      	movs	r3, #0
 801289c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 801289e:	2300      	movs	r3, #0
 80128a0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80128a2:	69fb      	ldr	r3, [r7, #28]
 80128a4:	f003 0301 	and.w	r3, r3, #1
 80128a8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80128aa:	693b      	ldr	r3, [r7, #16]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d00d      	beq.n	80128cc <lwip_standard_chksum+0x40>
 80128b0:	683b      	ldr	r3, [r7, #0]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	dd0a      	ble.n	80128cc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80128b6:	69fa      	ldr	r2, [r7, #28]
 80128b8:	1c53      	adds	r3, r2, #1
 80128ba:	61fb      	str	r3, [r7, #28]
 80128bc:	f107 030e 	add.w	r3, r7, #14
 80128c0:	3301      	adds	r3, #1
 80128c2:	7812      	ldrb	r2, [r2, #0]
 80128c4:	701a      	strb	r2, [r3, #0]
    len--;
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	3b01      	subs	r3, #1
 80128ca:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80128cc:	69fb      	ldr	r3, [r7, #28]
 80128ce:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80128d0:	e00a      	b.n	80128e8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80128d2:	69bb      	ldr	r3, [r7, #24]
 80128d4:	1c9a      	adds	r2, r3, #2
 80128d6:	61ba      	str	r2, [r7, #24]
 80128d8:	881b      	ldrh	r3, [r3, #0]
 80128da:	461a      	mov	r2, r3
 80128dc:	697b      	ldr	r3, [r7, #20]
 80128de:	4413      	add	r3, r2
 80128e0:	617b      	str	r3, [r7, #20]
    len -= 2;
 80128e2:	683b      	ldr	r3, [r7, #0]
 80128e4:	3b02      	subs	r3, #2
 80128e6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	2b01      	cmp	r3, #1
 80128ec:	dcf1      	bgt.n	80128d2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80128ee:	683b      	ldr	r3, [r7, #0]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	dd04      	ble.n	80128fe <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80128f4:	f107 030e 	add.w	r3, r7, #14
 80128f8:	69ba      	ldr	r2, [r7, #24]
 80128fa:	7812      	ldrb	r2, [r2, #0]
 80128fc:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80128fe:	89fb      	ldrh	r3, [r7, #14]
 8012900:	461a      	mov	r2, r3
 8012902:	697b      	ldr	r3, [r7, #20]
 8012904:	4413      	add	r3, r2
 8012906:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8012908:	697b      	ldr	r3, [r7, #20]
 801290a:	0c1a      	lsrs	r2, r3, #16
 801290c:	697b      	ldr	r3, [r7, #20]
 801290e:	b29b      	uxth	r3, r3
 8012910:	4413      	add	r3, r2
 8012912:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8012914:	697b      	ldr	r3, [r7, #20]
 8012916:	0c1a      	lsrs	r2, r3, #16
 8012918:	697b      	ldr	r3, [r7, #20]
 801291a:	b29b      	uxth	r3, r3
 801291c:	4413      	add	r3, r2
 801291e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8012920:	693b      	ldr	r3, [r7, #16]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d007      	beq.n	8012936 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8012926:	697b      	ldr	r3, [r7, #20]
 8012928:	021b      	lsls	r3, r3, #8
 801292a:	b29a      	uxth	r2, r3
 801292c:	697b      	ldr	r3, [r7, #20]
 801292e:	0a1b      	lsrs	r3, r3, #8
 8012930:	b2db      	uxtb	r3, r3
 8012932:	4313      	orrs	r3, r2
 8012934:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8012936:	697b      	ldr	r3, [r7, #20]
 8012938:	b29b      	uxth	r3, r3
}
 801293a:	4618      	mov	r0, r3
 801293c:	3724      	adds	r7, #36	@ 0x24
 801293e:	46bd      	mov	sp, r7
 8012940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012944:	4770      	bx	lr

08012946 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8012946:	b580      	push	{r7, lr}
 8012948:	b082      	sub	sp, #8
 801294a:	af00      	add	r7, sp, #0
 801294c:	6078      	str	r0, [r7, #4]
 801294e:	460b      	mov	r3, r1
 8012950:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8012952:	887b      	ldrh	r3, [r7, #2]
 8012954:	4619      	mov	r1, r3
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	f7ff ff98 	bl	801288c <lwip_standard_chksum>
 801295c:	4603      	mov	r3, r0
 801295e:	43db      	mvns	r3, r3
 8012960:	b29b      	uxth	r3, r3
}
 8012962:	4618      	mov	r0, r3
 8012964:	3708      	adds	r7, #8
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}

0801296a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801296a:	b580      	push	{r7, lr}
 801296c:	b082      	sub	sp, #8
 801296e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8012970:	2300      	movs	r3, #0
 8012972:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8012974:	f00d fd40 	bl	80203f8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8012978:	f000 f8d6 	bl	8012b28 <mem_init>
  memp_init();
 801297c:	f000 fc30 	bl	80131e0 <memp_init>
  pbuf_init();
  netif_init();
 8012980:	f000 fd38 	bl	80133f4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8012984:	f008 fa72 	bl	801ae6c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8012988:	f002 f866 	bl	8014a58 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
 801298c:	f00b fec2 	bl	801e714 <igmp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8012990:	f008 f978 	bl	801ac84 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8012994:	bf00      	nop
 8012996:	3708      	adds	r7, #8
 8012998:	46bd      	mov	sp, r7
 801299a:	bd80      	pop	{r7, pc}

0801299c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801299c:	b480      	push	{r7}
 801299e:	b083      	sub	sp, #12
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	4603      	mov	r3, r0
 80129a4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80129a6:	4b05      	ldr	r3, [pc, #20]	@ (80129bc <ptr_to_mem+0x20>)
 80129a8:	681a      	ldr	r2, [r3, #0]
 80129aa:	88fb      	ldrh	r3, [r7, #6]
 80129ac:	4413      	add	r3, r2
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	370c      	adds	r7, #12
 80129b2:	46bd      	mov	sp, r7
 80129b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b8:	4770      	bx	lr
 80129ba:	bf00      	nop
 80129bc:	20004bcc 	.word	0x20004bcc

080129c0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80129c0:	b480      	push	{r7}
 80129c2:	b083      	sub	sp, #12
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80129c8:	4b05      	ldr	r3, [pc, #20]	@ (80129e0 <mem_to_ptr+0x20>)
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	687a      	ldr	r2, [r7, #4]
 80129ce:	1ad3      	subs	r3, r2, r3
 80129d0:	b29b      	uxth	r3, r3
}
 80129d2:	4618      	mov	r0, r3
 80129d4:	370c      	adds	r7, #12
 80129d6:	46bd      	mov	sp, r7
 80129d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129dc:	4770      	bx	lr
 80129de:	bf00      	nop
 80129e0:	20004bcc 	.word	0x20004bcc

080129e4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80129e4:	b590      	push	{r4, r7, lr}
 80129e6:	b085      	sub	sp, #20
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80129ec:	4b45      	ldr	r3, [pc, #276]	@ (8012b04 <plug_holes+0x120>)
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	687a      	ldr	r2, [r7, #4]
 80129f2:	429a      	cmp	r2, r3
 80129f4:	d206      	bcs.n	8012a04 <plug_holes+0x20>
 80129f6:	4b44      	ldr	r3, [pc, #272]	@ (8012b08 <plug_holes+0x124>)
 80129f8:	f240 12df 	movw	r2, #479	@ 0x1df
 80129fc:	4943      	ldr	r1, [pc, #268]	@ (8012b0c <plug_holes+0x128>)
 80129fe:	4844      	ldr	r0, [pc, #272]	@ (8012b10 <plug_holes+0x12c>)
 8012a00:	f00e fcd8 	bl	80213b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012a04:	4b43      	ldr	r3, [pc, #268]	@ (8012b14 <plug_holes+0x130>)
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	687a      	ldr	r2, [r7, #4]
 8012a0a:	429a      	cmp	r2, r3
 8012a0c:	d306      	bcc.n	8012a1c <plug_holes+0x38>
 8012a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8012b08 <plug_holes+0x124>)
 8012a10:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8012a14:	4940      	ldr	r1, [pc, #256]	@ (8012b18 <plug_holes+0x134>)
 8012a16:	483e      	ldr	r0, [pc, #248]	@ (8012b10 <plug_holes+0x12c>)
 8012a18:	f00e fccc 	bl	80213b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	791b      	ldrb	r3, [r3, #4]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d006      	beq.n	8012a32 <plug_holes+0x4e>
 8012a24:	4b38      	ldr	r3, [pc, #224]	@ (8012b08 <plug_holes+0x124>)
 8012a26:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8012a2a:	493c      	ldr	r1, [pc, #240]	@ (8012b1c <plug_holes+0x138>)
 8012a2c:	4838      	ldr	r0, [pc, #224]	@ (8012b10 <plug_holes+0x12c>)
 8012a2e:	f00e fcc1 	bl	80213b4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	881b      	ldrh	r3, [r3, #0]
 8012a36:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012a3a:	d906      	bls.n	8012a4a <plug_holes+0x66>
 8012a3c:	4b32      	ldr	r3, [pc, #200]	@ (8012b08 <plug_holes+0x124>)
 8012a3e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8012a42:	4937      	ldr	r1, [pc, #220]	@ (8012b20 <plug_holes+0x13c>)
 8012a44:	4832      	ldr	r0, [pc, #200]	@ (8012b10 <plug_holes+0x12c>)
 8012a46:	f00e fcb5 	bl	80213b4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	881b      	ldrh	r3, [r3, #0]
 8012a4e:	4618      	mov	r0, r3
 8012a50:	f7ff ffa4 	bl	801299c <ptr_to_mem>
 8012a54:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8012a56:	687a      	ldr	r2, [r7, #4]
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d024      	beq.n	8012aa8 <plug_holes+0xc4>
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	791b      	ldrb	r3, [r3, #4]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d120      	bne.n	8012aa8 <plug_holes+0xc4>
 8012a66:	4b2b      	ldr	r3, [pc, #172]	@ (8012b14 <plug_holes+0x130>)
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	68fa      	ldr	r2, [r7, #12]
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	d01b      	beq.n	8012aa8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8012a70:	4b2c      	ldr	r3, [pc, #176]	@ (8012b24 <plug_holes+0x140>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	68fa      	ldr	r2, [r7, #12]
 8012a76:	429a      	cmp	r2, r3
 8012a78:	d102      	bne.n	8012a80 <plug_holes+0x9c>
      lfree = mem;
 8012a7a:	4a2a      	ldr	r2, [pc, #168]	@ (8012b24 <plug_holes+0x140>)
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	881a      	ldrh	r2, [r3, #0]
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	881b      	ldrh	r3, [r3, #0]
 8012a8c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012a90:	d00a      	beq.n	8012aa8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	881b      	ldrh	r3, [r3, #0]
 8012a96:	4618      	mov	r0, r3
 8012a98:	f7ff ff80 	bl	801299c <ptr_to_mem>
 8012a9c:	4604      	mov	r4, r0
 8012a9e:	6878      	ldr	r0, [r7, #4]
 8012aa0:	f7ff ff8e 	bl	80129c0 <mem_to_ptr>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	885b      	ldrh	r3, [r3, #2]
 8012aac:	4618      	mov	r0, r3
 8012aae:	f7ff ff75 	bl	801299c <ptr_to_mem>
 8012ab2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8012ab4:	68ba      	ldr	r2, [r7, #8]
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	429a      	cmp	r2, r3
 8012aba:	d01f      	beq.n	8012afc <plug_holes+0x118>
 8012abc:	68bb      	ldr	r3, [r7, #8]
 8012abe:	791b      	ldrb	r3, [r3, #4]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d11b      	bne.n	8012afc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012ac4:	4b17      	ldr	r3, [pc, #92]	@ (8012b24 <plug_holes+0x140>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	687a      	ldr	r2, [r7, #4]
 8012aca:	429a      	cmp	r2, r3
 8012acc:	d102      	bne.n	8012ad4 <plug_holes+0xf0>
      lfree = pmem;
 8012ace:	4a15      	ldr	r2, [pc, #84]	@ (8012b24 <plug_holes+0x140>)
 8012ad0:	68bb      	ldr	r3, [r7, #8]
 8012ad2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	881a      	ldrh	r2, [r3, #0]
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	881b      	ldrh	r3, [r3, #0]
 8012ae0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012ae4:	d00a      	beq.n	8012afc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	881b      	ldrh	r3, [r3, #0]
 8012aea:	4618      	mov	r0, r3
 8012aec:	f7ff ff56 	bl	801299c <ptr_to_mem>
 8012af0:	4604      	mov	r4, r0
 8012af2:	68b8      	ldr	r0, [r7, #8]
 8012af4:	f7ff ff64 	bl	80129c0 <mem_to_ptr>
 8012af8:	4603      	mov	r3, r0
 8012afa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8012afc:	bf00      	nop
 8012afe:	3714      	adds	r7, #20
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd90      	pop	{r4, r7, pc}
 8012b04:	20004bcc 	.word	0x20004bcc
 8012b08:	08023688 	.word	0x08023688
 8012b0c:	080236b8 	.word	0x080236b8
 8012b10:	080236d0 	.word	0x080236d0
 8012b14:	20004bd0 	.word	0x20004bd0
 8012b18:	080236f8 	.word	0x080236f8
 8012b1c:	08023714 	.word	0x08023714
 8012b20:	08023730 	.word	0x08023730
 8012b24:	20004bd8 	.word	0x20004bd8

08012b28 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b082      	sub	sp, #8
 8012b2c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8012b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8012ba4 <mem_init+0x7c>)
 8012b30:	4a1d      	ldr	r2, [pc, #116]	@ (8012ba8 <mem_init+0x80>)
 8012b32:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012b34:	4b1b      	ldr	r3, [pc, #108]	@ (8012ba4 <mem_init+0x7c>)
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8012b40:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	2200      	movs	r2, #0
 8012b46:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8012b4e:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8012b52:	f7ff ff23 	bl	801299c <ptr_to_mem>
 8012b56:	4603      	mov	r3, r0
 8012b58:	4a14      	ldr	r2, [pc, #80]	@ (8012bac <mem_init+0x84>)
 8012b5a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8012b5c:	4b13      	ldr	r3, [pc, #76]	@ (8012bac <mem_init+0x84>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	2201      	movs	r2, #1
 8012b62:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012b64:	4b11      	ldr	r3, [pc, #68]	@ (8012bac <mem_init+0x84>)
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8012b6c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8012b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8012bac <mem_init+0x84>)
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8012b76:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8012b78:	4b0a      	ldr	r3, [pc, #40]	@ (8012ba4 <mem_init+0x7c>)
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	4a0c      	ldr	r2, [pc, #48]	@ (8012bb0 <mem_init+0x88>)
 8012b7e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8012b80:	480c      	ldr	r0, [pc, #48]	@ (8012bb4 <mem_init+0x8c>)
 8012b82:	f00d fc47 	bl	8020414 <sys_mutex_new>
 8012b86:	4603      	mov	r3, r0
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d006      	beq.n	8012b9a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8012b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8012bb8 <mem_init+0x90>)
 8012b8e:	f240 221f 	movw	r2, #543	@ 0x21f
 8012b92:	490a      	ldr	r1, [pc, #40]	@ (8012bbc <mem_init+0x94>)
 8012b94:	480a      	ldr	r0, [pc, #40]	@ (8012bc0 <mem_init+0x98>)
 8012b96:	f00e fc0d 	bl	80213b4 <iprintf>
  }
}
 8012b9a:	bf00      	nop
 8012b9c:	3708      	adds	r7, #8
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	bd80      	pop	{r7, pc}
 8012ba2:	bf00      	nop
 8012ba4:	20004bcc 	.word	0x20004bcc
 8012ba8:	20048000 	.word	0x20048000
 8012bac:	20004bd0 	.word	0x20004bd0
 8012bb0:	20004bd8 	.word	0x20004bd8
 8012bb4:	20004bd4 	.word	0x20004bd4
 8012bb8:	08023688 	.word	0x08023688
 8012bbc:	0802375c 	.word	0x0802375c
 8012bc0:	080236d0 	.word	0x080236d0

08012bc4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b086      	sub	sp, #24
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8012bcc:	6878      	ldr	r0, [r7, #4]
 8012bce:	f7ff fef7 	bl	80129c0 <mem_to_ptr>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	881b      	ldrh	r3, [r3, #0]
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f7ff fede 	bl	801299c <ptr_to_mem>
 8012be0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	885b      	ldrh	r3, [r3, #2]
 8012be6:	4618      	mov	r0, r3
 8012be8:	f7ff fed8 	bl	801299c <ptr_to_mem>
 8012bec:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	881b      	ldrh	r3, [r3, #0]
 8012bf2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012bf6:	d818      	bhi.n	8012c2a <mem_link_valid+0x66>
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	885b      	ldrh	r3, [r3, #2]
 8012bfc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012c00:	d813      	bhi.n	8012c2a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012c06:	8afa      	ldrh	r2, [r7, #22]
 8012c08:	429a      	cmp	r2, r3
 8012c0a:	d004      	beq.n	8012c16 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	881b      	ldrh	r3, [r3, #0]
 8012c10:	8afa      	ldrh	r2, [r7, #22]
 8012c12:	429a      	cmp	r2, r3
 8012c14:	d109      	bne.n	8012c2a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012c16:	4b08      	ldr	r3, [pc, #32]	@ (8012c38 <mem_link_valid+0x74>)
 8012c18:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012c1a:	693a      	ldr	r2, [r7, #16]
 8012c1c:	429a      	cmp	r2, r3
 8012c1e:	d006      	beq.n	8012c2e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012c20:	693b      	ldr	r3, [r7, #16]
 8012c22:	885b      	ldrh	r3, [r3, #2]
 8012c24:	8afa      	ldrh	r2, [r7, #22]
 8012c26:	429a      	cmp	r2, r3
 8012c28:	d001      	beq.n	8012c2e <mem_link_valid+0x6a>
    return 0;
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	e000      	b.n	8012c30 <mem_link_valid+0x6c>
  }
  return 1;
 8012c2e:	2301      	movs	r3, #1
}
 8012c30:	4618      	mov	r0, r3
 8012c32:	3718      	adds	r7, #24
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}
 8012c38:	20004bd0 	.word	0x20004bd0

08012c3c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b088      	sub	sp, #32
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d070      	beq.n	8012d2c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f003 0303 	and.w	r3, r3, #3
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d00d      	beq.n	8012c70 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8012c54:	4b37      	ldr	r3, [pc, #220]	@ (8012d34 <mem_free+0xf8>)
 8012c56:	f240 2273 	movw	r2, #627	@ 0x273
 8012c5a:	4937      	ldr	r1, [pc, #220]	@ (8012d38 <mem_free+0xfc>)
 8012c5c:	4837      	ldr	r0, [pc, #220]	@ (8012d3c <mem_free+0x100>)
 8012c5e:	f00e fba9 	bl	80213b4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012c62:	f00d fc35 	bl	80204d0 <sys_arch_protect>
 8012c66:	60f8      	str	r0, [r7, #12]
 8012c68:	68f8      	ldr	r0, [r7, #12]
 8012c6a:	f00d fc3f 	bl	80204ec <sys_arch_unprotect>
    return;
 8012c6e:	e05e      	b.n	8012d2e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	3b08      	subs	r3, #8
 8012c74:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8012c76:	4b32      	ldr	r3, [pc, #200]	@ (8012d40 <mem_free+0x104>)
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	69fa      	ldr	r2, [r7, #28]
 8012c7c:	429a      	cmp	r2, r3
 8012c7e:	d306      	bcc.n	8012c8e <mem_free+0x52>
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	f103 020c 	add.w	r2, r3, #12
 8012c86:	4b2f      	ldr	r3, [pc, #188]	@ (8012d44 <mem_free+0x108>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	429a      	cmp	r2, r3
 8012c8c:	d90d      	bls.n	8012caa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8012c8e:	4b29      	ldr	r3, [pc, #164]	@ (8012d34 <mem_free+0xf8>)
 8012c90:	f240 227f 	movw	r2, #639	@ 0x27f
 8012c94:	492c      	ldr	r1, [pc, #176]	@ (8012d48 <mem_free+0x10c>)
 8012c96:	4829      	ldr	r0, [pc, #164]	@ (8012d3c <mem_free+0x100>)
 8012c98:	f00e fb8c 	bl	80213b4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012c9c:	f00d fc18 	bl	80204d0 <sys_arch_protect>
 8012ca0:	6138      	str	r0, [r7, #16]
 8012ca2:	6938      	ldr	r0, [r7, #16]
 8012ca4:	f00d fc22 	bl	80204ec <sys_arch_unprotect>
    return;
 8012ca8:	e041      	b.n	8012d2e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012caa:	4828      	ldr	r0, [pc, #160]	@ (8012d4c <mem_free+0x110>)
 8012cac:	f00d fbce 	bl	802044c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8012cb0:	69fb      	ldr	r3, [r7, #28]
 8012cb2:	791b      	ldrb	r3, [r3, #4]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d110      	bne.n	8012cda <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8012cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8012d34 <mem_free+0xf8>)
 8012cba:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8012cbe:	4924      	ldr	r1, [pc, #144]	@ (8012d50 <mem_free+0x114>)
 8012cc0:	481e      	ldr	r0, [pc, #120]	@ (8012d3c <mem_free+0x100>)
 8012cc2:	f00e fb77 	bl	80213b4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012cc6:	4821      	ldr	r0, [pc, #132]	@ (8012d4c <mem_free+0x110>)
 8012cc8:	f00d fbcf 	bl	802046a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012ccc:	f00d fc00 	bl	80204d0 <sys_arch_protect>
 8012cd0:	6178      	str	r0, [r7, #20]
 8012cd2:	6978      	ldr	r0, [r7, #20]
 8012cd4:	f00d fc0a 	bl	80204ec <sys_arch_unprotect>
    return;
 8012cd8:	e029      	b.n	8012d2e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8012cda:	69f8      	ldr	r0, [r7, #28]
 8012cdc:	f7ff ff72 	bl	8012bc4 <mem_link_valid>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d110      	bne.n	8012d08 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8012ce6:	4b13      	ldr	r3, [pc, #76]	@ (8012d34 <mem_free+0xf8>)
 8012ce8:	f240 2295 	movw	r2, #661	@ 0x295
 8012cec:	4919      	ldr	r1, [pc, #100]	@ (8012d54 <mem_free+0x118>)
 8012cee:	4813      	ldr	r0, [pc, #76]	@ (8012d3c <mem_free+0x100>)
 8012cf0:	f00e fb60 	bl	80213b4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012cf4:	4815      	ldr	r0, [pc, #84]	@ (8012d4c <mem_free+0x110>)
 8012cf6:	f00d fbb8 	bl	802046a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012cfa:	f00d fbe9 	bl	80204d0 <sys_arch_protect>
 8012cfe:	61b8      	str	r0, [r7, #24]
 8012d00:	69b8      	ldr	r0, [r7, #24]
 8012d02:	f00d fbf3 	bl	80204ec <sys_arch_unprotect>
    return;
 8012d06:	e012      	b.n	8012d2e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8012d08:	69fb      	ldr	r3, [r7, #28]
 8012d0a:	2200      	movs	r2, #0
 8012d0c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8012d0e:	4b12      	ldr	r3, [pc, #72]	@ (8012d58 <mem_free+0x11c>)
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	69fa      	ldr	r2, [r7, #28]
 8012d14:	429a      	cmp	r2, r3
 8012d16:	d202      	bcs.n	8012d1e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8012d18:	4a0f      	ldr	r2, [pc, #60]	@ (8012d58 <mem_free+0x11c>)
 8012d1a:	69fb      	ldr	r3, [r7, #28]
 8012d1c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8012d1e:	69f8      	ldr	r0, [r7, #28]
 8012d20:	f7ff fe60 	bl	80129e4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012d24:	4809      	ldr	r0, [pc, #36]	@ (8012d4c <mem_free+0x110>)
 8012d26:	f00d fba0 	bl	802046a <sys_mutex_unlock>
 8012d2a:	e000      	b.n	8012d2e <mem_free+0xf2>
    return;
 8012d2c:	bf00      	nop
}
 8012d2e:	3720      	adds	r7, #32
 8012d30:	46bd      	mov	sp, r7
 8012d32:	bd80      	pop	{r7, pc}
 8012d34:	08023688 	.word	0x08023688
 8012d38:	08023778 	.word	0x08023778
 8012d3c:	080236d0 	.word	0x080236d0
 8012d40:	20004bcc 	.word	0x20004bcc
 8012d44:	20004bd0 	.word	0x20004bd0
 8012d48:	0802379c 	.word	0x0802379c
 8012d4c:	20004bd4 	.word	0x20004bd4
 8012d50:	080237b8 	.word	0x080237b8
 8012d54:	080237e0 	.word	0x080237e0
 8012d58:	20004bd8 	.word	0x20004bd8

08012d5c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b088      	sub	sp, #32
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
 8012d64:	460b      	mov	r3, r1
 8012d66:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8012d68:	887b      	ldrh	r3, [r7, #2]
 8012d6a:	3303      	adds	r3, #3
 8012d6c:	b29b      	uxth	r3, r3
 8012d6e:	f023 0303 	bic.w	r3, r3, #3
 8012d72:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8012d74:	8bfb      	ldrh	r3, [r7, #30]
 8012d76:	2b0b      	cmp	r3, #11
 8012d78:	d801      	bhi.n	8012d7e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8012d7a:	230c      	movs	r3, #12
 8012d7c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8012d7e:	8bfb      	ldrh	r3, [r7, #30]
 8012d80:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012d84:	d803      	bhi.n	8012d8e <mem_trim+0x32>
 8012d86:	8bfa      	ldrh	r2, [r7, #30]
 8012d88:	887b      	ldrh	r3, [r7, #2]
 8012d8a:	429a      	cmp	r2, r3
 8012d8c:	d201      	bcs.n	8012d92 <mem_trim+0x36>
    return NULL;
 8012d8e:	2300      	movs	r3, #0
 8012d90:	e0d8      	b.n	8012f44 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8012d92:	4b6e      	ldr	r3, [pc, #440]	@ (8012f4c <mem_trim+0x1f0>)
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	687a      	ldr	r2, [r7, #4]
 8012d98:	429a      	cmp	r2, r3
 8012d9a:	d304      	bcc.n	8012da6 <mem_trim+0x4a>
 8012d9c:	4b6c      	ldr	r3, [pc, #432]	@ (8012f50 <mem_trim+0x1f4>)
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	687a      	ldr	r2, [r7, #4]
 8012da2:	429a      	cmp	r2, r3
 8012da4:	d306      	bcc.n	8012db4 <mem_trim+0x58>
 8012da6:	4b6b      	ldr	r3, [pc, #428]	@ (8012f54 <mem_trim+0x1f8>)
 8012da8:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8012dac:	496a      	ldr	r1, [pc, #424]	@ (8012f58 <mem_trim+0x1fc>)
 8012dae:	486b      	ldr	r0, [pc, #428]	@ (8012f5c <mem_trim+0x200>)
 8012db0:	f00e fb00 	bl	80213b4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8012db4:	4b65      	ldr	r3, [pc, #404]	@ (8012f4c <mem_trim+0x1f0>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	687a      	ldr	r2, [r7, #4]
 8012dba:	429a      	cmp	r2, r3
 8012dbc:	d304      	bcc.n	8012dc8 <mem_trim+0x6c>
 8012dbe:	4b64      	ldr	r3, [pc, #400]	@ (8012f50 <mem_trim+0x1f4>)
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	687a      	ldr	r2, [r7, #4]
 8012dc4:	429a      	cmp	r2, r3
 8012dc6:	d307      	bcc.n	8012dd8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012dc8:	f00d fb82 	bl	80204d0 <sys_arch_protect>
 8012dcc:	60b8      	str	r0, [r7, #8]
 8012dce:	68b8      	ldr	r0, [r7, #8]
 8012dd0:	f00d fb8c 	bl	80204ec <sys_arch_unprotect>
    return rmem;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	e0b5      	b.n	8012f44 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	3b08      	subs	r3, #8
 8012ddc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8012dde:	69b8      	ldr	r0, [r7, #24]
 8012de0:	f7ff fdee 	bl	80129c0 <mem_to_ptr>
 8012de4:	4603      	mov	r3, r0
 8012de6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8012de8:	69bb      	ldr	r3, [r7, #24]
 8012dea:	881a      	ldrh	r2, [r3, #0]
 8012dec:	8afb      	ldrh	r3, [r7, #22]
 8012dee:	1ad3      	subs	r3, r2, r3
 8012df0:	b29b      	uxth	r3, r3
 8012df2:	3b08      	subs	r3, #8
 8012df4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8012df6:	8bfa      	ldrh	r2, [r7, #30]
 8012df8:	8abb      	ldrh	r3, [r7, #20]
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d906      	bls.n	8012e0c <mem_trim+0xb0>
 8012dfe:	4b55      	ldr	r3, [pc, #340]	@ (8012f54 <mem_trim+0x1f8>)
 8012e00:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8012e04:	4956      	ldr	r1, [pc, #344]	@ (8012f60 <mem_trim+0x204>)
 8012e06:	4855      	ldr	r0, [pc, #340]	@ (8012f5c <mem_trim+0x200>)
 8012e08:	f00e fad4 	bl	80213b4 <iprintf>
  if (newsize > size) {
 8012e0c:	8bfa      	ldrh	r2, [r7, #30]
 8012e0e:	8abb      	ldrh	r3, [r7, #20]
 8012e10:	429a      	cmp	r2, r3
 8012e12:	d901      	bls.n	8012e18 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8012e14:	2300      	movs	r3, #0
 8012e16:	e095      	b.n	8012f44 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8012e18:	8bfa      	ldrh	r2, [r7, #30]
 8012e1a:	8abb      	ldrh	r3, [r7, #20]
 8012e1c:	429a      	cmp	r2, r3
 8012e1e:	d101      	bne.n	8012e24 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	e08f      	b.n	8012f44 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012e24:	484f      	ldr	r0, [pc, #316]	@ (8012f64 <mem_trim+0x208>)
 8012e26:	f00d fb11 	bl	802044c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8012e2a:	69bb      	ldr	r3, [r7, #24]
 8012e2c:	881b      	ldrh	r3, [r3, #0]
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f7ff fdb4 	bl	801299c <ptr_to_mem>
 8012e34:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	791b      	ldrb	r3, [r3, #4]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d13f      	bne.n	8012ebe <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012e3e:	69bb      	ldr	r3, [r7, #24]
 8012e40:	881b      	ldrh	r3, [r3, #0]
 8012e42:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012e46:	d106      	bne.n	8012e56 <mem_trim+0xfa>
 8012e48:	4b42      	ldr	r3, [pc, #264]	@ (8012f54 <mem_trim+0x1f8>)
 8012e4a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8012e4e:	4946      	ldr	r1, [pc, #280]	@ (8012f68 <mem_trim+0x20c>)
 8012e50:	4842      	ldr	r0, [pc, #264]	@ (8012f5c <mem_trim+0x200>)
 8012e52:	f00e faaf 	bl	80213b4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8012e56:	693b      	ldr	r3, [r7, #16]
 8012e58:	881b      	ldrh	r3, [r3, #0]
 8012e5a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012e5c:	8afa      	ldrh	r2, [r7, #22]
 8012e5e:	8bfb      	ldrh	r3, [r7, #30]
 8012e60:	4413      	add	r3, r2
 8012e62:	b29b      	uxth	r3, r3
 8012e64:	3308      	adds	r3, #8
 8012e66:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8012e68:	4b40      	ldr	r3, [pc, #256]	@ (8012f6c <mem_trim+0x210>)
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	693a      	ldr	r2, [r7, #16]
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d106      	bne.n	8012e80 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8012e72:	89fb      	ldrh	r3, [r7, #14]
 8012e74:	4618      	mov	r0, r3
 8012e76:	f7ff fd91 	bl	801299c <ptr_to_mem>
 8012e7a:	4603      	mov	r3, r0
 8012e7c:	4a3b      	ldr	r2, [pc, #236]	@ (8012f6c <mem_trim+0x210>)
 8012e7e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8012e80:	89fb      	ldrh	r3, [r7, #14]
 8012e82:	4618      	mov	r0, r3
 8012e84:	f7ff fd8a 	bl	801299c <ptr_to_mem>
 8012e88:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8012e8a:	693b      	ldr	r3, [r7, #16]
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8012e90:	693b      	ldr	r3, [r7, #16]
 8012e92:	89ba      	ldrh	r2, [r7, #12]
 8012e94:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8012e96:	693b      	ldr	r3, [r7, #16]
 8012e98:	8afa      	ldrh	r2, [r7, #22]
 8012e9a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8012e9c:	69bb      	ldr	r3, [r7, #24]
 8012e9e:	89fa      	ldrh	r2, [r7, #14]
 8012ea0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012ea2:	693b      	ldr	r3, [r7, #16]
 8012ea4:	881b      	ldrh	r3, [r3, #0]
 8012ea6:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012eaa:	d047      	beq.n	8012f3c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012eac:	693b      	ldr	r3, [r7, #16]
 8012eae:	881b      	ldrh	r3, [r3, #0]
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f7ff fd73 	bl	801299c <ptr_to_mem>
 8012eb6:	4602      	mov	r2, r0
 8012eb8:	89fb      	ldrh	r3, [r7, #14]
 8012eba:	8053      	strh	r3, [r2, #2]
 8012ebc:	e03e      	b.n	8012f3c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8012ebe:	8bfb      	ldrh	r3, [r7, #30]
 8012ec0:	f103 0214 	add.w	r2, r3, #20
 8012ec4:	8abb      	ldrh	r3, [r7, #20]
 8012ec6:	429a      	cmp	r2, r3
 8012ec8:	d838      	bhi.n	8012f3c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012eca:	8afa      	ldrh	r2, [r7, #22]
 8012ecc:	8bfb      	ldrh	r3, [r7, #30]
 8012ece:	4413      	add	r3, r2
 8012ed0:	b29b      	uxth	r3, r3
 8012ed2:	3308      	adds	r3, #8
 8012ed4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012ed6:	69bb      	ldr	r3, [r7, #24]
 8012ed8:	881b      	ldrh	r3, [r3, #0]
 8012eda:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012ede:	d106      	bne.n	8012eee <mem_trim+0x192>
 8012ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8012f54 <mem_trim+0x1f8>)
 8012ee2:	f240 3216 	movw	r2, #790	@ 0x316
 8012ee6:	4920      	ldr	r1, [pc, #128]	@ (8012f68 <mem_trim+0x20c>)
 8012ee8:	481c      	ldr	r0, [pc, #112]	@ (8012f5c <mem_trim+0x200>)
 8012eea:	f00e fa63 	bl	80213b4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8012eee:	89fb      	ldrh	r3, [r7, #14]
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	f7ff fd53 	bl	801299c <ptr_to_mem>
 8012ef6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8012ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8012f6c <mem_trim+0x210>)
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	693a      	ldr	r2, [r7, #16]
 8012efe:	429a      	cmp	r2, r3
 8012f00:	d202      	bcs.n	8012f08 <mem_trim+0x1ac>
      lfree = mem2;
 8012f02:	4a1a      	ldr	r2, [pc, #104]	@ (8012f6c <mem_trim+0x210>)
 8012f04:	693b      	ldr	r3, [r7, #16]
 8012f06:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8012f08:	693b      	ldr	r3, [r7, #16]
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8012f0e:	69bb      	ldr	r3, [r7, #24]
 8012f10:	881a      	ldrh	r2, [r3, #0]
 8012f12:	693b      	ldr	r3, [r7, #16]
 8012f14:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8012f16:	693b      	ldr	r3, [r7, #16]
 8012f18:	8afa      	ldrh	r2, [r7, #22]
 8012f1a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8012f1c:	69bb      	ldr	r3, [r7, #24]
 8012f1e:	89fa      	ldrh	r2, [r7, #14]
 8012f20:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012f22:	693b      	ldr	r3, [r7, #16]
 8012f24:	881b      	ldrh	r3, [r3, #0]
 8012f26:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012f2a:	d007      	beq.n	8012f3c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012f2c:	693b      	ldr	r3, [r7, #16]
 8012f2e:	881b      	ldrh	r3, [r3, #0]
 8012f30:	4618      	mov	r0, r3
 8012f32:	f7ff fd33 	bl	801299c <ptr_to_mem>
 8012f36:	4602      	mov	r2, r0
 8012f38:	89fb      	ldrh	r3, [r7, #14]
 8012f3a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012f3c:	4809      	ldr	r0, [pc, #36]	@ (8012f64 <mem_trim+0x208>)
 8012f3e:	f00d fa94 	bl	802046a <sys_mutex_unlock>
  return rmem;
 8012f42:	687b      	ldr	r3, [r7, #4]
}
 8012f44:	4618      	mov	r0, r3
 8012f46:	3720      	adds	r7, #32
 8012f48:	46bd      	mov	sp, r7
 8012f4a:	bd80      	pop	{r7, pc}
 8012f4c:	20004bcc 	.word	0x20004bcc
 8012f50:	20004bd0 	.word	0x20004bd0
 8012f54:	08023688 	.word	0x08023688
 8012f58:	08023814 	.word	0x08023814
 8012f5c:	080236d0 	.word	0x080236d0
 8012f60:	0802382c 	.word	0x0802382c
 8012f64:	20004bd4 	.word	0x20004bd4
 8012f68:	0802384c 	.word	0x0802384c
 8012f6c:	20004bd8 	.word	0x20004bd8

08012f70 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8012f70:	b580      	push	{r7, lr}
 8012f72:	b088      	sub	sp, #32
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	4603      	mov	r3, r0
 8012f78:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8012f7a:	88fb      	ldrh	r3, [r7, #6]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d101      	bne.n	8012f84 <mem_malloc+0x14>
    return NULL;
 8012f80:	2300      	movs	r3, #0
 8012f82:	e0e2      	b.n	801314a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8012f84:	88fb      	ldrh	r3, [r7, #6]
 8012f86:	3303      	adds	r3, #3
 8012f88:	b29b      	uxth	r3, r3
 8012f8a:	f023 0303 	bic.w	r3, r3, #3
 8012f8e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8012f90:	8bbb      	ldrh	r3, [r7, #28]
 8012f92:	2b0b      	cmp	r3, #11
 8012f94:	d801      	bhi.n	8012f9a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8012f96:	230c      	movs	r3, #12
 8012f98:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8012f9a:	8bbb      	ldrh	r3, [r7, #28]
 8012f9c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8012fa0:	d803      	bhi.n	8012faa <mem_malloc+0x3a>
 8012fa2:	8bba      	ldrh	r2, [r7, #28]
 8012fa4:	88fb      	ldrh	r3, [r7, #6]
 8012fa6:	429a      	cmp	r2, r3
 8012fa8:	d201      	bcs.n	8012fae <mem_malloc+0x3e>
    return NULL;
 8012faa:	2300      	movs	r3, #0
 8012fac:	e0cd      	b.n	801314a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8012fae:	4869      	ldr	r0, [pc, #420]	@ (8013154 <mem_malloc+0x1e4>)
 8012fb0:	f00d fa4c 	bl	802044c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012fb4:	4b68      	ldr	r3, [pc, #416]	@ (8013158 <mem_malloc+0x1e8>)
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	4618      	mov	r0, r3
 8012fba:	f7ff fd01 	bl	80129c0 <mem_to_ptr>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	83fb      	strh	r3, [r7, #30]
 8012fc2:	e0b7      	b.n	8013134 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8012fc4:	8bfb      	ldrh	r3, [r7, #30]
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f7ff fce8 	bl	801299c <ptr_to_mem>
 8012fcc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8012fce:	697b      	ldr	r3, [r7, #20]
 8012fd0:	791b      	ldrb	r3, [r3, #4]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	f040 80a7 	bne.w	8013126 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8012fd8:	697b      	ldr	r3, [r7, #20]
 8012fda:	881b      	ldrh	r3, [r3, #0]
 8012fdc:	461a      	mov	r2, r3
 8012fde:	8bfb      	ldrh	r3, [r7, #30]
 8012fe0:	1ad3      	subs	r3, r2, r3
 8012fe2:	f1a3 0208 	sub.w	r2, r3, #8
 8012fe6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	f0c0 809c 	bcc.w	8013126 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	881b      	ldrh	r3, [r3, #0]
 8012ff2:	461a      	mov	r2, r3
 8012ff4:	8bfb      	ldrh	r3, [r7, #30]
 8012ff6:	1ad3      	subs	r3, r2, r3
 8012ff8:	f1a3 0208 	sub.w	r2, r3, #8
 8012ffc:	8bbb      	ldrh	r3, [r7, #28]
 8012ffe:	3314      	adds	r3, #20
 8013000:	429a      	cmp	r2, r3
 8013002:	d333      	bcc.n	801306c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013004:	8bfa      	ldrh	r2, [r7, #30]
 8013006:	8bbb      	ldrh	r3, [r7, #28]
 8013008:	4413      	add	r3, r2
 801300a:	b29b      	uxth	r3, r3
 801300c:	3308      	adds	r3, #8
 801300e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013010:	8a7b      	ldrh	r3, [r7, #18]
 8013012:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8013016:	d106      	bne.n	8013026 <mem_malloc+0xb6>
 8013018:	4b50      	ldr	r3, [pc, #320]	@ (801315c <mem_malloc+0x1ec>)
 801301a:	f240 3287 	movw	r2, #903	@ 0x387
 801301e:	4950      	ldr	r1, [pc, #320]	@ (8013160 <mem_malloc+0x1f0>)
 8013020:	4850      	ldr	r0, [pc, #320]	@ (8013164 <mem_malloc+0x1f4>)
 8013022:	f00e f9c7 	bl	80213b4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013026:	8a7b      	ldrh	r3, [r7, #18]
 8013028:	4618      	mov	r0, r3
 801302a:	f7ff fcb7 	bl	801299c <ptr_to_mem>
 801302e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	2200      	movs	r2, #0
 8013034:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013036:	697b      	ldr	r3, [r7, #20]
 8013038:	881a      	ldrh	r2, [r3, #0]
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	8bfa      	ldrh	r2, [r7, #30]
 8013042:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013044:	697b      	ldr	r3, [r7, #20]
 8013046:	8a7a      	ldrh	r2, [r7, #18]
 8013048:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801304a:	697b      	ldr	r3, [r7, #20]
 801304c:	2201      	movs	r2, #1
 801304e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	881b      	ldrh	r3, [r3, #0]
 8013054:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8013058:	d00b      	beq.n	8013072 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	881b      	ldrh	r3, [r3, #0]
 801305e:	4618      	mov	r0, r3
 8013060:	f7ff fc9c 	bl	801299c <ptr_to_mem>
 8013064:	4602      	mov	r2, r0
 8013066:	8a7b      	ldrh	r3, [r7, #18]
 8013068:	8053      	strh	r3, [r2, #2]
 801306a:	e002      	b.n	8013072 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	2201      	movs	r2, #1
 8013070:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013072:	4b39      	ldr	r3, [pc, #228]	@ (8013158 <mem_malloc+0x1e8>)
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	697a      	ldr	r2, [r7, #20]
 8013078:	429a      	cmp	r2, r3
 801307a:	d127      	bne.n	80130cc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 801307c:	4b36      	ldr	r3, [pc, #216]	@ (8013158 <mem_malloc+0x1e8>)
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013082:	e005      	b.n	8013090 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013084:	69bb      	ldr	r3, [r7, #24]
 8013086:	881b      	ldrh	r3, [r3, #0]
 8013088:	4618      	mov	r0, r3
 801308a:	f7ff fc87 	bl	801299c <ptr_to_mem>
 801308e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013090:	69bb      	ldr	r3, [r7, #24]
 8013092:	791b      	ldrb	r3, [r3, #4]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d004      	beq.n	80130a2 <mem_malloc+0x132>
 8013098:	4b33      	ldr	r3, [pc, #204]	@ (8013168 <mem_malloc+0x1f8>)
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	69ba      	ldr	r2, [r7, #24]
 801309e:	429a      	cmp	r2, r3
 80130a0:	d1f0      	bne.n	8013084 <mem_malloc+0x114>
          }
          lfree = cur;
 80130a2:	4a2d      	ldr	r2, [pc, #180]	@ (8013158 <mem_malloc+0x1e8>)
 80130a4:	69bb      	ldr	r3, [r7, #24]
 80130a6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80130a8:	4b2b      	ldr	r3, [pc, #172]	@ (8013158 <mem_malloc+0x1e8>)
 80130aa:	681a      	ldr	r2, [r3, #0]
 80130ac:	4b2e      	ldr	r3, [pc, #184]	@ (8013168 <mem_malloc+0x1f8>)
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	429a      	cmp	r2, r3
 80130b2:	d00b      	beq.n	80130cc <mem_malloc+0x15c>
 80130b4:	4b28      	ldr	r3, [pc, #160]	@ (8013158 <mem_malloc+0x1e8>)
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	791b      	ldrb	r3, [r3, #4]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d006      	beq.n	80130cc <mem_malloc+0x15c>
 80130be:	4b27      	ldr	r3, [pc, #156]	@ (801315c <mem_malloc+0x1ec>)
 80130c0:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80130c4:	4929      	ldr	r1, [pc, #164]	@ (801316c <mem_malloc+0x1fc>)
 80130c6:	4827      	ldr	r0, [pc, #156]	@ (8013164 <mem_malloc+0x1f4>)
 80130c8:	f00e f974 	bl	80213b4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80130cc:	4821      	ldr	r0, [pc, #132]	@ (8013154 <mem_malloc+0x1e4>)
 80130ce:	f00d f9cc 	bl	802046a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80130d2:	8bba      	ldrh	r2, [r7, #28]
 80130d4:	697b      	ldr	r3, [r7, #20]
 80130d6:	4413      	add	r3, r2
 80130d8:	3308      	adds	r3, #8
 80130da:	4a23      	ldr	r2, [pc, #140]	@ (8013168 <mem_malloc+0x1f8>)
 80130dc:	6812      	ldr	r2, [r2, #0]
 80130de:	4293      	cmp	r3, r2
 80130e0:	d906      	bls.n	80130f0 <mem_malloc+0x180>
 80130e2:	4b1e      	ldr	r3, [pc, #120]	@ (801315c <mem_malloc+0x1ec>)
 80130e4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80130e8:	4921      	ldr	r1, [pc, #132]	@ (8013170 <mem_malloc+0x200>)
 80130ea:	481e      	ldr	r0, [pc, #120]	@ (8013164 <mem_malloc+0x1f4>)
 80130ec:	f00e f962 	bl	80213b4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80130f0:	697b      	ldr	r3, [r7, #20]
 80130f2:	f003 0303 	and.w	r3, r3, #3
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d006      	beq.n	8013108 <mem_malloc+0x198>
 80130fa:	4b18      	ldr	r3, [pc, #96]	@ (801315c <mem_malloc+0x1ec>)
 80130fc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8013100:	491c      	ldr	r1, [pc, #112]	@ (8013174 <mem_malloc+0x204>)
 8013102:	4818      	ldr	r0, [pc, #96]	@ (8013164 <mem_malloc+0x1f4>)
 8013104:	f00e f956 	bl	80213b4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013108:	697b      	ldr	r3, [r7, #20]
 801310a:	f003 0303 	and.w	r3, r3, #3
 801310e:	2b00      	cmp	r3, #0
 8013110:	d006      	beq.n	8013120 <mem_malloc+0x1b0>
 8013112:	4b12      	ldr	r3, [pc, #72]	@ (801315c <mem_malloc+0x1ec>)
 8013114:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8013118:	4917      	ldr	r1, [pc, #92]	@ (8013178 <mem_malloc+0x208>)
 801311a:	4812      	ldr	r0, [pc, #72]	@ (8013164 <mem_malloc+0x1f4>)
 801311c:	f00e f94a 	bl	80213b4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8013120:	697b      	ldr	r3, [r7, #20]
 8013122:	3308      	adds	r3, #8
 8013124:	e011      	b.n	801314a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8013126:	8bfb      	ldrh	r3, [r7, #30]
 8013128:	4618      	mov	r0, r3
 801312a:	f7ff fc37 	bl	801299c <ptr_to_mem>
 801312e:	4603      	mov	r3, r0
 8013130:	881b      	ldrh	r3, [r3, #0]
 8013132:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013134:	8bfa      	ldrh	r2, [r7, #30]
 8013136:	8bbb      	ldrh	r3, [r7, #28]
 8013138:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 801313c:	429a      	cmp	r2, r3
 801313e:	f4ff af41 	bcc.w	8012fc4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8013142:	4804      	ldr	r0, [pc, #16]	@ (8013154 <mem_malloc+0x1e4>)
 8013144:	f00d f991 	bl	802046a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013148:	2300      	movs	r3, #0
}
 801314a:	4618      	mov	r0, r3
 801314c:	3720      	adds	r7, #32
 801314e:	46bd      	mov	sp, r7
 8013150:	bd80      	pop	{r7, pc}
 8013152:	bf00      	nop
 8013154:	20004bd4 	.word	0x20004bd4
 8013158:	20004bd8 	.word	0x20004bd8
 801315c:	08023688 	.word	0x08023688
 8013160:	0802384c 	.word	0x0802384c
 8013164:	080236d0 	.word	0x080236d0
 8013168:	20004bd0 	.word	0x20004bd0
 801316c:	08023860 	.word	0x08023860
 8013170:	0802387c 	.word	0x0802387c
 8013174:	080238ac 	.word	0x080238ac
 8013178:	080238dc 	.word	0x080238dc

0801317c <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b084      	sub	sp, #16
 8013180:	af00      	add	r7, sp, #0
 8013182:	4603      	mov	r3, r0
 8013184:	460a      	mov	r2, r1
 8013186:	80fb      	strh	r3, [r7, #6]
 8013188:	4613      	mov	r3, r2
 801318a:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 801318c:	88fb      	ldrh	r3, [r7, #6]
 801318e:	88ba      	ldrh	r2, [r7, #4]
 8013190:	fb02 f303 	mul.w	r3, r2, r3
 8013194:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	b29b      	uxth	r3, r3
 801319a:	461a      	mov	r2, r3
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	4293      	cmp	r3, r2
 80131a0:	d001      	beq.n	80131a6 <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 80131a2:	2300      	movs	r3, #0
 80131a4:	e00e      	b.n	80131c4 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	b29b      	uxth	r3, r3
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7ff fee0 	bl	8012f70 <mem_malloc>
 80131b0:	60b8      	str	r0, [r7, #8]
  if (p) {
 80131b2:	68bb      	ldr	r3, [r7, #8]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d004      	beq.n	80131c2 <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 80131b8:	68fa      	ldr	r2, [r7, #12]
 80131ba:	2100      	movs	r1, #0
 80131bc:	68b8      	ldr	r0, [r7, #8]
 80131be:	f00e fac9 	bl	8021754 <memset>
  }
  return p;
 80131c2:	68bb      	ldr	r3, [r7, #8]
}
 80131c4:	4618      	mov	r0, r3
 80131c6:	3710      	adds	r7, #16
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}

080131cc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80131cc:	b480      	push	{r7}
 80131ce:	b083      	sub	sp, #12
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80131d4:	bf00      	nop
 80131d6:	370c      	adds	r7, #12
 80131d8:	46bd      	mov	sp, r7
 80131da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131de:	4770      	bx	lr

080131e0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b082      	sub	sp, #8
 80131e4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80131e6:	2300      	movs	r3, #0
 80131e8:	80fb      	strh	r3, [r7, #6]
 80131ea:	e009      	b.n	8013200 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80131ec:	88fb      	ldrh	r3, [r7, #6]
 80131ee:	4a08      	ldr	r2, [pc, #32]	@ (8013210 <memp_init+0x30>)
 80131f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80131f4:	4618      	mov	r0, r3
 80131f6:	f7ff ffe9 	bl	80131cc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80131fa:	88fb      	ldrh	r3, [r7, #6]
 80131fc:	3301      	adds	r3, #1
 80131fe:	80fb      	strh	r3, [r7, #6]
 8013200:	88fb      	ldrh	r3, [r7, #6]
 8013202:	2b0d      	cmp	r3, #13
 8013204:	d9f2      	bls.n	80131ec <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8013206:	bf00      	nop
 8013208:	bf00      	nop
 801320a:	3708      	adds	r7, #8
 801320c:	46bd      	mov	sp, r7
 801320e:	bd80      	pop	{r7, pc}
 8013210:	080276c4 	.word	0x080276c4

08013214 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b084      	sub	sp, #16
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	881b      	ldrh	r3, [r3, #0]
 8013220:	3303      	adds	r3, #3
 8013222:	b29b      	uxth	r3, r3
 8013224:	f023 0303 	bic.w	r3, r3, #3
 8013228:	b29b      	uxth	r3, r3
 801322a:	4618      	mov	r0, r3
 801322c:	f7ff fea0 	bl	8012f70 <mem_malloc>
 8013230:	60f8      	str	r0, [r7, #12]
  SYS_ARCH_PROTECT(old_level);
 8013232:	f00d f94d 	bl	80204d0 <sys_arch_protect>
 8013236:	60b8      	str	r0, [r7, #8]
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d010      	beq.n	8013260 <do_memp_malloc_pool+0x4c>
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	f003 0303 	and.w	r3, r3, #3
 8013244:	2b00      	cmp	r3, #0
 8013246:	d006      	beq.n	8013256 <do_memp_malloc_pool+0x42>
 8013248:	4b09      	ldr	r3, [pc, #36]	@ (8013270 <do_memp_malloc_pool+0x5c>)
 801324a:	f44f 728c 	mov.w	r2, #280	@ 0x118
 801324e:	4909      	ldr	r1, [pc, #36]	@ (8013274 <do_memp_malloc_pool+0x60>)
 8013250:	4809      	ldr	r0, [pc, #36]	@ (8013278 <do_memp_malloc_pool+0x64>)
 8013252:	f00e f8af 	bl	80213b4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013256:	68b8      	ldr	r0, [r7, #8]
 8013258:	f00d f948 	bl	80204ec <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	e003      	b.n	8013268 <do_memp_malloc_pool+0x54>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013260:	68b8      	ldr	r0, [r7, #8]
 8013262:	f00d f943 	bl	80204ec <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8013266:	2300      	movs	r3, #0
}
 8013268:	4618      	mov	r0, r3
 801326a:	3710      	adds	r7, #16
 801326c:	46bd      	mov	sp, r7
 801326e:	bd80      	pop	{r7, pc}
 8013270:	08023900 	.word	0x08023900
 8013274:	08023930 	.word	0x08023930
 8013278:	08023954 	.word	0x08023954

0801327c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b082      	sub	sp, #8
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d106      	bne.n	8013298 <memp_malloc_pool+0x1c>
 801328a:	4b0a      	ldr	r3, [pc, #40]	@ (80132b4 <memp_malloc_pool+0x38>)
 801328c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8013290:	4909      	ldr	r1, [pc, #36]	@ (80132b8 <memp_malloc_pool+0x3c>)
 8013292:	480a      	ldr	r0, [pc, #40]	@ (80132bc <memp_malloc_pool+0x40>)
 8013294:	f00e f88e 	bl	80213b4 <iprintf>
  if (desc == NULL) {
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d101      	bne.n	80132a2 <memp_malloc_pool+0x26>
    return NULL;
 801329e:	2300      	movs	r3, #0
 80132a0:	e003      	b.n	80132aa <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80132a2:	6878      	ldr	r0, [r7, #4]
 80132a4:	f7ff ffb6 	bl	8013214 <do_memp_malloc_pool>
 80132a8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80132aa:	4618      	mov	r0, r3
 80132ac:	3708      	adds	r7, #8
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bd80      	pop	{r7, pc}
 80132b2:	bf00      	nop
 80132b4:	08023900 	.word	0x08023900
 80132b8:	0802397c 	.word	0x0802397c
 80132bc:	08023954 	.word	0x08023954

080132c0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b084      	sub	sp, #16
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	4603      	mov	r3, r0
 80132c8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80132ca:	79fb      	ldrb	r3, [r7, #7]
 80132cc:	2b0d      	cmp	r3, #13
 80132ce:	d908      	bls.n	80132e2 <memp_malloc+0x22>
 80132d0:	4b0a      	ldr	r3, [pc, #40]	@ (80132fc <memp_malloc+0x3c>)
 80132d2:	f240 1257 	movw	r2, #343	@ 0x157
 80132d6:	490a      	ldr	r1, [pc, #40]	@ (8013300 <memp_malloc+0x40>)
 80132d8:	480a      	ldr	r0, [pc, #40]	@ (8013304 <memp_malloc+0x44>)
 80132da:	f00e f86b 	bl	80213b4 <iprintf>
 80132de:	2300      	movs	r3, #0
 80132e0:	e008      	b.n	80132f4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80132e2:	79fb      	ldrb	r3, [r7, #7]
 80132e4:	4a08      	ldr	r2, [pc, #32]	@ (8013308 <memp_malloc+0x48>)
 80132e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80132ea:	4618      	mov	r0, r3
 80132ec:	f7ff ff92 	bl	8013214 <do_memp_malloc_pool>
 80132f0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80132f2:	68fb      	ldr	r3, [r7, #12]
}
 80132f4:	4618      	mov	r0, r3
 80132f6:	3710      	adds	r7, #16
 80132f8:	46bd      	mov	sp, r7
 80132fa:	bd80      	pop	{r7, pc}
 80132fc:	08023900 	.word	0x08023900
 8013300:	08023990 	.word	0x08023990
 8013304:	08023954 	.word	0x08023954
 8013308:	080276c4 	.word	0x080276c4

0801330c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b084      	sub	sp, #16
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
 8013314:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8013316:	683b      	ldr	r3, [r7, #0]
 8013318:	f003 0303 	and.w	r3, r3, #3
 801331c:	2b00      	cmp	r3, #0
 801331e:	d006      	beq.n	801332e <do_memp_free_pool+0x22>
 8013320:	4b0a      	ldr	r3, [pc, #40]	@ (801334c <do_memp_free_pool+0x40>)
 8013322:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8013326:	490a      	ldr	r1, [pc, #40]	@ (8013350 <do_memp_free_pool+0x44>)
 8013328:	480a      	ldr	r0, [pc, #40]	@ (8013354 <do_memp_free_pool+0x48>)
 801332a:	f00e f843 	bl	80213b4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801332e:	683b      	ldr	r3, [r7, #0]
 8013330:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8013332:	f00d f8cd 	bl	80204d0 <sys_arch_protect>
 8013336:	60b8      	str	r0, [r7, #8]
  desc->stats->used--;
#endif

#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
 8013338:	68b8      	ldr	r0, [r7, #8]
 801333a:	f00d f8d7 	bl	80204ec <sys_arch_unprotect>
  mem_free(memp);
 801333e:	68f8      	ldr	r0, [r7, #12]
 8013340:	f7ff fc7c 	bl	8012c3c <mem_free>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8013344:	bf00      	nop
 8013346:	3710      	adds	r7, #16
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}
 801334c:	08023900 	.word	0x08023900
 8013350:	080239b0 	.word	0x080239b0
 8013354:	08023954 	.word	0x08023954

08013358 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b082      	sub	sp, #8
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d106      	bne.n	8013376 <memp_free_pool+0x1e>
 8013368:	4b0a      	ldr	r3, [pc, #40]	@ (8013394 <memp_free_pool+0x3c>)
 801336a:	f240 1295 	movw	r2, #405	@ 0x195
 801336e:	490a      	ldr	r1, [pc, #40]	@ (8013398 <memp_free_pool+0x40>)
 8013370:	480a      	ldr	r0, [pc, #40]	@ (801339c <memp_free_pool+0x44>)
 8013372:	f00e f81f 	bl	80213b4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d007      	beq.n	801338c <memp_free_pool+0x34>
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	2b00      	cmp	r3, #0
 8013380:	d004      	beq.n	801338c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8013382:	6839      	ldr	r1, [r7, #0]
 8013384:	6878      	ldr	r0, [r7, #4]
 8013386:	f7ff ffc1 	bl	801330c <do_memp_free_pool>
 801338a:	e000      	b.n	801338e <memp_free_pool+0x36>
    return;
 801338c:	bf00      	nop
}
 801338e:	3708      	adds	r7, #8
 8013390:	46bd      	mov	sp, r7
 8013392:	bd80      	pop	{r7, pc}
 8013394:	08023900 	.word	0x08023900
 8013398:	0802397c 	.word	0x0802397c
 801339c:	08023954 	.word	0x08023954

080133a0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b082      	sub	sp, #8
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	4603      	mov	r3, r0
 80133a8:	6039      	str	r1, [r7, #0]
 80133aa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80133ac:	79fb      	ldrb	r3, [r7, #7]
 80133ae:	2b0d      	cmp	r3, #13
 80133b0:	d907      	bls.n	80133c2 <memp_free+0x22>
 80133b2:	4b0c      	ldr	r3, [pc, #48]	@ (80133e4 <memp_free+0x44>)
 80133b4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80133b8:	490b      	ldr	r1, [pc, #44]	@ (80133e8 <memp_free+0x48>)
 80133ba:	480c      	ldr	r0, [pc, #48]	@ (80133ec <memp_free+0x4c>)
 80133bc:	f00d fffa 	bl	80213b4 <iprintf>
 80133c0:	e00c      	b.n	80133dc <memp_free+0x3c>

  if (mem == NULL) {
 80133c2:	683b      	ldr	r3, [r7, #0]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d008      	beq.n	80133da <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80133c8:	79fb      	ldrb	r3, [r7, #7]
 80133ca:	4a09      	ldr	r2, [pc, #36]	@ (80133f0 <memp_free+0x50>)
 80133cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80133d0:	6839      	ldr	r1, [r7, #0]
 80133d2:	4618      	mov	r0, r3
 80133d4:	f7ff ff9a 	bl	801330c <do_memp_free_pool>
 80133d8:	e000      	b.n	80133dc <memp_free+0x3c>
    return;
 80133da:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80133dc:	3708      	adds	r7, #8
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}
 80133e2:	bf00      	nop
 80133e4:	08023900 	.word	0x08023900
 80133e8:	080239d0 	.word	0x080239d0
 80133ec:	08023954 	.word	0x08023954
 80133f0:	080276c4 	.word	0x080276c4

080133f4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80133f4:	b480      	push	{r7}
 80133f6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80133f8:	bf00      	nop
 80133fa:	46bd      	mov	sp, r7
 80133fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013400:	4770      	bx	lr
	...

08013404 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013404:	b580      	push	{r7, lr}
 8013406:	b086      	sub	sp, #24
 8013408:	af00      	add	r7, sp, #0
 801340a:	60f8      	str	r0, [r7, #12]
 801340c:	60b9      	str	r1, [r7, #8]
 801340e:	607a      	str	r2, [r7, #4]
 8013410:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d108      	bne.n	801342a <netif_add+0x26>
 8013418:	4b61      	ldr	r3, [pc, #388]	@ (80135a0 <netif_add+0x19c>)
 801341a:	f240 1227 	movw	r2, #295	@ 0x127
 801341e:	4961      	ldr	r1, [pc, #388]	@ (80135a4 <netif_add+0x1a0>)
 8013420:	4861      	ldr	r0, [pc, #388]	@ (80135a8 <netif_add+0x1a4>)
 8013422:	f00d ffc7 	bl	80213b4 <iprintf>
 8013426:	2300      	movs	r3, #0
 8013428:	e0b6      	b.n	8013598 <netif_add+0x194>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801342a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801342c:	2b00      	cmp	r3, #0
 801342e:	d108      	bne.n	8013442 <netif_add+0x3e>
 8013430:	4b5b      	ldr	r3, [pc, #364]	@ (80135a0 <netif_add+0x19c>)
 8013432:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8013436:	495d      	ldr	r1, [pc, #372]	@ (80135ac <netif_add+0x1a8>)
 8013438:	485b      	ldr	r0, [pc, #364]	@ (80135a8 <netif_add+0x1a4>)
 801343a:	f00d ffbb 	bl	80213b4 <iprintf>
 801343e:	2300      	movs	r3, #0
 8013440:	e0aa      	b.n	8013598 <netif_add+0x194>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013442:	68bb      	ldr	r3, [r7, #8]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d101      	bne.n	801344c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8013448:	4b59      	ldr	r3, [pc, #356]	@ (80135b0 <netif_add+0x1ac>)
 801344a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d101      	bne.n	8013456 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013452:	4b57      	ldr	r3, [pc, #348]	@ (80135b0 <netif_add+0x1ac>)
 8013454:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013456:	683b      	ldr	r3, [r7, #0]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d101      	bne.n	8013460 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801345c:	4b54      	ldr	r3, [pc, #336]	@ (80135b0 <netif_add+0x1ac>)
 801345e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	2200      	movs	r2, #0
 8013464:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	2200      	movs	r2, #0
 801346a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	2200      	movs	r2, #0
 8013470:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	4a4f      	ldr	r2, [pc, #316]	@ (80135b4 <netif_add+0x1b0>)
 8013476:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	2200      	movs	r2, #0
 801347c:	861a      	strh	r2, [r3, #48]	@ 0x30
  netif->flags = 0;
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	2200      	movs	r2, #0
 8013482:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	3324      	adds	r3, #36	@ 0x24
 801348a:	220c      	movs	r2, #12
 801348c:	2100      	movs	r1, #0
 801348e:	4618      	mov	r0, r3
 8013490:	f00e f960 	bl	8021754 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	2200      	movs	r2, #0
 8013498:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	2200      	movs	r2, #0
 801349e:	641a      	str	r2, [r3, #64]	@ 0x40
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	6a3a      	ldr	r2, [r7, #32]
 80134a4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80134a6:	4b44      	ldr	r3, [pc, #272]	@ (80135b8 <netif_add+0x1b4>)
 80134a8:	781a      	ldrb	r2, [r3, #0]
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  netif->input = input;
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80134b4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	687a      	ldr	r2, [r7, #4]
 80134ba:	68b9      	ldr	r1, [r7, #8]
 80134bc:	68f8      	ldr	r0, [r7, #12]
 80134be:	f000 f91d 	bl	80136fc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80134c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134c4:	68f8      	ldr	r0, [r7, #12]
 80134c6:	4798      	blx	r3
 80134c8:	4603      	mov	r3, r0
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d001      	beq.n	80134d2 <netif_add+0xce>
    return NULL;
 80134ce:	2300      	movs	r3, #0
 80134d0:	e062      	b.n	8013598 <netif_add+0x194>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80134d8:	2bff      	cmp	r3, #255	@ 0xff
 80134da:	d103      	bne.n	80134e4 <netif_add+0xe0>
        netif->num = 0;
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	2200      	movs	r2, #0
 80134e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      }
      num_netifs = 0;
 80134e4:	2300      	movs	r3, #0
 80134e6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80134e8:	4b34      	ldr	r3, [pc, #208]	@ (80135bc <netif_add+0x1b8>)
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	617b      	str	r3, [r7, #20]
 80134ee:	e02b      	b.n	8013548 <netif_add+0x144>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80134f0:	697a      	ldr	r2, [r7, #20]
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	429a      	cmp	r2, r3
 80134f6:	d106      	bne.n	8013506 <netif_add+0x102>
 80134f8:	4b29      	ldr	r3, [pc, #164]	@ (80135a0 <netif_add+0x19c>)
 80134fa:	f240 128b 	movw	r2, #395	@ 0x18b
 80134fe:	4930      	ldr	r1, [pc, #192]	@ (80135c0 <netif_add+0x1bc>)
 8013500:	4829      	ldr	r0, [pc, #164]	@ (80135a8 <netif_add+0x1a4>)
 8013502:	f00d ff57 	bl	80213b4 <iprintf>
        num_netifs++;
 8013506:	693b      	ldr	r3, [r7, #16]
 8013508:	3301      	adds	r3, #1
 801350a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	2bff      	cmp	r3, #255	@ 0xff
 8013510:	dd06      	ble.n	8013520 <netif_add+0x11c>
 8013512:	4b23      	ldr	r3, [pc, #140]	@ (80135a0 <netif_add+0x19c>)
 8013514:	f240 128d 	movw	r2, #397	@ 0x18d
 8013518:	492a      	ldr	r1, [pc, #168]	@ (80135c4 <netif_add+0x1c0>)
 801351a:	4823      	ldr	r0, [pc, #140]	@ (80135a8 <netif_add+0x1a4>)
 801351c:	f00d ff4a 	bl	80213b4 <iprintf>
        if (netif2->num == netif->num) {
 8013520:	697b      	ldr	r3, [r7, #20]
 8013522:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801352c:	429a      	cmp	r2, r3
 801352e:	d108      	bne.n	8013542 <netif_add+0x13e>
          netif->num++;
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013536:	3301      	adds	r3, #1
 8013538:	b2da      	uxtb	r2, r3
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          break;
 8013540:	e005      	b.n	801354e <netif_add+0x14a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013542:	697b      	ldr	r3, [r7, #20]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	617b      	str	r3, [r7, #20]
 8013548:	697b      	ldr	r3, [r7, #20]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d1d0      	bne.n	80134f0 <netif_add+0xec>
        }
      }
    } while (netif2 != NULL);
 801354e:	697b      	ldr	r3, [r7, #20]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d1be      	bne.n	80134d2 <netif_add+0xce>
  }
  if (netif->num == 254) {
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801355a:	2bfe      	cmp	r3, #254	@ 0xfe
 801355c:	d103      	bne.n	8013566 <netif_add+0x162>
    netif_num = 0;
 801355e:	4b16      	ldr	r3, [pc, #88]	@ (80135b8 <netif_add+0x1b4>)
 8013560:	2200      	movs	r2, #0
 8013562:	701a      	strb	r2, [r3, #0]
 8013564:	e006      	b.n	8013574 <netif_add+0x170>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801356c:	3301      	adds	r3, #1
 801356e:	b2da      	uxtb	r2, r3
 8013570:	4b11      	ldr	r3, [pc, #68]	@ (80135b8 <netif_add+0x1b4>)
 8013572:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013574:	4b11      	ldr	r3, [pc, #68]	@ (80135bc <netif_add+0x1b8>)
 8013576:	681a      	ldr	r2, [r3, #0]
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801357c:	4a0f      	ldr	r2, [pc, #60]	@ (80135bc <netif_add+0x1b8>)
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	6013      	str	r3, [r2, #0]
#endif /* "LWIP_SINGLE_NETIF */
  mib2_netif_added(netif);

#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8013588:	f003 0320 	and.w	r3, r3, #32
 801358c:	2b00      	cmp	r3, #0
 801358e:	d002      	beq.n	8013596 <netif_add+0x192>
    igmp_start(netif);
 8013590:	68f8      	ldr	r0, [r7, #12]
 8013592:	f00b f8d5 	bl	801e740 <igmp_start>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8013596:	68fb      	ldr	r3, [r7, #12]
}
 8013598:	4618      	mov	r0, r3
 801359a:	3718      	adds	r7, #24
 801359c:	46bd      	mov	sp, r7
 801359e:	bd80      	pop	{r7, pc}
 80135a0:	080239ec 	.word	0x080239ec
 80135a4:	08023a80 	.word	0x08023a80
 80135a8:	08023a3c 	.word	0x08023a3c
 80135ac:	08023a9c 	.word	0x08023a9c
 80135b0:	08027754 	.word	0x08027754
 80135b4:	08013a41 	.word	0x08013a41
 80135b8:	20004be4 	.word	0x20004be4
 80135bc:	20004bdc 	.word	0x20004bdc
 80135c0:	08023ac0 	.word	0x08023ac0
 80135c4:	08023ad4 	.word	0x08023ad4

080135c8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b082      	sub	sp, #8
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
 80135d0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80135d2:	6839      	ldr	r1, [r7, #0]
 80135d4:	6878      	ldr	r0, [r7, #4]
 80135d6:	f003 f82f 	bl	8016638 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80135da:	6839      	ldr	r1, [r7, #0]
 80135dc:	6878      	ldr	r0, [r7, #4]
 80135de:	f008 f8fd 	bl	801b7dc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80135e2:	bf00      	nop
 80135e4:	3708      	adds	r7, #8
 80135e6:	46bd      	mov	sp, r7
 80135e8:	bd80      	pop	{r7, pc}
	...

080135ec <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b086      	sub	sp, #24
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	60f8      	str	r0, [r7, #12]
 80135f4:	60b9      	str	r1, [r7, #8]
 80135f6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80135f8:	68bb      	ldr	r3, [r7, #8]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d106      	bne.n	801360c <netif_do_set_ipaddr+0x20>
 80135fe:	4b1d      	ldr	r3, [pc, #116]	@ (8013674 <netif_do_set_ipaddr+0x88>)
 8013600:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8013604:	491c      	ldr	r1, [pc, #112]	@ (8013678 <netif_do_set_ipaddr+0x8c>)
 8013606:	481d      	ldr	r0, [pc, #116]	@ (801367c <netif_do_set_ipaddr+0x90>)
 8013608:	f00d fed4 	bl	80213b4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	2b00      	cmp	r3, #0
 8013610:	d106      	bne.n	8013620 <netif_do_set_ipaddr+0x34>
 8013612:	4b18      	ldr	r3, [pc, #96]	@ (8013674 <netif_do_set_ipaddr+0x88>)
 8013614:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8013618:	4917      	ldr	r1, [pc, #92]	@ (8013678 <netif_do_set_ipaddr+0x8c>)
 801361a:	4818      	ldr	r0, [pc, #96]	@ (801367c <netif_do_set_ipaddr+0x90>)
 801361c:	f00d feca 	bl	80213b4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8013620:	68bb      	ldr	r3, [r7, #8]
 8013622:	681a      	ldr	r2, [r3, #0]
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	3304      	adds	r3, #4
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	429a      	cmp	r2, r3
 801362c:	d01c      	beq.n	8013668 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801362e:	68bb      	ldr	r3, [r7, #8]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	3304      	adds	r3, #4
 8013638:	681a      	ldr	r2, [r3, #0]
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801363e:	f107 0314 	add.w	r3, r7, #20
 8013642:	4619      	mov	r1, r3
 8013644:	6878      	ldr	r0, [r7, #4]
 8013646:	f7ff ffbf 	bl	80135c8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801364a:	68bb      	ldr	r3, [r7, #8]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d002      	beq.n	8013656 <netif_do_set_ipaddr+0x6a>
 8013650:	68bb      	ldr	r3, [r7, #8]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	e000      	b.n	8013658 <netif_do_set_ipaddr+0x6c>
 8013656:	2300      	movs	r3, #0
 8013658:	68fa      	ldr	r2, [r7, #12]
 801365a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801365c:	2101      	movs	r1, #1
 801365e:	68f8      	ldr	r0, [r7, #12]
 8013660:	f000 f8d2 	bl	8013808 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8013664:	2301      	movs	r3, #1
 8013666:	e000      	b.n	801366a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8013668:	2300      	movs	r3, #0
}
 801366a:	4618      	mov	r0, r3
 801366c:	3718      	adds	r7, #24
 801366e:	46bd      	mov	sp, r7
 8013670:	bd80      	pop	{r7, pc}
 8013672:	bf00      	nop
 8013674:	080239ec 	.word	0x080239ec
 8013678:	08023b04 	.word	0x08023b04
 801367c:	08023a3c 	.word	0x08023a3c

08013680 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8013680:	b480      	push	{r7}
 8013682:	b085      	sub	sp, #20
 8013684:	af00      	add	r7, sp, #0
 8013686:	60f8      	str	r0, [r7, #12]
 8013688:	60b9      	str	r1, [r7, #8]
 801368a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801368c:	68bb      	ldr	r3, [r7, #8]
 801368e:	681a      	ldr	r2, [r3, #0]
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	3308      	adds	r3, #8
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	429a      	cmp	r2, r3
 8013698:	d00a      	beq.n	80136b0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801369a:	68bb      	ldr	r3, [r7, #8]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d002      	beq.n	80136a6 <netif_do_set_netmask+0x26>
 80136a0:	68bb      	ldr	r3, [r7, #8]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	e000      	b.n	80136a8 <netif_do_set_netmask+0x28>
 80136a6:	2300      	movs	r3, #0
 80136a8:	68fa      	ldr	r2, [r7, #12]
 80136aa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80136ac:	2301      	movs	r3, #1
 80136ae:	e000      	b.n	80136b2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80136b0:	2300      	movs	r3, #0
}
 80136b2:	4618      	mov	r0, r3
 80136b4:	3714      	adds	r7, #20
 80136b6:	46bd      	mov	sp, r7
 80136b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136bc:	4770      	bx	lr

080136be <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80136be:	b480      	push	{r7}
 80136c0:	b085      	sub	sp, #20
 80136c2:	af00      	add	r7, sp, #0
 80136c4:	60f8      	str	r0, [r7, #12]
 80136c6:	60b9      	str	r1, [r7, #8]
 80136c8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80136ca:	68bb      	ldr	r3, [r7, #8]
 80136cc:	681a      	ldr	r2, [r3, #0]
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	330c      	adds	r3, #12
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d00a      	beq.n	80136ee <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80136d8:	68bb      	ldr	r3, [r7, #8]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d002      	beq.n	80136e4 <netif_do_set_gw+0x26>
 80136de:	68bb      	ldr	r3, [r7, #8]
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	e000      	b.n	80136e6 <netif_do_set_gw+0x28>
 80136e4:	2300      	movs	r3, #0
 80136e6:	68fa      	ldr	r2, [r7, #12]
 80136e8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80136ea:	2301      	movs	r3, #1
 80136ec:	e000      	b.n	80136f0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80136ee:	2300      	movs	r3, #0
}
 80136f0:	4618      	mov	r0, r3
 80136f2:	3714      	adds	r7, #20
 80136f4:	46bd      	mov	sp, r7
 80136f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fa:	4770      	bx	lr

080136fc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b088      	sub	sp, #32
 8013700:	af00      	add	r7, sp, #0
 8013702:	60f8      	str	r0, [r7, #12]
 8013704:	60b9      	str	r1, [r7, #8]
 8013706:	607a      	str	r2, [r7, #4]
 8013708:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801370a:	2300      	movs	r3, #0
 801370c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801370e:	2300      	movs	r3, #0
 8013710:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d101      	bne.n	801371c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013718:	4b1c      	ldr	r3, [pc, #112]	@ (801378c <netif_set_addr+0x90>)
 801371a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d101      	bne.n	8013726 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8013722:	4b1a      	ldr	r3, [pc, #104]	@ (801378c <netif_set_addr+0x90>)
 8013724:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013726:	683b      	ldr	r3, [r7, #0]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d101      	bne.n	8013730 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801372c:	4b17      	ldr	r3, [pc, #92]	@ (801378c <netif_set_addr+0x90>)
 801372e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d003      	beq.n	801373e <netif_set_addr+0x42>
 8013736:	68bb      	ldr	r3, [r7, #8]
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d101      	bne.n	8013742 <netif_set_addr+0x46>
 801373e:	2301      	movs	r3, #1
 8013740:	e000      	b.n	8013744 <netif_set_addr+0x48>
 8013742:	2300      	movs	r3, #0
 8013744:	617b      	str	r3, [r7, #20]
  if (remove) {
 8013746:	697b      	ldr	r3, [r7, #20]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d006      	beq.n	801375a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801374c:	f107 0310 	add.w	r3, r7, #16
 8013750:	461a      	mov	r2, r3
 8013752:	68b9      	ldr	r1, [r7, #8]
 8013754:	68f8      	ldr	r0, [r7, #12]
 8013756:	f7ff ff49 	bl	80135ec <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801375a:	69fa      	ldr	r2, [r7, #28]
 801375c:	6879      	ldr	r1, [r7, #4]
 801375e:	68f8      	ldr	r0, [r7, #12]
 8013760:	f7ff ff8e 	bl	8013680 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8013764:	69ba      	ldr	r2, [r7, #24]
 8013766:	6839      	ldr	r1, [r7, #0]
 8013768:	68f8      	ldr	r0, [r7, #12]
 801376a:	f7ff ffa8 	bl	80136be <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801376e:	697b      	ldr	r3, [r7, #20]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d106      	bne.n	8013782 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013774:	f107 0310 	add.w	r3, r7, #16
 8013778:	461a      	mov	r2, r3
 801377a:	68b9      	ldr	r1, [r7, #8]
 801377c:	68f8      	ldr	r0, [r7, #12]
 801377e:	f7ff ff35 	bl	80135ec <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8013782:	bf00      	nop
 8013784:	3720      	adds	r7, #32
 8013786:	46bd      	mov	sp, r7
 8013788:	bd80      	pop	{r7, pc}
 801378a:	bf00      	nop
 801378c:	08027754 	.word	0x08027754

08013790 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8013790:	b480      	push	{r7}
 8013792:	b083      	sub	sp, #12
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013798:	4a04      	ldr	r2, [pc, #16]	@ (80137ac <netif_set_default+0x1c>)
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801379e:	bf00      	nop
 80137a0:	370c      	adds	r7, #12
 80137a2:	46bd      	mov	sp, r7
 80137a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a8:	4770      	bx	lr
 80137aa:	bf00      	nop
 80137ac:	20004be0 	.word	0x20004be0

080137b0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b082      	sub	sp, #8
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d107      	bne.n	80137ce <netif_set_up+0x1e>
 80137be:	4b0f      	ldr	r3, [pc, #60]	@ (80137fc <netif_set_up+0x4c>)
 80137c0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80137c4:	490e      	ldr	r1, [pc, #56]	@ (8013800 <netif_set_up+0x50>)
 80137c6:	480f      	ldr	r0, [pc, #60]	@ (8013804 <netif_set_up+0x54>)
 80137c8:	f00d fdf4 	bl	80213b4 <iprintf>
 80137cc:	e013      	b.n	80137f6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80137d4:	f003 0301 	and.w	r3, r3, #1
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d10c      	bne.n	80137f6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80137e2:	f043 0301 	orr.w	r3, r3, #1
 80137e6:	b2da      	uxtb	r2, r3
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80137ee:	2103      	movs	r1, #3
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f000 f809 	bl	8013808 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80137f6:	3708      	adds	r7, #8
 80137f8:	46bd      	mov	sp, r7
 80137fa:	bd80      	pop	{r7, pc}
 80137fc:	080239ec 	.word	0x080239ec
 8013800:	08023b74 	.word	0x08023b74
 8013804:	08023a3c 	.word	0x08023a3c

08013808 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b082      	sub	sp, #8
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
 8013810:	460b      	mov	r3, r1
 8013812:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d106      	bne.n	8013828 <netif_issue_reports+0x20>
 801381a:	4b1d      	ldr	r3, [pc, #116]	@ (8013890 <netif_issue_reports+0x88>)
 801381c:	f240 326d 	movw	r2, #877	@ 0x36d
 8013820:	491c      	ldr	r1, [pc, #112]	@ (8013894 <netif_issue_reports+0x8c>)
 8013822:	481d      	ldr	r0, [pc, #116]	@ (8013898 <netif_issue_reports+0x90>)
 8013824:	f00d fdc6 	bl	80213b4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 801382e:	f003 0304 	and.w	r3, r3, #4
 8013832:	2b00      	cmp	r3, #0
 8013834:	d028      	beq.n	8013888 <netif_issue_reports+0x80>
      !(netif->flags & NETIF_FLAG_UP)) {
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 801383c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013840:	2b00      	cmp	r3, #0
 8013842:	d021      	beq.n	8013888 <netif_issue_reports+0x80>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013844:	78fb      	ldrb	r3, [r7, #3]
 8013846:	f003 0301 	and.w	r3, r3, #1
 801384a:	2b00      	cmp	r3, #0
 801384c:	d01d      	beq.n	801388a <netif_issue_reports+0x82>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	3304      	adds	r3, #4
 8013852:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013854:	2b00      	cmp	r3, #0
 8013856:	d018      	beq.n	801388a <netif_issue_reports+0x82>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 801385e:	f003 0308 	and.w	r3, r3, #8
 8013862:	2b00      	cmp	r3, #0
 8013864:	d005      	beq.n	8013872 <netif_issue_reports+0x6a>
      etharp_gratuitous(netif);
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	3304      	adds	r3, #4
 801386a:	4619      	mov	r1, r3
 801386c:	6878      	ldr	r0, [r7, #4]
 801386e:	f00a fdb1 	bl	801e3d4 <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8013878:	f003 0320 	and.w	r3, r3, #32
 801387c:	2b00      	cmp	r3, #0
 801387e:	d004      	beq.n	801388a <netif_issue_reports+0x82>
      igmp_report_groups(netif);
 8013880:	6878      	ldr	r0, [r7, #4]
 8013882:	f00a ff87 	bl	801e794 <igmp_report_groups>
 8013886:	e000      	b.n	801388a <netif_issue_reports+0x82>
    return;
 8013888:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801388a:	3708      	adds	r7, #8
 801388c:	46bd      	mov	sp, r7
 801388e:	bd80      	pop	{r7, pc}
 8013890:	080239ec 	.word	0x080239ec
 8013894:	08023b90 	.word	0x08023b90
 8013898:	08023a3c 	.word	0x08023a3c

0801389c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801389c:	b580      	push	{r7, lr}
 801389e:	b082      	sub	sp, #8
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d107      	bne.n	80138ba <netif_set_down+0x1e>
 80138aa:	4b12      	ldr	r3, [pc, #72]	@ (80138f4 <netif_set_down+0x58>)
 80138ac:	f240 329b 	movw	r2, #923	@ 0x39b
 80138b0:	4911      	ldr	r1, [pc, #68]	@ (80138f8 <netif_set_down+0x5c>)
 80138b2:	4812      	ldr	r0, [pc, #72]	@ (80138fc <netif_set_down+0x60>)
 80138b4:	f00d fd7e 	bl	80213b4 <iprintf>
 80138b8:	e019      	b.n	80138ee <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80138c0:	f003 0301 	and.w	r3, r3, #1
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d012      	beq.n	80138ee <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80138ce:	f023 0301 	bic.w	r3, r3, #1
 80138d2:	b2da      	uxtb	r2, r3
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80138e0:	f003 0308 	and.w	r3, r3, #8
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d002      	beq.n	80138ee <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80138e8:	6878      	ldr	r0, [r7, #4]
 80138ea:	f00a f92d 	bl	801db48 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80138ee:	3708      	adds	r7, #8
 80138f0:	46bd      	mov	sp, r7
 80138f2:	bd80      	pop	{r7, pc}
 80138f4:	080239ec 	.word	0x080239ec
 80138f8:	08023bb4 	.word	0x08023bb4
 80138fc:	08023a3c 	.word	0x08023a3c

08013900 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b082      	sub	sp, #8
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d107      	bne.n	801391e <netif_set_link_up+0x1e>
 801390e:	4b15      	ldr	r3, [pc, #84]	@ (8013964 <netif_set_link_up+0x64>)
 8013910:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8013914:	4914      	ldr	r1, [pc, #80]	@ (8013968 <netif_set_link_up+0x68>)
 8013916:	4815      	ldr	r0, [pc, #84]	@ (801396c <netif_set_link_up+0x6c>)
 8013918:	f00d fd4c 	bl	80213b4 <iprintf>
 801391c:	e01e      	b.n	801395c <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8013924:	f003 0304 	and.w	r3, r3, #4
 8013928:	2b00      	cmp	r3, #0
 801392a:	d117      	bne.n	801395c <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8013932:	f043 0304 	orr.w	r3, r3, #4
 8013936:	b2da      	uxtb	r2, r3
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if LWIP_DHCP
    dhcp_network_changed(netif);
 801393e:	6878      	ldr	r0, [r7, #4]
 8013940:	f008 fb78 	bl	801c034 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013944:	2103      	movs	r1, #3
 8013946:	6878      	ldr	r0, [r7, #4]
 8013948:	f7ff ff5e 	bl	8013808 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	69db      	ldr	r3, [r3, #28]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d003      	beq.n	801395c <netif_set_link_up+0x5c>
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	69db      	ldr	r3, [r3, #28]
 8013958:	6878      	ldr	r0, [r7, #4]
 801395a:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801395c:	3708      	adds	r7, #8
 801395e:	46bd      	mov	sp, r7
 8013960:	bd80      	pop	{r7, pc}
 8013962:	bf00      	nop
 8013964:	080239ec 	.word	0x080239ec
 8013968:	08023bd4 	.word	0x08023bd4
 801396c:	08023a3c 	.word	0x08023a3c

08013970 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8013970:	b580      	push	{r7, lr}
 8013972:	b082      	sub	sp, #8
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d107      	bne.n	801398e <netif_set_link_down+0x1e>
 801397e:	4b11      	ldr	r3, [pc, #68]	@ (80139c4 <netif_set_link_down+0x54>)
 8013980:	f240 4206 	movw	r2, #1030	@ 0x406
 8013984:	4910      	ldr	r1, [pc, #64]	@ (80139c8 <netif_set_link_down+0x58>)
 8013986:	4811      	ldr	r0, [pc, #68]	@ (80139cc <netif_set_link_down+0x5c>)
 8013988:	f00d fd14 	bl	80213b4 <iprintf>
 801398c:	e017      	b.n	80139be <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8013994:	f003 0304 	and.w	r3, r3, #4
 8013998:	2b00      	cmp	r3, #0
 801399a:	d010      	beq.n	80139be <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80139a2:	f023 0304 	bic.w	r3, r3, #4
 80139a6:	b2da      	uxtb	r2, r3
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    NETIF_LINK_CALLBACK(netif);
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	69db      	ldr	r3, [r3, #28]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d003      	beq.n	80139be <netif_set_link_down+0x4e>
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	69db      	ldr	r3, [r3, #28]
 80139ba:	6878      	ldr	r0, [r7, #4]
 80139bc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80139be:	3708      	adds	r7, #8
 80139c0:	46bd      	mov	sp, r7
 80139c2:	bd80      	pop	{r7, pc}
 80139c4:	080239ec 	.word	0x080239ec
 80139c8:	08023bf8 	.word	0x08023bf8
 80139cc:	08023a3c 	.word	0x08023a3c

080139d0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80139d0:	b480      	push	{r7}
 80139d2:	b083      	sub	sp, #12
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	6078      	str	r0, [r7, #4]
 80139d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d002      	beq.n	80139e6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	683a      	ldr	r2, [r7, #0]
 80139e4:	61da      	str	r2, [r3, #28]
  }
}
 80139e6:	bf00      	nop
 80139e8:	370c      	adds	r7, #12
 80139ea:	46bd      	mov	sp, r7
 80139ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f0:	4770      	bx	lr
	...

080139f4 <netif_alloc_client_data_id>:
 * Returned value is an index in mentioned array.
 * @see LWIP_NUM_NETIF_CLIENT_DATA
 */
u8_t
netif_alloc_client_data_id(void)
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b082      	sub	sp, #8
 80139f8:	af00      	add	r7, sp, #0
  u8_t result = netif_client_id;
 80139fa:	4b0d      	ldr	r3, [pc, #52]	@ (8013a30 <netif_alloc_client_data_id+0x3c>)
 80139fc:	781b      	ldrb	r3, [r3, #0]
 80139fe:	71fb      	strb	r3, [r7, #7]
  netif_client_id++;
 8013a00:	4b0b      	ldr	r3, [pc, #44]	@ (8013a30 <netif_alloc_client_data_id+0x3c>)
 8013a02:	781b      	ldrb	r3, [r3, #0]
 8013a04:	3301      	adds	r3, #1
 8013a06:	b2da      	uxtb	r2, r3
 8013a08:	4b09      	ldr	r3, [pc, #36]	@ (8013a30 <netif_alloc_client_data_id+0x3c>)
 8013a0a:	701a      	strb	r2, [r3, #0]
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_NUM_NETIF_CLIENT_DATA > 256
#error LWIP_NUM_NETIF_CLIENT_DATA must be <= 256
#endif
  LWIP_ASSERT("Increase LWIP_NUM_NETIF_CLIENT_DATA in lwipopts.h", result < LWIP_NUM_NETIF_CLIENT_DATA);
 8013a0c:	79fb      	ldrb	r3, [r7, #7]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d006      	beq.n	8013a20 <netif_alloc_client_data_id+0x2c>
 8013a12:	4b08      	ldr	r3, [pc, #32]	@ (8013a34 <netif_alloc_client_data_id+0x40>)
 8013a14:	f240 5211 	movw	r2, #1297	@ 0x511
 8013a18:	4907      	ldr	r1, [pc, #28]	@ (8013a38 <netif_alloc_client_data_id+0x44>)
 8013a1a:	4808      	ldr	r0, [pc, #32]	@ (8013a3c <netif_alloc_client_data_id+0x48>)
 8013a1c:	f00d fcca 	bl	80213b4 <iprintf>
  return (u8_t)(result + LWIP_NETIF_CLIENT_DATA_INDEX_MAX);
 8013a20:	79fb      	ldrb	r3, [r7, #7]
 8013a22:	3302      	adds	r3, #2
 8013a24:	b2db      	uxtb	r3, r3
}
 8013a26:	4618      	mov	r0, r3
 8013a28:	3708      	adds	r7, #8
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	bd80      	pop	{r7, pc}
 8013a2e:	bf00      	nop
 8013a30:	20004be5 	.word	0x20004be5
 8013a34:	080239ec 	.word	0x080239ec
 8013a38:	08023c1c 	.word	0x08023c1c
 8013a3c:	08023a3c 	.word	0x08023a3c

08013a40 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8013a40:	b480      	push	{r7}
 8013a42:	b085      	sub	sp, #20
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	60f8      	str	r0, [r7, #12]
 8013a48:	60b9      	str	r1, [r7, #8]
 8013a4a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8013a4c:	f06f 030b 	mvn.w	r3, #11
}
 8013a50:	4618      	mov	r0, r3
 8013a52:	3714      	adds	r7, #20
 8013a54:	46bd      	mov	sp, r7
 8013a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5a:	4770      	bx	lr

08013a5c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8013a5c:	b480      	push	{r7}
 8013a5e:	b085      	sub	sp, #20
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	4603      	mov	r3, r0
 8013a64:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8013a66:	79fb      	ldrb	r3, [r7, #7]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d013      	beq.n	8013a94 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8013a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8013aa4 <netif_get_by_index+0x48>)
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	60fb      	str	r3, [r7, #12]
 8013a72:	e00c      	b.n	8013a8e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013a7a:	3301      	adds	r3, #1
 8013a7c:	b2db      	uxtb	r3, r3
 8013a7e:	79fa      	ldrb	r2, [r7, #7]
 8013a80:	429a      	cmp	r2, r3
 8013a82:	d101      	bne.n	8013a88 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	e006      	b.n	8013a96 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	60fb      	str	r3, [r7, #12]
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d1ef      	bne.n	8013a74 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8013a94:	2300      	movs	r3, #0
}
 8013a96:	4618      	mov	r0, r3
 8013a98:	3714      	adds	r7, #20
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa0:	4770      	bx	lr
 8013aa2:	bf00      	nop
 8013aa4:	20004bdc 	.word	0x20004bdc

08013aa8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b082      	sub	sp, #8
 8013aac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8013aae:	f00c fd0f 	bl	80204d0 <sys_arch_protect>
 8013ab2:	6038      	str	r0, [r7, #0]
 8013ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8013aec <pbuf_free_ooseq+0x44>)
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	701a      	strb	r2, [r3, #0]
 8013aba:	6838      	ldr	r0, [r7, #0]
 8013abc:	f00c fd16 	bl	80204ec <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8013af0 <pbuf_free_ooseq+0x48>)
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	607b      	str	r3, [r7, #4]
 8013ac6:	e00a      	b.n	8013ade <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d003      	beq.n	8013ad8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013ad0:	6878      	ldr	r0, [r7, #4]
 8013ad2:	f002 fdef 	bl	80166b4 <tcp_free_ooseq>
      return;
 8013ad6:	e005      	b.n	8013ae4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	68db      	ldr	r3, [r3, #12]
 8013adc:	607b      	str	r3, [r7, #4]
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d1f1      	bne.n	8013ac8 <pbuf_free_ooseq+0x20>
    }
  }
}
 8013ae4:	3708      	adds	r7, #8
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}
 8013aea:	bf00      	nop
 8013aec:	20004be6 	.word	0x20004be6
 8013af0:	20004bf4 	.word	0x20004bf4

08013af4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b082      	sub	sp, #8
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013afc:	f7ff ffd4 	bl	8013aa8 <pbuf_free_ooseq>
}
 8013b00:	bf00      	nop
 8013b02:	3708      	adds	r7, #8
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}

08013b08 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b082      	sub	sp, #8
 8013b0c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013b0e:	f00c fcdf 	bl	80204d0 <sys_arch_protect>
 8013b12:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013b14:	4b0f      	ldr	r3, [pc, #60]	@ (8013b54 <pbuf_pool_is_empty+0x4c>)
 8013b16:	781b      	ldrb	r3, [r3, #0]
 8013b18:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8013b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8013b54 <pbuf_pool_is_empty+0x4c>)
 8013b1c:	2201      	movs	r2, #1
 8013b1e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013b20:	6878      	ldr	r0, [r7, #4]
 8013b22:	f00c fce3 	bl	80204ec <sys_arch_unprotect>

  if (!queued) {
 8013b26:	78fb      	ldrb	r3, [r7, #3]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d10f      	bne.n	8013b4c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013b2c:	2100      	movs	r1, #0
 8013b2e:	480a      	ldr	r0, [pc, #40]	@ (8013b58 <pbuf_pool_is_empty+0x50>)
 8013b30:	f7fa f8a4 	bl	800dc7c <tcpip_try_callback>
 8013b34:	4603      	mov	r3, r0
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d008      	beq.n	8013b4c <pbuf_pool_is_empty+0x44>
 8013b3a:	f00c fcc9 	bl	80204d0 <sys_arch_protect>
 8013b3e:	6078      	str	r0, [r7, #4]
 8013b40:	4b04      	ldr	r3, [pc, #16]	@ (8013b54 <pbuf_pool_is_empty+0x4c>)
 8013b42:	2200      	movs	r2, #0
 8013b44:	701a      	strb	r2, [r3, #0]
 8013b46:	6878      	ldr	r0, [r7, #4]
 8013b48:	f00c fcd0 	bl	80204ec <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013b4c:	bf00      	nop
 8013b4e:	3708      	adds	r7, #8
 8013b50:	46bd      	mov	sp, r7
 8013b52:	bd80      	pop	{r7, pc}
 8013b54:	20004be6 	.word	0x20004be6
 8013b58:	08013af5 	.word	0x08013af5

08013b5c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8013b5c:	b480      	push	{r7}
 8013b5e:	b085      	sub	sp, #20
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	60f8      	str	r0, [r7, #12]
 8013b64:	60b9      	str	r1, [r7, #8]
 8013b66:	4611      	mov	r1, r2
 8013b68:	461a      	mov	r2, r3
 8013b6a:	460b      	mov	r3, r1
 8013b6c:	80fb      	strh	r3, [r7, #6]
 8013b6e:	4613      	mov	r3, r2
 8013b70:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	2200      	movs	r2, #0
 8013b76:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	68ba      	ldr	r2, [r7, #8]
 8013b7c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	88fa      	ldrh	r2, [r7, #6]
 8013b82:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	88ba      	ldrh	r2, [r7, #4]
 8013b88:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8013b8a:	8b3b      	ldrh	r3, [r7, #24]
 8013b8c:	b2da      	uxtb	r2, r3
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	7f3a      	ldrb	r2, [r7, #28]
 8013b96:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	2201      	movs	r2, #1
 8013b9c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	73da      	strb	r2, [r3, #15]
}
 8013ba4:	bf00      	nop
 8013ba6:	3714      	adds	r7, #20
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bae:	4770      	bx	lr

08013bb0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b08c      	sub	sp, #48	@ 0x30
 8013bb4:	af02      	add	r7, sp, #8
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	71fb      	strb	r3, [r7, #7]
 8013bba:	460b      	mov	r3, r1
 8013bbc:	80bb      	strh	r3, [r7, #4]
 8013bbe:	4613      	mov	r3, r2
 8013bc0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8013bc2:	79fb      	ldrb	r3, [r7, #7]
 8013bc4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8013bc6:	887b      	ldrh	r3, [r7, #2]
 8013bc8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013bcc:	d07f      	beq.n	8013cce <pbuf_alloc+0x11e>
 8013bce:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8013bd2:	f300 80c8 	bgt.w	8013d66 <pbuf_alloc+0x1b6>
 8013bd6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8013bda:	d010      	beq.n	8013bfe <pbuf_alloc+0x4e>
 8013bdc:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8013be0:	f300 80c1 	bgt.w	8013d66 <pbuf_alloc+0x1b6>
 8013be4:	2b01      	cmp	r3, #1
 8013be6:	d002      	beq.n	8013bee <pbuf_alloc+0x3e>
 8013be8:	2b41      	cmp	r3, #65	@ 0x41
 8013bea:	f040 80bc 	bne.w	8013d66 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013bee:	887a      	ldrh	r2, [r7, #2]
 8013bf0:	88bb      	ldrh	r3, [r7, #4]
 8013bf2:	4619      	mov	r1, r3
 8013bf4:	2000      	movs	r0, #0
 8013bf6:	f000 f8d1 	bl	8013d9c <pbuf_alloc_reference>
 8013bfa:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8013bfc:	e0bd      	b.n	8013d7a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013bfe:	2300      	movs	r3, #0
 8013c00:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8013c02:	2300      	movs	r3, #0
 8013c04:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8013c06:	88bb      	ldrh	r3, [r7, #4]
 8013c08:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8013c0a:	200d      	movs	r0, #13
 8013c0c:	f7ff fb58 	bl	80132c0 <memp_malloc>
 8013c10:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8013c12:	693b      	ldr	r3, [r7, #16]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d109      	bne.n	8013c2c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8013c18:	f7ff ff76 	bl	8013b08 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8013c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d002      	beq.n	8013c28 <pbuf_alloc+0x78>
            pbuf_free(p);
 8013c22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013c24:	f000 faa8 	bl	8014178 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8013c28:	2300      	movs	r3, #0
 8013c2a:	e0a7      	b.n	8013d7c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013c2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013c2e:	3303      	adds	r3, #3
 8013c30:	b29b      	uxth	r3, r3
 8013c32:	f023 0303 	bic.w	r3, r3, #3
 8013c36:	b29b      	uxth	r3, r3
 8013c38:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8013c3c:	b29b      	uxth	r3, r3
 8013c3e:	8b7a      	ldrh	r2, [r7, #26]
 8013c40:	4293      	cmp	r3, r2
 8013c42:	bf28      	it	cs
 8013c44:	4613      	movcs	r3, r2
 8013c46:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8013c48:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013c4a:	3310      	adds	r3, #16
 8013c4c:	693a      	ldr	r2, [r7, #16]
 8013c4e:	4413      	add	r3, r2
 8013c50:	3303      	adds	r3, #3
 8013c52:	f023 0303 	bic.w	r3, r3, #3
 8013c56:	4618      	mov	r0, r3
 8013c58:	89f9      	ldrh	r1, [r7, #14]
 8013c5a:	8b7a      	ldrh	r2, [r7, #26]
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	9301      	str	r3, [sp, #4]
 8013c60:	887b      	ldrh	r3, [r7, #2]
 8013c62:	9300      	str	r3, [sp, #0]
 8013c64:	460b      	mov	r3, r1
 8013c66:	4601      	mov	r1, r0
 8013c68:	6938      	ldr	r0, [r7, #16]
 8013c6a:	f7ff ff77 	bl	8013b5c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8013c6e:	693b      	ldr	r3, [r7, #16]
 8013c70:	685b      	ldr	r3, [r3, #4]
 8013c72:	f003 0303 	and.w	r3, r3, #3
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d006      	beq.n	8013c88 <pbuf_alloc+0xd8>
 8013c7a:	4b42      	ldr	r3, [pc, #264]	@ (8013d84 <pbuf_alloc+0x1d4>)
 8013c7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013c80:	4941      	ldr	r1, [pc, #260]	@ (8013d88 <pbuf_alloc+0x1d8>)
 8013c82:	4842      	ldr	r0, [pc, #264]	@ (8013d8c <pbuf_alloc+0x1dc>)
 8013c84:	f00d fb96 	bl	80213b4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8013c88:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013c8a:	3303      	adds	r3, #3
 8013c8c:	f023 0303 	bic.w	r3, r3, #3
 8013c90:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8013c94:	d106      	bne.n	8013ca4 <pbuf_alloc+0xf4>
 8013c96:	4b3b      	ldr	r3, [pc, #236]	@ (8013d84 <pbuf_alloc+0x1d4>)
 8013c98:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8013c9c:	493c      	ldr	r1, [pc, #240]	@ (8013d90 <pbuf_alloc+0x1e0>)
 8013c9e:	483b      	ldr	r0, [pc, #236]	@ (8013d8c <pbuf_alloc+0x1dc>)
 8013ca0:	f00d fb88 	bl	80213b4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8013ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d102      	bne.n	8013cb0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8013caa:	693b      	ldr	r3, [r7, #16]
 8013cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8013cae:	e002      	b.n	8013cb6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8013cb0:	69fb      	ldr	r3, [r7, #28]
 8013cb2:	693a      	ldr	r2, [r7, #16]
 8013cb4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8013cb6:	693b      	ldr	r3, [r7, #16]
 8013cb8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8013cba:	8b7a      	ldrh	r2, [r7, #26]
 8013cbc:	89fb      	ldrh	r3, [r7, #14]
 8013cbe:	1ad3      	subs	r3, r2, r3
 8013cc0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8013cc6:	8b7b      	ldrh	r3, [r7, #26]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d19e      	bne.n	8013c0a <pbuf_alloc+0x5a>
      break;
 8013ccc:	e055      	b.n	8013d7a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8013cce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013cd0:	3303      	adds	r3, #3
 8013cd2:	b29b      	uxth	r3, r3
 8013cd4:	f023 0303 	bic.w	r3, r3, #3
 8013cd8:	b29a      	uxth	r2, r3
 8013cda:	88bb      	ldrh	r3, [r7, #4]
 8013cdc:	3303      	adds	r3, #3
 8013cde:	b29b      	uxth	r3, r3
 8013ce0:	f023 0303 	bic.w	r3, r3, #3
 8013ce4:	b29b      	uxth	r3, r3
 8013ce6:	4413      	add	r3, r2
 8013ce8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8013cea:	8b3b      	ldrh	r3, [r7, #24]
 8013cec:	3310      	adds	r3, #16
 8013cee:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013cf0:	8b3a      	ldrh	r2, [r7, #24]
 8013cf2:	88bb      	ldrh	r3, [r7, #4]
 8013cf4:	3303      	adds	r3, #3
 8013cf6:	f023 0303 	bic.w	r3, r3, #3
 8013cfa:	429a      	cmp	r2, r3
 8013cfc:	d306      	bcc.n	8013d0c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8013cfe:	8afa      	ldrh	r2, [r7, #22]
 8013d00:	88bb      	ldrh	r3, [r7, #4]
 8013d02:	3303      	adds	r3, #3
 8013d04:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013d08:	429a      	cmp	r2, r3
 8013d0a:	d201      	bcs.n	8013d10 <pbuf_alloc+0x160>
        return NULL;
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	e035      	b.n	8013d7c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013d10:	8afb      	ldrh	r3, [r7, #22]
 8013d12:	4618      	mov	r0, r3
 8013d14:	f7ff f92c 	bl	8012f70 <mem_malloc>
 8013d18:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8013d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d101      	bne.n	8013d24 <pbuf_alloc+0x174>
        return NULL;
 8013d20:	2300      	movs	r3, #0
 8013d22:	e02b      	b.n	8013d7c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8013d24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013d26:	3310      	adds	r3, #16
 8013d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013d2a:	4413      	add	r3, r2
 8013d2c:	3303      	adds	r3, #3
 8013d2e:	f023 0303 	bic.w	r3, r3, #3
 8013d32:	4618      	mov	r0, r3
 8013d34:	88b9      	ldrh	r1, [r7, #4]
 8013d36:	88ba      	ldrh	r2, [r7, #4]
 8013d38:	2300      	movs	r3, #0
 8013d3a:	9301      	str	r3, [sp, #4]
 8013d3c:	887b      	ldrh	r3, [r7, #2]
 8013d3e:	9300      	str	r3, [sp, #0]
 8013d40:	460b      	mov	r3, r1
 8013d42:	4601      	mov	r1, r0
 8013d44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013d46:	f7ff ff09 	bl	8013b5c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8013d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d4c:	685b      	ldr	r3, [r3, #4]
 8013d4e:	f003 0303 	and.w	r3, r3, #3
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d010      	beq.n	8013d78 <pbuf_alloc+0x1c8>
 8013d56:	4b0b      	ldr	r3, [pc, #44]	@ (8013d84 <pbuf_alloc+0x1d4>)
 8013d58:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8013d5c:	490d      	ldr	r1, [pc, #52]	@ (8013d94 <pbuf_alloc+0x1e4>)
 8013d5e:	480b      	ldr	r0, [pc, #44]	@ (8013d8c <pbuf_alloc+0x1dc>)
 8013d60:	f00d fb28 	bl	80213b4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8013d64:	e008      	b.n	8013d78 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8013d66:	4b07      	ldr	r3, [pc, #28]	@ (8013d84 <pbuf_alloc+0x1d4>)
 8013d68:	f240 1227 	movw	r2, #295	@ 0x127
 8013d6c:	490a      	ldr	r1, [pc, #40]	@ (8013d98 <pbuf_alloc+0x1e8>)
 8013d6e:	4807      	ldr	r0, [pc, #28]	@ (8013d8c <pbuf_alloc+0x1dc>)
 8013d70:	f00d fb20 	bl	80213b4 <iprintf>
      return NULL;
 8013d74:	2300      	movs	r3, #0
 8013d76:	e001      	b.n	8013d7c <pbuf_alloc+0x1cc>
      break;
 8013d78:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8013d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	3728      	adds	r7, #40	@ 0x28
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}
 8013d84:	08023c50 	.word	0x08023c50
 8013d88:	08023c80 	.word	0x08023c80
 8013d8c:	08023cb0 	.word	0x08023cb0
 8013d90:	08023cd8 	.word	0x08023cd8
 8013d94:	08023d0c 	.word	0x08023d0c
 8013d98:	08023d38 	.word	0x08023d38

08013d9c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b086      	sub	sp, #24
 8013da0:	af02      	add	r7, sp, #8
 8013da2:	6078      	str	r0, [r7, #4]
 8013da4:	460b      	mov	r3, r1
 8013da6:	807b      	strh	r3, [r7, #2]
 8013da8:	4613      	mov	r3, r2
 8013daa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8013dac:	883b      	ldrh	r3, [r7, #0]
 8013dae:	2b41      	cmp	r3, #65	@ 0x41
 8013db0:	d009      	beq.n	8013dc6 <pbuf_alloc_reference+0x2a>
 8013db2:	883b      	ldrh	r3, [r7, #0]
 8013db4:	2b01      	cmp	r3, #1
 8013db6:	d006      	beq.n	8013dc6 <pbuf_alloc_reference+0x2a>
 8013db8:	4b0f      	ldr	r3, [pc, #60]	@ (8013df8 <pbuf_alloc_reference+0x5c>)
 8013dba:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8013dbe:	490f      	ldr	r1, [pc, #60]	@ (8013dfc <pbuf_alloc_reference+0x60>)
 8013dc0:	480f      	ldr	r0, [pc, #60]	@ (8013e00 <pbuf_alloc_reference+0x64>)
 8013dc2:	f00d faf7 	bl	80213b4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8013dc6:	200c      	movs	r0, #12
 8013dc8:	f7ff fa7a 	bl	80132c0 <memp_malloc>
 8013dcc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d101      	bne.n	8013dd8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	e00b      	b.n	8013df0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8013dd8:	8879      	ldrh	r1, [r7, #2]
 8013dda:	887a      	ldrh	r2, [r7, #2]
 8013ddc:	2300      	movs	r3, #0
 8013dde:	9301      	str	r3, [sp, #4]
 8013de0:	883b      	ldrh	r3, [r7, #0]
 8013de2:	9300      	str	r3, [sp, #0]
 8013de4:	460b      	mov	r3, r1
 8013de6:	6879      	ldr	r1, [r7, #4]
 8013de8:	68f8      	ldr	r0, [r7, #12]
 8013dea:	f7ff feb7 	bl	8013b5c <pbuf_init_alloced_pbuf>
  return p;
 8013dee:	68fb      	ldr	r3, [r7, #12]
}
 8013df0:	4618      	mov	r0, r3
 8013df2:	3710      	adds	r7, #16
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bd80      	pop	{r7, pc}
 8013df8:	08023c50 	.word	0x08023c50
 8013dfc:	08023d54 	.word	0x08023d54
 8013e00:	08023cb0 	.word	0x08023cb0

08013e04 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b088      	sub	sp, #32
 8013e08:	af02      	add	r7, sp, #8
 8013e0a:	607b      	str	r3, [r7, #4]
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	73fb      	strb	r3, [r7, #15]
 8013e10:	460b      	mov	r3, r1
 8013e12:	81bb      	strh	r3, [r7, #12]
 8013e14:	4613      	mov	r3, r2
 8013e16:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8013e18:	7bfb      	ldrb	r3, [r7, #15]
 8013e1a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8013e1c:	8a7b      	ldrh	r3, [r7, #18]
 8013e1e:	3303      	adds	r3, #3
 8013e20:	f023 0203 	bic.w	r2, r3, #3
 8013e24:	89bb      	ldrh	r3, [r7, #12]
 8013e26:	441a      	add	r2, r3
 8013e28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013e2a:	429a      	cmp	r2, r3
 8013e2c:	d901      	bls.n	8013e32 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	e018      	b.n	8013e64 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8013e32:	6a3b      	ldr	r3, [r7, #32]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d007      	beq.n	8013e48 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8013e38:	8a7b      	ldrh	r3, [r7, #18]
 8013e3a:	3303      	adds	r3, #3
 8013e3c:	f023 0303 	bic.w	r3, r3, #3
 8013e40:	6a3a      	ldr	r2, [r7, #32]
 8013e42:	4413      	add	r3, r2
 8013e44:	617b      	str	r3, [r7, #20]
 8013e46:	e001      	b.n	8013e4c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8013e48:	2300      	movs	r3, #0
 8013e4a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8013e4c:	6878      	ldr	r0, [r7, #4]
 8013e4e:	89b9      	ldrh	r1, [r7, #12]
 8013e50:	89ba      	ldrh	r2, [r7, #12]
 8013e52:	2302      	movs	r3, #2
 8013e54:	9301      	str	r3, [sp, #4]
 8013e56:	897b      	ldrh	r3, [r7, #10]
 8013e58:	9300      	str	r3, [sp, #0]
 8013e5a:	460b      	mov	r3, r1
 8013e5c:	6979      	ldr	r1, [r7, #20]
 8013e5e:	f7ff fe7d 	bl	8013b5c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8013e62:	687b      	ldr	r3, [r7, #4]
}
 8013e64:	4618      	mov	r0, r3
 8013e66:	3718      	adds	r7, #24
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}

08013e6c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b084      	sub	sp, #16
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
 8013e74:	460b      	mov	r3, r1
 8013e76:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d106      	bne.n	8013e8c <pbuf_realloc+0x20>
 8013e7e:	4b3a      	ldr	r3, [pc, #232]	@ (8013f68 <pbuf_realloc+0xfc>)
 8013e80:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8013e84:	4939      	ldr	r1, [pc, #228]	@ (8013f6c <pbuf_realloc+0x100>)
 8013e86:	483a      	ldr	r0, [pc, #232]	@ (8013f70 <pbuf_realloc+0x104>)
 8013e88:	f00d fa94 	bl	80213b4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	891b      	ldrh	r3, [r3, #8]
 8013e90:	887a      	ldrh	r2, [r7, #2]
 8013e92:	429a      	cmp	r2, r3
 8013e94:	d263      	bcs.n	8013f5e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	891a      	ldrh	r2, [r3, #8]
 8013e9a:	887b      	ldrh	r3, [r7, #2]
 8013e9c:	1ad3      	subs	r3, r2, r3
 8013e9e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8013ea0:	887b      	ldrh	r3, [r7, #2]
 8013ea2:	817b      	strh	r3, [r7, #10]
  q = p;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8013ea8:	e018      	b.n	8013edc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	895b      	ldrh	r3, [r3, #10]
 8013eae:	897a      	ldrh	r2, [r7, #10]
 8013eb0:	1ad3      	subs	r3, r2, r3
 8013eb2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	891a      	ldrh	r2, [r3, #8]
 8013eb8:	893b      	ldrh	r3, [r7, #8]
 8013eba:	1ad3      	subs	r3, r2, r3
 8013ebc:	b29a      	uxth	r2, r3
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d106      	bne.n	8013edc <pbuf_realloc+0x70>
 8013ece:	4b26      	ldr	r3, [pc, #152]	@ (8013f68 <pbuf_realloc+0xfc>)
 8013ed0:	f240 12af 	movw	r2, #431	@ 0x1af
 8013ed4:	4927      	ldr	r1, [pc, #156]	@ (8013f74 <pbuf_realloc+0x108>)
 8013ed6:	4826      	ldr	r0, [pc, #152]	@ (8013f70 <pbuf_realloc+0x104>)
 8013ed8:	f00d fa6c 	bl	80213b4 <iprintf>
  while (rem_len > q->len) {
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	895b      	ldrh	r3, [r3, #10]
 8013ee0:	897a      	ldrh	r2, [r7, #10]
 8013ee2:	429a      	cmp	r2, r3
 8013ee4:	d8e1      	bhi.n	8013eaa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	7b1b      	ldrb	r3, [r3, #12]
 8013eea:	f003 030f 	and.w	r3, r3, #15
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d121      	bne.n	8013f36 <pbuf_realloc+0xca>
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	895b      	ldrh	r3, [r3, #10]
 8013ef6:	897a      	ldrh	r2, [r7, #10]
 8013ef8:	429a      	cmp	r2, r3
 8013efa:	d01c      	beq.n	8013f36 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	7b5b      	ldrb	r3, [r3, #13]
 8013f00:	f003 0302 	and.w	r3, r3, #2
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d116      	bne.n	8013f36 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	685a      	ldr	r2, [r3, #4]
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	1ad3      	subs	r3, r2, r3
 8013f10:	b29a      	uxth	r2, r3
 8013f12:	897b      	ldrh	r3, [r7, #10]
 8013f14:	4413      	add	r3, r2
 8013f16:	b29b      	uxth	r3, r3
 8013f18:	4619      	mov	r1, r3
 8013f1a:	68f8      	ldr	r0, [r7, #12]
 8013f1c:	f7fe ff1e 	bl	8012d5c <mem_trim>
 8013f20:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d106      	bne.n	8013f36 <pbuf_realloc+0xca>
 8013f28:	4b0f      	ldr	r3, [pc, #60]	@ (8013f68 <pbuf_realloc+0xfc>)
 8013f2a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8013f2e:	4912      	ldr	r1, [pc, #72]	@ (8013f78 <pbuf_realloc+0x10c>)
 8013f30:	480f      	ldr	r0, [pc, #60]	@ (8013f70 <pbuf_realloc+0x104>)
 8013f32:	f00d fa3f 	bl	80213b4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	897a      	ldrh	r2, [r7, #10]
 8013f3a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	895a      	ldrh	r2, [r3, #10]
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d004      	beq.n	8013f56 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	4618      	mov	r0, r3
 8013f52:	f000 f911 	bl	8014178 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	2200      	movs	r2, #0
 8013f5a:	601a      	str	r2, [r3, #0]
 8013f5c:	e000      	b.n	8013f60 <pbuf_realloc+0xf4>
    return;
 8013f5e:	bf00      	nop

}
 8013f60:	3710      	adds	r7, #16
 8013f62:	46bd      	mov	sp, r7
 8013f64:	bd80      	pop	{r7, pc}
 8013f66:	bf00      	nop
 8013f68:	08023c50 	.word	0x08023c50
 8013f6c:	08023d68 	.word	0x08023d68
 8013f70:	08023cb0 	.word	0x08023cb0
 8013f74:	08023d80 	.word	0x08023d80
 8013f78:	08023d98 	.word	0x08023d98

08013f7c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b086      	sub	sp, #24
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	60f8      	str	r0, [r7, #12]
 8013f84:	60b9      	str	r1, [r7, #8]
 8013f86:	4613      	mov	r3, r2
 8013f88:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d106      	bne.n	8013f9e <pbuf_add_header_impl+0x22>
 8013f90:	4b2b      	ldr	r3, [pc, #172]	@ (8014040 <pbuf_add_header_impl+0xc4>)
 8013f92:	f240 12df 	movw	r2, #479	@ 0x1df
 8013f96:	492b      	ldr	r1, [pc, #172]	@ (8014044 <pbuf_add_header_impl+0xc8>)
 8013f98:	482b      	ldr	r0, [pc, #172]	@ (8014048 <pbuf_add_header_impl+0xcc>)
 8013f9a:	f00d fa0b 	bl	80213b4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d003      	beq.n	8013fac <pbuf_add_header_impl+0x30>
 8013fa4:	68bb      	ldr	r3, [r7, #8]
 8013fa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013faa:	d301      	bcc.n	8013fb0 <pbuf_add_header_impl+0x34>
    return 1;
 8013fac:	2301      	movs	r3, #1
 8013fae:	e043      	b.n	8014038 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8013fb0:	68bb      	ldr	r3, [r7, #8]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d101      	bne.n	8013fba <pbuf_add_header_impl+0x3e>
    return 0;
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	e03e      	b.n	8014038 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8013fba:	68bb      	ldr	r3, [r7, #8]
 8013fbc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	891a      	ldrh	r2, [r3, #8]
 8013fc2:	8a7b      	ldrh	r3, [r7, #18]
 8013fc4:	4413      	add	r3, r2
 8013fc6:	b29b      	uxth	r3, r3
 8013fc8:	8a7a      	ldrh	r2, [r7, #18]
 8013fca:	429a      	cmp	r2, r3
 8013fcc:	d901      	bls.n	8013fd2 <pbuf_add_header_impl+0x56>
    return 1;
 8013fce:	2301      	movs	r3, #1
 8013fd0:	e032      	b.n	8014038 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	7b1b      	ldrb	r3, [r3, #12]
 8013fd6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8013fd8:	8a3b      	ldrh	r3, [r7, #16]
 8013fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d00c      	beq.n	8013ffc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	685a      	ldr	r2, [r3, #4]
 8013fe6:	68bb      	ldr	r3, [r7, #8]
 8013fe8:	425b      	negs	r3, r3
 8013fea:	4413      	add	r3, r2
 8013fec:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	3310      	adds	r3, #16
 8013ff2:	697a      	ldr	r2, [r7, #20]
 8013ff4:	429a      	cmp	r2, r3
 8013ff6:	d20d      	bcs.n	8014014 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8013ff8:	2301      	movs	r3, #1
 8013ffa:	e01d      	b.n	8014038 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8013ffc:	79fb      	ldrb	r3, [r7, #7]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d006      	beq.n	8014010 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	685a      	ldr	r2, [r3, #4]
 8014006:	68bb      	ldr	r3, [r7, #8]
 8014008:	425b      	negs	r3, r3
 801400a:	4413      	add	r3, r2
 801400c:	617b      	str	r3, [r7, #20]
 801400e:	e001      	b.n	8014014 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014010:	2301      	movs	r3, #1
 8014012:	e011      	b.n	8014038 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	697a      	ldr	r2, [r7, #20]
 8014018:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	895a      	ldrh	r2, [r3, #10]
 801401e:	8a7b      	ldrh	r3, [r7, #18]
 8014020:	4413      	add	r3, r2
 8014022:	b29a      	uxth	r2, r3
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	891a      	ldrh	r2, [r3, #8]
 801402c:	8a7b      	ldrh	r3, [r7, #18]
 801402e:	4413      	add	r3, r2
 8014030:	b29a      	uxth	r2, r3
 8014032:	68fb      	ldr	r3, [r7, #12]
 8014034:	811a      	strh	r2, [r3, #8]


  return 0;
 8014036:	2300      	movs	r3, #0
}
 8014038:	4618      	mov	r0, r3
 801403a:	3718      	adds	r7, #24
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}
 8014040:	08023c50 	.word	0x08023c50
 8014044:	08023db4 	.word	0x08023db4
 8014048:	08023cb0 	.word	0x08023cb0

0801404c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b082      	sub	sp, #8
 8014050:	af00      	add	r7, sp, #0
 8014052:	6078      	str	r0, [r7, #4]
 8014054:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8014056:	2200      	movs	r2, #0
 8014058:	6839      	ldr	r1, [r7, #0]
 801405a:	6878      	ldr	r0, [r7, #4]
 801405c:	f7ff ff8e 	bl	8013f7c <pbuf_add_header_impl>
 8014060:	4603      	mov	r3, r0
}
 8014062:	4618      	mov	r0, r3
 8014064:	3708      	adds	r7, #8
 8014066:	46bd      	mov	sp, r7
 8014068:	bd80      	pop	{r7, pc}
	...

0801406c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b084      	sub	sp, #16
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
 8014074:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d106      	bne.n	801408a <pbuf_remove_header+0x1e>
 801407c:	4b20      	ldr	r3, [pc, #128]	@ (8014100 <pbuf_remove_header+0x94>)
 801407e:	f240 224b 	movw	r2, #587	@ 0x24b
 8014082:	4920      	ldr	r1, [pc, #128]	@ (8014104 <pbuf_remove_header+0x98>)
 8014084:	4820      	ldr	r0, [pc, #128]	@ (8014108 <pbuf_remove_header+0x9c>)
 8014086:	f00d f995 	bl	80213b4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d003      	beq.n	8014098 <pbuf_remove_header+0x2c>
 8014090:	683b      	ldr	r3, [r7, #0]
 8014092:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014096:	d301      	bcc.n	801409c <pbuf_remove_header+0x30>
    return 1;
 8014098:	2301      	movs	r3, #1
 801409a:	e02c      	b.n	80140f6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801409c:	683b      	ldr	r3, [r7, #0]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d101      	bne.n	80140a6 <pbuf_remove_header+0x3a>
    return 0;
 80140a2:	2300      	movs	r3, #0
 80140a4:	e027      	b.n	80140f6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80140a6:	683b      	ldr	r3, [r7, #0]
 80140a8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	895b      	ldrh	r3, [r3, #10]
 80140ae:	89fa      	ldrh	r2, [r7, #14]
 80140b0:	429a      	cmp	r2, r3
 80140b2:	d908      	bls.n	80140c6 <pbuf_remove_header+0x5a>
 80140b4:	4b12      	ldr	r3, [pc, #72]	@ (8014100 <pbuf_remove_header+0x94>)
 80140b6:	f240 2255 	movw	r2, #597	@ 0x255
 80140ba:	4914      	ldr	r1, [pc, #80]	@ (801410c <pbuf_remove_header+0xa0>)
 80140bc:	4812      	ldr	r0, [pc, #72]	@ (8014108 <pbuf_remove_header+0x9c>)
 80140be:	f00d f979 	bl	80213b4 <iprintf>
 80140c2:	2301      	movs	r3, #1
 80140c4:	e017      	b.n	80140f6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	685b      	ldr	r3, [r3, #4]
 80140ca:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	685a      	ldr	r2, [r3, #4]
 80140d0:	683b      	ldr	r3, [r7, #0]
 80140d2:	441a      	add	r2, r3
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	895a      	ldrh	r2, [r3, #10]
 80140dc:	89fb      	ldrh	r3, [r7, #14]
 80140de:	1ad3      	subs	r3, r2, r3
 80140e0:	b29a      	uxth	r2, r3
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	891a      	ldrh	r2, [r3, #8]
 80140ea:	89fb      	ldrh	r3, [r7, #14]
 80140ec:	1ad3      	subs	r3, r2, r3
 80140ee:	b29a      	uxth	r2, r3
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80140f4:	2300      	movs	r3, #0
}
 80140f6:	4618      	mov	r0, r3
 80140f8:	3710      	adds	r7, #16
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}
 80140fe:	bf00      	nop
 8014100:	08023c50 	.word	0x08023c50
 8014104:	08023db4 	.word	0x08023db4
 8014108:	08023cb0 	.word	0x08023cb0
 801410c:	08023dc0 	.word	0x08023dc0

08014110 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b082      	sub	sp, #8
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
 8014118:	460b      	mov	r3, r1
 801411a:	807b      	strh	r3, [r7, #2]
 801411c:	4613      	mov	r3, r2
 801411e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014120:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014124:	2b00      	cmp	r3, #0
 8014126:	da08      	bge.n	801413a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8014128:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801412c:	425b      	negs	r3, r3
 801412e:	4619      	mov	r1, r3
 8014130:	6878      	ldr	r0, [r7, #4]
 8014132:	f7ff ff9b 	bl	801406c <pbuf_remove_header>
 8014136:	4603      	mov	r3, r0
 8014138:	e007      	b.n	801414a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801413a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801413e:	787a      	ldrb	r2, [r7, #1]
 8014140:	4619      	mov	r1, r3
 8014142:	6878      	ldr	r0, [r7, #4]
 8014144:	f7ff ff1a 	bl	8013f7c <pbuf_add_header_impl>
 8014148:	4603      	mov	r3, r0
  }
}
 801414a:	4618      	mov	r0, r3
 801414c:	3708      	adds	r7, #8
 801414e:	46bd      	mov	sp, r7
 8014150:	bd80      	pop	{r7, pc}

08014152 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8014152:	b580      	push	{r7, lr}
 8014154:	b082      	sub	sp, #8
 8014156:	af00      	add	r7, sp, #0
 8014158:	6078      	str	r0, [r7, #4]
 801415a:	460b      	mov	r3, r1
 801415c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801415e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014162:	2201      	movs	r2, #1
 8014164:	4619      	mov	r1, r3
 8014166:	6878      	ldr	r0, [r7, #4]
 8014168:	f7ff ffd2 	bl	8014110 <pbuf_header_impl>
 801416c:	4603      	mov	r3, r0
}
 801416e:	4618      	mov	r0, r3
 8014170:	3708      	adds	r7, #8
 8014172:	46bd      	mov	sp, r7
 8014174:	bd80      	pop	{r7, pc}
	...

08014178 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b088      	sub	sp, #32
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d10b      	bne.n	801419e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d106      	bne.n	801419a <pbuf_free+0x22>
 801418c:	4b3b      	ldr	r3, [pc, #236]	@ (801427c <pbuf_free+0x104>)
 801418e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8014192:	493b      	ldr	r1, [pc, #236]	@ (8014280 <pbuf_free+0x108>)
 8014194:	483b      	ldr	r0, [pc, #236]	@ (8014284 <pbuf_free+0x10c>)
 8014196:	f00d f90d 	bl	80213b4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801419a:	2300      	movs	r3, #0
 801419c:	e069      	b.n	8014272 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801419e:	2300      	movs	r3, #0
 80141a0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80141a2:	e062      	b.n	801426a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80141a4:	f00c f994 	bl	80204d0 <sys_arch_protect>
 80141a8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	7b9b      	ldrb	r3, [r3, #14]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d106      	bne.n	80141c0 <pbuf_free+0x48>
 80141b2:	4b32      	ldr	r3, [pc, #200]	@ (801427c <pbuf_free+0x104>)
 80141b4:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80141b8:	4933      	ldr	r1, [pc, #204]	@ (8014288 <pbuf_free+0x110>)
 80141ba:	4832      	ldr	r0, [pc, #200]	@ (8014284 <pbuf_free+0x10c>)
 80141bc:	f00d f8fa 	bl	80213b4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	7b9b      	ldrb	r3, [r3, #14]
 80141c4:	3b01      	subs	r3, #1
 80141c6:	b2da      	uxtb	r2, r3
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	739a      	strb	r2, [r3, #14]
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	7b9b      	ldrb	r3, [r3, #14]
 80141d0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80141d2:	69b8      	ldr	r0, [r7, #24]
 80141d4:	f00c f98a 	bl	80204ec <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80141d8:	7dfb      	ldrb	r3, [r7, #23]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d143      	bne.n	8014266 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	7b1b      	ldrb	r3, [r3, #12]
 80141e8:	f003 030f 	and.w	r3, r3, #15
 80141ec:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	7b5b      	ldrb	r3, [r3, #13]
 80141f2:	f003 0302 	and.w	r3, r3, #2
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d011      	beq.n	801421e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80141fe:	68bb      	ldr	r3, [r7, #8]
 8014200:	691b      	ldr	r3, [r3, #16]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d106      	bne.n	8014214 <pbuf_free+0x9c>
 8014206:	4b1d      	ldr	r3, [pc, #116]	@ (801427c <pbuf_free+0x104>)
 8014208:	f240 22ff 	movw	r2, #767	@ 0x2ff
 801420c:	491f      	ldr	r1, [pc, #124]	@ (801428c <pbuf_free+0x114>)
 801420e:	481d      	ldr	r0, [pc, #116]	@ (8014284 <pbuf_free+0x10c>)
 8014210:	f00d f8d0 	bl	80213b4 <iprintf>
        pc->custom_free_function(p);
 8014214:	68bb      	ldr	r3, [r7, #8]
 8014216:	691b      	ldr	r3, [r3, #16]
 8014218:	6878      	ldr	r0, [r7, #4]
 801421a:	4798      	blx	r3
 801421c:	e01d      	b.n	801425a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801421e:	7bfb      	ldrb	r3, [r7, #15]
 8014220:	2b02      	cmp	r3, #2
 8014222:	d104      	bne.n	801422e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8014224:	6879      	ldr	r1, [r7, #4]
 8014226:	200d      	movs	r0, #13
 8014228:	f7ff f8ba 	bl	80133a0 <memp_free>
 801422c:	e015      	b.n	801425a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801422e:	7bfb      	ldrb	r3, [r7, #15]
 8014230:	2b01      	cmp	r3, #1
 8014232:	d104      	bne.n	801423e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8014234:	6879      	ldr	r1, [r7, #4]
 8014236:	200c      	movs	r0, #12
 8014238:	f7ff f8b2 	bl	80133a0 <memp_free>
 801423c:	e00d      	b.n	801425a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801423e:	7bfb      	ldrb	r3, [r7, #15]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d103      	bne.n	801424c <pbuf_free+0xd4>
          mem_free(p);
 8014244:	6878      	ldr	r0, [r7, #4]
 8014246:	f7fe fcf9 	bl	8012c3c <mem_free>
 801424a:	e006      	b.n	801425a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801424c:	4b0b      	ldr	r3, [pc, #44]	@ (801427c <pbuf_free+0x104>)
 801424e:	f240 320f 	movw	r2, #783	@ 0x30f
 8014252:	490f      	ldr	r1, [pc, #60]	@ (8014290 <pbuf_free+0x118>)
 8014254:	480b      	ldr	r0, [pc, #44]	@ (8014284 <pbuf_free+0x10c>)
 8014256:	f00d f8ad 	bl	80213b4 <iprintf>
        }
      }
      count++;
 801425a:	7ffb      	ldrb	r3, [r7, #31]
 801425c:	3301      	adds	r3, #1
 801425e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014260:	693b      	ldr	r3, [r7, #16]
 8014262:	607b      	str	r3, [r7, #4]
 8014264:	e001      	b.n	801426a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8014266:	2300      	movs	r3, #0
 8014268:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d199      	bne.n	80141a4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014270:	7ffb      	ldrb	r3, [r7, #31]
}
 8014272:	4618      	mov	r0, r3
 8014274:	3720      	adds	r7, #32
 8014276:	46bd      	mov	sp, r7
 8014278:	bd80      	pop	{r7, pc}
 801427a:	bf00      	nop
 801427c:	08023c50 	.word	0x08023c50
 8014280:	08023db4 	.word	0x08023db4
 8014284:	08023cb0 	.word	0x08023cb0
 8014288:	08023de0 	.word	0x08023de0
 801428c:	08023df8 	.word	0x08023df8
 8014290:	08023e1c 	.word	0x08023e1c

08014294 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014294:	b480      	push	{r7}
 8014296:	b085      	sub	sp, #20
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801429c:	2300      	movs	r3, #0
 801429e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80142a0:	e005      	b.n	80142ae <pbuf_clen+0x1a>
    ++len;
 80142a2:	89fb      	ldrh	r3, [r7, #14]
 80142a4:	3301      	adds	r3, #1
 80142a6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d1f6      	bne.n	80142a2 <pbuf_clen+0xe>
  }
  return len;
 80142b4:	89fb      	ldrh	r3, [r7, #14]
}
 80142b6:	4618      	mov	r0, r3
 80142b8:	3714      	adds	r7, #20
 80142ba:	46bd      	mov	sp, r7
 80142bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142c0:	4770      	bx	lr
	...

080142c4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b084      	sub	sp, #16
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d016      	beq.n	8014300 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80142d2:	f00c f8fd 	bl	80204d0 <sys_arch_protect>
 80142d6:	60f8      	str	r0, [r7, #12]
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	7b9b      	ldrb	r3, [r3, #14]
 80142dc:	3301      	adds	r3, #1
 80142de:	b2da      	uxtb	r2, r3
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	739a      	strb	r2, [r3, #14]
 80142e4:	68f8      	ldr	r0, [r7, #12]
 80142e6:	f00c f901 	bl	80204ec <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	7b9b      	ldrb	r3, [r3, #14]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d106      	bne.n	8014300 <pbuf_ref+0x3c>
 80142f2:	4b05      	ldr	r3, [pc, #20]	@ (8014308 <pbuf_ref+0x44>)
 80142f4:	f240 3242 	movw	r2, #834	@ 0x342
 80142f8:	4904      	ldr	r1, [pc, #16]	@ (801430c <pbuf_ref+0x48>)
 80142fa:	4805      	ldr	r0, [pc, #20]	@ (8014310 <pbuf_ref+0x4c>)
 80142fc:	f00d f85a 	bl	80213b4 <iprintf>
  }
}
 8014300:	bf00      	nop
 8014302:	3710      	adds	r7, #16
 8014304:	46bd      	mov	sp, r7
 8014306:	bd80      	pop	{r7, pc}
 8014308:	08023c50 	.word	0x08023c50
 801430c:	08023e30 	.word	0x08023e30
 8014310:	08023cb0 	.word	0x08023cb0

08014314 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014314:	b580      	push	{r7, lr}
 8014316:	b084      	sub	sp, #16
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
 801431c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d002      	beq.n	801432a <pbuf_cat+0x16>
 8014324:	683b      	ldr	r3, [r7, #0]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d107      	bne.n	801433a <pbuf_cat+0x26>
 801432a:	4b20      	ldr	r3, [pc, #128]	@ (80143ac <pbuf_cat+0x98>)
 801432c:	f240 3259 	movw	r2, #857	@ 0x359
 8014330:	491f      	ldr	r1, [pc, #124]	@ (80143b0 <pbuf_cat+0x9c>)
 8014332:	4820      	ldr	r0, [pc, #128]	@ (80143b4 <pbuf_cat+0xa0>)
 8014334:	f00d f83e 	bl	80213b4 <iprintf>
 8014338:	e034      	b.n	80143a4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	60fb      	str	r3, [r7, #12]
 801433e:	e00a      	b.n	8014356 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	891a      	ldrh	r2, [r3, #8]
 8014344:	683b      	ldr	r3, [r7, #0]
 8014346:	891b      	ldrh	r3, [r3, #8]
 8014348:	4413      	add	r3, r2
 801434a:	b29a      	uxth	r2, r3
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	60fb      	str	r3, [r7, #12]
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d1f0      	bne.n	8014340 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	891a      	ldrh	r2, [r3, #8]
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	895b      	ldrh	r3, [r3, #10]
 8014366:	429a      	cmp	r2, r3
 8014368:	d006      	beq.n	8014378 <pbuf_cat+0x64>
 801436a:	4b10      	ldr	r3, [pc, #64]	@ (80143ac <pbuf_cat+0x98>)
 801436c:	f240 3262 	movw	r2, #866	@ 0x362
 8014370:	4911      	ldr	r1, [pc, #68]	@ (80143b8 <pbuf_cat+0xa4>)
 8014372:	4810      	ldr	r0, [pc, #64]	@ (80143b4 <pbuf_cat+0xa0>)
 8014374:	f00d f81e 	bl	80213b4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d006      	beq.n	801438e <pbuf_cat+0x7a>
 8014380:	4b0a      	ldr	r3, [pc, #40]	@ (80143ac <pbuf_cat+0x98>)
 8014382:	f240 3263 	movw	r2, #867	@ 0x363
 8014386:	490d      	ldr	r1, [pc, #52]	@ (80143bc <pbuf_cat+0xa8>)
 8014388:	480a      	ldr	r0, [pc, #40]	@ (80143b4 <pbuf_cat+0xa0>)
 801438a:	f00d f813 	bl	80213b4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	891a      	ldrh	r2, [r3, #8]
 8014392:	683b      	ldr	r3, [r7, #0]
 8014394:	891b      	ldrh	r3, [r3, #8]
 8014396:	4413      	add	r3, r2
 8014398:	b29a      	uxth	r2, r3
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	683a      	ldr	r2, [r7, #0]
 80143a2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80143a4:	3710      	adds	r7, #16
 80143a6:	46bd      	mov	sp, r7
 80143a8:	bd80      	pop	{r7, pc}
 80143aa:	bf00      	nop
 80143ac:	08023c50 	.word	0x08023c50
 80143b0:	08023e44 	.word	0x08023e44
 80143b4:	08023cb0 	.word	0x08023cb0
 80143b8:	08023e7c 	.word	0x08023e7c
 80143bc:	08023eac 	.word	0x08023eac

080143c0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b082      	sub	sp, #8
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	6078      	str	r0, [r7, #4]
 80143c8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80143ca:	6839      	ldr	r1, [r7, #0]
 80143cc:	6878      	ldr	r0, [r7, #4]
 80143ce:	f7ff ffa1 	bl	8014314 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80143d2:	6838      	ldr	r0, [r7, #0]
 80143d4:	f7ff ff76 	bl	80142c4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80143d8:	bf00      	nop
 80143da:	3708      	adds	r7, #8
 80143dc:	46bd      	mov	sp, r7
 80143de:	bd80      	pop	{r7, pc}

080143e0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b086      	sub	sp, #24
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
 80143e8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80143ea:	2300      	movs	r3, #0
 80143ec:	617b      	str	r3, [r7, #20]
 80143ee:	2300      	movs	r3, #0
 80143f0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d008      	beq.n	801440a <pbuf_copy+0x2a>
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d005      	beq.n	801440a <pbuf_copy+0x2a>
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	891a      	ldrh	r2, [r3, #8]
 8014402:	683b      	ldr	r3, [r7, #0]
 8014404:	891b      	ldrh	r3, [r3, #8]
 8014406:	429a      	cmp	r2, r3
 8014408:	d209      	bcs.n	801441e <pbuf_copy+0x3e>
 801440a:	4b57      	ldr	r3, [pc, #348]	@ (8014568 <pbuf_copy+0x188>)
 801440c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8014410:	4956      	ldr	r1, [pc, #344]	@ (801456c <pbuf_copy+0x18c>)
 8014412:	4857      	ldr	r0, [pc, #348]	@ (8014570 <pbuf_copy+0x190>)
 8014414:	f00c ffce 	bl	80213b4 <iprintf>
 8014418:	f06f 030f 	mvn.w	r3, #15
 801441c:	e09f      	b.n	801455e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	895b      	ldrh	r3, [r3, #10]
 8014422:	461a      	mov	r2, r3
 8014424:	697b      	ldr	r3, [r7, #20]
 8014426:	1ad2      	subs	r2, r2, r3
 8014428:	683b      	ldr	r3, [r7, #0]
 801442a:	895b      	ldrh	r3, [r3, #10]
 801442c:	4619      	mov	r1, r3
 801442e:	693b      	ldr	r3, [r7, #16]
 8014430:	1acb      	subs	r3, r1, r3
 8014432:	429a      	cmp	r2, r3
 8014434:	d306      	bcc.n	8014444 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	895b      	ldrh	r3, [r3, #10]
 801443a:	461a      	mov	r2, r3
 801443c:	693b      	ldr	r3, [r7, #16]
 801443e:	1ad3      	subs	r3, r2, r3
 8014440:	60fb      	str	r3, [r7, #12]
 8014442:	e005      	b.n	8014450 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	895b      	ldrh	r3, [r3, #10]
 8014448:	461a      	mov	r2, r3
 801444a:	697b      	ldr	r3, [r7, #20]
 801444c:	1ad3      	subs	r3, r2, r3
 801444e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	685a      	ldr	r2, [r3, #4]
 8014454:	697b      	ldr	r3, [r7, #20]
 8014456:	18d0      	adds	r0, r2, r3
 8014458:	683b      	ldr	r3, [r7, #0]
 801445a:	685a      	ldr	r2, [r3, #4]
 801445c:	693b      	ldr	r3, [r7, #16]
 801445e:	4413      	add	r3, r2
 8014460:	68fa      	ldr	r2, [r7, #12]
 8014462:	4619      	mov	r1, r3
 8014464:	f00d fa8f 	bl	8021986 <memcpy>
    offset_to += len;
 8014468:	697a      	ldr	r2, [r7, #20]
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	4413      	add	r3, r2
 801446e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014470:	693a      	ldr	r2, [r7, #16]
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	4413      	add	r3, r2
 8014476:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	895b      	ldrh	r3, [r3, #10]
 801447c:	461a      	mov	r2, r3
 801447e:	697b      	ldr	r3, [r7, #20]
 8014480:	4293      	cmp	r3, r2
 8014482:	d906      	bls.n	8014492 <pbuf_copy+0xb2>
 8014484:	4b38      	ldr	r3, [pc, #224]	@ (8014568 <pbuf_copy+0x188>)
 8014486:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801448a:	493a      	ldr	r1, [pc, #232]	@ (8014574 <pbuf_copy+0x194>)
 801448c:	4838      	ldr	r0, [pc, #224]	@ (8014570 <pbuf_copy+0x190>)
 801448e:	f00c ff91 	bl	80213b4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8014492:	683b      	ldr	r3, [r7, #0]
 8014494:	895b      	ldrh	r3, [r3, #10]
 8014496:	461a      	mov	r2, r3
 8014498:	693b      	ldr	r3, [r7, #16]
 801449a:	4293      	cmp	r3, r2
 801449c:	d906      	bls.n	80144ac <pbuf_copy+0xcc>
 801449e:	4b32      	ldr	r3, [pc, #200]	@ (8014568 <pbuf_copy+0x188>)
 80144a0:	f240 32da 	movw	r2, #986	@ 0x3da
 80144a4:	4934      	ldr	r1, [pc, #208]	@ (8014578 <pbuf_copy+0x198>)
 80144a6:	4832      	ldr	r0, [pc, #200]	@ (8014570 <pbuf_copy+0x190>)
 80144a8:	f00c ff84 	bl	80213b4 <iprintf>
    if (offset_from >= p_from->len) {
 80144ac:	683b      	ldr	r3, [r7, #0]
 80144ae:	895b      	ldrh	r3, [r3, #10]
 80144b0:	461a      	mov	r2, r3
 80144b2:	693b      	ldr	r3, [r7, #16]
 80144b4:	4293      	cmp	r3, r2
 80144b6:	d304      	bcc.n	80144c2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80144b8:	2300      	movs	r3, #0
 80144ba:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80144bc:	683b      	ldr	r3, [r7, #0]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	895b      	ldrh	r3, [r3, #10]
 80144c6:	461a      	mov	r2, r3
 80144c8:	697b      	ldr	r3, [r7, #20]
 80144ca:	4293      	cmp	r3, r2
 80144cc:	d114      	bne.n	80144f8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80144ce:	2300      	movs	r3, #0
 80144d0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d10c      	bne.n	80144f8 <pbuf_copy+0x118>
 80144de:	683b      	ldr	r3, [r7, #0]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d009      	beq.n	80144f8 <pbuf_copy+0x118>
 80144e4:	4b20      	ldr	r3, [pc, #128]	@ (8014568 <pbuf_copy+0x188>)
 80144e6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80144ea:	4924      	ldr	r1, [pc, #144]	@ (801457c <pbuf_copy+0x19c>)
 80144ec:	4820      	ldr	r0, [pc, #128]	@ (8014570 <pbuf_copy+0x190>)
 80144ee:	f00c ff61 	bl	80213b4 <iprintf>
 80144f2:	f06f 030f 	mvn.w	r3, #15
 80144f6:	e032      	b.n	801455e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80144f8:	683b      	ldr	r3, [r7, #0]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d013      	beq.n	8014526 <pbuf_copy+0x146>
 80144fe:	683b      	ldr	r3, [r7, #0]
 8014500:	895a      	ldrh	r2, [r3, #10]
 8014502:	683b      	ldr	r3, [r7, #0]
 8014504:	891b      	ldrh	r3, [r3, #8]
 8014506:	429a      	cmp	r2, r3
 8014508:	d10d      	bne.n	8014526 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801450a:	683b      	ldr	r3, [r7, #0]
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d009      	beq.n	8014526 <pbuf_copy+0x146>
 8014512:	4b15      	ldr	r3, [pc, #84]	@ (8014568 <pbuf_copy+0x188>)
 8014514:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8014518:	4919      	ldr	r1, [pc, #100]	@ (8014580 <pbuf_copy+0x1a0>)
 801451a:	4815      	ldr	r0, [pc, #84]	@ (8014570 <pbuf_copy+0x190>)
 801451c:	f00c ff4a 	bl	80213b4 <iprintf>
 8014520:	f06f 0305 	mvn.w	r3, #5
 8014524:	e01b      	b.n	801455e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d013      	beq.n	8014554 <pbuf_copy+0x174>
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	895a      	ldrh	r2, [r3, #10]
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	891b      	ldrh	r3, [r3, #8]
 8014534:	429a      	cmp	r2, r3
 8014536:	d10d      	bne.n	8014554 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d009      	beq.n	8014554 <pbuf_copy+0x174>
 8014540:	4b09      	ldr	r3, [pc, #36]	@ (8014568 <pbuf_copy+0x188>)
 8014542:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8014546:	490e      	ldr	r1, [pc, #56]	@ (8014580 <pbuf_copy+0x1a0>)
 8014548:	4809      	ldr	r0, [pc, #36]	@ (8014570 <pbuf_copy+0x190>)
 801454a:	f00c ff33 	bl	80213b4 <iprintf>
 801454e:	f06f 0305 	mvn.w	r3, #5
 8014552:	e004      	b.n	801455e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8014554:	683b      	ldr	r3, [r7, #0]
 8014556:	2b00      	cmp	r3, #0
 8014558:	f47f af61 	bne.w	801441e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801455c:	2300      	movs	r3, #0
}
 801455e:	4618      	mov	r0, r3
 8014560:	3718      	adds	r7, #24
 8014562:	46bd      	mov	sp, r7
 8014564:	bd80      	pop	{r7, pc}
 8014566:	bf00      	nop
 8014568:	08023c50 	.word	0x08023c50
 801456c:	08023ef8 	.word	0x08023ef8
 8014570:	08023cb0 	.word	0x08023cb0
 8014574:	08023f28 	.word	0x08023f28
 8014578:	08023f40 	.word	0x08023f40
 801457c:	08023f5c 	.word	0x08023f5c
 8014580:	08023f6c 	.word	0x08023f6c

08014584 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b088      	sub	sp, #32
 8014588:	af00      	add	r7, sp, #0
 801458a:	60f8      	str	r0, [r7, #12]
 801458c:	60b9      	str	r1, [r7, #8]
 801458e:	4611      	mov	r1, r2
 8014590:	461a      	mov	r2, r3
 8014592:	460b      	mov	r3, r1
 8014594:	80fb      	strh	r3, [r7, #6]
 8014596:	4613      	mov	r3, r2
 8014598:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801459a:	2300      	movs	r3, #0
 801459c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801459e:	2300      	movs	r3, #0
 80145a0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80145a2:	68fb      	ldr	r3, [r7, #12]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d108      	bne.n	80145ba <pbuf_copy_partial+0x36>
 80145a8:	4b2b      	ldr	r3, [pc, #172]	@ (8014658 <pbuf_copy_partial+0xd4>)
 80145aa:	f240 420a 	movw	r2, #1034	@ 0x40a
 80145ae:	492b      	ldr	r1, [pc, #172]	@ (801465c <pbuf_copy_partial+0xd8>)
 80145b0:	482b      	ldr	r0, [pc, #172]	@ (8014660 <pbuf_copy_partial+0xdc>)
 80145b2:	f00c feff 	bl	80213b4 <iprintf>
 80145b6:	2300      	movs	r3, #0
 80145b8:	e04a      	b.n	8014650 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80145ba:	68bb      	ldr	r3, [r7, #8]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d108      	bne.n	80145d2 <pbuf_copy_partial+0x4e>
 80145c0:	4b25      	ldr	r3, [pc, #148]	@ (8014658 <pbuf_copy_partial+0xd4>)
 80145c2:	f240 420b 	movw	r2, #1035	@ 0x40b
 80145c6:	4927      	ldr	r1, [pc, #156]	@ (8014664 <pbuf_copy_partial+0xe0>)
 80145c8:	4825      	ldr	r0, [pc, #148]	@ (8014660 <pbuf_copy_partial+0xdc>)
 80145ca:	f00c fef3 	bl	80213b4 <iprintf>
 80145ce:	2300      	movs	r3, #0
 80145d0:	e03e      	b.n	8014650 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	61fb      	str	r3, [r7, #28]
 80145d6:	e034      	b.n	8014642 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80145d8:	88bb      	ldrh	r3, [r7, #4]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d00a      	beq.n	80145f4 <pbuf_copy_partial+0x70>
 80145de:	69fb      	ldr	r3, [r7, #28]
 80145e0:	895b      	ldrh	r3, [r3, #10]
 80145e2:	88ba      	ldrh	r2, [r7, #4]
 80145e4:	429a      	cmp	r2, r3
 80145e6:	d305      	bcc.n	80145f4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80145e8:	69fb      	ldr	r3, [r7, #28]
 80145ea:	895b      	ldrh	r3, [r3, #10]
 80145ec:	88ba      	ldrh	r2, [r7, #4]
 80145ee:	1ad3      	subs	r3, r2, r3
 80145f0:	80bb      	strh	r3, [r7, #4]
 80145f2:	e023      	b.n	801463c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80145f4:	69fb      	ldr	r3, [r7, #28]
 80145f6:	895a      	ldrh	r2, [r3, #10]
 80145f8:	88bb      	ldrh	r3, [r7, #4]
 80145fa:	1ad3      	subs	r3, r2, r3
 80145fc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80145fe:	8b3a      	ldrh	r2, [r7, #24]
 8014600:	88fb      	ldrh	r3, [r7, #6]
 8014602:	429a      	cmp	r2, r3
 8014604:	d901      	bls.n	801460a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8014606:	88fb      	ldrh	r3, [r7, #6]
 8014608:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801460a:	8b7b      	ldrh	r3, [r7, #26]
 801460c:	68ba      	ldr	r2, [r7, #8]
 801460e:	18d0      	adds	r0, r2, r3
 8014610:	69fb      	ldr	r3, [r7, #28]
 8014612:	685a      	ldr	r2, [r3, #4]
 8014614:	88bb      	ldrh	r3, [r7, #4]
 8014616:	4413      	add	r3, r2
 8014618:	8b3a      	ldrh	r2, [r7, #24]
 801461a:	4619      	mov	r1, r3
 801461c:	f00d f9b3 	bl	8021986 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8014620:	8afa      	ldrh	r2, [r7, #22]
 8014622:	8b3b      	ldrh	r3, [r7, #24]
 8014624:	4413      	add	r3, r2
 8014626:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8014628:	8b7a      	ldrh	r2, [r7, #26]
 801462a:	8b3b      	ldrh	r3, [r7, #24]
 801462c:	4413      	add	r3, r2
 801462e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8014630:	88fa      	ldrh	r2, [r7, #6]
 8014632:	8b3b      	ldrh	r3, [r7, #24]
 8014634:	1ad3      	subs	r3, r2, r3
 8014636:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8014638:	2300      	movs	r3, #0
 801463a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801463c:	69fb      	ldr	r3, [r7, #28]
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	61fb      	str	r3, [r7, #28]
 8014642:	88fb      	ldrh	r3, [r7, #6]
 8014644:	2b00      	cmp	r3, #0
 8014646:	d002      	beq.n	801464e <pbuf_copy_partial+0xca>
 8014648:	69fb      	ldr	r3, [r7, #28]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d1c4      	bne.n	80145d8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801464e:	8afb      	ldrh	r3, [r7, #22]
}
 8014650:	4618      	mov	r0, r3
 8014652:	3720      	adds	r7, #32
 8014654:	46bd      	mov	sp, r7
 8014656:	bd80      	pop	{r7, pc}
 8014658:	08023c50 	.word	0x08023c50
 801465c:	08023f98 	.word	0x08023f98
 8014660:	08023cb0 	.word	0x08023cb0
 8014664:	08023fb8 	.word	0x08023fb8

08014668 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8014668:	b480      	push	{r7}
 801466a:	b087      	sub	sp, #28
 801466c:	af00      	add	r7, sp, #0
 801466e:	60f8      	str	r0, [r7, #12]
 8014670:	460b      	mov	r3, r1
 8014672:	607a      	str	r2, [r7, #4]
 8014674:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8014676:	897b      	ldrh	r3, [r7, #10]
 8014678:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 801467e:	e007      	b.n	8014690 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8014680:	693b      	ldr	r3, [r7, #16]
 8014682:	895b      	ldrh	r3, [r3, #10]
 8014684:	8afa      	ldrh	r2, [r7, #22]
 8014686:	1ad3      	subs	r3, r2, r3
 8014688:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 801468a:	693b      	ldr	r3, [r7, #16]
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8014690:	693b      	ldr	r3, [r7, #16]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d004      	beq.n	80146a0 <pbuf_skip_const+0x38>
 8014696:	693b      	ldr	r3, [r7, #16]
 8014698:	895b      	ldrh	r3, [r3, #10]
 801469a:	8afa      	ldrh	r2, [r7, #22]
 801469c:	429a      	cmp	r2, r3
 801469e:	d2ef      	bcs.n	8014680 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d002      	beq.n	80146ac <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	8afa      	ldrh	r2, [r7, #22]
 80146aa:	801a      	strh	r2, [r3, #0]
  }
  return q;
 80146ac:	693b      	ldr	r3, [r7, #16]
}
 80146ae:	4618      	mov	r0, r3
 80146b0:	371c      	adds	r7, #28
 80146b2:	46bd      	mov	sp, r7
 80146b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b8:	4770      	bx	lr

080146ba <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80146ba:	b580      	push	{r7, lr}
 80146bc:	b086      	sub	sp, #24
 80146be:	af00      	add	r7, sp, #0
 80146c0:	60f8      	str	r0, [r7, #12]
 80146c2:	460b      	mov	r3, r1
 80146c4:	607a      	str	r2, [r7, #4]
 80146c6:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 80146c8:	897b      	ldrh	r3, [r7, #10]
 80146ca:	687a      	ldr	r2, [r7, #4]
 80146cc:	4619      	mov	r1, r3
 80146ce:	68f8      	ldr	r0, [r7, #12]
 80146d0:	f7ff ffca 	bl	8014668 <pbuf_skip_const>
 80146d4:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 80146d6:	697b      	ldr	r3, [r7, #20]
}
 80146d8:	4618      	mov	r0, r3
 80146da:	3718      	adds	r7, #24
 80146dc:	46bd      	mov	sp, r7
 80146de:	bd80      	pop	{r7, pc}

080146e0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b088      	sub	sp, #32
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	60f8      	str	r0, [r7, #12]
 80146e8:	60b9      	str	r1, [r7, #8]
 80146ea:	4613      	mov	r3, r2
 80146ec:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80146ee:	88fb      	ldrh	r3, [r7, #6]
 80146f0:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80146f2:	2300      	movs	r3, #0
 80146f4:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d109      	bne.n	8014710 <pbuf_take+0x30>
 80146fc:	4b3a      	ldr	r3, [pc, #232]	@ (80147e8 <pbuf_take+0x108>)
 80146fe:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8014702:	493a      	ldr	r1, [pc, #232]	@ (80147ec <pbuf_take+0x10c>)
 8014704:	483a      	ldr	r0, [pc, #232]	@ (80147f0 <pbuf_take+0x110>)
 8014706:	f00c fe55 	bl	80213b4 <iprintf>
 801470a:	f06f 030f 	mvn.w	r3, #15
 801470e:	e067      	b.n	80147e0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8014710:	68bb      	ldr	r3, [r7, #8]
 8014712:	2b00      	cmp	r3, #0
 8014714:	d109      	bne.n	801472a <pbuf_take+0x4a>
 8014716:	4b34      	ldr	r3, [pc, #208]	@ (80147e8 <pbuf_take+0x108>)
 8014718:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 801471c:	4935      	ldr	r1, [pc, #212]	@ (80147f4 <pbuf_take+0x114>)
 801471e:	4834      	ldr	r0, [pc, #208]	@ (80147f0 <pbuf_take+0x110>)
 8014720:	f00c fe48 	bl	80213b4 <iprintf>
 8014724:	f06f 030f 	mvn.w	r3, #15
 8014728:	e05a      	b.n	80147e0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	891b      	ldrh	r3, [r3, #8]
 801472e:	88fa      	ldrh	r2, [r7, #6]
 8014730:	429a      	cmp	r2, r3
 8014732:	d909      	bls.n	8014748 <pbuf_take+0x68>
 8014734:	4b2c      	ldr	r3, [pc, #176]	@ (80147e8 <pbuf_take+0x108>)
 8014736:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 801473a:	492f      	ldr	r1, [pc, #188]	@ (80147f8 <pbuf_take+0x118>)
 801473c:	482c      	ldr	r0, [pc, #176]	@ (80147f0 <pbuf_take+0x110>)
 801473e:	f00c fe39 	bl	80213b4 <iprintf>
 8014742:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014746:	e04b      	b.n	80147e0 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d007      	beq.n	801475e <pbuf_take+0x7e>
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d004      	beq.n	801475e <pbuf_take+0x7e>
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	891b      	ldrh	r3, [r3, #8]
 8014758:	88fa      	ldrh	r2, [r7, #6]
 801475a:	429a      	cmp	r2, r3
 801475c:	d902      	bls.n	8014764 <pbuf_take+0x84>
    return ERR_ARG;
 801475e:	f06f 030f 	mvn.w	r3, #15
 8014762:	e03d      	b.n	80147e0 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	61fb      	str	r3, [r7, #28]
 8014768:	e028      	b.n	80147bc <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801476a:	69fb      	ldr	r3, [r7, #28]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d106      	bne.n	801477e <pbuf_take+0x9e>
 8014770:	4b1d      	ldr	r3, [pc, #116]	@ (80147e8 <pbuf_take+0x108>)
 8014772:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8014776:	4921      	ldr	r1, [pc, #132]	@ (80147fc <pbuf_take+0x11c>)
 8014778:	481d      	ldr	r0, [pc, #116]	@ (80147f0 <pbuf_take+0x110>)
 801477a:	f00c fe1b 	bl	80213b4 <iprintf>
    buf_copy_len = total_copy_len;
 801477e:	697b      	ldr	r3, [r7, #20]
 8014780:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8014782:	69fb      	ldr	r3, [r7, #28]
 8014784:	895b      	ldrh	r3, [r3, #10]
 8014786:	461a      	mov	r2, r3
 8014788:	69bb      	ldr	r3, [r7, #24]
 801478a:	4293      	cmp	r3, r2
 801478c:	d902      	bls.n	8014794 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 801478e:	69fb      	ldr	r3, [r7, #28]
 8014790:	895b      	ldrh	r3, [r3, #10]
 8014792:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8014794:	69fb      	ldr	r3, [r7, #28]
 8014796:	6858      	ldr	r0, [r3, #4]
 8014798:	68ba      	ldr	r2, [r7, #8]
 801479a:	693b      	ldr	r3, [r7, #16]
 801479c:	4413      	add	r3, r2
 801479e:	69ba      	ldr	r2, [r7, #24]
 80147a0:	4619      	mov	r1, r3
 80147a2:	f00d f8f0 	bl	8021986 <memcpy>
    total_copy_len -= buf_copy_len;
 80147a6:	697a      	ldr	r2, [r7, #20]
 80147a8:	69bb      	ldr	r3, [r7, #24]
 80147aa:	1ad3      	subs	r3, r2, r3
 80147ac:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80147ae:	693a      	ldr	r2, [r7, #16]
 80147b0:	69bb      	ldr	r3, [r7, #24]
 80147b2:	4413      	add	r3, r2
 80147b4:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80147b6:	69fb      	ldr	r3, [r7, #28]
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	61fb      	str	r3, [r7, #28]
 80147bc:	697b      	ldr	r3, [r7, #20]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d1d3      	bne.n	801476a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80147c2:	697b      	ldr	r3, [r7, #20]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d103      	bne.n	80147d0 <pbuf_take+0xf0>
 80147c8:	88fb      	ldrh	r3, [r7, #6]
 80147ca:	693a      	ldr	r2, [r7, #16]
 80147cc:	429a      	cmp	r2, r3
 80147ce:	d006      	beq.n	80147de <pbuf_take+0xfe>
 80147d0:	4b05      	ldr	r3, [pc, #20]	@ (80147e8 <pbuf_take+0x108>)
 80147d2:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 80147d6:	490a      	ldr	r1, [pc, #40]	@ (8014800 <pbuf_take+0x120>)
 80147d8:	4805      	ldr	r0, [pc, #20]	@ (80147f0 <pbuf_take+0x110>)
 80147da:	f00c fdeb 	bl	80213b4 <iprintf>
  return ERR_OK;
 80147de:	2300      	movs	r3, #0
}
 80147e0:	4618      	mov	r0, r3
 80147e2:	3720      	adds	r7, #32
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bd80      	pop	{r7, pc}
 80147e8:	08023c50 	.word	0x08023c50
 80147ec:	08024028 	.word	0x08024028
 80147f0:	08023cb0 	.word	0x08023cb0
 80147f4:	08024040 	.word	0x08024040
 80147f8:	0802405c 	.word	0x0802405c
 80147fc:	0802407c 	.word	0x0802407c
 8014800:	08024094 	.word	0x08024094

08014804 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b088      	sub	sp, #32
 8014808:	af00      	add	r7, sp, #0
 801480a:	60f8      	str	r0, [r7, #12]
 801480c:	60b9      	str	r1, [r7, #8]
 801480e:	4611      	mov	r1, r2
 8014810:	461a      	mov	r2, r3
 8014812:	460b      	mov	r3, r1
 8014814:	80fb      	strh	r3, [r7, #6]
 8014816:	4613      	mov	r3, r2
 8014818:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 801481a:	f107 0210 	add.w	r2, r7, #16
 801481e:	88bb      	ldrh	r3, [r7, #4]
 8014820:	4619      	mov	r1, r3
 8014822:	68f8      	ldr	r0, [r7, #12]
 8014824:	f7ff ff49 	bl	80146ba <pbuf_skip>
 8014828:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801482a:	69fb      	ldr	r3, [r7, #28]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d047      	beq.n	80148c0 <pbuf_take_at+0xbc>
 8014830:	69fb      	ldr	r3, [r7, #28]
 8014832:	891b      	ldrh	r3, [r3, #8]
 8014834:	461a      	mov	r2, r3
 8014836:	8a3b      	ldrh	r3, [r7, #16]
 8014838:	4619      	mov	r1, r3
 801483a:	88fb      	ldrh	r3, [r7, #6]
 801483c:	440b      	add	r3, r1
 801483e:	429a      	cmp	r2, r3
 8014840:	db3e      	blt.n	80148c0 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8014842:	88fb      	ldrh	r3, [r7, #6]
 8014844:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 8014846:	68bb      	ldr	r3, [r7, #8]
 8014848:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 801484a:	69fb      	ldr	r3, [r7, #28]
 801484c:	895a      	ldrh	r2, [r3, #10]
 801484e:	8a3b      	ldrh	r3, [r7, #16]
 8014850:	429a      	cmp	r2, r3
 8014852:	d806      	bhi.n	8014862 <pbuf_take_at+0x5e>
 8014854:	4b1d      	ldr	r3, [pc, #116]	@ (80148cc <pbuf_take_at+0xc8>)
 8014856:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801485a:	491d      	ldr	r1, [pc, #116]	@ (80148d0 <pbuf_take_at+0xcc>)
 801485c:	481d      	ldr	r0, [pc, #116]	@ (80148d4 <pbuf_take_at+0xd0>)
 801485e:	f00c fda9 	bl	80213b4 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8014862:	69fb      	ldr	r3, [r7, #28]
 8014864:	895b      	ldrh	r3, [r3, #10]
 8014866:	461a      	mov	r2, r3
 8014868:	8a3b      	ldrh	r3, [r7, #16]
 801486a:	1ad2      	subs	r2, r2, r3
 801486c:	88fb      	ldrh	r3, [r7, #6]
 801486e:	429a      	cmp	r2, r3
 8014870:	da05      	bge.n	801487e <pbuf_take_at+0x7a>
 8014872:	69fb      	ldr	r3, [r7, #28]
 8014874:	895a      	ldrh	r2, [r3, #10]
 8014876:	8a3b      	ldrh	r3, [r7, #16]
 8014878:	1ad3      	subs	r3, r2, r3
 801487a:	b29b      	uxth	r3, r3
 801487c:	e000      	b.n	8014880 <pbuf_take_at+0x7c>
 801487e:	88fb      	ldrh	r3, [r7, #6]
 8014880:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8014882:	69fb      	ldr	r3, [r7, #28]
 8014884:	685b      	ldr	r3, [r3, #4]
 8014886:	8a3a      	ldrh	r2, [r7, #16]
 8014888:	4413      	add	r3, r2
 801488a:	8a7a      	ldrh	r2, [r7, #18]
 801488c:	68b9      	ldr	r1, [r7, #8]
 801488e:	4618      	mov	r0, r3
 8014890:	f00d f879 	bl	8021986 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8014894:	8b7a      	ldrh	r2, [r7, #26]
 8014896:	8a7b      	ldrh	r3, [r7, #18]
 8014898:	1ad3      	subs	r3, r2, r3
 801489a:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 801489c:	8a7b      	ldrh	r3, [r7, #18]
 801489e:	697a      	ldr	r2, [r7, #20]
 80148a0:	4413      	add	r3, r2
 80148a2:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 80148a4:	8b7b      	ldrh	r3, [r7, #26]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d008      	beq.n	80148bc <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 80148aa:	69fb      	ldr	r3, [r7, #28]
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	8b7a      	ldrh	r2, [r7, #26]
 80148b0:	6979      	ldr	r1, [r7, #20]
 80148b2:	4618      	mov	r0, r3
 80148b4:	f7ff ff14 	bl	80146e0 <pbuf_take>
 80148b8:	4603      	mov	r3, r0
 80148ba:	e003      	b.n	80148c4 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 80148bc:	2300      	movs	r3, #0
 80148be:	e001      	b.n	80148c4 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 80148c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80148c4:	4618      	mov	r0, r3
 80148c6:	3720      	adds	r7, #32
 80148c8:	46bd      	mov	sp, r7
 80148ca:	bd80      	pop	{r7, pc}
 80148cc:	08023c50 	.word	0x08023c50
 80148d0:	080240ac 	.word	0x080240ac
 80148d4:	08023cb0 	.word	0x08023cb0

080148d8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b084      	sub	sp, #16
 80148dc:	af00      	add	r7, sp, #0
 80148de:	4603      	mov	r3, r0
 80148e0:	603a      	str	r2, [r7, #0]
 80148e2:	71fb      	strb	r3, [r7, #7]
 80148e4:	460b      	mov	r3, r1
 80148e6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80148e8:	683b      	ldr	r3, [r7, #0]
 80148ea:	8919      	ldrh	r1, [r3, #8]
 80148ec:	88ba      	ldrh	r2, [r7, #4]
 80148ee:	79fb      	ldrb	r3, [r7, #7]
 80148f0:	4618      	mov	r0, r3
 80148f2:	f7ff f95d 	bl	8013bb0 <pbuf_alloc>
 80148f6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d101      	bne.n	8014902 <pbuf_clone+0x2a>
    return NULL;
 80148fe:	2300      	movs	r3, #0
 8014900:	e011      	b.n	8014926 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8014902:	6839      	ldr	r1, [r7, #0]
 8014904:	68f8      	ldr	r0, [r7, #12]
 8014906:	f7ff fd6b 	bl	80143e0 <pbuf_copy>
 801490a:	4603      	mov	r3, r0
 801490c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801490e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014912:	2b00      	cmp	r3, #0
 8014914:	d006      	beq.n	8014924 <pbuf_clone+0x4c>
 8014916:	4b06      	ldr	r3, [pc, #24]	@ (8014930 <pbuf_clone+0x58>)
 8014918:	f240 5224 	movw	r2, #1316	@ 0x524
 801491c:	4905      	ldr	r1, [pc, #20]	@ (8014934 <pbuf_clone+0x5c>)
 801491e:	4806      	ldr	r0, [pc, #24]	@ (8014938 <pbuf_clone+0x60>)
 8014920:	f00c fd48 	bl	80213b4 <iprintf>
  return q;
 8014924:	68fb      	ldr	r3, [r7, #12]
}
 8014926:	4618      	mov	r0, r3
 8014928:	3710      	adds	r7, #16
 801492a:	46bd      	mov	sp, r7
 801492c:	bd80      	pop	{r7, pc}
 801492e:	bf00      	nop
 8014930:	08023c50 	.word	0x08023c50
 8014934:	080240c4 	.word	0x080240c4
 8014938:	08023cb0 	.word	0x08023cb0

0801493c <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 801493c:	b580      	push	{r7, lr}
 801493e:	b084      	sub	sp, #16
 8014940:	af00      	add	r7, sp, #0
 8014942:	6078      	str	r0, [r7, #4]
 8014944:	460b      	mov	r3, r1
 8014946:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8014948:	887b      	ldrh	r3, [r7, #2]
 801494a:	4619      	mov	r1, r3
 801494c:	6878      	ldr	r0, [r7, #4]
 801494e:	f000 f80c 	bl	801496a <pbuf_try_get_at>
 8014952:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	2b00      	cmp	r3, #0
 8014958:	db02      	blt.n	8014960 <pbuf_get_at+0x24>
    return (u8_t)ret;
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	b2db      	uxtb	r3, r3
 801495e:	e000      	b.n	8014962 <pbuf_get_at+0x26>
  }
  return 0;
 8014960:	2300      	movs	r3, #0
}
 8014962:	4618      	mov	r0, r3
 8014964:	3710      	adds	r7, #16
 8014966:	46bd      	mov	sp, r7
 8014968:	bd80      	pop	{r7, pc}

0801496a <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 801496a:	b580      	push	{r7, lr}
 801496c:	b084      	sub	sp, #16
 801496e:	af00      	add	r7, sp, #0
 8014970:	6078      	str	r0, [r7, #4]
 8014972:	460b      	mov	r3, r1
 8014974:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8014976:	f107 020a 	add.w	r2, r7, #10
 801497a:	887b      	ldrh	r3, [r7, #2]
 801497c:	4619      	mov	r1, r3
 801497e:	6878      	ldr	r0, [r7, #4]
 8014980:	f7ff fe72 	bl	8014668 <pbuf_skip_const>
 8014984:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d00a      	beq.n	80149a2 <pbuf_try_get_at+0x38>
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	895a      	ldrh	r2, [r3, #10]
 8014990:	897b      	ldrh	r3, [r7, #10]
 8014992:	429a      	cmp	r2, r3
 8014994:	d905      	bls.n	80149a2 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	685b      	ldr	r3, [r3, #4]
 801499a:	897a      	ldrh	r2, [r7, #10]
 801499c:	4413      	add	r3, r2
 801499e:	781b      	ldrb	r3, [r3, #0]
 80149a0:	e001      	b.n	80149a6 <pbuf_try_get_at+0x3c>
  }
  return -1;
 80149a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80149a6:	4618      	mov	r0, r3
 80149a8:	3710      	adds	r7, #16
 80149aa:	46bd      	mov	sp, r7
 80149ac:	bd80      	pop	{r7, pc}

080149ae <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 80149ae:	b580      	push	{r7, lr}
 80149b0:	b088      	sub	sp, #32
 80149b2:	af00      	add	r7, sp, #0
 80149b4:	60f8      	str	r0, [r7, #12]
 80149b6:	607a      	str	r2, [r7, #4]
 80149b8:	461a      	mov	r2, r3
 80149ba:	460b      	mov	r3, r1
 80149bc:	817b      	strh	r3, [r7, #10]
 80149be:	4613      	mov	r3, r2
 80149c0:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 80149c2:	897b      	ldrh	r3, [r7, #10]
 80149c4:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	891b      	ldrh	r3, [r3, #8]
 80149ce:	4619      	mov	r1, r3
 80149d0:	897a      	ldrh	r2, [r7, #10]
 80149d2:	893b      	ldrh	r3, [r7, #8]
 80149d4:	4413      	add	r3, r2
 80149d6:	4299      	cmp	r1, r3
 80149d8:	da0a      	bge.n	80149f0 <pbuf_memcmp+0x42>
    return 0xffff;
 80149da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80149de:	e037      	b.n	8014a50 <pbuf_memcmp+0xa2>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 80149e0:	69bb      	ldr	r3, [r7, #24]
 80149e2:	895b      	ldrh	r3, [r3, #10]
 80149e4:	8bfa      	ldrh	r2, [r7, #30]
 80149e6:	1ad3      	subs	r3, r2, r3
 80149e8:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 80149ea:	69bb      	ldr	r3, [r7, #24]
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 80149f0:	69bb      	ldr	r3, [r7, #24]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d004      	beq.n	8014a00 <pbuf_memcmp+0x52>
 80149f6:	69bb      	ldr	r3, [r7, #24]
 80149f8:	895b      	ldrh	r3, [r3, #10]
 80149fa:	8bfa      	ldrh	r2, [r7, #30]
 80149fc:	429a      	cmp	r2, r3
 80149fe:	d2ef      	bcs.n	80149e0 <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 8014a00:	2300      	movs	r3, #0
 8014a02:	82fb      	strh	r3, [r7, #22]
 8014a04:	e01f      	b.n	8014a46 <pbuf_memcmp+0x98>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 8014a06:	8bfa      	ldrh	r2, [r7, #30]
 8014a08:	8afb      	ldrh	r3, [r7, #22]
 8014a0a:	4413      	add	r3, r2
 8014a0c:	b29b      	uxth	r3, r3
 8014a0e:	4619      	mov	r1, r3
 8014a10:	69b8      	ldr	r0, [r7, #24]
 8014a12:	f7ff ff93 	bl	801493c <pbuf_get_at>
 8014a16:	4603      	mov	r3, r0
 8014a18:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 8014a1a:	8afb      	ldrh	r3, [r7, #22]
 8014a1c:	687a      	ldr	r2, [r7, #4]
 8014a1e:	4413      	add	r3, r2
 8014a20:	781b      	ldrb	r3, [r3, #0]
 8014a22:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 8014a24:	7d7a      	ldrb	r2, [r7, #21]
 8014a26:	7d3b      	ldrb	r3, [r7, #20]
 8014a28:	429a      	cmp	r2, r3
 8014a2a:	d009      	beq.n	8014a40 <pbuf_memcmp+0x92>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 8014a2c:	8afb      	ldrh	r3, [r7, #22]
 8014a2e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8014a32:	4293      	cmp	r3, r2
 8014a34:	bf28      	it	cs
 8014a36:	4613      	movcs	r3, r2
 8014a38:	b29b      	uxth	r3, r3
 8014a3a:	3301      	adds	r3, #1
 8014a3c:	b29b      	uxth	r3, r3
 8014a3e:	e007      	b.n	8014a50 <pbuf_memcmp+0xa2>
  for (i = 0; i < n; i++) {
 8014a40:	8afb      	ldrh	r3, [r7, #22]
 8014a42:	3301      	adds	r3, #1
 8014a44:	82fb      	strh	r3, [r7, #22]
 8014a46:	8afa      	ldrh	r2, [r7, #22]
 8014a48:	893b      	ldrh	r3, [r7, #8]
 8014a4a:	429a      	cmp	r2, r3
 8014a4c:	d3db      	bcc.n	8014a06 <pbuf_memcmp+0x58>
    }
  }
  return 0;
 8014a4e:	2300      	movs	r3, #0
}
 8014a50:	4618      	mov	r0, r3
 8014a52:	3720      	adds	r7, #32
 8014a54:	46bd      	mov	sp, r7
 8014a56:	bd80      	pop	{r7, pc}

08014a58 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014a5c:	f00c fbaa 	bl	80211b4 <rand>
 8014a60:	4603      	mov	r3, r0
 8014a62:	b29b      	uxth	r3, r3
 8014a64:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014a68:	b29b      	uxth	r3, r3
 8014a6a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8014a6e:	b29a      	uxth	r2, r3
 8014a70:	4b01      	ldr	r3, [pc, #4]	@ (8014a78 <tcp_init+0x20>)
 8014a72:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014a74:	bf00      	nop
 8014a76:	bd80      	pop	{r7, pc}
 8014a78:	200000b8 	.word	0x200000b8

08014a7c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b082      	sub	sp, #8
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	7d1b      	ldrb	r3, [r3, #20]
 8014a88:	2b01      	cmp	r3, #1
 8014a8a:	d105      	bne.n	8014a98 <tcp_free+0x1c>
 8014a8c:	4b06      	ldr	r3, [pc, #24]	@ (8014aa8 <tcp_free+0x2c>)
 8014a8e:	22d4      	movs	r2, #212	@ 0xd4
 8014a90:	4906      	ldr	r1, [pc, #24]	@ (8014aac <tcp_free+0x30>)
 8014a92:	4807      	ldr	r0, [pc, #28]	@ (8014ab0 <tcp_free+0x34>)
 8014a94:	f00c fc8e 	bl	80213b4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8014a98:	6879      	ldr	r1, [r7, #4]
 8014a9a:	2001      	movs	r0, #1
 8014a9c:	f7fe fc80 	bl	80133a0 <memp_free>
}
 8014aa0:	bf00      	nop
 8014aa2:	3708      	adds	r7, #8
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	bd80      	pop	{r7, pc}
 8014aa8:	08024150 	.word	0x08024150
 8014aac:	08024180 	.word	0x08024180
 8014ab0:	08024194 	.word	0x08024194

08014ab4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b082      	sub	sp, #8
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	7d1b      	ldrb	r3, [r3, #20]
 8014ac0:	2b01      	cmp	r3, #1
 8014ac2:	d105      	bne.n	8014ad0 <tcp_free_listen+0x1c>
 8014ac4:	4b06      	ldr	r3, [pc, #24]	@ (8014ae0 <tcp_free_listen+0x2c>)
 8014ac6:	22df      	movs	r2, #223	@ 0xdf
 8014ac8:	4906      	ldr	r1, [pc, #24]	@ (8014ae4 <tcp_free_listen+0x30>)
 8014aca:	4807      	ldr	r0, [pc, #28]	@ (8014ae8 <tcp_free_listen+0x34>)
 8014acc:	f00c fc72 	bl	80213b4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8014ad0:	6879      	ldr	r1, [r7, #4]
 8014ad2:	2002      	movs	r0, #2
 8014ad4:	f7fe fc64 	bl	80133a0 <memp_free>
}
 8014ad8:	bf00      	nop
 8014ada:	3708      	adds	r7, #8
 8014adc:	46bd      	mov	sp, r7
 8014ade:	bd80      	pop	{r7, pc}
 8014ae0:	08024150 	.word	0x08024150
 8014ae4:	080241bc 	.word	0x080241bc
 8014ae8:	08024194 	.word	0x08024194

08014aec <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8014af0:	f001 f85e 	bl	8015bb0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8014af4:	4b07      	ldr	r3, [pc, #28]	@ (8014b14 <tcp_tmr+0x28>)
 8014af6:	781b      	ldrb	r3, [r3, #0]
 8014af8:	3301      	adds	r3, #1
 8014afa:	b2da      	uxtb	r2, r3
 8014afc:	4b05      	ldr	r3, [pc, #20]	@ (8014b14 <tcp_tmr+0x28>)
 8014afe:	701a      	strb	r2, [r3, #0]
 8014b00:	4b04      	ldr	r3, [pc, #16]	@ (8014b14 <tcp_tmr+0x28>)
 8014b02:	781b      	ldrb	r3, [r3, #0]
 8014b04:	f003 0301 	and.w	r3, r3, #1
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d001      	beq.n	8014b10 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014b0c:	f000 fd0e 	bl	801552c <tcp_slowtmr>
  }
}
 8014b10:	bf00      	nop
 8014b12:	bd80      	pop	{r7, pc}
 8014b14:	20004bfd 	.word	0x20004bfd

08014b18 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b084      	sub	sp, #16
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
 8014b20:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8014b22:	683b      	ldr	r3, [r7, #0]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d105      	bne.n	8014b34 <tcp_remove_listener+0x1c>
 8014b28:	4b0d      	ldr	r3, [pc, #52]	@ (8014b60 <tcp_remove_listener+0x48>)
 8014b2a:	22ff      	movs	r2, #255	@ 0xff
 8014b2c:	490d      	ldr	r1, [pc, #52]	@ (8014b64 <tcp_remove_listener+0x4c>)
 8014b2e:	480e      	ldr	r0, [pc, #56]	@ (8014b68 <tcp_remove_listener+0x50>)
 8014b30:	f00c fc40 	bl	80213b4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	60fb      	str	r3, [r7, #12]
 8014b38:	e00a      	b.n	8014b50 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014b3e:	683a      	ldr	r2, [r7, #0]
 8014b40:	429a      	cmp	r2, r3
 8014b42:	d102      	bne.n	8014b4a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	2200      	movs	r2, #0
 8014b48:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	68db      	ldr	r3, [r3, #12]
 8014b4e:	60fb      	str	r3, [r7, #12]
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d1f1      	bne.n	8014b3a <tcp_remove_listener+0x22>
    }
  }
}
 8014b56:	bf00      	nop
 8014b58:	bf00      	nop
 8014b5a:	3710      	adds	r7, #16
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	bd80      	pop	{r7, pc}
 8014b60:	08024150 	.word	0x08024150
 8014b64:	080241d8 	.word	0x080241d8
 8014b68:	08024194 	.word	0x08024194

08014b6c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b084      	sub	sp, #16
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d106      	bne.n	8014b88 <tcp_listen_closed+0x1c>
 8014b7a:	4b14      	ldr	r3, [pc, #80]	@ (8014bcc <tcp_listen_closed+0x60>)
 8014b7c:	f240 1211 	movw	r2, #273	@ 0x111
 8014b80:	4913      	ldr	r1, [pc, #76]	@ (8014bd0 <tcp_listen_closed+0x64>)
 8014b82:	4814      	ldr	r0, [pc, #80]	@ (8014bd4 <tcp_listen_closed+0x68>)
 8014b84:	f00c fc16 	bl	80213b4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	7d1b      	ldrb	r3, [r3, #20]
 8014b8c:	2b01      	cmp	r3, #1
 8014b8e:	d006      	beq.n	8014b9e <tcp_listen_closed+0x32>
 8014b90:	4b0e      	ldr	r3, [pc, #56]	@ (8014bcc <tcp_listen_closed+0x60>)
 8014b92:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8014b96:	4910      	ldr	r1, [pc, #64]	@ (8014bd8 <tcp_listen_closed+0x6c>)
 8014b98:	480e      	ldr	r0, [pc, #56]	@ (8014bd4 <tcp_listen_closed+0x68>)
 8014b9a:	f00c fc0b 	bl	80213b4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014b9e:	2301      	movs	r3, #1
 8014ba0:	60fb      	str	r3, [r7, #12]
 8014ba2:	e00b      	b.n	8014bbc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8014ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8014bdc <tcp_listen_closed+0x70>)
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	6879      	ldr	r1, [r7, #4]
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	f7ff ffb1 	bl	8014b18 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	3301      	adds	r3, #1
 8014bba:	60fb      	str	r3, [r7, #12]
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	2b03      	cmp	r3, #3
 8014bc0:	d9f0      	bls.n	8014ba4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8014bc2:	bf00      	nop
 8014bc4:	bf00      	nop
 8014bc6:	3710      	adds	r7, #16
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	bd80      	pop	{r7, pc}
 8014bcc:	08024150 	.word	0x08024150
 8014bd0:	08024200 	.word	0x08024200
 8014bd4:	08024194 	.word	0x08024194
 8014bd8:	0802420c 	.word	0x0802420c
 8014bdc:	08027714 	.word	0x08027714

08014be0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8014be0:	b5b0      	push	{r4, r5, r7, lr}
 8014be2:	b088      	sub	sp, #32
 8014be4:	af04      	add	r7, sp, #16
 8014be6:	6078      	str	r0, [r7, #4]
 8014be8:	460b      	mov	r3, r1
 8014bea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d106      	bne.n	8014c00 <tcp_close_shutdown+0x20>
 8014bf2:	4b63      	ldr	r3, [pc, #396]	@ (8014d80 <tcp_close_shutdown+0x1a0>)
 8014bf4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8014bf8:	4962      	ldr	r1, [pc, #392]	@ (8014d84 <tcp_close_shutdown+0x1a4>)
 8014bfa:	4863      	ldr	r0, [pc, #396]	@ (8014d88 <tcp_close_shutdown+0x1a8>)
 8014bfc:	f00c fbda 	bl	80213b4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8014c00:	78fb      	ldrb	r3, [r7, #3]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d066      	beq.n	8014cd4 <tcp_close_shutdown+0xf4>
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	7d1b      	ldrb	r3, [r3, #20]
 8014c0a:	2b04      	cmp	r3, #4
 8014c0c:	d003      	beq.n	8014c16 <tcp_close_shutdown+0x36>
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	7d1b      	ldrb	r3, [r3, #20]
 8014c12:	2b07      	cmp	r3, #7
 8014c14:	d15e      	bne.n	8014cd4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d104      	bne.n	8014c28 <tcp_close_shutdown+0x48>
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014c22:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014c26:	d055      	beq.n	8014cd4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	8b5b      	ldrh	r3, [r3, #26]
 8014c2c:	f003 0310 	and.w	r3, r3, #16
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d106      	bne.n	8014c42 <tcp_close_shutdown+0x62>
 8014c34:	4b52      	ldr	r3, [pc, #328]	@ (8014d80 <tcp_close_shutdown+0x1a0>)
 8014c36:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8014c3a:	4954      	ldr	r1, [pc, #336]	@ (8014d8c <tcp_close_shutdown+0x1ac>)
 8014c3c:	4852      	ldr	r0, [pc, #328]	@ (8014d88 <tcp_close_shutdown+0x1a8>)
 8014c3e:	f00c fbb9 	bl	80213b4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014c4a:	687d      	ldr	r5, [r7, #4]
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	3304      	adds	r3, #4
 8014c50:	687a      	ldr	r2, [r7, #4]
 8014c52:	8ad2      	ldrh	r2, [r2, #22]
 8014c54:	6879      	ldr	r1, [r7, #4]
 8014c56:	8b09      	ldrh	r1, [r1, #24]
 8014c58:	9102      	str	r1, [sp, #8]
 8014c5a:	9201      	str	r2, [sp, #4]
 8014c5c:	9300      	str	r3, [sp, #0]
 8014c5e:	462b      	mov	r3, r5
 8014c60:	4622      	mov	r2, r4
 8014c62:	4601      	mov	r1, r0
 8014c64:	6878      	ldr	r0, [r7, #4]
 8014c66:	f005 fd8b 	bl	801a780 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014c6a:	6878      	ldr	r0, [r7, #4]
 8014c6c:	f001 fb6e 	bl	801634c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014c70:	4b47      	ldr	r3, [pc, #284]	@ (8014d90 <tcp_close_shutdown+0x1b0>)
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	687a      	ldr	r2, [r7, #4]
 8014c76:	429a      	cmp	r2, r3
 8014c78:	d105      	bne.n	8014c86 <tcp_close_shutdown+0xa6>
 8014c7a:	4b45      	ldr	r3, [pc, #276]	@ (8014d90 <tcp_close_shutdown+0x1b0>)
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	68db      	ldr	r3, [r3, #12]
 8014c80:	4a43      	ldr	r2, [pc, #268]	@ (8014d90 <tcp_close_shutdown+0x1b0>)
 8014c82:	6013      	str	r3, [r2, #0]
 8014c84:	e013      	b.n	8014cae <tcp_close_shutdown+0xce>
 8014c86:	4b42      	ldr	r3, [pc, #264]	@ (8014d90 <tcp_close_shutdown+0x1b0>)
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	60fb      	str	r3, [r7, #12]
 8014c8c:	e00c      	b.n	8014ca8 <tcp_close_shutdown+0xc8>
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	68db      	ldr	r3, [r3, #12]
 8014c92:	687a      	ldr	r2, [r7, #4]
 8014c94:	429a      	cmp	r2, r3
 8014c96:	d104      	bne.n	8014ca2 <tcp_close_shutdown+0xc2>
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	68da      	ldr	r2, [r3, #12]
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	60da      	str	r2, [r3, #12]
 8014ca0:	e005      	b.n	8014cae <tcp_close_shutdown+0xce>
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	68db      	ldr	r3, [r3, #12]
 8014ca6:	60fb      	str	r3, [r7, #12]
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d1ef      	bne.n	8014c8e <tcp_close_shutdown+0xae>
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	2200      	movs	r2, #0
 8014cb2:	60da      	str	r2, [r3, #12]
 8014cb4:	4b37      	ldr	r3, [pc, #220]	@ (8014d94 <tcp_close_shutdown+0x1b4>)
 8014cb6:	2201      	movs	r2, #1
 8014cb8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8014cba:	4b37      	ldr	r3, [pc, #220]	@ (8014d98 <tcp_close_shutdown+0x1b8>)
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	687a      	ldr	r2, [r7, #4]
 8014cc0:	429a      	cmp	r2, r3
 8014cc2:	d102      	bne.n	8014cca <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8014cc4:	f004 f802 	bl	8018ccc <tcp_trigger_input_pcb_close>
 8014cc8:	e002      	b.n	8014cd0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8014cca:	6878      	ldr	r0, [r7, #4]
 8014ccc:	f7ff fed6 	bl	8014a7c <tcp_free>
      }
      return ERR_OK;
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	e050      	b.n	8014d76 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	7d1b      	ldrb	r3, [r3, #20]
 8014cd8:	2b02      	cmp	r3, #2
 8014cda:	d03b      	beq.n	8014d54 <tcp_close_shutdown+0x174>
 8014cdc:	2b02      	cmp	r3, #2
 8014cde:	dc44      	bgt.n	8014d6a <tcp_close_shutdown+0x18a>
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d002      	beq.n	8014cea <tcp_close_shutdown+0x10a>
 8014ce4:	2b01      	cmp	r3, #1
 8014ce6:	d02a      	beq.n	8014d3e <tcp_close_shutdown+0x15e>
 8014ce8:	e03f      	b.n	8014d6a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	8adb      	ldrh	r3, [r3, #22]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d021      	beq.n	8014d36 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8014d9c <tcp_close_shutdown+0x1bc>)
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	687a      	ldr	r2, [r7, #4]
 8014cf8:	429a      	cmp	r2, r3
 8014cfa:	d105      	bne.n	8014d08 <tcp_close_shutdown+0x128>
 8014cfc:	4b27      	ldr	r3, [pc, #156]	@ (8014d9c <tcp_close_shutdown+0x1bc>)
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	68db      	ldr	r3, [r3, #12]
 8014d02:	4a26      	ldr	r2, [pc, #152]	@ (8014d9c <tcp_close_shutdown+0x1bc>)
 8014d04:	6013      	str	r3, [r2, #0]
 8014d06:	e013      	b.n	8014d30 <tcp_close_shutdown+0x150>
 8014d08:	4b24      	ldr	r3, [pc, #144]	@ (8014d9c <tcp_close_shutdown+0x1bc>)
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	60bb      	str	r3, [r7, #8]
 8014d0e:	e00c      	b.n	8014d2a <tcp_close_shutdown+0x14a>
 8014d10:	68bb      	ldr	r3, [r7, #8]
 8014d12:	68db      	ldr	r3, [r3, #12]
 8014d14:	687a      	ldr	r2, [r7, #4]
 8014d16:	429a      	cmp	r2, r3
 8014d18:	d104      	bne.n	8014d24 <tcp_close_shutdown+0x144>
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	68da      	ldr	r2, [r3, #12]
 8014d1e:	68bb      	ldr	r3, [r7, #8]
 8014d20:	60da      	str	r2, [r3, #12]
 8014d22:	e005      	b.n	8014d30 <tcp_close_shutdown+0x150>
 8014d24:	68bb      	ldr	r3, [r7, #8]
 8014d26:	68db      	ldr	r3, [r3, #12]
 8014d28:	60bb      	str	r3, [r7, #8]
 8014d2a:	68bb      	ldr	r3, [r7, #8]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d1ef      	bne.n	8014d10 <tcp_close_shutdown+0x130>
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	2200      	movs	r2, #0
 8014d34:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8014d36:	6878      	ldr	r0, [r7, #4]
 8014d38:	f7ff fea0 	bl	8014a7c <tcp_free>
      break;
 8014d3c:	e01a      	b.n	8014d74 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8014d3e:	6878      	ldr	r0, [r7, #4]
 8014d40:	f7ff ff14 	bl	8014b6c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014d44:	6879      	ldr	r1, [r7, #4]
 8014d46:	4816      	ldr	r0, [pc, #88]	@ (8014da0 <tcp_close_shutdown+0x1c0>)
 8014d48:	f001 fb50 	bl	80163ec <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014d4c:	6878      	ldr	r0, [r7, #4]
 8014d4e:	f7ff feb1 	bl	8014ab4 <tcp_free_listen>
      break;
 8014d52:	e00f      	b.n	8014d74 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014d54:	6879      	ldr	r1, [r7, #4]
 8014d56:	480e      	ldr	r0, [pc, #56]	@ (8014d90 <tcp_close_shutdown+0x1b0>)
 8014d58:	f001 fb48 	bl	80163ec <tcp_pcb_remove>
 8014d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8014d94 <tcp_close_shutdown+0x1b4>)
 8014d5e:	2201      	movs	r2, #1
 8014d60:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8014d62:	6878      	ldr	r0, [r7, #4]
 8014d64:	f7ff fe8a 	bl	8014a7c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014d68:	e004      	b.n	8014d74 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014d6a:	6878      	ldr	r0, [r7, #4]
 8014d6c:	f000 f81a 	bl	8014da4 <tcp_close_shutdown_fin>
 8014d70:	4603      	mov	r3, r0
 8014d72:	e000      	b.n	8014d76 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8014d74:	2300      	movs	r3, #0
}
 8014d76:	4618      	mov	r0, r3
 8014d78:	3710      	adds	r7, #16
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8014d7e:	bf00      	nop
 8014d80:	08024150 	.word	0x08024150
 8014d84:	08024224 	.word	0x08024224
 8014d88:	08024194 	.word	0x08024194
 8014d8c:	08024244 	.word	0x08024244
 8014d90:	20004bf4 	.word	0x20004bf4
 8014d94:	20004bfc 	.word	0x20004bfc
 8014d98:	20004c34 	.word	0x20004c34
 8014d9c:	20004bec 	.word	0x20004bec
 8014da0:	20004bf0 	.word	0x20004bf0

08014da4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b084      	sub	sp, #16
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d106      	bne.n	8014dc0 <tcp_close_shutdown_fin+0x1c>
 8014db2:	4b2e      	ldr	r3, [pc, #184]	@ (8014e6c <tcp_close_shutdown_fin+0xc8>)
 8014db4:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8014db8:	492d      	ldr	r1, [pc, #180]	@ (8014e70 <tcp_close_shutdown_fin+0xcc>)
 8014dba:	482e      	ldr	r0, [pc, #184]	@ (8014e74 <tcp_close_shutdown_fin+0xd0>)
 8014dbc:	f00c fafa 	bl	80213b4 <iprintf>

  switch (pcb->state) {
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	7d1b      	ldrb	r3, [r3, #20]
 8014dc4:	2b07      	cmp	r3, #7
 8014dc6:	d020      	beq.n	8014e0a <tcp_close_shutdown_fin+0x66>
 8014dc8:	2b07      	cmp	r3, #7
 8014dca:	dc2b      	bgt.n	8014e24 <tcp_close_shutdown_fin+0x80>
 8014dcc:	2b03      	cmp	r3, #3
 8014dce:	d002      	beq.n	8014dd6 <tcp_close_shutdown_fin+0x32>
 8014dd0:	2b04      	cmp	r3, #4
 8014dd2:	d00d      	beq.n	8014df0 <tcp_close_shutdown_fin+0x4c>
 8014dd4:	e026      	b.n	8014e24 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8014dd6:	6878      	ldr	r0, [r7, #4]
 8014dd8:	f004 fde0 	bl	801999c <tcp_send_fin>
 8014ddc:	4603      	mov	r3, r0
 8014dde:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d11f      	bne.n	8014e28 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	2205      	movs	r2, #5
 8014dec:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014dee:	e01b      	b.n	8014e28 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8014df0:	6878      	ldr	r0, [r7, #4]
 8014df2:	f004 fdd3 	bl	801999c <tcp_send_fin>
 8014df6:	4603      	mov	r3, r0
 8014df8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d114      	bne.n	8014e2c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	2205      	movs	r2, #5
 8014e06:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014e08:	e010      	b.n	8014e2c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8014e0a:	6878      	ldr	r0, [r7, #4]
 8014e0c:	f004 fdc6 	bl	801999c <tcp_send_fin>
 8014e10:	4603      	mov	r3, r0
 8014e12:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d109      	bne.n	8014e30 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	2209      	movs	r2, #9
 8014e20:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014e22:	e005      	b.n	8014e30 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8014e24:	2300      	movs	r3, #0
 8014e26:	e01c      	b.n	8014e62 <tcp_close_shutdown_fin+0xbe>
      break;
 8014e28:	bf00      	nop
 8014e2a:	e002      	b.n	8014e32 <tcp_close_shutdown_fin+0x8e>
      break;
 8014e2c:	bf00      	nop
 8014e2e:	e000      	b.n	8014e32 <tcp_close_shutdown_fin+0x8e>
      break;
 8014e30:	bf00      	nop
  }

  if (err == ERR_OK) {
 8014e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d103      	bne.n	8014e42 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8014e3a:	6878      	ldr	r0, [r7, #4]
 8014e3c:	f004 feec 	bl	8019c18 <tcp_output>
 8014e40:	e00d      	b.n	8014e5e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8014e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014e46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014e4a:	d108      	bne.n	8014e5e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	8b5b      	ldrh	r3, [r3, #26]
 8014e50:	f043 0308 	orr.w	r3, r3, #8
 8014e54:	b29a      	uxth	r2, r3
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014e5a:	2300      	movs	r3, #0
 8014e5c:	e001      	b.n	8014e62 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8014e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014e62:	4618      	mov	r0, r3
 8014e64:	3710      	adds	r7, #16
 8014e66:	46bd      	mov	sp, r7
 8014e68:	bd80      	pop	{r7, pc}
 8014e6a:	bf00      	nop
 8014e6c:	08024150 	.word	0x08024150
 8014e70:	08024200 	.word	0x08024200
 8014e74:	08024194 	.word	0x08024194

08014e78 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b082      	sub	sp, #8
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d109      	bne.n	8014e9a <tcp_close+0x22>
 8014e86:	4b0f      	ldr	r3, [pc, #60]	@ (8014ec4 <tcp_close+0x4c>)
 8014e88:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8014e8c:	490e      	ldr	r1, [pc, #56]	@ (8014ec8 <tcp_close+0x50>)
 8014e8e:	480f      	ldr	r0, [pc, #60]	@ (8014ecc <tcp_close+0x54>)
 8014e90:	f00c fa90 	bl	80213b4 <iprintf>
 8014e94:	f06f 030f 	mvn.w	r3, #15
 8014e98:	e00f      	b.n	8014eba <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	7d1b      	ldrb	r3, [r3, #20]
 8014e9e:	2b01      	cmp	r3, #1
 8014ea0:	d006      	beq.n	8014eb0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	8b5b      	ldrh	r3, [r3, #26]
 8014ea6:	f043 0310 	orr.w	r3, r3, #16
 8014eaa:	b29a      	uxth	r2, r3
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8014eb0:	2101      	movs	r1, #1
 8014eb2:	6878      	ldr	r0, [r7, #4]
 8014eb4:	f7ff fe94 	bl	8014be0 <tcp_close_shutdown>
 8014eb8:	4603      	mov	r3, r0
}
 8014eba:	4618      	mov	r0, r3
 8014ebc:	3708      	adds	r7, #8
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	bd80      	pop	{r7, pc}
 8014ec2:	bf00      	nop
 8014ec4:	08024150 	.word	0x08024150
 8014ec8:	08024260 	.word	0x08024260
 8014ecc:	08024194 	.word	0x08024194

08014ed0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b08e      	sub	sp, #56	@ 0x38
 8014ed4:	af04      	add	r7, sp, #16
 8014ed6:	6078      	str	r0, [r7, #4]
 8014ed8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d107      	bne.n	8014ef0 <tcp_abandon+0x20>
 8014ee0:	4b52      	ldr	r3, [pc, #328]	@ (801502c <tcp_abandon+0x15c>)
 8014ee2:	f240 223d 	movw	r2, #573	@ 0x23d
 8014ee6:	4952      	ldr	r1, [pc, #328]	@ (8015030 <tcp_abandon+0x160>)
 8014ee8:	4852      	ldr	r0, [pc, #328]	@ (8015034 <tcp_abandon+0x164>)
 8014eea:	f00c fa63 	bl	80213b4 <iprintf>
 8014eee:	e099      	b.n	8015024 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	7d1b      	ldrb	r3, [r3, #20]
 8014ef4:	2b01      	cmp	r3, #1
 8014ef6:	d106      	bne.n	8014f06 <tcp_abandon+0x36>
 8014ef8:	4b4c      	ldr	r3, [pc, #304]	@ (801502c <tcp_abandon+0x15c>)
 8014efa:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8014efe:	494e      	ldr	r1, [pc, #312]	@ (8015038 <tcp_abandon+0x168>)
 8014f00:	484c      	ldr	r0, [pc, #304]	@ (8015034 <tcp_abandon+0x164>)
 8014f02:	f00c fa57 	bl	80213b4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	7d1b      	ldrb	r3, [r3, #20]
 8014f0a:	2b0a      	cmp	r3, #10
 8014f0c:	d107      	bne.n	8014f1e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8014f0e:	6879      	ldr	r1, [r7, #4]
 8014f10:	484a      	ldr	r0, [pc, #296]	@ (801503c <tcp_abandon+0x16c>)
 8014f12:	f001 fa6b 	bl	80163ec <tcp_pcb_remove>
    tcp_free(pcb);
 8014f16:	6878      	ldr	r0, [r7, #4]
 8014f18:	f7ff fdb0 	bl	8014a7c <tcp_free>
 8014f1c:	e082      	b.n	8015024 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8014f1e:	2300      	movs	r3, #0
 8014f20:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8014f22:	2300      	movs	r3, #0
 8014f24:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014f2a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f30:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014f38:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	691b      	ldr	r3, [r3, #16]
 8014f3e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	7d1b      	ldrb	r3, [r3, #20]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d126      	bne.n	8014f96 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	8adb      	ldrh	r3, [r3, #22]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d02e      	beq.n	8014fae <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014f50:	4b3b      	ldr	r3, [pc, #236]	@ (8015040 <tcp_abandon+0x170>)
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	687a      	ldr	r2, [r7, #4]
 8014f56:	429a      	cmp	r2, r3
 8014f58:	d105      	bne.n	8014f66 <tcp_abandon+0x96>
 8014f5a:	4b39      	ldr	r3, [pc, #228]	@ (8015040 <tcp_abandon+0x170>)
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	68db      	ldr	r3, [r3, #12]
 8014f60:	4a37      	ldr	r2, [pc, #220]	@ (8015040 <tcp_abandon+0x170>)
 8014f62:	6013      	str	r3, [r2, #0]
 8014f64:	e013      	b.n	8014f8e <tcp_abandon+0xbe>
 8014f66:	4b36      	ldr	r3, [pc, #216]	@ (8015040 <tcp_abandon+0x170>)
 8014f68:	681b      	ldr	r3, [r3, #0]
 8014f6a:	61fb      	str	r3, [r7, #28]
 8014f6c:	e00c      	b.n	8014f88 <tcp_abandon+0xb8>
 8014f6e:	69fb      	ldr	r3, [r7, #28]
 8014f70:	68db      	ldr	r3, [r3, #12]
 8014f72:	687a      	ldr	r2, [r7, #4]
 8014f74:	429a      	cmp	r2, r3
 8014f76:	d104      	bne.n	8014f82 <tcp_abandon+0xb2>
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	68da      	ldr	r2, [r3, #12]
 8014f7c:	69fb      	ldr	r3, [r7, #28]
 8014f7e:	60da      	str	r2, [r3, #12]
 8014f80:	e005      	b.n	8014f8e <tcp_abandon+0xbe>
 8014f82:	69fb      	ldr	r3, [r7, #28]
 8014f84:	68db      	ldr	r3, [r3, #12]
 8014f86:	61fb      	str	r3, [r7, #28]
 8014f88:	69fb      	ldr	r3, [r7, #28]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d1ef      	bne.n	8014f6e <tcp_abandon+0x9e>
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	2200      	movs	r2, #0
 8014f92:	60da      	str	r2, [r3, #12]
 8014f94:	e00b      	b.n	8014fae <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8014f96:	683b      	ldr	r3, [r7, #0]
 8014f98:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	8adb      	ldrh	r3, [r3, #22]
 8014f9e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014fa0:	6879      	ldr	r1, [r7, #4]
 8014fa2:	4828      	ldr	r0, [pc, #160]	@ (8015044 <tcp_abandon+0x174>)
 8014fa4:	f001 fa22 	bl	80163ec <tcp_pcb_remove>
 8014fa8:	4b27      	ldr	r3, [pc, #156]	@ (8015048 <tcp_abandon+0x178>)
 8014faa:	2201      	movs	r2, #1
 8014fac:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d004      	beq.n	8014fc0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014fba:	4618      	mov	r0, r3
 8014fbc:	f000 fed8 	bl	8015d70 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d004      	beq.n	8014fd2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014fcc:	4618      	mov	r0, r3
 8014fce:	f000 fecf 	bl	8015d70 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d004      	beq.n	8014fe4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014fde:	4618      	mov	r0, r3
 8014fe0:	f000 fec6 	bl	8015d70 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8014fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d00e      	beq.n	8015008 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8014fea:	6879      	ldr	r1, [r7, #4]
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	3304      	adds	r3, #4
 8014ff0:	687a      	ldr	r2, [r7, #4]
 8014ff2:	8b12      	ldrh	r2, [r2, #24]
 8014ff4:	9202      	str	r2, [sp, #8]
 8014ff6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014ff8:	9201      	str	r2, [sp, #4]
 8014ffa:	9300      	str	r3, [sp, #0]
 8014ffc:	460b      	mov	r3, r1
 8014ffe:	697a      	ldr	r2, [r7, #20]
 8015000:	69b9      	ldr	r1, [r7, #24]
 8015002:	6878      	ldr	r0, [r7, #4]
 8015004:	f005 fbbc 	bl	801a780 <tcp_rst>
    }
    last_state = pcb->state;
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	7d1b      	ldrb	r3, [r3, #20]
 801500c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801500e:	6878      	ldr	r0, [r7, #4]
 8015010:	f7ff fd34 	bl	8014a7c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8015014:	693b      	ldr	r3, [r7, #16]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d004      	beq.n	8015024 <tcp_abandon+0x154>
 801501a:	693b      	ldr	r3, [r7, #16]
 801501c:	f06f 010c 	mvn.w	r1, #12
 8015020:	68f8      	ldr	r0, [r7, #12]
 8015022:	4798      	blx	r3
  }
}
 8015024:	3728      	adds	r7, #40	@ 0x28
 8015026:	46bd      	mov	sp, r7
 8015028:	bd80      	pop	{r7, pc}
 801502a:	bf00      	nop
 801502c:	08024150 	.word	0x08024150
 8015030:	08024294 	.word	0x08024294
 8015034:	08024194 	.word	0x08024194
 8015038:	080242b0 	.word	0x080242b0
 801503c:	20004bf8 	.word	0x20004bf8
 8015040:	20004bec 	.word	0x20004bec
 8015044:	20004bf4 	.word	0x20004bf4
 8015048:	20004bfc 	.word	0x20004bfc

0801504c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	b082      	sub	sp, #8
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8015054:	2101      	movs	r1, #1
 8015056:	6878      	ldr	r0, [r7, #4]
 8015058:	f7ff ff3a 	bl	8014ed0 <tcp_abandon>
}
 801505c:	bf00      	nop
 801505e:	3708      	adds	r7, #8
 8015060:	46bd      	mov	sp, r7
 8015062:	bd80      	pop	{r7, pc}

08015064 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b088      	sub	sp, #32
 8015068:	af00      	add	r7, sp, #0
 801506a:	60f8      	str	r0, [r7, #12]
 801506c:	60b9      	str	r1, [r7, #8]
 801506e:	4613      	mov	r3, r2
 8015070:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8015072:	2304      	movs	r3, #4
 8015074:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015076:	68bb      	ldr	r3, [r7, #8]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d101      	bne.n	8015080 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801507c:	4b3e      	ldr	r3, [pc, #248]	@ (8015178 <tcp_bind+0x114>)
 801507e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d109      	bne.n	801509a <tcp_bind+0x36>
 8015086:	4b3d      	ldr	r3, [pc, #244]	@ (801517c <tcp_bind+0x118>)
 8015088:	f240 22a9 	movw	r2, #681	@ 0x2a9
 801508c:	493c      	ldr	r1, [pc, #240]	@ (8015180 <tcp_bind+0x11c>)
 801508e:	483d      	ldr	r0, [pc, #244]	@ (8015184 <tcp_bind+0x120>)
 8015090:	f00c f990 	bl	80213b4 <iprintf>
 8015094:	f06f 030f 	mvn.w	r3, #15
 8015098:	e06a      	b.n	8015170 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	7d1b      	ldrb	r3, [r3, #20]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d009      	beq.n	80150b6 <tcp_bind+0x52>
 80150a2:	4b36      	ldr	r3, [pc, #216]	@ (801517c <tcp_bind+0x118>)
 80150a4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80150a8:	4937      	ldr	r1, [pc, #220]	@ (8015188 <tcp_bind+0x124>)
 80150aa:	4836      	ldr	r0, [pc, #216]	@ (8015184 <tcp_bind+0x120>)
 80150ac:	f00c f982 	bl	80213b4 <iprintf>
 80150b0:	f06f 0305 	mvn.w	r3, #5
 80150b4:	e05c      	b.n	8015170 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80150b6:	88fb      	ldrh	r3, [r7, #6]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d109      	bne.n	80150d0 <tcp_bind+0x6c>
    port = tcp_new_port();
 80150bc:	f000 f9f0 	bl	80154a0 <tcp_new_port>
 80150c0:	4603      	mov	r3, r0
 80150c2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80150c4:	88fb      	ldrh	r3, [r7, #6]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d135      	bne.n	8015136 <tcp_bind+0xd2>
      return ERR_BUF;
 80150ca:	f06f 0301 	mvn.w	r3, #1
 80150ce:	e04f      	b.n	8015170 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80150d0:	2300      	movs	r3, #0
 80150d2:	61fb      	str	r3, [r7, #28]
 80150d4:	e02b      	b.n	801512e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80150d6:	4a2d      	ldr	r2, [pc, #180]	@ (801518c <tcp_bind+0x128>)
 80150d8:	69fb      	ldr	r3, [r7, #28]
 80150da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	61bb      	str	r3, [r7, #24]
 80150e2:	e01e      	b.n	8015122 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80150e4:	69bb      	ldr	r3, [r7, #24]
 80150e6:	8adb      	ldrh	r3, [r3, #22]
 80150e8:	88fa      	ldrh	r2, [r7, #6]
 80150ea:	429a      	cmp	r2, r3
 80150ec:	d116      	bne.n	801511c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80150ee:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d010      	beq.n	8015116 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80150f4:	69bb      	ldr	r3, [r7, #24]
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d00c      	beq.n	8015116 <tcp_bind+0xb2>
 80150fc:	68bb      	ldr	r3, [r7, #8]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d009      	beq.n	8015116 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8015102:	68bb      	ldr	r3, [r7, #8]
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d005      	beq.n	8015116 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801510a:	69bb      	ldr	r3, [r7, #24]
 801510c:	681a      	ldr	r2, [r3, #0]
 801510e:	68bb      	ldr	r3, [r7, #8]
 8015110:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015112:	429a      	cmp	r2, r3
 8015114:	d102      	bne.n	801511c <tcp_bind+0xb8>
              return ERR_USE;
 8015116:	f06f 0307 	mvn.w	r3, #7
 801511a:	e029      	b.n	8015170 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801511c:	69bb      	ldr	r3, [r7, #24]
 801511e:	68db      	ldr	r3, [r3, #12]
 8015120:	61bb      	str	r3, [r7, #24]
 8015122:	69bb      	ldr	r3, [r7, #24]
 8015124:	2b00      	cmp	r3, #0
 8015126:	d1dd      	bne.n	80150e4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8015128:	69fb      	ldr	r3, [r7, #28]
 801512a:	3301      	adds	r3, #1
 801512c:	61fb      	str	r3, [r7, #28]
 801512e:	69fa      	ldr	r2, [r7, #28]
 8015130:	697b      	ldr	r3, [r7, #20]
 8015132:	429a      	cmp	r2, r3
 8015134:	dbcf      	blt.n	80150d6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8015136:	68bb      	ldr	r3, [r7, #8]
 8015138:	2b00      	cmp	r3, #0
 801513a:	d00c      	beq.n	8015156 <tcp_bind+0xf2>
 801513c:	68bb      	ldr	r3, [r7, #8]
 801513e:	681b      	ldr	r3, [r3, #0]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d008      	beq.n	8015156 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8015144:	68bb      	ldr	r3, [r7, #8]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d002      	beq.n	8015150 <tcp_bind+0xec>
 801514a:	68bb      	ldr	r3, [r7, #8]
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	e000      	b.n	8015152 <tcp_bind+0xee>
 8015150:	2300      	movs	r3, #0
 8015152:	68fa      	ldr	r2, [r7, #12]
 8015154:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	88fa      	ldrh	r2, [r7, #6]
 801515a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801515c:	4b0c      	ldr	r3, [pc, #48]	@ (8015190 <tcp_bind+0x12c>)
 801515e:	681a      	ldr	r2, [r3, #0]
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	60da      	str	r2, [r3, #12]
 8015164:	4a0a      	ldr	r2, [pc, #40]	@ (8015190 <tcp_bind+0x12c>)
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	6013      	str	r3, [r2, #0]
 801516a:	f005 fccb 	bl	801ab04 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801516e:	2300      	movs	r3, #0
}
 8015170:	4618      	mov	r0, r3
 8015172:	3720      	adds	r7, #32
 8015174:	46bd      	mov	sp, r7
 8015176:	bd80      	pop	{r7, pc}
 8015178:	08027754 	.word	0x08027754
 801517c:	08024150 	.word	0x08024150
 8015180:	080242e4 	.word	0x080242e4
 8015184:	08024194 	.word	0x08024194
 8015188:	080242fc 	.word	0x080242fc
 801518c:	08027714 	.word	0x08027714
 8015190:	20004bec 	.word	0x20004bec

08015194 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b084      	sub	sp, #16
 8015198:	af00      	add	r7, sp, #0
 801519a:	60f8      	str	r0, [r7, #12]
 801519c:	60b9      	str	r1, [r7, #8]
 801519e:	4613      	mov	r3, r2
 80151a0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80151a2:	68bb      	ldr	r3, [r7, #8]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d106      	bne.n	80151b6 <tcp_accept_null+0x22>
 80151a8:	4b07      	ldr	r3, [pc, #28]	@ (80151c8 <tcp_accept_null+0x34>)
 80151aa:	f240 320f 	movw	r2, #783	@ 0x30f
 80151ae:	4907      	ldr	r1, [pc, #28]	@ (80151cc <tcp_accept_null+0x38>)
 80151b0:	4807      	ldr	r0, [pc, #28]	@ (80151d0 <tcp_accept_null+0x3c>)
 80151b2:	f00c f8ff 	bl	80213b4 <iprintf>

  tcp_abort(pcb);
 80151b6:	68b8      	ldr	r0, [r7, #8]
 80151b8:	f7ff ff48 	bl	801504c <tcp_abort>

  return ERR_ABRT;
 80151bc:	f06f 030c 	mvn.w	r3, #12
}
 80151c0:	4618      	mov	r0, r3
 80151c2:	3710      	adds	r7, #16
 80151c4:	46bd      	mov	sp, r7
 80151c6:	bd80      	pop	{r7, pc}
 80151c8:	08024150 	.word	0x08024150
 80151cc:	08024324 	.word	0x08024324
 80151d0:	08024194 	.word	0x08024194

080151d4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b082      	sub	sp, #8
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
 80151dc:	460b      	mov	r3, r1
 80151de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80151e0:	78fb      	ldrb	r3, [r7, #3]
 80151e2:	2200      	movs	r2, #0
 80151e4:	4619      	mov	r1, r3
 80151e6:	6878      	ldr	r0, [r7, #4]
 80151e8:	f000 f806 	bl	80151f8 <tcp_listen_with_backlog_and_err>
 80151ec:	4603      	mov	r3, r0
}
 80151ee:	4618      	mov	r0, r3
 80151f0:	3708      	adds	r7, #8
 80151f2:	46bd      	mov	sp, r7
 80151f4:	bd80      	pop	{r7, pc}
	...

080151f8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b088      	sub	sp, #32
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	60f8      	str	r0, [r7, #12]
 8015200:	460b      	mov	r3, r1
 8015202:	607a      	str	r2, [r7, #4]
 8015204:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8015206:	2300      	movs	r3, #0
 8015208:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d109      	bne.n	8015224 <tcp_listen_with_backlog_and_err+0x2c>
 8015210:	4b47      	ldr	r3, [pc, #284]	@ (8015330 <tcp_listen_with_backlog_and_err+0x138>)
 8015212:	f240 3259 	movw	r2, #857	@ 0x359
 8015216:	4947      	ldr	r1, [pc, #284]	@ (8015334 <tcp_listen_with_backlog_and_err+0x13c>)
 8015218:	4847      	ldr	r0, [pc, #284]	@ (8015338 <tcp_listen_with_backlog_and_err+0x140>)
 801521a:	f00c f8cb 	bl	80213b4 <iprintf>
 801521e:	23f0      	movs	r3, #240	@ 0xf0
 8015220:	76fb      	strb	r3, [r7, #27]
 8015222:	e079      	b.n	8015318 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	7d1b      	ldrb	r3, [r3, #20]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d009      	beq.n	8015240 <tcp_listen_with_backlog_and_err+0x48>
 801522c:	4b40      	ldr	r3, [pc, #256]	@ (8015330 <tcp_listen_with_backlog_and_err+0x138>)
 801522e:	f240 325a 	movw	r2, #858	@ 0x35a
 8015232:	4942      	ldr	r1, [pc, #264]	@ (801533c <tcp_listen_with_backlog_and_err+0x144>)
 8015234:	4840      	ldr	r0, [pc, #256]	@ (8015338 <tcp_listen_with_backlog_and_err+0x140>)
 8015236:	f00c f8bd 	bl	80213b4 <iprintf>
 801523a:	23f1      	movs	r3, #241	@ 0xf1
 801523c:	76fb      	strb	r3, [r7, #27]
 801523e:	e06b      	b.n	8015318 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	7d1b      	ldrb	r3, [r3, #20]
 8015244:	2b01      	cmp	r3, #1
 8015246:	d104      	bne.n	8015252 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801524c:	23f7      	movs	r3, #247	@ 0xf7
 801524e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8015250:	e062      	b.n	8015318 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8015252:	2002      	movs	r0, #2
 8015254:	f7fe f834 	bl	80132c0 <memp_malloc>
 8015258:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801525a:	69fb      	ldr	r3, [r7, #28]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d102      	bne.n	8015266 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8015260:	23ff      	movs	r3, #255	@ 0xff
 8015262:	76fb      	strb	r3, [r7, #27]
    goto done;
 8015264:	e058      	b.n	8015318 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	691a      	ldr	r2, [r3, #16]
 801526a:	69fb      	ldr	r3, [r7, #28]
 801526c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	8ada      	ldrh	r2, [r3, #22]
 8015272:	69fb      	ldr	r3, [r7, #28]
 8015274:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8015276:	69fb      	ldr	r3, [r7, #28]
 8015278:	2201      	movs	r2, #1
 801527a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	7d5a      	ldrb	r2, [r3, #21]
 8015280:	69fb      	ldr	r3, [r7, #28]
 8015282:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	7a5a      	ldrb	r2, [r3, #9]
 8015288:	69fb      	ldr	r3, [r7, #28]
 801528a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801528c:	69fb      	ldr	r3, [r7, #28]
 801528e:	2200      	movs	r2, #0
 8015290:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	7ada      	ldrb	r2, [r3, #11]
 8015296:	69fb      	ldr	r3, [r7, #28]
 8015298:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	7a9a      	ldrb	r2, [r3, #10]
 801529e:	69fb      	ldr	r3, [r7, #28]
 80152a0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	681a      	ldr	r2, [r3, #0]
 80152a6:	69fb      	ldr	r3, [r7, #28]
 80152a8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	8adb      	ldrh	r3, [r3, #22]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d021      	beq.n	80152f6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80152b2:	4b23      	ldr	r3, [pc, #140]	@ (8015340 <tcp_listen_with_backlog_and_err+0x148>)
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	68fa      	ldr	r2, [r7, #12]
 80152b8:	429a      	cmp	r2, r3
 80152ba:	d105      	bne.n	80152c8 <tcp_listen_with_backlog_and_err+0xd0>
 80152bc:	4b20      	ldr	r3, [pc, #128]	@ (8015340 <tcp_listen_with_backlog_and_err+0x148>)
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	68db      	ldr	r3, [r3, #12]
 80152c2:	4a1f      	ldr	r2, [pc, #124]	@ (8015340 <tcp_listen_with_backlog_and_err+0x148>)
 80152c4:	6013      	str	r3, [r2, #0]
 80152c6:	e013      	b.n	80152f0 <tcp_listen_with_backlog_and_err+0xf8>
 80152c8:	4b1d      	ldr	r3, [pc, #116]	@ (8015340 <tcp_listen_with_backlog_and_err+0x148>)
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	617b      	str	r3, [r7, #20]
 80152ce:	e00c      	b.n	80152ea <tcp_listen_with_backlog_and_err+0xf2>
 80152d0:	697b      	ldr	r3, [r7, #20]
 80152d2:	68db      	ldr	r3, [r3, #12]
 80152d4:	68fa      	ldr	r2, [r7, #12]
 80152d6:	429a      	cmp	r2, r3
 80152d8:	d104      	bne.n	80152e4 <tcp_listen_with_backlog_and_err+0xec>
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	68da      	ldr	r2, [r3, #12]
 80152de:	697b      	ldr	r3, [r7, #20]
 80152e0:	60da      	str	r2, [r3, #12]
 80152e2:	e005      	b.n	80152f0 <tcp_listen_with_backlog_and_err+0xf8>
 80152e4:	697b      	ldr	r3, [r7, #20]
 80152e6:	68db      	ldr	r3, [r3, #12]
 80152e8:	617b      	str	r3, [r7, #20]
 80152ea:	697b      	ldr	r3, [r7, #20]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d1ef      	bne.n	80152d0 <tcp_listen_with_backlog_and_err+0xd8>
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	2200      	movs	r2, #0
 80152f4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80152f6:	68f8      	ldr	r0, [r7, #12]
 80152f8:	f7ff fbc0 	bl	8014a7c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80152fc:	69fb      	ldr	r3, [r7, #28]
 80152fe:	4a11      	ldr	r2, [pc, #68]	@ (8015344 <tcp_listen_with_backlog_and_err+0x14c>)
 8015300:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8015302:	4b11      	ldr	r3, [pc, #68]	@ (8015348 <tcp_listen_with_backlog_and_err+0x150>)
 8015304:	681a      	ldr	r2, [r3, #0]
 8015306:	69fb      	ldr	r3, [r7, #28]
 8015308:	60da      	str	r2, [r3, #12]
 801530a:	4a0f      	ldr	r2, [pc, #60]	@ (8015348 <tcp_listen_with_backlog_and_err+0x150>)
 801530c:	69fb      	ldr	r3, [r7, #28]
 801530e:	6013      	str	r3, [r2, #0]
 8015310:	f005 fbf8 	bl	801ab04 <tcp_timer_needed>
  res = ERR_OK;
 8015314:	2300      	movs	r3, #0
 8015316:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d002      	beq.n	8015324 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	7efa      	ldrb	r2, [r7, #27]
 8015322:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8015324:	69fb      	ldr	r3, [r7, #28]
}
 8015326:	4618      	mov	r0, r3
 8015328:	3720      	adds	r7, #32
 801532a:	46bd      	mov	sp, r7
 801532c:	bd80      	pop	{r7, pc}
 801532e:	bf00      	nop
 8015330:	08024150 	.word	0x08024150
 8015334:	08024344 	.word	0x08024344
 8015338:	08024194 	.word	0x08024194
 801533c:	08024374 	.word	0x08024374
 8015340:	20004bec 	.word	0x20004bec
 8015344:	08015195 	.word	0x08015195
 8015348:	20004bf0 	.word	0x20004bf0

0801534c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b084      	sub	sp, #16
 8015350:	af00      	add	r7, sp, #0
 8015352:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d106      	bne.n	8015368 <tcp_update_rcv_ann_wnd+0x1c>
 801535a:	4b25      	ldr	r3, [pc, #148]	@ (80153f0 <tcp_update_rcv_ann_wnd+0xa4>)
 801535c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8015360:	4924      	ldr	r1, [pc, #144]	@ (80153f4 <tcp_update_rcv_ann_wnd+0xa8>)
 8015362:	4825      	ldr	r0, [pc, #148]	@ (80153f8 <tcp_update_rcv_ann_wnd+0xac>)
 8015364:	f00c f826 	bl	80213b4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801536c:	687a      	ldr	r2, [r7, #4]
 801536e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8015370:	4413      	add	r3, r2
 8015372:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015378:	687a      	ldr	r2, [r7, #4]
 801537a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 801537c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8015380:	bf28      	it	cs
 8015382:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8015386:	b292      	uxth	r2, r2
 8015388:	4413      	add	r3, r2
 801538a:	68fa      	ldr	r2, [r7, #12]
 801538c:	1ad3      	subs	r3, r2, r3
 801538e:	2b00      	cmp	r3, #0
 8015390:	db08      	blt.n	80153a4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801539e:	68fa      	ldr	r2, [r7, #12]
 80153a0:	1ad3      	subs	r3, r2, r3
 80153a2:	e020      	b.n	80153e6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80153ac:	1ad3      	subs	r3, r2, r3
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	dd03      	ble.n	80153ba <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	2200      	movs	r2, #0
 80153b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80153b8:	e014      	b.n	80153e4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80153c2:	1ad3      	subs	r3, r2, r3
 80153c4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80153c6:	68bb      	ldr	r3, [r7, #8]
 80153c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80153cc:	d306      	bcc.n	80153dc <tcp_update_rcv_ann_wnd+0x90>
 80153ce:	4b08      	ldr	r3, [pc, #32]	@ (80153f0 <tcp_update_rcv_ann_wnd+0xa4>)
 80153d0:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80153d4:	4909      	ldr	r1, [pc, #36]	@ (80153fc <tcp_update_rcv_ann_wnd+0xb0>)
 80153d6:	4808      	ldr	r0, [pc, #32]	@ (80153f8 <tcp_update_rcv_ann_wnd+0xac>)
 80153d8:	f00b ffec 	bl	80213b4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80153dc:	68bb      	ldr	r3, [r7, #8]
 80153de:	b29a      	uxth	r2, r3
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80153e4:	2300      	movs	r3, #0
  }
}
 80153e6:	4618      	mov	r0, r3
 80153e8:	3710      	adds	r7, #16
 80153ea:	46bd      	mov	sp, r7
 80153ec:	bd80      	pop	{r7, pc}
 80153ee:	bf00      	nop
 80153f0:	08024150 	.word	0x08024150
 80153f4:	080243ac 	.word	0x080243ac
 80153f8:	08024194 	.word	0x08024194
 80153fc:	080243d0 	.word	0x080243d0

08015400 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b084      	sub	sp, #16
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
 8015408:	460b      	mov	r3, r1
 801540a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d107      	bne.n	8015422 <tcp_recved+0x22>
 8015412:	4b1f      	ldr	r3, [pc, #124]	@ (8015490 <tcp_recved+0x90>)
 8015414:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8015418:	491e      	ldr	r1, [pc, #120]	@ (8015494 <tcp_recved+0x94>)
 801541a:	481f      	ldr	r0, [pc, #124]	@ (8015498 <tcp_recved+0x98>)
 801541c:	f00b ffca 	bl	80213b4 <iprintf>
 8015420:	e032      	b.n	8015488 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	7d1b      	ldrb	r3, [r3, #20]
 8015426:	2b01      	cmp	r3, #1
 8015428:	d106      	bne.n	8015438 <tcp_recved+0x38>
 801542a:	4b19      	ldr	r3, [pc, #100]	@ (8015490 <tcp_recved+0x90>)
 801542c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8015430:	491a      	ldr	r1, [pc, #104]	@ (801549c <tcp_recved+0x9c>)
 8015432:	4819      	ldr	r0, [pc, #100]	@ (8015498 <tcp_recved+0x98>)
 8015434:	f00b ffbe 	bl	80213b4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801543c:	887b      	ldrh	r3, [r7, #2]
 801543e:	4413      	add	r3, r2
 8015440:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8015442:	89fb      	ldrh	r3, [r7, #14]
 8015444:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015448:	d804      	bhi.n	8015454 <tcp_recved+0x54>
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801544e:	89fa      	ldrh	r2, [r7, #14]
 8015450:	429a      	cmp	r2, r3
 8015452:	d204      	bcs.n	801545e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801545a:	851a      	strh	r2, [r3, #40]	@ 0x28
 801545c:	e002      	b.n	8015464 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	89fa      	ldrh	r2, [r7, #14]
 8015462:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8015464:	6878      	ldr	r0, [r7, #4]
 8015466:	f7ff ff71 	bl	801534c <tcp_update_rcv_ann_wnd>
 801546a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801546c:	68bb      	ldr	r3, [r7, #8]
 801546e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8015472:	d309      	bcc.n	8015488 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	8b5b      	ldrh	r3, [r3, #26]
 8015478:	f043 0302 	orr.w	r3, r3, #2
 801547c:	b29a      	uxth	r2, r3
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015482:	6878      	ldr	r0, [r7, #4]
 8015484:	f004 fbc8 	bl	8019c18 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8015488:	3710      	adds	r7, #16
 801548a:	46bd      	mov	sp, r7
 801548c:	bd80      	pop	{r7, pc}
 801548e:	bf00      	nop
 8015490:	08024150 	.word	0x08024150
 8015494:	080243ec 	.word	0x080243ec
 8015498:	08024194 	.word	0x08024194
 801549c:	08024404 	.word	0x08024404

080154a0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80154a0:	b480      	push	{r7}
 80154a2:	b083      	sub	sp, #12
 80154a4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80154a6:	2300      	movs	r3, #0
 80154a8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80154aa:	4b1e      	ldr	r3, [pc, #120]	@ (8015524 <tcp_new_port+0x84>)
 80154ac:	881b      	ldrh	r3, [r3, #0]
 80154ae:	3301      	adds	r3, #1
 80154b0:	b29a      	uxth	r2, r3
 80154b2:	4b1c      	ldr	r3, [pc, #112]	@ (8015524 <tcp_new_port+0x84>)
 80154b4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80154b6:	4b1b      	ldr	r3, [pc, #108]	@ (8015524 <tcp_new_port+0x84>)
 80154b8:	881b      	ldrh	r3, [r3, #0]
 80154ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80154be:	4293      	cmp	r3, r2
 80154c0:	d103      	bne.n	80154ca <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80154c2:	4b18      	ldr	r3, [pc, #96]	@ (8015524 <tcp_new_port+0x84>)
 80154c4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80154c8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80154ca:	2300      	movs	r3, #0
 80154cc:	71fb      	strb	r3, [r7, #7]
 80154ce:	e01e      	b.n	801550e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80154d0:	79fb      	ldrb	r3, [r7, #7]
 80154d2:	4a15      	ldr	r2, [pc, #84]	@ (8015528 <tcp_new_port+0x88>)
 80154d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	603b      	str	r3, [r7, #0]
 80154dc:	e011      	b.n	8015502 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80154de:	683b      	ldr	r3, [r7, #0]
 80154e0:	8ada      	ldrh	r2, [r3, #22]
 80154e2:	4b10      	ldr	r3, [pc, #64]	@ (8015524 <tcp_new_port+0x84>)
 80154e4:	881b      	ldrh	r3, [r3, #0]
 80154e6:	429a      	cmp	r2, r3
 80154e8:	d108      	bne.n	80154fc <tcp_new_port+0x5c>
        n++;
 80154ea:	88bb      	ldrh	r3, [r7, #4]
 80154ec:	3301      	adds	r3, #1
 80154ee:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80154f0:	88bb      	ldrh	r3, [r7, #4]
 80154f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80154f6:	d3d8      	bcc.n	80154aa <tcp_new_port+0xa>
          return 0;
 80154f8:	2300      	movs	r3, #0
 80154fa:	e00d      	b.n	8015518 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80154fc:	683b      	ldr	r3, [r7, #0]
 80154fe:	68db      	ldr	r3, [r3, #12]
 8015500:	603b      	str	r3, [r7, #0]
 8015502:	683b      	ldr	r3, [r7, #0]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d1ea      	bne.n	80154de <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015508:	79fb      	ldrb	r3, [r7, #7]
 801550a:	3301      	adds	r3, #1
 801550c:	71fb      	strb	r3, [r7, #7]
 801550e:	79fb      	ldrb	r3, [r7, #7]
 8015510:	2b03      	cmp	r3, #3
 8015512:	d9dd      	bls.n	80154d0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8015514:	4b03      	ldr	r3, [pc, #12]	@ (8015524 <tcp_new_port+0x84>)
 8015516:	881b      	ldrh	r3, [r3, #0]
}
 8015518:	4618      	mov	r0, r3
 801551a:	370c      	adds	r7, #12
 801551c:	46bd      	mov	sp, r7
 801551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015522:	4770      	bx	lr
 8015524:	200000b8 	.word	0x200000b8
 8015528:	08027714 	.word	0x08027714

0801552c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801552c:	b5b0      	push	{r4, r5, r7, lr}
 801552e:	b090      	sub	sp, #64	@ 0x40
 8015530:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8015532:	2300      	movs	r3, #0
 8015534:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8015538:	4b95      	ldr	r3, [pc, #596]	@ (8015790 <tcp_slowtmr+0x264>)
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	3301      	adds	r3, #1
 801553e:	4a94      	ldr	r2, [pc, #592]	@ (8015790 <tcp_slowtmr+0x264>)
 8015540:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8015542:	4b94      	ldr	r3, [pc, #592]	@ (8015794 <tcp_slowtmr+0x268>)
 8015544:	781b      	ldrb	r3, [r3, #0]
 8015546:	3301      	adds	r3, #1
 8015548:	b2da      	uxtb	r2, r3
 801554a:	4b92      	ldr	r3, [pc, #584]	@ (8015794 <tcp_slowtmr+0x268>)
 801554c:	701a      	strb	r2, [r3, #0]
 801554e:	e000      	b.n	8015552 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8015550:	bf00      	nop
  prev = NULL;
 8015552:	2300      	movs	r3, #0
 8015554:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8015556:	4b90      	ldr	r3, [pc, #576]	@ (8015798 <tcp_slowtmr+0x26c>)
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801555c:	e29d      	b.n	8015a9a <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801555e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015560:	7d1b      	ldrb	r3, [r3, #20]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d106      	bne.n	8015574 <tcp_slowtmr+0x48>
 8015566:	4b8d      	ldr	r3, [pc, #564]	@ (801579c <tcp_slowtmr+0x270>)
 8015568:	f240 42be 	movw	r2, #1214	@ 0x4be
 801556c:	498c      	ldr	r1, [pc, #560]	@ (80157a0 <tcp_slowtmr+0x274>)
 801556e:	488d      	ldr	r0, [pc, #564]	@ (80157a4 <tcp_slowtmr+0x278>)
 8015570:	f00b ff20 	bl	80213b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015576:	7d1b      	ldrb	r3, [r3, #20]
 8015578:	2b01      	cmp	r3, #1
 801557a:	d106      	bne.n	801558a <tcp_slowtmr+0x5e>
 801557c:	4b87      	ldr	r3, [pc, #540]	@ (801579c <tcp_slowtmr+0x270>)
 801557e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8015582:	4989      	ldr	r1, [pc, #548]	@ (80157a8 <tcp_slowtmr+0x27c>)
 8015584:	4887      	ldr	r0, [pc, #540]	@ (80157a4 <tcp_slowtmr+0x278>)
 8015586:	f00b ff15 	bl	80213b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801558a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801558c:	7d1b      	ldrb	r3, [r3, #20]
 801558e:	2b0a      	cmp	r3, #10
 8015590:	d106      	bne.n	80155a0 <tcp_slowtmr+0x74>
 8015592:	4b82      	ldr	r3, [pc, #520]	@ (801579c <tcp_slowtmr+0x270>)
 8015594:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8015598:	4984      	ldr	r1, [pc, #528]	@ (80157ac <tcp_slowtmr+0x280>)
 801559a:	4882      	ldr	r0, [pc, #520]	@ (80157a4 <tcp_slowtmr+0x278>)
 801559c:	f00b ff0a 	bl	80213b4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80155a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155a2:	7f9a      	ldrb	r2, [r3, #30]
 80155a4:	4b7b      	ldr	r3, [pc, #492]	@ (8015794 <tcp_slowtmr+0x268>)
 80155a6:	781b      	ldrb	r3, [r3, #0]
 80155a8:	429a      	cmp	r2, r3
 80155aa:	d105      	bne.n	80155b8 <tcp_slowtmr+0x8c>
      prev = pcb;
 80155ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80155b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155b2:	68db      	ldr	r3, [r3, #12]
 80155b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80155b6:	e270      	b.n	8015a9a <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 80155b8:	4b76      	ldr	r3, [pc, #472]	@ (8015794 <tcp_slowtmr+0x268>)
 80155ba:	781a      	ldrb	r2, [r3, #0]
 80155bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155be:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80155c0:	2300      	movs	r3, #0
 80155c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80155c6:	2300      	movs	r3, #0
 80155c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80155cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155ce:	7d1b      	ldrb	r3, [r3, #20]
 80155d0:	2b02      	cmp	r3, #2
 80155d2:	d10a      	bne.n	80155ea <tcp_slowtmr+0xbe>
 80155d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80155da:	2b05      	cmp	r3, #5
 80155dc:	d905      	bls.n	80155ea <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80155de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80155e2:	3301      	adds	r3, #1
 80155e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80155e8:	e11e      	b.n	8015828 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80155ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80155f0:	2b0b      	cmp	r3, #11
 80155f2:	d905      	bls.n	8015600 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80155f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80155f8:	3301      	adds	r3, #1
 80155fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80155fe:	e113      	b.n	8015828 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8015600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015602:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015606:	2b00      	cmp	r3, #0
 8015608:	d075      	beq.n	80156f6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801560a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801560c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801560e:	2b00      	cmp	r3, #0
 8015610:	d006      	beq.n	8015620 <tcp_slowtmr+0xf4>
 8015612:	4b62      	ldr	r3, [pc, #392]	@ (801579c <tcp_slowtmr+0x270>)
 8015614:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8015618:	4965      	ldr	r1, [pc, #404]	@ (80157b0 <tcp_slowtmr+0x284>)
 801561a:	4862      	ldr	r0, [pc, #392]	@ (80157a4 <tcp_slowtmr+0x278>)
 801561c:	f00b feca 	bl	80213b4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8015620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015624:	2b00      	cmp	r3, #0
 8015626:	d106      	bne.n	8015636 <tcp_slowtmr+0x10a>
 8015628:	4b5c      	ldr	r3, [pc, #368]	@ (801579c <tcp_slowtmr+0x270>)
 801562a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 801562e:	4961      	ldr	r1, [pc, #388]	@ (80157b4 <tcp_slowtmr+0x288>)
 8015630:	485c      	ldr	r0, [pc, #368]	@ (80157a4 <tcp_slowtmr+0x278>)
 8015632:	f00b febf 	bl	80213b4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8015636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015638:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801563c:	2b0b      	cmp	r3, #11
 801563e:	d905      	bls.n	801564c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8015640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015644:	3301      	adds	r3, #1
 8015646:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801564a:	e0ed      	b.n	8015828 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801564c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801564e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015652:	3b01      	subs	r3, #1
 8015654:	4a58      	ldr	r2, [pc, #352]	@ (80157b8 <tcp_slowtmr+0x28c>)
 8015656:	5cd3      	ldrb	r3, [r2, r3]
 8015658:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801565a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801565c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015660:	7c7a      	ldrb	r2, [r7, #17]
 8015662:	429a      	cmp	r2, r3
 8015664:	d907      	bls.n	8015676 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8015666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015668:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801566c:	3301      	adds	r3, #1
 801566e:	b2da      	uxtb	r2, r3
 8015670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015672:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8015676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015678:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801567c:	7c7a      	ldrb	r2, [r7, #17]
 801567e:	429a      	cmp	r2, r3
 8015680:	f200 80d2 	bhi.w	8015828 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8015684:	2301      	movs	r3, #1
 8015686:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8015688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801568a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801568e:	2b00      	cmp	r3, #0
 8015690:	d108      	bne.n	80156a4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8015692:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015694:	f005 f968 	bl	801a968 <tcp_zero_window_probe>
 8015698:	4603      	mov	r3, r0
 801569a:	2b00      	cmp	r3, #0
 801569c:	d014      	beq.n	80156c8 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801569e:	2300      	movs	r3, #0
 80156a0:	623b      	str	r3, [r7, #32]
 80156a2:	e011      	b.n	80156c8 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80156a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80156aa:	4619      	mov	r1, r3
 80156ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80156ae:	f004 f82d 	bl	801970c <tcp_split_unsent_seg>
 80156b2:	4603      	mov	r3, r0
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d107      	bne.n	80156c8 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80156b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80156ba:	f004 faad 	bl	8019c18 <tcp_output>
 80156be:	4603      	mov	r3, r0
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d101      	bne.n	80156c8 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 80156c4:	2300      	movs	r3, #0
 80156c6:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80156c8:	6a3b      	ldr	r3, [r7, #32]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	f000 80ac 	beq.w	8015828 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80156d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156d2:	2200      	movs	r2, #0
 80156d4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80156d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156da:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80156de:	2b06      	cmp	r3, #6
 80156e0:	f200 80a2 	bhi.w	8015828 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80156e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156e6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80156ea:	3301      	adds	r3, #1
 80156ec:	b2da      	uxtb	r2, r3
 80156ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156f0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80156f4:	e098      	b.n	8015828 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80156f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	db0f      	blt.n	8015720 <tcp_slowtmr+0x1f4>
 8015700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015702:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015706:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801570a:	4293      	cmp	r3, r2
 801570c:	d008      	beq.n	8015720 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 801570e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015710:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015714:	b29b      	uxth	r3, r3
 8015716:	3301      	adds	r3, #1
 8015718:	b29b      	uxth	r3, r3
 801571a:	b21a      	sxth	r2, r3
 801571c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801571e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8015720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015722:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8015726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015728:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801572c:	429a      	cmp	r2, r3
 801572e:	db7b      	blt.n	8015828 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8015730:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015732:	f004 fd65 	bl	801a200 <tcp_rexmit_rto_prepare>
 8015736:	4603      	mov	r3, r0
 8015738:	2b00      	cmp	r3, #0
 801573a:	d007      	beq.n	801574c <tcp_slowtmr+0x220>
 801573c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801573e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015740:	2b00      	cmp	r3, #0
 8015742:	d171      	bne.n	8015828 <tcp_slowtmr+0x2fc>
 8015744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015748:	2b00      	cmp	r3, #0
 801574a:	d06d      	beq.n	8015828 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 801574c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801574e:	7d1b      	ldrb	r3, [r3, #20]
 8015750:	2b02      	cmp	r3, #2
 8015752:	d03a      	beq.n	80157ca <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8015754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015756:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801575a:	2b0c      	cmp	r3, #12
 801575c:	bf28      	it	cs
 801575e:	230c      	movcs	r3, #12
 8015760:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8015762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015764:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015768:	10db      	asrs	r3, r3, #3
 801576a:	b21b      	sxth	r3, r3
 801576c:	461a      	mov	r2, r3
 801576e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015770:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015774:	4413      	add	r3, r2
 8015776:	7efa      	ldrb	r2, [r7, #27]
 8015778:	4910      	ldr	r1, [pc, #64]	@ (80157bc <tcp_slowtmr+0x290>)
 801577a:	5c8a      	ldrb	r2, [r1, r2]
 801577c:	4093      	lsls	r3, r2
 801577e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8015780:	697b      	ldr	r3, [r7, #20]
 8015782:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8015786:	4293      	cmp	r3, r2
 8015788:	dc1a      	bgt.n	80157c0 <tcp_slowtmr+0x294>
 801578a:	697b      	ldr	r3, [r7, #20]
 801578c:	b21a      	sxth	r2, r3
 801578e:	e019      	b.n	80157c4 <tcp_slowtmr+0x298>
 8015790:	20004be8 	.word	0x20004be8
 8015794:	20004bfe 	.word	0x20004bfe
 8015798:	20004bf4 	.word	0x20004bf4
 801579c:	08024150 	.word	0x08024150
 80157a0:	08024494 	.word	0x08024494
 80157a4:	08024194 	.word	0x08024194
 80157a8:	080244c0 	.word	0x080244c0
 80157ac:	080244ec 	.word	0x080244ec
 80157b0:	0802451c 	.word	0x0802451c
 80157b4:	08024550 	.word	0x08024550
 80157b8:	0802770c 	.word	0x0802770c
 80157bc:	080276fc 	.word	0x080276fc
 80157c0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80157c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80157ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157cc:	2200      	movs	r2, #0
 80157ce:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80157d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80157d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80157dc:	4293      	cmp	r3, r2
 80157de:	bf28      	it	cs
 80157e0:	4613      	movcs	r3, r2
 80157e2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80157e4:	8a7b      	ldrh	r3, [r7, #18]
 80157e6:	085b      	lsrs	r3, r3, #1
 80157e8:	b29a      	uxth	r2, r3
 80157ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157ec:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80157f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80157f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80157fa:	005b      	lsls	r3, r3, #1
 80157fc:	b29b      	uxth	r3, r3
 80157fe:	429a      	cmp	r2, r3
 8015800:	d206      	bcs.n	8015810 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8015802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015804:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015806:	005b      	lsls	r3, r3, #1
 8015808:	b29a      	uxth	r2, r3
 801580a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801580c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8015810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015812:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8015814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015816:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 801581a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801581c:	2200      	movs	r2, #0
 801581e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8015822:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015824:	f004 fd5c 	bl	801a2e0 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8015828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801582a:	7d1b      	ldrb	r3, [r3, #20]
 801582c:	2b06      	cmp	r3, #6
 801582e:	d111      	bne.n	8015854 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8015830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015832:	8b5b      	ldrh	r3, [r3, #26]
 8015834:	f003 0310 	and.w	r3, r3, #16
 8015838:	2b00      	cmp	r3, #0
 801583a:	d00b      	beq.n	8015854 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801583c:	4b9c      	ldr	r3, [pc, #624]	@ (8015ab0 <tcp_slowtmr+0x584>)
 801583e:	681a      	ldr	r2, [r3, #0]
 8015840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015842:	6a1b      	ldr	r3, [r3, #32]
 8015844:	1ad3      	subs	r3, r2, r3
 8015846:	2b28      	cmp	r3, #40	@ 0x28
 8015848:	d904      	bls.n	8015854 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801584a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801584e:	3301      	adds	r3, #1
 8015850:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015856:	7a5b      	ldrb	r3, [r3, #9]
 8015858:	f003 0308 	and.w	r3, r3, #8
 801585c:	2b00      	cmp	r3, #0
 801585e:	d04a      	beq.n	80158f6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8015860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015862:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015864:	2b04      	cmp	r3, #4
 8015866:	d003      	beq.n	8015870 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8015868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801586a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801586c:	2b07      	cmp	r3, #7
 801586e:	d142      	bne.n	80158f6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015870:	4b8f      	ldr	r3, [pc, #572]	@ (8015ab0 <tcp_slowtmr+0x584>)
 8015872:	681a      	ldr	r2, [r3, #0]
 8015874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015876:	6a1b      	ldr	r3, [r3, #32]
 8015878:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801587a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801587c:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8015880:	4b8c      	ldr	r3, [pc, #560]	@ (8015ab4 <tcp_slowtmr+0x588>)
 8015882:	440b      	add	r3, r1
 8015884:	498c      	ldr	r1, [pc, #560]	@ (8015ab8 <tcp_slowtmr+0x58c>)
 8015886:	fba1 1303 	umull	r1, r3, r1, r3
 801588a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801588c:	429a      	cmp	r2, r3
 801588e:	d90a      	bls.n	80158a6 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8015890:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015894:	3301      	adds	r3, #1
 8015896:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801589a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801589e:	3301      	adds	r3, #1
 80158a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80158a4:	e027      	b.n	80158f6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80158a6:	4b82      	ldr	r3, [pc, #520]	@ (8015ab0 <tcp_slowtmr+0x584>)
 80158a8:	681a      	ldr	r2, [r3, #0]
 80158aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158ac:	6a1b      	ldr	r3, [r3, #32]
 80158ae:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80158b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158b2:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 80158b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158b8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80158bc:	4618      	mov	r0, r3
 80158be:	4b7f      	ldr	r3, [pc, #508]	@ (8015abc <tcp_slowtmr+0x590>)
 80158c0:	fb00 f303 	mul.w	r3, r0, r3
 80158c4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80158c6:	497c      	ldr	r1, [pc, #496]	@ (8015ab8 <tcp_slowtmr+0x58c>)
 80158c8:	fba1 1303 	umull	r1, r3, r1, r3
 80158cc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80158ce:	429a      	cmp	r2, r3
 80158d0:	d911      	bls.n	80158f6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80158d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80158d4:	f005 f808 	bl	801a8e8 <tcp_keepalive>
 80158d8:	4603      	mov	r3, r0
 80158da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80158de:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d107      	bne.n	80158f6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80158e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158e8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80158ec:	3301      	adds	r3, #1
 80158ee:	b2da      	uxtb	r2, r3
 80158f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158f2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80158f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d011      	beq.n	8015922 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80158fe:	4b6c      	ldr	r3, [pc, #432]	@ (8015ab0 <tcp_slowtmr+0x584>)
 8015900:	681a      	ldr	r2, [r3, #0]
 8015902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015904:	6a1b      	ldr	r3, [r3, #32]
 8015906:	1ad2      	subs	r2, r2, r3
 8015908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801590a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801590e:	4619      	mov	r1, r3
 8015910:	460b      	mov	r3, r1
 8015912:	005b      	lsls	r3, r3, #1
 8015914:	440b      	add	r3, r1
 8015916:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8015918:	429a      	cmp	r2, r3
 801591a:	d302      	bcc.n	8015922 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 801591c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801591e:	f000 fec9 	bl	80166b4 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8015922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015924:	7d1b      	ldrb	r3, [r3, #20]
 8015926:	2b03      	cmp	r3, #3
 8015928:	d10b      	bne.n	8015942 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801592a:	4b61      	ldr	r3, [pc, #388]	@ (8015ab0 <tcp_slowtmr+0x584>)
 801592c:	681a      	ldr	r2, [r3, #0]
 801592e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015930:	6a1b      	ldr	r3, [r3, #32]
 8015932:	1ad3      	subs	r3, r2, r3
 8015934:	2b28      	cmp	r3, #40	@ 0x28
 8015936:	d904      	bls.n	8015942 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8015938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801593c:	3301      	adds	r3, #1
 801593e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8015942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015944:	7d1b      	ldrb	r3, [r3, #20]
 8015946:	2b09      	cmp	r3, #9
 8015948:	d10b      	bne.n	8015962 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801594a:	4b59      	ldr	r3, [pc, #356]	@ (8015ab0 <tcp_slowtmr+0x584>)
 801594c:	681a      	ldr	r2, [r3, #0]
 801594e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015950:	6a1b      	ldr	r3, [r3, #32]
 8015952:	1ad3      	subs	r3, r2, r3
 8015954:	2bf0      	cmp	r3, #240	@ 0xf0
 8015956:	d904      	bls.n	8015962 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8015958:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801595c:	3301      	adds	r3, #1
 801595e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8015962:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015966:	2b00      	cmp	r3, #0
 8015968:	d060      	beq.n	8015a2c <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 801596a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801596c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015970:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8015972:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015974:	f000 fcea 	bl	801634c <tcp_pcb_purge>
      if (prev != NULL) {
 8015978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801597a:	2b00      	cmp	r3, #0
 801597c:	d010      	beq.n	80159a0 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801597e:	4b50      	ldr	r3, [pc, #320]	@ (8015ac0 <tcp_slowtmr+0x594>)
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015984:	429a      	cmp	r2, r3
 8015986:	d106      	bne.n	8015996 <tcp_slowtmr+0x46a>
 8015988:	4b4e      	ldr	r3, [pc, #312]	@ (8015ac4 <tcp_slowtmr+0x598>)
 801598a:	f240 526d 	movw	r2, #1389	@ 0x56d
 801598e:	494e      	ldr	r1, [pc, #312]	@ (8015ac8 <tcp_slowtmr+0x59c>)
 8015990:	484e      	ldr	r0, [pc, #312]	@ (8015acc <tcp_slowtmr+0x5a0>)
 8015992:	f00b fd0f 	bl	80213b4 <iprintf>
        prev->next = pcb->next;
 8015996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015998:	68da      	ldr	r2, [r3, #12]
 801599a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801599c:	60da      	str	r2, [r3, #12]
 801599e:	e00f      	b.n	80159c0 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80159a0:	4b47      	ldr	r3, [pc, #284]	@ (8015ac0 <tcp_slowtmr+0x594>)
 80159a2:	681b      	ldr	r3, [r3, #0]
 80159a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80159a6:	429a      	cmp	r2, r3
 80159a8:	d006      	beq.n	80159b8 <tcp_slowtmr+0x48c>
 80159aa:	4b46      	ldr	r3, [pc, #280]	@ (8015ac4 <tcp_slowtmr+0x598>)
 80159ac:	f240 5271 	movw	r2, #1393	@ 0x571
 80159b0:	4947      	ldr	r1, [pc, #284]	@ (8015ad0 <tcp_slowtmr+0x5a4>)
 80159b2:	4846      	ldr	r0, [pc, #280]	@ (8015acc <tcp_slowtmr+0x5a0>)
 80159b4:	f00b fcfe 	bl	80213b4 <iprintf>
        tcp_active_pcbs = pcb->next;
 80159b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159ba:	68db      	ldr	r3, [r3, #12]
 80159bc:	4a40      	ldr	r2, [pc, #256]	@ (8015ac0 <tcp_slowtmr+0x594>)
 80159be:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80159c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d013      	beq.n	80159f0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80159c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159ca:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80159cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159ce:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80159d0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80159d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159d4:	3304      	adds	r3, #4
 80159d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80159d8:	8ad2      	ldrh	r2, [r2, #22]
 80159da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80159dc:	8b09      	ldrh	r1, [r1, #24]
 80159de:	9102      	str	r1, [sp, #8]
 80159e0:	9201      	str	r2, [sp, #4]
 80159e2:	9300      	str	r3, [sp, #0]
 80159e4:	462b      	mov	r3, r5
 80159e6:	4622      	mov	r2, r4
 80159e8:	4601      	mov	r1, r0
 80159ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80159ec:	f004 fec8 	bl	801a780 <tcp_rst>
      err_arg = pcb->callback_arg;
 80159f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159f2:	691b      	ldr	r3, [r3, #16]
 80159f4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80159f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159f8:	7d1b      	ldrb	r3, [r3, #20]
 80159fa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80159fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159fe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8015a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a02:	68db      	ldr	r3, [r3, #12]
 8015a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8015a06:	6838      	ldr	r0, [r7, #0]
 8015a08:	f7ff f838 	bl	8014a7c <tcp_free>
      tcp_active_pcbs_changed = 0;
 8015a0c:	4b31      	ldr	r3, [pc, #196]	@ (8015ad4 <tcp_slowtmr+0x5a8>)
 8015a0e:	2200      	movs	r2, #0
 8015a10:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d004      	beq.n	8015a22 <tcp_slowtmr+0x4f6>
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	f06f 010c 	mvn.w	r1, #12
 8015a1e:	68b8      	ldr	r0, [r7, #8]
 8015a20:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8015a22:	4b2c      	ldr	r3, [pc, #176]	@ (8015ad4 <tcp_slowtmr+0x5a8>)
 8015a24:	781b      	ldrb	r3, [r3, #0]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d037      	beq.n	8015a9a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8015a2a:	e592      	b.n	8015552 <tcp_slowtmr+0x26>
      prev = pcb;
 8015a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a32:	68db      	ldr	r3, [r3, #12]
 8015a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8015a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a38:	7f1b      	ldrb	r3, [r3, #28]
 8015a3a:	3301      	adds	r3, #1
 8015a3c:	b2da      	uxtb	r2, r3
 8015a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a40:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8015a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a44:	7f1a      	ldrb	r2, [r3, #28]
 8015a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a48:	7f5b      	ldrb	r3, [r3, #29]
 8015a4a:	429a      	cmp	r2, r3
 8015a4c:	d325      	bcc.n	8015a9a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8015a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a50:	2200      	movs	r2, #0
 8015a52:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8015a54:	4b1f      	ldr	r3, [pc, #124]	@ (8015ad4 <tcp_slowtmr+0x5a8>)
 8015a56:	2200      	movs	r2, #0
 8015a58:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8015a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d00b      	beq.n	8015a7c <tcp_slowtmr+0x550>
 8015a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015a6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015a6c:	6912      	ldr	r2, [r2, #16]
 8015a6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015a70:	4610      	mov	r0, r2
 8015a72:	4798      	blx	r3
 8015a74:	4603      	mov	r3, r0
 8015a76:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8015a7a:	e002      	b.n	8015a82 <tcp_slowtmr+0x556>
 8015a7c:	2300      	movs	r3, #0
 8015a7e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8015a82:	4b14      	ldr	r3, [pc, #80]	@ (8015ad4 <tcp_slowtmr+0x5a8>)
 8015a84:	781b      	ldrb	r3, [r3, #0]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	f47f ad62 	bne.w	8015550 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8015a8c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d102      	bne.n	8015a9a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8015a94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015a96:	f004 f8bf 	bl	8019c18 <tcp_output>
  while (pcb != NULL) {
 8015a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	f47f ad5e 	bne.w	801555e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8015aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8015ad8 <tcp_slowtmr+0x5ac>)
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015aac:	e069      	b.n	8015b82 <tcp_slowtmr+0x656>
 8015aae:	bf00      	nop
 8015ab0:	20004be8 	.word	0x20004be8
 8015ab4:	000a4cb8 	.word	0x000a4cb8
 8015ab8:	10624dd3 	.word	0x10624dd3
 8015abc:	000124f8 	.word	0x000124f8
 8015ac0:	20004bf4 	.word	0x20004bf4
 8015ac4:	08024150 	.word	0x08024150
 8015ac8:	08024588 	.word	0x08024588
 8015acc:	08024194 	.word	0x08024194
 8015ad0:	080245b4 	.word	0x080245b4
 8015ad4:	20004bfc 	.word	0x20004bfc
 8015ad8:	20004bf8 	.word	0x20004bf8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ade:	7d1b      	ldrb	r3, [r3, #20]
 8015ae0:	2b0a      	cmp	r3, #10
 8015ae2:	d006      	beq.n	8015af2 <tcp_slowtmr+0x5c6>
 8015ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8015b94 <tcp_slowtmr+0x668>)
 8015ae6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8015aea:	492b      	ldr	r1, [pc, #172]	@ (8015b98 <tcp_slowtmr+0x66c>)
 8015aec:	482b      	ldr	r0, [pc, #172]	@ (8015b9c <tcp_slowtmr+0x670>)
 8015aee:	f00b fc61 	bl	80213b4 <iprintf>
    pcb_remove = 0;
 8015af2:	2300      	movs	r3, #0
 8015af4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015af8:	4b29      	ldr	r3, [pc, #164]	@ (8015ba0 <tcp_slowtmr+0x674>)
 8015afa:	681a      	ldr	r2, [r3, #0]
 8015afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015afe:	6a1b      	ldr	r3, [r3, #32]
 8015b00:	1ad3      	subs	r3, r2, r3
 8015b02:	2bf0      	cmp	r3, #240	@ 0xf0
 8015b04:	d904      	bls.n	8015b10 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8015b06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015b0a:	3301      	adds	r3, #1
 8015b0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015b10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d02f      	beq.n	8015b78 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8015b18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015b1a:	f000 fc17 	bl	801634c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8015b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d010      	beq.n	8015b46 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015b24:	4b1f      	ldr	r3, [pc, #124]	@ (8015ba4 <tcp_slowtmr+0x678>)
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015b2a:	429a      	cmp	r2, r3
 8015b2c:	d106      	bne.n	8015b3c <tcp_slowtmr+0x610>
 8015b2e:	4b19      	ldr	r3, [pc, #100]	@ (8015b94 <tcp_slowtmr+0x668>)
 8015b30:	f240 52af 	movw	r2, #1455	@ 0x5af
 8015b34:	491c      	ldr	r1, [pc, #112]	@ (8015ba8 <tcp_slowtmr+0x67c>)
 8015b36:	4819      	ldr	r0, [pc, #100]	@ (8015b9c <tcp_slowtmr+0x670>)
 8015b38:	f00b fc3c 	bl	80213b4 <iprintf>
        prev->next = pcb->next;
 8015b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b3e:	68da      	ldr	r2, [r3, #12]
 8015b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b42:	60da      	str	r2, [r3, #12]
 8015b44:	e00f      	b.n	8015b66 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8015b46:	4b17      	ldr	r3, [pc, #92]	@ (8015ba4 <tcp_slowtmr+0x678>)
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015b4c:	429a      	cmp	r2, r3
 8015b4e:	d006      	beq.n	8015b5e <tcp_slowtmr+0x632>
 8015b50:	4b10      	ldr	r3, [pc, #64]	@ (8015b94 <tcp_slowtmr+0x668>)
 8015b52:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8015b56:	4915      	ldr	r1, [pc, #84]	@ (8015bac <tcp_slowtmr+0x680>)
 8015b58:	4810      	ldr	r0, [pc, #64]	@ (8015b9c <tcp_slowtmr+0x670>)
 8015b5a:	f00b fc2b 	bl	80213b4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8015b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b60:	68db      	ldr	r3, [r3, #12]
 8015b62:	4a10      	ldr	r2, [pc, #64]	@ (8015ba4 <tcp_slowtmr+0x678>)
 8015b64:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8015b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b68:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8015b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b6c:	68db      	ldr	r3, [r3, #12]
 8015b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8015b70:	69f8      	ldr	r0, [r7, #28]
 8015b72:	f7fe ff83 	bl	8014a7c <tcp_free>
 8015b76:	e004      	b.n	8015b82 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8015b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b7e:	68db      	ldr	r3, [r3, #12]
 8015b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d1a9      	bne.n	8015adc <tcp_slowtmr+0x5b0>
    }
  }
}
 8015b88:	bf00      	nop
 8015b8a:	bf00      	nop
 8015b8c:	3730      	adds	r7, #48	@ 0x30
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	bdb0      	pop	{r4, r5, r7, pc}
 8015b92:	bf00      	nop
 8015b94:	08024150 	.word	0x08024150
 8015b98:	080245e0 	.word	0x080245e0
 8015b9c:	08024194 	.word	0x08024194
 8015ba0:	20004be8 	.word	0x20004be8
 8015ba4:	20004bf8 	.word	0x20004bf8
 8015ba8:	08024610 	.word	0x08024610
 8015bac:	08024638 	.word	0x08024638

08015bb0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b082      	sub	sp, #8
 8015bb4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8015bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8015c6c <tcp_fasttmr+0xbc>)
 8015bb8:	781b      	ldrb	r3, [r3, #0]
 8015bba:	3301      	adds	r3, #1
 8015bbc:	b2da      	uxtb	r2, r3
 8015bbe:	4b2b      	ldr	r3, [pc, #172]	@ (8015c6c <tcp_fasttmr+0xbc>)
 8015bc0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8015bc2:	4b2b      	ldr	r3, [pc, #172]	@ (8015c70 <tcp_fasttmr+0xc0>)
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015bc8:	e048      	b.n	8015c5c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	7f9a      	ldrb	r2, [r3, #30]
 8015bce:	4b27      	ldr	r3, [pc, #156]	@ (8015c6c <tcp_fasttmr+0xbc>)
 8015bd0:	781b      	ldrb	r3, [r3, #0]
 8015bd2:	429a      	cmp	r2, r3
 8015bd4:	d03f      	beq.n	8015c56 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8015bd6:	4b25      	ldr	r3, [pc, #148]	@ (8015c6c <tcp_fasttmr+0xbc>)
 8015bd8:	781a      	ldrb	r2, [r3, #0]
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	8b5b      	ldrh	r3, [r3, #26]
 8015be2:	f003 0301 	and.w	r3, r3, #1
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d010      	beq.n	8015c0c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	8b5b      	ldrh	r3, [r3, #26]
 8015bee:	f043 0302 	orr.w	r3, r3, #2
 8015bf2:	b29a      	uxth	r2, r3
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8015bf8:	6878      	ldr	r0, [r7, #4]
 8015bfa:	f004 f80d 	bl	8019c18 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	8b5b      	ldrh	r3, [r3, #26]
 8015c02:	f023 0303 	bic.w	r3, r3, #3
 8015c06:	b29a      	uxth	r2, r3
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	8b5b      	ldrh	r3, [r3, #26]
 8015c10:	f003 0308 	and.w	r3, r3, #8
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d009      	beq.n	8015c2c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	8b5b      	ldrh	r3, [r3, #26]
 8015c1c:	f023 0308 	bic.w	r3, r3, #8
 8015c20:	b29a      	uxth	r2, r3
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8015c26:	6878      	ldr	r0, [r7, #4]
 8015c28:	f7ff f8bc 	bl	8014da4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	68db      	ldr	r3, [r3, #12]
 8015c30:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d00a      	beq.n	8015c50 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8015c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8015c74 <tcp_fasttmr+0xc4>)
 8015c3c:	2200      	movs	r2, #0
 8015c3e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8015c40:	6878      	ldr	r0, [r7, #4]
 8015c42:	f000 f819 	bl	8015c78 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8015c46:	4b0b      	ldr	r3, [pc, #44]	@ (8015c74 <tcp_fasttmr+0xc4>)
 8015c48:	781b      	ldrb	r3, [r3, #0]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d000      	beq.n	8015c50 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8015c4e:	e7b8      	b.n	8015bc2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8015c50:	683b      	ldr	r3, [r7, #0]
 8015c52:	607b      	str	r3, [r7, #4]
 8015c54:	e002      	b.n	8015c5c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	68db      	ldr	r3, [r3, #12]
 8015c5a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d1b3      	bne.n	8015bca <tcp_fasttmr+0x1a>
    }
  }
}
 8015c62:	bf00      	nop
 8015c64:	bf00      	nop
 8015c66:	3708      	adds	r7, #8
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	bd80      	pop	{r7, pc}
 8015c6c:	20004bfe 	.word	0x20004bfe
 8015c70:	20004bf4 	.word	0x20004bf4
 8015c74:	20004bfc 	.word	0x20004bfc

08015c78 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8015c78:	b590      	push	{r4, r7, lr}
 8015c7a:	b085      	sub	sp, #20
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d109      	bne.n	8015c9a <tcp_process_refused_data+0x22>
 8015c86:	4b37      	ldr	r3, [pc, #220]	@ (8015d64 <tcp_process_refused_data+0xec>)
 8015c88:	f240 6209 	movw	r2, #1545	@ 0x609
 8015c8c:	4936      	ldr	r1, [pc, #216]	@ (8015d68 <tcp_process_refused_data+0xf0>)
 8015c8e:	4837      	ldr	r0, [pc, #220]	@ (8015d6c <tcp_process_refused_data+0xf4>)
 8015c90:	f00b fb90 	bl	80213b4 <iprintf>
 8015c94:	f06f 030f 	mvn.w	r3, #15
 8015c98:	e060      	b.n	8015d5c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015c9e:	7b5b      	ldrb	r3, [r3, #13]
 8015ca0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015ca6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	2200      	movs	r2, #0
 8015cac:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d00b      	beq.n	8015cd0 <tcp_process_refused_data+0x58>
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	6918      	ldr	r0, [r3, #16]
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	68ba      	ldr	r2, [r7, #8]
 8015cc6:	6879      	ldr	r1, [r7, #4]
 8015cc8:	47a0      	blx	r4
 8015cca:	4603      	mov	r3, r0
 8015ccc:	73fb      	strb	r3, [r7, #15]
 8015cce:	e007      	b.n	8015ce0 <tcp_process_refused_data+0x68>
 8015cd0:	2300      	movs	r3, #0
 8015cd2:	68ba      	ldr	r2, [r7, #8]
 8015cd4:	6879      	ldr	r1, [r7, #4]
 8015cd6:	2000      	movs	r0, #0
 8015cd8:	f000 f8c2 	bl	8015e60 <tcp_recv_null>
 8015cdc:	4603      	mov	r3, r0
 8015cde:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8015ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d12a      	bne.n	8015d3e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8015ce8:	7bbb      	ldrb	r3, [r7, #14]
 8015cea:	f003 0320 	and.w	r3, r3, #32
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d033      	beq.n	8015d5a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015cf6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015cfa:	d005      	beq.n	8015d08 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015d00:	3301      	adds	r3, #1
 8015d02:	b29a      	uxth	r2, r3
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d00b      	beq.n	8015d2a <tcp_process_refused_data+0xb2>
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	6918      	ldr	r0, [r3, #16]
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	2200      	movs	r2, #0
 8015d20:	6879      	ldr	r1, [r7, #4]
 8015d22:	47a0      	blx	r4
 8015d24:	4603      	mov	r3, r0
 8015d26:	73fb      	strb	r3, [r7, #15]
 8015d28:	e001      	b.n	8015d2e <tcp_process_refused_data+0xb6>
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8015d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d32:	f113 0f0d 	cmn.w	r3, #13
 8015d36:	d110      	bne.n	8015d5a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8015d38:	f06f 030c 	mvn.w	r3, #12
 8015d3c:	e00e      	b.n	8015d5c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8015d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d42:	f113 0f0d 	cmn.w	r3, #13
 8015d46:	d102      	bne.n	8015d4e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8015d48:	f06f 030c 	mvn.w	r3, #12
 8015d4c:	e006      	b.n	8015d5c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	68ba      	ldr	r2, [r7, #8]
 8015d52:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8015d54:	f06f 0304 	mvn.w	r3, #4
 8015d58:	e000      	b.n	8015d5c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8015d5a:	2300      	movs	r3, #0
}
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	3714      	adds	r7, #20
 8015d60:	46bd      	mov	sp, r7
 8015d62:	bd90      	pop	{r4, r7, pc}
 8015d64:	08024150 	.word	0x08024150
 8015d68:	08024660 	.word	0x08024660
 8015d6c:	08024194 	.word	0x08024194

08015d70 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8015d70:	b580      	push	{r7, lr}
 8015d72:	b084      	sub	sp, #16
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8015d78:	e007      	b.n	8015d8a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015d80:	6878      	ldr	r0, [r7, #4]
 8015d82:	f000 f80a 	bl	8015d9a <tcp_seg_free>
    seg = next;
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d1f4      	bne.n	8015d7a <tcp_segs_free+0xa>
  }
}
 8015d90:	bf00      	nop
 8015d92:	bf00      	nop
 8015d94:	3710      	adds	r7, #16
 8015d96:	46bd      	mov	sp, r7
 8015d98:	bd80      	pop	{r7, pc}

08015d9a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8015d9a:	b580      	push	{r7, lr}
 8015d9c:	b082      	sub	sp, #8
 8015d9e:	af00      	add	r7, sp, #0
 8015da0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d00c      	beq.n	8015dc2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	685b      	ldr	r3, [r3, #4]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d004      	beq.n	8015dba <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	685b      	ldr	r3, [r3, #4]
 8015db4:	4618      	mov	r0, r3
 8015db6:	f7fe f9df 	bl	8014178 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8015dba:	6879      	ldr	r1, [r7, #4]
 8015dbc:	2003      	movs	r0, #3
 8015dbe:	f7fd faef 	bl	80133a0 <memp_free>
  }
}
 8015dc2:	bf00      	nop
 8015dc4:	3708      	adds	r7, #8
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	bd80      	pop	{r7, pc}
	...

08015dcc <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8015dcc:	b580      	push	{r7, lr}
 8015dce:	b082      	sub	sp, #8
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
 8015dd4:	460b      	mov	r3, r1
 8015dd6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d107      	bne.n	8015dee <tcp_setprio+0x22>
 8015dde:	4b07      	ldr	r3, [pc, #28]	@ (8015dfc <tcp_setprio+0x30>)
 8015de0:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 8015de4:	4906      	ldr	r1, [pc, #24]	@ (8015e00 <tcp_setprio+0x34>)
 8015de6:	4807      	ldr	r0, [pc, #28]	@ (8015e04 <tcp_setprio+0x38>)
 8015de8:	f00b fae4 	bl	80213b4 <iprintf>
 8015dec:	e002      	b.n	8015df4 <tcp_setprio+0x28>

  pcb->prio = prio;
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	78fa      	ldrb	r2, [r7, #3]
 8015df2:	755a      	strb	r2, [r3, #21]
}
 8015df4:	3708      	adds	r7, #8
 8015df6:	46bd      	mov	sp, r7
 8015df8:	bd80      	pop	{r7, pc}
 8015dfa:	bf00      	nop
 8015dfc:	08024150 	.word	0x08024150
 8015e00:	08024688 	.word	0x08024688
 8015e04:	08024194 	.word	0x08024194

08015e08 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b084      	sub	sp, #16
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d106      	bne.n	8015e24 <tcp_seg_copy+0x1c>
 8015e16:	4b0f      	ldr	r3, [pc, #60]	@ (8015e54 <tcp_seg_copy+0x4c>)
 8015e18:	f240 6282 	movw	r2, #1666	@ 0x682
 8015e1c:	490e      	ldr	r1, [pc, #56]	@ (8015e58 <tcp_seg_copy+0x50>)
 8015e1e:	480f      	ldr	r0, [pc, #60]	@ (8015e5c <tcp_seg_copy+0x54>)
 8015e20:	f00b fac8 	bl	80213b4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015e24:	2003      	movs	r0, #3
 8015e26:	f7fd fa4b 	bl	80132c0 <memp_malloc>
 8015e2a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d101      	bne.n	8015e36 <tcp_seg_copy+0x2e>
    return NULL;
 8015e32:	2300      	movs	r3, #0
 8015e34:	e00a      	b.n	8015e4c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015e36:	2210      	movs	r2, #16
 8015e38:	6879      	ldr	r1, [r7, #4]
 8015e3a:	68f8      	ldr	r0, [r7, #12]
 8015e3c:	f00b fda3 	bl	8021986 <memcpy>
  pbuf_ref(cseg->p);
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	685b      	ldr	r3, [r3, #4]
 8015e44:	4618      	mov	r0, r3
 8015e46:	f7fe fa3d 	bl	80142c4 <pbuf_ref>
  return cseg;
 8015e4a:	68fb      	ldr	r3, [r7, #12]
}
 8015e4c:	4618      	mov	r0, r3
 8015e4e:	3710      	adds	r7, #16
 8015e50:	46bd      	mov	sp, r7
 8015e52:	bd80      	pop	{r7, pc}
 8015e54:	08024150 	.word	0x08024150
 8015e58:	080246a4 	.word	0x080246a4
 8015e5c:	08024194 	.word	0x08024194

08015e60 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015e60:	b580      	push	{r7, lr}
 8015e62:	b084      	sub	sp, #16
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	60f8      	str	r0, [r7, #12]
 8015e68:	60b9      	str	r1, [r7, #8]
 8015e6a:	607a      	str	r2, [r7, #4]
 8015e6c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8015e6e:	68bb      	ldr	r3, [r7, #8]
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d109      	bne.n	8015e88 <tcp_recv_null+0x28>
 8015e74:	4b12      	ldr	r3, [pc, #72]	@ (8015ec0 <tcp_recv_null+0x60>)
 8015e76:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8015e7a:	4912      	ldr	r1, [pc, #72]	@ (8015ec4 <tcp_recv_null+0x64>)
 8015e7c:	4812      	ldr	r0, [pc, #72]	@ (8015ec8 <tcp_recv_null+0x68>)
 8015e7e:	f00b fa99 	bl	80213b4 <iprintf>
 8015e82:	f06f 030f 	mvn.w	r3, #15
 8015e86:	e016      	b.n	8015eb6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d009      	beq.n	8015ea2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	891b      	ldrh	r3, [r3, #8]
 8015e92:	4619      	mov	r1, r3
 8015e94:	68b8      	ldr	r0, [r7, #8]
 8015e96:	f7ff fab3 	bl	8015400 <tcp_recved>
    pbuf_free(p);
 8015e9a:	6878      	ldr	r0, [r7, #4]
 8015e9c:	f7fe f96c 	bl	8014178 <pbuf_free>
 8015ea0:	e008      	b.n	8015eb4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8015ea2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d104      	bne.n	8015eb4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8015eaa:	68b8      	ldr	r0, [r7, #8]
 8015eac:	f7fe ffe4 	bl	8014e78 <tcp_close>
 8015eb0:	4603      	mov	r3, r0
 8015eb2:	e000      	b.n	8015eb6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8015eb4:	2300      	movs	r3, #0
}
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	3710      	adds	r7, #16
 8015eba:	46bd      	mov	sp, r7
 8015ebc:	bd80      	pop	{r7, pc}
 8015ebe:	bf00      	nop
 8015ec0:	08024150 	.word	0x08024150
 8015ec4:	080246c0 	.word	0x080246c0
 8015ec8:	08024194 	.word	0x08024194

08015ecc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015ecc:	b580      	push	{r7, lr}
 8015ece:	b086      	sub	sp, #24
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8015ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	db01      	blt.n	8015ee2 <tcp_kill_prio+0x16>
 8015ede:	79fb      	ldrb	r3, [r7, #7]
 8015ee0:	e000      	b.n	8015ee4 <tcp_kill_prio+0x18>
 8015ee2:	237f      	movs	r3, #127	@ 0x7f
 8015ee4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8015ee6:	7afb      	ldrb	r3, [r7, #11]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d034      	beq.n	8015f56 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8015eec:	7afb      	ldrb	r3, [r7, #11]
 8015eee:	3b01      	subs	r3, #1
 8015ef0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015ef6:	2300      	movs	r3, #0
 8015ef8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015efa:	4b19      	ldr	r3, [pc, #100]	@ (8015f60 <tcp_kill_prio+0x94>)
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	617b      	str	r3, [r7, #20]
 8015f00:	e01f      	b.n	8015f42 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8015f02:	697b      	ldr	r3, [r7, #20]
 8015f04:	7d5b      	ldrb	r3, [r3, #21]
 8015f06:	7afa      	ldrb	r2, [r7, #11]
 8015f08:	429a      	cmp	r2, r3
 8015f0a:	d80c      	bhi.n	8015f26 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015f0c:	697b      	ldr	r3, [r7, #20]
 8015f0e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8015f10:	7afa      	ldrb	r2, [r7, #11]
 8015f12:	429a      	cmp	r2, r3
 8015f14:	d112      	bne.n	8015f3c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015f16:	4b13      	ldr	r3, [pc, #76]	@ (8015f64 <tcp_kill_prio+0x98>)
 8015f18:	681a      	ldr	r2, [r3, #0]
 8015f1a:	697b      	ldr	r3, [r7, #20]
 8015f1c:	6a1b      	ldr	r3, [r3, #32]
 8015f1e:	1ad3      	subs	r3, r2, r3
 8015f20:	68fa      	ldr	r2, [r7, #12]
 8015f22:	429a      	cmp	r2, r3
 8015f24:	d80a      	bhi.n	8015f3c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8015f26:	4b0f      	ldr	r3, [pc, #60]	@ (8015f64 <tcp_kill_prio+0x98>)
 8015f28:	681a      	ldr	r2, [r3, #0]
 8015f2a:	697b      	ldr	r3, [r7, #20]
 8015f2c:	6a1b      	ldr	r3, [r3, #32]
 8015f2e:	1ad3      	subs	r3, r2, r3
 8015f30:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8015f32:	697b      	ldr	r3, [r7, #20]
 8015f34:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8015f36:	697b      	ldr	r3, [r7, #20]
 8015f38:	7d5b      	ldrb	r3, [r3, #21]
 8015f3a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f3c:	697b      	ldr	r3, [r7, #20]
 8015f3e:	68db      	ldr	r3, [r3, #12]
 8015f40:	617b      	str	r3, [r7, #20]
 8015f42:	697b      	ldr	r3, [r7, #20]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d1dc      	bne.n	8015f02 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8015f48:	693b      	ldr	r3, [r7, #16]
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d004      	beq.n	8015f58 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015f4e:	6938      	ldr	r0, [r7, #16]
 8015f50:	f7ff f87c 	bl	801504c <tcp_abort>
 8015f54:	e000      	b.n	8015f58 <tcp_kill_prio+0x8c>
    return;
 8015f56:	bf00      	nop
  }
}
 8015f58:	3718      	adds	r7, #24
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	bd80      	pop	{r7, pc}
 8015f5e:	bf00      	nop
 8015f60:	20004bf4 	.word	0x20004bf4
 8015f64:	20004be8 	.word	0x20004be8

08015f68 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b086      	sub	sp, #24
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	4603      	mov	r3, r0
 8015f70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8015f72:	79fb      	ldrb	r3, [r7, #7]
 8015f74:	2b08      	cmp	r3, #8
 8015f76:	d009      	beq.n	8015f8c <tcp_kill_state+0x24>
 8015f78:	79fb      	ldrb	r3, [r7, #7]
 8015f7a:	2b09      	cmp	r3, #9
 8015f7c:	d006      	beq.n	8015f8c <tcp_kill_state+0x24>
 8015f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8015fe8 <tcp_kill_state+0x80>)
 8015f80:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8015f84:	4919      	ldr	r1, [pc, #100]	@ (8015fec <tcp_kill_state+0x84>)
 8015f86:	481a      	ldr	r0, [pc, #104]	@ (8015ff0 <tcp_kill_state+0x88>)
 8015f88:	f00b fa14 	bl	80213b4 <iprintf>

  inactivity = 0;
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015f90:	2300      	movs	r3, #0
 8015f92:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f94:	4b17      	ldr	r3, [pc, #92]	@ (8015ff4 <tcp_kill_state+0x8c>)
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	617b      	str	r3, [r7, #20]
 8015f9a:	e017      	b.n	8015fcc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8015f9c:	697b      	ldr	r3, [r7, #20]
 8015f9e:	7d1b      	ldrb	r3, [r3, #20]
 8015fa0:	79fa      	ldrb	r2, [r7, #7]
 8015fa2:	429a      	cmp	r2, r3
 8015fa4:	d10f      	bne.n	8015fc6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015fa6:	4b14      	ldr	r3, [pc, #80]	@ (8015ff8 <tcp_kill_state+0x90>)
 8015fa8:	681a      	ldr	r2, [r3, #0]
 8015faa:	697b      	ldr	r3, [r7, #20]
 8015fac:	6a1b      	ldr	r3, [r3, #32]
 8015fae:	1ad3      	subs	r3, r2, r3
 8015fb0:	68fa      	ldr	r2, [r7, #12]
 8015fb2:	429a      	cmp	r2, r3
 8015fb4:	d807      	bhi.n	8015fc6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8015fb6:	4b10      	ldr	r3, [pc, #64]	@ (8015ff8 <tcp_kill_state+0x90>)
 8015fb8:	681a      	ldr	r2, [r3, #0]
 8015fba:	697b      	ldr	r3, [r7, #20]
 8015fbc:	6a1b      	ldr	r3, [r3, #32]
 8015fbe:	1ad3      	subs	r3, r2, r3
 8015fc0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8015fc2:	697b      	ldr	r3, [r7, #20]
 8015fc4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015fc6:	697b      	ldr	r3, [r7, #20]
 8015fc8:	68db      	ldr	r3, [r3, #12]
 8015fca:	617b      	str	r3, [r7, #20]
 8015fcc:	697b      	ldr	r3, [r7, #20]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d1e4      	bne.n	8015f9c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8015fd2:	693b      	ldr	r3, [r7, #16]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d003      	beq.n	8015fe0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8015fd8:	2100      	movs	r1, #0
 8015fda:	6938      	ldr	r0, [r7, #16]
 8015fdc:	f7fe ff78 	bl	8014ed0 <tcp_abandon>
  }
}
 8015fe0:	bf00      	nop
 8015fe2:	3718      	adds	r7, #24
 8015fe4:	46bd      	mov	sp, r7
 8015fe6:	bd80      	pop	{r7, pc}
 8015fe8:	08024150 	.word	0x08024150
 8015fec:	080246dc 	.word	0x080246dc
 8015ff0:	08024194 	.word	0x08024194
 8015ff4:	20004bf4 	.word	0x20004bf4
 8015ff8:	20004be8 	.word	0x20004be8

08015ffc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	b084      	sub	sp, #16
 8016000:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8016002:	2300      	movs	r3, #0
 8016004:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8016006:	2300      	movs	r3, #0
 8016008:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801600a:	4b12      	ldr	r3, [pc, #72]	@ (8016054 <tcp_kill_timewait+0x58>)
 801600c:	681b      	ldr	r3, [r3, #0]
 801600e:	60fb      	str	r3, [r7, #12]
 8016010:	e012      	b.n	8016038 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016012:	4b11      	ldr	r3, [pc, #68]	@ (8016058 <tcp_kill_timewait+0x5c>)
 8016014:	681a      	ldr	r2, [r3, #0]
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	6a1b      	ldr	r3, [r3, #32]
 801601a:	1ad3      	subs	r3, r2, r3
 801601c:	687a      	ldr	r2, [r7, #4]
 801601e:	429a      	cmp	r2, r3
 8016020:	d807      	bhi.n	8016032 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8016022:	4b0d      	ldr	r3, [pc, #52]	@ (8016058 <tcp_kill_timewait+0x5c>)
 8016024:	681a      	ldr	r2, [r3, #0]
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	6a1b      	ldr	r3, [r3, #32]
 801602a:	1ad3      	subs	r3, r2, r3
 801602c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	68db      	ldr	r3, [r3, #12]
 8016036:	60fb      	str	r3, [r7, #12]
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d1e9      	bne.n	8016012 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801603e:	68bb      	ldr	r3, [r7, #8]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d002      	beq.n	801604a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016044:	68b8      	ldr	r0, [r7, #8]
 8016046:	f7ff f801 	bl	801504c <tcp_abort>
  }
}
 801604a:	bf00      	nop
 801604c:	3710      	adds	r7, #16
 801604e:	46bd      	mov	sp, r7
 8016050:	bd80      	pop	{r7, pc}
 8016052:	bf00      	nop
 8016054:	20004bf8 	.word	0x20004bf8
 8016058:	20004be8 	.word	0x20004be8

0801605c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801605c:	b580      	push	{r7, lr}
 801605e:	b082      	sub	sp, #8
 8016060:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8016062:	4b10      	ldr	r3, [pc, #64]	@ (80160a4 <tcp_handle_closepend+0x48>)
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016068:	e014      	b.n	8016094 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	68db      	ldr	r3, [r3, #12]
 801606e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	8b5b      	ldrh	r3, [r3, #26]
 8016074:	f003 0308 	and.w	r3, r3, #8
 8016078:	2b00      	cmp	r3, #0
 801607a:	d009      	beq.n	8016090 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	8b5b      	ldrh	r3, [r3, #26]
 8016080:	f023 0308 	bic.w	r3, r3, #8
 8016084:	b29a      	uxth	r2, r3
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801608a:	6878      	ldr	r0, [r7, #4]
 801608c:	f7fe fe8a 	bl	8014da4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8016090:	683b      	ldr	r3, [r7, #0]
 8016092:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d1e7      	bne.n	801606a <tcp_handle_closepend+0xe>
  }
}
 801609a:	bf00      	nop
 801609c:	bf00      	nop
 801609e:	3708      	adds	r7, #8
 80160a0:	46bd      	mov	sp, r7
 80160a2:	bd80      	pop	{r7, pc}
 80160a4:	20004bf4 	.word	0x20004bf4

080160a8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b084      	sub	sp, #16
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	4603      	mov	r3, r0
 80160b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80160b2:	2001      	movs	r0, #1
 80160b4:	f7fd f904 	bl	80132c0 <memp_malloc>
 80160b8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d126      	bne.n	801610e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80160c0:	f7ff ffcc 	bl	801605c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80160c4:	f7ff ff9a 	bl	8015ffc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80160c8:	2001      	movs	r0, #1
 80160ca:	f7fd f8f9 	bl	80132c0 <memp_malloc>
 80160ce:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d11b      	bne.n	801610e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80160d6:	2009      	movs	r0, #9
 80160d8:	f7ff ff46 	bl	8015f68 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80160dc:	2001      	movs	r0, #1
 80160de:	f7fd f8ef 	bl	80132c0 <memp_malloc>
 80160e2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d111      	bne.n	801610e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80160ea:	2008      	movs	r0, #8
 80160ec:	f7ff ff3c 	bl	8015f68 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80160f0:	2001      	movs	r0, #1
 80160f2:	f7fd f8e5 	bl	80132c0 <memp_malloc>
 80160f6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d107      	bne.n	801610e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80160fe:	79fb      	ldrb	r3, [r7, #7]
 8016100:	4618      	mov	r0, r3
 8016102:	f7ff fee3 	bl	8015ecc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016106:	2001      	movs	r0, #1
 8016108:	f7fd f8da 	bl	80132c0 <memp_malloc>
 801610c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	2b00      	cmp	r3, #0
 8016112:	d03f      	beq.n	8016194 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8016114:	229c      	movs	r2, #156	@ 0x9c
 8016116:	2100      	movs	r1, #0
 8016118:	68f8      	ldr	r0, [r7, #12]
 801611a:	f00b fb1b 	bl	8021754 <memset>
    pcb->prio = prio;
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	79fa      	ldrb	r2, [r7, #7]
 8016122:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801612a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8016134:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	22ff      	movs	r2, #255	@ 0xff
 8016142:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801614a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	2206      	movs	r2, #6
 8016150:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	2206      	movs	r2, #6
 8016158:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016160:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	2201      	movs	r2, #1
 8016166:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 801616a:	4b0d      	ldr	r3, [pc, #52]	@ (80161a0 <tcp_alloc+0xf8>)
 801616c:	681a      	ldr	r2, [r3, #0]
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8016172:	4b0c      	ldr	r3, [pc, #48]	@ (80161a4 <tcp_alloc+0xfc>)
 8016174:	781a      	ldrb	r2, [r3, #0]
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8016180:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	4a08      	ldr	r2, [pc, #32]	@ (80161a8 <tcp_alloc+0x100>)
 8016188:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	4a07      	ldr	r2, [pc, #28]	@ (80161ac <tcp_alloc+0x104>)
 8016190:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8016194:	68fb      	ldr	r3, [r7, #12]
}
 8016196:	4618      	mov	r0, r3
 8016198:	3710      	adds	r7, #16
 801619a:	46bd      	mov	sp, r7
 801619c:	bd80      	pop	{r7, pc}
 801619e:	bf00      	nop
 80161a0:	20004be8 	.word	0x20004be8
 80161a4:	20004bfe 	.word	0x20004bfe
 80161a8:	08015e61 	.word	0x08015e61
 80161ac:	006ddd00 	.word	0x006ddd00

080161b0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b084      	sub	sp, #16
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	4603      	mov	r3, r0
 80161b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80161ba:	2040      	movs	r0, #64	@ 0x40
 80161bc:	f7ff ff74 	bl	80160a8 <tcp_alloc>
 80161c0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80161c2:	68fb      	ldr	r3, [r7, #12]
}
 80161c4:	4618      	mov	r0, r3
 80161c6:	3710      	adds	r7, #16
 80161c8:	46bd      	mov	sp, r7
 80161ca:	bd80      	pop	{r7, pc}

080161cc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80161cc:	b480      	push	{r7}
 80161ce:	b083      	sub	sp, #12
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	6078      	str	r0, [r7, #4]
 80161d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d002      	beq.n	80161e2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	683a      	ldr	r2, [r7, #0]
 80161e0:	611a      	str	r2, [r3, #16]
  }
}
 80161e2:	bf00      	nop
 80161e4:	370c      	adds	r7, #12
 80161e6:	46bd      	mov	sp, r7
 80161e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ec:	4770      	bx	lr
	...

080161f0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b082      	sub	sp, #8
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	6078      	str	r0, [r7, #4]
 80161f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d00e      	beq.n	801621e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	7d1b      	ldrb	r3, [r3, #20]
 8016204:	2b01      	cmp	r3, #1
 8016206:	d106      	bne.n	8016216 <tcp_recv+0x26>
 8016208:	4b07      	ldr	r3, [pc, #28]	@ (8016228 <tcp_recv+0x38>)
 801620a:	f240 72df 	movw	r2, #2015	@ 0x7df
 801620e:	4907      	ldr	r1, [pc, #28]	@ (801622c <tcp_recv+0x3c>)
 8016210:	4807      	ldr	r0, [pc, #28]	@ (8016230 <tcp_recv+0x40>)
 8016212:	f00b f8cf 	bl	80213b4 <iprintf>
    pcb->recv = recv;
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	683a      	ldr	r2, [r7, #0]
 801621a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 801621e:	bf00      	nop
 8016220:	3708      	adds	r7, #8
 8016222:	46bd      	mov	sp, r7
 8016224:	bd80      	pop	{r7, pc}
 8016226:	bf00      	nop
 8016228:	08024150 	.word	0x08024150
 801622c:	080246ec 	.word	0x080246ec
 8016230:	08024194 	.word	0x08024194

08016234 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8016234:	b580      	push	{r7, lr}
 8016236:	b082      	sub	sp, #8
 8016238:	af00      	add	r7, sp, #0
 801623a:	6078      	str	r0, [r7, #4]
 801623c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	2b00      	cmp	r3, #0
 8016242:	d00e      	beq.n	8016262 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	7d1b      	ldrb	r3, [r3, #20]
 8016248:	2b01      	cmp	r3, #1
 801624a:	d106      	bne.n	801625a <tcp_sent+0x26>
 801624c:	4b07      	ldr	r3, [pc, #28]	@ (801626c <tcp_sent+0x38>)
 801624e:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8016252:	4907      	ldr	r1, [pc, #28]	@ (8016270 <tcp_sent+0x3c>)
 8016254:	4807      	ldr	r0, [pc, #28]	@ (8016274 <tcp_sent+0x40>)
 8016256:	f00b f8ad 	bl	80213b4 <iprintf>
    pcb->sent = sent;
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	683a      	ldr	r2, [r7, #0]
 801625e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8016262:	bf00      	nop
 8016264:	3708      	adds	r7, #8
 8016266:	46bd      	mov	sp, r7
 8016268:	bd80      	pop	{r7, pc}
 801626a:	bf00      	nop
 801626c:	08024150 	.word	0x08024150
 8016270:	08024714 	.word	0x08024714
 8016274:	08024194 	.word	0x08024194

08016278 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8016278:	b580      	push	{r7, lr}
 801627a:	b082      	sub	sp, #8
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
 8016280:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d00e      	beq.n	80162a6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	7d1b      	ldrb	r3, [r3, #20]
 801628c:	2b01      	cmp	r3, #1
 801628e:	d106      	bne.n	801629e <tcp_err+0x26>
 8016290:	4b07      	ldr	r3, [pc, #28]	@ (80162b0 <tcp_err+0x38>)
 8016292:	f640 020d 	movw	r2, #2061	@ 0x80d
 8016296:	4907      	ldr	r1, [pc, #28]	@ (80162b4 <tcp_err+0x3c>)
 8016298:	4807      	ldr	r0, [pc, #28]	@ (80162b8 <tcp_err+0x40>)
 801629a:	f00b f88b 	bl	80213b4 <iprintf>
    pcb->errf = err;
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	683a      	ldr	r2, [r7, #0]
 80162a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 80162a6:	bf00      	nop
 80162a8:	3708      	adds	r7, #8
 80162aa:	46bd      	mov	sp, r7
 80162ac:	bd80      	pop	{r7, pc}
 80162ae:	bf00      	nop
 80162b0:	08024150 	.word	0x08024150
 80162b4:	0802473c 	.word	0x0802473c
 80162b8:	08024194 	.word	0x08024194

080162bc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80162bc:	b480      	push	{r7}
 80162be:	b085      	sub	sp, #20
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	6078      	str	r0, [r7, #4]
 80162c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d008      	beq.n	80162de <tcp_accept+0x22>
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	7d1b      	ldrb	r3, [r3, #20]
 80162d0:	2b01      	cmp	r3, #1
 80162d2:	d104      	bne.n	80162de <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	683a      	ldr	r2, [r7, #0]
 80162dc:	619a      	str	r2, [r3, #24]
  }
}
 80162de:	bf00      	nop
 80162e0:	3714      	adds	r7, #20
 80162e2:	46bd      	mov	sp, r7
 80162e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e8:	4770      	bx	lr
	...

080162ec <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b084      	sub	sp, #16
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	60f8      	str	r0, [r7, #12]
 80162f4:	60b9      	str	r1, [r7, #8]
 80162f6:	4613      	mov	r3, r2
 80162f8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d107      	bne.n	8016310 <tcp_poll+0x24>
 8016300:	4b0e      	ldr	r3, [pc, #56]	@ (801633c <tcp_poll+0x50>)
 8016302:	f640 023d 	movw	r2, #2109	@ 0x83d
 8016306:	490e      	ldr	r1, [pc, #56]	@ (8016340 <tcp_poll+0x54>)
 8016308:	480e      	ldr	r0, [pc, #56]	@ (8016344 <tcp_poll+0x58>)
 801630a:	f00b f853 	bl	80213b4 <iprintf>
 801630e:	e011      	b.n	8016334 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	7d1b      	ldrb	r3, [r3, #20]
 8016314:	2b01      	cmp	r3, #1
 8016316:	d106      	bne.n	8016326 <tcp_poll+0x3a>
 8016318:	4b08      	ldr	r3, [pc, #32]	@ (801633c <tcp_poll+0x50>)
 801631a:	f640 023e 	movw	r2, #2110	@ 0x83e
 801631e:	490a      	ldr	r1, [pc, #40]	@ (8016348 <tcp_poll+0x5c>)
 8016320:	4808      	ldr	r0, [pc, #32]	@ (8016344 <tcp_poll+0x58>)
 8016322:	f00b f847 	bl	80213b4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	68ba      	ldr	r2, [r7, #8]
 801632a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	79fa      	ldrb	r2, [r7, #7]
 8016332:	775a      	strb	r2, [r3, #29]
}
 8016334:	3710      	adds	r7, #16
 8016336:	46bd      	mov	sp, r7
 8016338:	bd80      	pop	{r7, pc}
 801633a:	bf00      	nop
 801633c:	08024150 	.word	0x08024150
 8016340:	08024764 	.word	0x08024764
 8016344:	08024194 	.word	0x08024194
 8016348:	0802477c 	.word	0x0802477c

0801634c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b082      	sub	sp, #8
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	2b00      	cmp	r3, #0
 8016358:	d107      	bne.n	801636a <tcp_pcb_purge+0x1e>
 801635a:	4b21      	ldr	r3, [pc, #132]	@ (80163e0 <tcp_pcb_purge+0x94>)
 801635c:	f640 0251 	movw	r2, #2129	@ 0x851
 8016360:	4920      	ldr	r1, [pc, #128]	@ (80163e4 <tcp_pcb_purge+0x98>)
 8016362:	4821      	ldr	r0, [pc, #132]	@ (80163e8 <tcp_pcb_purge+0x9c>)
 8016364:	f00b f826 	bl	80213b4 <iprintf>
 8016368:	e037      	b.n	80163da <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	7d1b      	ldrb	r3, [r3, #20]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d033      	beq.n	80163da <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8016376:	2b0a      	cmp	r3, #10
 8016378:	d02f      	beq.n	80163da <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801637e:	2b01      	cmp	r3, #1
 8016380:	d02b      	beq.n	80163da <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016386:	2b00      	cmp	r3, #0
 8016388:	d007      	beq.n	801639a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801638e:	4618      	mov	r0, r3
 8016390:	f7fd fef2 	bl	8014178 <pbuf_free>
      pcb->refused_data = NULL;
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	2200      	movs	r2, #0
 8016398:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d002      	beq.n	80163a8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80163a2:	6878      	ldr	r0, [r7, #4]
 80163a4:	f000 f986 	bl	80166b4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80163ae:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80163b4:	4618      	mov	r0, r3
 80163b6:	f7ff fcdb 	bl	8015d70 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80163be:	4618      	mov	r0, r3
 80163c0:	f7ff fcd6 	bl	8015d70 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	2200      	movs	r2, #0
 80163c8:	66da      	str	r2, [r3, #108]	@ 0x6c
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	2200      	movs	r2, #0
 80163d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80163da:	3708      	adds	r7, #8
 80163dc:	46bd      	mov	sp, r7
 80163de:	bd80      	pop	{r7, pc}
 80163e0:	08024150 	.word	0x08024150
 80163e4:	0802479c 	.word	0x0802479c
 80163e8:	08024194 	.word	0x08024194

080163ec <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80163ec:	b580      	push	{r7, lr}
 80163ee:	b084      	sub	sp, #16
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	6078      	str	r0, [r7, #4]
 80163f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80163f6:	683b      	ldr	r3, [r7, #0]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d106      	bne.n	801640a <tcp_pcb_remove+0x1e>
 80163fc:	4b3e      	ldr	r3, [pc, #248]	@ (80164f8 <tcp_pcb_remove+0x10c>)
 80163fe:	f640 0283 	movw	r2, #2179	@ 0x883
 8016402:	493e      	ldr	r1, [pc, #248]	@ (80164fc <tcp_pcb_remove+0x110>)
 8016404:	483e      	ldr	r0, [pc, #248]	@ (8016500 <tcp_pcb_remove+0x114>)
 8016406:	f00a ffd5 	bl	80213b4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d106      	bne.n	801641e <tcp_pcb_remove+0x32>
 8016410:	4b39      	ldr	r3, [pc, #228]	@ (80164f8 <tcp_pcb_remove+0x10c>)
 8016412:	f640 0284 	movw	r2, #2180	@ 0x884
 8016416:	493b      	ldr	r1, [pc, #236]	@ (8016504 <tcp_pcb_remove+0x118>)
 8016418:	4839      	ldr	r0, [pc, #228]	@ (8016500 <tcp_pcb_remove+0x114>)
 801641a:	f00a ffcb 	bl	80213b4 <iprintf>

  TCP_RMV(pcblist, pcb);
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	683a      	ldr	r2, [r7, #0]
 8016424:	429a      	cmp	r2, r3
 8016426:	d105      	bne.n	8016434 <tcp_pcb_remove+0x48>
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	68da      	ldr	r2, [r3, #12]
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	601a      	str	r2, [r3, #0]
 8016432:	e013      	b.n	801645c <tcp_pcb_remove+0x70>
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	60fb      	str	r3, [r7, #12]
 801643a:	e00c      	b.n	8016456 <tcp_pcb_remove+0x6a>
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	68db      	ldr	r3, [r3, #12]
 8016440:	683a      	ldr	r2, [r7, #0]
 8016442:	429a      	cmp	r2, r3
 8016444:	d104      	bne.n	8016450 <tcp_pcb_remove+0x64>
 8016446:	683b      	ldr	r3, [r7, #0]
 8016448:	68da      	ldr	r2, [r3, #12]
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	60da      	str	r2, [r3, #12]
 801644e:	e005      	b.n	801645c <tcp_pcb_remove+0x70>
 8016450:	68fb      	ldr	r3, [r7, #12]
 8016452:	68db      	ldr	r3, [r3, #12]
 8016454:	60fb      	str	r3, [r7, #12]
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	2b00      	cmp	r3, #0
 801645a:	d1ef      	bne.n	801643c <tcp_pcb_remove+0x50>
 801645c:	683b      	ldr	r3, [r7, #0]
 801645e:	2200      	movs	r2, #0
 8016460:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8016462:	6838      	ldr	r0, [r7, #0]
 8016464:	f7ff ff72 	bl	801634c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8016468:	683b      	ldr	r3, [r7, #0]
 801646a:	7d1b      	ldrb	r3, [r3, #20]
 801646c:	2b0a      	cmp	r3, #10
 801646e:	d013      	beq.n	8016498 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8016470:	683b      	ldr	r3, [r7, #0]
 8016472:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8016474:	2b01      	cmp	r3, #1
 8016476:	d00f      	beq.n	8016498 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8016478:	683b      	ldr	r3, [r7, #0]
 801647a:	8b5b      	ldrh	r3, [r3, #26]
 801647c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8016480:	2b00      	cmp	r3, #0
 8016482:	d009      	beq.n	8016498 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8016484:	683b      	ldr	r3, [r7, #0]
 8016486:	8b5b      	ldrh	r3, [r3, #26]
 8016488:	f043 0302 	orr.w	r3, r3, #2
 801648c:	b29a      	uxth	r2, r3
 801648e:	683b      	ldr	r3, [r7, #0]
 8016490:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016492:	6838      	ldr	r0, [r7, #0]
 8016494:	f003 fbc0 	bl	8019c18 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8016498:	683b      	ldr	r3, [r7, #0]
 801649a:	7d1b      	ldrb	r3, [r3, #20]
 801649c:	2b01      	cmp	r3, #1
 801649e:	d020      	beq.n	80164e2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80164a0:	683b      	ldr	r3, [r7, #0]
 80164a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d006      	beq.n	80164b6 <tcp_pcb_remove+0xca>
 80164a8:	4b13      	ldr	r3, [pc, #76]	@ (80164f8 <tcp_pcb_remove+0x10c>)
 80164aa:	f640 0293 	movw	r2, #2195	@ 0x893
 80164ae:	4916      	ldr	r1, [pc, #88]	@ (8016508 <tcp_pcb_remove+0x11c>)
 80164b0:	4813      	ldr	r0, [pc, #76]	@ (8016500 <tcp_pcb_remove+0x114>)
 80164b2:	f00a ff7f 	bl	80213b4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80164b6:	683b      	ldr	r3, [r7, #0]
 80164b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d006      	beq.n	80164cc <tcp_pcb_remove+0xe0>
 80164be:	4b0e      	ldr	r3, [pc, #56]	@ (80164f8 <tcp_pcb_remove+0x10c>)
 80164c0:	f640 0294 	movw	r2, #2196	@ 0x894
 80164c4:	4911      	ldr	r1, [pc, #68]	@ (801650c <tcp_pcb_remove+0x120>)
 80164c6:	480e      	ldr	r0, [pc, #56]	@ (8016500 <tcp_pcb_remove+0x114>)
 80164c8:	f00a ff74 	bl	80213b4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80164cc:	683b      	ldr	r3, [r7, #0]
 80164ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d006      	beq.n	80164e2 <tcp_pcb_remove+0xf6>
 80164d4:	4b08      	ldr	r3, [pc, #32]	@ (80164f8 <tcp_pcb_remove+0x10c>)
 80164d6:	f640 0296 	movw	r2, #2198	@ 0x896
 80164da:	490d      	ldr	r1, [pc, #52]	@ (8016510 <tcp_pcb_remove+0x124>)
 80164dc:	4808      	ldr	r0, [pc, #32]	@ (8016500 <tcp_pcb_remove+0x114>)
 80164de:	f00a ff69 	bl	80213b4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80164e2:	683b      	ldr	r3, [r7, #0]
 80164e4:	2200      	movs	r2, #0
 80164e6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80164e8:	683b      	ldr	r3, [r7, #0]
 80164ea:	2200      	movs	r2, #0
 80164ec:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80164ee:	bf00      	nop
 80164f0:	3710      	adds	r7, #16
 80164f2:	46bd      	mov	sp, r7
 80164f4:	bd80      	pop	{r7, pc}
 80164f6:	bf00      	nop
 80164f8:	08024150 	.word	0x08024150
 80164fc:	080247b8 	.word	0x080247b8
 8016500:	08024194 	.word	0x08024194
 8016504:	080247d4 	.word	0x080247d4
 8016508:	080247f4 	.word	0x080247f4
 801650c:	0802480c 	.word	0x0802480c
 8016510:	08024828 	.word	0x08024828

08016514 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8016514:	b580      	push	{r7, lr}
 8016516:	b082      	sub	sp, #8
 8016518:	af00      	add	r7, sp, #0
 801651a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d106      	bne.n	8016530 <tcp_next_iss+0x1c>
 8016522:	4b0a      	ldr	r3, [pc, #40]	@ (801654c <tcp_next_iss+0x38>)
 8016524:	f640 02af 	movw	r2, #2223	@ 0x8af
 8016528:	4909      	ldr	r1, [pc, #36]	@ (8016550 <tcp_next_iss+0x3c>)
 801652a:	480a      	ldr	r0, [pc, #40]	@ (8016554 <tcp_next_iss+0x40>)
 801652c:	f00a ff42 	bl	80213b4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8016530:	4b09      	ldr	r3, [pc, #36]	@ (8016558 <tcp_next_iss+0x44>)
 8016532:	681a      	ldr	r2, [r3, #0]
 8016534:	4b09      	ldr	r3, [pc, #36]	@ (801655c <tcp_next_iss+0x48>)
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	4413      	add	r3, r2
 801653a:	4a07      	ldr	r2, [pc, #28]	@ (8016558 <tcp_next_iss+0x44>)
 801653c:	6013      	str	r3, [r2, #0]
  return iss;
 801653e:	4b06      	ldr	r3, [pc, #24]	@ (8016558 <tcp_next_iss+0x44>)
 8016540:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8016542:	4618      	mov	r0, r3
 8016544:	3708      	adds	r7, #8
 8016546:	46bd      	mov	sp, r7
 8016548:	bd80      	pop	{r7, pc}
 801654a:	bf00      	nop
 801654c:	08024150 	.word	0x08024150
 8016550:	08024840 	.word	0x08024840
 8016554:	08024194 	.word	0x08024194
 8016558:	200000bc 	.word	0x200000bc
 801655c:	20004be8 	.word	0x20004be8

08016560 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8016560:	b580      	push	{r7, lr}
 8016562:	b086      	sub	sp, #24
 8016564:	af00      	add	r7, sp, #0
 8016566:	4603      	mov	r3, r0
 8016568:	60b9      	str	r1, [r7, #8]
 801656a:	607a      	str	r2, [r7, #4]
 801656c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	2b00      	cmp	r3, #0
 8016572:	d106      	bne.n	8016582 <tcp_eff_send_mss_netif+0x22>
 8016574:	4b14      	ldr	r3, [pc, #80]	@ (80165c8 <tcp_eff_send_mss_netif+0x68>)
 8016576:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801657a:	4914      	ldr	r1, [pc, #80]	@ (80165cc <tcp_eff_send_mss_netif+0x6c>)
 801657c:	4814      	ldr	r0, [pc, #80]	@ (80165d0 <tcp_eff_send_mss_netif+0x70>)
 801657e:	f00a ff19 	bl	80213b4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8016582:	68bb      	ldr	r3, [r7, #8]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d101      	bne.n	801658c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8016588:	89fb      	ldrh	r3, [r7, #14]
 801658a:	e019      	b.n	80165c0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801658c:	68bb      	ldr	r3, [r7, #8]
 801658e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8016590:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8016592:	8afb      	ldrh	r3, [r7, #22]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d012      	beq.n	80165be <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016598:	2328      	movs	r3, #40	@ 0x28
 801659a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801659c:	8afa      	ldrh	r2, [r7, #22]
 801659e:	8abb      	ldrh	r3, [r7, #20]
 80165a0:	429a      	cmp	r2, r3
 80165a2:	d904      	bls.n	80165ae <tcp_eff_send_mss_netif+0x4e>
 80165a4:	8afa      	ldrh	r2, [r7, #22]
 80165a6:	8abb      	ldrh	r3, [r7, #20]
 80165a8:	1ad3      	subs	r3, r2, r3
 80165aa:	b29b      	uxth	r3, r3
 80165ac:	e000      	b.n	80165b0 <tcp_eff_send_mss_netif+0x50>
 80165ae:	2300      	movs	r3, #0
 80165b0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80165b2:	8a7a      	ldrh	r2, [r7, #18]
 80165b4:	89fb      	ldrh	r3, [r7, #14]
 80165b6:	4293      	cmp	r3, r2
 80165b8:	bf28      	it	cs
 80165ba:	4613      	movcs	r3, r2
 80165bc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80165be:	89fb      	ldrh	r3, [r7, #14]
}
 80165c0:	4618      	mov	r0, r3
 80165c2:	3718      	adds	r7, #24
 80165c4:	46bd      	mov	sp, r7
 80165c6:	bd80      	pop	{r7, pc}
 80165c8:	08024150 	.word	0x08024150
 80165cc:	0802485c 	.word	0x0802485c
 80165d0:	08024194 	.word	0x08024194

080165d4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b084      	sub	sp, #16
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
 80165dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80165de:	683b      	ldr	r3, [r7, #0]
 80165e0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d119      	bne.n	801661c <tcp_netif_ip_addr_changed_pcblist+0x48>
 80165e8:	4b10      	ldr	r3, [pc, #64]	@ (801662c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80165ea:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80165ee:	4910      	ldr	r1, [pc, #64]	@ (8016630 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80165f0:	4810      	ldr	r0, [pc, #64]	@ (8016634 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80165f2:	f00a fedf 	bl	80213b4 <iprintf>

  while (pcb != NULL) {
 80165f6:	e011      	b.n	801661c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	681a      	ldr	r2, [r3, #0]
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	429a      	cmp	r2, r3
 8016602:	d108      	bne.n	8016616 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	68db      	ldr	r3, [r3, #12]
 8016608:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801660a:	68f8      	ldr	r0, [r7, #12]
 801660c:	f7fe fd1e 	bl	801504c <tcp_abort>
      pcb = next;
 8016610:	68bb      	ldr	r3, [r7, #8]
 8016612:	60fb      	str	r3, [r7, #12]
 8016614:	e002      	b.n	801661c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	68db      	ldr	r3, [r3, #12]
 801661a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d1ea      	bne.n	80165f8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8016622:	bf00      	nop
 8016624:	bf00      	nop
 8016626:	3710      	adds	r7, #16
 8016628:	46bd      	mov	sp, r7
 801662a:	bd80      	pop	{r7, pc}
 801662c:	08024150 	.word	0x08024150
 8016630:	08024884 	.word	0x08024884
 8016634:	08024194 	.word	0x08024194

08016638 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016638:	b580      	push	{r7, lr}
 801663a:	b084      	sub	sp, #16
 801663c:	af00      	add	r7, sp, #0
 801663e:	6078      	str	r0, [r7, #4]
 8016640:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d02a      	beq.n	801669e <tcp_netif_ip_addr_changed+0x66>
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	2b00      	cmp	r3, #0
 801664e:	d026      	beq.n	801669e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8016650:	4b15      	ldr	r3, [pc, #84]	@ (80166a8 <tcp_netif_ip_addr_changed+0x70>)
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	4619      	mov	r1, r3
 8016656:	6878      	ldr	r0, [r7, #4]
 8016658:	f7ff ffbc 	bl	80165d4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801665c:	4b13      	ldr	r3, [pc, #76]	@ (80166ac <tcp_netif_ip_addr_changed+0x74>)
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	4619      	mov	r1, r3
 8016662:	6878      	ldr	r0, [r7, #4]
 8016664:	f7ff ffb6 	bl	80165d4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8016668:	683b      	ldr	r3, [r7, #0]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d017      	beq.n	801669e <tcp_netif_ip_addr_changed+0x66>
 801666e:	683b      	ldr	r3, [r7, #0]
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d013      	beq.n	801669e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016676:	4b0e      	ldr	r3, [pc, #56]	@ (80166b0 <tcp_netif_ip_addr_changed+0x78>)
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	60fb      	str	r3, [r7, #12]
 801667c:	e00c      	b.n	8016698 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	681a      	ldr	r2, [r3, #0]
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	429a      	cmp	r2, r3
 8016688:	d103      	bne.n	8016692 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801668a:	683b      	ldr	r3, [r7, #0]
 801668c:	681a      	ldr	r2, [r3, #0]
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016692:	68fb      	ldr	r3, [r7, #12]
 8016694:	68db      	ldr	r3, [r3, #12]
 8016696:	60fb      	str	r3, [r7, #12]
 8016698:	68fb      	ldr	r3, [r7, #12]
 801669a:	2b00      	cmp	r3, #0
 801669c:	d1ef      	bne.n	801667e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801669e:	bf00      	nop
 80166a0:	3710      	adds	r7, #16
 80166a2:	46bd      	mov	sp, r7
 80166a4:	bd80      	pop	{r7, pc}
 80166a6:	bf00      	nop
 80166a8:	20004bf4 	.word	0x20004bf4
 80166ac:	20004bec 	.word	0x20004bec
 80166b0:	20004bf0 	.word	0x20004bf0

080166b4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80166b4:	b580      	push	{r7, lr}
 80166b6:	b082      	sub	sp, #8
 80166b8:	af00      	add	r7, sp, #0
 80166ba:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d007      	beq.n	80166d4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80166c8:	4618      	mov	r0, r3
 80166ca:	f7ff fb51 	bl	8015d70 <tcp_segs_free>
    pcb->ooseq = NULL;
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	2200      	movs	r2, #0
 80166d2:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80166d4:	bf00      	nop
 80166d6:	3708      	adds	r7, #8
 80166d8:	46bd      	mov	sp, r7
 80166da:	bd80      	pop	{r7, pc}

080166dc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80166dc:	b590      	push	{r4, r7, lr}
 80166de:	b08d      	sub	sp, #52	@ 0x34
 80166e0:	af04      	add	r7, sp, #16
 80166e2:	6078      	str	r0, [r7, #4]
 80166e4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	2b00      	cmp	r3, #0
 80166ea:	d105      	bne.n	80166f8 <tcp_input+0x1c>
 80166ec:	4b9b      	ldr	r3, [pc, #620]	@ (801695c <tcp_input+0x280>)
 80166ee:	2283      	movs	r2, #131	@ 0x83
 80166f0:	499b      	ldr	r1, [pc, #620]	@ (8016960 <tcp_input+0x284>)
 80166f2:	489c      	ldr	r0, [pc, #624]	@ (8016964 <tcp_input+0x288>)
 80166f4:	f00a fe5e 	bl	80213b4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	685b      	ldr	r3, [r3, #4]
 80166fc:	4a9a      	ldr	r2, [pc, #616]	@ (8016968 <tcp_input+0x28c>)
 80166fe:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	895b      	ldrh	r3, [r3, #10]
 8016704:	2b13      	cmp	r3, #19
 8016706:	f240 83d1 	bls.w	8016eac <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801670a:	4b98      	ldr	r3, [pc, #608]	@ (801696c <tcp_input+0x290>)
 801670c:	695b      	ldr	r3, [r3, #20]
 801670e:	4a97      	ldr	r2, [pc, #604]	@ (801696c <tcp_input+0x290>)
 8016710:	6812      	ldr	r2, [r2, #0]
 8016712:	4611      	mov	r1, r2
 8016714:	4618      	mov	r0, r3
 8016716:	f008 fe8d 	bl	801f434 <ip4_addr_isbroadcast_u32>
 801671a:	4603      	mov	r3, r0
 801671c:	2b00      	cmp	r3, #0
 801671e:	f040 83c7 	bne.w	8016eb0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8016722:	4b92      	ldr	r3, [pc, #584]	@ (801696c <tcp_input+0x290>)
 8016724:	695b      	ldr	r3, [r3, #20]
 8016726:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801672a:	2be0      	cmp	r3, #224	@ 0xe0
 801672c:	f000 83c0 	beq.w	8016eb0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8016730:	4b8d      	ldr	r3, [pc, #564]	@ (8016968 <tcp_input+0x28c>)
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	899b      	ldrh	r3, [r3, #12]
 8016736:	b29b      	uxth	r3, r3
 8016738:	4618      	mov	r0, r3
 801673a:	f7fb ff5f 	bl	80125fc <lwip_htons>
 801673e:	4603      	mov	r3, r0
 8016740:	0b1b      	lsrs	r3, r3, #12
 8016742:	b29b      	uxth	r3, r3
 8016744:	b2db      	uxtb	r3, r3
 8016746:	009b      	lsls	r3, r3, #2
 8016748:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801674a:	7cbb      	ldrb	r3, [r7, #18]
 801674c:	2b13      	cmp	r3, #19
 801674e:	f240 83b1 	bls.w	8016eb4 <tcp_input+0x7d8>
 8016752:	7cbb      	ldrb	r3, [r7, #18]
 8016754:	b29a      	uxth	r2, r3
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	891b      	ldrh	r3, [r3, #8]
 801675a:	429a      	cmp	r2, r3
 801675c:	f200 83aa 	bhi.w	8016eb4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8016760:	7cbb      	ldrb	r3, [r7, #18]
 8016762:	b29b      	uxth	r3, r3
 8016764:	3b14      	subs	r3, #20
 8016766:	b29a      	uxth	r2, r3
 8016768:	4b81      	ldr	r3, [pc, #516]	@ (8016970 <tcp_input+0x294>)
 801676a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801676c:	4b81      	ldr	r3, [pc, #516]	@ (8016974 <tcp_input+0x298>)
 801676e:	2200      	movs	r2, #0
 8016770:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	895a      	ldrh	r2, [r3, #10]
 8016776:	7cbb      	ldrb	r3, [r7, #18]
 8016778:	b29b      	uxth	r3, r3
 801677a:	429a      	cmp	r2, r3
 801677c:	d309      	bcc.n	8016792 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801677e:	4b7c      	ldr	r3, [pc, #496]	@ (8016970 <tcp_input+0x294>)
 8016780:	881a      	ldrh	r2, [r3, #0]
 8016782:	4b7d      	ldr	r3, [pc, #500]	@ (8016978 <tcp_input+0x29c>)
 8016784:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8016786:	7cbb      	ldrb	r3, [r7, #18]
 8016788:	4619      	mov	r1, r3
 801678a:	6878      	ldr	r0, [r7, #4]
 801678c:	f7fd fc6e 	bl	801406c <pbuf_remove_header>
 8016790:	e04e      	b.n	8016830 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d105      	bne.n	80167a6 <tcp_input+0xca>
 801679a:	4b70      	ldr	r3, [pc, #448]	@ (801695c <tcp_input+0x280>)
 801679c:	22c2      	movs	r2, #194	@ 0xc2
 801679e:	4977      	ldr	r1, [pc, #476]	@ (801697c <tcp_input+0x2a0>)
 80167a0:	4870      	ldr	r0, [pc, #448]	@ (8016964 <tcp_input+0x288>)
 80167a2:	f00a fe07 	bl	80213b4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80167a6:	2114      	movs	r1, #20
 80167a8:	6878      	ldr	r0, [r7, #4]
 80167aa:	f7fd fc5f 	bl	801406c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	895a      	ldrh	r2, [r3, #10]
 80167b2:	4b71      	ldr	r3, [pc, #452]	@ (8016978 <tcp_input+0x29c>)
 80167b4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80167b6:	4b6e      	ldr	r3, [pc, #440]	@ (8016970 <tcp_input+0x294>)
 80167b8:	881a      	ldrh	r2, [r3, #0]
 80167ba:	4b6f      	ldr	r3, [pc, #444]	@ (8016978 <tcp_input+0x29c>)
 80167bc:	881b      	ldrh	r3, [r3, #0]
 80167be:	1ad3      	subs	r3, r2, r3
 80167c0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80167c2:	4b6d      	ldr	r3, [pc, #436]	@ (8016978 <tcp_input+0x29c>)
 80167c4:	881b      	ldrh	r3, [r3, #0]
 80167c6:	4619      	mov	r1, r3
 80167c8:	6878      	ldr	r0, [r7, #4]
 80167ca:	f7fd fc4f 	bl	801406c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	895b      	ldrh	r3, [r3, #10]
 80167d4:	8a3a      	ldrh	r2, [r7, #16]
 80167d6:	429a      	cmp	r2, r3
 80167d8:	f200 836e 	bhi.w	8016eb8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	685b      	ldr	r3, [r3, #4]
 80167e2:	4a64      	ldr	r2, [pc, #400]	@ (8016974 <tcp_input+0x298>)
 80167e4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	8a3a      	ldrh	r2, [r7, #16]
 80167ec:	4611      	mov	r1, r2
 80167ee:	4618      	mov	r0, r3
 80167f0:	f7fd fc3c 	bl	801406c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	891a      	ldrh	r2, [r3, #8]
 80167f8:	8a3b      	ldrh	r3, [r7, #16]
 80167fa:	1ad3      	subs	r3, r2, r3
 80167fc:	b29a      	uxth	r2, r3
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	895b      	ldrh	r3, [r3, #10]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d005      	beq.n	8016816 <tcp_input+0x13a>
 801680a:	4b54      	ldr	r3, [pc, #336]	@ (801695c <tcp_input+0x280>)
 801680c:	22df      	movs	r2, #223	@ 0xdf
 801680e:	495c      	ldr	r1, [pc, #368]	@ (8016980 <tcp_input+0x2a4>)
 8016810:	4854      	ldr	r0, [pc, #336]	@ (8016964 <tcp_input+0x288>)
 8016812:	f00a fdcf 	bl	80213b4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	891a      	ldrh	r2, [r3, #8]
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	891b      	ldrh	r3, [r3, #8]
 8016820:	429a      	cmp	r2, r3
 8016822:	d005      	beq.n	8016830 <tcp_input+0x154>
 8016824:	4b4d      	ldr	r3, [pc, #308]	@ (801695c <tcp_input+0x280>)
 8016826:	22e0      	movs	r2, #224	@ 0xe0
 8016828:	4956      	ldr	r1, [pc, #344]	@ (8016984 <tcp_input+0x2a8>)
 801682a:	484e      	ldr	r0, [pc, #312]	@ (8016964 <tcp_input+0x288>)
 801682c:	f00a fdc2 	bl	80213b4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8016830:	4b4d      	ldr	r3, [pc, #308]	@ (8016968 <tcp_input+0x28c>)
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	881b      	ldrh	r3, [r3, #0]
 8016836:	b29b      	uxth	r3, r3
 8016838:	4a4b      	ldr	r2, [pc, #300]	@ (8016968 <tcp_input+0x28c>)
 801683a:	6814      	ldr	r4, [r2, #0]
 801683c:	4618      	mov	r0, r3
 801683e:	f7fb fedd 	bl	80125fc <lwip_htons>
 8016842:	4603      	mov	r3, r0
 8016844:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8016846:	4b48      	ldr	r3, [pc, #288]	@ (8016968 <tcp_input+0x28c>)
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	885b      	ldrh	r3, [r3, #2]
 801684c:	b29b      	uxth	r3, r3
 801684e:	4a46      	ldr	r2, [pc, #280]	@ (8016968 <tcp_input+0x28c>)
 8016850:	6814      	ldr	r4, [r2, #0]
 8016852:	4618      	mov	r0, r3
 8016854:	f7fb fed2 	bl	80125fc <lwip_htons>
 8016858:	4603      	mov	r3, r0
 801685a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801685c:	4b42      	ldr	r3, [pc, #264]	@ (8016968 <tcp_input+0x28c>)
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	685b      	ldr	r3, [r3, #4]
 8016862:	4a41      	ldr	r2, [pc, #260]	@ (8016968 <tcp_input+0x28c>)
 8016864:	6814      	ldr	r4, [r2, #0]
 8016866:	4618      	mov	r0, r3
 8016868:	f7fb fede 	bl	8012628 <lwip_htonl>
 801686c:	4603      	mov	r3, r0
 801686e:	6063      	str	r3, [r4, #4]
 8016870:	6863      	ldr	r3, [r4, #4]
 8016872:	4a45      	ldr	r2, [pc, #276]	@ (8016988 <tcp_input+0x2ac>)
 8016874:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8016876:	4b3c      	ldr	r3, [pc, #240]	@ (8016968 <tcp_input+0x28c>)
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	689b      	ldr	r3, [r3, #8]
 801687c:	4a3a      	ldr	r2, [pc, #232]	@ (8016968 <tcp_input+0x28c>)
 801687e:	6814      	ldr	r4, [r2, #0]
 8016880:	4618      	mov	r0, r3
 8016882:	f7fb fed1 	bl	8012628 <lwip_htonl>
 8016886:	4603      	mov	r3, r0
 8016888:	60a3      	str	r3, [r4, #8]
 801688a:	68a3      	ldr	r3, [r4, #8]
 801688c:	4a3f      	ldr	r2, [pc, #252]	@ (801698c <tcp_input+0x2b0>)
 801688e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8016890:	4b35      	ldr	r3, [pc, #212]	@ (8016968 <tcp_input+0x28c>)
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	89db      	ldrh	r3, [r3, #14]
 8016896:	b29b      	uxth	r3, r3
 8016898:	4a33      	ldr	r2, [pc, #204]	@ (8016968 <tcp_input+0x28c>)
 801689a:	6814      	ldr	r4, [r2, #0]
 801689c:	4618      	mov	r0, r3
 801689e:	f7fb fead 	bl	80125fc <lwip_htons>
 80168a2:	4603      	mov	r3, r0
 80168a4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80168a6:	4b30      	ldr	r3, [pc, #192]	@ (8016968 <tcp_input+0x28c>)
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	899b      	ldrh	r3, [r3, #12]
 80168ac:	b29b      	uxth	r3, r3
 80168ae:	4618      	mov	r0, r3
 80168b0:	f7fb fea4 	bl	80125fc <lwip_htons>
 80168b4:	4603      	mov	r3, r0
 80168b6:	b2db      	uxtb	r3, r3
 80168b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80168bc:	b2da      	uxtb	r2, r3
 80168be:	4b34      	ldr	r3, [pc, #208]	@ (8016990 <tcp_input+0x2b4>)
 80168c0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	891a      	ldrh	r2, [r3, #8]
 80168c6:	4b33      	ldr	r3, [pc, #204]	@ (8016994 <tcp_input+0x2b8>)
 80168c8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80168ca:	4b31      	ldr	r3, [pc, #196]	@ (8016990 <tcp_input+0x2b4>)
 80168cc:	781b      	ldrb	r3, [r3, #0]
 80168ce:	f003 0303 	and.w	r3, r3, #3
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d00c      	beq.n	80168f0 <tcp_input+0x214>
    tcplen++;
 80168d6:	4b2f      	ldr	r3, [pc, #188]	@ (8016994 <tcp_input+0x2b8>)
 80168d8:	881b      	ldrh	r3, [r3, #0]
 80168da:	3301      	adds	r3, #1
 80168dc:	b29a      	uxth	r2, r3
 80168de:	4b2d      	ldr	r3, [pc, #180]	@ (8016994 <tcp_input+0x2b8>)
 80168e0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	891a      	ldrh	r2, [r3, #8]
 80168e6:	4b2b      	ldr	r3, [pc, #172]	@ (8016994 <tcp_input+0x2b8>)
 80168e8:	881b      	ldrh	r3, [r3, #0]
 80168ea:	429a      	cmp	r2, r3
 80168ec:	f200 82e6 	bhi.w	8016ebc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80168f0:	2300      	movs	r3, #0
 80168f2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80168f4:	4b28      	ldr	r3, [pc, #160]	@ (8016998 <tcp_input+0x2bc>)
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	61fb      	str	r3, [r7, #28]
 80168fa:	e09d      	b.n	8016a38 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80168fc:	69fb      	ldr	r3, [r7, #28]
 80168fe:	7d1b      	ldrb	r3, [r3, #20]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d105      	bne.n	8016910 <tcp_input+0x234>
 8016904:	4b15      	ldr	r3, [pc, #84]	@ (801695c <tcp_input+0x280>)
 8016906:	22fb      	movs	r2, #251	@ 0xfb
 8016908:	4924      	ldr	r1, [pc, #144]	@ (801699c <tcp_input+0x2c0>)
 801690a:	4816      	ldr	r0, [pc, #88]	@ (8016964 <tcp_input+0x288>)
 801690c:	f00a fd52 	bl	80213b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8016910:	69fb      	ldr	r3, [r7, #28]
 8016912:	7d1b      	ldrb	r3, [r3, #20]
 8016914:	2b0a      	cmp	r3, #10
 8016916:	d105      	bne.n	8016924 <tcp_input+0x248>
 8016918:	4b10      	ldr	r3, [pc, #64]	@ (801695c <tcp_input+0x280>)
 801691a:	22fc      	movs	r2, #252	@ 0xfc
 801691c:	4920      	ldr	r1, [pc, #128]	@ (80169a0 <tcp_input+0x2c4>)
 801691e:	4811      	ldr	r0, [pc, #68]	@ (8016964 <tcp_input+0x288>)
 8016920:	f00a fd48 	bl	80213b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8016924:	69fb      	ldr	r3, [r7, #28]
 8016926:	7d1b      	ldrb	r3, [r3, #20]
 8016928:	2b01      	cmp	r3, #1
 801692a:	d105      	bne.n	8016938 <tcp_input+0x25c>
 801692c:	4b0b      	ldr	r3, [pc, #44]	@ (801695c <tcp_input+0x280>)
 801692e:	22fd      	movs	r2, #253	@ 0xfd
 8016930:	491c      	ldr	r1, [pc, #112]	@ (80169a4 <tcp_input+0x2c8>)
 8016932:	480c      	ldr	r0, [pc, #48]	@ (8016964 <tcp_input+0x288>)
 8016934:	f00a fd3e 	bl	80213b4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016938:	69fb      	ldr	r3, [r7, #28]
 801693a:	7a1b      	ldrb	r3, [r3, #8]
 801693c:	2b00      	cmp	r3, #0
 801693e:	d033      	beq.n	80169a8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016940:	69fb      	ldr	r3, [r7, #28]
 8016942:	7a1a      	ldrb	r2, [r3, #8]
 8016944:	4b09      	ldr	r3, [pc, #36]	@ (801696c <tcp_input+0x290>)
 8016946:	685b      	ldr	r3, [r3, #4]
 8016948:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801694c:	3301      	adds	r3, #1
 801694e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016950:	429a      	cmp	r2, r3
 8016952:	d029      	beq.n	80169a8 <tcp_input+0x2cc>
      prev = pcb;
 8016954:	69fb      	ldr	r3, [r7, #28]
 8016956:	61bb      	str	r3, [r7, #24]
      continue;
 8016958:	e06b      	b.n	8016a32 <tcp_input+0x356>
 801695a:	bf00      	nop
 801695c:	080248b8 	.word	0x080248b8
 8016960:	080248ec 	.word	0x080248ec
 8016964:	08024904 	.word	0x08024904
 8016968:	20004c10 	.word	0x20004c10
 801696c:	20004bb4 	.word	0x20004bb4
 8016970:	20004c14 	.word	0x20004c14
 8016974:	20004c18 	.word	0x20004c18
 8016978:	20004c16 	.word	0x20004c16
 801697c:	0802492c 	.word	0x0802492c
 8016980:	0802493c 	.word	0x0802493c
 8016984:	08024948 	.word	0x08024948
 8016988:	20004c20 	.word	0x20004c20
 801698c:	20004c24 	.word	0x20004c24
 8016990:	20004c2c 	.word	0x20004c2c
 8016994:	20004c2a 	.word	0x20004c2a
 8016998:	20004bf4 	.word	0x20004bf4
 801699c:	08024968 	.word	0x08024968
 80169a0:	08024990 	.word	0x08024990
 80169a4:	080249bc 	.word	0x080249bc
    }

    if (pcb->remote_port == tcphdr->src &&
 80169a8:	69fb      	ldr	r3, [r7, #28]
 80169aa:	8b1a      	ldrh	r2, [r3, #24]
 80169ac:	4b72      	ldr	r3, [pc, #456]	@ (8016b78 <tcp_input+0x49c>)
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	881b      	ldrh	r3, [r3, #0]
 80169b2:	b29b      	uxth	r3, r3
 80169b4:	429a      	cmp	r2, r3
 80169b6:	d13a      	bne.n	8016a2e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80169b8:	69fb      	ldr	r3, [r7, #28]
 80169ba:	8ada      	ldrh	r2, [r3, #22]
 80169bc:	4b6e      	ldr	r3, [pc, #440]	@ (8016b78 <tcp_input+0x49c>)
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	885b      	ldrh	r3, [r3, #2]
 80169c2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80169c4:	429a      	cmp	r2, r3
 80169c6:	d132      	bne.n	8016a2e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80169c8:	69fb      	ldr	r3, [r7, #28]
 80169ca:	685a      	ldr	r2, [r3, #4]
 80169cc:	4b6b      	ldr	r3, [pc, #428]	@ (8016b7c <tcp_input+0x4a0>)
 80169ce:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80169d0:	429a      	cmp	r2, r3
 80169d2:	d12c      	bne.n	8016a2e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80169d4:	69fb      	ldr	r3, [r7, #28]
 80169d6:	681a      	ldr	r2, [r3, #0]
 80169d8:	4b68      	ldr	r3, [pc, #416]	@ (8016b7c <tcp_input+0x4a0>)
 80169da:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80169dc:	429a      	cmp	r2, r3
 80169de:	d126      	bne.n	8016a2e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80169e0:	69fb      	ldr	r3, [r7, #28]
 80169e2:	68db      	ldr	r3, [r3, #12]
 80169e4:	69fa      	ldr	r2, [r7, #28]
 80169e6:	429a      	cmp	r2, r3
 80169e8:	d106      	bne.n	80169f8 <tcp_input+0x31c>
 80169ea:	4b65      	ldr	r3, [pc, #404]	@ (8016b80 <tcp_input+0x4a4>)
 80169ec:	f240 120d 	movw	r2, #269	@ 0x10d
 80169f0:	4964      	ldr	r1, [pc, #400]	@ (8016b84 <tcp_input+0x4a8>)
 80169f2:	4865      	ldr	r0, [pc, #404]	@ (8016b88 <tcp_input+0x4ac>)
 80169f4:	f00a fcde 	bl	80213b4 <iprintf>
      if (prev != NULL) {
 80169f8:	69bb      	ldr	r3, [r7, #24]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d00a      	beq.n	8016a14 <tcp_input+0x338>
        prev->next = pcb->next;
 80169fe:	69fb      	ldr	r3, [r7, #28]
 8016a00:	68da      	ldr	r2, [r3, #12]
 8016a02:	69bb      	ldr	r3, [r7, #24]
 8016a04:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8016a06:	4b61      	ldr	r3, [pc, #388]	@ (8016b8c <tcp_input+0x4b0>)
 8016a08:	681a      	ldr	r2, [r3, #0]
 8016a0a:	69fb      	ldr	r3, [r7, #28]
 8016a0c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8016a0e:	4a5f      	ldr	r2, [pc, #380]	@ (8016b8c <tcp_input+0x4b0>)
 8016a10:	69fb      	ldr	r3, [r7, #28]
 8016a12:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8016a14:	69fb      	ldr	r3, [r7, #28]
 8016a16:	68db      	ldr	r3, [r3, #12]
 8016a18:	69fa      	ldr	r2, [r7, #28]
 8016a1a:	429a      	cmp	r2, r3
 8016a1c:	d111      	bne.n	8016a42 <tcp_input+0x366>
 8016a1e:	4b58      	ldr	r3, [pc, #352]	@ (8016b80 <tcp_input+0x4a4>)
 8016a20:	f240 1215 	movw	r2, #277	@ 0x115
 8016a24:	495a      	ldr	r1, [pc, #360]	@ (8016b90 <tcp_input+0x4b4>)
 8016a26:	4858      	ldr	r0, [pc, #352]	@ (8016b88 <tcp_input+0x4ac>)
 8016a28:	f00a fcc4 	bl	80213b4 <iprintf>
      break;
 8016a2c:	e009      	b.n	8016a42 <tcp_input+0x366>
    }
    prev = pcb;
 8016a2e:	69fb      	ldr	r3, [r7, #28]
 8016a30:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016a32:	69fb      	ldr	r3, [r7, #28]
 8016a34:	68db      	ldr	r3, [r3, #12]
 8016a36:	61fb      	str	r3, [r7, #28]
 8016a38:	69fb      	ldr	r3, [r7, #28]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	f47f af5e 	bne.w	80168fc <tcp_input+0x220>
 8016a40:	e000      	b.n	8016a44 <tcp_input+0x368>
      break;
 8016a42:	bf00      	nop
  }

  if (pcb == NULL) {
 8016a44:	69fb      	ldr	r3, [r7, #28]
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	f040 80aa 	bne.w	8016ba0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016a4c:	4b51      	ldr	r3, [pc, #324]	@ (8016b94 <tcp_input+0x4b8>)
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	61fb      	str	r3, [r7, #28]
 8016a52:	e03f      	b.n	8016ad4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016a54:	69fb      	ldr	r3, [r7, #28]
 8016a56:	7d1b      	ldrb	r3, [r3, #20]
 8016a58:	2b0a      	cmp	r3, #10
 8016a5a:	d006      	beq.n	8016a6a <tcp_input+0x38e>
 8016a5c:	4b48      	ldr	r3, [pc, #288]	@ (8016b80 <tcp_input+0x4a4>)
 8016a5e:	f240 121f 	movw	r2, #287	@ 0x11f
 8016a62:	494d      	ldr	r1, [pc, #308]	@ (8016b98 <tcp_input+0x4bc>)
 8016a64:	4848      	ldr	r0, [pc, #288]	@ (8016b88 <tcp_input+0x4ac>)
 8016a66:	f00a fca5 	bl	80213b4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016a6a:	69fb      	ldr	r3, [r7, #28]
 8016a6c:	7a1b      	ldrb	r3, [r3, #8]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d009      	beq.n	8016a86 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016a72:	69fb      	ldr	r3, [r7, #28]
 8016a74:	7a1a      	ldrb	r2, [r3, #8]
 8016a76:	4b41      	ldr	r3, [pc, #260]	@ (8016b7c <tcp_input+0x4a0>)
 8016a78:	685b      	ldr	r3, [r3, #4]
 8016a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016a7e:	3301      	adds	r3, #1
 8016a80:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016a82:	429a      	cmp	r2, r3
 8016a84:	d122      	bne.n	8016acc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8016a86:	69fb      	ldr	r3, [r7, #28]
 8016a88:	8b1a      	ldrh	r2, [r3, #24]
 8016a8a:	4b3b      	ldr	r3, [pc, #236]	@ (8016b78 <tcp_input+0x49c>)
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	881b      	ldrh	r3, [r3, #0]
 8016a90:	b29b      	uxth	r3, r3
 8016a92:	429a      	cmp	r2, r3
 8016a94:	d11b      	bne.n	8016ace <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8016a96:	69fb      	ldr	r3, [r7, #28]
 8016a98:	8ada      	ldrh	r2, [r3, #22]
 8016a9a:	4b37      	ldr	r3, [pc, #220]	@ (8016b78 <tcp_input+0x49c>)
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	885b      	ldrh	r3, [r3, #2]
 8016aa0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8016aa2:	429a      	cmp	r2, r3
 8016aa4:	d113      	bne.n	8016ace <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016aa6:	69fb      	ldr	r3, [r7, #28]
 8016aa8:	685a      	ldr	r2, [r3, #4]
 8016aaa:	4b34      	ldr	r3, [pc, #208]	@ (8016b7c <tcp_input+0x4a0>)
 8016aac:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8016aae:	429a      	cmp	r2, r3
 8016ab0:	d10d      	bne.n	8016ace <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016ab2:	69fb      	ldr	r3, [r7, #28]
 8016ab4:	681a      	ldr	r2, [r3, #0]
 8016ab6:	4b31      	ldr	r3, [pc, #196]	@ (8016b7c <tcp_input+0x4a0>)
 8016ab8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016aba:	429a      	cmp	r2, r3
 8016abc:	d107      	bne.n	8016ace <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8016abe:	69f8      	ldr	r0, [r7, #28]
 8016ac0:	f000 fb56 	bl	8017170 <tcp_timewait_input>
        }
        pbuf_free(p);
 8016ac4:	6878      	ldr	r0, [r7, #4]
 8016ac6:	f7fd fb57 	bl	8014178 <pbuf_free>
        return;
 8016aca:	e1fd      	b.n	8016ec8 <tcp_input+0x7ec>
        continue;
 8016acc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016ace:	69fb      	ldr	r3, [r7, #28]
 8016ad0:	68db      	ldr	r3, [r3, #12]
 8016ad2:	61fb      	str	r3, [r7, #28]
 8016ad4:	69fb      	ldr	r3, [r7, #28]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d1bc      	bne.n	8016a54 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016ada:	2300      	movs	r3, #0
 8016adc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016ade:	4b2f      	ldr	r3, [pc, #188]	@ (8016b9c <tcp_input+0x4c0>)
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	617b      	str	r3, [r7, #20]
 8016ae4:	e02a      	b.n	8016b3c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016ae6:	697b      	ldr	r3, [r7, #20]
 8016ae8:	7a1b      	ldrb	r3, [r3, #8]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d00c      	beq.n	8016b08 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016aee:	697b      	ldr	r3, [r7, #20]
 8016af0:	7a1a      	ldrb	r2, [r3, #8]
 8016af2:	4b22      	ldr	r3, [pc, #136]	@ (8016b7c <tcp_input+0x4a0>)
 8016af4:	685b      	ldr	r3, [r3, #4]
 8016af6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8016afa:	3301      	adds	r3, #1
 8016afc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016afe:	429a      	cmp	r2, r3
 8016b00:	d002      	beq.n	8016b08 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8016b02:	697b      	ldr	r3, [r7, #20]
 8016b04:	61bb      	str	r3, [r7, #24]
        continue;
 8016b06:	e016      	b.n	8016b36 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8016b08:	697b      	ldr	r3, [r7, #20]
 8016b0a:	8ada      	ldrh	r2, [r3, #22]
 8016b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8016b78 <tcp_input+0x49c>)
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	885b      	ldrh	r3, [r3, #2]
 8016b12:	b29b      	uxth	r3, r3
 8016b14:	429a      	cmp	r2, r3
 8016b16:	d10c      	bne.n	8016b32 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8016b18:	697b      	ldr	r3, [r7, #20]
 8016b1a:	681a      	ldr	r2, [r3, #0]
 8016b1c:	4b17      	ldr	r3, [pc, #92]	@ (8016b7c <tcp_input+0x4a0>)
 8016b1e:	695b      	ldr	r3, [r3, #20]
 8016b20:	429a      	cmp	r2, r3
 8016b22:	d00f      	beq.n	8016b44 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8016b24:	697b      	ldr	r3, [r7, #20]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d00d      	beq.n	8016b46 <tcp_input+0x46a>
 8016b2a:	697b      	ldr	r3, [r7, #20]
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d009      	beq.n	8016b46 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8016b32:	697b      	ldr	r3, [r7, #20]
 8016b34:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016b36:	697b      	ldr	r3, [r7, #20]
 8016b38:	68db      	ldr	r3, [r3, #12]
 8016b3a:	617b      	str	r3, [r7, #20]
 8016b3c:	697b      	ldr	r3, [r7, #20]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d1d1      	bne.n	8016ae6 <tcp_input+0x40a>
 8016b42:	e000      	b.n	8016b46 <tcp_input+0x46a>
            break;
 8016b44:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8016b46:	697b      	ldr	r3, [r7, #20]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d029      	beq.n	8016ba0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8016b4c:	69bb      	ldr	r3, [r7, #24]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d00a      	beq.n	8016b68 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8016b52:	697b      	ldr	r3, [r7, #20]
 8016b54:	68da      	ldr	r2, [r3, #12]
 8016b56:	69bb      	ldr	r3, [r7, #24]
 8016b58:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8016b5a:	4b10      	ldr	r3, [pc, #64]	@ (8016b9c <tcp_input+0x4c0>)
 8016b5c:	681a      	ldr	r2, [r3, #0]
 8016b5e:	697b      	ldr	r3, [r7, #20]
 8016b60:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8016b62:	4a0e      	ldr	r2, [pc, #56]	@ (8016b9c <tcp_input+0x4c0>)
 8016b64:	697b      	ldr	r3, [r7, #20]
 8016b66:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8016b68:	6978      	ldr	r0, [r7, #20]
 8016b6a:	f000 fa03 	bl	8016f74 <tcp_listen_input>
      }
      pbuf_free(p);
 8016b6e:	6878      	ldr	r0, [r7, #4]
 8016b70:	f7fd fb02 	bl	8014178 <pbuf_free>
      return;
 8016b74:	e1a8      	b.n	8016ec8 <tcp_input+0x7ec>
 8016b76:	bf00      	nop
 8016b78:	20004c10 	.word	0x20004c10
 8016b7c:	20004bb4 	.word	0x20004bb4
 8016b80:	080248b8 	.word	0x080248b8
 8016b84:	080249e4 	.word	0x080249e4
 8016b88:	08024904 	.word	0x08024904
 8016b8c:	20004bf4 	.word	0x20004bf4
 8016b90:	08024a10 	.word	0x08024a10
 8016b94:	20004bf8 	.word	0x20004bf8
 8016b98:	08024a3c 	.word	0x08024a3c
 8016b9c:	20004bf0 	.word	0x20004bf0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8016ba0:	69fb      	ldr	r3, [r7, #28]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	f000 8158 	beq.w	8016e58 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8016ba8:	4b95      	ldr	r3, [pc, #596]	@ (8016e00 <tcp_input+0x724>)
 8016baa:	2200      	movs	r2, #0
 8016bac:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	891a      	ldrh	r2, [r3, #8]
 8016bb2:	4b93      	ldr	r3, [pc, #588]	@ (8016e00 <tcp_input+0x724>)
 8016bb4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8016bb6:	4a92      	ldr	r2, [pc, #584]	@ (8016e00 <tcp_input+0x724>)
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016bbc:	4b91      	ldr	r3, [pc, #580]	@ (8016e04 <tcp_input+0x728>)
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	4a8f      	ldr	r2, [pc, #572]	@ (8016e00 <tcp_input+0x724>)
 8016bc2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8016bc4:	4b90      	ldr	r3, [pc, #576]	@ (8016e08 <tcp_input+0x72c>)
 8016bc6:	2200      	movs	r2, #0
 8016bc8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8016bca:	4b90      	ldr	r3, [pc, #576]	@ (8016e0c <tcp_input+0x730>)
 8016bcc:	2200      	movs	r2, #0
 8016bce:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8016bd0:	4b8f      	ldr	r3, [pc, #572]	@ (8016e10 <tcp_input+0x734>)
 8016bd2:	2200      	movs	r2, #0
 8016bd4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8016bd6:	4b8f      	ldr	r3, [pc, #572]	@ (8016e14 <tcp_input+0x738>)
 8016bd8:	781b      	ldrb	r3, [r3, #0]
 8016bda:	f003 0308 	and.w	r3, r3, #8
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d006      	beq.n	8016bf0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	7b5b      	ldrb	r3, [r3, #13]
 8016be6:	f043 0301 	orr.w	r3, r3, #1
 8016bea:	b2da      	uxtb	r2, r3
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8016bf0:	69fb      	ldr	r3, [r7, #28]
 8016bf2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d017      	beq.n	8016c28 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016bf8:	69f8      	ldr	r0, [r7, #28]
 8016bfa:	f7ff f83d 	bl	8015c78 <tcp_process_refused_data>
 8016bfe:	4603      	mov	r3, r0
 8016c00:	f113 0f0d 	cmn.w	r3, #13
 8016c04:	d007      	beq.n	8016c16 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016c06:	69fb      	ldr	r3, [r7, #28]
 8016c08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d00c      	beq.n	8016c28 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016c0e:	4b82      	ldr	r3, [pc, #520]	@ (8016e18 <tcp_input+0x73c>)
 8016c10:	881b      	ldrh	r3, [r3, #0]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d008      	beq.n	8016c28 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8016c16:	69fb      	ldr	r3, [r7, #28]
 8016c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	f040 80e3 	bne.w	8016de6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8016c20:	69f8      	ldr	r0, [r7, #28]
 8016c22:	f003 fdff 	bl	801a824 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8016c26:	e0de      	b.n	8016de6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8016c28:	4a7c      	ldr	r2, [pc, #496]	@ (8016e1c <tcp_input+0x740>)
 8016c2a:	69fb      	ldr	r3, [r7, #28]
 8016c2c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8016c2e:	69f8      	ldr	r0, [r7, #28]
 8016c30:	f000 fb18 	bl	8017264 <tcp_process>
 8016c34:	4603      	mov	r3, r0
 8016c36:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8016c38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016c3c:	f113 0f0d 	cmn.w	r3, #13
 8016c40:	f000 80d3 	beq.w	8016dea <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8016c44:	4b71      	ldr	r3, [pc, #452]	@ (8016e0c <tcp_input+0x730>)
 8016c46:	781b      	ldrb	r3, [r3, #0]
 8016c48:	f003 0308 	and.w	r3, r3, #8
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d015      	beq.n	8016c7c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8016c50:	69fb      	ldr	r3, [r7, #28]
 8016c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d008      	beq.n	8016c6c <tcp_input+0x590>
 8016c5a:	69fb      	ldr	r3, [r7, #28]
 8016c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016c60:	69fa      	ldr	r2, [r7, #28]
 8016c62:	6912      	ldr	r2, [r2, #16]
 8016c64:	f06f 010d 	mvn.w	r1, #13
 8016c68:	4610      	mov	r0, r2
 8016c6a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016c6c:	69f9      	ldr	r1, [r7, #28]
 8016c6e:	486c      	ldr	r0, [pc, #432]	@ (8016e20 <tcp_input+0x744>)
 8016c70:	f7ff fbbc 	bl	80163ec <tcp_pcb_remove>
        tcp_free(pcb);
 8016c74:	69f8      	ldr	r0, [r7, #28]
 8016c76:	f7fd ff01 	bl	8014a7c <tcp_free>
 8016c7a:	e0da      	b.n	8016e32 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8016c7c:	2300      	movs	r3, #0
 8016c7e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8016c80:	4b63      	ldr	r3, [pc, #396]	@ (8016e10 <tcp_input+0x734>)
 8016c82:	881b      	ldrh	r3, [r3, #0]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d01d      	beq.n	8016cc4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8016c88:	4b61      	ldr	r3, [pc, #388]	@ (8016e10 <tcp_input+0x734>)
 8016c8a:	881b      	ldrh	r3, [r3, #0]
 8016c8c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8016c8e:	69fb      	ldr	r3, [r7, #28]
 8016c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d00a      	beq.n	8016cae <tcp_input+0x5d2>
 8016c98:	69fb      	ldr	r3, [r7, #28]
 8016c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016c9e:	69fa      	ldr	r2, [r7, #28]
 8016ca0:	6910      	ldr	r0, [r2, #16]
 8016ca2:	89fa      	ldrh	r2, [r7, #14]
 8016ca4:	69f9      	ldr	r1, [r7, #28]
 8016ca6:	4798      	blx	r3
 8016ca8:	4603      	mov	r3, r0
 8016caa:	74fb      	strb	r3, [r7, #19]
 8016cac:	e001      	b.n	8016cb2 <tcp_input+0x5d6>
 8016cae:	2300      	movs	r3, #0
 8016cb0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016cb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016cb6:	f113 0f0d 	cmn.w	r3, #13
 8016cba:	f000 8098 	beq.w	8016dee <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8016cbe:	4b54      	ldr	r3, [pc, #336]	@ (8016e10 <tcp_input+0x734>)
 8016cc0:	2200      	movs	r2, #0
 8016cc2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8016cc4:	69f8      	ldr	r0, [r7, #28]
 8016cc6:	f000 f915 	bl	8016ef4 <tcp_input_delayed_close>
 8016cca:	4603      	mov	r3, r0
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	f040 8090 	bne.w	8016df2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8016cd2:	4b4d      	ldr	r3, [pc, #308]	@ (8016e08 <tcp_input+0x72c>)
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d041      	beq.n	8016d5e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016cda:	69fb      	ldr	r3, [r7, #28]
 8016cdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d006      	beq.n	8016cf0 <tcp_input+0x614>
 8016ce2:	4b50      	ldr	r3, [pc, #320]	@ (8016e24 <tcp_input+0x748>)
 8016ce4:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8016ce8:	494f      	ldr	r1, [pc, #316]	@ (8016e28 <tcp_input+0x74c>)
 8016cea:	4850      	ldr	r0, [pc, #320]	@ (8016e2c <tcp_input+0x750>)
 8016cec:	f00a fb62 	bl	80213b4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8016cf0:	69fb      	ldr	r3, [r7, #28]
 8016cf2:	8b5b      	ldrh	r3, [r3, #26]
 8016cf4:	f003 0310 	and.w	r3, r3, #16
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d008      	beq.n	8016d0e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016cfc:	4b42      	ldr	r3, [pc, #264]	@ (8016e08 <tcp_input+0x72c>)
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	4618      	mov	r0, r3
 8016d02:	f7fd fa39 	bl	8014178 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8016d06:	69f8      	ldr	r0, [r7, #28]
 8016d08:	f7fe f9a0 	bl	801504c <tcp_abort>
            goto aborted;
 8016d0c:	e091      	b.n	8016e32 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8016d0e:	69fb      	ldr	r3, [r7, #28]
 8016d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d00c      	beq.n	8016d32 <tcp_input+0x656>
 8016d18:	69fb      	ldr	r3, [r7, #28]
 8016d1a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016d1e:	69fb      	ldr	r3, [r7, #28]
 8016d20:	6918      	ldr	r0, [r3, #16]
 8016d22:	4b39      	ldr	r3, [pc, #228]	@ (8016e08 <tcp_input+0x72c>)
 8016d24:	681a      	ldr	r2, [r3, #0]
 8016d26:	2300      	movs	r3, #0
 8016d28:	69f9      	ldr	r1, [r7, #28]
 8016d2a:	47a0      	blx	r4
 8016d2c:	4603      	mov	r3, r0
 8016d2e:	74fb      	strb	r3, [r7, #19]
 8016d30:	e008      	b.n	8016d44 <tcp_input+0x668>
 8016d32:	4b35      	ldr	r3, [pc, #212]	@ (8016e08 <tcp_input+0x72c>)
 8016d34:	681a      	ldr	r2, [r3, #0]
 8016d36:	2300      	movs	r3, #0
 8016d38:	69f9      	ldr	r1, [r7, #28]
 8016d3a:	2000      	movs	r0, #0
 8016d3c:	f7ff f890 	bl	8015e60 <tcp_recv_null>
 8016d40:	4603      	mov	r3, r0
 8016d42:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8016d44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016d48:	f113 0f0d 	cmn.w	r3, #13
 8016d4c:	d053      	beq.n	8016df6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8016d4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d003      	beq.n	8016d5e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8016d56:	4b2c      	ldr	r3, [pc, #176]	@ (8016e08 <tcp_input+0x72c>)
 8016d58:	681a      	ldr	r2, [r3, #0]
 8016d5a:	69fb      	ldr	r3, [r7, #28]
 8016d5c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8016d5e:	4b2b      	ldr	r3, [pc, #172]	@ (8016e0c <tcp_input+0x730>)
 8016d60:	781b      	ldrb	r3, [r3, #0]
 8016d62:	f003 0320 	and.w	r3, r3, #32
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d030      	beq.n	8016dcc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8016d6a:	69fb      	ldr	r3, [r7, #28]
 8016d6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d009      	beq.n	8016d86 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8016d72:	69fb      	ldr	r3, [r7, #28]
 8016d74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016d76:	7b5a      	ldrb	r2, [r3, #13]
 8016d78:	69fb      	ldr	r3, [r7, #28]
 8016d7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016d7c:	f042 0220 	orr.w	r2, r2, #32
 8016d80:	b2d2      	uxtb	r2, r2
 8016d82:	735a      	strb	r2, [r3, #13]
 8016d84:	e022      	b.n	8016dcc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016d86:	69fb      	ldr	r3, [r7, #28]
 8016d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016d8a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8016d8e:	d005      	beq.n	8016d9c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8016d90:	69fb      	ldr	r3, [r7, #28]
 8016d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016d94:	3301      	adds	r3, #1
 8016d96:	b29a      	uxth	r2, r3
 8016d98:	69fb      	ldr	r3, [r7, #28]
 8016d9a:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016d9c:	69fb      	ldr	r3, [r7, #28]
 8016d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d00b      	beq.n	8016dbe <tcp_input+0x6e2>
 8016da6:	69fb      	ldr	r3, [r7, #28]
 8016da8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016dac:	69fb      	ldr	r3, [r7, #28]
 8016dae:	6918      	ldr	r0, [r3, #16]
 8016db0:	2300      	movs	r3, #0
 8016db2:	2200      	movs	r2, #0
 8016db4:	69f9      	ldr	r1, [r7, #28]
 8016db6:	47a0      	blx	r4
 8016db8:	4603      	mov	r3, r0
 8016dba:	74fb      	strb	r3, [r7, #19]
 8016dbc:	e001      	b.n	8016dc2 <tcp_input+0x6e6>
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016dc2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016dc6:	f113 0f0d 	cmn.w	r3, #13
 8016dca:	d016      	beq.n	8016dfa <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016dcc:	4b13      	ldr	r3, [pc, #76]	@ (8016e1c <tcp_input+0x740>)
 8016dce:	2200      	movs	r2, #0
 8016dd0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8016dd2:	69f8      	ldr	r0, [r7, #28]
 8016dd4:	f000 f88e 	bl	8016ef4 <tcp_input_delayed_close>
 8016dd8:	4603      	mov	r3, r0
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d128      	bne.n	8016e30 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8016dde:	69f8      	ldr	r0, [r7, #28]
 8016de0:	f002 ff1a 	bl	8019c18 <tcp_output>
 8016de4:	e025      	b.n	8016e32 <tcp_input+0x756>
        goto aborted;
 8016de6:	bf00      	nop
 8016de8:	e023      	b.n	8016e32 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016dea:	bf00      	nop
 8016dec:	e021      	b.n	8016e32 <tcp_input+0x756>
              goto aborted;
 8016dee:	bf00      	nop
 8016df0:	e01f      	b.n	8016e32 <tcp_input+0x756>
          goto aborted;
 8016df2:	bf00      	nop
 8016df4:	e01d      	b.n	8016e32 <tcp_input+0x756>
            goto aborted;
 8016df6:	bf00      	nop
 8016df8:	e01b      	b.n	8016e32 <tcp_input+0x756>
              goto aborted;
 8016dfa:	bf00      	nop
 8016dfc:	e019      	b.n	8016e32 <tcp_input+0x756>
 8016dfe:	bf00      	nop
 8016e00:	20004c00 	.word	0x20004c00
 8016e04:	20004c10 	.word	0x20004c10
 8016e08:	20004c30 	.word	0x20004c30
 8016e0c:	20004c2d 	.word	0x20004c2d
 8016e10:	20004c28 	.word	0x20004c28
 8016e14:	20004c2c 	.word	0x20004c2c
 8016e18:	20004c2a 	.word	0x20004c2a
 8016e1c:	20004c34 	.word	0x20004c34
 8016e20:	20004bf4 	.word	0x20004bf4
 8016e24:	080248b8 	.word	0x080248b8
 8016e28:	08024a6c 	.word	0x08024a6c
 8016e2c:	08024904 	.word	0x08024904
          goto aborted;
 8016e30:	bf00      	nop
    tcp_input_pcb = NULL;
 8016e32:	4b27      	ldr	r3, [pc, #156]	@ (8016ed0 <tcp_input+0x7f4>)
 8016e34:	2200      	movs	r2, #0
 8016e36:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8016e38:	4b26      	ldr	r3, [pc, #152]	@ (8016ed4 <tcp_input+0x7f8>)
 8016e3a:	2200      	movs	r2, #0
 8016e3c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8016e3e:	4b26      	ldr	r3, [pc, #152]	@ (8016ed8 <tcp_input+0x7fc>)
 8016e40:	685b      	ldr	r3, [r3, #4]
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d03f      	beq.n	8016ec6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8016e46:	4b24      	ldr	r3, [pc, #144]	@ (8016ed8 <tcp_input+0x7fc>)
 8016e48:	685b      	ldr	r3, [r3, #4]
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	f7fd f994 	bl	8014178 <pbuf_free>
      inseg.p = NULL;
 8016e50:	4b21      	ldr	r3, [pc, #132]	@ (8016ed8 <tcp_input+0x7fc>)
 8016e52:	2200      	movs	r2, #0
 8016e54:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8016e56:	e036      	b.n	8016ec6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8016e58:	4b20      	ldr	r3, [pc, #128]	@ (8016edc <tcp_input+0x800>)
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	899b      	ldrh	r3, [r3, #12]
 8016e5e:	b29b      	uxth	r3, r3
 8016e60:	4618      	mov	r0, r3
 8016e62:	f7fb fbcb 	bl	80125fc <lwip_htons>
 8016e66:	4603      	mov	r3, r0
 8016e68:	b2db      	uxtb	r3, r3
 8016e6a:	f003 0304 	and.w	r3, r3, #4
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d118      	bne.n	8016ea4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016e72:	4b1b      	ldr	r3, [pc, #108]	@ (8016ee0 <tcp_input+0x804>)
 8016e74:	6819      	ldr	r1, [r3, #0]
 8016e76:	4b1b      	ldr	r3, [pc, #108]	@ (8016ee4 <tcp_input+0x808>)
 8016e78:	881b      	ldrh	r3, [r3, #0]
 8016e7a:	461a      	mov	r2, r3
 8016e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8016ee8 <tcp_input+0x80c>)
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016e82:	4b16      	ldr	r3, [pc, #88]	@ (8016edc <tcp_input+0x800>)
 8016e84:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016e86:	885b      	ldrh	r3, [r3, #2]
 8016e88:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016e8a:	4a14      	ldr	r2, [pc, #80]	@ (8016edc <tcp_input+0x800>)
 8016e8c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016e8e:	8812      	ldrh	r2, [r2, #0]
 8016e90:	b292      	uxth	r2, r2
 8016e92:	9202      	str	r2, [sp, #8]
 8016e94:	9301      	str	r3, [sp, #4]
 8016e96:	4b15      	ldr	r3, [pc, #84]	@ (8016eec <tcp_input+0x810>)
 8016e98:	9300      	str	r3, [sp, #0]
 8016e9a:	4b15      	ldr	r3, [pc, #84]	@ (8016ef0 <tcp_input+0x814>)
 8016e9c:	4602      	mov	r2, r0
 8016e9e:	2000      	movs	r0, #0
 8016ea0:	f003 fc6e 	bl	801a780 <tcp_rst>
    pbuf_free(p);
 8016ea4:	6878      	ldr	r0, [r7, #4]
 8016ea6:	f7fd f967 	bl	8014178 <pbuf_free>
  return;
 8016eaa:	e00c      	b.n	8016ec6 <tcp_input+0x7ea>
    goto dropped;
 8016eac:	bf00      	nop
 8016eae:	e006      	b.n	8016ebe <tcp_input+0x7e2>
    goto dropped;
 8016eb0:	bf00      	nop
 8016eb2:	e004      	b.n	8016ebe <tcp_input+0x7e2>
    goto dropped;
 8016eb4:	bf00      	nop
 8016eb6:	e002      	b.n	8016ebe <tcp_input+0x7e2>
      goto dropped;
 8016eb8:	bf00      	nop
 8016eba:	e000      	b.n	8016ebe <tcp_input+0x7e2>
      goto dropped;
 8016ebc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8016ebe:	6878      	ldr	r0, [r7, #4]
 8016ec0:	f7fd f95a 	bl	8014178 <pbuf_free>
 8016ec4:	e000      	b.n	8016ec8 <tcp_input+0x7ec>
  return;
 8016ec6:	bf00      	nop
}
 8016ec8:	3724      	adds	r7, #36	@ 0x24
 8016eca:	46bd      	mov	sp, r7
 8016ecc:	bd90      	pop	{r4, r7, pc}
 8016ece:	bf00      	nop
 8016ed0:	20004c34 	.word	0x20004c34
 8016ed4:	20004c30 	.word	0x20004c30
 8016ed8:	20004c00 	.word	0x20004c00
 8016edc:	20004c10 	.word	0x20004c10
 8016ee0:	20004c24 	.word	0x20004c24
 8016ee4:	20004c2a 	.word	0x20004c2a
 8016ee8:	20004c20 	.word	0x20004c20
 8016eec:	20004bc4 	.word	0x20004bc4
 8016ef0:	20004bc8 	.word	0x20004bc8

08016ef4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8016ef4:	b580      	push	{r7, lr}
 8016ef6:	b082      	sub	sp, #8
 8016ef8:	af00      	add	r7, sp, #0
 8016efa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d106      	bne.n	8016f10 <tcp_input_delayed_close+0x1c>
 8016f02:	4b17      	ldr	r3, [pc, #92]	@ (8016f60 <tcp_input_delayed_close+0x6c>)
 8016f04:	f240 225a 	movw	r2, #602	@ 0x25a
 8016f08:	4916      	ldr	r1, [pc, #88]	@ (8016f64 <tcp_input_delayed_close+0x70>)
 8016f0a:	4817      	ldr	r0, [pc, #92]	@ (8016f68 <tcp_input_delayed_close+0x74>)
 8016f0c:	f00a fa52 	bl	80213b4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8016f10:	4b16      	ldr	r3, [pc, #88]	@ (8016f6c <tcp_input_delayed_close+0x78>)
 8016f12:	781b      	ldrb	r3, [r3, #0]
 8016f14:	f003 0310 	and.w	r3, r3, #16
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d01c      	beq.n	8016f56 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	8b5b      	ldrh	r3, [r3, #26]
 8016f20:	f003 0310 	and.w	r3, r3, #16
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d10d      	bne.n	8016f44 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d008      	beq.n	8016f44 <tcp_input_delayed_close+0x50>
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016f38:	687a      	ldr	r2, [r7, #4]
 8016f3a:	6912      	ldr	r2, [r2, #16]
 8016f3c:	f06f 010e 	mvn.w	r1, #14
 8016f40:	4610      	mov	r0, r2
 8016f42:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016f44:	6879      	ldr	r1, [r7, #4]
 8016f46:	480a      	ldr	r0, [pc, #40]	@ (8016f70 <tcp_input_delayed_close+0x7c>)
 8016f48:	f7ff fa50 	bl	80163ec <tcp_pcb_remove>
    tcp_free(pcb);
 8016f4c:	6878      	ldr	r0, [r7, #4]
 8016f4e:	f7fd fd95 	bl	8014a7c <tcp_free>
    return 1;
 8016f52:	2301      	movs	r3, #1
 8016f54:	e000      	b.n	8016f58 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8016f56:	2300      	movs	r3, #0
}
 8016f58:	4618      	mov	r0, r3
 8016f5a:	3708      	adds	r7, #8
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	bd80      	pop	{r7, pc}
 8016f60:	080248b8 	.word	0x080248b8
 8016f64:	08024a88 	.word	0x08024a88
 8016f68:	08024904 	.word	0x08024904
 8016f6c:	20004c2d 	.word	0x20004c2d
 8016f70:	20004bf4 	.word	0x20004bf4

08016f74 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8016f74:	b590      	push	{r4, r7, lr}
 8016f76:	b08b      	sub	sp, #44	@ 0x2c
 8016f78:	af04      	add	r7, sp, #16
 8016f7a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8016f7c:	4b6f      	ldr	r3, [pc, #444]	@ (801713c <tcp_listen_input+0x1c8>)
 8016f7e:	781b      	ldrb	r3, [r3, #0]
 8016f80:	f003 0304 	and.w	r3, r3, #4
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	f040 80d2 	bne.w	801712e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d106      	bne.n	8016f9e <tcp_listen_input+0x2a>
 8016f90:	4b6b      	ldr	r3, [pc, #428]	@ (8017140 <tcp_listen_input+0x1cc>)
 8016f92:	f240 2281 	movw	r2, #641	@ 0x281
 8016f96:	496b      	ldr	r1, [pc, #428]	@ (8017144 <tcp_listen_input+0x1d0>)
 8016f98:	486b      	ldr	r0, [pc, #428]	@ (8017148 <tcp_listen_input+0x1d4>)
 8016f9a:	f00a fa0b 	bl	80213b4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8016f9e:	4b67      	ldr	r3, [pc, #412]	@ (801713c <tcp_listen_input+0x1c8>)
 8016fa0:	781b      	ldrb	r3, [r3, #0]
 8016fa2:	f003 0310 	and.w	r3, r3, #16
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d019      	beq.n	8016fde <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016faa:	4b68      	ldr	r3, [pc, #416]	@ (801714c <tcp_listen_input+0x1d8>)
 8016fac:	6819      	ldr	r1, [r3, #0]
 8016fae:	4b68      	ldr	r3, [pc, #416]	@ (8017150 <tcp_listen_input+0x1dc>)
 8016fb0:	881b      	ldrh	r3, [r3, #0]
 8016fb2:	461a      	mov	r2, r3
 8016fb4:	4b67      	ldr	r3, [pc, #412]	@ (8017154 <tcp_listen_input+0x1e0>)
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016fba:	4b67      	ldr	r3, [pc, #412]	@ (8017158 <tcp_listen_input+0x1e4>)
 8016fbc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016fbe:	885b      	ldrh	r3, [r3, #2]
 8016fc0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016fc2:	4a65      	ldr	r2, [pc, #404]	@ (8017158 <tcp_listen_input+0x1e4>)
 8016fc4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016fc6:	8812      	ldrh	r2, [r2, #0]
 8016fc8:	b292      	uxth	r2, r2
 8016fca:	9202      	str	r2, [sp, #8]
 8016fcc:	9301      	str	r3, [sp, #4]
 8016fce:	4b63      	ldr	r3, [pc, #396]	@ (801715c <tcp_listen_input+0x1e8>)
 8016fd0:	9300      	str	r3, [sp, #0]
 8016fd2:	4b63      	ldr	r3, [pc, #396]	@ (8017160 <tcp_listen_input+0x1ec>)
 8016fd4:	4602      	mov	r2, r0
 8016fd6:	6878      	ldr	r0, [r7, #4]
 8016fd8:	f003 fbd2 	bl	801a780 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016fdc:	e0a9      	b.n	8017132 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8016fde:	4b57      	ldr	r3, [pc, #348]	@ (801713c <tcp_listen_input+0x1c8>)
 8016fe0:	781b      	ldrb	r3, [r3, #0]
 8016fe2:	f003 0302 	and.w	r3, r3, #2
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	f000 80a3 	beq.w	8017132 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	7d5b      	ldrb	r3, [r3, #21]
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	f7ff f859 	bl	80160a8 <tcp_alloc>
 8016ff6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8016ff8:	697b      	ldr	r3, [r7, #20]
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d111      	bne.n	8017022 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	699b      	ldr	r3, [r3, #24]
 8017002:	2b00      	cmp	r3, #0
 8017004:	d00a      	beq.n	801701c <tcp_listen_input+0xa8>
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	699b      	ldr	r3, [r3, #24]
 801700a:	687a      	ldr	r2, [r7, #4]
 801700c:	6910      	ldr	r0, [r2, #16]
 801700e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017012:	2100      	movs	r1, #0
 8017014:	4798      	blx	r3
 8017016:	4603      	mov	r3, r0
 8017018:	73bb      	strb	r3, [r7, #14]
      return;
 801701a:	e08b      	b.n	8017134 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801701c:	23f0      	movs	r3, #240	@ 0xf0
 801701e:	73bb      	strb	r3, [r7, #14]
      return;
 8017020:	e088      	b.n	8017134 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8017022:	4b50      	ldr	r3, [pc, #320]	@ (8017164 <tcp_listen_input+0x1f0>)
 8017024:	695a      	ldr	r2, [r3, #20]
 8017026:	697b      	ldr	r3, [r7, #20]
 8017028:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801702a:	4b4e      	ldr	r3, [pc, #312]	@ (8017164 <tcp_listen_input+0x1f0>)
 801702c:	691a      	ldr	r2, [r3, #16]
 801702e:	697b      	ldr	r3, [r7, #20]
 8017030:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	8ada      	ldrh	r2, [r3, #22]
 8017036:	697b      	ldr	r3, [r7, #20]
 8017038:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801703a:	4b47      	ldr	r3, [pc, #284]	@ (8017158 <tcp_listen_input+0x1e4>)
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	881b      	ldrh	r3, [r3, #0]
 8017040:	b29a      	uxth	r2, r3
 8017042:	697b      	ldr	r3, [r7, #20]
 8017044:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8017046:	697b      	ldr	r3, [r7, #20]
 8017048:	2203      	movs	r2, #3
 801704a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801704c:	4b41      	ldr	r3, [pc, #260]	@ (8017154 <tcp_listen_input+0x1e0>)
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	1c5a      	adds	r2, r3, #1
 8017052:	697b      	ldr	r3, [r7, #20]
 8017054:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8017056:	697b      	ldr	r3, [r7, #20]
 8017058:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801705a:	697b      	ldr	r3, [r7, #20]
 801705c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 801705e:	6978      	ldr	r0, [r7, #20]
 8017060:	f7ff fa58 	bl	8016514 <tcp_next_iss>
 8017064:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8017066:	697b      	ldr	r3, [r7, #20]
 8017068:	693a      	ldr	r2, [r7, #16]
 801706a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 801706c:	697b      	ldr	r3, [r7, #20]
 801706e:	693a      	ldr	r2, [r7, #16]
 8017070:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8017072:	697b      	ldr	r3, [r7, #20]
 8017074:	693a      	ldr	r2, [r7, #16]
 8017076:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8017078:	697b      	ldr	r3, [r7, #20]
 801707a:	693a      	ldr	r2, [r7, #16]
 801707c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801707e:	4b35      	ldr	r3, [pc, #212]	@ (8017154 <tcp_listen_input+0x1e0>)
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	1e5a      	subs	r2, r3, #1
 8017084:	697b      	ldr	r3, [r7, #20]
 8017086:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	691a      	ldr	r2, [r3, #16]
 801708c:	697b      	ldr	r3, [r7, #20]
 801708e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8017090:	697b      	ldr	r3, [r7, #20]
 8017092:	687a      	ldr	r2, [r7, #4]
 8017094:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	7a5b      	ldrb	r3, [r3, #9]
 801709a:	f003 030c 	and.w	r3, r3, #12
 801709e:	b2da      	uxtb	r2, r3
 80170a0:	697b      	ldr	r3, [r7, #20]
 80170a2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	7a1a      	ldrb	r2, [r3, #8]
 80170a8:	697b      	ldr	r3, [r7, #20]
 80170aa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80170ac:	4b2e      	ldr	r3, [pc, #184]	@ (8017168 <tcp_listen_input+0x1f4>)
 80170ae:	681a      	ldr	r2, [r3, #0]
 80170b0:	697b      	ldr	r3, [r7, #20]
 80170b2:	60da      	str	r2, [r3, #12]
 80170b4:	4a2c      	ldr	r2, [pc, #176]	@ (8017168 <tcp_listen_input+0x1f4>)
 80170b6:	697b      	ldr	r3, [r7, #20]
 80170b8:	6013      	str	r3, [r2, #0]
 80170ba:	f003 fd23 	bl	801ab04 <tcp_timer_needed>
 80170be:	4b2b      	ldr	r3, [pc, #172]	@ (801716c <tcp_listen_input+0x1f8>)
 80170c0:	2201      	movs	r2, #1
 80170c2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80170c4:	6978      	ldr	r0, [r7, #20]
 80170c6:	f001 fd8b 	bl	8018be0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80170ca:	4b23      	ldr	r3, [pc, #140]	@ (8017158 <tcp_listen_input+0x1e4>)
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	89db      	ldrh	r3, [r3, #14]
 80170d0:	b29a      	uxth	r2, r3
 80170d2:	697b      	ldr	r3, [r7, #20]
 80170d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80170d8:	697b      	ldr	r3, [r7, #20]
 80170da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80170de:	697b      	ldr	r3, [r7, #20]
 80170e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80170e4:	697b      	ldr	r3, [r7, #20]
 80170e6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80170e8:	697b      	ldr	r3, [r7, #20]
 80170ea:	3304      	adds	r3, #4
 80170ec:	4618      	mov	r0, r3
 80170ee:	f007 fe31 	bl	801ed54 <ip4_route>
 80170f2:	4601      	mov	r1, r0
 80170f4:	697b      	ldr	r3, [r7, #20]
 80170f6:	3304      	adds	r3, #4
 80170f8:	461a      	mov	r2, r3
 80170fa:	4620      	mov	r0, r4
 80170fc:	f7ff fa30 	bl	8016560 <tcp_eff_send_mss_netif>
 8017100:	4603      	mov	r3, r0
 8017102:	461a      	mov	r2, r3
 8017104:	697b      	ldr	r3, [r7, #20]
 8017106:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8017108:	2112      	movs	r1, #18
 801710a:	6978      	ldr	r0, [r7, #20]
 801710c:	f002 fc96 	bl	8019a3c <tcp_enqueue_flags>
 8017110:	4603      	mov	r3, r0
 8017112:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8017114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017118:	2b00      	cmp	r3, #0
 801711a:	d004      	beq.n	8017126 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801711c:	2100      	movs	r1, #0
 801711e:	6978      	ldr	r0, [r7, #20]
 8017120:	f7fd fed6 	bl	8014ed0 <tcp_abandon>
      return;
 8017124:	e006      	b.n	8017134 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8017126:	6978      	ldr	r0, [r7, #20]
 8017128:	f002 fd76 	bl	8019c18 <tcp_output>
  return;
 801712c:	e001      	b.n	8017132 <tcp_listen_input+0x1be>
    return;
 801712e:	bf00      	nop
 8017130:	e000      	b.n	8017134 <tcp_listen_input+0x1c0>
  return;
 8017132:	bf00      	nop
}
 8017134:	371c      	adds	r7, #28
 8017136:	46bd      	mov	sp, r7
 8017138:	bd90      	pop	{r4, r7, pc}
 801713a:	bf00      	nop
 801713c:	20004c2c 	.word	0x20004c2c
 8017140:	080248b8 	.word	0x080248b8
 8017144:	08024ab0 	.word	0x08024ab0
 8017148:	08024904 	.word	0x08024904
 801714c:	20004c24 	.word	0x20004c24
 8017150:	20004c2a 	.word	0x20004c2a
 8017154:	20004c20 	.word	0x20004c20
 8017158:	20004c10 	.word	0x20004c10
 801715c:	20004bc4 	.word	0x20004bc4
 8017160:	20004bc8 	.word	0x20004bc8
 8017164:	20004bb4 	.word	0x20004bb4
 8017168:	20004bf4 	.word	0x20004bf4
 801716c:	20004bfc 	.word	0x20004bfc

08017170 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8017170:	b580      	push	{r7, lr}
 8017172:	b086      	sub	sp, #24
 8017174:	af04      	add	r7, sp, #16
 8017176:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8017178:	4b2f      	ldr	r3, [pc, #188]	@ (8017238 <tcp_timewait_input+0xc8>)
 801717a:	781b      	ldrb	r3, [r3, #0]
 801717c:	f003 0304 	and.w	r3, r3, #4
 8017180:	2b00      	cmp	r3, #0
 8017182:	d153      	bne.n	801722c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d106      	bne.n	8017198 <tcp_timewait_input+0x28>
 801718a:	4b2c      	ldr	r3, [pc, #176]	@ (801723c <tcp_timewait_input+0xcc>)
 801718c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8017190:	492b      	ldr	r1, [pc, #172]	@ (8017240 <tcp_timewait_input+0xd0>)
 8017192:	482c      	ldr	r0, [pc, #176]	@ (8017244 <tcp_timewait_input+0xd4>)
 8017194:	f00a f90e 	bl	80213b4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8017198:	4b27      	ldr	r3, [pc, #156]	@ (8017238 <tcp_timewait_input+0xc8>)
 801719a:	781b      	ldrb	r3, [r3, #0]
 801719c:	f003 0302 	and.w	r3, r3, #2
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d02a      	beq.n	80171fa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80171a4:	4b28      	ldr	r3, [pc, #160]	@ (8017248 <tcp_timewait_input+0xd8>)
 80171a6:	681a      	ldr	r2, [r3, #0]
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171ac:	1ad3      	subs	r3, r2, r3
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	db2d      	blt.n	801720e <tcp_timewait_input+0x9e>
 80171b2:	4b25      	ldr	r3, [pc, #148]	@ (8017248 <tcp_timewait_input+0xd8>)
 80171b4:	681a      	ldr	r2, [r3, #0]
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171ba:	6879      	ldr	r1, [r7, #4]
 80171bc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80171be:	440b      	add	r3, r1
 80171c0:	1ad3      	subs	r3, r2, r3
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	dc23      	bgt.n	801720e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80171c6:	4b21      	ldr	r3, [pc, #132]	@ (801724c <tcp_timewait_input+0xdc>)
 80171c8:	6819      	ldr	r1, [r3, #0]
 80171ca:	4b21      	ldr	r3, [pc, #132]	@ (8017250 <tcp_timewait_input+0xe0>)
 80171cc:	881b      	ldrh	r3, [r3, #0]
 80171ce:	461a      	mov	r2, r3
 80171d0:	4b1d      	ldr	r3, [pc, #116]	@ (8017248 <tcp_timewait_input+0xd8>)
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80171d6:	4b1f      	ldr	r3, [pc, #124]	@ (8017254 <tcp_timewait_input+0xe4>)
 80171d8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80171da:	885b      	ldrh	r3, [r3, #2]
 80171dc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80171de:	4a1d      	ldr	r2, [pc, #116]	@ (8017254 <tcp_timewait_input+0xe4>)
 80171e0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80171e2:	8812      	ldrh	r2, [r2, #0]
 80171e4:	b292      	uxth	r2, r2
 80171e6:	9202      	str	r2, [sp, #8]
 80171e8:	9301      	str	r3, [sp, #4]
 80171ea:	4b1b      	ldr	r3, [pc, #108]	@ (8017258 <tcp_timewait_input+0xe8>)
 80171ec:	9300      	str	r3, [sp, #0]
 80171ee:	4b1b      	ldr	r3, [pc, #108]	@ (801725c <tcp_timewait_input+0xec>)
 80171f0:	4602      	mov	r2, r0
 80171f2:	6878      	ldr	r0, [r7, #4]
 80171f4:	f003 fac4 	bl	801a780 <tcp_rst>
      return;
 80171f8:	e01b      	b.n	8017232 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80171fa:	4b0f      	ldr	r3, [pc, #60]	@ (8017238 <tcp_timewait_input+0xc8>)
 80171fc:	781b      	ldrb	r3, [r3, #0]
 80171fe:	f003 0301 	and.w	r3, r3, #1
 8017202:	2b00      	cmp	r3, #0
 8017204:	d003      	beq.n	801720e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8017206:	4b16      	ldr	r3, [pc, #88]	@ (8017260 <tcp_timewait_input+0xf0>)
 8017208:	681a      	ldr	r2, [r3, #0]
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801720e:	4b10      	ldr	r3, [pc, #64]	@ (8017250 <tcp_timewait_input+0xe0>)
 8017210:	881b      	ldrh	r3, [r3, #0]
 8017212:	2b00      	cmp	r3, #0
 8017214:	d00c      	beq.n	8017230 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	8b5b      	ldrh	r3, [r3, #26]
 801721a:	f043 0302 	orr.w	r3, r3, #2
 801721e:	b29a      	uxth	r2, r3
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017224:	6878      	ldr	r0, [r7, #4]
 8017226:	f002 fcf7 	bl	8019c18 <tcp_output>
  }
  return;
 801722a:	e001      	b.n	8017230 <tcp_timewait_input+0xc0>
    return;
 801722c:	bf00      	nop
 801722e:	e000      	b.n	8017232 <tcp_timewait_input+0xc2>
  return;
 8017230:	bf00      	nop
}
 8017232:	3708      	adds	r7, #8
 8017234:	46bd      	mov	sp, r7
 8017236:	bd80      	pop	{r7, pc}
 8017238:	20004c2c 	.word	0x20004c2c
 801723c:	080248b8 	.word	0x080248b8
 8017240:	08024ad0 	.word	0x08024ad0
 8017244:	08024904 	.word	0x08024904
 8017248:	20004c20 	.word	0x20004c20
 801724c:	20004c24 	.word	0x20004c24
 8017250:	20004c2a 	.word	0x20004c2a
 8017254:	20004c10 	.word	0x20004c10
 8017258:	20004bc4 	.word	0x20004bc4
 801725c:	20004bc8 	.word	0x20004bc8
 8017260:	20004be8 	.word	0x20004be8

08017264 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8017264:	b590      	push	{r4, r7, lr}
 8017266:	b08d      	sub	sp, #52	@ 0x34
 8017268:	af04      	add	r7, sp, #16
 801726a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801726c:	2300      	movs	r3, #0
 801726e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8017270:	2300      	movs	r3, #0
 8017272:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	2b00      	cmp	r3, #0
 8017278:	d106      	bne.n	8017288 <tcp_process+0x24>
 801727a:	4b9d      	ldr	r3, [pc, #628]	@ (80174f0 <tcp_process+0x28c>)
 801727c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8017280:	499c      	ldr	r1, [pc, #624]	@ (80174f4 <tcp_process+0x290>)
 8017282:	489d      	ldr	r0, [pc, #628]	@ (80174f8 <tcp_process+0x294>)
 8017284:	f00a f896 	bl	80213b4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8017288:	4b9c      	ldr	r3, [pc, #624]	@ (80174fc <tcp_process+0x298>)
 801728a:	781b      	ldrb	r3, [r3, #0]
 801728c:	f003 0304 	and.w	r3, r3, #4
 8017290:	2b00      	cmp	r3, #0
 8017292:	d04e      	beq.n	8017332 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	7d1b      	ldrb	r3, [r3, #20]
 8017298:	2b02      	cmp	r3, #2
 801729a:	d108      	bne.n	80172ae <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80172a0:	4b97      	ldr	r3, [pc, #604]	@ (8017500 <tcp_process+0x29c>)
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	429a      	cmp	r2, r3
 80172a6:	d123      	bne.n	80172f0 <tcp_process+0x8c>
        acceptable = 1;
 80172a8:	2301      	movs	r3, #1
 80172aa:	76fb      	strb	r3, [r7, #27]
 80172ac:	e020      	b.n	80172f0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80172b2:	4b94      	ldr	r3, [pc, #592]	@ (8017504 <tcp_process+0x2a0>)
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	429a      	cmp	r2, r3
 80172b8:	d102      	bne.n	80172c0 <tcp_process+0x5c>
        acceptable = 1;
 80172ba:	2301      	movs	r3, #1
 80172bc:	76fb      	strb	r3, [r7, #27]
 80172be:	e017      	b.n	80172f0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80172c0:	4b90      	ldr	r3, [pc, #576]	@ (8017504 <tcp_process+0x2a0>)
 80172c2:	681a      	ldr	r2, [r3, #0]
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172c8:	1ad3      	subs	r3, r2, r3
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	db10      	blt.n	80172f0 <tcp_process+0x8c>
 80172ce:	4b8d      	ldr	r3, [pc, #564]	@ (8017504 <tcp_process+0x2a0>)
 80172d0:	681a      	ldr	r2, [r3, #0]
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172d6:	6879      	ldr	r1, [r7, #4]
 80172d8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80172da:	440b      	add	r3, r1
 80172dc:	1ad3      	subs	r3, r2, r3
 80172de:	2b00      	cmp	r3, #0
 80172e0:	dc06      	bgt.n	80172f0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	8b5b      	ldrh	r3, [r3, #26]
 80172e6:	f043 0302 	orr.w	r3, r3, #2
 80172ea:	b29a      	uxth	r2, r3
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80172f0:	7efb      	ldrb	r3, [r7, #27]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d01b      	beq.n	801732e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	7d1b      	ldrb	r3, [r3, #20]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d106      	bne.n	801730c <tcp_process+0xa8>
 80172fe:	4b7c      	ldr	r3, [pc, #496]	@ (80174f0 <tcp_process+0x28c>)
 8017300:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8017304:	4980      	ldr	r1, [pc, #512]	@ (8017508 <tcp_process+0x2a4>)
 8017306:	487c      	ldr	r0, [pc, #496]	@ (80174f8 <tcp_process+0x294>)
 8017308:	f00a f854 	bl	80213b4 <iprintf>
      recv_flags |= TF_RESET;
 801730c:	4b7f      	ldr	r3, [pc, #508]	@ (801750c <tcp_process+0x2a8>)
 801730e:	781b      	ldrb	r3, [r3, #0]
 8017310:	f043 0308 	orr.w	r3, r3, #8
 8017314:	b2da      	uxtb	r2, r3
 8017316:	4b7d      	ldr	r3, [pc, #500]	@ (801750c <tcp_process+0x2a8>)
 8017318:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	8b5b      	ldrh	r3, [r3, #26]
 801731e:	f023 0301 	bic.w	r3, r3, #1
 8017322:	b29a      	uxth	r2, r3
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8017328:	f06f 030d 	mvn.w	r3, #13
 801732c:	e37a      	b.n	8017a24 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801732e:	2300      	movs	r3, #0
 8017330:	e378      	b.n	8017a24 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8017332:	4b72      	ldr	r3, [pc, #456]	@ (80174fc <tcp_process+0x298>)
 8017334:	781b      	ldrb	r3, [r3, #0]
 8017336:	f003 0302 	and.w	r3, r3, #2
 801733a:	2b00      	cmp	r3, #0
 801733c:	d010      	beq.n	8017360 <tcp_process+0xfc>
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	7d1b      	ldrb	r3, [r3, #20]
 8017342:	2b02      	cmp	r3, #2
 8017344:	d00c      	beq.n	8017360 <tcp_process+0xfc>
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	7d1b      	ldrb	r3, [r3, #20]
 801734a:	2b03      	cmp	r3, #3
 801734c:	d008      	beq.n	8017360 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	8b5b      	ldrh	r3, [r3, #26]
 8017352:	f043 0302 	orr.w	r3, r3, #2
 8017356:	b29a      	uxth	r2, r3
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801735c:	2300      	movs	r3, #0
 801735e:	e361      	b.n	8017a24 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	8b5b      	ldrh	r3, [r3, #26]
 8017364:	f003 0310 	and.w	r3, r3, #16
 8017368:	2b00      	cmp	r3, #0
 801736a:	d103      	bne.n	8017374 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801736c:	4b68      	ldr	r3, [pc, #416]	@ (8017510 <tcp_process+0x2ac>)
 801736e:	681a      	ldr	r2, [r3, #0]
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	2200      	movs	r2, #0
 8017378:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	2200      	movs	r2, #0
 8017380:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8017384:	6878      	ldr	r0, [r7, #4]
 8017386:	f001 fc2b 	bl	8018be0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	7d1b      	ldrb	r3, [r3, #20]
 801738e:	3b02      	subs	r3, #2
 8017390:	2b07      	cmp	r3, #7
 8017392:	f200 8337 	bhi.w	8017a04 <tcp_process+0x7a0>
 8017396:	a201      	add	r2, pc, #4	@ (adr r2, 801739c <tcp_process+0x138>)
 8017398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801739c:	080173bd 	.word	0x080173bd
 80173a0:	080175ed 	.word	0x080175ed
 80173a4:	08017765 	.word	0x08017765
 80173a8:	0801778f 	.word	0x0801778f
 80173ac:	080178b3 	.word	0x080178b3
 80173b0:	08017765 	.word	0x08017765
 80173b4:	0801793f 	.word	0x0801793f
 80173b8:	080179cf 	.word	0x080179cf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80173bc:	4b4f      	ldr	r3, [pc, #316]	@ (80174fc <tcp_process+0x298>)
 80173be:	781b      	ldrb	r3, [r3, #0]
 80173c0:	f003 0310 	and.w	r3, r3, #16
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	f000 80e4 	beq.w	8017592 <tcp_process+0x32e>
 80173ca:	4b4c      	ldr	r3, [pc, #304]	@ (80174fc <tcp_process+0x298>)
 80173cc:	781b      	ldrb	r3, [r3, #0]
 80173ce:	f003 0302 	and.w	r3, r3, #2
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	f000 80dd 	beq.w	8017592 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80173dc:	1c5a      	adds	r2, r3, #1
 80173de:	4b48      	ldr	r3, [pc, #288]	@ (8017500 <tcp_process+0x29c>)
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	429a      	cmp	r2, r3
 80173e4:	f040 80d5 	bne.w	8017592 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80173e8:	4b46      	ldr	r3, [pc, #280]	@ (8017504 <tcp_process+0x2a0>)
 80173ea:	681b      	ldr	r3, [r3, #0]
 80173ec:	1c5a      	adds	r2, r3, #1
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80173fa:	4b41      	ldr	r3, [pc, #260]	@ (8017500 <tcp_process+0x29c>)
 80173fc:	681a      	ldr	r2, [r3, #0]
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8017402:	4b44      	ldr	r3, [pc, #272]	@ (8017514 <tcp_process+0x2b0>)
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	89db      	ldrh	r3, [r3, #14]
 8017408:	b29a      	uxth	r2, r3
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801741c:	4b39      	ldr	r3, [pc, #228]	@ (8017504 <tcp_process+0x2a0>)
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	1e5a      	subs	r2, r3, #1
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	2204      	movs	r2, #4
 801742a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	3304      	adds	r3, #4
 8017434:	4618      	mov	r0, r3
 8017436:	f007 fc8d 	bl	801ed54 <ip4_route>
 801743a:	4601      	mov	r1, r0
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	3304      	adds	r3, #4
 8017440:	461a      	mov	r2, r3
 8017442:	4620      	mov	r0, r4
 8017444:	f7ff f88c 	bl	8016560 <tcp_eff_send_mss_netif>
 8017448:	4603      	mov	r3, r0
 801744a:	461a      	mov	r2, r3
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017454:	009a      	lsls	r2, r3, #2
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801745a:	005b      	lsls	r3, r3, #1
 801745c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8017460:	428b      	cmp	r3, r1
 8017462:	bf38      	it	cc
 8017464:	460b      	movcc	r3, r1
 8017466:	429a      	cmp	r2, r3
 8017468:	d204      	bcs.n	8017474 <tcp_process+0x210>
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801746e:	009b      	lsls	r3, r3, #2
 8017470:	b29b      	uxth	r3, r3
 8017472:	e00d      	b.n	8017490 <tcp_process+0x22c>
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017478:	005b      	lsls	r3, r3, #1
 801747a:	f241 121c 	movw	r2, #4380	@ 0x111c
 801747e:	4293      	cmp	r3, r2
 8017480:	d904      	bls.n	801748c <tcp_process+0x228>
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017486:	005b      	lsls	r3, r3, #1
 8017488:	b29b      	uxth	r3, r3
 801748a:	e001      	b.n	8017490 <tcp_process+0x22c>
 801748c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8017490:	687a      	ldr	r2, [r7, #4]
 8017492:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801749c:	2b00      	cmp	r3, #0
 801749e:	d106      	bne.n	80174ae <tcp_process+0x24a>
 80174a0:	4b13      	ldr	r3, [pc, #76]	@ (80174f0 <tcp_process+0x28c>)
 80174a2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80174a6:	491c      	ldr	r1, [pc, #112]	@ (8017518 <tcp_process+0x2b4>)
 80174a8:	4813      	ldr	r0, [pc, #76]	@ (80174f8 <tcp_process+0x294>)
 80174aa:	f009 ff83 	bl	80213b4 <iprintf>
        --pcb->snd_queuelen;
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80174b4:	3b01      	subs	r3, #1
 80174b6:	b29a      	uxth	r2, r3
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80174c2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80174c4:	69fb      	ldr	r3, [r7, #28]
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d12a      	bne.n	8017520 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80174ce:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80174d0:	69fb      	ldr	r3, [r7, #28]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d106      	bne.n	80174e4 <tcp_process+0x280>
 80174d6:	4b06      	ldr	r3, [pc, #24]	@ (80174f0 <tcp_process+0x28c>)
 80174d8:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80174dc:	490f      	ldr	r1, [pc, #60]	@ (801751c <tcp_process+0x2b8>)
 80174de:	4806      	ldr	r0, [pc, #24]	@ (80174f8 <tcp_process+0x294>)
 80174e0:	f009 ff68 	bl	80213b4 <iprintf>
          pcb->unsent = rseg->next;
 80174e4:	69fb      	ldr	r3, [r7, #28]
 80174e6:	681a      	ldr	r2, [r3, #0]
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	66da      	str	r2, [r3, #108]	@ 0x6c
 80174ec:	e01c      	b.n	8017528 <tcp_process+0x2c4>
 80174ee:	bf00      	nop
 80174f0:	080248b8 	.word	0x080248b8
 80174f4:	08024af0 	.word	0x08024af0
 80174f8:	08024904 	.word	0x08024904
 80174fc:	20004c2c 	.word	0x20004c2c
 8017500:	20004c24 	.word	0x20004c24
 8017504:	20004c20 	.word	0x20004c20
 8017508:	08024b0c 	.word	0x08024b0c
 801750c:	20004c2d 	.word	0x20004c2d
 8017510:	20004be8 	.word	0x20004be8
 8017514:	20004c10 	.word	0x20004c10
 8017518:	08024b2c 	.word	0x08024b2c
 801751c:	08024b44 	.word	0x08024b44
        } else {
          pcb->unacked = rseg->next;
 8017520:	69fb      	ldr	r3, [r7, #28]
 8017522:	681a      	ldr	r2, [r3, #0]
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8017528:	69f8      	ldr	r0, [r7, #28]
 801752a:	f7fe fc36 	bl	8015d9a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017532:	2b00      	cmp	r3, #0
 8017534:	d104      	bne.n	8017540 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801753c:	861a      	strh	r2, [r3, #48]	@ 0x30
 801753e:	e006      	b.n	801754e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	2200      	movs	r2, #0
 8017544:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	2200      	movs	r2, #0
 801754a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017554:	2b00      	cmp	r3, #0
 8017556:	d00a      	beq.n	801756e <tcp_process+0x30a>
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801755e:	687a      	ldr	r2, [r7, #4]
 8017560:	6910      	ldr	r0, [r2, #16]
 8017562:	2200      	movs	r2, #0
 8017564:	6879      	ldr	r1, [r7, #4]
 8017566:	4798      	blx	r3
 8017568:	4603      	mov	r3, r0
 801756a:	76bb      	strb	r3, [r7, #26]
 801756c:	e001      	b.n	8017572 <tcp_process+0x30e>
 801756e:	2300      	movs	r3, #0
 8017570:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8017572:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017576:	f113 0f0d 	cmn.w	r3, #13
 801757a:	d102      	bne.n	8017582 <tcp_process+0x31e>
          return ERR_ABRT;
 801757c:	f06f 030c 	mvn.w	r3, #12
 8017580:	e250      	b.n	8017a24 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	8b5b      	ldrh	r3, [r3, #26]
 8017586:	f043 0302 	orr.w	r3, r3, #2
 801758a:	b29a      	uxth	r2, r3
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8017590:	e23a      	b.n	8017a08 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8017592:	4b98      	ldr	r3, [pc, #608]	@ (80177f4 <tcp_process+0x590>)
 8017594:	781b      	ldrb	r3, [r3, #0]
 8017596:	f003 0310 	and.w	r3, r3, #16
 801759a:	2b00      	cmp	r3, #0
 801759c:	f000 8234 	beq.w	8017a08 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80175a0:	4b95      	ldr	r3, [pc, #596]	@ (80177f8 <tcp_process+0x594>)
 80175a2:	6819      	ldr	r1, [r3, #0]
 80175a4:	4b95      	ldr	r3, [pc, #596]	@ (80177fc <tcp_process+0x598>)
 80175a6:	881b      	ldrh	r3, [r3, #0]
 80175a8:	461a      	mov	r2, r3
 80175aa:	4b95      	ldr	r3, [pc, #596]	@ (8017800 <tcp_process+0x59c>)
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80175b0:	4b94      	ldr	r3, [pc, #592]	@ (8017804 <tcp_process+0x5a0>)
 80175b2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80175b4:	885b      	ldrh	r3, [r3, #2]
 80175b6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80175b8:	4a92      	ldr	r2, [pc, #584]	@ (8017804 <tcp_process+0x5a0>)
 80175ba:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80175bc:	8812      	ldrh	r2, [r2, #0]
 80175be:	b292      	uxth	r2, r2
 80175c0:	9202      	str	r2, [sp, #8]
 80175c2:	9301      	str	r3, [sp, #4]
 80175c4:	4b90      	ldr	r3, [pc, #576]	@ (8017808 <tcp_process+0x5a4>)
 80175c6:	9300      	str	r3, [sp, #0]
 80175c8:	4b90      	ldr	r3, [pc, #576]	@ (801780c <tcp_process+0x5a8>)
 80175ca:	4602      	mov	r2, r0
 80175cc:	6878      	ldr	r0, [r7, #4]
 80175ce:	f003 f8d7 	bl	801a780 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80175d8:	2b05      	cmp	r3, #5
 80175da:	f200 8215 	bhi.w	8017a08 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	2200      	movs	r2, #0
 80175e2:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80175e4:	6878      	ldr	r0, [r7, #4]
 80175e6:	f002 fea3 	bl	801a330 <tcp_rexmit_rto>
      break;
 80175ea:	e20d      	b.n	8017a08 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80175ec:	4b81      	ldr	r3, [pc, #516]	@ (80177f4 <tcp_process+0x590>)
 80175ee:	781b      	ldrb	r3, [r3, #0]
 80175f0:	f003 0310 	and.w	r3, r3, #16
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	f000 80a1 	beq.w	801773c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80175fa:	4b7f      	ldr	r3, [pc, #508]	@ (80177f8 <tcp_process+0x594>)
 80175fc:	681a      	ldr	r2, [r3, #0]
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017602:	1ad3      	subs	r3, r2, r3
 8017604:	3b01      	subs	r3, #1
 8017606:	2b00      	cmp	r3, #0
 8017608:	db7e      	blt.n	8017708 <tcp_process+0x4a4>
 801760a:	4b7b      	ldr	r3, [pc, #492]	@ (80177f8 <tcp_process+0x594>)
 801760c:	681a      	ldr	r2, [r3, #0]
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017612:	1ad3      	subs	r3, r2, r3
 8017614:	2b00      	cmp	r3, #0
 8017616:	dc77      	bgt.n	8017708 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	2204      	movs	r2, #4
 801761c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017622:	2b00      	cmp	r3, #0
 8017624:	d102      	bne.n	801762c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8017626:	23fa      	movs	r3, #250	@ 0xfa
 8017628:	76bb      	strb	r3, [r7, #26]
 801762a:	e01d      	b.n	8017668 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017630:	699b      	ldr	r3, [r3, #24]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d106      	bne.n	8017644 <tcp_process+0x3e0>
 8017636:	4b76      	ldr	r3, [pc, #472]	@ (8017810 <tcp_process+0x5ac>)
 8017638:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 801763c:	4975      	ldr	r1, [pc, #468]	@ (8017814 <tcp_process+0x5b0>)
 801763e:	4876      	ldr	r0, [pc, #472]	@ (8017818 <tcp_process+0x5b4>)
 8017640:	f009 feb8 	bl	80213b4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017648:	699b      	ldr	r3, [r3, #24]
 801764a:	2b00      	cmp	r3, #0
 801764c:	d00a      	beq.n	8017664 <tcp_process+0x400>
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017652:	699b      	ldr	r3, [r3, #24]
 8017654:	687a      	ldr	r2, [r7, #4]
 8017656:	6910      	ldr	r0, [r2, #16]
 8017658:	2200      	movs	r2, #0
 801765a:	6879      	ldr	r1, [r7, #4]
 801765c:	4798      	blx	r3
 801765e:	4603      	mov	r3, r0
 8017660:	76bb      	strb	r3, [r7, #26]
 8017662:	e001      	b.n	8017668 <tcp_process+0x404>
 8017664:	23f0      	movs	r3, #240	@ 0xf0
 8017666:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8017668:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801766c:	2b00      	cmp	r3, #0
 801766e:	d00a      	beq.n	8017686 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8017670:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017674:	f113 0f0d 	cmn.w	r3, #13
 8017678:	d002      	beq.n	8017680 <tcp_process+0x41c>
              tcp_abort(pcb);
 801767a:	6878      	ldr	r0, [r7, #4]
 801767c:	f7fd fce6 	bl	801504c <tcp_abort>
            }
            return ERR_ABRT;
 8017680:	f06f 030c 	mvn.w	r3, #12
 8017684:	e1ce      	b.n	8017a24 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8017686:	6878      	ldr	r0, [r7, #4]
 8017688:	f000 fae0 	bl	8017c4c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801768c:	4b63      	ldr	r3, [pc, #396]	@ (801781c <tcp_process+0x5b8>)
 801768e:	881b      	ldrh	r3, [r3, #0]
 8017690:	2b00      	cmp	r3, #0
 8017692:	d005      	beq.n	80176a0 <tcp_process+0x43c>
            recv_acked--;
 8017694:	4b61      	ldr	r3, [pc, #388]	@ (801781c <tcp_process+0x5b8>)
 8017696:	881b      	ldrh	r3, [r3, #0]
 8017698:	3b01      	subs	r3, #1
 801769a:	b29a      	uxth	r2, r3
 801769c:	4b5f      	ldr	r3, [pc, #380]	@ (801781c <tcp_process+0x5b8>)
 801769e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80176a4:	009a      	lsls	r2, r3, #2
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80176aa:	005b      	lsls	r3, r3, #1
 80176ac:	f241 111c 	movw	r1, #4380	@ 0x111c
 80176b0:	428b      	cmp	r3, r1
 80176b2:	bf38      	it	cc
 80176b4:	460b      	movcc	r3, r1
 80176b6:	429a      	cmp	r2, r3
 80176b8:	d204      	bcs.n	80176c4 <tcp_process+0x460>
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80176be:	009b      	lsls	r3, r3, #2
 80176c0:	b29b      	uxth	r3, r3
 80176c2:	e00d      	b.n	80176e0 <tcp_process+0x47c>
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80176c8:	005b      	lsls	r3, r3, #1
 80176ca:	f241 121c 	movw	r2, #4380	@ 0x111c
 80176ce:	4293      	cmp	r3, r2
 80176d0:	d904      	bls.n	80176dc <tcp_process+0x478>
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80176d6:	005b      	lsls	r3, r3, #1
 80176d8:	b29b      	uxth	r3, r3
 80176da:	e001      	b.n	80176e0 <tcp_process+0x47c>
 80176dc:	f241 131c 	movw	r3, #4380	@ 0x111c
 80176e0:	687a      	ldr	r2, [r7, #4]
 80176e2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80176e6:	4b4e      	ldr	r3, [pc, #312]	@ (8017820 <tcp_process+0x5bc>)
 80176e8:	781b      	ldrb	r3, [r3, #0]
 80176ea:	f003 0320 	and.w	r3, r3, #32
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d037      	beq.n	8017762 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	8b5b      	ldrh	r3, [r3, #26]
 80176f6:	f043 0302 	orr.w	r3, r3, #2
 80176fa:	b29a      	uxth	r2, r3
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	2207      	movs	r2, #7
 8017704:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8017706:	e02c      	b.n	8017762 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017708:	4b3b      	ldr	r3, [pc, #236]	@ (80177f8 <tcp_process+0x594>)
 801770a:	6819      	ldr	r1, [r3, #0]
 801770c:	4b3b      	ldr	r3, [pc, #236]	@ (80177fc <tcp_process+0x598>)
 801770e:	881b      	ldrh	r3, [r3, #0]
 8017710:	461a      	mov	r2, r3
 8017712:	4b3b      	ldr	r3, [pc, #236]	@ (8017800 <tcp_process+0x59c>)
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017718:	4b3a      	ldr	r3, [pc, #232]	@ (8017804 <tcp_process+0x5a0>)
 801771a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801771c:	885b      	ldrh	r3, [r3, #2]
 801771e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017720:	4a38      	ldr	r2, [pc, #224]	@ (8017804 <tcp_process+0x5a0>)
 8017722:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017724:	8812      	ldrh	r2, [r2, #0]
 8017726:	b292      	uxth	r2, r2
 8017728:	9202      	str	r2, [sp, #8]
 801772a:	9301      	str	r3, [sp, #4]
 801772c:	4b36      	ldr	r3, [pc, #216]	@ (8017808 <tcp_process+0x5a4>)
 801772e:	9300      	str	r3, [sp, #0]
 8017730:	4b36      	ldr	r3, [pc, #216]	@ (801780c <tcp_process+0x5a8>)
 8017732:	4602      	mov	r2, r0
 8017734:	6878      	ldr	r0, [r7, #4]
 8017736:	f003 f823 	bl	801a780 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801773a:	e167      	b.n	8017a0c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801773c:	4b2d      	ldr	r3, [pc, #180]	@ (80177f4 <tcp_process+0x590>)
 801773e:	781b      	ldrb	r3, [r3, #0]
 8017740:	f003 0302 	and.w	r3, r3, #2
 8017744:	2b00      	cmp	r3, #0
 8017746:	f000 8161 	beq.w	8017a0c <tcp_process+0x7a8>
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801774e:	1e5a      	subs	r2, r3, #1
 8017750:	4b2b      	ldr	r3, [pc, #172]	@ (8017800 <tcp_process+0x59c>)
 8017752:	681b      	ldr	r3, [r3, #0]
 8017754:	429a      	cmp	r2, r3
 8017756:	f040 8159 	bne.w	8017a0c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801775a:	6878      	ldr	r0, [r7, #4]
 801775c:	f002 fe0a 	bl	801a374 <tcp_rexmit>
      break;
 8017760:	e154      	b.n	8017a0c <tcp_process+0x7a8>
 8017762:	e153      	b.n	8017a0c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8017764:	6878      	ldr	r0, [r7, #4]
 8017766:	f000 fa71 	bl	8017c4c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801776a:	4b2d      	ldr	r3, [pc, #180]	@ (8017820 <tcp_process+0x5bc>)
 801776c:	781b      	ldrb	r3, [r3, #0]
 801776e:	f003 0320 	and.w	r3, r3, #32
 8017772:	2b00      	cmp	r3, #0
 8017774:	f000 814c 	beq.w	8017a10 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	8b5b      	ldrh	r3, [r3, #26]
 801777c:	f043 0302 	orr.w	r3, r3, #2
 8017780:	b29a      	uxth	r2, r3
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	2207      	movs	r2, #7
 801778a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801778c:	e140      	b.n	8017a10 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801778e:	6878      	ldr	r0, [r7, #4]
 8017790:	f000 fa5c 	bl	8017c4c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017794:	4b22      	ldr	r3, [pc, #136]	@ (8017820 <tcp_process+0x5bc>)
 8017796:	781b      	ldrb	r3, [r3, #0]
 8017798:	f003 0320 	and.w	r3, r3, #32
 801779c:	2b00      	cmp	r3, #0
 801779e:	d071      	beq.n	8017884 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80177a0:	4b14      	ldr	r3, [pc, #80]	@ (80177f4 <tcp_process+0x590>)
 80177a2:	781b      	ldrb	r3, [r3, #0]
 80177a4:	f003 0310 	and.w	r3, r3, #16
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d060      	beq.n	801786e <tcp_process+0x60a>
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80177b0:	4b11      	ldr	r3, [pc, #68]	@ (80177f8 <tcp_process+0x594>)
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	429a      	cmp	r2, r3
 80177b6:	d15a      	bne.n	801786e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d156      	bne.n	801786e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	8b5b      	ldrh	r3, [r3, #26]
 80177c4:	f043 0302 	orr.w	r3, r3, #2
 80177c8:	b29a      	uxth	r2, r3
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80177ce:	6878      	ldr	r0, [r7, #4]
 80177d0:	f7fe fdbc 	bl	801634c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80177d4:	4b13      	ldr	r3, [pc, #76]	@ (8017824 <tcp_process+0x5c0>)
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	687a      	ldr	r2, [r7, #4]
 80177da:	429a      	cmp	r2, r3
 80177dc:	d105      	bne.n	80177ea <tcp_process+0x586>
 80177de:	4b11      	ldr	r3, [pc, #68]	@ (8017824 <tcp_process+0x5c0>)
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	68db      	ldr	r3, [r3, #12]
 80177e4:	4a0f      	ldr	r2, [pc, #60]	@ (8017824 <tcp_process+0x5c0>)
 80177e6:	6013      	str	r3, [r2, #0]
 80177e8:	e02e      	b.n	8017848 <tcp_process+0x5e4>
 80177ea:	4b0e      	ldr	r3, [pc, #56]	@ (8017824 <tcp_process+0x5c0>)
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	617b      	str	r3, [r7, #20]
 80177f0:	e027      	b.n	8017842 <tcp_process+0x5de>
 80177f2:	bf00      	nop
 80177f4:	20004c2c 	.word	0x20004c2c
 80177f8:	20004c24 	.word	0x20004c24
 80177fc:	20004c2a 	.word	0x20004c2a
 8017800:	20004c20 	.word	0x20004c20
 8017804:	20004c10 	.word	0x20004c10
 8017808:	20004bc4 	.word	0x20004bc4
 801780c:	20004bc8 	.word	0x20004bc8
 8017810:	080248b8 	.word	0x080248b8
 8017814:	08024b58 	.word	0x08024b58
 8017818:	08024904 	.word	0x08024904
 801781c:	20004c28 	.word	0x20004c28
 8017820:	20004c2d 	.word	0x20004c2d
 8017824:	20004bf4 	.word	0x20004bf4
 8017828:	697b      	ldr	r3, [r7, #20]
 801782a:	68db      	ldr	r3, [r3, #12]
 801782c:	687a      	ldr	r2, [r7, #4]
 801782e:	429a      	cmp	r2, r3
 8017830:	d104      	bne.n	801783c <tcp_process+0x5d8>
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	68da      	ldr	r2, [r3, #12]
 8017836:	697b      	ldr	r3, [r7, #20]
 8017838:	60da      	str	r2, [r3, #12]
 801783a:	e005      	b.n	8017848 <tcp_process+0x5e4>
 801783c:	697b      	ldr	r3, [r7, #20]
 801783e:	68db      	ldr	r3, [r3, #12]
 8017840:	617b      	str	r3, [r7, #20]
 8017842:	697b      	ldr	r3, [r7, #20]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d1ef      	bne.n	8017828 <tcp_process+0x5c4>
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	2200      	movs	r2, #0
 801784c:	60da      	str	r2, [r3, #12]
 801784e:	4b77      	ldr	r3, [pc, #476]	@ (8017a2c <tcp_process+0x7c8>)
 8017850:	2201      	movs	r2, #1
 8017852:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	220a      	movs	r2, #10
 8017858:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801785a:	4b75      	ldr	r3, [pc, #468]	@ (8017a30 <tcp_process+0x7cc>)
 801785c:	681a      	ldr	r2, [r3, #0]
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	60da      	str	r2, [r3, #12]
 8017862:	4a73      	ldr	r2, [pc, #460]	@ (8017a30 <tcp_process+0x7cc>)
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	6013      	str	r3, [r2, #0]
 8017868:	f003 f94c 	bl	801ab04 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801786c:	e0d2      	b.n	8017a14 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	8b5b      	ldrh	r3, [r3, #26]
 8017872:	f043 0302 	orr.w	r3, r3, #2
 8017876:	b29a      	uxth	r2, r3
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	2208      	movs	r2, #8
 8017880:	751a      	strb	r2, [r3, #20]
      break;
 8017882:	e0c7      	b.n	8017a14 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017884:	4b6b      	ldr	r3, [pc, #428]	@ (8017a34 <tcp_process+0x7d0>)
 8017886:	781b      	ldrb	r3, [r3, #0]
 8017888:	f003 0310 	and.w	r3, r3, #16
 801788c:	2b00      	cmp	r3, #0
 801788e:	f000 80c1 	beq.w	8017a14 <tcp_process+0x7b0>
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017896:	4b68      	ldr	r3, [pc, #416]	@ (8017a38 <tcp_process+0x7d4>)
 8017898:	681b      	ldr	r3, [r3, #0]
 801789a:	429a      	cmp	r2, r3
 801789c:	f040 80ba 	bne.w	8017a14 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	f040 80b5 	bne.w	8017a14 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	2206      	movs	r2, #6
 80178ae:	751a      	strb	r2, [r3, #20]
      break;
 80178b0:	e0b0      	b.n	8017a14 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80178b2:	6878      	ldr	r0, [r7, #4]
 80178b4:	f000 f9ca 	bl	8017c4c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80178b8:	4b60      	ldr	r3, [pc, #384]	@ (8017a3c <tcp_process+0x7d8>)
 80178ba:	781b      	ldrb	r3, [r3, #0]
 80178bc:	f003 0320 	and.w	r3, r3, #32
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	f000 80a9 	beq.w	8017a18 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	8b5b      	ldrh	r3, [r3, #26]
 80178ca:	f043 0302 	orr.w	r3, r3, #2
 80178ce:	b29a      	uxth	r2, r3
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80178d4:	6878      	ldr	r0, [r7, #4]
 80178d6:	f7fe fd39 	bl	801634c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80178da:	4b59      	ldr	r3, [pc, #356]	@ (8017a40 <tcp_process+0x7dc>)
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	687a      	ldr	r2, [r7, #4]
 80178e0:	429a      	cmp	r2, r3
 80178e2:	d105      	bne.n	80178f0 <tcp_process+0x68c>
 80178e4:	4b56      	ldr	r3, [pc, #344]	@ (8017a40 <tcp_process+0x7dc>)
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	68db      	ldr	r3, [r3, #12]
 80178ea:	4a55      	ldr	r2, [pc, #340]	@ (8017a40 <tcp_process+0x7dc>)
 80178ec:	6013      	str	r3, [r2, #0]
 80178ee:	e013      	b.n	8017918 <tcp_process+0x6b4>
 80178f0:	4b53      	ldr	r3, [pc, #332]	@ (8017a40 <tcp_process+0x7dc>)
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	613b      	str	r3, [r7, #16]
 80178f6:	e00c      	b.n	8017912 <tcp_process+0x6ae>
 80178f8:	693b      	ldr	r3, [r7, #16]
 80178fa:	68db      	ldr	r3, [r3, #12]
 80178fc:	687a      	ldr	r2, [r7, #4]
 80178fe:	429a      	cmp	r2, r3
 8017900:	d104      	bne.n	801790c <tcp_process+0x6a8>
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	68da      	ldr	r2, [r3, #12]
 8017906:	693b      	ldr	r3, [r7, #16]
 8017908:	60da      	str	r2, [r3, #12]
 801790a:	e005      	b.n	8017918 <tcp_process+0x6b4>
 801790c:	693b      	ldr	r3, [r7, #16]
 801790e:	68db      	ldr	r3, [r3, #12]
 8017910:	613b      	str	r3, [r7, #16]
 8017912:	693b      	ldr	r3, [r7, #16]
 8017914:	2b00      	cmp	r3, #0
 8017916:	d1ef      	bne.n	80178f8 <tcp_process+0x694>
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	2200      	movs	r2, #0
 801791c:	60da      	str	r2, [r3, #12]
 801791e:	4b43      	ldr	r3, [pc, #268]	@ (8017a2c <tcp_process+0x7c8>)
 8017920:	2201      	movs	r2, #1
 8017922:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	220a      	movs	r2, #10
 8017928:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801792a:	4b41      	ldr	r3, [pc, #260]	@ (8017a30 <tcp_process+0x7cc>)
 801792c:	681a      	ldr	r2, [r3, #0]
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	60da      	str	r2, [r3, #12]
 8017932:	4a3f      	ldr	r2, [pc, #252]	@ (8017a30 <tcp_process+0x7cc>)
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	6013      	str	r3, [r2, #0]
 8017938:	f003 f8e4 	bl	801ab04 <tcp_timer_needed>
      }
      break;
 801793c:	e06c      	b.n	8017a18 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801793e:	6878      	ldr	r0, [r7, #4]
 8017940:	f000 f984 	bl	8017c4c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017944:	4b3b      	ldr	r3, [pc, #236]	@ (8017a34 <tcp_process+0x7d0>)
 8017946:	781b      	ldrb	r3, [r3, #0]
 8017948:	f003 0310 	and.w	r3, r3, #16
 801794c:	2b00      	cmp	r3, #0
 801794e:	d065      	beq.n	8017a1c <tcp_process+0x7b8>
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017954:	4b38      	ldr	r3, [pc, #224]	@ (8017a38 <tcp_process+0x7d4>)
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	429a      	cmp	r2, r3
 801795a:	d15f      	bne.n	8017a1c <tcp_process+0x7b8>
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017960:	2b00      	cmp	r3, #0
 8017962:	d15b      	bne.n	8017a1c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8017964:	6878      	ldr	r0, [r7, #4]
 8017966:	f7fe fcf1 	bl	801634c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801796a:	4b35      	ldr	r3, [pc, #212]	@ (8017a40 <tcp_process+0x7dc>)
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	687a      	ldr	r2, [r7, #4]
 8017970:	429a      	cmp	r2, r3
 8017972:	d105      	bne.n	8017980 <tcp_process+0x71c>
 8017974:	4b32      	ldr	r3, [pc, #200]	@ (8017a40 <tcp_process+0x7dc>)
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	68db      	ldr	r3, [r3, #12]
 801797a:	4a31      	ldr	r2, [pc, #196]	@ (8017a40 <tcp_process+0x7dc>)
 801797c:	6013      	str	r3, [r2, #0]
 801797e:	e013      	b.n	80179a8 <tcp_process+0x744>
 8017980:	4b2f      	ldr	r3, [pc, #188]	@ (8017a40 <tcp_process+0x7dc>)
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	60fb      	str	r3, [r7, #12]
 8017986:	e00c      	b.n	80179a2 <tcp_process+0x73e>
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	68db      	ldr	r3, [r3, #12]
 801798c:	687a      	ldr	r2, [r7, #4]
 801798e:	429a      	cmp	r2, r3
 8017990:	d104      	bne.n	801799c <tcp_process+0x738>
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	68da      	ldr	r2, [r3, #12]
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	60da      	str	r2, [r3, #12]
 801799a:	e005      	b.n	80179a8 <tcp_process+0x744>
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	68db      	ldr	r3, [r3, #12]
 80179a0:	60fb      	str	r3, [r7, #12]
 80179a2:	68fb      	ldr	r3, [r7, #12]
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d1ef      	bne.n	8017988 <tcp_process+0x724>
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	2200      	movs	r2, #0
 80179ac:	60da      	str	r2, [r3, #12]
 80179ae:	4b1f      	ldr	r3, [pc, #124]	@ (8017a2c <tcp_process+0x7c8>)
 80179b0:	2201      	movs	r2, #1
 80179b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	220a      	movs	r2, #10
 80179b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80179ba:	4b1d      	ldr	r3, [pc, #116]	@ (8017a30 <tcp_process+0x7cc>)
 80179bc:	681a      	ldr	r2, [r3, #0]
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	60da      	str	r2, [r3, #12]
 80179c2:	4a1b      	ldr	r2, [pc, #108]	@ (8017a30 <tcp_process+0x7cc>)
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	6013      	str	r3, [r2, #0]
 80179c8:	f003 f89c 	bl	801ab04 <tcp_timer_needed>
      }
      break;
 80179cc:	e026      	b.n	8017a1c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80179ce:	6878      	ldr	r0, [r7, #4]
 80179d0:	f000 f93c 	bl	8017c4c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80179d4:	4b17      	ldr	r3, [pc, #92]	@ (8017a34 <tcp_process+0x7d0>)
 80179d6:	781b      	ldrb	r3, [r3, #0]
 80179d8:	f003 0310 	and.w	r3, r3, #16
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d01f      	beq.n	8017a20 <tcp_process+0x7bc>
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80179e4:	4b14      	ldr	r3, [pc, #80]	@ (8017a38 <tcp_process+0x7d4>)
 80179e6:	681b      	ldr	r3, [r3, #0]
 80179e8:	429a      	cmp	r2, r3
 80179ea:	d119      	bne.n	8017a20 <tcp_process+0x7bc>
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d115      	bne.n	8017a20 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80179f4:	4b11      	ldr	r3, [pc, #68]	@ (8017a3c <tcp_process+0x7d8>)
 80179f6:	781b      	ldrb	r3, [r3, #0]
 80179f8:	f043 0310 	orr.w	r3, r3, #16
 80179fc:	b2da      	uxtb	r2, r3
 80179fe:	4b0f      	ldr	r3, [pc, #60]	@ (8017a3c <tcp_process+0x7d8>)
 8017a00:	701a      	strb	r2, [r3, #0]
      }
      break;
 8017a02:	e00d      	b.n	8017a20 <tcp_process+0x7bc>
    default:
      break;
 8017a04:	bf00      	nop
 8017a06:	e00c      	b.n	8017a22 <tcp_process+0x7be>
      break;
 8017a08:	bf00      	nop
 8017a0a:	e00a      	b.n	8017a22 <tcp_process+0x7be>
      break;
 8017a0c:	bf00      	nop
 8017a0e:	e008      	b.n	8017a22 <tcp_process+0x7be>
      break;
 8017a10:	bf00      	nop
 8017a12:	e006      	b.n	8017a22 <tcp_process+0x7be>
      break;
 8017a14:	bf00      	nop
 8017a16:	e004      	b.n	8017a22 <tcp_process+0x7be>
      break;
 8017a18:	bf00      	nop
 8017a1a:	e002      	b.n	8017a22 <tcp_process+0x7be>
      break;
 8017a1c:	bf00      	nop
 8017a1e:	e000      	b.n	8017a22 <tcp_process+0x7be>
      break;
 8017a20:	bf00      	nop
  }
  return ERR_OK;
 8017a22:	2300      	movs	r3, #0
}
 8017a24:	4618      	mov	r0, r3
 8017a26:	3724      	adds	r7, #36	@ 0x24
 8017a28:	46bd      	mov	sp, r7
 8017a2a:	bd90      	pop	{r4, r7, pc}
 8017a2c:	20004bfc 	.word	0x20004bfc
 8017a30:	20004bf8 	.word	0x20004bf8
 8017a34:	20004c2c 	.word	0x20004c2c
 8017a38:	20004c24 	.word	0x20004c24
 8017a3c:	20004c2d 	.word	0x20004c2d
 8017a40:	20004bf4 	.word	0x20004bf4

08017a44 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8017a44:	b590      	push	{r4, r7, lr}
 8017a46:	b085      	sub	sp, #20
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	6078      	str	r0, [r7, #4]
 8017a4c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d106      	bne.n	8017a62 <tcp_oos_insert_segment+0x1e>
 8017a54:	4b3b      	ldr	r3, [pc, #236]	@ (8017b44 <tcp_oos_insert_segment+0x100>)
 8017a56:	f240 421f 	movw	r2, #1055	@ 0x41f
 8017a5a:	493b      	ldr	r1, [pc, #236]	@ (8017b48 <tcp_oos_insert_segment+0x104>)
 8017a5c:	483b      	ldr	r0, [pc, #236]	@ (8017b4c <tcp_oos_insert_segment+0x108>)
 8017a5e:	f009 fca9 	bl	80213b4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	68db      	ldr	r3, [r3, #12]
 8017a66:	899b      	ldrh	r3, [r3, #12]
 8017a68:	b29b      	uxth	r3, r3
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	f7fa fdc6 	bl	80125fc <lwip_htons>
 8017a70:	4603      	mov	r3, r0
 8017a72:	b2db      	uxtb	r3, r3
 8017a74:	f003 0301 	and.w	r3, r3, #1
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d028      	beq.n	8017ace <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8017a7c:	6838      	ldr	r0, [r7, #0]
 8017a7e:	f7fe f977 	bl	8015d70 <tcp_segs_free>
    next = NULL;
 8017a82:	2300      	movs	r3, #0
 8017a84:	603b      	str	r3, [r7, #0]
 8017a86:	e056      	b.n	8017b36 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017a88:	683b      	ldr	r3, [r7, #0]
 8017a8a:	68db      	ldr	r3, [r3, #12]
 8017a8c:	899b      	ldrh	r3, [r3, #12]
 8017a8e:	b29b      	uxth	r3, r3
 8017a90:	4618      	mov	r0, r3
 8017a92:	f7fa fdb3 	bl	80125fc <lwip_htons>
 8017a96:	4603      	mov	r3, r0
 8017a98:	b2db      	uxtb	r3, r3
 8017a9a:	f003 0301 	and.w	r3, r3, #1
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d00d      	beq.n	8017abe <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	68db      	ldr	r3, [r3, #12]
 8017aa6:	899b      	ldrh	r3, [r3, #12]
 8017aa8:	b29c      	uxth	r4, r3
 8017aaa:	2001      	movs	r0, #1
 8017aac:	f7fa fda6 	bl	80125fc <lwip_htons>
 8017ab0:	4603      	mov	r3, r0
 8017ab2:	461a      	mov	r2, r3
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	68db      	ldr	r3, [r3, #12]
 8017ab8:	4322      	orrs	r2, r4
 8017aba:	b292      	uxth	r2, r2
 8017abc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8017abe:	683b      	ldr	r3, [r7, #0]
 8017ac0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8017ac2:	683b      	ldr	r3, [r7, #0]
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8017ac8:	68f8      	ldr	r0, [r7, #12]
 8017aca:	f7fe f966 	bl	8015d9a <tcp_seg_free>
    while (next &&
 8017ace:	683b      	ldr	r3, [r7, #0]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d00e      	beq.n	8017af2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	891b      	ldrh	r3, [r3, #8]
 8017ad8:	461a      	mov	r2, r3
 8017ada:	4b1d      	ldr	r3, [pc, #116]	@ (8017b50 <tcp_oos_insert_segment+0x10c>)
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	441a      	add	r2, r3
 8017ae0:	683b      	ldr	r3, [r7, #0]
 8017ae2:	68db      	ldr	r3, [r3, #12]
 8017ae4:	685b      	ldr	r3, [r3, #4]
 8017ae6:	6839      	ldr	r1, [r7, #0]
 8017ae8:	8909      	ldrh	r1, [r1, #8]
 8017aea:	440b      	add	r3, r1
 8017aec:	1ad3      	subs	r3, r2, r3
    while (next &&
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	daca      	bge.n	8017a88 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8017af2:	683b      	ldr	r3, [r7, #0]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d01e      	beq.n	8017b36 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	891b      	ldrh	r3, [r3, #8]
 8017afc:	461a      	mov	r2, r3
 8017afe:	4b14      	ldr	r3, [pc, #80]	@ (8017b50 <tcp_oos_insert_segment+0x10c>)
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	441a      	add	r2, r3
 8017b04:	683b      	ldr	r3, [r7, #0]
 8017b06:	68db      	ldr	r3, [r3, #12]
 8017b08:	685b      	ldr	r3, [r3, #4]
 8017b0a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	dd12      	ble.n	8017b36 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8017b10:	683b      	ldr	r3, [r7, #0]
 8017b12:	68db      	ldr	r3, [r3, #12]
 8017b14:	685b      	ldr	r3, [r3, #4]
 8017b16:	b29a      	uxth	r2, r3
 8017b18:	4b0d      	ldr	r3, [pc, #52]	@ (8017b50 <tcp_oos_insert_segment+0x10c>)
 8017b1a:	681b      	ldr	r3, [r3, #0]
 8017b1c:	b29b      	uxth	r3, r3
 8017b1e:	1ad3      	subs	r3, r2, r3
 8017b20:	b29a      	uxth	r2, r3
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	685a      	ldr	r2, [r3, #4]
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	891b      	ldrh	r3, [r3, #8]
 8017b2e:	4619      	mov	r1, r3
 8017b30:	4610      	mov	r0, r2
 8017b32:	f7fc f99b 	bl	8013e6c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	683a      	ldr	r2, [r7, #0]
 8017b3a:	601a      	str	r2, [r3, #0]
}
 8017b3c:	bf00      	nop
 8017b3e:	3714      	adds	r7, #20
 8017b40:	46bd      	mov	sp, r7
 8017b42:	bd90      	pop	{r4, r7, pc}
 8017b44:	080248b8 	.word	0x080248b8
 8017b48:	08024b78 	.word	0x08024b78
 8017b4c:	08024904 	.word	0x08024904
 8017b50:	20004c20 	.word	0x20004c20

08017b54 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8017b54:	b5b0      	push	{r4, r5, r7, lr}
 8017b56:	b086      	sub	sp, #24
 8017b58:	af00      	add	r7, sp, #0
 8017b5a:	60f8      	str	r0, [r7, #12]
 8017b5c:	60b9      	str	r1, [r7, #8]
 8017b5e:	607a      	str	r2, [r7, #4]
 8017b60:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8017b62:	e03e      	b.n	8017be2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8017b64:	68bb      	ldr	r3, [r7, #8]
 8017b66:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8017b68:	68bb      	ldr	r3, [r7, #8]
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8017b6e:	697b      	ldr	r3, [r7, #20]
 8017b70:	685b      	ldr	r3, [r3, #4]
 8017b72:	4618      	mov	r0, r3
 8017b74:	f7fc fb8e 	bl	8014294 <pbuf_clen>
 8017b78:	4603      	mov	r3, r0
 8017b7a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017b82:	8a7a      	ldrh	r2, [r7, #18]
 8017b84:	429a      	cmp	r2, r3
 8017b86:	d906      	bls.n	8017b96 <tcp_free_acked_segments+0x42>
 8017b88:	4b2a      	ldr	r3, [pc, #168]	@ (8017c34 <tcp_free_acked_segments+0xe0>)
 8017b8a:	f240 4257 	movw	r2, #1111	@ 0x457
 8017b8e:	492a      	ldr	r1, [pc, #168]	@ (8017c38 <tcp_free_acked_segments+0xe4>)
 8017b90:	482a      	ldr	r0, [pc, #168]	@ (8017c3c <tcp_free_acked_segments+0xe8>)
 8017b92:	f009 fc0f 	bl	80213b4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8017b9c:	8a7b      	ldrh	r3, [r7, #18]
 8017b9e:	1ad3      	subs	r3, r2, r3
 8017ba0:	b29a      	uxth	r2, r3
 8017ba2:	68fb      	ldr	r3, [r7, #12]
 8017ba4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8017ba8:	697b      	ldr	r3, [r7, #20]
 8017baa:	891a      	ldrh	r2, [r3, #8]
 8017bac:	4b24      	ldr	r3, [pc, #144]	@ (8017c40 <tcp_free_acked_segments+0xec>)
 8017bae:	881b      	ldrh	r3, [r3, #0]
 8017bb0:	4413      	add	r3, r2
 8017bb2:	b29a      	uxth	r2, r3
 8017bb4:	4b22      	ldr	r3, [pc, #136]	@ (8017c40 <tcp_free_acked_segments+0xec>)
 8017bb6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8017bb8:	6978      	ldr	r0, [r7, #20]
 8017bba:	f7fe f8ee 	bl	8015d9a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d00c      	beq.n	8017be2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8017bc8:	68bb      	ldr	r3, [r7, #8]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d109      	bne.n	8017be2 <tcp_free_acked_segments+0x8e>
 8017bce:	683b      	ldr	r3, [r7, #0]
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d106      	bne.n	8017be2 <tcp_free_acked_segments+0x8e>
 8017bd4:	4b17      	ldr	r3, [pc, #92]	@ (8017c34 <tcp_free_acked_segments+0xe0>)
 8017bd6:	f240 4261 	movw	r2, #1121	@ 0x461
 8017bda:	491a      	ldr	r1, [pc, #104]	@ (8017c44 <tcp_free_acked_segments+0xf0>)
 8017bdc:	4817      	ldr	r0, [pc, #92]	@ (8017c3c <tcp_free_acked_segments+0xe8>)
 8017bde:	f009 fbe9 	bl	80213b4 <iprintf>
  while (seg_list != NULL &&
 8017be2:	68bb      	ldr	r3, [r7, #8]
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d020      	beq.n	8017c2a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8017be8:	68bb      	ldr	r3, [r7, #8]
 8017bea:	68db      	ldr	r3, [r3, #12]
 8017bec:	685b      	ldr	r3, [r3, #4]
 8017bee:	4618      	mov	r0, r3
 8017bf0:	f7fa fd1a 	bl	8012628 <lwip_htonl>
 8017bf4:	4604      	mov	r4, r0
 8017bf6:	68bb      	ldr	r3, [r7, #8]
 8017bf8:	891b      	ldrh	r3, [r3, #8]
 8017bfa:	461d      	mov	r5, r3
 8017bfc:	68bb      	ldr	r3, [r7, #8]
 8017bfe:	68db      	ldr	r3, [r3, #12]
 8017c00:	899b      	ldrh	r3, [r3, #12]
 8017c02:	b29b      	uxth	r3, r3
 8017c04:	4618      	mov	r0, r3
 8017c06:	f7fa fcf9 	bl	80125fc <lwip_htons>
 8017c0a:	4603      	mov	r3, r0
 8017c0c:	b2db      	uxtb	r3, r3
 8017c0e:	f003 0303 	and.w	r3, r3, #3
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d001      	beq.n	8017c1a <tcp_free_acked_segments+0xc6>
 8017c16:	2301      	movs	r3, #1
 8017c18:	e000      	b.n	8017c1c <tcp_free_acked_segments+0xc8>
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	442b      	add	r3, r5
 8017c1e:	18e2      	adds	r2, r4, r3
 8017c20:	4b09      	ldr	r3, [pc, #36]	@ (8017c48 <tcp_free_acked_segments+0xf4>)
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	dd9c      	ble.n	8017b64 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8017c2a:	68bb      	ldr	r3, [r7, #8]
}
 8017c2c:	4618      	mov	r0, r3
 8017c2e:	3718      	adds	r7, #24
 8017c30:	46bd      	mov	sp, r7
 8017c32:	bdb0      	pop	{r4, r5, r7, pc}
 8017c34:	080248b8 	.word	0x080248b8
 8017c38:	08024ba0 	.word	0x08024ba0
 8017c3c:	08024904 	.word	0x08024904
 8017c40:	20004c28 	.word	0x20004c28
 8017c44:	08024bc8 	.word	0x08024bc8
 8017c48:	20004c24 	.word	0x20004c24

08017c4c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8017c4c:	b5b0      	push	{r4, r5, r7, lr}
 8017c4e:	b094      	sub	sp, #80	@ 0x50
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8017c54:	2300      	movs	r3, #0
 8017c56:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d106      	bne.n	8017c6c <tcp_receive+0x20>
 8017c5e:	4b91      	ldr	r3, [pc, #580]	@ (8017ea4 <tcp_receive+0x258>)
 8017c60:	f240 427b 	movw	r2, #1147	@ 0x47b
 8017c64:	4990      	ldr	r1, [pc, #576]	@ (8017ea8 <tcp_receive+0x25c>)
 8017c66:	4891      	ldr	r0, [pc, #580]	@ (8017eac <tcp_receive+0x260>)
 8017c68:	f009 fba4 	bl	80213b4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	7d1b      	ldrb	r3, [r3, #20]
 8017c70:	2b03      	cmp	r3, #3
 8017c72:	d806      	bhi.n	8017c82 <tcp_receive+0x36>
 8017c74:	4b8b      	ldr	r3, [pc, #556]	@ (8017ea4 <tcp_receive+0x258>)
 8017c76:	f240 427c 	movw	r2, #1148	@ 0x47c
 8017c7a:	498d      	ldr	r1, [pc, #564]	@ (8017eb0 <tcp_receive+0x264>)
 8017c7c:	488b      	ldr	r0, [pc, #556]	@ (8017eac <tcp_receive+0x260>)
 8017c7e:	f009 fb99 	bl	80213b4 <iprintf>

  if (flags & TCP_ACK) {
 8017c82:	4b8c      	ldr	r3, [pc, #560]	@ (8017eb4 <tcp_receive+0x268>)
 8017c84:	781b      	ldrb	r3, [r3, #0]
 8017c86:	f003 0310 	and.w	r3, r3, #16
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	f000 8264 	beq.w	8018158 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017c96:	461a      	mov	r2, r3
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017c9c:	4413      	add	r3, r2
 8017c9e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8017ca4:	4b84      	ldr	r3, [pc, #528]	@ (8017eb8 <tcp_receive+0x26c>)
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	1ad3      	subs	r3, r2, r3
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	db1b      	blt.n	8017ce6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8017cb2:	4b81      	ldr	r3, [pc, #516]	@ (8017eb8 <tcp_receive+0x26c>)
 8017cb4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017cb6:	429a      	cmp	r2, r3
 8017cb8:	d106      	bne.n	8017cc8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017cbe:	4b7f      	ldr	r3, [pc, #508]	@ (8017ebc <tcp_receive+0x270>)
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	1ad3      	subs	r3, r2, r3
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	db0e      	blt.n	8017ce6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8017ccc:	4b7b      	ldr	r3, [pc, #492]	@ (8017ebc <tcp_receive+0x270>)
 8017cce:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017cd0:	429a      	cmp	r2, r3
 8017cd2:	d125      	bne.n	8017d20 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017cd4:	4b7a      	ldr	r3, [pc, #488]	@ (8017ec0 <tcp_receive+0x274>)
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	89db      	ldrh	r3, [r3, #14]
 8017cda:	b29a      	uxth	r2, r3
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017ce2:	429a      	cmp	r2, r3
 8017ce4:	d91c      	bls.n	8017d20 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8017ce6:	4b76      	ldr	r3, [pc, #472]	@ (8017ec0 <tcp_receive+0x274>)
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	89db      	ldrh	r3, [r3, #14]
 8017cec:	b29a      	uxth	r2, r3
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017d00:	429a      	cmp	r2, r3
 8017d02:	d205      	bcs.n	8017d10 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8017d10:	4b69      	ldr	r3, [pc, #420]	@ (8017eb8 <tcp_receive+0x26c>)
 8017d12:	681a      	ldr	r2, [r3, #0]
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8017d18:	4b68      	ldr	r3, [pc, #416]	@ (8017ebc <tcp_receive+0x270>)
 8017d1a:	681a      	ldr	r2, [r3, #0]
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8017d20:	4b66      	ldr	r3, [pc, #408]	@ (8017ebc <tcp_receive+0x270>)
 8017d22:	681a      	ldr	r2, [r3, #0]
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017d28:	1ad3      	subs	r3, r2, r3
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	dc58      	bgt.n	8017de0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8017d2e:	4b65      	ldr	r3, [pc, #404]	@ (8017ec4 <tcp_receive+0x278>)
 8017d30:	881b      	ldrh	r3, [r3, #0]
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d14b      	bne.n	8017dce <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017d3a:	687a      	ldr	r2, [r7, #4]
 8017d3c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8017d40:	4413      	add	r3, r2
 8017d42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017d44:	429a      	cmp	r2, r3
 8017d46:	d142      	bne.n	8017dce <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	db3d      	blt.n	8017dce <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8017d56:	4b59      	ldr	r3, [pc, #356]	@ (8017ebc <tcp_receive+0x270>)
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	429a      	cmp	r2, r3
 8017d5c:	d137      	bne.n	8017dce <tcp_receive+0x182>
              found_dupack = 1;
 8017d5e:	2301      	movs	r3, #1
 8017d60:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017d68:	2bff      	cmp	r3, #255	@ 0xff
 8017d6a:	d007      	beq.n	8017d7c <tcp_receive+0x130>
                ++pcb->dupacks;
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017d72:	3301      	adds	r3, #1
 8017d74:	b2da      	uxtb	r2, r3
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017d82:	2b03      	cmp	r3, #3
 8017d84:	d91b      	bls.n	8017dbe <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017d90:	4413      	add	r3, r2
 8017d92:	b29a      	uxth	r2, r3
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017d9a:	429a      	cmp	r2, r3
 8017d9c:	d30a      	bcc.n	8017db4 <tcp_receive+0x168>
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017da8:	4413      	add	r3, r2
 8017daa:	b29a      	uxth	r2, r3
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017db2:	e004      	b.n	8017dbe <tcp_receive+0x172>
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017dba:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8017dc4:	2b02      	cmp	r3, #2
 8017dc6:	d902      	bls.n	8017dce <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017dc8:	6878      	ldr	r0, [r7, #4]
 8017dca:	f002 fb3f 	bl	801a44c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8017dce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	f040 8161 	bne.w	8018098 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	2200      	movs	r2, #0
 8017dda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8017dde:	e15b      	b.n	8018098 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017de0:	4b36      	ldr	r3, [pc, #216]	@ (8017ebc <tcp_receive+0x270>)
 8017de2:	681a      	ldr	r2, [r3, #0]
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017de8:	1ad3      	subs	r3, r2, r3
 8017dea:	3b01      	subs	r3, #1
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	f2c0 814e 	blt.w	801808e <tcp_receive+0x442>
 8017df2:	4b32      	ldr	r3, [pc, #200]	@ (8017ebc <tcp_receive+0x270>)
 8017df4:	681a      	ldr	r2, [r3, #0]
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017dfa:	1ad3      	subs	r3, r2, r3
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	f300 8146 	bgt.w	801808e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	8b5b      	ldrh	r3, [r3, #26]
 8017e06:	f003 0304 	and.w	r3, r3, #4
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d010      	beq.n	8017e30 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	8b5b      	ldrh	r3, [r3, #26]
 8017e12:	f023 0304 	bic.w	r3, r3, #4
 8017e16:	b29a      	uxth	r2, r3
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8017e1c:	687b      	ldr	r3, [r7, #4]
 8017e1e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	2200      	movs	r2, #0
 8017e2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	2200      	movs	r2, #0
 8017e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8017e3e:	10db      	asrs	r3, r3, #3
 8017e40:	b21b      	sxth	r3, r3
 8017e42:	b29a      	uxth	r2, r3
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8017e4a:	b29b      	uxth	r3, r3
 8017e4c:	4413      	add	r3, r2
 8017e4e:	b29b      	uxth	r3, r3
 8017e50:	b21a      	sxth	r2, r3
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8017e58:	4b18      	ldr	r3, [pc, #96]	@ (8017ebc <tcp_receive+0x270>)
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	b29a      	uxth	r2, r3
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017e62:	b29b      	uxth	r3, r3
 8017e64:	1ad3      	subs	r3, r2, r3
 8017e66:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	2200      	movs	r2, #0
 8017e6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8017e70:	4b12      	ldr	r3, [pc, #72]	@ (8017ebc <tcp_receive+0x270>)
 8017e72:	681a      	ldr	r2, [r3, #0]
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	7d1b      	ldrb	r3, [r3, #20]
 8017e7c:	2b03      	cmp	r3, #3
 8017e7e:	f240 8097 	bls.w	8017fb0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8017e8e:	429a      	cmp	r2, r3
 8017e90:	d245      	bcs.n	8017f1e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	8b5b      	ldrh	r3, [r3, #26]
 8017e96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d014      	beq.n	8017ec8 <tcp_receive+0x27c>
 8017e9e:	2301      	movs	r3, #1
 8017ea0:	e013      	b.n	8017eca <tcp_receive+0x27e>
 8017ea2:	bf00      	nop
 8017ea4:	080248b8 	.word	0x080248b8
 8017ea8:	08024be8 	.word	0x08024be8
 8017eac:	08024904 	.word	0x08024904
 8017eb0:	08024c04 	.word	0x08024c04
 8017eb4:	20004c2c 	.word	0x20004c2c
 8017eb8:	20004c20 	.word	0x20004c20
 8017ebc:	20004c24 	.word	0x20004c24
 8017ec0:	20004c10 	.word	0x20004c10
 8017ec4:	20004c2a 	.word	0x20004c2a
 8017ec8:	2302      	movs	r3, #2
 8017eca:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8017ece:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8017ed2:	b29a      	uxth	r2, r3
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017ed8:	fb12 f303 	smulbb	r3, r2, r3
 8017edc:	b29b      	uxth	r3, r3
 8017ede:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8017ee0:	4293      	cmp	r3, r2
 8017ee2:	bf28      	it	cs
 8017ee4:	4613      	movcs	r3, r2
 8017ee6:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017eee:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017ef0:	4413      	add	r3, r2
 8017ef2:	b29a      	uxth	r2, r3
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017efa:	429a      	cmp	r2, r3
 8017efc:	d309      	bcc.n	8017f12 <tcp_receive+0x2c6>
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017f04:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017f06:	4413      	add	r3, r2
 8017f08:	b29a      	uxth	r2, r3
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017f10:	e04e      	b.n	8017fb0 <tcp_receive+0x364>
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017f18:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017f1c:	e048      	b.n	8017fb0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017f24:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017f26:	4413      	add	r3, r2
 8017f28:	b29a      	uxth	r2, r3
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8017f30:	429a      	cmp	r2, r3
 8017f32:	d309      	bcc.n	8017f48 <tcp_receive+0x2fc>
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017f3a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017f3c:	4413      	add	r3, r2
 8017f3e:	b29a      	uxth	r2, r3
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8017f46:	e004      	b.n	8017f52 <tcp_receive+0x306>
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017f4e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017f5e:	429a      	cmp	r2, r3
 8017f60:	d326      	bcc.n	8017fb0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017f6e:	1ad3      	subs	r3, r2, r3
 8017f70:	b29a      	uxth	r2, r3
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017f82:	4413      	add	r3, r2
 8017f84:	b29a      	uxth	r2, r3
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017f8c:	429a      	cmp	r2, r3
 8017f8e:	d30a      	bcc.n	8017fa6 <tcp_receive+0x35a>
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017f9a:	4413      	add	r3, r2
 8017f9c:	b29a      	uxth	r2, r3
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8017fa4:	e004      	b.n	8017fb0 <tcp_receive+0x364>
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017fac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017fb8:	4a98      	ldr	r2, [pc, #608]	@ (801821c <tcp_receive+0x5d0>)
 8017fba:	6878      	ldr	r0, [r7, #4]
 8017fbc:	f7ff fdca 	bl	8017b54 <tcp_free_acked_segments>
 8017fc0:	4602      	mov	r2, r0
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017fce:	4a94      	ldr	r2, [pc, #592]	@ (8018220 <tcp_receive+0x5d4>)
 8017fd0:	6878      	ldr	r0, [r7, #4]
 8017fd2:	f7ff fdbf 	bl	8017b54 <tcp_free_acked_segments>
 8017fd6:	4602      	mov	r2, r0
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d104      	bne.n	8017fee <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017fea:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017fec:	e002      	b.n	8017ff4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	2200      	movs	r2, #0
 8017ff2:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	2200      	movs	r2, #0
 8017ff8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d103      	bne.n	801800a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	2200      	movs	r2, #0
 8018006:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8018010:	4b84      	ldr	r3, [pc, #528]	@ (8018224 <tcp_receive+0x5d8>)
 8018012:	881b      	ldrh	r3, [r3, #0]
 8018014:	4413      	add	r3, r2
 8018016:	b29a      	uxth	r2, r3
 8018018:	687b      	ldr	r3, [r7, #4]
 801801a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	8b5b      	ldrh	r3, [r3, #26]
 8018022:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018026:	2b00      	cmp	r3, #0
 8018028:	d035      	beq.n	8018096 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801802e:	2b00      	cmp	r3, #0
 8018030:	d118      	bne.n	8018064 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018036:	2b00      	cmp	r3, #0
 8018038:	d00c      	beq.n	8018054 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018042:	68db      	ldr	r3, [r3, #12]
 8018044:	685b      	ldr	r3, [r3, #4]
 8018046:	4618      	mov	r0, r3
 8018048:	f7fa faee 	bl	8012628 <lwip_htonl>
 801804c:	4603      	mov	r3, r0
 801804e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8018050:	2b00      	cmp	r3, #0
 8018052:	dc20      	bgt.n	8018096 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	8b5b      	ldrh	r3, [r3, #26]
 8018058:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801805c:	b29a      	uxth	r2, r3
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018062:	e018      	b.n	8018096 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801806c:	68db      	ldr	r3, [r3, #12]
 801806e:	685b      	ldr	r3, [r3, #4]
 8018070:	4618      	mov	r0, r3
 8018072:	f7fa fad9 	bl	8012628 <lwip_htonl>
 8018076:	4603      	mov	r3, r0
 8018078:	1ae3      	subs	r3, r4, r3
 801807a:	2b00      	cmp	r3, #0
 801807c:	dc0b      	bgt.n	8018096 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	8b5b      	ldrh	r3, [r3, #26]
 8018082:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8018086:	b29a      	uxth	r2, r3
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801808c:	e003      	b.n	8018096 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801808e:	6878      	ldr	r0, [r7, #4]
 8018090:	f002 fbc8 	bl	801a824 <tcp_send_empty_ack>
 8018094:	e000      	b.n	8018098 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018096:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801809c:	2b00      	cmp	r3, #0
 801809e:	d05b      	beq.n	8018158 <tcp_receive+0x50c>
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80180a4:	4b60      	ldr	r3, [pc, #384]	@ (8018228 <tcp_receive+0x5dc>)
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	1ad3      	subs	r3, r2, r3
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	da54      	bge.n	8018158 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80180ae:	4b5f      	ldr	r3, [pc, #380]	@ (801822c <tcp_receive+0x5e0>)
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	b29a      	uxth	r2, r3
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80180b8:	b29b      	uxth	r3, r3
 80180ba:	1ad3      	subs	r3, r2, r3
 80180bc:	b29b      	uxth	r3, r3
 80180be:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80180c2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80180cc:	10db      	asrs	r3, r3, #3
 80180ce:	b21b      	sxth	r3, r3
 80180d0:	b29b      	uxth	r3, r3
 80180d2:	1ad3      	subs	r3, r2, r3
 80180d4:	b29b      	uxth	r3, r3
 80180d6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80180e0:	b29a      	uxth	r2, r3
 80180e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80180e6:	4413      	add	r3, r2
 80180e8:	b29b      	uxth	r3, r3
 80180ea:	b21a      	sxth	r2, r3
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80180f0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	da05      	bge.n	8018104 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80180f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80180fc:	425b      	negs	r3, r3
 80180fe:	b29b      	uxth	r3, r3
 8018100:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8018104:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801810e:	109b      	asrs	r3, r3, #2
 8018110:	b21b      	sxth	r3, r3
 8018112:	b29b      	uxth	r3, r3
 8018114:	1ad3      	subs	r3, r2, r3
 8018116:	b29b      	uxth	r3, r3
 8018118:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018122:	b29a      	uxth	r2, r3
 8018124:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018128:	4413      	add	r3, r2
 801812a:	b29b      	uxth	r3, r3
 801812c:	b21a      	sxth	r2, r3
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018138:	10db      	asrs	r3, r3, #3
 801813a:	b21b      	sxth	r3, r3
 801813c:	b29a      	uxth	r2, r3
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018144:	b29b      	uxth	r3, r3
 8018146:	4413      	add	r3, r2
 8018148:	b29b      	uxth	r3, r3
 801814a:	b21a      	sxth	r2, r3
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	2200      	movs	r2, #0
 8018156:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8018158:	4b35      	ldr	r3, [pc, #212]	@ (8018230 <tcp_receive+0x5e4>)
 801815a:	881b      	ldrh	r3, [r3, #0]
 801815c:	2b00      	cmp	r3, #0
 801815e:	f000 84df 	beq.w	8018b20 <tcp_receive+0xed4>
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	7d1b      	ldrb	r3, [r3, #20]
 8018166:	2b06      	cmp	r3, #6
 8018168:	f200 84da 	bhi.w	8018b20 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018170:	4b30      	ldr	r3, [pc, #192]	@ (8018234 <tcp_receive+0x5e8>)
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	1ad3      	subs	r3, r2, r3
 8018176:	3b01      	subs	r3, #1
 8018178:	2b00      	cmp	r3, #0
 801817a:	f2c0 808f 	blt.w	801829c <tcp_receive+0x650>
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018182:	4b2b      	ldr	r3, [pc, #172]	@ (8018230 <tcp_receive+0x5e4>)
 8018184:	881b      	ldrh	r3, [r3, #0]
 8018186:	4619      	mov	r1, r3
 8018188:	4b2a      	ldr	r3, [pc, #168]	@ (8018234 <tcp_receive+0x5e8>)
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	440b      	add	r3, r1
 801818e:	1ad3      	subs	r3, r2, r3
 8018190:	3301      	adds	r3, #1
 8018192:	2b00      	cmp	r3, #0
 8018194:	f300 8082 	bgt.w	801829c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8018198:	4b27      	ldr	r3, [pc, #156]	@ (8018238 <tcp_receive+0x5ec>)
 801819a:	685b      	ldr	r3, [r3, #4]
 801819c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80181a2:	4b24      	ldr	r3, [pc, #144]	@ (8018234 <tcp_receive+0x5e8>)
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	1ad3      	subs	r3, r2, r3
 80181a8:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80181aa:	4b23      	ldr	r3, [pc, #140]	@ (8018238 <tcp_receive+0x5ec>)
 80181ac:	685b      	ldr	r3, [r3, #4]
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d106      	bne.n	80181c0 <tcp_receive+0x574>
 80181b2:	4b22      	ldr	r3, [pc, #136]	@ (801823c <tcp_receive+0x5f0>)
 80181b4:	f240 5294 	movw	r2, #1428	@ 0x594
 80181b8:	4921      	ldr	r1, [pc, #132]	@ (8018240 <tcp_receive+0x5f4>)
 80181ba:	4822      	ldr	r0, [pc, #136]	@ (8018244 <tcp_receive+0x5f8>)
 80181bc:	f009 f8fa 	bl	80213b4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80181c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181c2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80181c6:	4293      	cmp	r3, r2
 80181c8:	d906      	bls.n	80181d8 <tcp_receive+0x58c>
 80181ca:	4b1c      	ldr	r3, [pc, #112]	@ (801823c <tcp_receive+0x5f0>)
 80181cc:	f240 5295 	movw	r2, #1429	@ 0x595
 80181d0:	491d      	ldr	r1, [pc, #116]	@ (8018248 <tcp_receive+0x5fc>)
 80181d2:	481c      	ldr	r0, [pc, #112]	@ (8018244 <tcp_receive+0x5f8>)
 80181d4:	f009 f8ee 	bl	80213b4 <iprintf>
      off = (u16_t)off32;
 80181d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181da:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80181de:	4b16      	ldr	r3, [pc, #88]	@ (8018238 <tcp_receive+0x5ec>)
 80181e0:	685b      	ldr	r3, [r3, #4]
 80181e2:	891b      	ldrh	r3, [r3, #8]
 80181e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80181e8:	429a      	cmp	r2, r3
 80181ea:	d906      	bls.n	80181fa <tcp_receive+0x5ae>
 80181ec:	4b13      	ldr	r3, [pc, #76]	@ (801823c <tcp_receive+0x5f0>)
 80181ee:	f240 5297 	movw	r2, #1431	@ 0x597
 80181f2:	4916      	ldr	r1, [pc, #88]	@ (801824c <tcp_receive+0x600>)
 80181f4:	4813      	ldr	r0, [pc, #76]	@ (8018244 <tcp_receive+0x5f8>)
 80181f6:	f009 f8dd 	bl	80213b4 <iprintf>
      inseg.len -= off;
 80181fa:	4b0f      	ldr	r3, [pc, #60]	@ (8018238 <tcp_receive+0x5ec>)
 80181fc:	891a      	ldrh	r2, [r3, #8]
 80181fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018202:	1ad3      	subs	r3, r2, r3
 8018204:	b29a      	uxth	r2, r3
 8018206:	4b0c      	ldr	r3, [pc, #48]	@ (8018238 <tcp_receive+0x5ec>)
 8018208:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801820a:	4b0b      	ldr	r3, [pc, #44]	@ (8018238 <tcp_receive+0x5ec>)
 801820c:	685b      	ldr	r3, [r3, #4]
 801820e:	891a      	ldrh	r2, [r3, #8]
 8018210:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018214:	1ad3      	subs	r3, r2, r3
 8018216:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8018218:	e02a      	b.n	8018270 <tcp_receive+0x624>
 801821a:	bf00      	nop
 801821c:	08024c20 	.word	0x08024c20
 8018220:	08024c28 	.word	0x08024c28
 8018224:	20004c28 	.word	0x20004c28
 8018228:	20004c24 	.word	0x20004c24
 801822c:	20004be8 	.word	0x20004be8
 8018230:	20004c2a 	.word	0x20004c2a
 8018234:	20004c20 	.word	0x20004c20
 8018238:	20004c00 	.word	0x20004c00
 801823c:	080248b8 	.word	0x080248b8
 8018240:	08024c30 	.word	0x08024c30
 8018244:	08024904 	.word	0x08024904
 8018248:	08024c40 	.word	0x08024c40
 801824c:	08024c50 	.word	0x08024c50
        off -= p->len;
 8018250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018252:	895b      	ldrh	r3, [r3, #10]
 8018254:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018258:	1ad3      	subs	r3, r2, r3
 801825a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801825e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018260:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8018262:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8018264:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018266:	2200      	movs	r2, #0
 8018268:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801826a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801826c:	681b      	ldr	r3, [r3, #0]
 801826e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8018270:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018272:	895b      	ldrh	r3, [r3, #10]
 8018274:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018278:	429a      	cmp	r2, r3
 801827a:	d8e9      	bhi.n	8018250 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801827c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018280:	4619      	mov	r1, r3
 8018282:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8018284:	f7fb fef2 	bl	801406c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801828c:	4a90      	ldr	r2, [pc, #576]	@ (80184d0 <tcp_receive+0x884>)
 801828e:	6013      	str	r3, [r2, #0]
 8018290:	4b90      	ldr	r3, [pc, #576]	@ (80184d4 <tcp_receive+0x888>)
 8018292:	68db      	ldr	r3, [r3, #12]
 8018294:	4a8e      	ldr	r2, [pc, #568]	@ (80184d0 <tcp_receive+0x884>)
 8018296:	6812      	ldr	r2, [r2, #0]
 8018298:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801829a:	e00d      	b.n	80182b8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801829c:	4b8c      	ldr	r3, [pc, #560]	@ (80184d0 <tcp_receive+0x884>)
 801829e:	681a      	ldr	r2, [r3, #0]
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80182a4:	1ad3      	subs	r3, r2, r3
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	da06      	bge.n	80182b8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	8b5b      	ldrh	r3, [r3, #26]
 80182ae:	f043 0302 	orr.w	r3, r3, #2
 80182b2:	b29a      	uxth	r2, r3
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80182b8:	4b85      	ldr	r3, [pc, #532]	@ (80184d0 <tcp_receive+0x884>)
 80182ba:	681a      	ldr	r2, [r3, #0]
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80182c0:	1ad3      	subs	r3, r2, r3
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	f2c0 8427 	blt.w	8018b16 <tcp_receive+0xeca>
 80182c8:	4b81      	ldr	r3, [pc, #516]	@ (80184d0 <tcp_receive+0x884>)
 80182ca:	681a      	ldr	r2, [r3, #0]
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80182d0:	6879      	ldr	r1, [r7, #4]
 80182d2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80182d4:	440b      	add	r3, r1
 80182d6:	1ad3      	subs	r3, r2, r3
 80182d8:	3301      	adds	r3, #1
 80182da:	2b00      	cmp	r3, #0
 80182dc:	f300 841b 	bgt.w	8018b16 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80182e4:	4b7a      	ldr	r3, [pc, #488]	@ (80184d0 <tcp_receive+0x884>)
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	429a      	cmp	r2, r3
 80182ea:	f040 8298 	bne.w	801881e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80182ee:	4b79      	ldr	r3, [pc, #484]	@ (80184d4 <tcp_receive+0x888>)
 80182f0:	891c      	ldrh	r4, [r3, #8]
 80182f2:	4b78      	ldr	r3, [pc, #480]	@ (80184d4 <tcp_receive+0x888>)
 80182f4:	68db      	ldr	r3, [r3, #12]
 80182f6:	899b      	ldrh	r3, [r3, #12]
 80182f8:	b29b      	uxth	r3, r3
 80182fa:	4618      	mov	r0, r3
 80182fc:	f7fa f97e 	bl	80125fc <lwip_htons>
 8018300:	4603      	mov	r3, r0
 8018302:	b2db      	uxtb	r3, r3
 8018304:	f003 0303 	and.w	r3, r3, #3
 8018308:	2b00      	cmp	r3, #0
 801830a:	d001      	beq.n	8018310 <tcp_receive+0x6c4>
 801830c:	2301      	movs	r3, #1
 801830e:	e000      	b.n	8018312 <tcp_receive+0x6c6>
 8018310:	2300      	movs	r3, #0
 8018312:	4423      	add	r3, r4
 8018314:	b29a      	uxth	r2, r3
 8018316:	4b70      	ldr	r3, [pc, #448]	@ (80184d8 <tcp_receive+0x88c>)
 8018318:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801831e:	4b6e      	ldr	r3, [pc, #440]	@ (80184d8 <tcp_receive+0x88c>)
 8018320:	881b      	ldrh	r3, [r3, #0]
 8018322:	429a      	cmp	r2, r3
 8018324:	d274      	bcs.n	8018410 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018326:	4b6b      	ldr	r3, [pc, #428]	@ (80184d4 <tcp_receive+0x888>)
 8018328:	68db      	ldr	r3, [r3, #12]
 801832a:	899b      	ldrh	r3, [r3, #12]
 801832c:	b29b      	uxth	r3, r3
 801832e:	4618      	mov	r0, r3
 8018330:	f7fa f964 	bl	80125fc <lwip_htons>
 8018334:	4603      	mov	r3, r0
 8018336:	b2db      	uxtb	r3, r3
 8018338:	f003 0301 	and.w	r3, r3, #1
 801833c:	2b00      	cmp	r3, #0
 801833e:	d01e      	beq.n	801837e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8018340:	4b64      	ldr	r3, [pc, #400]	@ (80184d4 <tcp_receive+0x888>)
 8018342:	68db      	ldr	r3, [r3, #12]
 8018344:	899b      	ldrh	r3, [r3, #12]
 8018346:	b29b      	uxth	r3, r3
 8018348:	b21b      	sxth	r3, r3
 801834a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801834e:	b21c      	sxth	r4, r3
 8018350:	4b60      	ldr	r3, [pc, #384]	@ (80184d4 <tcp_receive+0x888>)
 8018352:	68db      	ldr	r3, [r3, #12]
 8018354:	899b      	ldrh	r3, [r3, #12]
 8018356:	b29b      	uxth	r3, r3
 8018358:	4618      	mov	r0, r3
 801835a:	f7fa f94f 	bl	80125fc <lwip_htons>
 801835e:	4603      	mov	r3, r0
 8018360:	b2db      	uxtb	r3, r3
 8018362:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8018366:	b29b      	uxth	r3, r3
 8018368:	4618      	mov	r0, r3
 801836a:	f7fa f947 	bl	80125fc <lwip_htons>
 801836e:	4603      	mov	r3, r0
 8018370:	b21b      	sxth	r3, r3
 8018372:	4323      	orrs	r3, r4
 8018374:	b21a      	sxth	r2, r3
 8018376:	4b57      	ldr	r3, [pc, #348]	@ (80184d4 <tcp_receive+0x888>)
 8018378:	68db      	ldr	r3, [r3, #12]
 801837a:	b292      	uxth	r2, r2
 801837c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018382:	4b54      	ldr	r3, [pc, #336]	@ (80184d4 <tcp_receive+0x888>)
 8018384:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018386:	4b53      	ldr	r3, [pc, #332]	@ (80184d4 <tcp_receive+0x888>)
 8018388:	68db      	ldr	r3, [r3, #12]
 801838a:	899b      	ldrh	r3, [r3, #12]
 801838c:	b29b      	uxth	r3, r3
 801838e:	4618      	mov	r0, r3
 8018390:	f7fa f934 	bl	80125fc <lwip_htons>
 8018394:	4603      	mov	r3, r0
 8018396:	b2db      	uxtb	r3, r3
 8018398:	f003 0302 	and.w	r3, r3, #2
 801839c:	2b00      	cmp	r3, #0
 801839e:	d005      	beq.n	80183ac <tcp_receive+0x760>
            inseg.len -= 1;
 80183a0:	4b4c      	ldr	r3, [pc, #304]	@ (80184d4 <tcp_receive+0x888>)
 80183a2:	891b      	ldrh	r3, [r3, #8]
 80183a4:	3b01      	subs	r3, #1
 80183a6:	b29a      	uxth	r2, r3
 80183a8:	4b4a      	ldr	r3, [pc, #296]	@ (80184d4 <tcp_receive+0x888>)
 80183aa:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80183ac:	4b49      	ldr	r3, [pc, #292]	@ (80184d4 <tcp_receive+0x888>)
 80183ae:	685b      	ldr	r3, [r3, #4]
 80183b0:	4a48      	ldr	r2, [pc, #288]	@ (80184d4 <tcp_receive+0x888>)
 80183b2:	8912      	ldrh	r2, [r2, #8]
 80183b4:	4611      	mov	r1, r2
 80183b6:	4618      	mov	r0, r3
 80183b8:	f7fb fd58 	bl	8013e6c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80183bc:	4b45      	ldr	r3, [pc, #276]	@ (80184d4 <tcp_receive+0x888>)
 80183be:	891c      	ldrh	r4, [r3, #8]
 80183c0:	4b44      	ldr	r3, [pc, #272]	@ (80184d4 <tcp_receive+0x888>)
 80183c2:	68db      	ldr	r3, [r3, #12]
 80183c4:	899b      	ldrh	r3, [r3, #12]
 80183c6:	b29b      	uxth	r3, r3
 80183c8:	4618      	mov	r0, r3
 80183ca:	f7fa f917 	bl	80125fc <lwip_htons>
 80183ce:	4603      	mov	r3, r0
 80183d0:	b2db      	uxtb	r3, r3
 80183d2:	f003 0303 	and.w	r3, r3, #3
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d001      	beq.n	80183de <tcp_receive+0x792>
 80183da:	2301      	movs	r3, #1
 80183dc:	e000      	b.n	80183e0 <tcp_receive+0x794>
 80183de:	2300      	movs	r3, #0
 80183e0:	4423      	add	r3, r4
 80183e2:	b29a      	uxth	r2, r3
 80183e4:	4b3c      	ldr	r3, [pc, #240]	@ (80184d8 <tcp_receive+0x88c>)
 80183e6:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80183e8:	4b3b      	ldr	r3, [pc, #236]	@ (80184d8 <tcp_receive+0x88c>)
 80183ea:	881b      	ldrh	r3, [r3, #0]
 80183ec:	461a      	mov	r2, r3
 80183ee:	4b38      	ldr	r3, [pc, #224]	@ (80184d0 <tcp_receive+0x884>)
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	441a      	add	r2, r3
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80183f8:	6879      	ldr	r1, [r7, #4]
 80183fa:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80183fc:	440b      	add	r3, r1
 80183fe:	429a      	cmp	r2, r3
 8018400:	d006      	beq.n	8018410 <tcp_receive+0x7c4>
 8018402:	4b36      	ldr	r3, [pc, #216]	@ (80184dc <tcp_receive+0x890>)
 8018404:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8018408:	4935      	ldr	r1, [pc, #212]	@ (80184e0 <tcp_receive+0x894>)
 801840a:	4836      	ldr	r0, [pc, #216]	@ (80184e4 <tcp_receive+0x898>)
 801840c:	f008 ffd2 	bl	80213b4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018414:	2b00      	cmp	r3, #0
 8018416:	f000 80e6 	beq.w	80185e6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801841a:	4b2e      	ldr	r3, [pc, #184]	@ (80184d4 <tcp_receive+0x888>)
 801841c:	68db      	ldr	r3, [r3, #12]
 801841e:	899b      	ldrh	r3, [r3, #12]
 8018420:	b29b      	uxth	r3, r3
 8018422:	4618      	mov	r0, r3
 8018424:	f7fa f8ea 	bl	80125fc <lwip_htons>
 8018428:	4603      	mov	r3, r0
 801842a:	b2db      	uxtb	r3, r3
 801842c:	f003 0301 	and.w	r3, r3, #1
 8018430:	2b00      	cmp	r3, #0
 8018432:	d010      	beq.n	8018456 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8018434:	e00a      	b.n	801844c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801843a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018440:	681a      	ldr	r2, [r3, #0]
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8018446:	68f8      	ldr	r0, [r7, #12]
 8018448:	f7fd fca7 	bl	8015d9a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018450:	2b00      	cmp	r3, #0
 8018452:	d1f0      	bne.n	8018436 <tcp_receive+0x7ea>
 8018454:	e0c7      	b.n	80185e6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801845a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801845c:	e051      	b.n	8018502 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801845e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018460:	68db      	ldr	r3, [r3, #12]
 8018462:	899b      	ldrh	r3, [r3, #12]
 8018464:	b29b      	uxth	r3, r3
 8018466:	4618      	mov	r0, r3
 8018468:	f7fa f8c8 	bl	80125fc <lwip_htons>
 801846c:	4603      	mov	r3, r0
 801846e:	b2db      	uxtb	r3, r3
 8018470:	f003 0301 	and.w	r3, r3, #1
 8018474:	2b00      	cmp	r3, #0
 8018476:	d03c      	beq.n	80184f2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8018478:	4b16      	ldr	r3, [pc, #88]	@ (80184d4 <tcp_receive+0x888>)
 801847a:	68db      	ldr	r3, [r3, #12]
 801847c:	899b      	ldrh	r3, [r3, #12]
 801847e:	b29b      	uxth	r3, r3
 8018480:	4618      	mov	r0, r3
 8018482:	f7fa f8bb 	bl	80125fc <lwip_htons>
 8018486:	4603      	mov	r3, r0
 8018488:	b2db      	uxtb	r3, r3
 801848a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801848e:	2b00      	cmp	r3, #0
 8018490:	d12f      	bne.n	80184f2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8018492:	4b10      	ldr	r3, [pc, #64]	@ (80184d4 <tcp_receive+0x888>)
 8018494:	68db      	ldr	r3, [r3, #12]
 8018496:	899b      	ldrh	r3, [r3, #12]
 8018498:	b29c      	uxth	r4, r3
 801849a:	2001      	movs	r0, #1
 801849c:	f7fa f8ae 	bl	80125fc <lwip_htons>
 80184a0:	4603      	mov	r3, r0
 80184a2:	461a      	mov	r2, r3
 80184a4:	4b0b      	ldr	r3, [pc, #44]	@ (80184d4 <tcp_receive+0x888>)
 80184a6:	68db      	ldr	r3, [r3, #12]
 80184a8:	4322      	orrs	r2, r4
 80184aa:	b292      	uxth	r2, r2
 80184ac:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80184ae:	4b09      	ldr	r3, [pc, #36]	@ (80184d4 <tcp_receive+0x888>)
 80184b0:	891c      	ldrh	r4, [r3, #8]
 80184b2:	4b08      	ldr	r3, [pc, #32]	@ (80184d4 <tcp_receive+0x888>)
 80184b4:	68db      	ldr	r3, [r3, #12]
 80184b6:	899b      	ldrh	r3, [r3, #12]
 80184b8:	b29b      	uxth	r3, r3
 80184ba:	4618      	mov	r0, r3
 80184bc:	f7fa f89e 	bl	80125fc <lwip_htons>
 80184c0:	4603      	mov	r3, r0
 80184c2:	b2db      	uxtb	r3, r3
 80184c4:	f003 0303 	and.w	r3, r3, #3
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d00d      	beq.n	80184e8 <tcp_receive+0x89c>
 80184cc:	2301      	movs	r3, #1
 80184ce:	e00c      	b.n	80184ea <tcp_receive+0x89e>
 80184d0:	20004c20 	.word	0x20004c20
 80184d4:	20004c00 	.word	0x20004c00
 80184d8:	20004c2a 	.word	0x20004c2a
 80184dc:	080248b8 	.word	0x080248b8
 80184e0:	08024c60 	.word	0x08024c60
 80184e4:	08024904 	.word	0x08024904
 80184e8:	2300      	movs	r3, #0
 80184ea:	4423      	add	r3, r4
 80184ec:	b29a      	uxth	r2, r3
 80184ee:	4b98      	ldr	r3, [pc, #608]	@ (8018750 <tcp_receive+0xb04>)
 80184f0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80184f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80184f4:	613b      	str	r3, [r7, #16]
              next = next->next;
 80184f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80184f8:	681b      	ldr	r3, [r3, #0]
 80184fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80184fc:	6938      	ldr	r0, [r7, #16]
 80184fe:	f7fd fc4c 	bl	8015d9a <tcp_seg_free>
            while (next &&
 8018502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018504:	2b00      	cmp	r3, #0
 8018506:	d00e      	beq.n	8018526 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018508:	4b91      	ldr	r3, [pc, #580]	@ (8018750 <tcp_receive+0xb04>)
 801850a:	881b      	ldrh	r3, [r3, #0]
 801850c:	461a      	mov	r2, r3
 801850e:	4b91      	ldr	r3, [pc, #580]	@ (8018754 <tcp_receive+0xb08>)
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	441a      	add	r2, r3
 8018514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018516:	68db      	ldr	r3, [r3, #12]
 8018518:	685b      	ldr	r3, [r3, #4]
 801851a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801851c:	8909      	ldrh	r1, [r1, #8]
 801851e:	440b      	add	r3, r1
 8018520:	1ad3      	subs	r3, r2, r3
            while (next &&
 8018522:	2b00      	cmp	r3, #0
 8018524:	da9b      	bge.n	801845e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8018526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018528:	2b00      	cmp	r3, #0
 801852a:	d059      	beq.n	80185e0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801852c:	4b88      	ldr	r3, [pc, #544]	@ (8018750 <tcp_receive+0xb04>)
 801852e:	881b      	ldrh	r3, [r3, #0]
 8018530:	461a      	mov	r2, r3
 8018532:	4b88      	ldr	r3, [pc, #544]	@ (8018754 <tcp_receive+0xb08>)
 8018534:	681b      	ldr	r3, [r3, #0]
 8018536:	441a      	add	r2, r3
 8018538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801853a:	68db      	ldr	r3, [r3, #12]
 801853c:	685b      	ldr	r3, [r3, #4]
 801853e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8018540:	2b00      	cmp	r3, #0
 8018542:	dd4d      	ble.n	80185e0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8018544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018546:	68db      	ldr	r3, [r3, #12]
 8018548:	685b      	ldr	r3, [r3, #4]
 801854a:	b29a      	uxth	r2, r3
 801854c:	4b81      	ldr	r3, [pc, #516]	@ (8018754 <tcp_receive+0xb08>)
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	b29b      	uxth	r3, r3
 8018552:	1ad3      	subs	r3, r2, r3
 8018554:	b29a      	uxth	r2, r3
 8018556:	4b80      	ldr	r3, [pc, #512]	@ (8018758 <tcp_receive+0xb0c>)
 8018558:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801855a:	4b7f      	ldr	r3, [pc, #508]	@ (8018758 <tcp_receive+0xb0c>)
 801855c:	68db      	ldr	r3, [r3, #12]
 801855e:	899b      	ldrh	r3, [r3, #12]
 8018560:	b29b      	uxth	r3, r3
 8018562:	4618      	mov	r0, r3
 8018564:	f7fa f84a 	bl	80125fc <lwip_htons>
 8018568:	4603      	mov	r3, r0
 801856a:	b2db      	uxtb	r3, r3
 801856c:	f003 0302 	and.w	r3, r3, #2
 8018570:	2b00      	cmp	r3, #0
 8018572:	d005      	beq.n	8018580 <tcp_receive+0x934>
                inseg.len -= 1;
 8018574:	4b78      	ldr	r3, [pc, #480]	@ (8018758 <tcp_receive+0xb0c>)
 8018576:	891b      	ldrh	r3, [r3, #8]
 8018578:	3b01      	subs	r3, #1
 801857a:	b29a      	uxth	r2, r3
 801857c:	4b76      	ldr	r3, [pc, #472]	@ (8018758 <tcp_receive+0xb0c>)
 801857e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8018580:	4b75      	ldr	r3, [pc, #468]	@ (8018758 <tcp_receive+0xb0c>)
 8018582:	685b      	ldr	r3, [r3, #4]
 8018584:	4a74      	ldr	r2, [pc, #464]	@ (8018758 <tcp_receive+0xb0c>)
 8018586:	8912      	ldrh	r2, [r2, #8]
 8018588:	4611      	mov	r1, r2
 801858a:	4618      	mov	r0, r3
 801858c:	f7fb fc6e 	bl	8013e6c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8018590:	4b71      	ldr	r3, [pc, #452]	@ (8018758 <tcp_receive+0xb0c>)
 8018592:	891c      	ldrh	r4, [r3, #8]
 8018594:	4b70      	ldr	r3, [pc, #448]	@ (8018758 <tcp_receive+0xb0c>)
 8018596:	68db      	ldr	r3, [r3, #12]
 8018598:	899b      	ldrh	r3, [r3, #12]
 801859a:	b29b      	uxth	r3, r3
 801859c:	4618      	mov	r0, r3
 801859e:	f7fa f82d 	bl	80125fc <lwip_htons>
 80185a2:	4603      	mov	r3, r0
 80185a4:	b2db      	uxtb	r3, r3
 80185a6:	f003 0303 	and.w	r3, r3, #3
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d001      	beq.n	80185b2 <tcp_receive+0x966>
 80185ae:	2301      	movs	r3, #1
 80185b0:	e000      	b.n	80185b4 <tcp_receive+0x968>
 80185b2:	2300      	movs	r3, #0
 80185b4:	4423      	add	r3, r4
 80185b6:	b29a      	uxth	r2, r3
 80185b8:	4b65      	ldr	r3, [pc, #404]	@ (8018750 <tcp_receive+0xb04>)
 80185ba:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80185bc:	4b64      	ldr	r3, [pc, #400]	@ (8018750 <tcp_receive+0xb04>)
 80185be:	881b      	ldrh	r3, [r3, #0]
 80185c0:	461a      	mov	r2, r3
 80185c2:	4b64      	ldr	r3, [pc, #400]	@ (8018754 <tcp_receive+0xb08>)
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	441a      	add	r2, r3
 80185c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80185ca:	68db      	ldr	r3, [r3, #12]
 80185cc:	685b      	ldr	r3, [r3, #4]
 80185ce:	429a      	cmp	r2, r3
 80185d0:	d006      	beq.n	80185e0 <tcp_receive+0x994>
 80185d2:	4b62      	ldr	r3, [pc, #392]	@ (801875c <tcp_receive+0xb10>)
 80185d4:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80185d8:	4961      	ldr	r1, [pc, #388]	@ (8018760 <tcp_receive+0xb14>)
 80185da:	4862      	ldr	r0, [pc, #392]	@ (8018764 <tcp_receive+0xb18>)
 80185dc:	f008 feea 	bl	80213b4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80185e4:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80185e6:	4b5a      	ldr	r3, [pc, #360]	@ (8018750 <tcp_receive+0xb04>)
 80185e8:	881b      	ldrh	r3, [r3, #0]
 80185ea:	461a      	mov	r2, r3
 80185ec:	4b59      	ldr	r3, [pc, #356]	@ (8018754 <tcp_receive+0xb08>)
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	441a      	add	r2, r3
 80185f2:	687b      	ldr	r3, [r7, #4]
 80185f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80185fa:	4b55      	ldr	r3, [pc, #340]	@ (8018750 <tcp_receive+0xb04>)
 80185fc:	881b      	ldrh	r3, [r3, #0]
 80185fe:	429a      	cmp	r2, r3
 8018600:	d206      	bcs.n	8018610 <tcp_receive+0x9c4>
 8018602:	4b56      	ldr	r3, [pc, #344]	@ (801875c <tcp_receive+0xb10>)
 8018604:	f240 6207 	movw	r2, #1543	@ 0x607
 8018608:	4957      	ldr	r1, [pc, #348]	@ (8018768 <tcp_receive+0xb1c>)
 801860a:	4856      	ldr	r0, [pc, #344]	@ (8018764 <tcp_receive+0xb18>)
 801860c:	f008 fed2 	bl	80213b4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018614:	4b4e      	ldr	r3, [pc, #312]	@ (8018750 <tcp_receive+0xb04>)
 8018616:	881b      	ldrh	r3, [r3, #0]
 8018618:	1ad3      	subs	r3, r2, r3
 801861a:	b29a      	uxth	r2, r3
 801861c:	687b      	ldr	r3, [r7, #4]
 801861e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8018620:	6878      	ldr	r0, [r7, #4]
 8018622:	f7fc fe93 	bl	801534c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8018626:	4b4c      	ldr	r3, [pc, #304]	@ (8018758 <tcp_receive+0xb0c>)
 8018628:	685b      	ldr	r3, [r3, #4]
 801862a:	891b      	ldrh	r3, [r3, #8]
 801862c:	2b00      	cmp	r3, #0
 801862e:	d006      	beq.n	801863e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8018630:	4b49      	ldr	r3, [pc, #292]	@ (8018758 <tcp_receive+0xb0c>)
 8018632:	685b      	ldr	r3, [r3, #4]
 8018634:	4a4d      	ldr	r2, [pc, #308]	@ (801876c <tcp_receive+0xb20>)
 8018636:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8018638:	4b47      	ldr	r3, [pc, #284]	@ (8018758 <tcp_receive+0xb0c>)
 801863a:	2200      	movs	r2, #0
 801863c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801863e:	4b46      	ldr	r3, [pc, #280]	@ (8018758 <tcp_receive+0xb0c>)
 8018640:	68db      	ldr	r3, [r3, #12]
 8018642:	899b      	ldrh	r3, [r3, #12]
 8018644:	b29b      	uxth	r3, r3
 8018646:	4618      	mov	r0, r3
 8018648:	f7f9 ffd8 	bl	80125fc <lwip_htons>
 801864c:	4603      	mov	r3, r0
 801864e:	b2db      	uxtb	r3, r3
 8018650:	f003 0301 	and.w	r3, r3, #1
 8018654:	2b00      	cmp	r3, #0
 8018656:	f000 80b8 	beq.w	80187ca <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801865a:	4b45      	ldr	r3, [pc, #276]	@ (8018770 <tcp_receive+0xb24>)
 801865c:	781b      	ldrb	r3, [r3, #0]
 801865e:	f043 0320 	orr.w	r3, r3, #32
 8018662:	b2da      	uxtb	r2, r3
 8018664:	4b42      	ldr	r3, [pc, #264]	@ (8018770 <tcp_receive+0xb24>)
 8018666:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8018668:	e0af      	b.n	80187ca <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801866e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018674:	68db      	ldr	r3, [r3, #12]
 8018676:	685b      	ldr	r3, [r3, #4]
 8018678:	4a36      	ldr	r2, [pc, #216]	@ (8018754 <tcp_receive+0xb08>)
 801867a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801867c:	68bb      	ldr	r3, [r7, #8]
 801867e:	891b      	ldrh	r3, [r3, #8]
 8018680:	461c      	mov	r4, r3
 8018682:	68bb      	ldr	r3, [r7, #8]
 8018684:	68db      	ldr	r3, [r3, #12]
 8018686:	899b      	ldrh	r3, [r3, #12]
 8018688:	b29b      	uxth	r3, r3
 801868a:	4618      	mov	r0, r3
 801868c:	f7f9 ffb6 	bl	80125fc <lwip_htons>
 8018690:	4603      	mov	r3, r0
 8018692:	b2db      	uxtb	r3, r3
 8018694:	f003 0303 	and.w	r3, r3, #3
 8018698:	2b00      	cmp	r3, #0
 801869a:	d001      	beq.n	80186a0 <tcp_receive+0xa54>
 801869c:	2301      	movs	r3, #1
 801869e:	e000      	b.n	80186a2 <tcp_receive+0xa56>
 80186a0:	2300      	movs	r3, #0
 80186a2:	191a      	adds	r2, r3, r4
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80186a8:	441a      	add	r2, r3
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80186b2:	461c      	mov	r4, r3
 80186b4:	68bb      	ldr	r3, [r7, #8]
 80186b6:	891b      	ldrh	r3, [r3, #8]
 80186b8:	461d      	mov	r5, r3
 80186ba:	68bb      	ldr	r3, [r7, #8]
 80186bc:	68db      	ldr	r3, [r3, #12]
 80186be:	899b      	ldrh	r3, [r3, #12]
 80186c0:	b29b      	uxth	r3, r3
 80186c2:	4618      	mov	r0, r3
 80186c4:	f7f9 ff9a 	bl	80125fc <lwip_htons>
 80186c8:	4603      	mov	r3, r0
 80186ca:	b2db      	uxtb	r3, r3
 80186cc:	f003 0303 	and.w	r3, r3, #3
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d001      	beq.n	80186d8 <tcp_receive+0xa8c>
 80186d4:	2301      	movs	r3, #1
 80186d6:	e000      	b.n	80186da <tcp_receive+0xa8e>
 80186d8:	2300      	movs	r3, #0
 80186da:	442b      	add	r3, r5
 80186dc:	429c      	cmp	r4, r3
 80186de:	d206      	bcs.n	80186ee <tcp_receive+0xaa2>
 80186e0:	4b1e      	ldr	r3, [pc, #120]	@ (801875c <tcp_receive+0xb10>)
 80186e2:	f240 622b 	movw	r2, #1579	@ 0x62b
 80186e6:	4923      	ldr	r1, [pc, #140]	@ (8018774 <tcp_receive+0xb28>)
 80186e8:	481e      	ldr	r0, [pc, #120]	@ (8018764 <tcp_receive+0xb18>)
 80186ea:	f008 fe63 	bl	80213b4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80186ee:	68bb      	ldr	r3, [r7, #8]
 80186f0:	891b      	ldrh	r3, [r3, #8]
 80186f2:	461c      	mov	r4, r3
 80186f4:	68bb      	ldr	r3, [r7, #8]
 80186f6:	68db      	ldr	r3, [r3, #12]
 80186f8:	899b      	ldrh	r3, [r3, #12]
 80186fa:	b29b      	uxth	r3, r3
 80186fc:	4618      	mov	r0, r3
 80186fe:	f7f9 ff7d 	bl	80125fc <lwip_htons>
 8018702:	4603      	mov	r3, r0
 8018704:	b2db      	uxtb	r3, r3
 8018706:	f003 0303 	and.w	r3, r3, #3
 801870a:	2b00      	cmp	r3, #0
 801870c:	d001      	beq.n	8018712 <tcp_receive+0xac6>
 801870e:	2301      	movs	r3, #1
 8018710:	e000      	b.n	8018714 <tcp_receive+0xac8>
 8018712:	2300      	movs	r3, #0
 8018714:	1919      	adds	r1, r3, r4
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801871a:	b28b      	uxth	r3, r1
 801871c:	1ad3      	subs	r3, r2, r3
 801871e:	b29a      	uxth	r2, r3
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8018724:	6878      	ldr	r0, [r7, #4]
 8018726:	f7fc fe11 	bl	801534c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801872a:	68bb      	ldr	r3, [r7, #8]
 801872c:	685b      	ldr	r3, [r3, #4]
 801872e:	891b      	ldrh	r3, [r3, #8]
 8018730:	2b00      	cmp	r3, #0
 8018732:	d028      	beq.n	8018786 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8018734:	4b0d      	ldr	r3, [pc, #52]	@ (801876c <tcp_receive+0xb20>)
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	2b00      	cmp	r3, #0
 801873a:	d01d      	beq.n	8018778 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801873c:	4b0b      	ldr	r3, [pc, #44]	@ (801876c <tcp_receive+0xb20>)
 801873e:	681a      	ldr	r2, [r3, #0]
 8018740:	68bb      	ldr	r3, [r7, #8]
 8018742:	685b      	ldr	r3, [r3, #4]
 8018744:	4619      	mov	r1, r3
 8018746:	4610      	mov	r0, r2
 8018748:	f7fb fde4 	bl	8014314 <pbuf_cat>
 801874c:	e018      	b.n	8018780 <tcp_receive+0xb34>
 801874e:	bf00      	nop
 8018750:	20004c2a 	.word	0x20004c2a
 8018754:	20004c20 	.word	0x20004c20
 8018758:	20004c00 	.word	0x20004c00
 801875c:	080248b8 	.word	0x080248b8
 8018760:	08024c98 	.word	0x08024c98
 8018764:	08024904 	.word	0x08024904
 8018768:	08024cd4 	.word	0x08024cd4
 801876c:	20004c30 	.word	0x20004c30
 8018770:	20004c2d 	.word	0x20004c2d
 8018774:	08024cf4 	.word	0x08024cf4
            } else {
              recv_data = cseg->p;
 8018778:	68bb      	ldr	r3, [r7, #8]
 801877a:	685b      	ldr	r3, [r3, #4]
 801877c:	4a70      	ldr	r2, [pc, #448]	@ (8018940 <tcp_receive+0xcf4>)
 801877e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8018780:	68bb      	ldr	r3, [r7, #8]
 8018782:	2200      	movs	r2, #0
 8018784:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018786:	68bb      	ldr	r3, [r7, #8]
 8018788:	68db      	ldr	r3, [r3, #12]
 801878a:	899b      	ldrh	r3, [r3, #12]
 801878c:	b29b      	uxth	r3, r3
 801878e:	4618      	mov	r0, r3
 8018790:	f7f9 ff34 	bl	80125fc <lwip_htons>
 8018794:	4603      	mov	r3, r0
 8018796:	b2db      	uxtb	r3, r3
 8018798:	f003 0301 	and.w	r3, r3, #1
 801879c:	2b00      	cmp	r3, #0
 801879e:	d00d      	beq.n	80187bc <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80187a0:	4b68      	ldr	r3, [pc, #416]	@ (8018944 <tcp_receive+0xcf8>)
 80187a2:	781b      	ldrb	r3, [r3, #0]
 80187a4:	f043 0320 	orr.w	r3, r3, #32
 80187a8:	b2da      	uxtb	r2, r3
 80187aa:	4b66      	ldr	r3, [pc, #408]	@ (8018944 <tcp_receive+0xcf8>)
 80187ac:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	7d1b      	ldrb	r3, [r3, #20]
 80187b2:	2b04      	cmp	r3, #4
 80187b4:	d102      	bne.n	80187bc <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	2207      	movs	r2, #7
 80187ba:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80187bc:	68bb      	ldr	r3, [r7, #8]
 80187be:	681a      	ldr	r2, [r3, #0]
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80187c4:	68b8      	ldr	r0, [r7, #8]
 80187c6:	f7fd fae8 	bl	8015d9a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d008      	beq.n	80187e4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80187d6:	68db      	ldr	r3, [r3, #12]
 80187d8:	685a      	ldr	r2, [r3, #4]
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80187de:	429a      	cmp	r2, r3
 80187e0:	f43f af43 	beq.w	801866a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	8b5b      	ldrh	r3, [r3, #26]
 80187e8:	f003 0301 	and.w	r3, r3, #1
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d00e      	beq.n	801880e <tcp_receive+0xbc2>
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	8b5b      	ldrh	r3, [r3, #26]
 80187f4:	f023 0301 	bic.w	r3, r3, #1
 80187f8:	b29a      	uxth	r2, r3
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	835a      	strh	r2, [r3, #26]
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	8b5b      	ldrh	r3, [r3, #26]
 8018802:	f043 0302 	orr.w	r3, r3, #2
 8018806:	b29a      	uxth	r2, r3
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801880c:	e187      	b.n	8018b1e <tcp_receive+0xed2>
        tcp_ack(pcb);
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	8b5b      	ldrh	r3, [r3, #26]
 8018812:	f043 0301 	orr.w	r3, r3, #1
 8018816:	b29a      	uxth	r2, r3
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801881c:	e17f      	b.n	8018b1e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018822:	2b00      	cmp	r3, #0
 8018824:	d106      	bne.n	8018834 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8018826:	4848      	ldr	r0, [pc, #288]	@ (8018948 <tcp_receive+0xcfc>)
 8018828:	f7fd faee 	bl	8015e08 <tcp_seg_copy>
 801882c:	4602      	mov	r2, r0
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	675a      	str	r2, [r3, #116]	@ 0x74
 8018832:	e16c      	b.n	8018b0e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8018834:	2300      	movs	r3, #0
 8018836:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801883c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801883e:	e156      	b.n	8018aee <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8018840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018842:	68db      	ldr	r3, [r3, #12]
 8018844:	685a      	ldr	r2, [r3, #4]
 8018846:	4b41      	ldr	r3, [pc, #260]	@ (801894c <tcp_receive+0xd00>)
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	429a      	cmp	r2, r3
 801884c:	d11d      	bne.n	801888a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801884e:	4b3e      	ldr	r3, [pc, #248]	@ (8018948 <tcp_receive+0xcfc>)
 8018850:	891a      	ldrh	r2, [r3, #8]
 8018852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018854:	891b      	ldrh	r3, [r3, #8]
 8018856:	429a      	cmp	r2, r3
 8018858:	f240 814e 	bls.w	8018af8 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801885c:	483a      	ldr	r0, [pc, #232]	@ (8018948 <tcp_receive+0xcfc>)
 801885e:	f7fd fad3 	bl	8015e08 <tcp_seg_copy>
 8018862:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8018864:	697b      	ldr	r3, [r7, #20]
 8018866:	2b00      	cmp	r3, #0
 8018868:	f000 8148 	beq.w	8018afc <tcp_receive+0xeb0>
                  if (prev != NULL) {
 801886c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801886e:	2b00      	cmp	r3, #0
 8018870:	d003      	beq.n	801887a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8018872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018874:	697a      	ldr	r2, [r7, #20]
 8018876:	601a      	str	r2, [r3, #0]
 8018878:	e002      	b.n	8018880 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	697a      	ldr	r2, [r7, #20]
 801887e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8018880:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018882:	6978      	ldr	r0, [r7, #20]
 8018884:	f7ff f8de 	bl	8017a44 <tcp_oos_insert_segment>
                }
                break;
 8018888:	e138      	b.n	8018afc <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801888a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801888c:	2b00      	cmp	r3, #0
 801888e:	d117      	bne.n	80188c0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8018890:	4b2e      	ldr	r3, [pc, #184]	@ (801894c <tcp_receive+0xd00>)
 8018892:	681a      	ldr	r2, [r3, #0]
 8018894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018896:	68db      	ldr	r3, [r3, #12]
 8018898:	685b      	ldr	r3, [r3, #4]
 801889a:	1ad3      	subs	r3, r2, r3
 801889c:	2b00      	cmp	r3, #0
 801889e:	da57      	bge.n	8018950 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80188a0:	4829      	ldr	r0, [pc, #164]	@ (8018948 <tcp_receive+0xcfc>)
 80188a2:	f7fd fab1 	bl	8015e08 <tcp_seg_copy>
 80188a6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80188a8:	69bb      	ldr	r3, [r7, #24]
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	f000 8128 	beq.w	8018b00 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	69ba      	ldr	r2, [r7, #24]
 80188b4:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80188b6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80188b8:	69b8      	ldr	r0, [r7, #24]
 80188ba:	f7ff f8c3 	bl	8017a44 <tcp_oos_insert_segment>
                  }
                  break;
 80188be:	e11f      	b.n	8018b00 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80188c0:	4b22      	ldr	r3, [pc, #136]	@ (801894c <tcp_receive+0xd00>)
 80188c2:	681a      	ldr	r2, [r3, #0]
 80188c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80188c6:	68db      	ldr	r3, [r3, #12]
 80188c8:	685b      	ldr	r3, [r3, #4]
 80188ca:	1ad3      	subs	r3, r2, r3
 80188cc:	3b01      	subs	r3, #1
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	db3e      	blt.n	8018950 <tcp_receive+0xd04>
 80188d2:	4b1e      	ldr	r3, [pc, #120]	@ (801894c <tcp_receive+0xd00>)
 80188d4:	681a      	ldr	r2, [r3, #0]
 80188d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80188d8:	68db      	ldr	r3, [r3, #12]
 80188da:	685b      	ldr	r3, [r3, #4]
 80188dc:	1ad3      	subs	r3, r2, r3
 80188de:	3301      	adds	r3, #1
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	dc35      	bgt.n	8018950 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80188e4:	4818      	ldr	r0, [pc, #96]	@ (8018948 <tcp_receive+0xcfc>)
 80188e6:	f7fd fa8f 	bl	8015e08 <tcp_seg_copy>
 80188ea:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80188ec:	69fb      	ldr	r3, [r7, #28]
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	f000 8108 	beq.w	8018b04 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80188f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80188f6:	68db      	ldr	r3, [r3, #12]
 80188f8:	685b      	ldr	r3, [r3, #4]
 80188fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80188fc:	8912      	ldrh	r2, [r2, #8]
 80188fe:	441a      	add	r2, r3
 8018900:	4b12      	ldr	r3, [pc, #72]	@ (801894c <tcp_receive+0xd00>)
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	1ad3      	subs	r3, r2, r3
 8018906:	2b00      	cmp	r3, #0
 8018908:	dd12      	ble.n	8018930 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801890a:	4b10      	ldr	r3, [pc, #64]	@ (801894c <tcp_receive+0xd00>)
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	b29a      	uxth	r2, r3
 8018910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018912:	68db      	ldr	r3, [r3, #12]
 8018914:	685b      	ldr	r3, [r3, #4]
 8018916:	b29b      	uxth	r3, r3
 8018918:	1ad3      	subs	r3, r2, r3
 801891a:	b29a      	uxth	r2, r3
 801891c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801891e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8018920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018922:	685a      	ldr	r2, [r3, #4]
 8018924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018926:	891b      	ldrh	r3, [r3, #8]
 8018928:	4619      	mov	r1, r3
 801892a:	4610      	mov	r0, r2
 801892c:	f7fb fa9e 	bl	8013e6c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8018930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018932:	69fa      	ldr	r2, [r7, #28]
 8018934:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8018936:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8018938:	69f8      	ldr	r0, [r7, #28]
 801893a:	f7ff f883 	bl	8017a44 <tcp_oos_insert_segment>
                  }
                  break;
 801893e:	e0e1      	b.n	8018b04 <tcp_receive+0xeb8>
 8018940:	20004c30 	.word	0x20004c30
 8018944:	20004c2d 	.word	0x20004c2d
 8018948:	20004c00 	.word	0x20004c00
 801894c:	20004c20 	.word	0x20004c20
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8018950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018952:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8018954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	2b00      	cmp	r3, #0
 801895a:	f040 80c5 	bne.w	8018ae8 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801895e:	4b7f      	ldr	r3, [pc, #508]	@ (8018b5c <tcp_receive+0xf10>)
 8018960:	681a      	ldr	r2, [r3, #0]
 8018962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018964:	68db      	ldr	r3, [r3, #12]
 8018966:	685b      	ldr	r3, [r3, #4]
 8018968:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801896a:	2b00      	cmp	r3, #0
 801896c:	f340 80bc 	ble.w	8018ae8 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018972:	68db      	ldr	r3, [r3, #12]
 8018974:	899b      	ldrh	r3, [r3, #12]
 8018976:	b29b      	uxth	r3, r3
 8018978:	4618      	mov	r0, r3
 801897a:	f7f9 fe3f 	bl	80125fc <lwip_htons>
 801897e:	4603      	mov	r3, r0
 8018980:	b2db      	uxtb	r3, r3
 8018982:	f003 0301 	and.w	r3, r3, #1
 8018986:	2b00      	cmp	r3, #0
 8018988:	f040 80be 	bne.w	8018b08 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801898c:	4874      	ldr	r0, [pc, #464]	@ (8018b60 <tcp_receive+0xf14>)
 801898e:	f7fd fa3b 	bl	8015e08 <tcp_seg_copy>
 8018992:	4602      	mov	r2, r0
 8018994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018996:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8018998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801899a:	681b      	ldr	r3, [r3, #0]
 801899c:	2b00      	cmp	r3, #0
 801899e:	f000 80b5 	beq.w	8018b0c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80189a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80189a4:	68db      	ldr	r3, [r3, #12]
 80189a6:	685b      	ldr	r3, [r3, #4]
 80189a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80189aa:	8912      	ldrh	r2, [r2, #8]
 80189ac:	441a      	add	r2, r3
 80189ae:	4b6b      	ldr	r3, [pc, #428]	@ (8018b5c <tcp_receive+0xf10>)
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	1ad3      	subs	r3, r2, r3
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	dd12      	ble.n	80189de <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80189b8:	4b68      	ldr	r3, [pc, #416]	@ (8018b5c <tcp_receive+0xf10>)
 80189ba:	681b      	ldr	r3, [r3, #0]
 80189bc:	b29a      	uxth	r2, r3
 80189be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80189c0:	68db      	ldr	r3, [r3, #12]
 80189c2:	685b      	ldr	r3, [r3, #4]
 80189c4:	b29b      	uxth	r3, r3
 80189c6:	1ad3      	subs	r3, r2, r3
 80189c8:	b29a      	uxth	r2, r3
 80189ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80189cc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80189ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80189d0:	685a      	ldr	r2, [r3, #4]
 80189d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80189d4:	891b      	ldrh	r3, [r3, #8]
 80189d6:	4619      	mov	r1, r3
 80189d8:	4610      	mov	r0, r2
 80189da:	f7fb fa47 	bl	8013e6c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80189de:	4b61      	ldr	r3, [pc, #388]	@ (8018b64 <tcp_receive+0xf18>)
 80189e0:	881b      	ldrh	r3, [r3, #0]
 80189e2:	461a      	mov	r2, r3
 80189e4:	4b5d      	ldr	r3, [pc, #372]	@ (8018b5c <tcp_receive+0xf10>)
 80189e6:	681b      	ldr	r3, [r3, #0]
 80189e8:	441a      	add	r2, r3
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80189ee:	6879      	ldr	r1, [r7, #4]
 80189f0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80189f2:	440b      	add	r3, r1
 80189f4:	1ad3      	subs	r3, r2, r3
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	f340 8088 	ble.w	8018b0c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80189fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	68db      	ldr	r3, [r3, #12]
 8018a02:	899b      	ldrh	r3, [r3, #12]
 8018a04:	b29b      	uxth	r3, r3
 8018a06:	4618      	mov	r0, r3
 8018a08:	f7f9 fdf8 	bl	80125fc <lwip_htons>
 8018a0c:	4603      	mov	r3, r0
 8018a0e:	b2db      	uxtb	r3, r3
 8018a10:	f003 0301 	and.w	r3, r3, #1
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d021      	beq.n	8018a5c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8018a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	68db      	ldr	r3, [r3, #12]
 8018a1e:	899b      	ldrh	r3, [r3, #12]
 8018a20:	b29b      	uxth	r3, r3
 8018a22:	b21b      	sxth	r3, r3
 8018a24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8018a28:	b21c      	sxth	r4, r3
 8018a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a2c:	681b      	ldr	r3, [r3, #0]
 8018a2e:	68db      	ldr	r3, [r3, #12]
 8018a30:	899b      	ldrh	r3, [r3, #12]
 8018a32:	b29b      	uxth	r3, r3
 8018a34:	4618      	mov	r0, r3
 8018a36:	f7f9 fde1 	bl	80125fc <lwip_htons>
 8018a3a:	4603      	mov	r3, r0
 8018a3c:	b2db      	uxtb	r3, r3
 8018a3e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8018a42:	b29b      	uxth	r3, r3
 8018a44:	4618      	mov	r0, r3
 8018a46:	f7f9 fdd9 	bl	80125fc <lwip_htons>
 8018a4a:	4603      	mov	r3, r0
 8018a4c:	b21b      	sxth	r3, r3
 8018a4e:	4323      	orrs	r3, r4
 8018a50:	b21a      	sxth	r2, r3
 8018a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	68db      	ldr	r3, [r3, #12]
 8018a58:	b292      	uxth	r2, r2
 8018a5a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a60:	b29a      	uxth	r2, r3
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018a66:	4413      	add	r3, r2
 8018a68:	b299      	uxth	r1, r3
 8018a6a:	4b3c      	ldr	r3, [pc, #240]	@ (8018b5c <tcp_receive+0xf10>)
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	b29a      	uxth	r2, r3
 8018a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	1a8a      	subs	r2, r1, r2
 8018a76:	b292      	uxth	r2, r2
 8018a78:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8018a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a7c:	681b      	ldr	r3, [r3, #0]
 8018a7e:	685a      	ldr	r2, [r3, #4]
 8018a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	891b      	ldrh	r3, [r3, #8]
 8018a86:	4619      	mov	r1, r3
 8018a88:	4610      	mov	r0, r2
 8018a8a:	f7fb f9ef 	bl	8013e6c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8018a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	891c      	ldrh	r4, [r3, #8]
 8018a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018a96:	681b      	ldr	r3, [r3, #0]
 8018a98:	68db      	ldr	r3, [r3, #12]
 8018a9a:	899b      	ldrh	r3, [r3, #12]
 8018a9c:	b29b      	uxth	r3, r3
 8018a9e:	4618      	mov	r0, r3
 8018aa0:	f7f9 fdac 	bl	80125fc <lwip_htons>
 8018aa4:	4603      	mov	r3, r0
 8018aa6:	b2db      	uxtb	r3, r3
 8018aa8:	f003 0303 	and.w	r3, r3, #3
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d001      	beq.n	8018ab4 <tcp_receive+0xe68>
 8018ab0:	2301      	movs	r3, #1
 8018ab2:	e000      	b.n	8018ab6 <tcp_receive+0xe6a>
 8018ab4:	2300      	movs	r3, #0
 8018ab6:	4423      	add	r3, r4
 8018ab8:	b29a      	uxth	r2, r3
 8018aba:	4b2a      	ldr	r3, [pc, #168]	@ (8018b64 <tcp_receive+0xf18>)
 8018abc:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018abe:	4b29      	ldr	r3, [pc, #164]	@ (8018b64 <tcp_receive+0xf18>)
 8018ac0:	881b      	ldrh	r3, [r3, #0]
 8018ac2:	461a      	mov	r2, r3
 8018ac4:	4b25      	ldr	r3, [pc, #148]	@ (8018b5c <tcp_receive+0xf10>)
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	441a      	add	r2, r3
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ace:	6879      	ldr	r1, [r7, #4]
 8018ad0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018ad2:	440b      	add	r3, r1
 8018ad4:	429a      	cmp	r2, r3
 8018ad6:	d019      	beq.n	8018b0c <tcp_receive+0xec0>
 8018ad8:	4b23      	ldr	r3, [pc, #140]	@ (8018b68 <tcp_receive+0xf1c>)
 8018ada:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8018ade:	4923      	ldr	r1, [pc, #140]	@ (8018b6c <tcp_receive+0xf20>)
 8018ae0:	4823      	ldr	r0, [pc, #140]	@ (8018b70 <tcp_receive+0xf24>)
 8018ae2:	f008 fc67 	bl	80213b4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8018ae6:	e011      	b.n	8018b0c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	f47f aea5 	bne.w	8018840 <tcp_receive+0xbf4>
 8018af6:	e00a      	b.n	8018b0e <tcp_receive+0xec2>
                break;
 8018af8:	bf00      	nop
 8018afa:	e008      	b.n	8018b0e <tcp_receive+0xec2>
                break;
 8018afc:	bf00      	nop
 8018afe:	e006      	b.n	8018b0e <tcp_receive+0xec2>
                  break;
 8018b00:	bf00      	nop
 8018b02:	e004      	b.n	8018b0e <tcp_receive+0xec2>
                  break;
 8018b04:	bf00      	nop
 8018b06:	e002      	b.n	8018b0e <tcp_receive+0xec2>
                  break;
 8018b08:	bf00      	nop
 8018b0a:	e000      	b.n	8018b0e <tcp_receive+0xec2>
                break;
 8018b0c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8018b0e:	6878      	ldr	r0, [r7, #4]
 8018b10:	f001 fe88 	bl	801a824 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8018b14:	e003      	b.n	8018b1e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8018b16:	6878      	ldr	r0, [r7, #4]
 8018b18:	f001 fe84 	bl	801a824 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018b1c:	e01a      	b.n	8018b54 <tcp_receive+0xf08>
 8018b1e:	e019      	b.n	8018b54 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8018b20:	4b0e      	ldr	r3, [pc, #56]	@ (8018b5c <tcp_receive+0xf10>)
 8018b22:	681a      	ldr	r2, [r3, #0]
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018b28:	1ad3      	subs	r3, r2, r3
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	db0a      	blt.n	8018b44 <tcp_receive+0xef8>
 8018b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8018b5c <tcp_receive+0xf10>)
 8018b30:	681a      	ldr	r2, [r3, #0]
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018b36:	6879      	ldr	r1, [r7, #4]
 8018b38:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018b3a:	440b      	add	r3, r1
 8018b3c:	1ad3      	subs	r3, r2, r3
 8018b3e:	3301      	adds	r3, #1
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	dd07      	ble.n	8018b54 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	8b5b      	ldrh	r3, [r3, #26]
 8018b48:	f043 0302 	orr.w	r3, r3, #2
 8018b4c:	b29a      	uxth	r2, r3
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8018b52:	e7ff      	b.n	8018b54 <tcp_receive+0xf08>
 8018b54:	bf00      	nop
 8018b56:	3750      	adds	r7, #80	@ 0x50
 8018b58:	46bd      	mov	sp, r7
 8018b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8018b5c:	20004c20 	.word	0x20004c20
 8018b60:	20004c00 	.word	0x20004c00
 8018b64:	20004c2a 	.word	0x20004c2a
 8018b68:	080248b8 	.word	0x080248b8
 8018b6c:	08024c60 	.word	0x08024c60
 8018b70:	08024904 	.word	0x08024904

08018b74 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8018b74:	b480      	push	{r7}
 8018b76:	b083      	sub	sp, #12
 8018b78:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8018b7a:	4b15      	ldr	r3, [pc, #84]	@ (8018bd0 <tcp_get_next_optbyte+0x5c>)
 8018b7c:	881b      	ldrh	r3, [r3, #0]
 8018b7e:	1c5a      	adds	r2, r3, #1
 8018b80:	b291      	uxth	r1, r2
 8018b82:	4a13      	ldr	r2, [pc, #76]	@ (8018bd0 <tcp_get_next_optbyte+0x5c>)
 8018b84:	8011      	strh	r1, [r2, #0]
 8018b86:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018b88:	4b12      	ldr	r3, [pc, #72]	@ (8018bd4 <tcp_get_next_optbyte+0x60>)
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d004      	beq.n	8018b9a <tcp_get_next_optbyte+0x26>
 8018b90:	4b11      	ldr	r3, [pc, #68]	@ (8018bd8 <tcp_get_next_optbyte+0x64>)
 8018b92:	881b      	ldrh	r3, [r3, #0]
 8018b94:	88fa      	ldrh	r2, [r7, #6]
 8018b96:	429a      	cmp	r2, r3
 8018b98:	d208      	bcs.n	8018bac <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8018b9a:	4b10      	ldr	r3, [pc, #64]	@ (8018bdc <tcp_get_next_optbyte+0x68>)
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	3314      	adds	r3, #20
 8018ba0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8018ba2:	88fb      	ldrh	r3, [r7, #6]
 8018ba4:	683a      	ldr	r2, [r7, #0]
 8018ba6:	4413      	add	r3, r2
 8018ba8:	781b      	ldrb	r3, [r3, #0]
 8018baa:	e00b      	b.n	8018bc4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018bac:	88fb      	ldrh	r3, [r7, #6]
 8018bae:	b2da      	uxtb	r2, r3
 8018bb0:	4b09      	ldr	r3, [pc, #36]	@ (8018bd8 <tcp_get_next_optbyte+0x64>)
 8018bb2:	881b      	ldrh	r3, [r3, #0]
 8018bb4:	b2db      	uxtb	r3, r3
 8018bb6:	1ad3      	subs	r3, r2, r3
 8018bb8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8018bba:	4b06      	ldr	r3, [pc, #24]	@ (8018bd4 <tcp_get_next_optbyte+0x60>)
 8018bbc:	681a      	ldr	r2, [r3, #0]
 8018bbe:	797b      	ldrb	r3, [r7, #5]
 8018bc0:	4413      	add	r3, r2
 8018bc2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018bc4:	4618      	mov	r0, r3
 8018bc6:	370c      	adds	r7, #12
 8018bc8:	46bd      	mov	sp, r7
 8018bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bce:	4770      	bx	lr
 8018bd0:	20004c1c 	.word	0x20004c1c
 8018bd4:	20004c18 	.word	0x20004c18
 8018bd8:	20004c16 	.word	0x20004c16
 8018bdc:	20004c10 	.word	0x20004c10

08018be0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8018be0:	b580      	push	{r7, lr}
 8018be2:	b084      	sub	sp, #16
 8018be4:	af00      	add	r7, sp, #0
 8018be6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d106      	bne.n	8018bfc <tcp_parseopt+0x1c>
 8018bee:	4b32      	ldr	r3, [pc, #200]	@ (8018cb8 <tcp_parseopt+0xd8>)
 8018bf0:	f240 727d 	movw	r2, #1917	@ 0x77d
 8018bf4:	4931      	ldr	r1, [pc, #196]	@ (8018cbc <tcp_parseopt+0xdc>)
 8018bf6:	4832      	ldr	r0, [pc, #200]	@ (8018cc0 <tcp_parseopt+0xe0>)
 8018bf8:	f008 fbdc 	bl	80213b4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8018bfc:	4b31      	ldr	r3, [pc, #196]	@ (8018cc4 <tcp_parseopt+0xe4>)
 8018bfe:	881b      	ldrh	r3, [r3, #0]
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d056      	beq.n	8018cb2 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018c04:	4b30      	ldr	r3, [pc, #192]	@ (8018cc8 <tcp_parseopt+0xe8>)
 8018c06:	2200      	movs	r2, #0
 8018c08:	801a      	strh	r2, [r3, #0]
 8018c0a:	e046      	b.n	8018c9a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8018c0c:	f7ff ffb2 	bl	8018b74 <tcp_get_next_optbyte>
 8018c10:	4603      	mov	r3, r0
 8018c12:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8018c14:	7bfb      	ldrb	r3, [r7, #15]
 8018c16:	2b02      	cmp	r3, #2
 8018c18:	d006      	beq.n	8018c28 <tcp_parseopt+0x48>
 8018c1a:	2b02      	cmp	r3, #2
 8018c1c:	dc2a      	bgt.n	8018c74 <tcp_parseopt+0x94>
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d042      	beq.n	8018ca8 <tcp_parseopt+0xc8>
 8018c22:	2b01      	cmp	r3, #1
 8018c24:	d038      	beq.n	8018c98 <tcp_parseopt+0xb8>
 8018c26:	e025      	b.n	8018c74 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8018c28:	f7ff ffa4 	bl	8018b74 <tcp_get_next_optbyte>
 8018c2c:	4603      	mov	r3, r0
 8018c2e:	2b04      	cmp	r3, #4
 8018c30:	d13c      	bne.n	8018cac <tcp_parseopt+0xcc>
 8018c32:	4b25      	ldr	r3, [pc, #148]	@ (8018cc8 <tcp_parseopt+0xe8>)
 8018c34:	881b      	ldrh	r3, [r3, #0]
 8018c36:	3301      	adds	r3, #1
 8018c38:	4a22      	ldr	r2, [pc, #136]	@ (8018cc4 <tcp_parseopt+0xe4>)
 8018c3a:	8812      	ldrh	r2, [r2, #0]
 8018c3c:	4293      	cmp	r3, r2
 8018c3e:	da35      	bge.n	8018cac <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8018c40:	f7ff ff98 	bl	8018b74 <tcp_get_next_optbyte>
 8018c44:	4603      	mov	r3, r0
 8018c46:	021b      	lsls	r3, r3, #8
 8018c48:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8018c4a:	f7ff ff93 	bl	8018b74 <tcp_get_next_optbyte>
 8018c4e:	4603      	mov	r3, r0
 8018c50:	461a      	mov	r2, r3
 8018c52:	89bb      	ldrh	r3, [r7, #12]
 8018c54:	4313      	orrs	r3, r2
 8018c56:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8018c58:	89bb      	ldrh	r3, [r7, #12]
 8018c5a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8018c5e:	d804      	bhi.n	8018c6a <tcp_parseopt+0x8a>
 8018c60:	89bb      	ldrh	r3, [r7, #12]
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	d001      	beq.n	8018c6a <tcp_parseopt+0x8a>
 8018c66:	89ba      	ldrh	r2, [r7, #12]
 8018c68:	e001      	b.n	8018c6e <tcp_parseopt+0x8e>
 8018c6a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8018c72:	e012      	b.n	8018c9a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8018c74:	f7ff ff7e 	bl	8018b74 <tcp_get_next_optbyte>
 8018c78:	4603      	mov	r3, r0
 8018c7a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8018c7c:	7afb      	ldrb	r3, [r7, #11]
 8018c7e:	2b01      	cmp	r3, #1
 8018c80:	d916      	bls.n	8018cb0 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8018c82:	7afb      	ldrb	r3, [r7, #11]
 8018c84:	b29a      	uxth	r2, r3
 8018c86:	4b10      	ldr	r3, [pc, #64]	@ (8018cc8 <tcp_parseopt+0xe8>)
 8018c88:	881b      	ldrh	r3, [r3, #0]
 8018c8a:	4413      	add	r3, r2
 8018c8c:	b29b      	uxth	r3, r3
 8018c8e:	3b02      	subs	r3, #2
 8018c90:	b29a      	uxth	r2, r3
 8018c92:	4b0d      	ldr	r3, [pc, #52]	@ (8018cc8 <tcp_parseopt+0xe8>)
 8018c94:	801a      	strh	r2, [r3, #0]
 8018c96:	e000      	b.n	8018c9a <tcp_parseopt+0xba>
          break;
 8018c98:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8018cc8 <tcp_parseopt+0xe8>)
 8018c9c:	881a      	ldrh	r2, [r3, #0]
 8018c9e:	4b09      	ldr	r3, [pc, #36]	@ (8018cc4 <tcp_parseopt+0xe4>)
 8018ca0:	881b      	ldrh	r3, [r3, #0]
 8018ca2:	429a      	cmp	r2, r3
 8018ca4:	d3b2      	bcc.n	8018c0c <tcp_parseopt+0x2c>
 8018ca6:	e004      	b.n	8018cb2 <tcp_parseopt+0xd2>
          return;
 8018ca8:	bf00      	nop
 8018caa:	e002      	b.n	8018cb2 <tcp_parseopt+0xd2>
            return;
 8018cac:	bf00      	nop
 8018cae:	e000      	b.n	8018cb2 <tcp_parseopt+0xd2>
            return;
 8018cb0:	bf00      	nop
      }
    }
  }
}
 8018cb2:	3710      	adds	r7, #16
 8018cb4:	46bd      	mov	sp, r7
 8018cb6:	bd80      	pop	{r7, pc}
 8018cb8:	080248b8 	.word	0x080248b8
 8018cbc:	08024d1c 	.word	0x08024d1c
 8018cc0:	08024904 	.word	0x08024904
 8018cc4:	20004c14 	.word	0x20004c14
 8018cc8:	20004c1c 	.word	0x20004c1c

08018ccc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8018ccc:	b480      	push	{r7}
 8018cce:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8018cd0:	4b05      	ldr	r3, [pc, #20]	@ (8018ce8 <tcp_trigger_input_pcb_close+0x1c>)
 8018cd2:	781b      	ldrb	r3, [r3, #0]
 8018cd4:	f043 0310 	orr.w	r3, r3, #16
 8018cd8:	b2da      	uxtb	r2, r3
 8018cda:	4b03      	ldr	r3, [pc, #12]	@ (8018ce8 <tcp_trigger_input_pcb_close+0x1c>)
 8018cdc:	701a      	strb	r2, [r3, #0]
}
 8018cde:	bf00      	nop
 8018ce0:	46bd      	mov	sp, r7
 8018ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce6:	4770      	bx	lr
 8018ce8:	20004c2d 	.word	0x20004c2d

08018cec <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8018cec:	b580      	push	{r7, lr}
 8018cee:	b084      	sub	sp, #16
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	60f8      	str	r0, [r7, #12]
 8018cf4:	60b9      	str	r1, [r7, #8]
 8018cf6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8018cf8:	68fb      	ldr	r3, [r7, #12]
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d00a      	beq.n	8018d14 <tcp_route+0x28>
 8018cfe:	68fb      	ldr	r3, [r7, #12]
 8018d00:	7a1b      	ldrb	r3, [r3, #8]
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d006      	beq.n	8018d14 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8018d06:	68fb      	ldr	r3, [r7, #12]
 8018d08:	7a1b      	ldrb	r3, [r3, #8]
 8018d0a:	4618      	mov	r0, r3
 8018d0c:	f7fa fea6 	bl	8013a5c <netif_get_by_index>
 8018d10:	4603      	mov	r3, r0
 8018d12:	e003      	b.n	8018d1c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8018d14:	6878      	ldr	r0, [r7, #4]
 8018d16:	f006 f81d 	bl	801ed54 <ip4_route>
 8018d1a:	4603      	mov	r3, r0
  }
}
 8018d1c:	4618      	mov	r0, r3
 8018d1e:	3710      	adds	r7, #16
 8018d20:	46bd      	mov	sp, r7
 8018d22:	bd80      	pop	{r7, pc}

08018d24 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8018d24:	b590      	push	{r4, r7, lr}
 8018d26:	b087      	sub	sp, #28
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	60f8      	str	r0, [r7, #12]
 8018d2c:	60b9      	str	r1, [r7, #8]
 8018d2e:	603b      	str	r3, [r7, #0]
 8018d30:	4613      	mov	r3, r2
 8018d32:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d105      	bne.n	8018d46 <tcp_create_segment+0x22>
 8018d3a:	4b43      	ldr	r3, [pc, #268]	@ (8018e48 <tcp_create_segment+0x124>)
 8018d3c:	22a3      	movs	r2, #163	@ 0xa3
 8018d3e:	4943      	ldr	r1, [pc, #268]	@ (8018e4c <tcp_create_segment+0x128>)
 8018d40:	4843      	ldr	r0, [pc, #268]	@ (8018e50 <tcp_create_segment+0x12c>)
 8018d42:	f008 fb37 	bl	80213b4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8018d46:	68bb      	ldr	r3, [r7, #8]
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	d105      	bne.n	8018d58 <tcp_create_segment+0x34>
 8018d4c:	4b3e      	ldr	r3, [pc, #248]	@ (8018e48 <tcp_create_segment+0x124>)
 8018d4e:	22a4      	movs	r2, #164	@ 0xa4
 8018d50:	4940      	ldr	r1, [pc, #256]	@ (8018e54 <tcp_create_segment+0x130>)
 8018d52:	483f      	ldr	r0, [pc, #252]	@ (8018e50 <tcp_create_segment+0x12c>)
 8018d54:	f008 fb2e 	bl	80213b4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018d58:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018d5c:	009b      	lsls	r3, r3, #2
 8018d5e:	b2db      	uxtb	r3, r3
 8018d60:	f003 0304 	and.w	r3, r3, #4
 8018d64:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8018d66:	2003      	movs	r0, #3
 8018d68:	f7fa faaa 	bl	80132c0 <memp_malloc>
 8018d6c:	6138      	str	r0, [r7, #16]
 8018d6e:	693b      	ldr	r3, [r7, #16]
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d104      	bne.n	8018d7e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8018d74:	68b8      	ldr	r0, [r7, #8]
 8018d76:	f7fb f9ff 	bl	8014178 <pbuf_free>
    return NULL;
 8018d7a:	2300      	movs	r3, #0
 8018d7c:	e060      	b.n	8018e40 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8018d7e:	693b      	ldr	r3, [r7, #16]
 8018d80:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8018d84:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8018d86:	693b      	ldr	r3, [r7, #16]
 8018d88:	2200      	movs	r2, #0
 8018d8a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8018d8c:	693b      	ldr	r3, [r7, #16]
 8018d8e:	68ba      	ldr	r2, [r7, #8]
 8018d90:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8018d92:	68bb      	ldr	r3, [r7, #8]
 8018d94:	891a      	ldrh	r2, [r3, #8]
 8018d96:	7dfb      	ldrb	r3, [r7, #23]
 8018d98:	b29b      	uxth	r3, r3
 8018d9a:	429a      	cmp	r2, r3
 8018d9c:	d205      	bcs.n	8018daa <tcp_create_segment+0x86>
 8018d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8018e48 <tcp_create_segment+0x124>)
 8018da0:	22b0      	movs	r2, #176	@ 0xb0
 8018da2:	492d      	ldr	r1, [pc, #180]	@ (8018e58 <tcp_create_segment+0x134>)
 8018da4:	482a      	ldr	r0, [pc, #168]	@ (8018e50 <tcp_create_segment+0x12c>)
 8018da6:	f008 fb05 	bl	80213b4 <iprintf>
  seg->len = p->tot_len - optlen;
 8018daa:	68bb      	ldr	r3, [r7, #8]
 8018dac:	891a      	ldrh	r2, [r3, #8]
 8018dae:	7dfb      	ldrb	r3, [r7, #23]
 8018db0:	b29b      	uxth	r3, r3
 8018db2:	1ad3      	subs	r3, r2, r3
 8018db4:	b29a      	uxth	r2, r3
 8018db6:	693b      	ldr	r3, [r7, #16]
 8018db8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018dba:	2114      	movs	r1, #20
 8018dbc:	68b8      	ldr	r0, [r7, #8]
 8018dbe:	f7fb f945 	bl	801404c <pbuf_add_header>
 8018dc2:	4603      	mov	r3, r0
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d004      	beq.n	8018dd2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018dc8:	6938      	ldr	r0, [r7, #16]
 8018dca:	f7fc ffe6 	bl	8015d9a <tcp_seg_free>
    return NULL;
 8018dce:	2300      	movs	r3, #0
 8018dd0:	e036      	b.n	8018e40 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8018dd2:	693b      	ldr	r3, [r7, #16]
 8018dd4:	685b      	ldr	r3, [r3, #4]
 8018dd6:	685a      	ldr	r2, [r3, #4]
 8018dd8:	693b      	ldr	r3, [r7, #16]
 8018dda:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018ddc:	68fb      	ldr	r3, [r7, #12]
 8018dde:	8ada      	ldrh	r2, [r3, #22]
 8018de0:	693b      	ldr	r3, [r7, #16]
 8018de2:	68dc      	ldr	r4, [r3, #12]
 8018de4:	4610      	mov	r0, r2
 8018de6:	f7f9 fc09 	bl	80125fc <lwip_htons>
 8018dea:	4603      	mov	r3, r0
 8018dec:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	8b1a      	ldrh	r2, [r3, #24]
 8018df2:	693b      	ldr	r3, [r7, #16]
 8018df4:	68dc      	ldr	r4, [r3, #12]
 8018df6:	4610      	mov	r0, r2
 8018df8:	f7f9 fc00 	bl	80125fc <lwip_htons>
 8018dfc:	4603      	mov	r3, r0
 8018dfe:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8018e00:	693b      	ldr	r3, [r7, #16]
 8018e02:	68dc      	ldr	r4, [r3, #12]
 8018e04:	6838      	ldr	r0, [r7, #0]
 8018e06:	f7f9 fc0f 	bl	8012628 <lwip_htonl>
 8018e0a:	4603      	mov	r3, r0
 8018e0c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8018e0e:	7dfb      	ldrb	r3, [r7, #23]
 8018e10:	089b      	lsrs	r3, r3, #2
 8018e12:	b2db      	uxtb	r3, r3
 8018e14:	3305      	adds	r3, #5
 8018e16:	b29b      	uxth	r3, r3
 8018e18:	031b      	lsls	r3, r3, #12
 8018e1a:	b29a      	uxth	r2, r3
 8018e1c:	79fb      	ldrb	r3, [r7, #7]
 8018e1e:	b29b      	uxth	r3, r3
 8018e20:	4313      	orrs	r3, r2
 8018e22:	b29a      	uxth	r2, r3
 8018e24:	693b      	ldr	r3, [r7, #16]
 8018e26:	68dc      	ldr	r4, [r3, #12]
 8018e28:	4610      	mov	r0, r2
 8018e2a:	f7f9 fbe7 	bl	80125fc <lwip_htons>
 8018e2e:	4603      	mov	r3, r0
 8018e30:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8018e32:	693b      	ldr	r3, [r7, #16]
 8018e34:	68db      	ldr	r3, [r3, #12]
 8018e36:	2200      	movs	r2, #0
 8018e38:	749a      	strb	r2, [r3, #18]
 8018e3a:	2200      	movs	r2, #0
 8018e3c:	74da      	strb	r2, [r3, #19]
  return seg;
 8018e3e:	693b      	ldr	r3, [r7, #16]
}
 8018e40:	4618      	mov	r0, r3
 8018e42:	371c      	adds	r7, #28
 8018e44:	46bd      	mov	sp, r7
 8018e46:	bd90      	pop	{r4, r7, pc}
 8018e48:	08024d38 	.word	0x08024d38
 8018e4c:	08024d6c 	.word	0x08024d6c
 8018e50:	08024d8c 	.word	0x08024d8c
 8018e54:	08024db4 	.word	0x08024db4
 8018e58:	08024dd8 	.word	0x08024dd8

08018e5c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8018e5c:	b580      	push	{r7, lr}
 8018e5e:	b086      	sub	sp, #24
 8018e60:	af00      	add	r7, sp, #0
 8018e62:	607b      	str	r3, [r7, #4]
 8018e64:	4603      	mov	r3, r0
 8018e66:	73fb      	strb	r3, [r7, #15]
 8018e68:	460b      	mov	r3, r1
 8018e6a:	81bb      	strh	r3, [r7, #12]
 8018e6c:	4613      	mov	r3, r2
 8018e6e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8018e70:	89bb      	ldrh	r3, [r7, #12]
 8018e72:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d105      	bne.n	8018e86 <tcp_pbuf_prealloc+0x2a>
 8018e7a:	4b30      	ldr	r3, [pc, #192]	@ (8018f3c <tcp_pbuf_prealloc+0xe0>)
 8018e7c:	22e8      	movs	r2, #232	@ 0xe8
 8018e7e:	4930      	ldr	r1, [pc, #192]	@ (8018f40 <tcp_pbuf_prealloc+0xe4>)
 8018e80:	4830      	ldr	r0, [pc, #192]	@ (8018f44 <tcp_pbuf_prealloc+0xe8>)
 8018e82:	f008 fa97 	bl	80213b4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8018e86:	6a3b      	ldr	r3, [r7, #32]
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d105      	bne.n	8018e98 <tcp_pbuf_prealloc+0x3c>
 8018e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8018f3c <tcp_pbuf_prealloc+0xe0>)
 8018e8e:	22e9      	movs	r2, #233	@ 0xe9
 8018e90:	492d      	ldr	r1, [pc, #180]	@ (8018f48 <tcp_pbuf_prealloc+0xec>)
 8018e92:	482c      	ldr	r0, [pc, #176]	@ (8018f44 <tcp_pbuf_prealloc+0xe8>)
 8018e94:	f008 fa8e 	bl	80213b4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8018e98:	89ba      	ldrh	r2, [r7, #12]
 8018e9a:	897b      	ldrh	r3, [r7, #10]
 8018e9c:	429a      	cmp	r2, r3
 8018e9e:	d221      	bcs.n	8018ee4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018ea0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8018ea4:	f003 0302 	and.w	r3, r3, #2
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d111      	bne.n	8018ed0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8018eac:	6a3b      	ldr	r3, [r7, #32]
 8018eae:	8b5b      	ldrh	r3, [r3, #26]
 8018eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d115      	bne.n	8018ee4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8018eb8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d007      	beq.n	8018ed0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8018ec0:	6a3b      	ldr	r3, [r7, #32]
 8018ec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8018ec4:	2b00      	cmp	r3, #0
 8018ec6:	d103      	bne.n	8018ed0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8018ec8:	6a3b      	ldr	r3, [r7, #32]
 8018eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d009      	beq.n	8018ee4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8018ed0:	89bb      	ldrh	r3, [r7, #12]
 8018ed2:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8018ed6:	f023 0203 	bic.w	r2, r3, #3
 8018eda:	897b      	ldrh	r3, [r7, #10]
 8018edc:	4293      	cmp	r3, r2
 8018ede:	bf28      	it	cs
 8018ee0:	4613      	movcs	r3, r2
 8018ee2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8018ee4:	8af9      	ldrh	r1, [r7, #22]
 8018ee6:	7bfb      	ldrb	r3, [r7, #15]
 8018ee8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018eec:	4618      	mov	r0, r3
 8018eee:	f7fa fe5f 	bl	8013bb0 <pbuf_alloc>
 8018ef2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018ef4:	693b      	ldr	r3, [r7, #16]
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d101      	bne.n	8018efe <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8018efa:	2300      	movs	r3, #0
 8018efc:	e019      	b.n	8018f32 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8018efe:	693b      	ldr	r3, [r7, #16]
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d006      	beq.n	8018f14 <tcp_pbuf_prealloc+0xb8>
 8018f06:	4b0d      	ldr	r3, [pc, #52]	@ (8018f3c <tcp_pbuf_prealloc+0xe0>)
 8018f08:	f240 120b 	movw	r2, #267	@ 0x10b
 8018f0c:	490f      	ldr	r1, [pc, #60]	@ (8018f4c <tcp_pbuf_prealloc+0xf0>)
 8018f0e:	480d      	ldr	r0, [pc, #52]	@ (8018f44 <tcp_pbuf_prealloc+0xe8>)
 8018f10:	f008 fa50 	bl	80213b4 <iprintf>
  *oversize = p->len - length;
 8018f14:	693b      	ldr	r3, [r7, #16]
 8018f16:	895a      	ldrh	r2, [r3, #10]
 8018f18:	89bb      	ldrh	r3, [r7, #12]
 8018f1a:	1ad3      	subs	r3, r2, r3
 8018f1c:	b29a      	uxth	r2, r3
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8018f22:	693b      	ldr	r3, [r7, #16]
 8018f24:	89ba      	ldrh	r2, [r7, #12]
 8018f26:	811a      	strh	r2, [r3, #8]
 8018f28:	693b      	ldr	r3, [r7, #16]
 8018f2a:	891a      	ldrh	r2, [r3, #8]
 8018f2c:	693b      	ldr	r3, [r7, #16]
 8018f2e:	815a      	strh	r2, [r3, #10]
  return p;
 8018f30:	693b      	ldr	r3, [r7, #16]
}
 8018f32:	4618      	mov	r0, r3
 8018f34:	3718      	adds	r7, #24
 8018f36:	46bd      	mov	sp, r7
 8018f38:	bd80      	pop	{r7, pc}
 8018f3a:	bf00      	nop
 8018f3c:	08024d38 	.word	0x08024d38
 8018f40:	08024df0 	.word	0x08024df0
 8018f44:	08024d8c 	.word	0x08024d8c
 8018f48:	08024e14 	.word	0x08024e14
 8018f4c:	08024e34 	.word	0x08024e34

08018f50 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8018f50:	b580      	push	{r7, lr}
 8018f52:	b082      	sub	sp, #8
 8018f54:	af00      	add	r7, sp, #0
 8018f56:	6078      	str	r0, [r7, #4]
 8018f58:	460b      	mov	r3, r1
 8018f5a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d106      	bne.n	8018f70 <tcp_write_checks+0x20>
 8018f62:	4b33      	ldr	r3, [pc, #204]	@ (8019030 <tcp_write_checks+0xe0>)
 8018f64:	f240 1233 	movw	r2, #307	@ 0x133
 8018f68:	4932      	ldr	r1, [pc, #200]	@ (8019034 <tcp_write_checks+0xe4>)
 8018f6a:	4833      	ldr	r0, [pc, #204]	@ (8019038 <tcp_write_checks+0xe8>)
 8018f6c:	f008 fa22 	bl	80213b4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	7d1b      	ldrb	r3, [r3, #20]
 8018f74:	2b04      	cmp	r3, #4
 8018f76:	d00e      	beq.n	8018f96 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8018f7c:	2b07      	cmp	r3, #7
 8018f7e:	d00a      	beq.n	8018f96 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8018f84:	2b02      	cmp	r3, #2
 8018f86:	d006      	beq.n	8018f96 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8018f8c:	2b03      	cmp	r3, #3
 8018f8e:	d002      	beq.n	8018f96 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8018f90:	f06f 030a 	mvn.w	r3, #10
 8018f94:	e048      	b.n	8019028 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8018f96:	887b      	ldrh	r3, [r7, #2]
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d101      	bne.n	8018fa0 <tcp_write_checks+0x50>
    return ERR_OK;
 8018f9c:	2300      	movs	r3, #0
 8018f9e:	e043      	b.n	8019028 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8018fa6:	887a      	ldrh	r2, [r7, #2]
 8018fa8:	429a      	cmp	r2, r3
 8018faa:	d909      	bls.n	8018fc0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	8b5b      	ldrh	r3, [r3, #26]
 8018fb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018fb4:	b29a      	uxth	r2, r3
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018fba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018fbe:	e033      	b.n	8019028 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018fc6:	2b08      	cmp	r3, #8
 8018fc8:	d909      	bls.n	8018fde <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	8b5b      	ldrh	r3, [r3, #26]
 8018fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018fd2:	b29a      	uxth	r2, r3
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018fd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018fdc:	e024      	b.n	8019028 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d00f      	beq.n	8019008 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d11a      	bne.n	8019026 <tcp_write_checks+0xd6>
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d116      	bne.n	8019026 <tcp_write_checks+0xd6>
 8018ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8019030 <tcp_write_checks+0xe0>)
 8018ffa:	f240 1255 	movw	r2, #341	@ 0x155
 8018ffe:	490f      	ldr	r1, [pc, #60]	@ (801903c <tcp_write_checks+0xec>)
 8019000:	480d      	ldr	r0, [pc, #52]	@ (8019038 <tcp_write_checks+0xe8>)
 8019002:	f008 f9d7 	bl	80213b4 <iprintf>
 8019006:	e00e      	b.n	8019026 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801900c:	2b00      	cmp	r3, #0
 801900e:	d103      	bne.n	8019018 <tcp_write_checks+0xc8>
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019014:	2b00      	cmp	r3, #0
 8019016:	d006      	beq.n	8019026 <tcp_write_checks+0xd6>
 8019018:	4b05      	ldr	r3, [pc, #20]	@ (8019030 <tcp_write_checks+0xe0>)
 801901a:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801901e:	4908      	ldr	r1, [pc, #32]	@ (8019040 <tcp_write_checks+0xf0>)
 8019020:	4805      	ldr	r0, [pc, #20]	@ (8019038 <tcp_write_checks+0xe8>)
 8019022:	f008 f9c7 	bl	80213b4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8019026:	2300      	movs	r3, #0
}
 8019028:	4618      	mov	r0, r3
 801902a:	3708      	adds	r7, #8
 801902c:	46bd      	mov	sp, r7
 801902e:	bd80      	pop	{r7, pc}
 8019030:	08024d38 	.word	0x08024d38
 8019034:	08024e48 	.word	0x08024e48
 8019038:	08024d8c 	.word	0x08024d8c
 801903c:	08024e68 	.word	0x08024e68
 8019040:	08024ea4 	.word	0x08024ea4

08019044 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8019044:	b590      	push	{r4, r7, lr}
 8019046:	b09b      	sub	sp, #108	@ 0x6c
 8019048:	af04      	add	r7, sp, #16
 801904a:	60f8      	str	r0, [r7, #12]
 801904c:	60b9      	str	r1, [r7, #8]
 801904e:	4611      	mov	r1, r2
 8019050:	461a      	mov	r2, r3
 8019052:	460b      	mov	r3, r1
 8019054:	80fb      	strh	r3, [r7, #6]
 8019056:	4613      	mov	r3, r2
 8019058:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801905a:	2300      	movs	r3, #0
 801905c:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801905e:	2300      	movs	r3, #0
 8019060:	653b      	str	r3, [r7, #80]	@ 0x50
 8019062:	2300      	movs	r3, #0
 8019064:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019066:	2300      	movs	r3, #0
 8019068:	64bb      	str	r3, [r7, #72]	@ 0x48
 801906a:	2300      	movs	r3, #0
 801906c:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801906e:	2300      	movs	r3, #0
 8019070:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8019074:	2300      	movs	r3, #0
 8019076:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801907a:	2300      	movs	r3, #0
 801907c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801907e:	2300      	movs	r3, #0
 8019080:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8019082:	2300      	movs	r3, #0
 8019084:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	2b00      	cmp	r3, #0
 801908a:	d109      	bne.n	80190a0 <tcp_write+0x5c>
 801908c:	4ba4      	ldr	r3, [pc, #656]	@ (8019320 <tcp_write+0x2dc>)
 801908e:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8019092:	49a4      	ldr	r1, [pc, #656]	@ (8019324 <tcp_write+0x2e0>)
 8019094:	48a4      	ldr	r0, [pc, #656]	@ (8019328 <tcp_write+0x2e4>)
 8019096:	f008 f98d 	bl	80213b4 <iprintf>
 801909a:	f06f 030f 	mvn.w	r3, #15
 801909e:	e32a      	b.n	80196f6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80190a0:	68fb      	ldr	r3, [r7, #12]
 80190a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80190a6:	085b      	lsrs	r3, r3, #1
 80190a8:	b29a      	uxth	r2, r3
 80190aa:	68fb      	ldr	r3, [r7, #12]
 80190ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80190ae:	4293      	cmp	r3, r2
 80190b0:	bf28      	it	cs
 80190b2:	4613      	movcs	r3, r2
 80190b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80190b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	d102      	bne.n	80190c2 <tcp_write+0x7e>
 80190bc:	68fb      	ldr	r3, [r7, #12]
 80190be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80190c0:	e000      	b.n	80190c4 <tcp_write+0x80>
 80190c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80190c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80190c6:	68bb      	ldr	r3, [r7, #8]
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d109      	bne.n	80190e0 <tcp_write+0x9c>
 80190cc:	4b94      	ldr	r3, [pc, #592]	@ (8019320 <tcp_write+0x2dc>)
 80190ce:	f240 12ad 	movw	r2, #429	@ 0x1ad
 80190d2:	4996      	ldr	r1, [pc, #600]	@ (801932c <tcp_write+0x2e8>)
 80190d4:	4894      	ldr	r0, [pc, #592]	@ (8019328 <tcp_write+0x2e4>)
 80190d6:	f008 f96d 	bl	80213b4 <iprintf>
 80190da:	f06f 030f 	mvn.w	r3, #15
 80190de:	e30a      	b.n	80196f6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80190e0:	88fb      	ldrh	r3, [r7, #6]
 80190e2:	4619      	mov	r1, r3
 80190e4:	68f8      	ldr	r0, [r7, #12]
 80190e6:	f7ff ff33 	bl	8018f50 <tcp_write_checks>
 80190ea:	4603      	mov	r3, r0
 80190ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 80190f0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d002      	beq.n	80190fe <tcp_write+0xba>
    return err;
 80190f8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80190fc:	e2fb      	b.n	80196f6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019104:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019108:	2300      	movs	r3, #0
 801910a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801910e:	68fb      	ldr	r3, [r7, #12]
 8019110:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019112:	2b00      	cmp	r3, #0
 8019114:	f000 80f6 	beq.w	8019304 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019118:	68fb      	ldr	r3, [r7, #12]
 801911a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801911c:	653b      	str	r3, [r7, #80]	@ 0x50
 801911e:	e002      	b.n	8019126 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8019120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019122:	681b      	ldr	r3, [r3, #0]
 8019124:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019126:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019128:	681b      	ldr	r3, [r3, #0]
 801912a:	2b00      	cmp	r3, #0
 801912c:	d1f8      	bne.n	8019120 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801912e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019130:	7a9b      	ldrb	r3, [r3, #10]
 8019132:	009b      	lsls	r3, r3, #2
 8019134:	b29b      	uxth	r3, r3
 8019136:	f003 0304 	and.w	r3, r3, #4
 801913a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801913c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801913e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019140:	891b      	ldrh	r3, [r3, #8]
 8019142:	4619      	mov	r1, r3
 8019144:	8c3b      	ldrh	r3, [r7, #32]
 8019146:	440b      	add	r3, r1
 8019148:	429a      	cmp	r2, r3
 801914a:	da06      	bge.n	801915a <tcp_write+0x116>
 801914c:	4b74      	ldr	r3, [pc, #464]	@ (8019320 <tcp_write+0x2dc>)
 801914e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8019152:	4977      	ldr	r1, [pc, #476]	@ (8019330 <tcp_write+0x2ec>)
 8019154:	4874      	ldr	r0, [pc, #464]	@ (8019328 <tcp_write+0x2e4>)
 8019156:	f008 f92d 	bl	80213b4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801915a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801915c:	891a      	ldrh	r2, [r3, #8]
 801915e:	8c3b      	ldrh	r3, [r7, #32]
 8019160:	4413      	add	r3, r2
 8019162:	b29b      	uxth	r3, r3
 8019164:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019166:	1ad3      	subs	r3, r2, r3
 8019168:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801916a:	68fb      	ldr	r3, [r7, #12]
 801916c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019170:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8019172:	8a7b      	ldrh	r3, [r7, #18]
 8019174:	2b00      	cmp	r3, #0
 8019176:	d026      	beq.n	80191c6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8019178:	8a7b      	ldrh	r3, [r7, #18]
 801917a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801917c:	429a      	cmp	r2, r3
 801917e:	d206      	bcs.n	801918e <tcp_write+0x14a>
 8019180:	4b67      	ldr	r3, [pc, #412]	@ (8019320 <tcp_write+0x2dc>)
 8019182:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8019186:	496b      	ldr	r1, [pc, #428]	@ (8019334 <tcp_write+0x2f0>)
 8019188:	4867      	ldr	r0, [pc, #412]	@ (8019328 <tcp_write+0x2e4>)
 801918a:	f008 f913 	bl	80213b4 <iprintf>
      seg = last_unsent;
 801918e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019190:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8019192:	8a7b      	ldrh	r3, [r7, #18]
 8019194:	88fa      	ldrh	r2, [r7, #6]
 8019196:	4293      	cmp	r3, r2
 8019198:	bf28      	it	cs
 801919a:	4613      	movcs	r3, r2
 801919c:	b29b      	uxth	r3, r3
 801919e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80191a0:	4293      	cmp	r3, r2
 80191a2:	bf28      	it	cs
 80191a4:	4613      	movcs	r3, r2
 80191a6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 80191a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80191ac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80191ae:	4413      	add	r3, r2
 80191b0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 80191b4:	8a7a      	ldrh	r2, [r7, #18]
 80191b6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80191b8:	1ad3      	subs	r3, r2, r3
 80191ba:	b29b      	uxth	r3, r3
 80191bc:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80191be:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80191c0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80191c2:	1ad3      	subs	r3, r2, r3
 80191c4:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80191c6:	8a7b      	ldrh	r3, [r7, #18]
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d00b      	beq.n	80191e4 <tcp_write+0x1a0>
 80191cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80191d0:	88fb      	ldrh	r3, [r7, #6]
 80191d2:	429a      	cmp	r2, r3
 80191d4:	d006      	beq.n	80191e4 <tcp_write+0x1a0>
 80191d6:	4b52      	ldr	r3, [pc, #328]	@ (8019320 <tcp_write+0x2dc>)
 80191d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80191dc:	4956      	ldr	r1, [pc, #344]	@ (8019338 <tcp_write+0x2f4>)
 80191de:	4852      	ldr	r0, [pc, #328]	@ (8019328 <tcp_write+0x2e4>)
 80191e0:	f008 f8e8 	bl	80213b4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80191e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80191e8:	88fb      	ldrh	r3, [r7, #6]
 80191ea:	429a      	cmp	r2, r3
 80191ec:	f080 8167 	bcs.w	80194be <tcp_write+0x47a>
 80191f0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	f000 8163 	beq.w	80194be <tcp_write+0x47a>
 80191f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80191fa:	891b      	ldrh	r3, [r3, #8]
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	f000 815e 	beq.w	80194be <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8019202:	88fa      	ldrh	r2, [r7, #6]
 8019204:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019208:	1ad2      	subs	r2, r2, r3
 801920a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801920c:	4293      	cmp	r3, r2
 801920e:	bfa8      	it	ge
 8019210:	4613      	movge	r3, r2
 8019212:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8019214:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019216:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019218:	797b      	ldrb	r3, [r7, #5]
 801921a:	f003 0301 	and.w	r3, r3, #1
 801921e:	2b00      	cmp	r3, #0
 8019220:	d027      	beq.n	8019272 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8019222:	f107 0012 	add.w	r0, r7, #18
 8019226:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019228:	8bf9      	ldrh	r1, [r7, #30]
 801922a:	2301      	movs	r3, #1
 801922c:	9302      	str	r3, [sp, #8]
 801922e:	797b      	ldrb	r3, [r7, #5]
 8019230:	9301      	str	r3, [sp, #4]
 8019232:	68fb      	ldr	r3, [r7, #12]
 8019234:	9300      	str	r3, [sp, #0]
 8019236:	4603      	mov	r3, r0
 8019238:	2000      	movs	r0, #0
 801923a:	f7ff fe0f 	bl	8018e5c <tcp_pbuf_prealloc>
 801923e:	6578      	str	r0, [r7, #84]	@ 0x54
 8019240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019242:	2b00      	cmp	r3, #0
 8019244:	f000 8225 	beq.w	8019692 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8019248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801924a:	6858      	ldr	r0, [r3, #4]
 801924c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019250:	68ba      	ldr	r2, [r7, #8]
 8019252:	4413      	add	r3, r2
 8019254:	8bfa      	ldrh	r2, [r7, #30]
 8019256:	4619      	mov	r1, r3
 8019258:	f008 fb95 	bl	8021986 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801925c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801925e:	f7fb f819 	bl	8014294 <pbuf_clen>
 8019262:	4603      	mov	r3, r0
 8019264:	461a      	mov	r2, r3
 8019266:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801926a:	4413      	add	r3, r2
 801926c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8019270:	e041      	b.n	80192f6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8019272:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019274:	685b      	ldr	r3, [r3, #4]
 8019276:	637b      	str	r3, [r7, #52]	@ 0x34
 8019278:	e002      	b.n	8019280 <tcp_write+0x23c>
 801927a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	637b      	str	r3, [r7, #52]	@ 0x34
 8019280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	2b00      	cmp	r3, #0
 8019286:	d1f8      	bne.n	801927a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801928a:	7b1b      	ldrb	r3, [r3, #12]
 801928c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8019290:	2b00      	cmp	r3, #0
 8019292:	d115      	bne.n	80192c0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8019294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019296:	685b      	ldr	r3, [r3, #4]
 8019298:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801929a:	8952      	ldrh	r2, [r2, #10]
 801929c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801929e:	68ba      	ldr	r2, [r7, #8]
 80192a0:	429a      	cmp	r2, r3
 80192a2:	d10d      	bne.n	80192c0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80192a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d006      	beq.n	80192ba <tcp_write+0x276>
 80192ac:	4b1c      	ldr	r3, [pc, #112]	@ (8019320 <tcp_write+0x2dc>)
 80192ae:	f240 2231 	movw	r2, #561	@ 0x231
 80192b2:	4922      	ldr	r1, [pc, #136]	@ (801933c <tcp_write+0x2f8>)
 80192b4:	481c      	ldr	r0, [pc, #112]	@ (8019328 <tcp_write+0x2e4>)
 80192b6:	f008 f87d 	bl	80213b4 <iprintf>
          extendlen = seglen;
 80192ba:	8bfb      	ldrh	r3, [r7, #30]
 80192bc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80192be:	e01a      	b.n	80192f6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80192c0:	8bfb      	ldrh	r3, [r7, #30]
 80192c2:	2201      	movs	r2, #1
 80192c4:	4619      	mov	r1, r3
 80192c6:	2000      	movs	r0, #0
 80192c8:	f7fa fc72 	bl	8013bb0 <pbuf_alloc>
 80192cc:	6578      	str	r0, [r7, #84]	@ 0x54
 80192ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	f000 81e0 	beq.w	8019696 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80192d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80192da:	68ba      	ldr	r2, [r7, #8]
 80192dc:	441a      	add	r2, r3
 80192de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80192e0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80192e2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80192e4:	f7fa ffd6 	bl	8014294 <pbuf_clen>
 80192e8:	4603      	mov	r3, r0
 80192ea:	461a      	mov	r2, r3
 80192ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80192f0:	4413      	add	r3, r2
 80192f2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80192f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80192fa:	8bfb      	ldrh	r3, [r7, #30]
 80192fc:	4413      	add	r3, r2
 80192fe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8019302:	e0dc      	b.n	80194be <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801930a:	2b00      	cmp	r3, #0
 801930c:	f000 80d7 	beq.w	80194be <tcp_write+0x47a>
 8019310:	4b03      	ldr	r3, [pc, #12]	@ (8019320 <tcp_write+0x2dc>)
 8019312:	f240 224a 	movw	r2, #586	@ 0x24a
 8019316:	490a      	ldr	r1, [pc, #40]	@ (8019340 <tcp_write+0x2fc>)
 8019318:	4803      	ldr	r0, [pc, #12]	@ (8019328 <tcp_write+0x2e4>)
 801931a:	f008 f84b 	bl	80213b4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801931e:	e0ce      	b.n	80194be <tcp_write+0x47a>
 8019320:	08024d38 	.word	0x08024d38
 8019324:	08024ed8 	.word	0x08024ed8
 8019328:	08024d8c 	.word	0x08024d8c
 801932c:	08024ef0 	.word	0x08024ef0
 8019330:	08024f24 	.word	0x08024f24
 8019334:	08024f3c 	.word	0x08024f3c
 8019338:	08024f5c 	.word	0x08024f5c
 801933c:	08024f7c 	.word	0x08024f7c
 8019340:	08024fa8 	.word	0x08024fa8
    struct pbuf *p;
    u16_t left = len - pos;
 8019344:	88fa      	ldrh	r2, [r7, #6]
 8019346:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801934a:	1ad3      	subs	r3, r2, r3
 801934c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801934e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019352:	b29b      	uxth	r3, r3
 8019354:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019356:	1ad3      	subs	r3, r2, r3
 8019358:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801935a:	8b7a      	ldrh	r2, [r7, #26]
 801935c:	8bbb      	ldrh	r3, [r7, #28]
 801935e:	4293      	cmp	r3, r2
 8019360:	bf28      	it	cs
 8019362:	4613      	movcs	r3, r2
 8019364:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019366:	797b      	ldrb	r3, [r7, #5]
 8019368:	f003 0301 	and.w	r3, r3, #1
 801936c:	2b00      	cmp	r3, #0
 801936e:	d036      	beq.n	80193de <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8019370:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019374:	b29a      	uxth	r2, r3
 8019376:	8b3b      	ldrh	r3, [r7, #24]
 8019378:	4413      	add	r3, r2
 801937a:	b299      	uxth	r1, r3
 801937c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801937e:	2b00      	cmp	r3, #0
 8019380:	bf0c      	ite	eq
 8019382:	2301      	moveq	r3, #1
 8019384:	2300      	movne	r3, #0
 8019386:	b2db      	uxtb	r3, r3
 8019388:	f107 0012 	add.w	r0, r7, #18
 801938c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801938e:	9302      	str	r3, [sp, #8]
 8019390:	797b      	ldrb	r3, [r7, #5]
 8019392:	9301      	str	r3, [sp, #4]
 8019394:	68fb      	ldr	r3, [r7, #12]
 8019396:	9300      	str	r3, [sp, #0]
 8019398:	4603      	mov	r3, r0
 801939a:	2036      	movs	r0, #54	@ 0x36
 801939c:	f7ff fd5e 	bl	8018e5c <tcp_pbuf_prealloc>
 80193a0:	6338      	str	r0, [r7, #48]	@ 0x30
 80193a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	f000 8178 	beq.w	801969a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80193aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193ac:	895b      	ldrh	r3, [r3, #10]
 80193ae:	8b3a      	ldrh	r2, [r7, #24]
 80193b0:	429a      	cmp	r2, r3
 80193b2:	d906      	bls.n	80193c2 <tcp_write+0x37e>
 80193b4:	4b8c      	ldr	r3, [pc, #560]	@ (80195e8 <tcp_write+0x5a4>)
 80193b6:	f240 2266 	movw	r2, #614	@ 0x266
 80193ba:	498c      	ldr	r1, [pc, #560]	@ (80195ec <tcp_write+0x5a8>)
 80193bc:	488c      	ldr	r0, [pc, #560]	@ (80195f0 <tcp_write+0x5ac>)
 80193be:	f007 fff9 	bl	80213b4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80193c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80193c4:	685a      	ldr	r2, [r3, #4]
 80193c6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80193ca:	18d0      	adds	r0, r2, r3
 80193cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80193d0:	68ba      	ldr	r2, [r7, #8]
 80193d2:	4413      	add	r3, r2
 80193d4:	8b3a      	ldrh	r2, [r7, #24]
 80193d6:	4619      	mov	r1, r3
 80193d8:	f008 fad5 	bl	8021986 <memcpy>
 80193dc:	e02f      	b.n	801943e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80193de:	8a7b      	ldrh	r3, [r7, #18]
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d006      	beq.n	80193f2 <tcp_write+0x3ae>
 80193e4:	4b80      	ldr	r3, [pc, #512]	@ (80195e8 <tcp_write+0x5a4>)
 80193e6:	f240 2271 	movw	r2, #625	@ 0x271
 80193ea:	4982      	ldr	r1, [pc, #520]	@ (80195f4 <tcp_write+0x5b0>)
 80193ec:	4880      	ldr	r0, [pc, #512]	@ (80195f0 <tcp_write+0x5ac>)
 80193ee:	f007 ffe1 	bl	80213b4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80193f2:	8b3b      	ldrh	r3, [r7, #24]
 80193f4:	2201      	movs	r2, #1
 80193f6:	4619      	mov	r1, r3
 80193f8:	2036      	movs	r0, #54	@ 0x36
 80193fa:	f7fa fbd9 	bl	8013bb0 <pbuf_alloc>
 80193fe:	6178      	str	r0, [r7, #20]
 8019400:	697b      	ldr	r3, [r7, #20]
 8019402:	2b00      	cmp	r3, #0
 8019404:	f000 814b 	beq.w	801969e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8019408:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801940c:	68ba      	ldr	r2, [r7, #8]
 801940e:	441a      	add	r2, r3
 8019410:	697b      	ldr	r3, [r7, #20]
 8019412:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019414:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019418:	b29b      	uxth	r3, r3
 801941a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801941e:	4619      	mov	r1, r3
 8019420:	2036      	movs	r0, #54	@ 0x36
 8019422:	f7fa fbc5 	bl	8013bb0 <pbuf_alloc>
 8019426:	6338      	str	r0, [r7, #48]	@ 0x30
 8019428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801942a:	2b00      	cmp	r3, #0
 801942c:	d103      	bne.n	8019436 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801942e:	6978      	ldr	r0, [r7, #20]
 8019430:	f7fa fea2 	bl	8014178 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8019434:	e136      	b.n	80196a4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8019436:	6979      	ldr	r1, [r7, #20]
 8019438:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801943a:	f7fa ff6b 	bl	8014314 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801943e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019440:	f7fa ff28 	bl	8014294 <pbuf_clen>
 8019444:	4603      	mov	r3, r0
 8019446:	461a      	mov	r2, r3
 8019448:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801944c:	4413      	add	r3, r2
 801944e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8019452:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019456:	2b09      	cmp	r3, #9
 8019458:	d903      	bls.n	8019462 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801945a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801945c:	f7fa fe8c 	bl	8014178 <pbuf_free>
      goto memerr;
 8019460:	e120      	b.n	80196a4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8019462:	68fb      	ldr	r3, [r7, #12]
 8019464:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8019466:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801946a:	441a      	add	r2, r3
 801946c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019470:	9300      	str	r3, [sp, #0]
 8019472:	4613      	mov	r3, r2
 8019474:	2200      	movs	r2, #0
 8019476:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019478:	68f8      	ldr	r0, [r7, #12]
 801947a:	f7ff fc53 	bl	8018d24 <tcp_create_segment>
 801947e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8019480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019482:	2b00      	cmp	r3, #0
 8019484:	f000 810d 	beq.w	80196a2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8019488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801948a:	2b00      	cmp	r3, #0
 801948c:	d102      	bne.n	8019494 <tcp_write+0x450>
      queue = seg;
 801948e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019490:	647b      	str	r3, [r7, #68]	@ 0x44
 8019492:	e00c      	b.n	80194ae <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8019494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019496:	2b00      	cmp	r3, #0
 8019498:	d106      	bne.n	80194a8 <tcp_write+0x464>
 801949a:	4b53      	ldr	r3, [pc, #332]	@ (80195e8 <tcp_write+0x5a4>)
 801949c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80194a0:	4955      	ldr	r1, [pc, #340]	@ (80195f8 <tcp_write+0x5b4>)
 80194a2:	4853      	ldr	r0, [pc, #332]	@ (80195f0 <tcp_write+0x5ac>)
 80194a4:	f007 ff86 	bl	80213b4 <iprintf>
      prev_seg->next = seg;
 80194a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80194aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80194ac:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80194ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80194b0:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80194b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80194b6:	8b3b      	ldrh	r3, [r7, #24]
 80194b8:	4413      	add	r3, r2
 80194ba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 80194be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80194c2:	88fb      	ldrh	r3, [r7, #6]
 80194c4:	429a      	cmp	r2, r3
 80194c6:	f4ff af3d 	bcc.w	8019344 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80194ca:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d02c      	beq.n	801952a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80194d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80194d2:	685b      	ldr	r3, [r3, #4]
 80194d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80194d6:	e01e      	b.n	8019516 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80194d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194da:	891a      	ldrh	r2, [r3, #8]
 80194dc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80194de:	4413      	add	r3, r2
 80194e0:	b29a      	uxth	r2, r3
 80194e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194e4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80194e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d110      	bne.n	8019510 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80194ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80194f0:	685b      	ldr	r3, [r3, #4]
 80194f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80194f4:	8952      	ldrh	r2, [r2, #10]
 80194f6:	4413      	add	r3, r2
 80194f8:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80194fa:	68b9      	ldr	r1, [r7, #8]
 80194fc:	4618      	mov	r0, r3
 80194fe:	f008 fa42 	bl	8021986 <memcpy>
        p->len += oversize_used;
 8019502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019504:	895a      	ldrh	r2, [r3, #10]
 8019506:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019508:	4413      	add	r3, r2
 801950a:	b29a      	uxth	r2, r3
 801950c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801950e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8019510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019518:	2b00      	cmp	r3, #0
 801951a:	d1dd      	bne.n	80194d8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801951c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801951e:	891a      	ldrh	r2, [r3, #8]
 8019520:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019522:	4413      	add	r3, r2
 8019524:	b29a      	uxth	r2, r3
 8019526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019528:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801952a:	8a7a      	ldrh	r2, [r7, #18]
 801952c:	68fb      	ldr	r3, [r7, #12]
 801952e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8019532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019534:	2b00      	cmp	r3, #0
 8019536:	d018      	beq.n	801956a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8019538:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801953a:	2b00      	cmp	r3, #0
 801953c:	d106      	bne.n	801954c <tcp_write+0x508>
 801953e:	4b2a      	ldr	r3, [pc, #168]	@ (80195e8 <tcp_write+0x5a4>)
 8019540:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8019544:	492d      	ldr	r1, [pc, #180]	@ (80195fc <tcp_write+0x5b8>)
 8019546:	482a      	ldr	r0, [pc, #168]	@ (80195f0 <tcp_write+0x5ac>)
 8019548:	f007 ff34 	bl	80213b4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801954c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801954e:	685b      	ldr	r3, [r3, #4]
 8019550:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019552:	4618      	mov	r0, r3
 8019554:	f7fa fede 	bl	8014314 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8019558:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801955a:	891a      	ldrh	r2, [r3, #8]
 801955c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801955e:	891b      	ldrh	r3, [r3, #8]
 8019560:	4413      	add	r3, r2
 8019562:	b29a      	uxth	r2, r3
 8019564:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019566:	811a      	strh	r2, [r3, #8]
 8019568:	e037      	b.n	80195da <tcp_write+0x596>
  } else if (extendlen > 0) {
 801956a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801956c:	2b00      	cmp	r3, #0
 801956e:	d034      	beq.n	80195da <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8019570:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019572:	2b00      	cmp	r3, #0
 8019574:	d003      	beq.n	801957e <tcp_write+0x53a>
 8019576:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019578:	685b      	ldr	r3, [r3, #4]
 801957a:	2b00      	cmp	r3, #0
 801957c:	d106      	bne.n	801958c <tcp_write+0x548>
 801957e:	4b1a      	ldr	r3, [pc, #104]	@ (80195e8 <tcp_write+0x5a4>)
 8019580:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8019584:	491e      	ldr	r1, [pc, #120]	@ (8019600 <tcp_write+0x5bc>)
 8019586:	481a      	ldr	r0, [pc, #104]	@ (80195f0 <tcp_write+0x5ac>)
 8019588:	f007 ff14 	bl	80213b4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801958c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801958e:	685b      	ldr	r3, [r3, #4]
 8019590:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019592:	e009      	b.n	80195a8 <tcp_write+0x564>
      p->tot_len += extendlen;
 8019594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019596:	891a      	ldrh	r2, [r3, #8]
 8019598:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801959a:	4413      	add	r3, r2
 801959c:	b29a      	uxth	r2, r3
 801959e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195a0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80195a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80195a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195aa:	681b      	ldr	r3, [r3, #0]
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d1f1      	bne.n	8019594 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80195b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195b2:	891a      	ldrh	r2, [r3, #8]
 80195b4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80195b6:	4413      	add	r3, r2
 80195b8:	b29a      	uxth	r2, r3
 80195ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195bc:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80195be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195c0:	895a      	ldrh	r2, [r3, #10]
 80195c2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80195c4:	4413      	add	r3, r2
 80195c6:	b29a      	uxth	r2, r3
 80195c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195ca:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80195cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80195ce:	891a      	ldrh	r2, [r3, #8]
 80195d0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80195d2:	4413      	add	r3, r2
 80195d4:	b29a      	uxth	r2, r3
 80195d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80195d8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80195da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d111      	bne.n	8019604 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80195e0:	68fb      	ldr	r3, [r7, #12]
 80195e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80195e4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80195e6:	e010      	b.n	801960a <tcp_write+0x5c6>
 80195e8:	08024d38 	.word	0x08024d38
 80195ec:	08024fd8 	.word	0x08024fd8
 80195f0:	08024d8c 	.word	0x08024d8c
 80195f4:	08025018 	.word	0x08025018
 80195f8:	08025028 	.word	0x08025028
 80195fc:	0802503c 	.word	0x0802503c
 8019600:	08025074 	.word	0x08025074
  } else {
    last_unsent->next = queue;
 8019604:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019606:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019608:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801960e:	88fb      	ldrh	r3, [r7, #6]
 8019610:	441a      	add	r2, r3
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801961c:	88fb      	ldrh	r3, [r7, #6]
 801961e:	1ad3      	subs	r3, r2, r3
 8019620:	b29a      	uxth	r2, r3
 8019622:	68fb      	ldr	r3, [r7, #12]
 8019624:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8019628:	68fb      	ldr	r3, [r7, #12]
 801962a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801962e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019632:	68fb      	ldr	r3, [r7, #12]
 8019634:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019638:	2b00      	cmp	r3, #0
 801963a:	d00e      	beq.n	801965a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801963c:	68fb      	ldr	r3, [r7, #12]
 801963e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019640:	2b00      	cmp	r3, #0
 8019642:	d10a      	bne.n	801965a <tcp_write+0x616>
 8019644:	68fb      	ldr	r3, [r7, #12]
 8019646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019648:	2b00      	cmp	r3, #0
 801964a:	d106      	bne.n	801965a <tcp_write+0x616>
 801964c:	4b2c      	ldr	r3, [pc, #176]	@ (8019700 <tcp_write+0x6bc>)
 801964e:	f240 3212 	movw	r2, #786	@ 0x312
 8019652:	492c      	ldr	r1, [pc, #176]	@ (8019704 <tcp_write+0x6c0>)
 8019654:	482c      	ldr	r0, [pc, #176]	@ (8019708 <tcp_write+0x6c4>)
 8019656:	f007 fead 	bl	80213b4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801965a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801965c:	2b00      	cmp	r3, #0
 801965e:	d016      	beq.n	801968e <tcp_write+0x64a>
 8019660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019662:	68db      	ldr	r3, [r3, #12]
 8019664:	2b00      	cmp	r3, #0
 8019666:	d012      	beq.n	801968e <tcp_write+0x64a>
 8019668:	797b      	ldrb	r3, [r7, #5]
 801966a:	f003 0302 	and.w	r3, r3, #2
 801966e:	2b00      	cmp	r3, #0
 8019670:	d10d      	bne.n	801968e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8019672:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019674:	68db      	ldr	r3, [r3, #12]
 8019676:	899b      	ldrh	r3, [r3, #12]
 8019678:	b29c      	uxth	r4, r3
 801967a:	2008      	movs	r0, #8
 801967c:	f7f8 ffbe 	bl	80125fc <lwip_htons>
 8019680:	4603      	mov	r3, r0
 8019682:	461a      	mov	r2, r3
 8019684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019686:	68db      	ldr	r3, [r3, #12]
 8019688:	4322      	orrs	r2, r4
 801968a:	b292      	uxth	r2, r2
 801968c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801968e:	2300      	movs	r3, #0
 8019690:	e031      	b.n	80196f6 <tcp_write+0x6b2>
          goto memerr;
 8019692:	bf00      	nop
 8019694:	e006      	b.n	80196a4 <tcp_write+0x660>
            goto memerr;
 8019696:	bf00      	nop
 8019698:	e004      	b.n	80196a4 <tcp_write+0x660>
        goto memerr;
 801969a:	bf00      	nop
 801969c:	e002      	b.n	80196a4 <tcp_write+0x660>
        goto memerr;
 801969e:	bf00      	nop
 80196a0:	e000      	b.n	80196a4 <tcp_write+0x660>
      goto memerr;
 80196a2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80196a4:	68fb      	ldr	r3, [r7, #12]
 80196a6:	8b5b      	ldrh	r3, [r3, #26]
 80196a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80196ac:	b29a      	uxth	r2, r3
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80196b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d002      	beq.n	80196be <tcp_write+0x67a>
    pbuf_free(concat_p);
 80196b8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80196ba:	f7fa fd5d 	bl	8014178 <pbuf_free>
  }
  if (queue != NULL) {
 80196be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d002      	beq.n	80196ca <tcp_write+0x686>
    tcp_segs_free(queue);
 80196c4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80196c6:	f7fc fb53 	bl	8015d70 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80196ca:	68fb      	ldr	r3, [r7, #12]
 80196cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d00e      	beq.n	80196f2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d10a      	bne.n	80196f2 <tcp_write+0x6ae>
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	d106      	bne.n	80196f2 <tcp_write+0x6ae>
 80196e4:	4b06      	ldr	r3, [pc, #24]	@ (8019700 <tcp_write+0x6bc>)
 80196e6:	f240 3227 	movw	r2, #807	@ 0x327
 80196ea:	4906      	ldr	r1, [pc, #24]	@ (8019704 <tcp_write+0x6c0>)
 80196ec:	4806      	ldr	r0, [pc, #24]	@ (8019708 <tcp_write+0x6c4>)
 80196ee:	f007 fe61 	bl	80213b4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80196f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80196f6:	4618      	mov	r0, r3
 80196f8:	375c      	adds	r7, #92	@ 0x5c
 80196fa:	46bd      	mov	sp, r7
 80196fc:	bd90      	pop	{r4, r7, pc}
 80196fe:	bf00      	nop
 8019700:	08024d38 	.word	0x08024d38
 8019704:	080250ac 	.word	0x080250ac
 8019708:	08024d8c 	.word	0x08024d8c

0801970c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801970c:	b590      	push	{r4, r7, lr}
 801970e:	b08b      	sub	sp, #44	@ 0x2c
 8019710:	af02      	add	r7, sp, #8
 8019712:	6078      	str	r0, [r7, #4]
 8019714:	460b      	mov	r3, r1
 8019716:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8019718:	2300      	movs	r3, #0
 801971a:	61fb      	str	r3, [r7, #28]
 801971c:	2300      	movs	r3, #0
 801971e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8019720:	2300      	movs	r3, #0
 8019722:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	2b00      	cmp	r3, #0
 8019728:	d106      	bne.n	8019738 <tcp_split_unsent_seg+0x2c>
 801972a:	4b95      	ldr	r3, [pc, #596]	@ (8019980 <tcp_split_unsent_seg+0x274>)
 801972c:	f240 324b 	movw	r2, #843	@ 0x34b
 8019730:	4994      	ldr	r1, [pc, #592]	@ (8019984 <tcp_split_unsent_seg+0x278>)
 8019732:	4895      	ldr	r0, [pc, #596]	@ (8019988 <tcp_split_unsent_seg+0x27c>)
 8019734:	f007 fe3e 	bl	80213b4 <iprintf>

  useg = pcb->unsent;
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801973c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801973e:	697b      	ldr	r3, [r7, #20]
 8019740:	2b00      	cmp	r3, #0
 8019742:	d102      	bne.n	801974a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8019744:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019748:	e116      	b.n	8019978 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801974a:	887b      	ldrh	r3, [r7, #2]
 801974c:	2b00      	cmp	r3, #0
 801974e:	d109      	bne.n	8019764 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8019750:	4b8b      	ldr	r3, [pc, #556]	@ (8019980 <tcp_split_unsent_seg+0x274>)
 8019752:	f240 3253 	movw	r2, #851	@ 0x353
 8019756:	498d      	ldr	r1, [pc, #564]	@ (801998c <tcp_split_unsent_seg+0x280>)
 8019758:	488b      	ldr	r0, [pc, #556]	@ (8019988 <tcp_split_unsent_seg+0x27c>)
 801975a:	f007 fe2b 	bl	80213b4 <iprintf>
    return ERR_VAL;
 801975e:	f06f 0305 	mvn.w	r3, #5
 8019762:	e109      	b.n	8019978 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8019764:	697b      	ldr	r3, [r7, #20]
 8019766:	891b      	ldrh	r3, [r3, #8]
 8019768:	887a      	ldrh	r2, [r7, #2]
 801976a:	429a      	cmp	r2, r3
 801976c:	d301      	bcc.n	8019772 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801976e:	2300      	movs	r3, #0
 8019770:	e102      	b.n	8019978 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019776:	887a      	ldrh	r2, [r7, #2]
 8019778:	429a      	cmp	r2, r3
 801977a:	d906      	bls.n	801978a <tcp_split_unsent_seg+0x7e>
 801977c:	4b80      	ldr	r3, [pc, #512]	@ (8019980 <tcp_split_unsent_seg+0x274>)
 801977e:	f240 325b 	movw	r2, #859	@ 0x35b
 8019782:	4983      	ldr	r1, [pc, #524]	@ (8019990 <tcp_split_unsent_seg+0x284>)
 8019784:	4880      	ldr	r0, [pc, #512]	@ (8019988 <tcp_split_unsent_seg+0x27c>)
 8019786:	f007 fe15 	bl	80213b4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801978a:	697b      	ldr	r3, [r7, #20]
 801978c:	891b      	ldrh	r3, [r3, #8]
 801978e:	2b00      	cmp	r3, #0
 8019790:	d106      	bne.n	80197a0 <tcp_split_unsent_seg+0x94>
 8019792:	4b7b      	ldr	r3, [pc, #492]	@ (8019980 <tcp_split_unsent_seg+0x274>)
 8019794:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8019798:	497e      	ldr	r1, [pc, #504]	@ (8019994 <tcp_split_unsent_seg+0x288>)
 801979a:	487b      	ldr	r0, [pc, #492]	@ (8019988 <tcp_split_unsent_seg+0x27c>)
 801979c:	f007 fe0a 	bl	80213b4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80197a0:	697b      	ldr	r3, [r7, #20]
 80197a2:	7a9b      	ldrb	r3, [r3, #10]
 80197a4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80197a6:	7bfb      	ldrb	r3, [r7, #15]
 80197a8:	009b      	lsls	r3, r3, #2
 80197aa:	b2db      	uxtb	r3, r3
 80197ac:	f003 0304 	and.w	r3, r3, #4
 80197b0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80197b2:	697b      	ldr	r3, [r7, #20]
 80197b4:	891a      	ldrh	r2, [r3, #8]
 80197b6:	887b      	ldrh	r3, [r7, #2]
 80197b8:	1ad3      	subs	r3, r2, r3
 80197ba:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80197bc:	7bbb      	ldrb	r3, [r7, #14]
 80197be:	b29a      	uxth	r2, r3
 80197c0:	89bb      	ldrh	r3, [r7, #12]
 80197c2:	4413      	add	r3, r2
 80197c4:	b29b      	uxth	r3, r3
 80197c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80197ca:	4619      	mov	r1, r3
 80197cc:	2036      	movs	r0, #54	@ 0x36
 80197ce:	f7fa f9ef 	bl	8013bb0 <pbuf_alloc>
 80197d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80197d4:	693b      	ldr	r3, [r7, #16]
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	f000 80b7 	beq.w	801994a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80197dc:	697b      	ldr	r3, [r7, #20]
 80197de:	685b      	ldr	r3, [r3, #4]
 80197e0:	891a      	ldrh	r2, [r3, #8]
 80197e2:	697b      	ldr	r3, [r7, #20]
 80197e4:	891b      	ldrh	r3, [r3, #8]
 80197e6:	1ad3      	subs	r3, r2, r3
 80197e8:	b29a      	uxth	r2, r3
 80197ea:	887b      	ldrh	r3, [r7, #2]
 80197ec:	4413      	add	r3, r2
 80197ee:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80197f0:	697b      	ldr	r3, [r7, #20]
 80197f2:	6858      	ldr	r0, [r3, #4]
 80197f4:	693b      	ldr	r3, [r7, #16]
 80197f6:	685a      	ldr	r2, [r3, #4]
 80197f8:	7bbb      	ldrb	r3, [r7, #14]
 80197fa:	18d1      	adds	r1, r2, r3
 80197fc:	897b      	ldrh	r3, [r7, #10]
 80197fe:	89ba      	ldrh	r2, [r7, #12]
 8019800:	f7fa fec0 	bl	8014584 <pbuf_copy_partial>
 8019804:	4603      	mov	r3, r0
 8019806:	461a      	mov	r2, r3
 8019808:	89bb      	ldrh	r3, [r7, #12]
 801980a:	4293      	cmp	r3, r2
 801980c:	f040 809f 	bne.w	801994e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8019810:	697b      	ldr	r3, [r7, #20]
 8019812:	68db      	ldr	r3, [r3, #12]
 8019814:	899b      	ldrh	r3, [r3, #12]
 8019816:	b29b      	uxth	r3, r3
 8019818:	4618      	mov	r0, r3
 801981a:	f7f8 feef 	bl	80125fc <lwip_htons>
 801981e:	4603      	mov	r3, r0
 8019820:	b2db      	uxtb	r3, r3
 8019822:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019826:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8019828:	2300      	movs	r3, #0
 801982a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801982c:	7efb      	ldrb	r3, [r7, #27]
 801982e:	f003 0308 	and.w	r3, r3, #8
 8019832:	2b00      	cmp	r3, #0
 8019834:	d007      	beq.n	8019846 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8019836:	7efb      	ldrb	r3, [r7, #27]
 8019838:	f023 0308 	bic.w	r3, r3, #8
 801983c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801983e:	7ebb      	ldrb	r3, [r7, #26]
 8019840:	f043 0308 	orr.w	r3, r3, #8
 8019844:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8019846:	7efb      	ldrb	r3, [r7, #27]
 8019848:	f003 0301 	and.w	r3, r3, #1
 801984c:	2b00      	cmp	r3, #0
 801984e:	d007      	beq.n	8019860 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8019850:	7efb      	ldrb	r3, [r7, #27]
 8019852:	f023 0301 	bic.w	r3, r3, #1
 8019856:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8019858:	7ebb      	ldrb	r3, [r7, #26]
 801985a:	f043 0301 	orr.w	r3, r3, #1
 801985e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8019860:	697b      	ldr	r3, [r7, #20]
 8019862:	68db      	ldr	r3, [r3, #12]
 8019864:	685b      	ldr	r3, [r3, #4]
 8019866:	4618      	mov	r0, r3
 8019868:	f7f8 fede 	bl	8012628 <lwip_htonl>
 801986c:	4602      	mov	r2, r0
 801986e:	887b      	ldrh	r3, [r7, #2]
 8019870:	18d1      	adds	r1, r2, r3
 8019872:	7eba      	ldrb	r2, [r7, #26]
 8019874:	7bfb      	ldrb	r3, [r7, #15]
 8019876:	9300      	str	r3, [sp, #0]
 8019878:	460b      	mov	r3, r1
 801987a:	6939      	ldr	r1, [r7, #16]
 801987c:	6878      	ldr	r0, [r7, #4]
 801987e:	f7ff fa51 	bl	8018d24 <tcp_create_segment>
 8019882:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8019884:	69fb      	ldr	r3, [r7, #28]
 8019886:	2b00      	cmp	r3, #0
 8019888:	d063      	beq.n	8019952 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801988a:	697b      	ldr	r3, [r7, #20]
 801988c:	685b      	ldr	r3, [r3, #4]
 801988e:	4618      	mov	r0, r3
 8019890:	f7fa fd00 	bl	8014294 <pbuf_clen>
 8019894:	4603      	mov	r3, r0
 8019896:	461a      	mov	r2, r3
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801989e:	1a9b      	subs	r3, r3, r2
 80198a0:	b29a      	uxth	r2, r3
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80198a8:	697b      	ldr	r3, [r7, #20]
 80198aa:	6858      	ldr	r0, [r3, #4]
 80198ac:	697b      	ldr	r3, [r7, #20]
 80198ae:	685b      	ldr	r3, [r3, #4]
 80198b0:	891a      	ldrh	r2, [r3, #8]
 80198b2:	89bb      	ldrh	r3, [r7, #12]
 80198b4:	1ad3      	subs	r3, r2, r3
 80198b6:	b29b      	uxth	r3, r3
 80198b8:	4619      	mov	r1, r3
 80198ba:	f7fa fad7 	bl	8013e6c <pbuf_realloc>
  useg->len -= remainder;
 80198be:	697b      	ldr	r3, [r7, #20]
 80198c0:	891a      	ldrh	r2, [r3, #8]
 80198c2:	89bb      	ldrh	r3, [r7, #12]
 80198c4:	1ad3      	subs	r3, r2, r3
 80198c6:	b29a      	uxth	r2, r3
 80198c8:	697b      	ldr	r3, [r7, #20]
 80198ca:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80198cc:	697b      	ldr	r3, [r7, #20]
 80198ce:	68db      	ldr	r3, [r3, #12]
 80198d0:	899b      	ldrh	r3, [r3, #12]
 80198d2:	b29c      	uxth	r4, r3
 80198d4:	7efb      	ldrb	r3, [r7, #27]
 80198d6:	b29b      	uxth	r3, r3
 80198d8:	4618      	mov	r0, r3
 80198da:	f7f8 fe8f 	bl	80125fc <lwip_htons>
 80198de:	4603      	mov	r3, r0
 80198e0:	461a      	mov	r2, r3
 80198e2:	697b      	ldr	r3, [r7, #20]
 80198e4:	68db      	ldr	r3, [r3, #12]
 80198e6:	4322      	orrs	r2, r4
 80198e8:	b292      	uxth	r2, r2
 80198ea:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80198ec:	697b      	ldr	r3, [r7, #20]
 80198ee:	685b      	ldr	r3, [r3, #4]
 80198f0:	4618      	mov	r0, r3
 80198f2:	f7fa fccf 	bl	8014294 <pbuf_clen>
 80198f6:	4603      	mov	r3, r0
 80198f8:	461a      	mov	r2, r3
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019900:	4413      	add	r3, r2
 8019902:	b29a      	uxth	r2, r3
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801990a:	69fb      	ldr	r3, [r7, #28]
 801990c:	685b      	ldr	r3, [r3, #4]
 801990e:	4618      	mov	r0, r3
 8019910:	f7fa fcc0 	bl	8014294 <pbuf_clen>
 8019914:	4603      	mov	r3, r0
 8019916:	461a      	mov	r2, r3
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801991e:	4413      	add	r3, r2
 8019920:	b29a      	uxth	r2, r3
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8019928:	697b      	ldr	r3, [r7, #20]
 801992a:	681a      	ldr	r2, [r3, #0]
 801992c:	69fb      	ldr	r3, [r7, #28]
 801992e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8019930:	697b      	ldr	r3, [r7, #20]
 8019932:	69fa      	ldr	r2, [r7, #28]
 8019934:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8019936:	69fb      	ldr	r3, [r7, #28]
 8019938:	681b      	ldr	r3, [r3, #0]
 801993a:	2b00      	cmp	r3, #0
 801993c:	d103      	bne.n	8019946 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	2200      	movs	r2, #0
 8019942:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8019946:	2300      	movs	r3, #0
 8019948:	e016      	b.n	8019978 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801994a:	bf00      	nop
 801994c:	e002      	b.n	8019954 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801994e:	bf00      	nop
 8019950:	e000      	b.n	8019954 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8019952:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8019954:	69fb      	ldr	r3, [r7, #28]
 8019956:	2b00      	cmp	r3, #0
 8019958:	d006      	beq.n	8019968 <tcp_split_unsent_seg+0x25c>
 801995a:	4b09      	ldr	r3, [pc, #36]	@ (8019980 <tcp_split_unsent_seg+0x274>)
 801995c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8019960:	490d      	ldr	r1, [pc, #52]	@ (8019998 <tcp_split_unsent_seg+0x28c>)
 8019962:	4809      	ldr	r0, [pc, #36]	@ (8019988 <tcp_split_unsent_seg+0x27c>)
 8019964:	f007 fd26 	bl	80213b4 <iprintf>
  if (p != NULL) {
 8019968:	693b      	ldr	r3, [r7, #16]
 801996a:	2b00      	cmp	r3, #0
 801996c:	d002      	beq.n	8019974 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801996e:	6938      	ldr	r0, [r7, #16]
 8019970:	f7fa fc02 	bl	8014178 <pbuf_free>
  }

  return ERR_MEM;
 8019974:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8019978:	4618      	mov	r0, r3
 801997a:	3724      	adds	r7, #36	@ 0x24
 801997c:	46bd      	mov	sp, r7
 801997e:	bd90      	pop	{r4, r7, pc}
 8019980:	08024d38 	.word	0x08024d38
 8019984:	080250cc 	.word	0x080250cc
 8019988:	08024d8c 	.word	0x08024d8c
 801998c:	080250f0 	.word	0x080250f0
 8019990:	08025114 	.word	0x08025114
 8019994:	08025124 	.word	0x08025124
 8019998:	08025134 	.word	0x08025134

0801999c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801999c:	b590      	push	{r4, r7, lr}
 801999e:	b085      	sub	sp, #20
 80199a0:	af00      	add	r7, sp, #0
 80199a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d106      	bne.n	80199b8 <tcp_send_fin+0x1c>
 80199aa:	4b21      	ldr	r3, [pc, #132]	@ (8019a30 <tcp_send_fin+0x94>)
 80199ac:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80199b0:	4920      	ldr	r1, [pc, #128]	@ (8019a34 <tcp_send_fin+0x98>)
 80199b2:	4821      	ldr	r0, [pc, #132]	@ (8019a38 <tcp_send_fin+0x9c>)
 80199b4:	f007 fcfe 	bl	80213b4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80199bc:	2b00      	cmp	r3, #0
 80199be:	d02e      	beq.n	8019a1e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80199c4:	60fb      	str	r3, [r7, #12]
 80199c6:	e002      	b.n	80199ce <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80199c8:	68fb      	ldr	r3, [r7, #12]
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80199ce:	68fb      	ldr	r3, [r7, #12]
 80199d0:	681b      	ldr	r3, [r3, #0]
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d1f8      	bne.n	80199c8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	68db      	ldr	r3, [r3, #12]
 80199da:	899b      	ldrh	r3, [r3, #12]
 80199dc:	b29b      	uxth	r3, r3
 80199de:	4618      	mov	r0, r3
 80199e0:	f7f8 fe0c 	bl	80125fc <lwip_htons>
 80199e4:	4603      	mov	r3, r0
 80199e6:	b2db      	uxtb	r3, r3
 80199e8:	f003 0307 	and.w	r3, r3, #7
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d116      	bne.n	8019a1e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80199f0:	68fb      	ldr	r3, [r7, #12]
 80199f2:	68db      	ldr	r3, [r3, #12]
 80199f4:	899b      	ldrh	r3, [r3, #12]
 80199f6:	b29c      	uxth	r4, r3
 80199f8:	2001      	movs	r0, #1
 80199fa:	f7f8 fdff 	bl	80125fc <lwip_htons>
 80199fe:	4603      	mov	r3, r0
 8019a00:	461a      	mov	r2, r3
 8019a02:	68fb      	ldr	r3, [r7, #12]
 8019a04:	68db      	ldr	r3, [r3, #12]
 8019a06:	4322      	orrs	r2, r4
 8019a08:	b292      	uxth	r2, r2
 8019a0a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	8b5b      	ldrh	r3, [r3, #26]
 8019a10:	f043 0320 	orr.w	r3, r3, #32
 8019a14:	b29a      	uxth	r2, r3
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8019a1a:	2300      	movs	r3, #0
 8019a1c:	e004      	b.n	8019a28 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8019a1e:	2101      	movs	r1, #1
 8019a20:	6878      	ldr	r0, [r7, #4]
 8019a22:	f000 f80b 	bl	8019a3c <tcp_enqueue_flags>
 8019a26:	4603      	mov	r3, r0
}
 8019a28:	4618      	mov	r0, r3
 8019a2a:	3714      	adds	r7, #20
 8019a2c:	46bd      	mov	sp, r7
 8019a2e:	bd90      	pop	{r4, r7, pc}
 8019a30:	08024d38 	.word	0x08024d38
 8019a34:	08025140 	.word	0x08025140
 8019a38:	08024d8c 	.word	0x08024d8c

08019a3c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8019a3c:	b580      	push	{r7, lr}
 8019a3e:	b08a      	sub	sp, #40	@ 0x28
 8019a40:	af02      	add	r7, sp, #8
 8019a42:	6078      	str	r0, [r7, #4]
 8019a44:	460b      	mov	r3, r1
 8019a46:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8019a48:	2300      	movs	r3, #0
 8019a4a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8019a4c:	2300      	movs	r3, #0
 8019a4e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8019a50:	78fb      	ldrb	r3, [r7, #3]
 8019a52:	f003 0303 	and.w	r3, r3, #3
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d106      	bne.n	8019a68 <tcp_enqueue_flags+0x2c>
 8019a5a:	4b67      	ldr	r3, [pc, #412]	@ (8019bf8 <tcp_enqueue_flags+0x1bc>)
 8019a5c:	f240 4211 	movw	r2, #1041	@ 0x411
 8019a60:	4966      	ldr	r1, [pc, #408]	@ (8019bfc <tcp_enqueue_flags+0x1c0>)
 8019a62:	4867      	ldr	r0, [pc, #412]	@ (8019c00 <tcp_enqueue_flags+0x1c4>)
 8019a64:	f007 fca6 	bl	80213b4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d106      	bne.n	8019a7c <tcp_enqueue_flags+0x40>
 8019a6e:	4b62      	ldr	r3, [pc, #392]	@ (8019bf8 <tcp_enqueue_flags+0x1bc>)
 8019a70:	f240 4213 	movw	r2, #1043	@ 0x413
 8019a74:	4963      	ldr	r1, [pc, #396]	@ (8019c04 <tcp_enqueue_flags+0x1c8>)
 8019a76:	4862      	ldr	r0, [pc, #392]	@ (8019c00 <tcp_enqueue_flags+0x1c4>)
 8019a78:	f007 fc9c 	bl	80213b4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8019a7c:	78fb      	ldrb	r3, [r7, #3]
 8019a7e:	f003 0302 	and.w	r3, r3, #2
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	d001      	beq.n	8019a8a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8019a86:	2301      	movs	r3, #1
 8019a88:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019a8a:	7ffb      	ldrb	r3, [r7, #31]
 8019a8c:	009b      	lsls	r3, r3, #2
 8019a8e:	b2db      	uxtb	r3, r3
 8019a90:	f003 0304 	and.w	r3, r3, #4
 8019a94:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019a96:	7dfb      	ldrb	r3, [r7, #23]
 8019a98:	b29b      	uxth	r3, r3
 8019a9a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019a9e:	4619      	mov	r1, r3
 8019aa0:	2036      	movs	r0, #54	@ 0x36
 8019aa2:	f7fa f885 	bl	8013bb0 <pbuf_alloc>
 8019aa6:	6138      	str	r0, [r7, #16]
 8019aa8:	693b      	ldr	r3, [r7, #16]
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	d109      	bne.n	8019ac2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	8b5b      	ldrh	r3, [r3, #26]
 8019ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019ab6:	b29a      	uxth	r2, r3
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019abc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019ac0:	e095      	b.n	8019bee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8019ac2:	693b      	ldr	r3, [r7, #16]
 8019ac4:	895a      	ldrh	r2, [r3, #10]
 8019ac6:	7dfb      	ldrb	r3, [r7, #23]
 8019ac8:	b29b      	uxth	r3, r3
 8019aca:	429a      	cmp	r2, r3
 8019acc:	d206      	bcs.n	8019adc <tcp_enqueue_flags+0xa0>
 8019ace:	4b4a      	ldr	r3, [pc, #296]	@ (8019bf8 <tcp_enqueue_flags+0x1bc>)
 8019ad0:	f240 4239 	movw	r2, #1081	@ 0x439
 8019ad4:	494c      	ldr	r1, [pc, #304]	@ (8019c08 <tcp_enqueue_flags+0x1cc>)
 8019ad6:	484a      	ldr	r0, [pc, #296]	@ (8019c00 <tcp_enqueue_flags+0x1c4>)
 8019ad8:	f007 fc6c 	bl	80213b4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8019ae0:	78fa      	ldrb	r2, [r7, #3]
 8019ae2:	7ffb      	ldrb	r3, [r7, #31]
 8019ae4:	9300      	str	r3, [sp, #0]
 8019ae6:	460b      	mov	r3, r1
 8019ae8:	6939      	ldr	r1, [r7, #16]
 8019aea:	6878      	ldr	r0, [r7, #4]
 8019aec:	f7ff f91a 	bl	8018d24 <tcp_create_segment>
 8019af0:	60f8      	str	r0, [r7, #12]
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d109      	bne.n	8019b0c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	8b5b      	ldrh	r3, [r3, #26]
 8019afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019b00:	b29a      	uxth	r2, r3
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019b06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019b0a:	e070      	b.n	8019bee <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8019b0c:	68fb      	ldr	r3, [r7, #12]
 8019b0e:	68db      	ldr	r3, [r3, #12]
 8019b10:	f003 0303 	and.w	r3, r3, #3
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d006      	beq.n	8019b26 <tcp_enqueue_flags+0xea>
 8019b18:	4b37      	ldr	r3, [pc, #220]	@ (8019bf8 <tcp_enqueue_flags+0x1bc>)
 8019b1a:	f240 4242 	movw	r2, #1090	@ 0x442
 8019b1e:	493b      	ldr	r1, [pc, #236]	@ (8019c0c <tcp_enqueue_flags+0x1d0>)
 8019b20:	4837      	ldr	r0, [pc, #220]	@ (8019c00 <tcp_enqueue_flags+0x1c4>)
 8019b22:	f007 fc47 	bl	80213b4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8019b26:	68fb      	ldr	r3, [r7, #12]
 8019b28:	891b      	ldrh	r3, [r3, #8]
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d006      	beq.n	8019b3c <tcp_enqueue_flags+0x100>
 8019b2e:	4b32      	ldr	r3, [pc, #200]	@ (8019bf8 <tcp_enqueue_flags+0x1bc>)
 8019b30:	f240 4243 	movw	r2, #1091	@ 0x443
 8019b34:	4936      	ldr	r1, [pc, #216]	@ (8019c10 <tcp_enqueue_flags+0x1d4>)
 8019b36:	4832      	ldr	r0, [pc, #200]	@ (8019c00 <tcp_enqueue_flags+0x1c4>)
 8019b38:	f007 fc3c 	bl	80213b4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d103      	bne.n	8019b4c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	68fa      	ldr	r2, [r7, #12]
 8019b48:	66da      	str	r2, [r3, #108]	@ 0x6c
 8019b4a:	e00d      	b.n	8019b68 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019b50:	61bb      	str	r3, [r7, #24]
 8019b52:	e002      	b.n	8019b5a <tcp_enqueue_flags+0x11e>
 8019b54:	69bb      	ldr	r3, [r7, #24]
 8019b56:	681b      	ldr	r3, [r3, #0]
 8019b58:	61bb      	str	r3, [r7, #24]
 8019b5a:	69bb      	ldr	r3, [r7, #24]
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d1f8      	bne.n	8019b54 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8019b62:	69bb      	ldr	r3, [r7, #24]
 8019b64:	68fa      	ldr	r2, [r7, #12]
 8019b66:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	2200      	movs	r2, #0
 8019b6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8019b70:	78fb      	ldrb	r3, [r7, #3]
 8019b72:	f003 0302 	and.w	r3, r3, #2
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	d104      	bne.n	8019b84 <tcp_enqueue_flags+0x148>
 8019b7a:	78fb      	ldrb	r3, [r7, #3]
 8019b7c:	f003 0301 	and.w	r3, r3, #1
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d004      	beq.n	8019b8e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019b88:	1c5a      	adds	r2, r3, #1
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8019b8e:	78fb      	ldrb	r3, [r7, #3]
 8019b90:	f003 0301 	and.w	r3, r3, #1
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d006      	beq.n	8019ba6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	8b5b      	ldrh	r3, [r3, #26]
 8019b9c:	f043 0320 	orr.w	r3, r3, #32
 8019ba0:	b29a      	uxth	r2, r3
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	685b      	ldr	r3, [r3, #4]
 8019baa:	4618      	mov	r0, r3
 8019bac:	f7fa fb72 	bl	8014294 <pbuf_clen>
 8019bb0:	4603      	mov	r3, r0
 8019bb2:	461a      	mov	r2, r3
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019bba:	4413      	add	r3, r2
 8019bbc:	b29a      	uxth	r2, r3
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d00e      	beq.n	8019bec <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d10a      	bne.n	8019bec <tcp_enqueue_flags+0x1b0>
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d106      	bne.n	8019bec <tcp_enqueue_flags+0x1b0>
 8019bde:	4b06      	ldr	r3, [pc, #24]	@ (8019bf8 <tcp_enqueue_flags+0x1bc>)
 8019be0:	f240 4265 	movw	r2, #1125	@ 0x465
 8019be4:	490b      	ldr	r1, [pc, #44]	@ (8019c14 <tcp_enqueue_flags+0x1d8>)
 8019be6:	4806      	ldr	r0, [pc, #24]	@ (8019c00 <tcp_enqueue_flags+0x1c4>)
 8019be8:	f007 fbe4 	bl	80213b4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8019bec:	2300      	movs	r3, #0
}
 8019bee:	4618      	mov	r0, r3
 8019bf0:	3720      	adds	r7, #32
 8019bf2:	46bd      	mov	sp, r7
 8019bf4:	bd80      	pop	{r7, pc}
 8019bf6:	bf00      	nop
 8019bf8:	08024d38 	.word	0x08024d38
 8019bfc:	0802515c 	.word	0x0802515c
 8019c00:	08024d8c 	.word	0x08024d8c
 8019c04:	080251b4 	.word	0x080251b4
 8019c08:	080251d4 	.word	0x080251d4
 8019c0c:	08025210 	.word	0x08025210
 8019c10:	08025228 	.word	0x08025228
 8019c14:	08025254 	.word	0x08025254

08019c18 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8019c18:	b5b0      	push	{r4, r5, r7, lr}
 8019c1a:	b08a      	sub	sp, #40	@ 0x28
 8019c1c:	af00      	add	r7, sp, #0
 8019c1e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d106      	bne.n	8019c34 <tcp_output+0x1c>
 8019c26:	4b8a      	ldr	r3, [pc, #552]	@ (8019e50 <tcp_output+0x238>)
 8019c28:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8019c2c:	4989      	ldr	r1, [pc, #548]	@ (8019e54 <tcp_output+0x23c>)
 8019c2e:	488a      	ldr	r0, [pc, #552]	@ (8019e58 <tcp_output+0x240>)
 8019c30:	f007 fbc0 	bl	80213b4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	7d1b      	ldrb	r3, [r3, #20]
 8019c38:	2b01      	cmp	r3, #1
 8019c3a:	d106      	bne.n	8019c4a <tcp_output+0x32>
 8019c3c:	4b84      	ldr	r3, [pc, #528]	@ (8019e50 <tcp_output+0x238>)
 8019c3e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8019c42:	4986      	ldr	r1, [pc, #536]	@ (8019e5c <tcp_output+0x244>)
 8019c44:	4884      	ldr	r0, [pc, #528]	@ (8019e58 <tcp_output+0x240>)
 8019c46:	f007 fbb5 	bl	80213b4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8019c4a:	4b85      	ldr	r3, [pc, #532]	@ (8019e60 <tcp_output+0x248>)
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	687a      	ldr	r2, [r7, #4]
 8019c50:	429a      	cmp	r2, r3
 8019c52:	d101      	bne.n	8019c58 <tcp_output+0x40>
    return ERR_OK;
 8019c54:	2300      	movs	r3, #0
 8019c56:	e1ce      	b.n	8019ff6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019c64:	4293      	cmp	r3, r2
 8019c66:	bf28      	it	cs
 8019c68:	4613      	movcs	r3, r2
 8019c6a:	b29b      	uxth	r3, r3
 8019c6c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019c72:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8019c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	d10b      	bne.n	8019c92 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	8b5b      	ldrh	r3, [r3, #26]
 8019c7e:	f003 0302 	and.w	r3, r3, #2
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	f000 81aa 	beq.w	8019fdc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8019c88:	6878      	ldr	r0, [r7, #4]
 8019c8a:	f000 fdcb 	bl	801a824 <tcp_send_empty_ack>
 8019c8e:	4603      	mov	r3, r0
 8019c90:	e1b1      	b.n	8019ff6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8019c92:	6879      	ldr	r1, [r7, #4]
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	3304      	adds	r3, #4
 8019c98:	461a      	mov	r2, r3
 8019c9a:	6878      	ldr	r0, [r7, #4]
 8019c9c:	f7ff f826 	bl	8018cec <tcp_route>
 8019ca0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8019ca2:	697b      	ldr	r3, [r7, #20]
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	d102      	bne.n	8019cae <tcp_output+0x96>
    return ERR_RTE;
 8019ca8:	f06f 0303 	mvn.w	r3, #3
 8019cac:	e1a3      	b.n	8019ff6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d003      	beq.n	8019cbc <tcp_output+0xa4>
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d111      	bne.n	8019ce0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8019cbc:	697b      	ldr	r3, [r7, #20]
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	d002      	beq.n	8019cc8 <tcp_output+0xb0>
 8019cc2:	697b      	ldr	r3, [r7, #20]
 8019cc4:	3304      	adds	r3, #4
 8019cc6:	e000      	b.n	8019cca <tcp_output+0xb2>
 8019cc8:	2300      	movs	r3, #0
 8019cca:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8019ccc:	693b      	ldr	r3, [r7, #16]
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d102      	bne.n	8019cd8 <tcp_output+0xc0>
      return ERR_RTE;
 8019cd2:	f06f 0303 	mvn.w	r3, #3
 8019cd6:	e18e      	b.n	8019ff6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019cd8:	693b      	ldr	r3, [r7, #16]
 8019cda:	681a      	ldr	r2, [r3, #0]
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8019ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ce2:	68db      	ldr	r3, [r3, #12]
 8019ce4:	685b      	ldr	r3, [r3, #4]
 8019ce6:	4618      	mov	r0, r3
 8019ce8:	f7f8 fc9e 	bl	8012628 <lwip_htonl>
 8019cec:	4602      	mov	r2, r0
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019cf2:	1ad3      	subs	r3, r2, r3
 8019cf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019cf6:	8912      	ldrh	r2, [r2, #8]
 8019cf8:	4413      	add	r3, r2
 8019cfa:	69ba      	ldr	r2, [r7, #24]
 8019cfc:	429a      	cmp	r2, r3
 8019cfe:	d227      	bcs.n	8019d50 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8019d06:	461a      	mov	r2, r3
 8019d08:	69bb      	ldr	r3, [r7, #24]
 8019d0a:	4293      	cmp	r3, r2
 8019d0c:	d114      	bne.n	8019d38 <tcp_output+0x120>
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d110      	bne.n	8019d38 <tcp_output+0x120>
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8019d1c:	2b00      	cmp	r3, #0
 8019d1e:	d10b      	bne.n	8019d38 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	2200      	movs	r2, #0
 8019d24:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	2201      	movs	r2, #1
 8019d2c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	2200      	movs	r2, #0
 8019d34:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	8b5b      	ldrh	r3, [r3, #26]
 8019d3c:	f003 0302 	and.w	r3, r3, #2
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	f000 814d 	beq.w	8019fe0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8019d46:	6878      	ldr	r0, [r7, #4]
 8019d48:	f000 fd6c 	bl	801a824 <tcp_send_empty_ack>
 8019d4c:	4603      	mov	r3, r0
 8019d4e:	e152      	b.n	8019ff6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	2200      	movs	r2, #0
 8019d54:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019d5c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8019d5e:	6a3b      	ldr	r3, [r7, #32]
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	f000 811c 	beq.w	8019f9e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8019d66:	e002      	b.n	8019d6e <tcp_output+0x156>
 8019d68:	6a3b      	ldr	r3, [r7, #32]
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	623b      	str	r3, [r7, #32]
 8019d6e:	6a3b      	ldr	r3, [r7, #32]
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	d1f8      	bne.n	8019d68 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8019d76:	e112      	b.n	8019f9e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8019d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d7a:	68db      	ldr	r3, [r3, #12]
 8019d7c:	899b      	ldrh	r3, [r3, #12]
 8019d7e:	b29b      	uxth	r3, r3
 8019d80:	4618      	mov	r0, r3
 8019d82:	f7f8 fc3b 	bl	80125fc <lwip_htons>
 8019d86:	4603      	mov	r3, r0
 8019d88:	b2db      	uxtb	r3, r3
 8019d8a:	f003 0304 	and.w	r3, r3, #4
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d006      	beq.n	8019da0 <tcp_output+0x188>
 8019d92:	4b2f      	ldr	r3, [pc, #188]	@ (8019e50 <tcp_output+0x238>)
 8019d94:	f240 5236 	movw	r2, #1334	@ 0x536
 8019d98:	4932      	ldr	r1, [pc, #200]	@ (8019e64 <tcp_output+0x24c>)
 8019d9a:	482f      	ldr	r0, [pc, #188]	@ (8019e58 <tcp_output+0x240>)
 8019d9c:	f007 fb0a 	bl	80213b4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	d01f      	beq.n	8019de8 <tcp_output+0x1d0>
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	8b5b      	ldrh	r3, [r3, #26]
 8019dac:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	d119      	bne.n	8019de8 <tcp_output+0x1d0>
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d00b      	beq.n	8019dd4 <tcp_output+0x1bc>
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	2b00      	cmp	r3, #0
 8019dc4:	d110      	bne.n	8019de8 <tcp_output+0x1d0>
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019dca:	891a      	ldrh	r2, [r3, #8]
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019dd0:	429a      	cmp	r2, r3
 8019dd2:	d209      	bcs.n	8019de8 <tcp_output+0x1d0>
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d004      	beq.n	8019de8 <tcp_output+0x1d0>
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019de4:	2b08      	cmp	r3, #8
 8019de6:	d901      	bls.n	8019dec <tcp_output+0x1d4>
 8019de8:	2301      	movs	r3, #1
 8019dea:	e000      	b.n	8019dee <tcp_output+0x1d6>
 8019dec:	2300      	movs	r3, #0
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	d106      	bne.n	8019e00 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	8b5b      	ldrh	r3, [r3, #26]
 8019df6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019dfa:	2b00      	cmp	r3, #0
 8019dfc:	f000 80e4 	beq.w	8019fc8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	7d1b      	ldrb	r3, [r3, #20]
 8019e04:	2b02      	cmp	r3, #2
 8019e06:	d00d      	beq.n	8019e24 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8019e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e0a:	68db      	ldr	r3, [r3, #12]
 8019e0c:	899b      	ldrh	r3, [r3, #12]
 8019e0e:	b29c      	uxth	r4, r3
 8019e10:	2010      	movs	r0, #16
 8019e12:	f7f8 fbf3 	bl	80125fc <lwip_htons>
 8019e16:	4603      	mov	r3, r0
 8019e18:	461a      	mov	r2, r3
 8019e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e1c:	68db      	ldr	r3, [r3, #12]
 8019e1e:	4322      	orrs	r2, r4
 8019e20:	b292      	uxth	r2, r2
 8019e22:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8019e24:	697a      	ldr	r2, [r7, #20]
 8019e26:	6879      	ldr	r1, [r7, #4]
 8019e28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019e2a:	f000 f909 	bl	801a040 <tcp_output_segment>
 8019e2e:	4603      	mov	r3, r0
 8019e30:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8019e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d016      	beq.n	8019e68 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019e3a:	687b      	ldr	r3, [r7, #4]
 8019e3c:	8b5b      	ldrh	r3, [r3, #26]
 8019e3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019e42:	b29a      	uxth	r2, r3
 8019e44:	687b      	ldr	r3, [r7, #4]
 8019e46:	835a      	strh	r2, [r3, #26]
      return err;
 8019e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019e4c:	e0d3      	b.n	8019ff6 <tcp_output+0x3de>
 8019e4e:	bf00      	nop
 8019e50:	08024d38 	.word	0x08024d38
 8019e54:	0802527c 	.word	0x0802527c
 8019e58:	08024d8c 	.word	0x08024d8c
 8019e5c:	08025294 	.word	0x08025294
 8019e60:	20004c34 	.word	0x20004c34
 8019e64:	080252bc 	.word	0x080252bc
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8019e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e6a:	681a      	ldr	r2, [r3, #0]
 8019e6c:	687b      	ldr	r3, [r7, #4]
 8019e6e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	7d1b      	ldrb	r3, [r3, #20]
 8019e74:	2b02      	cmp	r3, #2
 8019e76:	d006      	beq.n	8019e86 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	8b5b      	ldrh	r3, [r3, #26]
 8019e7c:	f023 0303 	bic.w	r3, r3, #3
 8019e80:	b29a      	uxth	r2, r3
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e88:	68db      	ldr	r3, [r3, #12]
 8019e8a:	685b      	ldr	r3, [r3, #4]
 8019e8c:	4618      	mov	r0, r3
 8019e8e:	f7f8 fbcb 	bl	8012628 <lwip_htonl>
 8019e92:	4604      	mov	r4, r0
 8019e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e96:	891b      	ldrh	r3, [r3, #8]
 8019e98:	461d      	mov	r5, r3
 8019e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019e9c:	68db      	ldr	r3, [r3, #12]
 8019e9e:	899b      	ldrh	r3, [r3, #12]
 8019ea0:	b29b      	uxth	r3, r3
 8019ea2:	4618      	mov	r0, r3
 8019ea4:	f7f8 fbaa 	bl	80125fc <lwip_htons>
 8019ea8:	4603      	mov	r3, r0
 8019eaa:	b2db      	uxtb	r3, r3
 8019eac:	f003 0303 	and.w	r3, r3, #3
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	d001      	beq.n	8019eb8 <tcp_output+0x2a0>
 8019eb4:	2301      	movs	r3, #1
 8019eb6:	e000      	b.n	8019eba <tcp_output+0x2a2>
 8019eb8:	2300      	movs	r3, #0
 8019eba:	442b      	add	r3, r5
 8019ebc:	4423      	add	r3, r4
 8019ebe:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8019ec4:	68bb      	ldr	r3, [r7, #8]
 8019ec6:	1ad3      	subs	r3, r2, r3
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	da02      	bge.n	8019ed2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	68ba      	ldr	r2, [r7, #8]
 8019ed0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8019ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019ed4:	891b      	ldrh	r3, [r3, #8]
 8019ed6:	461c      	mov	r4, r3
 8019ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019eda:	68db      	ldr	r3, [r3, #12]
 8019edc:	899b      	ldrh	r3, [r3, #12]
 8019ede:	b29b      	uxth	r3, r3
 8019ee0:	4618      	mov	r0, r3
 8019ee2:	f7f8 fb8b 	bl	80125fc <lwip_htons>
 8019ee6:	4603      	mov	r3, r0
 8019ee8:	b2db      	uxtb	r3, r3
 8019eea:	f003 0303 	and.w	r3, r3, #3
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d001      	beq.n	8019ef6 <tcp_output+0x2de>
 8019ef2:	2301      	movs	r3, #1
 8019ef4:	e000      	b.n	8019ef8 <tcp_output+0x2e0>
 8019ef6:	2300      	movs	r3, #0
 8019ef8:	4423      	add	r3, r4
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d049      	beq.n	8019f92 <tcp_output+0x37a>
      seg->next = NULL;
 8019efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f00:	2200      	movs	r2, #0
 8019f02:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d105      	bne.n	8019f18 <tcp_output+0x300>
        pcb->unacked = seg;
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019f10:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8019f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f14:	623b      	str	r3, [r7, #32]
 8019f16:	e03f      	b.n	8019f98 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8019f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f1a:	68db      	ldr	r3, [r3, #12]
 8019f1c:	685b      	ldr	r3, [r3, #4]
 8019f1e:	4618      	mov	r0, r3
 8019f20:	f7f8 fb82 	bl	8012628 <lwip_htonl>
 8019f24:	4604      	mov	r4, r0
 8019f26:	6a3b      	ldr	r3, [r7, #32]
 8019f28:	68db      	ldr	r3, [r3, #12]
 8019f2a:	685b      	ldr	r3, [r3, #4]
 8019f2c:	4618      	mov	r0, r3
 8019f2e:	f7f8 fb7b 	bl	8012628 <lwip_htonl>
 8019f32:	4603      	mov	r3, r0
 8019f34:	1ae3      	subs	r3, r4, r3
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	da24      	bge.n	8019f84 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	3370      	adds	r3, #112	@ 0x70
 8019f3e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019f40:	e002      	b.n	8019f48 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8019f42:	69fb      	ldr	r3, [r7, #28]
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019f48:	69fb      	ldr	r3, [r7, #28]
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d011      	beq.n	8019f74 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019f50:	69fb      	ldr	r3, [r7, #28]
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	68db      	ldr	r3, [r3, #12]
 8019f56:	685b      	ldr	r3, [r3, #4]
 8019f58:	4618      	mov	r0, r3
 8019f5a:	f7f8 fb65 	bl	8012628 <lwip_htonl>
 8019f5e:	4604      	mov	r4, r0
 8019f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f62:	68db      	ldr	r3, [r3, #12]
 8019f64:	685b      	ldr	r3, [r3, #4]
 8019f66:	4618      	mov	r0, r3
 8019f68:	f7f8 fb5e 	bl	8012628 <lwip_htonl>
 8019f6c:	4603      	mov	r3, r0
 8019f6e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	dbe6      	blt.n	8019f42 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8019f74:	69fb      	ldr	r3, [r7, #28]
 8019f76:	681a      	ldr	r2, [r3, #0]
 8019f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f7a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8019f7c:	69fb      	ldr	r3, [r7, #28]
 8019f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019f80:	601a      	str	r2, [r3, #0]
 8019f82:	e009      	b.n	8019f98 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8019f84:	6a3b      	ldr	r3, [r7, #32]
 8019f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019f88:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8019f8a:	6a3b      	ldr	r3, [r7, #32]
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	623b      	str	r3, [r7, #32]
 8019f90:	e002      	b.n	8019f98 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8019f92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019f94:	f7fb ff01 	bl	8015d9a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019f9c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8019f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d012      	beq.n	8019fca <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8019fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fa6:	68db      	ldr	r3, [r3, #12]
 8019fa8:	685b      	ldr	r3, [r3, #4]
 8019faa:	4618      	mov	r0, r3
 8019fac:	f7f8 fb3c 	bl	8012628 <lwip_htonl>
 8019fb0:	4602      	mov	r2, r0
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019fb6:	1ad3      	subs	r3, r2, r3
 8019fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019fba:	8912      	ldrh	r2, [r2, #8]
 8019fbc:	4413      	add	r3, r2
  while (seg != NULL &&
 8019fbe:	69ba      	ldr	r2, [r7, #24]
 8019fc0:	429a      	cmp	r2, r3
 8019fc2:	f4bf aed9 	bcs.w	8019d78 <tcp_output+0x160>
 8019fc6:	e000      	b.n	8019fca <tcp_output+0x3b2>
      break;
 8019fc8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	d108      	bne.n	8019fe4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	2200      	movs	r2, #0
 8019fd6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8019fda:	e004      	b.n	8019fe6 <tcp_output+0x3ce>
    goto output_done;
 8019fdc:	bf00      	nop
 8019fde:	e002      	b.n	8019fe6 <tcp_output+0x3ce>
    goto output_done;
 8019fe0:	bf00      	nop
 8019fe2:	e000      	b.n	8019fe6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8019fe4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	8b5b      	ldrh	r3, [r3, #26]
 8019fea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019fee:	b29a      	uxth	r2, r3
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8019ff4:	2300      	movs	r3, #0
}
 8019ff6:	4618      	mov	r0, r3
 8019ff8:	3728      	adds	r7, #40	@ 0x28
 8019ffa:	46bd      	mov	sp, r7
 8019ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8019ffe:	bf00      	nop

0801a000 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801a000:	b580      	push	{r7, lr}
 801a002:	b082      	sub	sp, #8
 801a004:	af00      	add	r7, sp, #0
 801a006:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	2b00      	cmp	r3, #0
 801a00c:	d106      	bne.n	801a01c <tcp_output_segment_busy+0x1c>
 801a00e:	4b09      	ldr	r3, [pc, #36]	@ (801a034 <tcp_output_segment_busy+0x34>)
 801a010:	f240 529a 	movw	r2, #1434	@ 0x59a
 801a014:	4908      	ldr	r1, [pc, #32]	@ (801a038 <tcp_output_segment_busy+0x38>)
 801a016:	4809      	ldr	r0, [pc, #36]	@ (801a03c <tcp_output_segment_busy+0x3c>)
 801a018:	f007 f9cc 	bl	80213b4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	685b      	ldr	r3, [r3, #4]
 801a020:	7b9b      	ldrb	r3, [r3, #14]
 801a022:	2b01      	cmp	r3, #1
 801a024:	d001      	beq.n	801a02a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801a026:	2301      	movs	r3, #1
 801a028:	e000      	b.n	801a02c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801a02a:	2300      	movs	r3, #0
}
 801a02c:	4618      	mov	r0, r3
 801a02e:	3708      	adds	r7, #8
 801a030:	46bd      	mov	sp, r7
 801a032:	bd80      	pop	{r7, pc}
 801a034:	08024d38 	.word	0x08024d38
 801a038:	080252d4 	.word	0x080252d4
 801a03c:	08024d8c 	.word	0x08024d8c

0801a040 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801a040:	b5b0      	push	{r4, r5, r7, lr}
 801a042:	b08c      	sub	sp, #48	@ 0x30
 801a044:	af04      	add	r7, sp, #16
 801a046:	60f8      	str	r0, [r7, #12]
 801a048:	60b9      	str	r1, [r7, #8]
 801a04a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801a04c:	68fb      	ldr	r3, [r7, #12]
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d106      	bne.n	801a060 <tcp_output_segment+0x20>
 801a052:	4b64      	ldr	r3, [pc, #400]	@ (801a1e4 <tcp_output_segment+0x1a4>)
 801a054:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801a058:	4963      	ldr	r1, [pc, #396]	@ (801a1e8 <tcp_output_segment+0x1a8>)
 801a05a:	4864      	ldr	r0, [pc, #400]	@ (801a1ec <tcp_output_segment+0x1ac>)
 801a05c:	f007 f9aa 	bl	80213b4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801a060:	68bb      	ldr	r3, [r7, #8]
 801a062:	2b00      	cmp	r3, #0
 801a064:	d106      	bne.n	801a074 <tcp_output_segment+0x34>
 801a066:	4b5f      	ldr	r3, [pc, #380]	@ (801a1e4 <tcp_output_segment+0x1a4>)
 801a068:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801a06c:	4960      	ldr	r1, [pc, #384]	@ (801a1f0 <tcp_output_segment+0x1b0>)
 801a06e:	485f      	ldr	r0, [pc, #380]	@ (801a1ec <tcp_output_segment+0x1ac>)
 801a070:	f007 f9a0 	bl	80213b4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	2b00      	cmp	r3, #0
 801a078:	d106      	bne.n	801a088 <tcp_output_segment+0x48>
 801a07a:	4b5a      	ldr	r3, [pc, #360]	@ (801a1e4 <tcp_output_segment+0x1a4>)
 801a07c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801a080:	495c      	ldr	r1, [pc, #368]	@ (801a1f4 <tcp_output_segment+0x1b4>)
 801a082:	485a      	ldr	r0, [pc, #360]	@ (801a1ec <tcp_output_segment+0x1ac>)
 801a084:	f007 f996 	bl	80213b4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801a088:	68f8      	ldr	r0, [r7, #12]
 801a08a:	f7ff ffb9 	bl	801a000 <tcp_output_segment_busy>
 801a08e:	4603      	mov	r3, r0
 801a090:	2b00      	cmp	r3, #0
 801a092:	d001      	beq.n	801a098 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801a094:	2300      	movs	r3, #0
 801a096:	e0a1      	b.n	801a1dc <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801a098:	68bb      	ldr	r3, [r7, #8]
 801a09a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a09c:	68fb      	ldr	r3, [r7, #12]
 801a09e:	68dc      	ldr	r4, [r3, #12]
 801a0a0:	4610      	mov	r0, r2
 801a0a2:	f7f8 fac1 	bl	8012628 <lwip_htonl>
 801a0a6:	4603      	mov	r3, r0
 801a0a8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a0aa:	68bb      	ldr	r3, [r7, #8]
 801a0ac:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801a0ae:	68fb      	ldr	r3, [r7, #12]
 801a0b0:	68dc      	ldr	r4, [r3, #12]
 801a0b2:	4610      	mov	r0, r2
 801a0b4:	f7f8 faa2 	bl	80125fc <lwip_htons>
 801a0b8:	4603      	mov	r3, r0
 801a0ba:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a0bc:	68bb      	ldr	r3, [r7, #8]
 801a0be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a0c0:	68ba      	ldr	r2, [r7, #8]
 801a0c2:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801a0c4:	441a      	add	r2, r3
 801a0c6:	68bb      	ldr	r3, [r7, #8]
 801a0c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801a0ca:	68fb      	ldr	r3, [r7, #12]
 801a0cc:	68db      	ldr	r3, [r3, #12]
 801a0ce:	3314      	adds	r3, #20
 801a0d0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801a0d2:	68fb      	ldr	r3, [r7, #12]
 801a0d4:	7a9b      	ldrb	r3, [r3, #10]
 801a0d6:	f003 0301 	and.w	r3, r3, #1
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d015      	beq.n	801a10a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801a0de:	68bb      	ldr	r3, [r7, #8]
 801a0e0:	3304      	adds	r3, #4
 801a0e2:	461a      	mov	r2, r3
 801a0e4:	6879      	ldr	r1, [r7, #4]
 801a0e6:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801a0ea:	f7fc fa39 	bl	8016560 <tcp_eff_send_mss_netif>
 801a0ee:	4603      	mov	r3, r0
 801a0f0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801a0f2:	8b7b      	ldrh	r3, [r7, #26]
 801a0f4:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	f7f8 fa95 	bl	8012628 <lwip_htonl>
 801a0fe:	4602      	mov	r2, r0
 801a100:	69fb      	ldr	r3, [r7, #28]
 801a102:	601a      	str	r2, [r3, #0]
    opts += 1;
 801a104:	69fb      	ldr	r3, [r7, #28]
 801a106:	3304      	adds	r3, #4
 801a108:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801a10a:	68bb      	ldr	r3, [r7, #8]
 801a10c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801a110:	2b00      	cmp	r3, #0
 801a112:	da02      	bge.n	801a11a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801a114:	68bb      	ldr	r3, [r7, #8]
 801a116:	2200      	movs	r2, #0
 801a118:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801a11a:	68bb      	ldr	r3, [r7, #8]
 801a11c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a11e:	2b00      	cmp	r3, #0
 801a120:	d10c      	bne.n	801a13c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801a122:	4b35      	ldr	r3, [pc, #212]	@ (801a1f8 <tcp_output_segment+0x1b8>)
 801a124:	681a      	ldr	r2, [r3, #0]
 801a126:	68bb      	ldr	r3, [r7, #8]
 801a128:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801a12a:	68fb      	ldr	r3, [r7, #12]
 801a12c:	68db      	ldr	r3, [r3, #12]
 801a12e:	685b      	ldr	r3, [r3, #4]
 801a130:	4618      	mov	r0, r3
 801a132:	f7f8 fa79 	bl	8012628 <lwip_htonl>
 801a136:	4602      	mov	r2, r0
 801a138:	68bb      	ldr	r3, [r7, #8]
 801a13a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801a13c:	68fb      	ldr	r3, [r7, #12]
 801a13e:	68da      	ldr	r2, [r3, #12]
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	685b      	ldr	r3, [r3, #4]
 801a144:	685b      	ldr	r3, [r3, #4]
 801a146:	1ad3      	subs	r3, r2, r3
 801a148:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801a14a:	68fb      	ldr	r3, [r7, #12]
 801a14c:	685b      	ldr	r3, [r3, #4]
 801a14e:	8959      	ldrh	r1, [r3, #10]
 801a150:	68fb      	ldr	r3, [r7, #12]
 801a152:	685b      	ldr	r3, [r3, #4]
 801a154:	8b3a      	ldrh	r2, [r7, #24]
 801a156:	1a8a      	subs	r2, r1, r2
 801a158:	b292      	uxth	r2, r2
 801a15a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801a15c:	68fb      	ldr	r3, [r7, #12]
 801a15e:	685b      	ldr	r3, [r3, #4]
 801a160:	8919      	ldrh	r1, [r3, #8]
 801a162:	68fb      	ldr	r3, [r7, #12]
 801a164:	685b      	ldr	r3, [r3, #4]
 801a166:	8b3a      	ldrh	r2, [r7, #24]
 801a168:	1a8a      	subs	r2, r1, r2
 801a16a:	b292      	uxth	r2, r2
 801a16c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801a16e:	68fb      	ldr	r3, [r7, #12]
 801a170:	685b      	ldr	r3, [r3, #4]
 801a172:	68fa      	ldr	r2, [r7, #12]
 801a174:	68d2      	ldr	r2, [r2, #12]
 801a176:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801a178:	68fb      	ldr	r3, [r7, #12]
 801a17a:	68db      	ldr	r3, [r3, #12]
 801a17c:	2200      	movs	r2, #0
 801a17e:	741a      	strb	r2, [r3, #16]
 801a180:	2200      	movs	r2, #0
 801a182:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801a184:	68fb      	ldr	r3, [r7, #12]
 801a186:	68da      	ldr	r2, [r3, #12]
 801a188:	68fb      	ldr	r3, [r7, #12]
 801a18a:	7a9b      	ldrb	r3, [r3, #10]
 801a18c:	f003 0301 	and.w	r3, r3, #1
 801a190:	2b00      	cmp	r3, #0
 801a192:	d001      	beq.n	801a198 <tcp_output_segment+0x158>
 801a194:	2318      	movs	r3, #24
 801a196:	e000      	b.n	801a19a <tcp_output_segment+0x15a>
 801a198:	2314      	movs	r3, #20
 801a19a:	4413      	add	r3, r2
 801a19c:	69fa      	ldr	r2, [r7, #28]
 801a19e:	429a      	cmp	r2, r3
 801a1a0:	d006      	beq.n	801a1b0 <tcp_output_segment+0x170>
 801a1a2:	4b10      	ldr	r3, [pc, #64]	@ (801a1e4 <tcp_output_segment+0x1a4>)
 801a1a4:	f240 621c 	movw	r2, #1564	@ 0x61c
 801a1a8:	4914      	ldr	r1, [pc, #80]	@ (801a1fc <tcp_output_segment+0x1bc>)
 801a1aa:	4810      	ldr	r0, [pc, #64]	@ (801a1ec <tcp_output_segment+0x1ac>)
 801a1ac:	f007 f902 	bl	80213b4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801a1b0:	68fb      	ldr	r3, [r7, #12]
 801a1b2:	6858      	ldr	r0, [r3, #4]
 801a1b4:	68b9      	ldr	r1, [r7, #8]
 801a1b6:	68bb      	ldr	r3, [r7, #8]
 801a1b8:	1d1c      	adds	r4, r3, #4
 801a1ba:	68bb      	ldr	r3, [r7, #8]
 801a1bc:	7add      	ldrb	r5, [r3, #11]
 801a1be:	68bb      	ldr	r3, [r7, #8]
 801a1c0:	7a9b      	ldrb	r3, [r3, #10]
 801a1c2:	687a      	ldr	r2, [r7, #4]
 801a1c4:	9202      	str	r2, [sp, #8]
 801a1c6:	2206      	movs	r2, #6
 801a1c8:	9201      	str	r2, [sp, #4]
 801a1ca:	9300      	str	r3, [sp, #0]
 801a1cc:	462b      	mov	r3, r5
 801a1ce:	4622      	mov	r2, r4
 801a1d0:	f004 ffe2 	bl	801f198 <ip4_output_if>
 801a1d4:	4603      	mov	r3, r0
 801a1d6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801a1d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a1dc:	4618      	mov	r0, r3
 801a1de:	3720      	adds	r7, #32
 801a1e0:	46bd      	mov	sp, r7
 801a1e2:	bdb0      	pop	{r4, r5, r7, pc}
 801a1e4:	08024d38 	.word	0x08024d38
 801a1e8:	080252fc 	.word	0x080252fc
 801a1ec:	08024d8c 	.word	0x08024d8c
 801a1f0:	0802531c 	.word	0x0802531c
 801a1f4:	0802533c 	.word	0x0802533c
 801a1f8:	20004be8 	.word	0x20004be8
 801a1fc:	08025360 	.word	0x08025360

0801a200 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801a200:	b5b0      	push	{r4, r5, r7, lr}
 801a202:	b084      	sub	sp, #16
 801a204:	af00      	add	r7, sp, #0
 801a206:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	d106      	bne.n	801a21c <tcp_rexmit_rto_prepare+0x1c>
 801a20e:	4b31      	ldr	r3, [pc, #196]	@ (801a2d4 <tcp_rexmit_rto_prepare+0xd4>)
 801a210:	f240 6263 	movw	r2, #1635	@ 0x663
 801a214:	4930      	ldr	r1, [pc, #192]	@ (801a2d8 <tcp_rexmit_rto_prepare+0xd8>)
 801a216:	4831      	ldr	r0, [pc, #196]	@ (801a2dc <tcp_rexmit_rto_prepare+0xdc>)
 801a218:	f007 f8cc 	bl	80213b4 <iprintf>

  if (pcb->unacked == NULL) {
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a220:	2b00      	cmp	r3, #0
 801a222:	d102      	bne.n	801a22a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801a224:	f06f 0305 	mvn.w	r3, #5
 801a228:	e050      	b.n	801a2cc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a22e:	60fb      	str	r3, [r7, #12]
 801a230:	e00b      	b.n	801a24a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801a232:	68f8      	ldr	r0, [r7, #12]
 801a234:	f7ff fee4 	bl	801a000 <tcp_output_segment_busy>
 801a238:	4603      	mov	r3, r0
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	d002      	beq.n	801a244 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801a23e:	f06f 0305 	mvn.w	r3, #5
 801a242:	e043      	b.n	801a2cc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a244:	68fb      	ldr	r3, [r7, #12]
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	60fb      	str	r3, [r7, #12]
 801a24a:	68fb      	ldr	r3, [r7, #12]
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	2b00      	cmp	r3, #0
 801a250:	d1ef      	bne.n	801a232 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801a252:	68f8      	ldr	r0, [r7, #12]
 801a254:	f7ff fed4 	bl	801a000 <tcp_output_segment_busy>
 801a258:	4603      	mov	r3, r0
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d002      	beq.n	801a264 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801a25e:	f06f 0305 	mvn.w	r3, #5
 801a262:	e033      	b.n	801a2cc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801a268:	68fb      	ldr	r3, [r7, #12]
 801a26a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	2200      	movs	r2, #0
 801a278:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	8b5b      	ldrh	r3, [r3, #26]
 801a27e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801a282:	b29a      	uxth	r2, r3
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a288:	68fb      	ldr	r3, [r7, #12]
 801a28a:	68db      	ldr	r3, [r3, #12]
 801a28c:	685b      	ldr	r3, [r3, #4]
 801a28e:	4618      	mov	r0, r3
 801a290:	f7f8 f9ca 	bl	8012628 <lwip_htonl>
 801a294:	4604      	mov	r4, r0
 801a296:	68fb      	ldr	r3, [r7, #12]
 801a298:	891b      	ldrh	r3, [r3, #8]
 801a29a:	461d      	mov	r5, r3
 801a29c:	68fb      	ldr	r3, [r7, #12]
 801a29e:	68db      	ldr	r3, [r3, #12]
 801a2a0:	899b      	ldrh	r3, [r3, #12]
 801a2a2:	b29b      	uxth	r3, r3
 801a2a4:	4618      	mov	r0, r3
 801a2a6:	f7f8 f9a9 	bl	80125fc <lwip_htons>
 801a2aa:	4603      	mov	r3, r0
 801a2ac:	b2db      	uxtb	r3, r3
 801a2ae:	f003 0303 	and.w	r3, r3, #3
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	d001      	beq.n	801a2ba <tcp_rexmit_rto_prepare+0xba>
 801a2b6:	2301      	movs	r3, #1
 801a2b8:	e000      	b.n	801a2bc <tcp_rexmit_rto_prepare+0xbc>
 801a2ba:	2300      	movs	r3, #0
 801a2bc:	442b      	add	r3, r5
 801a2be:	18e2      	adds	r2, r4, r3
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	2200      	movs	r2, #0
 801a2c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801a2ca:	2300      	movs	r3, #0
}
 801a2cc:	4618      	mov	r0, r3
 801a2ce:	3710      	adds	r7, #16
 801a2d0:	46bd      	mov	sp, r7
 801a2d2:	bdb0      	pop	{r4, r5, r7, pc}
 801a2d4:	08024d38 	.word	0x08024d38
 801a2d8:	08025374 	.word	0x08025374
 801a2dc:	08024d8c 	.word	0x08024d8c

0801a2e0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801a2e0:	b580      	push	{r7, lr}
 801a2e2:	b082      	sub	sp, #8
 801a2e4:	af00      	add	r7, sp, #0
 801a2e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d106      	bne.n	801a2fc <tcp_rexmit_rto_commit+0x1c>
 801a2ee:	4b0d      	ldr	r3, [pc, #52]	@ (801a324 <tcp_rexmit_rto_commit+0x44>)
 801a2f0:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801a2f4:	490c      	ldr	r1, [pc, #48]	@ (801a328 <tcp_rexmit_rto_commit+0x48>)
 801a2f6:	480d      	ldr	r0, [pc, #52]	@ (801a32c <tcp_rexmit_rto_commit+0x4c>)
 801a2f8:	f007 f85c 	bl	80213b4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801a302:	2bff      	cmp	r3, #255	@ 0xff
 801a304:	d007      	beq.n	801a316 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801a30c:	3301      	adds	r3, #1
 801a30e:	b2da      	uxtb	r2, r3
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801a316:	6878      	ldr	r0, [r7, #4]
 801a318:	f7ff fc7e 	bl	8019c18 <tcp_output>
}
 801a31c:	bf00      	nop
 801a31e:	3708      	adds	r7, #8
 801a320:	46bd      	mov	sp, r7
 801a322:	bd80      	pop	{r7, pc}
 801a324:	08024d38 	.word	0x08024d38
 801a328:	08025398 	.word	0x08025398
 801a32c:	08024d8c 	.word	0x08024d8c

0801a330 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801a330:	b580      	push	{r7, lr}
 801a332:	b082      	sub	sp, #8
 801a334:	af00      	add	r7, sp, #0
 801a336:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	d106      	bne.n	801a34c <tcp_rexmit_rto+0x1c>
 801a33e:	4b0a      	ldr	r3, [pc, #40]	@ (801a368 <tcp_rexmit_rto+0x38>)
 801a340:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801a344:	4909      	ldr	r1, [pc, #36]	@ (801a36c <tcp_rexmit_rto+0x3c>)
 801a346:	480a      	ldr	r0, [pc, #40]	@ (801a370 <tcp_rexmit_rto+0x40>)
 801a348:	f007 f834 	bl	80213b4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801a34c:	6878      	ldr	r0, [r7, #4]
 801a34e:	f7ff ff57 	bl	801a200 <tcp_rexmit_rto_prepare>
 801a352:	4603      	mov	r3, r0
 801a354:	2b00      	cmp	r3, #0
 801a356:	d102      	bne.n	801a35e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801a358:	6878      	ldr	r0, [r7, #4]
 801a35a:	f7ff ffc1 	bl	801a2e0 <tcp_rexmit_rto_commit>
  }
}
 801a35e:	bf00      	nop
 801a360:	3708      	adds	r7, #8
 801a362:	46bd      	mov	sp, r7
 801a364:	bd80      	pop	{r7, pc}
 801a366:	bf00      	nop
 801a368:	08024d38 	.word	0x08024d38
 801a36c:	080253bc 	.word	0x080253bc
 801a370:	08024d8c 	.word	0x08024d8c

0801a374 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801a374:	b590      	push	{r4, r7, lr}
 801a376:	b085      	sub	sp, #20
 801a378:	af00      	add	r7, sp, #0
 801a37a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	2b00      	cmp	r3, #0
 801a380:	d106      	bne.n	801a390 <tcp_rexmit+0x1c>
 801a382:	4b2f      	ldr	r3, [pc, #188]	@ (801a440 <tcp_rexmit+0xcc>)
 801a384:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801a388:	492e      	ldr	r1, [pc, #184]	@ (801a444 <tcp_rexmit+0xd0>)
 801a38a:	482f      	ldr	r0, [pc, #188]	@ (801a448 <tcp_rexmit+0xd4>)
 801a38c:	f007 f812 	bl	80213b4 <iprintf>

  if (pcb->unacked == NULL) {
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a394:	2b00      	cmp	r3, #0
 801a396:	d102      	bne.n	801a39e <tcp_rexmit+0x2a>
    return ERR_VAL;
 801a398:	f06f 0305 	mvn.w	r3, #5
 801a39c:	e04c      	b.n	801a438 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a3a2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801a3a4:	68b8      	ldr	r0, [r7, #8]
 801a3a6:	f7ff fe2b 	bl	801a000 <tcp_output_segment_busy>
 801a3aa:	4603      	mov	r3, r0
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	d002      	beq.n	801a3b6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801a3b0:	f06f 0305 	mvn.w	r3, #5
 801a3b4:	e040      	b.n	801a438 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801a3b6:	68bb      	ldr	r3, [r7, #8]
 801a3b8:	681a      	ldr	r2, [r3, #0]
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	336c      	adds	r3, #108	@ 0x6c
 801a3c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a3c4:	e002      	b.n	801a3cc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801a3c6:	68fb      	ldr	r3, [r7, #12]
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a3cc:	68fb      	ldr	r3, [r7, #12]
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	2b00      	cmp	r3, #0
 801a3d2:	d011      	beq.n	801a3f8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a3d4:	68fb      	ldr	r3, [r7, #12]
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	68db      	ldr	r3, [r3, #12]
 801a3da:	685b      	ldr	r3, [r3, #4]
 801a3dc:	4618      	mov	r0, r3
 801a3de:	f7f8 f923 	bl	8012628 <lwip_htonl>
 801a3e2:	4604      	mov	r4, r0
 801a3e4:	68bb      	ldr	r3, [r7, #8]
 801a3e6:	68db      	ldr	r3, [r3, #12]
 801a3e8:	685b      	ldr	r3, [r3, #4]
 801a3ea:	4618      	mov	r0, r3
 801a3ec:	f7f8 f91c 	bl	8012628 <lwip_htonl>
 801a3f0:	4603      	mov	r3, r0
 801a3f2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	dbe6      	blt.n	801a3c6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801a3f8:	68fb      	ldr	r3, [r7, #12]
 801a3fa:	681a      	ldr	r2, [r3, #0]
 801a3fc:	68bb      	ldr	r3, [r7, #8]
 801a3fe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801a400:	68fb      	ldr	r3, [r7, #12]
 801a402:	68ba      	ldr	r2, [r7, #8]
 801a404:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801a406:	68bb      	ldr	r3, [r7, #8]
 801a408:	681b      	ldr	r3, [r3, #0]
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	d103      	bne.n	801a416 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	2200      	movs	r2, #0
 801a412:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801a41c:	2bff      	cmp	r3, #255	@ 0xff
 801a41e:	d007      	beq.n	801a430 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801a426:	3301      	adds	r3, #1
 801a428:	b2da      	uxtb	r2, r3
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	2200      	movs	r2, #0
 801a434:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801a436:	2300      	movs	r3, #0
}
 801a438:	4618      	mov	r0, r3
 801a43a:	3714      	adds	r7, #20
 801a43c:	46bd      	mov	sp, r7
 801a43e:	bd90      	pop	{r4, r7, pc}
 801a440:	08024d38 	.word	0x08024d38
 801a444:	080253d8 	.word	0x080253d8
 801a448:	08024d8c 	.word	0x08024d8c

0801a44c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801a44c:	b580      	push	{r7, lr}
 801a44e:	b082      	sub	sp, #8
 801a450:	af00      	add	r7, sp, #0
 801a452:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	2b00      	cmp	r3, #0
 801a458:	d106      	bne.n	801a468 <tcp_rexmit_fast+0x1c>
 801a45a:	4b2a      	ldr	r3, [pc, #168]	@ (801a504 <tcp_rexmit_fast+0xb8>)
 801a45c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801a460:	4929      	ldr	r1, [pc, #164]	@ (801a508 <tcp_rexmit_fast+0xbc>)
 801a462:	482a      	ldr	r0, [pc, #168]	@ (801a50c <tcp_rexmit_fast+0xc0>)
 801a464:	f006 ffa6 	bl	80213b4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	d045      	beq.n	801a4fc <tcp_rexmit_fast+0xb0>
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	8b5b      	ldrh	r3, [r3, #26]
 801a474:	f003 0304 	and.w	r3, r3, #4
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d13f      	bne.n	801a4fc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801a47c:	6878      	ldr	r0, [r7, #4]
 801a47e:	f7ff ff79 	bl	801a374 <tcp_rexmit>
 801a482:	4603      	mov	r3, r0
 801a484:	2b00      	cmp	r3, #0
 801a486:	d139      	bne.n	801a4fc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801a494:	4293      	cmp	r3, r2
 801a496:	bf28      	it	cs
 801a498:	4613      	movcs	r3, r2
 801a49a:	b29b      	uxth	r3, r3
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	da00      	bge.n	801a4a2 <tcp_rexmit_fast+0x56>
 801a4a0:	3301      	adds	r3, #1
 801a4a2:	105b      	asrs	r3, r3, #1
 801a4a4:	b29a      	uxth	r2, r3
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801a4ac:	687b      	ldr	r3, [r7, #4]
 801a4ae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801a4b2:	461a      	mov	r2, r3
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a4b8:	005b      	lsls	r3, r3, #1
 801a4ba:	429a      	cmp	r2, r3
 801a4bc:	d206      	bcs.n	801a4cc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801a4be:	687b      	ldr	r3, [r7, #4]
 801a4c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a4c2:	005b      	lsls	r3, r3, #1
 801a4c4:	b29a      	uxth	r2, r3
 801a4c6:	687b      	ldr	r3, [r7, #4]
 801a4c8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801a4d2:	687b      	ldr	r3, [r7, #4]
 801a4d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a4d6:	4619      	mov	r1, r3
 801a4d8:	0049      	lsls	r1, r1, #1
 801a4da:	440b      	add	r3, r1
 801a4dc:	b29b      	uxth	r3, r3
 801a4de:	4413      	add	r3, r2
 801a4e0:	b29a      	uxth	r2, r3
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	8b5b      	ldrh	r3, [r3, #26]
 801a4ec:	f043 0304 	orr.w	r3, r3, #4
 801a4f0:	b29a      	uxth	r2, r3
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	2200      	movs	r2, #0
 801a4fa:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801a4fc:	bf00      	nop
 801a4fe:	3708      	adds	r7, #8
 801a500:	46bd      	mov	sp, r7
 801a502:	bd80      	pop	{r7, pc}
 801a504:	08024d38 	.word	0x08024d38
 801a508:	080253f0 	.word	0x080253f0
 801a50c:	08024d8c 	.word	0x08024d8c

0801a510 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801a510:	b580      	push	{r7, lr}
 801a512:	b086      	sub	sp, #24
 801a514:	af00      	add	r7, sp, #0
 801a516:	60f8      	str	r0, [r7, #12]
 801a518:	607b      	str	r3, [r7, #4]
 801a51a:	460b      	mov	r3, r1
 801a51c:	817b      	strh	r3, [r7, #10]
 801a51e:	4613      	mov	r3, r2
 801a520:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a522:	897a      	ldrh	r2, [r7, #10]
 801a524:	893b      	ldrh	r3, [r7, #8]
 801a526:	4413      	add	r3, r2
 801a528:	b29b      	uxth	r3, r3
 801a52a:	3314      	adds	r3, #20
 801a52c:	b29b      	uxth	r3, r3
 801a52e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a532:	4619      	mov	r1, r3
 801a534:	2022      	movs	r0, #34	@ 0x22
 801a536:	f7f9 fb3b 	bl	8013bb0 <pbuf_alloc>
 801a53a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801a53c:	697b      	ldr	r3, [r7, #20]
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d04d      	beq.n	801a5de <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a542:	897b      	ldrh	r3, [r7, #10]
 801a544:	3313      	adds	r3, #19
 801a546:	697a      	ldr	r2, [r7, #20]
 801a548:	8952      	ldrh	r2, [r2, #10]
 801a54a:	4293      	cmp	r3, r2
 801a54c:	db06      	blt.n	801a55c <tcp_output_alloc_header_common+0x4c>
 801a54e:	4b26      	ldr	r3, [pc, #152]	@ (801a5e8 <tcp_output_alloc_header_common+0xd8>)
 801a550:	f240 7223 	movw	r2, #1827	@ 0x723
 801a554:	4925      	ldr	r1, [pc, #148]	@ (801a5ec <tcp_output_alloc_header_common+0xdc>)
 801a556:	4826      	ldr	r0, [pc, #152]	@ (801a5f0 <tcp_output_alloc_header_common+0xe0>)
 801a558:	f006 ff2c 	bl	80213b4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801a55c:	697b      	ldr	r3, [r7, #20]
 801a55e:	685b      	ldr	r3, [r3, #4]
 801a560:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801a562:	8c3b      	ldrh	r3, [r7, #32]
 801a564:	4618      	mov	r0, r3
 801a566:	f7f8 f849 	bl	80125fc <lwip_htons>
 801a56a:	4603      	mov	r3, r0
 801a56c:	461a      	mov	r2, r3
 801a56e:	693b      	ldr	r3, [r7, #16]
 801a570:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801a572:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a574:	4618      	mov	r0, r3
 801a576:	f7f8 f841 	bl	80125fc <lwip_htons>
 801a57a:	4603      	mov	r3, r0
 801a57c:	461a      	mov	r2, r3
 801a57e:	693b      	ldr	r3, [r7, #16]
 801a580:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801a582:	693b      	ldr	r3, [r7, #16]
 801a584:	687a      	ldr	r2, [r7, #4]
 801a586:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801a588:	68f8      	ldr	r0, [r7, #12]
 801a58a:	f7f8 f84d 	bl	8012628 <lwip_htonl>
 801a58e:	4602      	mov	r2, r0
 801a590:	693b      	ldr	r3, [r7, #16]
 801a592:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801a594:	897b      	ldrh	r3, [r7, #10]
 801a596:	089b      	lsrs	r3, r3, #2
 801a598:	b29b      	uxth	r3, r3
 801a59a:	3305      	adds	r3, #5
 801a59c:	b29b      	uxth	r3, r3
 801a59e:	031b      	lsls	r3, r3, #12
 801a5a0:	b29a      	uxth	r2, r3
 801a5a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801a5a6:	b29b      	uxth	r3, r3
 801a5a8:	4313      	orrs	r3, r2
 801a5aa:	b29b      	uxth	r3, r3
 801a5ac:	4618      	mov	r0, r3
 801a5ae:	f7f8 f825 	bl	80125fc <lwip_htons>
 801a5b2:	4603      	mov	r3, r0
 801a5b4:	461a      	mov	r2, r3
 801a5b6:	693b      	ldr	r3, [r7, #16]
 801a5b8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801a5ba:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801a5bc:	4618      	mov	r0, r3
 801a5be:	f7f8 f81d 	bl	80125fc <lwip_htons>
 801a5c2:	4603      	mov	r3, r0
 801a5c4:	461a      	mov	r2, r3
 801a5c6:	693b      	ldr	r3, [r7, #16]
 801a5c8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801a5ca:	693b      	ldr	r3, [r7, #16]
 801a5cc:	2200      	movs	r2, #0
 801a5ce:	741a      	strb	r2, [r3, #16]
 801a5d0:	2200      	movs	r2, #0
 801a5d2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801a5d4:	693b      	ldr	r3, [r7, #16]
 801a5d6:	2200      	movs	r2, #0
 801a5d8:	749a      	strb	r2, [r3, #18]
 801a5da:	2200      	movs	r2, #0
 801a5dc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801a5de:	697b      	ldr	r3, [r7, #20]
}
 801a5e0:	4618      	mov	r0, r3
 801a5e2:	3718      	adds	r7, #24
 801a5e4:	46bd      	mov	sp, r7
 801a5e6:	bd80      	pop	{r7, pc}
 801a5e8:	08024d38 	.word	0x08024d38
 801a5ec:	08025410 	.word	0x08025410
 801a5f0:	08024d8c 	.word	0x08024d8c

0801a5f4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801a5f4:	b5b0      	push	{r4, r5, r7, lr}
 801a5f6:	b08a      	sub	sp, #40	@ 0x28
 801a5f8:	af04      	add	r7, sp, #16
 801a5fa:	60f8      	str	r0, [r7, #12]
 801a5fc:	607b      	str	r3, [r7, #4]
 801a5fe:	460b      	mov	r3, r1
 801a600:	817b      	strh	r3, [r7, #10]
 801a602:	4613      	mov	r3, r2
 801a604:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801a606:	68fb      	ldr	r3, [r7, #12]
 801a608:	2b00      	cmp	r3, #0
 801a60a:	d106      	bne.n	801a61a <tcp_output_alloc_header+0x26>
 801a60c:	4b15      	ldr	r3, [pc, #84]	@ (801a664 <tcp_output_alloc_header+0x70>)
 801a60e:	f240 7242 	movw	r2, #1858	@ 0x742
 801a612:	4915      	ldr	r1, [pc, #84]	@ (801a668 <tcp_output_alloc_header+0x74>)
 801a614:	4815      	ldr	r0, [pc, #84]	@ (801a66c <tcp_output_alloc_header+0x78>)
 801a616:	f006 fecd 	bl	80213b4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801a61a:	68fb      	ldr	r3, [r7, #12]
 801a61c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801a61e:	68fb      	ldr	r3, [r7, #12]
 801a620:	8adb      	ldrh	r3, [r3, #22]
 801a622:	68fa      	ldr	r2, [r7, #12]
 801a624:	8b12      	ldrh	r2, [r2, #24]
 801a626:	68f9      	ldr	r1, [r7, #12]
 801a628:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801a62a:	893d      	ldrh	r5, [r7, #8]
 801a62c:	897c      	ldrh	r4, [r7, #10]
 801a62e:	9103      	str	r1, [sp, #12]
 801a630:	2110      	movs	r1, #16
 801a632:	9102      	str	r1, [sp, #8]
 801a634:	9201      	str	r2, [sp, #4]
 801a636:	9300      	str	r3, [sp, #0]
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	462a      	mov	r2, r5
 801a63c:	4621      	mov	r1, r4
 801a63e:	f7ff ff67 	bl	801a510 <tcp_output_alloc_header_common>
 801a642:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801a644:	697b      	ldr	r3, [r7, #20]
 801a646:	2b00      	cmp	r3, #0
 801a648:	d006      	beq.n	801a658 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a64a:	68fb      	ldr	r3, [r7, #12]
 801a64c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a64e:	68fa      	ldr	r2, [r7, #12]
 801a650:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801a652:	441a      	add	r2, r3
 801a654:	68fb      	ldr	r3, [r7, #12]
 801a656:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801a658:	697b      	ldr	r3, [r7, #20]
}
 801a65a:	4618      	mov	r0, r3
 801a65c:	3718      	adds	r7, #24
 801a65e:	46bd      	mov	sp, r7
 801a660:	bdb0      	pop	{r4, r5, r7, pc}
 801a662:	bf00      	nop
 801a664:	08024d38 	.word	0x08024d38
 801a668:	08025440 	.word	0x08025440
 801a66c:	08024d8c 	.word	0x08024d8c

0801a670 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801a670:	b580      	push	{r7, lr}
 801a672:	b088      	sub	sp, #32
 801a674:	af00      	add	r7, sp, #0
 801a676:	60f8      	str	r0, [r7, #12]
 801a678:	60b9      	str	r1, [r7, #8]
 801a67a:	4611      	mov	r1, r2
 801a67c:	461a      	mov	r2, r3
 801a67e:	460b      	mov	r3, r1
 801a680:	71fb      	strb	r3, [r7, #7]
 801a682:	4613      	mov	r3, r2
 801a684:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801a686:	2300      	movs	r3, #0
 801a688:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801a68a:	68bb      	ldr	r3, [r7, #8]
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d106      	bne.n	801a69e <tcp_output_fill_options+0x2e>
 801a690:	4b12      	ldr	r3, [pc, #72]	@ (801a6dc <tcp_output_fill_options+0x6c>)
 801a692:	f240 7256 	movw	r2, #1878	@ 0x756
 801a696:	4912      	ldr	r1, [pc, #72]	@ (801a6e0 <tcp_output_fill_options+0x70>)
 801a698:	4812      	ldr	r0, [pc, #72]	@ (801a6e4 <tcp_output_fill_options+0x74>)
 801a69a:	f006 fe8b 	bl	80213b4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801a69e:	68bb      	ldr	r3, [r7, #8]
 801a6a0:	685b      	ldr	r3, [r3, #4]
 801a6a2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801a6a4:	69bb      	ldr	r3, [r7, #24]
 801a6a6:	3314      	adds	r3, #20
 801a6a8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801a6aa:	8bfb      	ldrh	r3, [r7, #30]
 801a6ac:	009b      	lsls	r3, r3, #2
 801a6ae:	461a      	mov	r2, r3
 801a6b0:	79fb      	ldrb	r3, [r7, #7]
 801a6b2:	009b      	lsls	r3, r3, #2
 801a6b4:	f003 0304 	and.w	r3, r3, #4
 801a6b8:	4413      	add	r3, r2
 801a6ba:	3314      	adds	r3, #20
 801a6bc:	69ba      	ldr	r2, [r7, #24]
 801a6be:	4413      	add	r3, r2
 801a6c0:	697a      	ldr	r2, [r7, #20]
 801a6c2:	429a      	cmp	r2, r3
 801a6c4:	d006      	beq.n	801a6d4 <tcp_output_fill_options+0x64>
 801a6c6:	4b05      	ldr	r3, [pc, #20]	@ (801a6dc <tcp_output_fill_options+0x6c>)
 801a6c8:	f240 7275 	movw	r2, #1909	@ 0x775
 801a6cc:	4906      	ldr	r1, [pc, #24]	@ (801a6e8 <tcp_output_fill_options+0x78>)
 801a6ce:	4805      	ldr	r0, [pc, #20]	@ (801a6e4 <tcp_output_fill_options+0x74>)
 801a6d0:	f006 fe70 	bl	80213b4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801a6d4:	bf00      	nop
 801a6d6:	3720      	adds	r7, #32
 801a6d8:	46bd      	mov	sp, r7
 801a6da:	bd80      	pop	{r7, pc}
 801a6dc:	08024d38 	.word	0x08024d38
 801a6e0:	08025468 	.word	0x08025468
 801a6e4:	08024d8c 	.word	0x08024d8c
 801a6e8:	08025360 	.word	0x08025360

0801a6ec <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801a6ec:	b580      	push	{r7, lr}
 801a6ee:	b08a      	sub	sp, #40	@ 0x28
 801a6f0:	af04      	add	r7, sp, #16
 801a6f2:	60f8      	str	r0, [r7, #12]
 801a6f4:	60b9      	str	r1, [r7, #8]
 801a6f6:	607a      	str	r2, [r7, #4]
 801a6f8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801a6fa:	68bb      	ldr	r3, [r7, #8]
 801a6fc:	2b00      	cmp	r3, #0
 801a6fe:	d106      	bne.n	801a70e <tcp_output_control_segment+0x22>
 801a700:	4b1c      	ldr	r3, [pc, #112]	@ (801a774 <tcp_output_control_segment+0x88>)
 801a702:	f240 7287 	movw	r2, #1927	@ 0x787
 801a706:	491c      	ldr	r1, [pc, #112]	@ (801a778 <tcp_output_control_segment+0x8c>)
 801a708:	481c      	ldr	r0, [pc, #112]	@ (801a77c <tcp_output_control_segment+0x90>)
 801a70a:	f006 fe53 	bl	80213b4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801a70e:	683a      	ldr	r2, [r7, #0]
 801a710:	6879      	ldr	r1, [r7, #4]
 801a712:	68f8      	ldr	r0, [r7, #12]
 801a714:	f7fe faea 	bl	8018cec <tcp_route>
 801a718:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801a71a:	693b      	ldr	r3, [r7, #16]
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	d102      	bne.n	801a726 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801a720:	23fc      	movs	r3, #252	@ 0xfc
 801a722:	75fb      	strb	r3, [r7, #23]
 801a724:	e01c      	b.n	801a760 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801a726:	68fb      	ldr	r3, [r7, #12]
 801a728:	2b00      	cmp	r3, #0
 801a72a:	d006      	beq.n	801a73a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801a72c:	68fb      	ldr	r3, [r7, #12]
 801a72e:	7adb      	ldrb	r3, [r3, #11]
 801a730:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801a732:	68fb      	ldr	r3, [r7, #12]
 801a734:	7a9b      	ldrb	r3, [r3, #10]
 801a736:	757b      	strb	r3, [r7, #21]
 801a738:	e003      	b.n	801a742 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801a73a:	23ff      	movs	r3, #255	@ 0xff
 801a73c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801a73e:	2300      	movs	r3, #0
 801a740:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a742:	7dba      	ldrb	r2, [r7, #22]
 801a744:	693b      	ldr	r3, [r7, #16]
 801a746:	9302      	str	r3, [sp, #8]
 801a748:	2306      	movs	r3, #6
 801a74a:	9301      	str	r3, [sp, #4]
 801a74c:	7d7b      	ldrb	r3, [r7, #21]
 801a74e:	9300      	str	r3, [sp, #0]
 801a750:	4613      	mov	r3, r2
 801a752:	683a      	ldr	r2, [r7, #0]
 801a754:	6879      	ldr	r1, [r7, #4]
 801a756:	68b8      	ldr	r0, [r7, #8]
 801a758:	f004 fd1e 	bl	801f198 <ip4_output_if>
 801a75c:	4603      	mov	r3, r0
 801a75e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801a760:	68b8      	ldr	r0, [r7, #8]
 801a762:	f7f9 fd09 	bl	8014178 <pbuf_free>
  return err;
 801a766:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a76a:	4618      	mov	r0, r3
 801a76c:	3718      	adds	r7, #24
 801a76e:	46bd      	mov	sp, r7
 801a770:	bd80      	pop	{r7, pc}
 801a772:	bf00      	nop
 801a774:	08024d38 	.word	0x08024d38
 801a778:	08025490 	.word	0x08025490
 801a77c:	08024d8c 	.word	0x08024d8c

0801a780 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801a780:	b590      	push	{r4, r7, lr}
 801a782:	b08b      	sub	sp, #44	@ 0x2c
 801a784:	af04      	add	r7, sp, #16
 801a786:	60f8      	str	r0, [r7, #12]
 801a788:	60b9      	str	r1, [r7, #8]
 801a78a:	607a      	str	r2, [r7, #4]
 801a78c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801a78e:	683b      	ldr	r3, [r7, #0]
 801a790:	2b00      	cmp	r3, #0
 801a792:	d106      	bne.n	801a7a2 <tcp_rst+0x22>
 801a794:	4b1f      	ldr	r3, [pc, #124]	@ (801a814 <tcp_rst+0x94>)
 801a796:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801a79a:	491f      	ldr	r1, [pc, #124]	@ (801a818 <tcp_rst+0x98>)
 801a79c:	481f      	ldr	r0, [pc, #124]	@ (801a81c <tcp_rst+0x9c>)
 801a79e:	f006 fe09 	bl	80213b4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801a7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d106      	bne.n	801a7b6 <tcp_rst+0x36>
 801a7a8:	4b1a      	ldr	r3, [pc, #104]	@ (801a814 <tcp_rst+0x94>)
 801a7aa:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801a7ae:	491c      	ldr	r1, [pc, #112]	@ (801a820 <tcp_rst+0xa0>)
 801a7b0:	481a      	ldr	r0, [pc, #104]	@ (801a81c <tcp_rst+0x9c>)
 801a7b2:	f006 fdff 	bl	80213b4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a7b6:	2300      	movs	r3, #0
 801a7b8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801a7ba:	f246 0308 	movw	r3, #24584	@ 0x6008
 801a7be:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801a7c0:	7dfb      	ldrb	r3, [r7, #23]
 801a7c2:	b29c      	uxth	r4, r3
 801a7c4:	68b8      	ldr	r0, [r7, #8]
 801a7c6:	f7f7 ff2f 	bl	8012628 <lwip_htonl>
 801a7ca:	4602      	mov	r2, r0
 801a7cc:	8abb      	ldrh	r3, [r7, #20]
 801a7ce:	9303      	str	r3, [sp, #12]
 801a7d0:	2314      	movs	r3, #20
 801a7d2:	9302      	str	r3, [sp, #8]
 801a7d4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801a7d6:	9301      	str	r3, [sp, #4]
 801a7d8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801a7da:	9300      	str	r3, [sp, #0]
 801a7dc:	4613      	mov	r3, r2
 801a7de:	2200      	movs	r2, #0
 801a7e0:	4621      	mov	r1, r4
 801a7e2:	6878      	ldr	r0, [r7, #4]
 801a7e4:	f7ff fe94 	bl	801a510 <tcp_output_alloc_header_common>
 801a7e8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801a7ea:	693b      	ldr	r3, [r7, #16]
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	d00c      	beq.n	801a80a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a7f0:	7dfb      	ldrb	r3, [r7, #23]
 801a7f2:	2200      	movs	r2, #0
 801a7f4:	6939      	ldr	r1, [r7, #16]
 801a7f6:	68f8      	ldr	r0, [r7, #12]
 801a7f8:	f7ff ff3a 	bl	801a670 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801a7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7fe:	683a      	ldr	r2, [r7, #0]
 801a800:	6939      	ldr	r1, [r7, #16]
 801a802:	68f8      	ldr	r0, [r7, #12]
 801a804:	f7ff ff72 	bl	801a6ec <tcp_output_control_segment>
 801a808:	e000      	b.n	801a80c <tcp_rst+0x8c>
    return;
 801a80a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801a80c:	371c      	adds	r7, #28
 801a80e:	46bd      	mov	sp, r7
 801a810:	bd90      	pop	{r4, r7, pc}
 801a812:	bf00      	nop
 801a814:	08024d38 	.word	0x08024d38
 801a818:	080254bc 	.word	0x080254bc
 801a81c:	08024d8c 	.word	0x08024d8c
 801a820:	080254d8 	.word	0x080254d8

0801a824 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801a824:	b590      	push	{r4, r7, lr}
 801a826:	b087      	sub	sp, #28
 801a828:	af00      	add	r7, sp, #0
 801a82a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801a82c:	2300      	movs	r3, #0
 801a82e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801a830:	2300      	movs	r3, #0
 801a832:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	2b00      	cmp	r3, #0
 801a838:	d106      	bne.n	801a848 <tcp_send_empty_ack+0x24>
 801a83a:	4b28      	ldr	r3, [pc, #160]	@ (801a8dc <tcp_send_empty_ack+0xb8>)
 801a83c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801a840:	4927      	ldr	r1, [pc, #156]	@ (801a8e0 <tcp_send_empty_ack+0xbc>)
 801a842:	4828      	ldr	r0, [pc, #160]	@ (801a8e4 <tcp_send_empty_ack+0xc0>)
 801a844:	f006 fdb6 	bl	80213b4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a848:	7dfb      	ldrb	r3, [r7, #23]
 801a84a:	009b      	lsls	r3, r3, #2
 801a84c:	b2db      	uxtb	r3, r3
 801a84e:	f003 0304 	and.w	r3, r3, #4
 801a852:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801a854:	7d7b      	ldrb	r3, [r7, #21]
 801a856:	b29c      	uxth	r4, r3
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a85c:	4618      	mov	r0, r3
 801a85e:	f7f7 fee3 	bl	8012628 <lwip_htonl>
 801a862:	4603      	mov	r3, r0
 801a864:	2200      	movs	r2, #0
 801a866:	4621      	mov	r1, r4
 801a868:	6878      	ldr	r0, [r7, #4]
 801a86a:	f7ff fec3 	bl	801a5f4 <tcp_output_alloc_header>
 801a86e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a870:	693b      	ldr	r3, [r7, #16]
 801a872:	2b00      	cmp	r3, #0
 801a874:	d109      	bne.n	801a88a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	8b5b      	ldrh	r3, [r3, #26]
 801a87a:	f043 0303 	orr.w	r3, r3, #3
 801a87e:	b29a      	uxth	r2, r3
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801a884:	f06f 0301 	mvn.w	r3, #1
 801a888:	e023      	b.n	801a8d2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801a88a:	7dbb      	ldrb	r3, [r7, #22]
 801a88c:	7dfa      	ldrb	r2, [r7, #23]
 801a88e:	6939      	ldr	r1, [r7, #16]
 801a890:	6878      	ldr	r0, [r7, #4]
 801a892:	f7ff feed 	bl	801a670 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a896:	687a      	ldr	r2, [r7, #4]
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	3304      	adds	r3, #4
 801a89c:	6939      	ldr	r1, [r7, #16]
 801a89e:	6878      	ldr	r0, [r7, #4]
 801a8a0:	f7ff ff24 	bl	801a6ec <tcp_output_control_segment>
 801a8a4:	4603      	mov	r3, r0
 801a8a6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801a8a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d007      	beq.n	801a8c0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	8b5b      	ldrh	r3, [r3, #26]
 801a8b4:	f043 0303 	orr.w	r3, r3, #3
 801a8b8:	b29a      	uxth	r2, r3
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	835a      	strh	r2, [r3, #26]
 801a8be:	e006      	b.n	801a8ce <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	8b5b      	ldrh	r3, [r3, #26]
 801a8c4:	f023 0303 	bic.w	r3, r3, #3
 801a8c8:	b29a      	uxth	r2, r3
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801a8ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a8d2:	4618      	mov	r0, r3
 801a8d4:	371c      	adds	r7, #28
 801a8d6:	46bd      	mov	sp, r7
 801a8d8:	bd90      	pop	{r4, r7, pc}
 801a8da:	bf00      	nop
 801a8dc:	08024d38 	.word	0x08024d38
 801a8e0:	080254f4 	.word	0x080254f4
 801a8e4:	08024d8c 	.word	0x08024d8c

0801a8e8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801a8e8:	b590      	push	{r4, r7, lr}
 801a8ea:	b087      	sub	sp, #28
 801a8ec:	af00      	add	r7, sp, #0
 801a8ee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a8f0:	2300      	movs	r3, #0
 801a8f2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	2b00      	cmp	r3, #0
 801a8f8:	d106      	bne.n	801a908 <tcp_keepalive+0x20>
 801a8fa:	4b18      	ldr	r3, [pc, #96]	@ (801a95c <tcp_keepalive+0x74>)
 801a8fc:	f640 0224 	movw	r2, #2084	@ 0x824
 801a900:	4917      	ldr	r1, [pc, #92]	@ (801a960 <tcp_keepalive+0x78>)
 801a902:	4818      	ldr	r0, [pc, #96]	@ (801a964 <tcp_keepalive+0x7c>)
 801a904:	f006 fd56 	bl	80213b4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801a908:	7dfb      	ldrb	r3, [r7, #23]
 801a90a:	b29c      	uxth	r4, r3
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a910:	3b01      	subs	r3, #1
 801a912:	4618      	mov	r0, r3
 801a914:	f7f7 fe88 	bl	8012628 <lwip_htonl>
 801a918:	4603      	mov	r3, r0
 801a91a:	2200      	movs	r2, #0
 801a91c:	4621      	mov	r1, r4
 801a91e:	6878      	ldr	r0, [r7, #4]
 801a920:	f7ff fe68 	bl	801a5f4 <tcp_output_alloc_header>
 801a924:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a926:	693b      	ldr	r3, [r7, #16]
 801a928:	2b00      	cmp	r3, #0
 801a92a:	d102      	bne.n	801a932 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801a92c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a930:	e010      	b.n	801a954 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a932:	7dfb      	ldrb	r3, [r7, #23]
 801a934:	2200      	movs	r2, #0
 801a936:	6939      	ldr	r1, [r7, #16]
 801a938:	6878      	ldr	r0, [r7, #4]
 801a93a:	f7ff fe99 	bl	801a670 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a93e:	687a      	ldr	r2, [r7, #4]
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	3304      	adds	r3, #4
 801a944:	6939      	ldr	r1, [r7, #16]
 801a946:	6878      	ldr	r0, [r7, #4]
 801a948:	f7ff fed0 	bl	801a6ec <tcp_output_control_segment>
 801a94c:	4603      	mov	r3, r0
 801a94e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a950:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a954:	4618      	mov	r0, r3
 801a956:	371c      	adds	r7, #28
 801a958:	46bd      	mov	sp, r7
 801a95a:	bd90      	pop	{r4, r7, pc}
 801a95c:	08024d38 	.word	0x08024d38
 801a960:	08025514 	.word	0x08025514
 801a964:	08024d8c 	.word	0x08024d8c

0801a968 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801a968:	b590      	push	{r4, r7, lr}
 801a96a:	b08b      	sub	sp, #44	@ 0x2c
 801a96c:	af00      	add	r7, sp, #0
 801a96e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a970:	2300      	movs	r3, #0
 801a972:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	2b00      	cmp	r3, #0
 801a97a:	d106      	bne.n	801a98a <tcp_zero_window_probe+0x22>
 801a97c:	4b4c      	ldr	r3, [pc, #304]	@ (801aab0 <tcp_zero_window_probe+0x148>)
 801a97e:	f640 024f 	movw	r2, #2127	@ 0x84f
 801a982:	494c      	ldr	r1, [pc, #304]	@ (801aab4 <tcp_zero_window_probe+0x14c>)
 801a984:	484c      	ldr	r0, [pc, #304]	@ (801aab8 <tcp_zero_window_probe+0x150>)
 801a986:	f006 fd15 	bl	80213b4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a98e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801a990:	6a3b      	ldr	r3, [r7, #32]
 801a992:	2b00      	cmp	r3, #0
 801a994:	d101      	bne.n	801a99a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801a996:	2300      	movs	r3, #0
 801a998:	e086      	b.n	801aaa8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801a9a0:	2bff      	cmp	r3, #255	@ 0xff
 801a9a2:	d007      	beq.n	801a9b4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801a9aa:	3301      	adds	r3, #1
 801a9ac:	b2da      	uxtb	r2, r3
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801a9b4:	6a3b      	ldr	r3, [r7, #32]
 801a9b6:	68db      	ldr	r3, [r3, #12]
 801a9b8:	899b      	ldrh	r3, [r3, #12]
 801a9ba:	b29b      	uxth	r3, r3
 801a9bc:	4618      	mov	r0, r3
 801a9be:	f7f7 fe1d 	bl	80125fc <lwip_htons>
 801a9c2:	4603      	mov	r3, r0
 801a9c4:	b2db      	uxtb	r3, r3
 801a9c6:	f003 0301 	and.w	r3, r3, #1
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	d005      	beq.n	801a9da <tcp_zero_window_probe+0x72>
 801a9ce:	6a3b      	ldr	r3, [r7, #32]
 801a9d0:	891b      	ldrh	r3, [r3, #8]
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	d101      	bne.n	801a9da <tcp_zero_window_probe+0x72>
 801a9d6:	2301      	movs	r3, #1
 801a9d8:	e000      	b.n	801a9dc <tcp_zero_window_probe+0x74>
 801a9da:	2300      	movs	r3, #0
 801a9dc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801a9de:	7ffb      	ldrb	r3, [r7, #31]
 801a9e0:	2b00      	cmp	r3, #0
 801a9e2:	bf0c      	ite	eq
 801a9e4:	2301      	moveq	r3, #1
 801a9e6:	2300      	movne	r3, #0
 801a9e8:	b2db      	uxtb	r3, r3
 801a9ea:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801a9ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a9f0:	b299      	uxth	r1, r3
 801a9f2:	6a3b      	ldr	r3, [r7, #32]
 801a9f4:	68db      	ldr	r3, [r3, #12]
 801a9f6:	685b      	ldr	r3, [r3, #4]
 801a9f8:	8bba      	ldrh	r2, [r7, #28]
 801a9fa:	6878      	ldr	r0, [r7, #4]
 801a9fc:	f7ff fdfa 	bl	801a5f4 <tcp_output_alloc_header>
 801aa00:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801aa02:	69bb      	ldr	r3, [r7, #24]
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d102      	bne.n	801aa0e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801aa08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801aa0c:	e04c      	b.n	801aaa8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801aa0e:	69bb      	ldr	r3, [r7, #24]
 801aa10:	685b      	ldr	r3, [r3, #4]
 801aa12:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801aa14:	7ffb      	ldrb	r3, [r7, #31]
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d011      	beq.n	801aa3e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801aa1a:	697b      	ldr	r3, [r7, #20]
 801aa1c:	899b      	ldrh	r3, [r3, #12]
 801aa1e:	b29b      	uxth	r3, r3
 801aa20:	b21b      	sxth	r3, r3
 801aa22:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801aa26:	b21c      	sxth	r4, r3
 801aa28:	2011      	movs	r0, #17
 801aa2a:	f7f7 fde7 	bl	80125fc <lwip_htons>
 801aa2e:	4603      	mov	r3, r0
 801aa30:	b21b      	sxth	r3, r3
 801aa32:	4323      	orrs	r3, r4
 801aa34:	b21b      	sxth	r3, r3
 801aa36:	b29a      	uxth	r2, r3
 801aa38:	697b      	ldr	r3, [r7, #20]
 801aa3a:	819a      	strh	r2, [r3, #12]
 801aa3c:	e010      	b.n	801aa60 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801aa3e:	69bb      	ldr	r3, [r7, #24]
 801aa40:	685b      	ldr	r3, [r3, #4]
 801aa42:	3314      	adds	r3, #20
 801aa44:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801aa46:	6a3b      	ldr	r3, [r7, #32]
 801aa48:	6858      	ldr	r0, [r3, #4]
 801aa4a:	6a3b      	ldr	r3, [r7, #32]
 801aa4c:	685b      	ldr	r3, [r3, #4]
 801aa4e:	891a      	ldrh	r2, [r3, #8]
 801aa50:	6a3b      	ldr	r3, [r7, #32]
 801aa52:	891b      	ldrh	r3, [r3, #8]
 801aa54:	1ad3      	subs	r3, r2, r3
 801aa56:	b29b      	uxth	r3, r3
 801aa58:	2201      	movs	r2, #1
 801aa5a:	6939      	ldr	r1, [r7, #16]
 801aa5c:	f7f9 fd92 	bl	8014584 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801aa60:	6a3b      	ldr	r3, [r7, #32]
 801aa62:	68db      	ldr	r3, [r3, #12]
 801aa64:	685b      	ldr	r3, [r3, #4]
 801aa66:	4618      	mov	r0, r3
 801aa68:	f7f7 fdde 	bl	8012628 <lwip_htonl>
 801aa6c:	4603      	mov	r3, r0
 801aa6e:	3301      	adds	r3, #1
 801aa70:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801aa72:	687b      	ldr	r3, [r7, #4]
 801aa74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801aa76:	68fb      	ldr	r3, [r7, #12]
 801aa78:	1ad3      	subs	r3, r2, r3
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	da02      	bge.n	801aa84 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	68fa      	ldr	r2, [r7, #12]
 801aa82:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801aa84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801aa88:	2200      	movs	r2, #0
 801aa8a:	69b9      	ldr	r1, [r7, #24]
 801aa8c:	6878      	ldr	r0, [r7, #4]
 801aa8e:	f7ff fdef 	bl	801a670 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801aa92:	687a      	ldr	r2, [r7, #4]
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	3304      	adds	r3, #4
 801aa98:	69b9      	ldr	r1, [r7, #24]
 801aa9a:	6878      	ldr	r0, [r7, #4]
 801aa9c:	f7ff fe26 	bl	801a6ec <tcp_output_control_segment>
 801aaa0:	4603      	mov	r3, r0
 801aaa2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801aaa4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801aaa8:	4618      	mov	r0, r3
 801aaaa:	372c      	adds	r7, #44	@ 0x2c
 801aaac:	46bd      	mov	sp, r7
 801aaae:	bd90      	pop	{r4, r7, pc}
 801aab0:	08024d38 	.word	0x08024d38
 801aab4:	08025530 	.word	0x08025530
 801aab8:	08024d8c 	.word	0x08024d8c

0801aabc <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801aabc:	b580      	push	{r7, lr}
 801aabe:	b082      	sub	sp, #8
 801aac0:	af00      	add	r7, sp, #0
 801aac2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801aac4:	f7fa f812 	bl	8014aec <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801aac8:	4b0a      	ldr	r3, [pc, #40]	@ (801aaf4 <tcpip_tcp_timer+0x38>)
 801aaca:	681b      	ldr	r3, [r3, #0]
 801aacc:	2b00      	cmp	r3, #0
 801aace:	d103      	bne.n	801aad8 <tcpip_tcp_timer+0x1c>
 801aad0:	4b09      	ldr	r3, [pc, #36]	@ (801aaf8 <tcpip_tcp_timer+0x3c>)
 801aad2:	681b      	ldr	r3, [r3, #0]
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d005      	beq.n	801aae4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801aad8:	2200      	movs	r2, #0
 801aada:	4908      	ldr	r1, [pc, #32]	@ (801aafc <tcpip_tcp_timer+0x40>)
 801aadc:	20fa      	movs	r0, #250	@ 0xfa
 801aade:	f000 f8f3 	bl	801acc8 <sys_timeout>
 801aae2:	e003      	b.n	801aaec <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801aae4:	4b06      	ldr	r3, [pc, #24]	@ (801ab00 <tcpip_tcp_timer+0x44>)
 801aae6:	2200      	movs	r2, #0
 801aae8:	601a      	str	r2, [r3, #0]
  }
}
 801aaea:	bf00      	nop
 801aaec:	bf00      	nop
 801aaee:	3708      	adds	r7, #8
 801aaf0:	46bd      	mov	sp, r7
 801aaf2:	bd80      	pop	{r7, pc}
 801aaf4:	20004bf4 	.word	0x20004bf4
 801aaf8:	20004bf8 	.word	0x20004bf8
 801aafc:	0801aabd 	.word	0x0801aabd
 801ab00:	20004c40 	.word	0x20004c40

0801ab04 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801ab04:	b580      	push	{r7, lr}
 801ab06:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801ab08:	4b0a      	ldr	r3, [pc, #40]	@ (801ab34 <tcp_timer_needed+0x30>)
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	d10f      	bne.n	801ab30 <tcp_timer_needed+0x2c>
 801ab10:	4b09      	ldr	r3, [pc, #36]	@ (801ab38 <tcp_timer_needed+0x34>)
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d103      	bne.n	801ab20 <tcp_timer_needed+0x1c>
 801ab18:	4b08      	ldr	r3, [pc, #32]	@ (801ab3c <tcp_timer_needed+0x38>)
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	d007      	beq.n	801ab30 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801ab20:	4b04      	ldr	r3, [pc, #16]	@ (801ab34 <tcp_timer_needed+0x30>)
 801ab22:	2201      	movs	r2, #1
 801ab24:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801ab26:	2200      	movs	r2, #0
 801ab28:	4905      	ldr	r1, [pc, #20]	@ (801ab40 <tcp_timer_needed+0x3c>)
 801ab2a:	20fa      	movs	r0, #250	@ 0xfa
 801ab2c:	f000 f8cc 	bl	801acc8 <sys_timeout>
  }
}
 801ab30:	bf00      	nop
 801ab32:	bd80      	pop	{r7, pc}
 801ab34:	20004c40 	.word	0x20004c40
 801ab38:	20004bf4 	.word	0x20004bf4
 801ab3c:	20004bf8 	.word	0x20004bf8
 801ab40:	0801aabd 	.word	0x0801aabd

0801ab44 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801ab44:	b580      	push	{r7, lr}
 801ab46:	b086      	sub	sp, #24
 801ab48:	af00      	add	r7, sp, #0
 801ab4a:	60f8      	str	r0, [r7, #12]
 801ab4c:	60b9      	str	r1, [r7, #8]
 801ab4e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801ab50:	200b      	movs	r0, #11
 801ab52:	f7f8 fbb5 	bl	80132c0 <memp_malloc>
 801ab56:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801ab58:	693b      	ldr	r3, [r7, #16]
 801ab5a:	2b00      	cmp	r3, #0
 801ab5c:	d109      	bne.n	801ab72 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801ab5e:	693b      	ldr	r3, [r7, #16]
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d151      	bne.n	801ac08 <sys_timeout_abs+0xc4>
 801ab64:	4b2a      	ldr	r3, [pc, #168]	@ (801ac10 <sys_timeout_abs+0xcc>)
 801ab66:	22be      	movs	r2, #190	@ 0xbe
 801ab68:	492a      	ldr	r1, [pc, #168]	@ (801ac14 <sys_timeout_abs+0xd0>)
 801ab6a:	482b      	ldr	r0, [pc, #172]	@ (801ac18 <sys_timeout_abs+0xd4>)
 801ab6c:	f006 fc22 	bl	80213b4 <iprintf>
    return;
 801ab70:	e04a      	b.n	801ac08 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801ab72:	693b      	ldr	r3, [r7, #16]
 801ab74:	2200      	movs	r2, #0
 801ab76:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801ab78:	693b      	ldr	r3, [r7, #16]
 801ab7a:	68ba      	ldr	r2, [r7, #8]
 801ab7c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801ab7e:	693b      	ldr	r3, [r7, #16]
 801ab80:	687a      	ldr	r2, [r7, #4]
 801ab82:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801ab84:	693b      	ldr	r3, [r7, #16]
 801ab86:	68fa      	ldr	r2, [r7, #12]
 801ab88:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801ab8a:	4b24      	ldr	r3, [pc, #144]	@ (801ac1c <sys_timeout_abs+0xd8>)
 801ab8c:	681b      	ldr	r3, [r3, #0]
 801ab8e:	2b00      	cmp	r3, #0
 801ab90:	d103      	bne.n	801ab9a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801ab92:	4a22      	ldr	r2, [pc, #136]	@ (801ac1c <sys_timeout_abs+0xd8>)
 801ab94:	693b      	ldr	r3, [r7, #16]
 801ab96:	6013      	str	r3, [r2, #0]
    return;
 801ab98:	e037      	b.n	801ac0a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801ab9a:	693b      	ldr	r3, [r7, #16]
 801ab9c:	685a      	ldr	r2, [r3, #4]
 801ab9e:	4b1f      	ldr	r3, [pc, #124]	@ (801ac1c <sys_timeout_abs+0xd8>)
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	685b      	ldr	r3, [r3, #4]
 801aba4:	1ad3      	subs	r3, r2, r3
 801aba6:	0fdb      	lsrs	r3, r3, #31
 801aba8:	f003 0301 	and.w	r3, r3, #1
 801abac:	b2db      	uxtb	r3, r3
 801abae:	2b00      	cmp	r3, #0
 801abb0:	d007      	beq.n	801abc2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801abb2:	4b1a      	ldr	r3, [pc, #104]	@ (801ac1c <sys_timeout_abs+0xd8>)
 801abb4:	681a      	ldr	r2, [r3, #0]
 801abb6:	693b      	ldr	r3, [r7, #16]
 801abb8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801abba:	4a18      	ldr	r2, [pc, #96]	@ (801ac1c <sys_timeout_abs+0xd8>)
 801abbc:	693b      	ldr	r3, [r7, #16]
 801abbe:	6013      	str	r3, [r2, #0]
 801abc0:	e023      	b.n	801ac0a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801abc2:	4b16      	ldr	r3, [pc, #88]	@ (801ac1c <sys_timeout_abs+0xd8>)
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	617b      	str	r3, [r7, #20]
 801abc8:	e01a      	b.n	801ac00 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801abca:	697b      	ldr	r3, [r7, #20]
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d00b      	beq.n	801abea <sys_timeout_abs+0xa6>
 801abd2:	693b      	ldr	r3, [r7, #16]
 801abd4:	685a      	ldr	r2, [r3, #4]
 801abd6:	697b      	ldr	r3, [r7, #20]
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	685b      	ldr	r3, [r3, #4]
 801abdc:	1ad3      	subs	r3, r2, r3
 801abde:	0fdb      	lsrs	r3, r3, #31
 801abe0:	f003 0301 	and.w	r3, r3, #1
 801abe4:	b2db      	uxtb	r3, r3
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d007      	beq.n	801abfa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801abea:	697b      	ldr	r3, [r7, #20]
 801abec:	681a      	ldr	r2, [r3, #0]
 801abee:	693b      	ldr	r3, [r7, #16]
 801abf0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801abf2:	697b      	ldr	r3, [r7, #20]
 801abf4:	693a      	ldr	r2, [r7, #16]
 801abf6:	601a      	str	r2, [r3, #0]
        break;
 801abf8:	e007      	b.n	801ac0a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801abfa:	697b      	ldr	r3, [r7, #20]
 801abfc:	681b      	ldr	r3, [r3, #0]
 801abfe:	617b      	str	r3, [r7, #20]
 801ac00:	697b      	ldr	r3, [r7, #20]
 801ac02:	2b00      	cmp	r3, #0
 801ac04:	d1e1      	bne.n	801abca <sys_timeout_abs+0x86>
 801ac06:	e000      	b.n	801ac0a <sys_timeout_abs+0xc6>
    return;
 801ac08:	bf00      	nop
      }
    }
  }
}
 801ac0a:	3718      	adds	r7, #24
 801ac0c:	46bd      	mov	sp, r7
 801ac0e:	bd80      	pop	{r7, pc}
 801ac10:	08025554 	.word	0x08025554
 801ac14:	08025588 	.word	0x08025588
 801ac18:	080255c8 	.word	0x080255c8
 801ac1c:	20004c38 	.word	0x20004c38

0801ac20 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801ac20:	b580      	push	{r7, lr}
 801ac22:	b086      	sub	sp, #24
 801ac24:	af00      	add	r7, sp, #0
 801ac26:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801ac2c:	697b      	ldr	r3, [r7, #20]
 801ac2e:	685b      	ldr	r3, [r3, #4]
 801ac30:	4798      	blx	r3

  now = sys_now();
 801ac32:	f7ed fc35 	bl	80084a0 <sys_now>
 801ac36:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801ac38:	697b      	ldr	r3, [r7, #20]
 801ac3a:	681a      	ldr	r2, [r3, #0]
 801ac3c:	4b0f      	ldr	r3, [pc, #60]	@ (801ac7c <lwip_cyclic_timer+0x5c>)
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	4413      	add	r3, r2
 801ac42:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801ac44:	68fa      	ldr	r2, [r7, #12]
 801ac46:	693b      	ldr	r3, [r7, #16]
 801ac48:	1ad3      	subs	r3, r2, r3
 801ac4a:	0fdb      	lsrs	r3, r3, #31
 801ac4c:	f003 0301 	and.w	r3, r3, #1
 801ac50:	b2db      	uxtb	r3, r3
 801ac52:	2b00      	cmp	r3, #0
 801ac54:	d009      	beq.n	801ac6a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801ac56:	697b      	ldr	r3, [r7, #20]
 801ac58:	681a      	ldr	r2, [r3, #0]
 801ac5a:	693b      	ldr	r3, [r7, #16]
 801ac5c:	4413      	add	r3, r2
 801ac5e:	687a      	ldr	r2, [r7, #4]
 801ac60:	4907      	ldr	r1, [pc, #28]	@ (801ac80 <lwip_cyclic_timer+0x60>)
 801ac62:	4618      	mov	r0, r3
 801ac64:	f7ff ff6e 	bl	801ab44 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801ac68:	e004      	b.n	801ac74 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801ac6a:	687a      	ldr	r2, [r7, #4]
 801ac6c:	4904      	ldr	r1, [pc, #16]	@ (801ac80 <lwip_cyclic_timer+0x60>)
 801ac6e:	68f8      	ldr	r0, [r7, #12]
 801ac70:	f7ff ff68 	bl	801ab44 <sys_timeout_abs>
}
 801ac74:	bf00      	nop
 801ac76:	3718      	adds	r7, #24
 801ac78:	46bd      	mov	sp, r7
 801ac7a:	bd80      	pop	{r7, pc}
 801ac7c:	20004c3c 	.word	0x20004c3c
 801ac80:	0801ac21 	.word	0x0801ac21

0801ac84 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801ac84:	b580      	push	{r7, lr}
 801ac86:	b082      	sub	sp, #8
 801ac88:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801ac8a:	2301      	movs	r3, #1
 801ac8c:	607b      	str	r3, [r7, #4]
 801ac8e:	e00e      	b.n	801acae <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801ac90:	4a0b      	ldr	r2, [pc, #44]	@ (801acc0 <sys_timeouts_init+0x3c>)
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	00db      	lsls	r3, r3, #3
 801ac9c:	4a08      	ldr	r2, [pc, #32]	@ (801acc0 <sys_timeouts_init+0x3c>)
 801ac9e:	4413      	add	r3, r2
 801aca0:	461a      	mov	r2, r3
 801aca2:	4908      	ldr	r1, [pc, #32]	@ (801acc4 <sys_timeouts_init+0x40>)
 801aca4:	f000 f810 	bl	801acc8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	3301      	adds	r3, #1
 801acac:	607b      	str	r3, [r7, #4]
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	2b05      	cmp	r3, #5
 801acb2:	d9ed      	bls.n	801ac90 <sys_timeouts_init+0xc>
  }
}
 801acb4:	bf00      	nop
 801acb6:	bf00      	nop
 801acb8:	3708      	adds	r7, #8
 801acba:	46bd      	mov	sp, r7
 801acbc:	bd80      	pop	{r7, pc}
 801acbe:	bf00      	nop
 801acc0:	08027724 	.word	0x08027724
 801acc4:	0801ac21 	.word	0x0801ac21

0801acc8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801acc8:	b580      	push	{r7, lr}
 801acca:	b086      	sub	sp, #24
 801accc:	af00      	add	r7, sp, #0
 801acce:	60f8      	str	r0, [r7, #12]
 801acd0:	60b9      	str	r1, [r7, #8]
 801acd2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801acd4:	68fb      	ldr	r3, [r7, #12]
 801acd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801acda:	d306      	bcc.n	801acea <sys_timeout+0x22>
 801acdc:	4b0a      	ldr	r3, [pc, #40]	@ (801ad08 <sys_timeout+0x40>)
 801acde:	f240 1229 	movw	r2, #297	@ 0x129
 801ace2:	490a      	ldr	r1, [pc, #40]	@ (801ad0c <sys_timeout+0x44>)
 801ace4:	480a      	ldr	r0, [pc, #40]	@ (801ad10 <sys_timeout+0x48>)
 801ace6:	f006 fb65 	bl	80213b4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801acea:	f7ed fbd9 	bl	80084a0 <sys_now>
 801acee:	4602      	mov	r2, r0
 801acf0:	68fb      	ldr	r3, [r7, #12]
 801acf2:	4413      	add	r3, r2
 801acf4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801acf6:	687a      	ldr	r2, [r7, #4]
 801acf8:	68b9      	ldr	r1, [r7, #8]
 801acfa:	6978      	ldr	r0, [r7, #20]
 801acfc:	f7ff ff22 	bl	801ab44 <sys_timeout_abs>
#endif
}
 801ad00:	bf00      	nop
 801ad02:	3718      	adds	r7, #24
 801ad04:	46bd      	mov	sp, r7
 801ad06:	bd80      	pop	{r7, pc}
 801ad08:	08025554 	.word	0x08025554
 801ad0c:	080255f0 	.word	0x080255f0
 801ad10:	080255c8 	.word	0x080255c8

0801ad14 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 801ad14:	b580      	push	{r7, lr}
 801ad16:	b084      	sub	sp, #16
 801ad18:	af00      	add	r7, sp, #0
 801ad1a:	6078      	str	r0, [r7, #4]
 801ad1c:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801ad1e:	4b19      	ldr	r3, [pc, #100]	@ (801ad84 <sys_untimeout+0x70>)
 801ad20:	681b      	ldr	r3, [r3, #0]
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d029      	beq.n	801ad7a <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801ad26:	4b17      	ldr	r3, [pc, #92]	@ (801ad84 <sys_untimeout+0x70>)
 801ad28:	681b      	ldr	r3, [r3, #0]
 801ad2a:	60bb      	str	r3, [r7, #8]
 801ad2c:	2300      	movs	r3, #0
 801ad2e:	60fb      	str	r3, [r7, #12]
 801ad30:	e01f      	b.n	801ad72 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 801ad32:	68bb      	ldr	r3, [r7, #8]
 801ad34:	689b      	ldr	r3, [r3, #8]
 801ad36:	687a      	ldr	r2, [r7, #4]
 801ad38:	429a      	cmp	r2, r3
 801ad3a:	d115      	bne.n	801ad68 <sys_untimeout+0x54>
 801ad3c:	68bb      	ldr	r3, [r7, #8]
 801ad3e:	68db      	ldr	r3, [r3, #12]
 801ad40:	683a      	ldr	r2, [r7, #0]
 801ad42:	429a      	cmp	r2, r3
 801ad44:	d110      	bne.n	801ad68 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 801ad46:	68fb      	ldr	r3, [r7, #12]
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	d104      	bne.n	801ad56 <sys_untimeout+0x42>
        next_timeout = t->next;
 801ad4c:	68bb      	ldr	r3, [r7, #8]
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	4a0c      	ldr	r2, [pc, #48]	@ (801ad84 <sys_untimeout+0x70>)
 801ad52:	6013      	str	r3, [r2, #0]
 801ad54:	e003      	b.n	801ad5e <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 801ad56:	68bb      	ldr	r3, [r7, #8]
 801ad58:	681a      	ldr	r2, [r3, #0]
 801ad5a:	68fb      	ldr	r3, [r7, #12]
 801ad5c:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801ad5e:	68b9      	ldr	r1, [r7, #8]
 801ad60:	200b      	movs	r0, #11
 801ad62:	f7f8 fb1d 	bl	80133a0 <memp_free>
      return;
 801ad66:	e009      	b.n	801ad7c <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801ad68:	68bb      	ldr	r3, [r7, #8]
 801ad6a:	60fb      	str	r3, [r7, #12]
 801ad6c:	68bb      	ldr	r3, [r7, #8]
 801ad6e:	681b      	ldr	r3, [r3, #0]
 801ad70:	60bb      	str	r3, [r7, #8]
 801ad72:	68bb      	ldr	r3, [r7, #8]
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d1dc      	bne.n	801ad32 <sys_untimeout+0x1e>
    }
  }
  return;
 801ad78:	e000      	b.n	801ad7c <sys_untimeout+0x68>
    return;
 801ad7a:	bf00      	nop
}
 801ad7c:	3710      	adds	r7, #16
 801ad7e:	46bd      	mov	sp, r7
 801ad80:	bd80      	pop	{r7, pc}
 801ad82:	bf00      	nop
 801ad84:	20004c38 	.word	0x20004c38

0801ad88 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801ad88:	b580      	push	{r7, lr}
 801ad8a:	b084      	sub	sp, #16
 801ad8c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801ad8e:	f7ed fb87 	bl	80084a0 <sys_now>
 801ad92:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801ad94:	4b17      	ldr	r3, [pc, #92]	@ (801adf4 <sys_check_timeouts+0x6c>)
 801ad96:	681b      	ldr	r3, [r3, #0]
 801ad98:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801ad9a:	68bb      	ldr	r3, [r7, #8]
 801ad9c:	2b00      	cmp	r3, #0
 801ad9e:	d022      	beq.n	801ade6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801ada0:	68bb      	ldr	r3, [r7, #8]
 801ada2:	685b      	ldr	r3, [r3, #4]
 801ada4:	68fa      	ldr	r2, [r7, #12]
 801ada6:	1ad3      	subs	r3, r2, r3
 801ada8:	0fdb      	lsrs	r3, r3, #31
 801adaa:	f003 0301 	and.w	r3, r3, #1
 801adae:	b2db      	uxtb	r3, r3
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d11a      	bne.n	801adea <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801adb4:	68bb      	ldr	r3, [r7, #8]
 801adb6:	681b      	ldr	r3, [r3, #0]
 801adb8:	4a0e      	ldr	r2, [pc, #56]	@ (801adf4 <sys_check_timeouts+0x6c>)
 801adba:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801adbc:	68bb      	ldr	r3, [r7, #8]
 801adbe:	689b      	ldr	r3, [r3, #8]
 801adc0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801adc2:	68bb      	ldr	r3, [r7, #8]
 801adc4:	68db      	ldr	r3, [r3, #12]
 801adc6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801adc8:	68bb      	ldr	r3, [r7, #8]
 801adca:	685b      	ldr	r3, [r3, #4]
 801adcc:	4a0a      	ldr	r2, [pc, #40]	@ (801adf8 <sys_check_timeouts+0x70>)
 801adce:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801add0:	68b9      	ldr	r1, [r7, #8]
 801add2:	200b      	movs	r0, #11
 801add4:	f7f8 fae4 	bl	80133a0 <memp_free>
    if (handler != NULL) {
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	2b00      	cmp	r3, #0
 801addc:	d0da      	beq.n	801ad94 <sys_check_timeouts+0xc>
      handler(arg);
 801adde:	687b      	ldr	r3, [r7, #4]
 801ade0:	6838      	ldr	r0, [r7, #0]
 801ade2:	4798      	blx	r3
  do {
 801ade4:	e7d6      	b.n	801ad94 <sys_check_timeouts+0xc>
      return;
 801ade6:	bf00      	nop
 801ade8:	e000      	b.n	801adec <sys_check_timeouts+0x64>
      return;
 801adea:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801adec:	3710      	adds	r7, #16
 801adee:	46bd      	mov	sp, r7
 801adf0:	bd80      	pop	{r7, pc}
 801adf2:	bf00      	nop
 801adf4:	20004c38 	.word	0x20004c38
 801adf8:	20004c3c 	.word	0x20004c3c

0801adfc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801adfc:	b580      	push	{r7, lr}
 801adfe:	b082      	sub	sp, #8
 801ae00:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801ae02:	4b16      	ldr	r3, [pc, #88]	@ (801ae5c <sys_timeouts_sleeptime+0x60>)
 801ae04:	681b      	ldr	r3, [r3, #0]
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	d102      	bne.n	801ae10 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801ae0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ae0e:	e020      	b.n	801ae52 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801ae10:	f7ed fb46 	bl	80084a0 <sys_now>
 801ae14:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801ae16:	4b11      	ldr	r3, [pc, #68]	@ (801ae5c <sys_timeouts_sleeptime+0x60>)
 801ae18:	681b      	ldr	r3, [r3, #0]
 801ae1a:	685a      	ldr	r2, [r3, #4]
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	1ad3      	subs	r3, r2, r3
 801ae20:	0fdb      	lsrs	r3, r3, #31
 801ae22:	f003 0301 	and.w	r3, r3, #1
 801ae26:	b2db      	uxtb	r3, r3
 801ae28:	2b00      	cmp	r3, #0
 801ae2a:	d001      	beq.n	801ae30 <sys_timeouts_sleeptime+0x34>
    return 0;
 801ae2c:	2300      	movs	r3, #0
 801ae2e:	e010      	b.n	801ae52 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801ae30:	4b0a      	ldr	r3, [pc, #40]	@ (801ae5c <sys_timeouts_sleeptime+0x60>)
 801ae32:	681b      	ldr	r3, [r3, #0]
 801ae34:	685a      	ldr	r2, [r3, #4]
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	1ad3      	subs	r3, r2, r3
 801ae3a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801ae3c:	683b      	ldr	r3, [r7, #0]
 801ae3e:	2b00      	cmp	r3, #0
 801ae40:	da06      	bge.n	801ae50 <sys_timeouts_sleeptime+0x54>
 801ae42:	4b07      	ldr	r3, [pc, #28]	@ (801ae60 <sys_timeouts_sleeptime+0x64>)
 801ae44:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801ae48:	4906      	ldr	r1, [pc, #24]	@ (801ae64 <sys_timeouts_sleeptime+0x68>)
 801ae4a:	4807      	ldr	r0, [pc, #28]	@ (801ae68 <sys_timeouts_sleeptime+0x6c>)
 801ae4c:	f006 fab2 	bl	80213b4 <iprintf>
    return ret;
 801ae50:	683b      	ldr	r3, [r7, #0]
  }
}
 801ae52:	4618      	mov	r0, r3
 801ae54:	3708      	adds	r7, #8
 801ae56:	46bd      	mov	sp, r7
 801ae58:	bd80      	pop	{r7, pc}
 801ae5a:	bf00      	nop
 801ae5c:	20004c38 	.word	0x20004c38
 801ae60:	08025554 	.word	0x08025554
 801ae64:	08025628 	.word	0x08025628
 801ae68:	080255c8 	.word	0x080255c8

0801ae6c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801ae6c:	b580      	push	{r7, lr}
 801ae6e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801ae70:	f006 f9a0 	bl	80211b4 <rand>
 801ae74:	4603      	mov	r3, r0
 801ae76:	b29b      	uxth	r3, r3
 801ae78:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ae7c:	b29b      	uxth	r3, r3
 801ae7e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801ae82:	b29a      	uxth	r2, r3
 801ae84:	4b01      	ldr	r3, [pc, #4]	@ (801ae8c <udp_init+0x20>)
 801ae86:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801ae88:	bf00      	nop
 801ae8a:	bd80      	pop	{r7, pc}
 801ae8c:	200000c0 	.word	0x200000c0

0801ae90 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801ae90:	b480      	push	{r7}
 801ae92:	b083      	sub	sp, #12
 801ae94:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801ae96:	2300      	movs	r3, #0
 801ae98:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801ae9a:	4b17      	ldr	r3, [pc, #92]	@ (801aef8 <udp_new_port+0x68>)
 801ae9c:	881b      	ldrh	r3, [r3, #0]
 801ae9e:	1c5a      	adds	r2, r3, #1
 801aea0:	b291      	uxth	r1, r2
 801aea2:	4a15      	ldr	r2, [pc, #84]	@ (801aef8 <udp_new_port+0x68>)
 801aea4:	8011      	strh	r1, [r2, #0]
 801aea6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801aeaa:	4293      	cmp	r3, r2
 801aeac:	d103      	bne.n	801aeb6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801aeae:	4b12      	ldr	r3, [pc, #72]	@ (801aef8 <udp_new_port+0x68>)
 801aeb0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801aeb4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801aeb6:	4b11      	ldr	r3, [pc, #68]	@ (801aefc <udp_new_port+0x6c>)
 801aeb8:	681b      	ldr	r3, [r3, #0]
 801aeba:	603b      	str	r3, [r7, #0]
 801aebc:	e011      	b.n	801aee2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801aebe:	683b      	ldr	r3, [r7, #0]
 801aec0:	8a5a      	ldrh	r2, [r3, #18]
 801aec2:	4b0d      	ldr	r3, [pc, #52]	@ (801aef8 <udp_new_port+0x68>)
 801aec4:	881b      	ldrh	r3, [r3, #0]
 801aec6:	429a      	cmp	r2, r3
 801aec8:	d108      	bne.n	801aedc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801aeca:	88fb      	ldrh	r3, [r7, #6]
 801aecc:	3301      	adds	r3, #1
 801aece:	80fb      	strh	r3, [r7, #6]
 801aed0:	88fb      	ldrh	r3, [r7, #6]
 801aed2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801aed6:	d3e0      	bcc.n	801ae9a <udp_new_port+0xa>
        return 0;
 801aed8:	2300      	movs	r3, #0
 801aeda:	e007      	b.n	801aeec <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801aedc:	683b      	ldr	r3, [r7, #0]
 801aede:	68db      	ldr	r3, [r3, #12]
 801aee0:	603b      	str	r3, [r7, #0]
 801aee2:	683b      	ldr	r3, [r7, #0]
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	d1ea      	bne.n	801aebe <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801aee8:	4b03      	ldr	r3, [pc, #12]	@ (801aef8 <udp_new_port+0x68>)
 801aeea:	881b      	ldrh	r3, [r3, #0]
}
 801aeec:	4618      	mov	r0, r3
 801aeee:	370c      	adds	r7, #12
 801aef0:	46bd      	mov	sp, r7
 801aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aef6:	4770      	bx	lr
 801aef8:	200000c0 	.word	0x200000c0
 801aefc:	20004c44 	.word	0x20004c44

0801af00 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801af00:	b580      	push	{r7, lr}
 801af02:	b084      	sub	sp, #16
 801af04:	af00      	add	r7, sp, #0
 801af06:	60f8      	str	r0, [r7, #12]
 801af08:	60b9      	str	r1, [r7, #8]
 801af0a:	4613      	mov	r3, r2
 801af0c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801af0e:	68fb      	ldr	r3, [r7, #12]
 801af10:	2b00      	cmp	r3, #0
 801af12:	d105      	bne.n	801af20 <udp_input_local_match+0x20>
 801af14:	4b27      	ldr	r3, [pc, #156]	@ (801afb4 <udp_input_local_match+0xb4>)
 801af16:	2287      	movs	r2, #135	@ 0x87
 801af18:	4927      	ldr	r1, [pc, #156]	@ (801afb8 <udp_input_local_match+0xb8>)
 801af1a:	4828      	ldr	r0, [pc, #160]	@ (801afbc <udp_input_local_match+0xbc>)
 801af1c:	f006 fa4a 	bl	80213b4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801af20:	68bb      	ldr	r3, [r7, #8]
 801af22:	2b00      	cmp	r3, #0
 801af24:	d105      	bne.n	801af32 <udp_input_local_match+0x32>
 801af26:	4b23      	ldr	r3, [pc, #140]	@ (801afb4 <udp_input_local_match+0xb4>)
 801af28:	2288      	movs	r2, #136	@ 0x88
 801af2a:	4925      	ldr	r1, [pc, #148]	@ (801afc0 <udp_input_local_match+0xc0>)
 801af2c:	4823      	ldr	r0, [pc, #140]	@ (801afbc <udp_input_local_match+0xbc>)
 801af2e:	f006 fa41 	bl	80213b4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801af32:	68fb      	ldr	r3, [r7, #12]
 801af34:	7a1b      	ldrb	r3, [r3, #8]
 801af36:	2b00      	cmp	r3, #0
 801af38:	d00b      	beq.n	801af52 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801af3a:	68fb      	ldr	r3, [r7, #12]
 801af3c:	7a1a      	ldrb	r2, [r3, #8]
 801af3e:	4b21      	ldr	r3, [pc, #132]	@ (801afc4 <udp_input_local_match+0xc4>)
 801af40:	685b      	ldr	r3, [r3, #4]
 801af42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801af46:	3301      	adds	r3, #1
 801af48:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801af4a:	429a      	cmp	r2, r3
 801af4c:	d001      	beq.n	801af52 <udp_input_local_match+0x52>
    return 0;
 801af4e:	2300      	movs	r3, #0
 801af50:	e02b      	b.n	801afaa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801af52:	79fb      	ldrb	r3, [r7, #7]
 801af54:	2b00      	cmp	r3, #0
 801af56:	d018      	beq.n	801af8a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801af58:	68fb      	ldr	r3, [r7, #12]
 801af5a:	2b00      	cmp	r3, #0
 801af5c:	d013      	beq.n	801af86 <udp_input_local_match+0x86>
 801af5e:	68fb      	ldr	r3, [r7, #12]
 801af60:	681b      	ldr	r3, [r3, #0]
 801af62:	2b00      	cmp	r3, #0
 801af64:	d00f      	beq.n	801af86 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801af66:	4b17      	ldr	r3, [pc, #92]	@ (801afc4 <udp_input_local_match+0xc4>)
 801af68:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801af6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801af6e:	d00a      	beq.n	801af86 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801af70:	68fb      	ldr	r3, [r7, #12]
 801af72:	681a      	ldr	r2, [r3, #0]
 801af74:	4b13      	ldr	r3, [pc, #76]	@ (801afc4 <udp_input_local_match+0xc4>)
 801af76:	695b      	ldr	r3, [r3, #20]
 801af78:	405a      	eors	r2, r3
 801af7a:	68bb      	ldr	r3, [r7, #8]
 801af7c:	3308      	adds	r3, #8
 801af7e:	681b      	ldr	r3, [r3, #0]
 801af80:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801af82:	2b00      	cmp	r3, #0
 801af84:	d110      	bne.n	801afa8 <udp_input_local_match+0xa8>
          return 1;
 801af86:	2301      	movs	r3, #1
 801af88:	e00f      	b.n	801afaa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801af8a:	68fb      	ldr	r3, [r7, #12]
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	d009      	beq.n	801afa4 <udp_input_local_match+0xa4>
 801af90:	68fb      	ldr	r3, [r7, #12]
 801af92:	681b      	ldr	r3, [r3, #0]
 801af94:	2b00      	cmp	r3, #0
 801af96:	d005      	beq.n	801afa4 <udp_input_local_match+0xa4>
 801af98:	68fb      	ldr	r3, [r7, #12]
 801af9a:	681a      	ldr	r2, [r3, #0]
 801af9c:	4b09      	ldr	r3, [pc, #36]	@ (801afc4 <udp_input_local_match+0xc4>)
 801af9e:	695b      	ldr	r3, [r3, #20]
 801afa0:	429a      	cmp	r2, r3
 801afa2:	d101      	bne.n	801afa8 <udp_input_local_match+0xa8>
        return 1;
 801afa4:	2301      	movs	r3, #1
 801afa6:	e000      	b.n	801afaa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801afa8:	2300      	movs	r3, #0
}
 801afaa:	4618      	mov	r0, r3
 801afac:	3710      	adds	r7, #16
 801afae:	46bd      	mov	sp, r7
 801afb0:	bd80      	pop	{r7, pc}
 801afb2:	bf00      	nop
 801afb4:	0802563c 	.word	0x0802563c
 801afb8:	0802566c 	.word	0x0802566c
 801afbc:	08025690 	.word	0x08025690
 801afc0:	080256b8 	.word	0x080256b8
 801afc4:	20004bb4 	.word	0x20004bb4

0801afc8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801afc8:	b590      	push	{r4, r7, lr}
 801afca:	b08d      	sub	sp, #52	@ 0x34
 801afcc:	af02      	add	r7, sp, #8
 801afce:	6078      	str	r0, [r7, #4]
 801afd0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801afd2:	2300      	movs	r3, #0
 801afd4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	2b00      	cmp	r3, #0
 801afda:	d105      	bne.n	801afe8 <udp_input+0x20>
 801afdc:	4b7c      	ldr	r3, [pc, #496]	@ (801b1d0 <udp_input+0x208>)
 801afde:	22cf      	movs	r2, #207	@ 0xcf
 801afe0:	497c      	ldr	r1, [pc, #496]	@ (801b1d4 <udp_input+0x20c>)
 801afe2:	487d      	ldr	r0, [pc, #500]	@ (801b1d8 <udp_input+0x210>)
 801afe4:	f006 f9e6 	bl	80213b4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801afe8:	683b      	ldr	r3, [r7, #0]
 801afea:	2b00      	cmp	r3, #0
 801afec:	d105      	bne.n	801affa <udp_input+0x32>
 801afee:	4b78      	ldr	r3, [pc, #480]	@ (801b1d0 <udp_input+0x208>)
 801aff0:	22d0      	movs	r2, #208	@ 0xd0
 801aff2:	497a      	ldr	r1, [pc, #488]	@ (801b1dc <udp_input+0x214>)
 801aff4:	4878      	ldr	r0, [pc, #480]	@ (801b1d8 <udp_input+0x210>)
 801aff6:	f006 f9dd 	bl	80213b4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	895b      	ldrh	r3, [r3, #10]
 801affe:	2b07      	cmp	r3, #7
 801b000:	d803      	bhi.n	801b00a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801b002:	6878      	ldr	r0, [r7, #4]
 801b004:	f7f9 f8b8 	bl	8014178 <pbuf_free>
    goto end;
 801b008:	e0de      	b.n	801b1c8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	685b      	ldr	r3, [r3, #4]
 801b00e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b010:	4b73      	ldr	r3, [pc, #460]	@ (801b1e0 <udp_input+0x218>)
 801b012:	695b      	ldr	r3, [r3, #20]
 801b014:	4a72      	ldr	r2, [pc, #456]	@ (801b1e0 <udp_input+0x218>)
 801b016:	6812      	ldr	r2, [r2, #0]
 801b018:	4611      	mov	r1, r2
 801b01a:	4618      	mov	r0, r3
 801b01c:	f004 fa0a 	bl	801f434 <ip4_addr_isbroadcast_u32>
 801b020:	4603      	mov	r3, r0
 801b022:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801b024:	697b      	ldr	r3, [r7, #20]
 801b026:	881b      	ldrh	r3, [r3, #0]
 801b028:	b29b      	uxth	r3, r3
 801b02a:	4618      	mov	r0, r3
 801b02c:	f7f7 fae6 	bl	80125fc <lwip_htons>
 801b030:	4603      	mov	r3, r0
 801b032:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801b034:	697b      	ldr	r3, [r7, #20]
 801b036:	885b      	ldrh	r3, [r3, #2]
 801b038:	b29b      	uxth	r3, r3
 801b03a:	4618      	mov	r0, r3
 801b03c:	f7f7 fade 	bl	80125fc <lwip_htons>
 801b040:	4603      	mov	r3, r0
 801b042:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801b044:	2300      	movs	r3, #0
 801b046:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801b048:	2300      	movs	r3, #0
 801b04a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801b04c:	2300      	movs	r3, #0
 801b04e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b050:	4b64      	ldr	r3, [pc, #400]	@ (801b1e4 <udp_input+0x21c>)
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	627b      	str	r3, [r7, #36]	@ 0x24
 801b056:	e054      	b.n	801b102 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801b058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b05a:	8a5b      	ldrh	r3, [r3, #18]
 801b05c:	89fa      	ldrh	r2, [r7, #14]
 801b05e:	429a      	cmp	r2, r3
 801b060:	d14a      	bne.n	801b0f8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801b062:	7cfb      	ldrb	r3, [r7, #19]
 801b064:	461a      	mov	r2, r3
 801b066:	6839      	ldr	r1, [r7, #0]
 801b068:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b06a:	f7ff ff49 	bl	801af00 <udp_input_local_match>
 801b06e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801b070:	2b00      	cmp	r3, #0
 801b072:	d041      	beq.n	801b0f8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801b074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b076:	7c1b      	ldrb	r3, [r3, #16]
 801b078:	f003 0304 	and.w	r3, r3, #4
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d11d      	bne.n	801b0bc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801b080:	69fb      	ldr	r3, [r7, #28]
 801b082:	2b00      	cmp	r3, #0
 801b084:	d102      	bne.n	801b08c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801b086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b088:	61fb      	str	r3, [r7, #28]
 801b08a:	e017      	b.n	801b0bc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801b08c:	7cfb      	ldrb	r3, [r7, #19]
 801b08e:	2b00      	cmp	r3, #0
 801b090:	d014      	beq.n	801b0bc <udp_input+0xf4>
 801b092:	4b53      	ldr	r3, [pc, #332]	@ (801b1e0 <udp_input+0x218>)
 801b094:	695b      	ldr	r3, [r3, #20]
 801b096:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b09a:	d10f      	bne.n	801b0bc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801b09c:	69fb      	ldr	r3, [r7, #28]
 801b09e:	681a      	ldr	r2, [r3, #0]
 801b0a0:	683b      	ldr	r3, [r7, #0]
 801b0a2:	3304      	adds	r3, #4
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	429a      	cmp	r2, r3
 801b0a8:	d008      	beq.n	801b0bc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801b0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0ac:	681a      	ldr	r2, [r3, #0]
 801b0ae:	683b      	ldr	r3, [r7, #0]
 801b0b0:	3304      	adds	r3, #4
 801b0b2:	681b      	ldr	r3, [r3, #0]
 801b0b4:	429a      	cmp	r2, r3
 801b0b6:	d101      	bne.n	801b0bc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801b0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0ba:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801b0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0be:	8a9b      	ldrh	r3, [r3, #20]
 801b0c0:	8a3a      	ldrh	r2, [r7, #16]
 801b0c2:	429a      	cmp	r2, r3
 801b0c4:	d118      	bne.n	801b0f8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0c8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801b0ca:	2b00      	cmp	r3, #0
 801b0cc:	d005      	beq.n	801b0da <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801b0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0d0:	685a      	ldr	r2, [r3, #4]
 801b0d2:	4b43      	ldr	r3, [pc, #268]	@ (801b1e0 <udp_input+0x218>)
 801b0d4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b0d6:	429a      	cmp	r2, r3
 801b0d8:	d10e      	bne.n	801b0f8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801b0da:	6a3b      	ldr	r3, [r7, #32]
 801b0dc:	2b00      	cmp	r3, #0
 801b0de:	d014      	beq.n	801b10a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801b0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0e2:	68da      	ldr	r2, [r3, #12]
 801b0e4:	6a3b      	ldr	r3, [r7, #32]
 801b0e6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801b0e8:	4b3e      	ldr	r3, [pc, #248]	@ (801b1e4 <udp_input+0x21c>)
 801b0ea:	681a      	ldr	r2, [r3, #0]
 801b0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0ee:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801b0f0:	4a3c      	ldr	r2, [pc, #240]	@ (801b1e4 <udp_input+0x21c>)
 801b0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0f4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801b0f6:	e008      	b.n	801b10a <udp_input+0x142>
      }
    }

    prev = pcb;
 801b0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0fa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0fe:	68db      	ldr	r3, [r3, #12]
 801b100:	627b      	str	r3, [r7, #36]	@ 0x24
 801b102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b104:	2b00      	cmp	r3, #0
 801b106:	d1a7      	bne.n	801b058 <udp_input+0x90>
 801b108:	e000      	b.n	801b10c <udp_input+0x144>
        break;
 801b10a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801b10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d101      	bne.n	801b116 <udp_input+0x14e>
    pcb = uncon_pcb;
 801b112:	69fb      	ldr	r3, [r7, #28]
 801b114:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801b116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b118:	2b00      	cmp	r3, #0
 801b11a:	d002      	beq.n	801b122 <udp_input+0x15a>
    for_us = 1;
 801b11c:	2301      	movs	r3, #1
 801b11e:	76fb      	strb	r3, [r7, #27]
 801b120:	e00a      	b.n	801b138 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801b122:	683b      	ldr	r3, [r7, #0]
 801b124:	3304      	adds	r3, #4
 801b126:	681a      	ldr	r2, [r3, #0]
 801b128:	4b2d      	ldr	r3, [pc, #180]	@ (801b1e0 <udp_input+0x218>)
 801b12a:	695b      	ldr	r3, [r3, #20]
 801b12c:	429a      	cmp	r2, r3
 801b12e:	bf0c      	ite	eq
 801b130:	2301      	moveq	r3, #1
 801b132:	2300      	movne	r3, #0
 801b134:	b2db      	uxtb	r3, r3
 801b136:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801b138:	7efb      	ldrb	r3, [r7, #27]
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d041      	beq.n	801b1c2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b13e:	2108      	movs	r1, #8
 801b140:	6878      	ldr	r0, [r7, #4]
 801b142:	f7f8 ff93 	bl	801406c <pbuf_remove_header>
 801b146:	4603      	mov	r3, r0
 801b148:	2b00      	cmp	r3, #0
 801b14a:	d00a      	beq.n	801b162 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801b14c:	4b20      	ldr	r3, [pc, #128]	@ (801b1d0 <udp_input+0x208>)
 801b14e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801b152:	4925      	ldr	r1, [pc, #148]	@ (801b1e8 <udp_input+0x220>)
 801b154:	4820      	ldr	r0, [pc, #128]	@ (801b1d8 <udp_input+0x210>)
 801b156:	f006 f92d 	bl	80213b4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801b15a:	6878      	ldr	r0, [r7, #4]
 801b15c:	f7f9 f80c 	bl	8014178 <pbuf_free>
      goto end;
 801b160:	e032      	b.n	801b1c8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801b162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b164:	2b00      	cmp	r3, #0
 801b166:	d012      	beq.n	801b18e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801b168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b16a:	6a1b      	ldr	r3, [r3, #32]
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d00a      	beq.n	801b186 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801b170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b172:	6a1c      	ldr	r4, [r3, #32]
 801b174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b176:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801b178:	8a3b      	ldrh	r3, [r7, #16]
 801b17a:	9300      	str	r3, [sp, #0]
 801b17c:	4b1b      	ldr	r3, [pc, #108]	@ (801b1ec <udp_input+0x224>)
 801b17e:	687a      	ldr	r2, [r7, #4]
 801b180:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b182:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801b184:	e021      	b.n	801b1ca <udp_input+0x202>
        pbuf_free(p);
 801b186:	6878      	ldr	r0, [r7, #4]
 801b188:	f7f8 fff6 	bl	8014178 <pbuf_free>
        goto end;
 801b18c:	e01c      	b.n	801b1c8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801b18e:	7cfb      	ldrb	r3, [r7, #19]
 801b190:	2b00      	cmp	r3, #0
 801b192:	d112      	bne.n	801b1ba <udp_input+0x1f2>
 801b194:	4b12      	ldr	r3, [pc, #72]	@ (801b1e0 <udp_input+0x218>)
 801b196:	695b      	ldr	r3, [r3, #20]
 801b198:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b19c:	2be0      	cmp	r3, #224	@ 0xe0
 801b19e:	d00c      	beq.n	801b1ba <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801b1a0:	4b0f      	ldr	r3, [pc, #60]	@ (801b1e0 <udp_input+0x218>)
 801b1a2:	899b      	ldrh	r3, [r3, #12]
 801b1a4:	3308      	adds	r3, #8
 801b1a6:	b29b      	uxth	r3, r3
 801b1a8:	b21b      	sxth	r3, r3
 801b1aa:	4619      	mov	r1, r3
 801b1ac:	6878      	ldr	r0, [r7, #4]
 801b1ae:	f7f8 ffd0 	bl	8014152 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801b1b2:	2103      	movs	r1, #3
 801b1b4:	6878      	ldr	r0, [r7, #4]
 801b1b6:	f003 fa23 	bl	801e600 <icmp_dest_unreach>
      pbuf_free(p);
 801b1ba:	6878      	ldr	r0, [r7, #4]
 801b1bc:	f7f8 ffdc 	bl	8014178 <pbuf_free>
  return;
 801b1c0:	e003      	b.n	801b1ca <udp_input+0x202>
    pbuf_free(p);
 801b1c2:	6878      	ldr	r0, [r7, #4]
 801b1c4:	f7f8 ffd8 	bl	8014178 <pbuf_free>
  return;
 801b1c8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801b1ca:	372c      	adds	r7, #44	@ 0x2c
 801b1cc:	46bd      	mov	sp, r7
 801b1ce:	bd90      	pop	{r4, r7, pc}
 801b1d0:	0802563c 	.word	0x0802563c
 801b1d4:	080256e0 	.word	0x080256e0
 801b1d8:	08025690 	.word	0x08025690
 801b1dc:	080256f8 	.word	0x080256f8
 801b1e0:	20004bb4 	.word	0x20004bb4
 801b1e4:	20004c44 	.word	0x20004c44
 801b1e8:	08025714 	.word	0x08025714
 801b1ec:	20004bc4 	.word	0x20004bc4

0801b1f0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801b1f0:	b580      	push	{r7, lr}
 801b1f2:	b088      	sub	sp, #32
 801b1f4:	af02      	add	r7, sp, #8
 801b1f6:	60f8      	str	r0, [r7, #12]
 801b1f8:	60b9      	str	r1, [r7, #8]
 801b1fa:	607a      	str	r2, [r7, #4]
 801b1fc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801b1fe:	68fb      	ldr	r3, [r7, #12]
 801b200:	2b00      	cmp	r3, #0
 801b202:	d109      	bne.n	801b218 <udp_sendto_if+0x28>
 801b204:	4b2e      	ldr	r3, [pc, #184]	@ (801b2c0 <udp_sendto_if+0xd0>)
 801b206:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b20a:	492e      	ldr	r1, [pc, #184]	@ (801b2c4 <udp_sendto_if+0xd4>)
 801b20c:	482e      	ldr	r0, [pc, #184]	@ (801b2c8 <udp_sendto_if+0xd8>)
 801b20e:	f006 f8d1 	bl	80213b4 <iprintf>
 801b212:	f06f 030f 	mvn.w	r3, #15
 801b216:	e04f      	b.n	801b2b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801b218:	68bb      	ldr	r3, [r7, #8]
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	d109      	bne.n	801b232 <udp_sendto_if+0x42>
 801b21e:	4b28      	ldr	r3, [pc, #160]	@ (801b2c0 <udp_sendto_if+0xd0>)
 801b220:	f240 2281 	movw	r2, #641	@ 0x281
 801b224:	4929      	ldr	r1, [pc, #164]	@ (801b2cc <udp_sendto_if+0xdc>)
 801b226:	4828      	ldr	r0, [pc, #160]	@ (801b2c8 <udp_sendto_if+0xd8>)
 801b228:	f006 f8c4 	bl	80213b4 <iprintf>
 801b22c:	f06f 030f 	mvn.w	r3, #15
 801b230:	e042      	b.n	801b2b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	2b00      	cmp	r3, #0
 801b236:	d109      	bne.n	801b24c <udp_sendto_if+0x5c>
 801b238:	4b21      	ldr	r3, [pc, #132]	@ (801b2c0 <udp_sendto_if+0xd0>)
 801b23a:	f240 2282 	movw	r2, #642	@ 0x282
 801b23e:	4924      	ldr	r1, [pc, #144]	@ (801b2d0 <udp_sendto_if+0xe0>)
 801b240:	4821      	ldr	r0, [pc, #132]	@ (801b2c8 <udp_sendto_if+0xd8>)
 801b242:	f006 f8b7 	bl	80213b4 <iprintf>
 801b246:	f06f 030f 	mvn.w	r3, #15
 801b24a:	e035      	b.n	801b2b8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801b24c:	6a3b      	ldr	r3, [r7, #32]
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d109      	bne.n	801b266 <udp_sendto_if+0x76>
 801b252:	4b1b      	ldr	r3, [pc, #108]	@ (801b2c0 <udp_sendto_if+0xd0>)
 801b254:	f240 2283 	movw	r2, #643	@ 0x283
 801b258:	491e      	ldr	r1, [pc, #120]	@ (801b2d4 <udp_sendto_if+0xe4>)
 801b25a:	481b      	ldr	r0, [pc, #108]	@ (801b2c8 <udp_sendto_if+0xd8>)
 801b25c:	f006 f8aa 	bl	80213b4 <iprintf>
 801b260:	f06f 030f 	mvn.w	r3, #15
 801b264:	e028      	b.n	801b2b8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b266:	68fb      	ldr	r3, [r7, #12]
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d009      	beq.n	801b280 <udp_sendto_if+0x90>
 801b26c:	68fb      	ldr	r3, [r7, #12]
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	2b00      	cmp	r3, #0
 801b272:	d005      	beq.n	801b280 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801b274:	68fb      	ldr	r3, [r7, #12]
 801b276:	681b      	ldr	r3, [r3, #0]
 801b278:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b27c:	2be0      	cmp	r3, #224	@ 0xe0
 801b27e:	d103      	bne.n	801b288 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801b280:	6a3b      	ldr	r3, [r7, #32]
 801b282:	3304      	adds	r3, #4
 801b284:	617b      	str	r3, [r7, #20]
 801b286:	e00b      	b.n	801b2a0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801b288:	68fb      	ldr	r3, [r7, #12]
 801b28a:	681a      	ldr	r2, [r3, #0]
 801b28c:	6a3b      	ldr	r3, [r7, #32]
 801b28e:	3304      	adds	r3, #4
 801b290:	681b      	ldr	r3, [r3, #0]
 801b292:	429a      	cmp	r2, r3
 801b294:	d002      	beq.n	801b29c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801b296:	f06f 0303 	mvn.w	r3, #3
 801b29a:	e00d      	b.n	801b2b8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801b29c:	68fb      	ldr	r3, [r7, #12]
 801b29e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801b2a0:	887a      	ldrh	r2, [r7, #2]
 801b2a2:	697b      	ldr	r3, [r7, #20]
 801b2a4:	9301      	str	r3, [sp, #4]
 801b2a6:	6a3b      	ldr	r3, [r7, #32]
 801b2a8:	9300      	str	r3, [sp, #0]
 801b2aa:	4613      	mov	r3, r2
 801b2ac:	687a      	ldr	r2, [r7, #4]
 801b2ae:	68b9      	ldr	r1, [r7, #8]
 801b2b0:	68f8      	ldr	r0, [r7, #12]
 801b2b2:	f000 f811 	bl	801b2d8 <udp_sendto_if_src>
 801b2b6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801b2b8:	4618      	mov	r0, r3
 801b2ba:	3718      	adds	r7, #24
 801b2bc:	46bd      	mov	sp, r7
 801b2be:	bd80      	pop	{r7, pc}
 801b2c0:	0802563c 	.word	0x0802563c
 801b2c4:	080257b0 	.word	0x080257b0
 801b2c8:	08025690 	.word	0x08025690
 801b2cc:	080257cc 	.word	0x080257cc
 801b2d0:	080257e8 	.word	0x080257e8
 801b2d4:	08025808 	.word	0x08025808

0801b2d8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801b2d8:	b580      	push	{r7, lr}
 801b2da:	b08c      	sub	sp, #48	@ 0x30
 801b2dc:	af04      	add	r7, sp, #16
 801b2de:	60f8      	str	r0, [r7, #12]
 801b2e0:	60b9      	str	r1, [r7, #8]
 801b2e2:	607a      	str	r2, [r7, #4]
 801b2e4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801b2e6:	68fb      	ldr	r3, [r7, #12]
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	d109      	bne.n	801b300 <udp_sendto_if_src+0x28>
 801b2ec:	4b73      	ldr	r3, [pc, #460]	@ (801b4bc <udp_sendto_if_src+0x1e4>)
 801b2ee:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801b2f2:	4973      	ldr	r1, [pc, #460]	@ (801b4c0 <udp_sendto_if_src+0x1e8>)
 801b2f4:	4873      	ldr	r0, [pc, #460]	@ (801b4c4 <udp_sendto_if_src+0x1ec>)
 801b2f6:	f006 f85d 	bl	80213b4 <iprintf>
 801b2fa:	f06f 030f 	mvn.w	r3, #15
 801b2fe:	e0d8      	b.n	801b4b2 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801b300:	68bb      	ldr	r3, [r7, #8]
 801b302:	2b00      	cmp	r3, #0
 801b304:	d109      	bne.n	801b31a <udp_sendto_if_src+0x42>
 801b306:	4b6d      	ldr	r3, [pc, #436]	@ (801b4bc <udp_sendto_if_src+0x1e4>)
 801b308:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801b30c:	496e      	ldr	r1, [pc, #440]	@ (801b4c8 <udp_sendto_if_src+0x1f0>)
 801b30e:	486d      	ldr	r0, [pc, #436]	@ (801b4c4 <udp_sendto_if_src+0x1ec>)
 801b310:	f006 f850 	bl	80213b4 <iprintf>
 801b314:	f06f 030f 	mvn.w	r3, #15
 801b318:	e0cb      	b.n	801b4b2 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	2b00      	cmp	r3, #0
 801b31e:	d109      	bne.n	801b334 <udp_sendto_if_src+0x5c>
 801b320:	4b66      	ldr	r3, [pc, #408]	@ (801b4bc <udp_sendto_if_src+0x1e4>)
 801b322:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801b326:	4969      	ldr	r1, [pc, #420]	@ (801b4cc <udp_sendto_if_src+0x1f4>)
 801b328:	4866      	ldr	r0, [pc, #408]	@ (801b4c4 <udp_sendto_if_src+0x1ec>)
 801b32a:	f006 f843 	bl	80213b4 <iprintf>
 801b32e:	f06f 030f 	mvn.w	r3, #15
 801b332:	e0be      	b.n	801b4b2 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801b334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b336:	2b00      	cmp	r3, #0
 801b338:	d109      	bne.n	801b34e <udp_sendto_if_src+0x76>
 801b33a:	4b60      	ldr	r3, [pc, #384]	@ (801b4bc <udp_sendto_if_src+0x1e4>)
 801b33c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801b340:	4963      	ldr	r1, [pc, #396]	@ (801b4d0 <udp_sendto_if_src+0x1f8>)
 801b342:	4860      	ldr	r0, [pc, #384]	@ (801b4c4 <udp_sendto_if_src+0x1ec>)
 801b344:	f006 f836 	bl	80213b4 <iprintf>
 801b348:	f06f 030f 	mvn.w	r3, #15
 801b34c:	e0b1      	b.n	801b4b2 <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801b34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b350:	2b00      	cmp	r3, #0
 801b352:	d109      	bne.n	801b368 <udp_sendto_if_src+0x90>
 801b354:	4b59      	ldr	r3, [pc, #356]	@ (801b4bc <udp_sendto_if_src+0x1e4>)
 801b356:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801b35a:	495e      	ldr	r1, [pc, #376]	@ (801b4d4 <udp_sendto_if_src+0x1fc>)
 801b35c:	4859      	ldr	r0, [pc, #356]	@ (801b4c4 <udp_sendto_if_src+0x1ec>)
 801b35e:	f006 f829 	bl	80213b4 <iprintf>
 801b362:	f06f 030f 	mvn.w	r3, #15
 801b366:	e0a4      	b.n	801b4b2 <udp_sendto_if_src+0x1da>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801b368:	68fb      	ldr	r3, [r7, #12]
 801b36a:	8a5b      	ldrh	r3, [r3, #18]
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d10f      	bne.n	801b390 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b370:	68f9      	ldr	r1, [r7, #12]
 801b372:	68fb      	ldr	r3, [r7, #12]
 801b374:	8a5b      	ldrh	r3, [r3, #18]
 801b376:	461a      	mov	r2, r3
 801b378:	68f8      	ldr	r0, [r7, #12]
 801b37a:	f000 f8af 	bl	801b4dc <udp_bind>
 801b37e:	4603      	mov	r3, r0
 801b380:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801b382:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b386:	2b00      	cmp	r3, #0
 801b388:	d002      	beq.n	801b390 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801b38a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b38e:	e090      	b.n	801b4b2 <udp_sendto_if_src+0x1da>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801b390:	68bb      	ldr	r3, [r7, #8]
 801b392:	891b      	ldrh	r3, [r3, #8]
 801b394:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801b398:	4293      	cmp	r3, r2
 801b39a:	d902      	bls.n	801b3a2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801b39c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b3a0:	e087      	b.n	801b4b2 <udp_sendto_if_src+0x1da>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801b3a2:	2108      	movs	r1, #8
 801b3a4:	68b8      	ldr	r0, [r7, #8]
 801b3a6:	f7f8 fe51 	bl	801404c <pbuf_add_header>
 801b3aa:	4603      	mov	r3, r0
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	d015      	beq.n	801b3dc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801b3b0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b3b4:	2108      	movs	r1, #8
 801b3b6:	2022      	movs	r0, #34	@ 0x22
 801b3b8:	f7f8 fbfa 	bl	8013bb0 <pbuf_alloc>
 801b3bc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801b3be:	69fb      	ldr	r3, [r7, #28]
 801b3c0:	2b00      	cmp	r3, #0
 801b3c2:	d102      	bne.n	801b3ca <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801b3c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b3c8:	e073      	b.n	801b4b2 <udp_sendto_if_src+0x1da>
    }
    if (p->tot_len != 0) {
 801b3ca:	68bb      	ldr	r3, [r7, #8]
 801b3cc:	891b      	ldrh	r3, [r3, #8]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d006      	beq.n	801b3e0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801b3d2:	68b9      	ldr	r1, [r7, #8]
 801b3d4:	69f8      	ldr	r0, [r7, #28]
 801b3d6:	f7f8 fff3 	bl	80143c0 <pbuf_chain>
 801b3da:	e001      	b.n	801b3e0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801b3dc:	68bb      	ldr	r3, [r7, #8]
 801b3de:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801b3e0:	69fb      	ldr	r3, [r7, #28]
 801b3e2:	895b      	ldrh	r3, [r3, #10]
 801b3e4:	2b07      	cmp	r3, #7
 801b3e6:	d806      	bhi.n	801b3f6 <udp_sendto_if_src+0x11e>
 801b3e8:	4b34      	ldr	r3, [pc, #208]	@ (801b4bc <udp_sendto_if_src+0x1e4>)
 801b3ea:	f240 320d 	movw	r2, #781	@ 0x30d
 801b3ee:	493a      	ldr	r1, [pc, #232]	@ (801b4d8 <udp_sendto_if_src+0x200>)
 801b3f0:	4834      	ldr	r0, [pc, #208]	@ (801b4c4 <udp_sendto_if_src+0x1ec>)
 801b3f2:	f005 ffdf 	bl	80213b4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801b3f6:	69fb      	ldr	r3, [r7, #28]
 801b3f8:	685b      	ldr	r3, [r3, #4]
 801b3fa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801b3fc:	68fb      	ldr	r3, [r7, #12]
 801b3fe:	8a5b      	ldrh	r3, [r3, #18]
 801b400:	4618      	mov	r0, r3
 801b402:	f7f7 f8fb 	bl	80125fc <lwip_htons>
 801b406:	4603      	mov	r3, r0
 801b408:	461a      	mov	r2, r3
 801b40a:	697b      	ldr	r3, [r7, #20]
 801b40c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801b40e:	887b      	ldrh	r3, [r7, #2]
 801b410:	4618      	mov	r0, r3
 801b412:	f7f7 f8f3 	bl	80125fc <lwip_htons>
 801b416:	4603      	mov	r3, r0
 801b418:	461a      	mov	r2, r3
 801b41a:	697b      	ldr	r3, [r7, #20]
 801b41c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801b41e:	697b      	ldr	r3, [r7, #20]
 801b420:	2200      	movs	r2, #0
 801b422:	719a      	strb	r2, [r3, #6]
 801b424:	2200      	movs	r2, #0
 801b426:	71da      	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if LWIP_MULTICAST_TX_OPTIONS
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 801b428:	68fb      	ldr	r3, [r7, #12]
 801b42a:	7c1b      	ldrb	r3, [r3, #16]
 801b42c:	f003 0308 	and.w	r3, r3, #8
 801b430:	2b00      	cmp	r3, #0
 801b432:	d00c      	beq.n	801b44e <udp_sendto_if_src+0x176>
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	681b      	ldr	r3, [r3, #0]
 801b438:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b43c:	2be0      	cmp	r3, #224	@ 0xe0
 801b43e:	d106      	bne.n	801b44e <udp_sendto_if_src+0x176>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 801b440:	69fb      	ldr	r3, [r7, #28]
 801b442:	7b5b      	ldrb	r3, [r3, #13]
 801b444:	f043 0304 	orr.w	r3, r3, #4
 801b448:	b2da      	uxtb	r2, r3
 801b44a:	69fb      	ldr	r3, [r7, #28]
 801b44c:	735a      	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801b44e:	69fb      	ldr	r3, [r7, #28]
 801b450:	891b      	ldrh	r3, [r3, #8]
 801b452:	4618      	mov	r0, r3
 801b454:	f7f7 f8d2 	bl	80125fc <lwip_htons>
 801b458:	4603      	mov	r3, r0
 801b45a:	461a      	mov	r2, r3
 801b45c:	697b      	ldr	r3, [r7, #20]
 801b45e:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801b460:	2311      	movs	r3, #17
 801b462:	74fb      	strb	r3, [r7, #19]
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	681b      	ldr	r3, [r3, #0]
 801b468:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b46c:	2be0      	cmp	r3, #224	@ 0xe0
 801b46e:	d102      	bne.n	801b476 <udp_sendto_if_src+0x19e>
 801b470:	68fb      	ldr	r3, [r7, #12]
 801b472:	7f5b      	ldrb	r3, [r3, #29]
 801b474:	e001      	b.n	801b47a <udp_sendto_if_src+0x1a2>
 801b476:	68fb      	ldr	r3, [r7, #12]
 801b478:	7adb      	ldrb	r3, [r3, #11]
 801b47a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801b47c:	68fb      	ldr	r3, [r7, #12]
 801b47e:	7a9b      	ldrb	r3, [r3, #10]
 801b480:	7cb9      	ldrb	r1, [r7, #18]
 801b482:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b484:	9202      	str	r2, [sp, #8]
 801b486:	7cfa      	ldrb	r2, [r7, #19]
 801b488:	9201      	str	r2, [sp, #4]
 801b48a:	9300      	str	r3, [sp, #0]
 801b48c:	460b      	mov	r3, r1
 801b48e:	687a      	ldr	r2, [r7, #4]
 801b490:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b492:	69f8      	ldr	r0, [r7, #28]
 801b494:	f003 fecb 	bl	801f22e <ip4_output_if_src>
 801b498:	4603      	mov	r3, r0
 801b49a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801b49c:	69fa      	ldr	r2, [r7, #28]
 801b49e:	68bb      	ldr	r3, [r7, #8]
 801b4a0:	429a      	cmp	r2, r3
 801b4a2:	d004      	beq.n	801b4ae <udp_sendto_if_src+0x1d6>
    /* free the header pbuf */
    pbuf_free(q);
 801b4a4:	69f8      	ldr	r0, [r7, #28]
 801b4a6:	f7f8 fe67 	bl	8014178 <pbuf_free>
    q = NULL;
 801b4aa:	2300      	movs	r3, #0
 801b4ac:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801b4ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801b4b2:	4618      	mov	r0, r3
 801b4b4:	3720      	adds	r7, #32
 801b4b6:	46bd      	mov	sp, r7
 801b4b8:	bd80      	pop	{r7, pc}
 801b4ba:	bf00      	nop
 801b4bc:	0802563c 	.word	0x0802563c
 801b4c0:	08025828 	.word	0x08025828
 801b4c4:	08025690 	.word	0x08025690
 801b4c8:	08025848 	.word	0x08025848
 801b4cc:	08025868 	.word	0x08025868
 801b4d0:	0802588c 	.word	0x0802588c
 801b4d4:	080258b0 	.word	0x080258b0
 801b4d8:	080258d4 	.word	0x080258d4

0801b4dc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b4dc:	b580      	push	{r7, lr}
 801b4de:	b086      	sub	sp, #24
 801b4e0:	af00      	add	r7, sp, #0
 801b4e2:	60f8      	str	r0, [r7, #12]
 801b4e4:	60b9      	str	r1, [r7, #8]
 801b4e6:	4613      	mov	r3, r2
 801b4e8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801b4ea:	68bb      	ldr	r3, [r7, #8]
 801b4ec:	2b00      	cmp	r3, #0
 801b4ee:	d101      	bne.n	801b4f4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801b4f0:	4b39      	ldr	r3, [pc, #228]	@ (801b5d8 <udp_bind+0xfc>)
 801b4f2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b4f4:	68fb      	ldr	r3, [r7, #12]
 801b4f6:	2b00      	cmp	r3, #0
 801b4f8:	d109      	bne.n	801b50e <udp_bind+0x32>
 801b4fa:	4b38      	ldr	r3, [pc, #224]	@ (801b5dc <udp_bind+0x100>)
 801b4fc:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801b500:	4937      	ldr	r1, [pc, #220]	@ (801b5e0 <udp_bind+0x104>)
 801b502:	4838      	ldr	r0, [pc, #224]	@ (801b5e4 <udp_bind+0x108>)
 801b504:	f005 ff56 	bl	80213b4 <iprintf>
 801b508:	f06f 030f 	mvn.w	r3, #15
 801b50c:	e060      	b.n	801b5d0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801b50e:	2300      	movs	r3, #0
 801b510:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b512:	4b35      	ldr	r3, [pc, #212]	@ (801b5e8 <udp_bind+0x10c>)
 801b514:	681b      	ldr	r3, [r3, #0]
 801b516:	617b      	str	r3, [r7, #20]
 801b518:	e009      	b.n	801b52e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801b51a:	68fa      	ldr	r2, [r7, #12]
 801b51c:	697b      	ldr	r3, [r7, #20]
 801b51e:	429a      	cmp	r2, r3
 801b520:	d102      	bne.n	801b528 <udp_bind+0x4c>
      rebind = 1;
 801b522:	2301      	movs	r3, #1
 801b524:	74fb      	strb	r3, [r7, #19]
      break;
 801b526:	e005      	b.n	801b534 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b528:	697b      	ldr	r3, [r7, #20]
 801b52a:	68db      	ldr	r3, [r3, #12]
 801b52c:	617b      	str	r3, [r7, #20]
 801b52e:	697b      	ldr	r3, [r7, #20]
 801b530:	2b00      	cmp	r3, #0
 801b532:	d1f2      	bne.n	801b51a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801b534:	88fb      	ldrh	r3, [r7, #6]
 801b536:	2b00      	cmp	r3, #0
 801b538:	d109      	bne.n	801b54e <udp_bind+0x72>
    port = udp_new_port();
 801b53a:	f7ff fca9 	bl	801ae90 <udp_new_port>
 801b53e:	4603      	mov	r3, r0
 801b540:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801b542:	88fb      	ldrh	r3, [r7, #6]
 801b544:	2b00      	cmp	r3, #0
 801b546:	d12c      	bne.n	801b5a2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801b548:	f06f 0307 	mvn.w	r3, #7
 801b54c:	e040      	b.n	801b5d0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b54e:	4b26      	ldr	r3, [pc, #152]	@ (801b5e8 <udp_bind+0x10c>)
 801b550:	681b      	ldr	r3, [r3, #0]
 801b552:	617b      	str	r3, [r7, #20]
 801b554:	e022      	b.n	801b59c <udp_bind+0xc0>
      if (pcb != ipcb) {
 801b556:	68fa      	ldr	r2, [r7, #12]
 801b558:	697b      	ldr	r3, [r7, #20]
 801b55a:	429a      	cmp	r2, r3
 801b55c:	d01b      	beq.n	801b596 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801b55e:	697b      	ldr	r3, [r7, #20]
 801b560:	8a5b      	ldrh	r3, [r3, #18]
 801b562:	88fa      	ldrh	r2, [r7, #6]
 801b564:	429a      	cmp	r2, r3
 801b566:	d116      	bne.n	801b596 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b568:	697b      	ldr	r3, [r7, #20]
 801b56a:	681a      	ldr	r2, [r3, #0]
 801b56c:	68bb      	ldr	r3, [r7, #8]
 801b56e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801b570:	429a      	cmp	r2, r3
 801b572:	d00d      	beq.n	801b590 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b574:	68bb      	ldr	r3, [r7, #8]
 801b576:	2b00      	cmp	r3, #0
 801b578:	d00a      	beq.n	801b590 <udp_bind+0xb4>
 801b57a:	68bb      	ldr	r3, [r7, #8]
 801b57c:	681b      	ldr	r3, [r3, #0]
 801b57e:	2b00      	cmp	r3, #0
 801b580:	d006      	beq.n	801b590 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b582:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b584:	2b00      	cmp	r3, #0
 801b586:	d003      	beq.n	801b590 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b588:	697b      	ldr	r3, [r7, #20]
 801b58a:	681b      	ldr	r3, [r3, #0]
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d102      	bne.n	801b596 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801b590:	f06f 0307 	mvn.w	r3, #7
 801b594:	e01c      	b.n	801b5d0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b596:	697b      	ldr	r3, [r7, #20]
 801b598:	68db      	ldr	r3, [r3, #12]
 801b59a:	617b      	str	r3, [r7, #20]
 801b59c:	697b      	ldr	r3, [r7, #20]
 801b59e:	2b00      	cmp	r3, #0
 801b5a0:	d1d9      	bne.n	801b556 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801b5a2:	68bb      	ldr	r3, [r7, #8]
 801b5a4:	2b00      	cmp	r3, #0
 801b5a6:	d002      	beq.n	801b5ae <udp_bind+0xd2>
 801b5a8:	68bb      	ldr	r3, [r7, #8]
 801b5aa:	681b      	ldr	r3, [r3, #0]
 801b5ac:	e000      	b.n	801b5b0 <udp_bind+0xd4>
 801b5ae:	2300      	movs	r3, #0
 801b5b0:	68fa      	ldr	r2, [r7, #12]
 801b5b2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801b5b4:	68fb      	ldr	r3, [r7, #12]
 801b5b6:	88fa      	ldrh	r2, [r7, #6]
 801b5b8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801b5ba:	7cfb      	ldrb	r3, [r7, #19]
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d106      	bne.n	801b5ce <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801b5c0:	4b09      	ldr	r3, [pc, #36]	@ (801b5e8 <udp_bind+0x10c>)
 801b5c2:	681a      	ldr	r2, [r3, #0]
 801b5c4:	68fb      	ldr	r3, [r7, #12]
 801b5c6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801b5c8:	4a07      	ldr	r2, [pc, #28]	@ (801b5e8 <udp_bind+0x10c>)
 801b5ca:	68fb      	ldr	r3, [r7, #12]
 801b5cc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801b5ce:	2300      	movs	r3, #0
}
 801b5d0:	4618      	mov	r0, r3
 801b5d2:	3718      	adds	r7, #24
 801b5d4:	46bd      	mov	sp, r7
 801b5d6:	bd80      	pop	{r7, pc}
 801b5d8:	08027754 	.word	0x08027754
 801b5dc:	0802563c 	.word	0x0802563c
 801b5e0:	08025904 	.word	0x08025904
 801b5e4:	08025690 	.word	0x08025690
 801b5e8:	20004c44 	.word	0x20004c44

0801b5ec <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b5ec:	b580      	push	{r7, lr}
 801b5ee:	b086      	sub	sp, #24
 801b5f0:	af00      	add	r7, sp, #0
 801b5f2:	60f8      	str	r0, [r7, #12]
 801b5f4:	60b9      	str	r1, [r7, #8]
 801b5f6:	4613      	mov	r3, r2
 801b5f8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801b5fa:	68fb      	ldr	r3, [r7, #12]
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	d109      	bne.n	801b614 <udp_connect+0x28>
 801b600:	4b2c      	ldr	r3, [pc, #176]	@ (801b6b4 <udp_connect+0xc8>)
 801b602:	f240 4235 	movw	r2, #1077	@ 0x435
 801b606:	492c      	ldr	r1, [pc, #176]	@ (801b6b8 <udp_connect+0xcc>)
 801b608:	482c      	ldr	r0, [pc, #176]	@ (801b6bc <udp_connect+0xd0>)
 801b60a:	f005 fed3 	bl	80213b4 <iprintf>
 801b60e:	f06f 030f 	mvn.w	r3, #15
 801b612:	e04b      	b.n	801b6ac <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801b614:	68bb      	ldr	r3, [r7, #8]
 801b616:	2b00      	cmp	r3, #0
 801b618:	d109      	bne.n	801b62e <udp_connect+0x42>
 801b61a:	4b26      	ldr	r3, [pc, #152]	@ (801b6b4 <udp_connect+0xc8>)
 801b61c:	f240 4236 	movw	r2, #1078	@ 0x436
 801b620:	4927      	ldr	r1, [pc, #156]	@ (801b6c0 <udp_connect+0xd4>)
 801b622:	4826      	ldr	r0, [pc, #152]	@ (801b6bc <udp_connect+0xd0>)
 801b624:	f005 fec6 	bl	80213b4 <iprintf>
 801b628:	f06f 030f 	mvn.w	r3, #15
 801b62c:	e03e      	b.n	801b6ac <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801b62e:	68fb      	ldr	r3, [r7, #12]
 801b630:	8a5b      	ldrh	r3, [r3, #18]
 801b632:	2b00      	cmp	r3, #0
 801b634:	d10f      	bne.n	801b656 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b636:	68f9      	ldr	r1, [r7, #12]
 801b638:	68fb      	ldr	r3, [r7, #12]
 801b63a:	8a5b      	ldrh	r3, [r3, #18]
 801b63c:	461a      	mov	r2, r3
 801b63e:	68f8      	ldr	r0, [r7, #12]
 801b640:	f7ff ff4c 	bl	801b4dc <udp_bind>
 801b644:	4603      	mov	r3, r0
 801b646:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801b648:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	d002      	beq.n	801b656 <udp_connect+0x6a>
      return err;
 801b650:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b654:	e02a      	b.n	801b6ac <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801b656:	68bb      	ldr	r3, [r7, #8]
 801b658:	2b00      	cmp	r3, #0
 801b65a:	d002      	beq.n	801b662 <udp_connect+0x76>
 801b65c:	68bb      	ldr	r3, [r7, #8]
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	e000      	b.n	801b664 <udp_connect+0x78>
 801b662:	2300      	movs	r3, #0
 801b664:	68fa      	ldr	r2, [r7, #12]
 801b666:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801b668:	68fb      	ldr	r3, [r7, #12]
 801b66a:	88fa      	ldrh	r2, [r7, #6]
 801b66c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801b66e:	68fb      	ldr	r3, [r7, #12]
 801b670:	7c1b      	ldrb	r3, [r3, #16]
 801b672:	f043 0304 	orr.w	r3, r3, #4
 801b676:	b2da      	uxtb	r2, r3
 801b678:	68fb      	ldr	r3, [r7, #12]
 801b67a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b67c:	4b11      	ldr	r3, [pc, #68]	@ (801b6c4 <udp_connect+0xd8>)
 801b67e:	681b      	ldr	r3, [r3, #0]
 801b680:	617b      	str	r3, [r7, #20]
 801b682:	e008      	b.n	801b696 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801b684:	68fa      	ldr	r2, [r7, #12]
 801b686:	697b      	ldr	r3, [r7, #20]
 801b688:	429a      	cmp	r2, r3
 801b68a:	d101      	bne.n	801b690 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801b68c:	2300      	movs	r3, #0
 801b68e:	e00d      	b.n	801b6ac <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b690:	697b      	ldr	r3, [r7, #20]
 801b692:	68db      	ldr	r3, [r3, #12]
 801b694:	617b      	str	r3, [r7, #20]
 801b696:	697b      	ldr	r3, [r7, #20]
 801b698:	2b00      	cmp	r3, #0
 801b69a:	d1f3      	bne.n	801b684 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801b69c:	4b09      	ldr	r3, [pc, #36]	@ (801b6c4 <udp_connect+0xd8>)
 801b69e:	681a      	ldr	r2, [r3, #0]
 801b6a0:	68fb      	ldr	r3, [r7, #12]
 801b6a2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801b6a4:	4a07      	ldr	r2, [pc, #28]	@ (801b6c4 <udp_connect+0xd8>)
 801b6a6:	68fb      	ldr	r3, [r7, #12]
 801b6a8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801b6aa:	2300      	movs	r3, #0
}
 801b6ac:	4618      	mov	r0, r3
 801b6ae:	3718      	adds	r7, #24
 801b6b0:	46bd      	mov	sp, r7
 801b6b2:	bd80      	pop	{r7, pc}
 801b6b4:	0802563c 	.word	0x0802563c
 801b6b8:	0802591c 	.word	0x0802591c
 801b6bc:	08025690 	.word	0x08025690
 801b6c0:	08025938 	.word	0x08025938
 801b6c4:	20004c44 	.word	0x20004c44

0801b6c8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801b6c8:	b580      	push	{r7, lr}
 801b6ca:	b084      	sub	sp, #16
 801b6cc:	af00      	add	r7, sp, #0
 801b6ce:	60f8      	str	r0, [r7, #12]
 801b6d0:	60b9      	str	r1, [r7, #8]
 801b6d2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801b6d4:	68fb      	ldr	r3, [r7, #12]
 801b6d6:	2b00      	cmp	r3, #0
 801b6d8:	d107      	bne.n	801b6ea <udp_recv+0x22>
 801b6da:	4b08      	ldr	r3, [pc, #32]	@ (801b6fc <udp_recv+0x34>)
 801b6dc:	f240 428a 	movw	r2, #1162	@ 0x48a
 801b6e0:	4907      	ldr	r1, [pc, #28]	@ (801b700 <udp_recv+0x38>)
 801b6e2:	4808      	ldr	r0, [pc, #32]	@ (801b704 <udp_recv+0x3c>)
 801b6e4:	f005 fe66 	bl	80213b4 <iprintf>
 801b6e8:	e005      	b.n	801b6f6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801b6ea:	68fb      	ldr	r3, [r7, #12]
 801b6ec:	68ba      	ldr	r2, [r7, #8]
 801b6ee:	621a      	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
 801b6f0:	68fb      	ldr	r3, [r7, #12]
 801b6f2:	687a      	ldr	r2, [r7, #4]
 801b6f4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801b6f6:	3710      	adds	r7, #16
 801b6f8:	46bd      	mov	sp, r7
 801b6fa:	bd80      	pop	{r7, pc}
 801b6fc:	0802563c 	.word	0x0802563c
 801b700:	08025970 	.word	0x08025970
 801b704:	08025690 	.word	0x08025690

0801b708 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801b708:	b580      	push	{r7, lr}
 801b70a:	b084      	sub	sp, #16
 801b70c:	af00      	add	r7, sp, #0
 801b70e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	2b00      	cmp	r3, #0
 801b714:	d107      	bne.n	801b726 <udp_remove+0x1e>
 801b716:	4b19      	ldr	r3, [pc, #100]	@ (801b77c <udp_remove+0x74>)
 801b718:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801b71c:	4918      	ldr	r1, [pc, #96]	@ (801b780 <udp_remove+0x78>)
 801b71e:	4819      	ldr	r0, [pc, #100]	@ (801b784 <udp_remove+0x7c>)
 801b720:	f005 fe48 	bl	80213b4 <iprintf>
 801b724:	e026      	b.n	801b774 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801b726:	4b18      	ldr	r3, [pc, #96]	@ (801b788 <udp_remove+0x80>)
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	687a      	ldr	r2, [r7, #4]
 801b72c:	429a      	cmp	r2, r3
 801b72e:	d105      	bne.n	801b73c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801b730:	4b15      	ldr	r3, [pc, #84]	@ (801b788 <udp_remove+0x80>)
 801b732:	681b      	ldr	r3, [r3, #0]
 801b734:	68db      	ldr	r3, [r3, #12]
 801b736:	4a14      	ldr	r2, [pc, #80]	@ (801b788 <udp_remove+0x80>)
 801b738:	6013      	str	r3, [r2, #0]
 801b73a:	e017      	b.n	801b76c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b73c:	4b12      	ldr	r3, [pc, #72]	@ (801b788 <udp_remove+0x80>)
 801b73e:	681b      	ldr	r3, [r3, #0]
 801b740:	60fb      	str	r3, [r7, #12]
 801b742:	e010      	b.n	801b766 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801b744:	68fb      	ldr	r3, [r7, #12]
 801b746:	68db      	ldr	r3, [r3, #12]
 801b748:	2b00      	cmp	r3, #0
 801b74a:	d009      	beq.n	801b760 <udp_remove+0x58>
 801b74c:	68fb      	ldr	r3, [r7, #12]
 801b74e:	68db      	ldr	r3, [r3, #12]
 801b750:	687a      	ldr	r2, [r7, #4]
 801b752:	429a      	cmp	r2, r3
 801b754:	d104      	bne.n	801b760 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	68da      	ldr	r2, [r3, #12]
 801b75a:	68fb      	ldr	r3, [r7, #12]
 801b75c:	60da      	str	r2, [r3, #12]
        break;
 801b75e:	e005      	b.n	801b76c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b760:	68fb      	ldr	r3, [r7, #12]
 801b762:	68db      	ldr	r3, [r3, #12]
 801b764:	60fb      	str	r3, [r7, #12]
 801b766:	68fb      	ldr	r3, [r7, #12]
 801b768:	2b00      	cmp	r3, #0
 801b76a:	d1eb      	bne.n	801b744 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801b76c:	6879      	ldr	r1, [r7, #4]
 801b76e:	2000      	movs	r0, #0
 801b770:	f7f7 fe16 	bl	80133a0 <memp_free>
}
 801b774:	3710      	adds	r7, #16
 801b776:	46bd      	mov	sp, r7
 801b778:	bd80      	pop	{r7, pc}
 801b77a:	bf00      	nop
 801b77c:	0802563c 	.word	0x0802563c
 801b780:	08025988 	.word	0x08025988
 801b784:	08025690 	.word	0x08025690
 801b788:	20004c44 	.word	0x20004c44

0801b78c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801b78c:	b580      	push	{r7, lr}
 801b78e:	b082      	sub	sp, #8
 801b790:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801b792:	2000      	movs	r0, #0
 801b794:	f7f7 fd94 	bl	80132c0 <memp_malloc>
 801b798:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	d00a      	beq.n	801b7b6 <udp_new+0x2a>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801b7a0:	2228      	movs	r2, #40	@ 0x28
 801b7a2:	2100      	movs	r1, #0
 801b7a4:	6878      	ldr	r0, [r7, #4]
 801b7a6:	f005 ffd5 	bl	8021754 <memset>
    pcb->ttl = UDP_TTL;
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	22ff      	movs	r2, #255	@ 0xff
 801b7ae:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	22ff      	movs	r2, #255	@ 0xff
 801b7b4:	775a      	strb	r2, [r3, #29]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801b7b6:	687b      	ldr	r3, [r7, #4]
}
 801b7b8:	4618      	mov	r0, r3
 801b7ba:	3708      	adds	r7, #8
 801b7bc:	46bd      	mov	sp, r7
 801b7be:	bd80      	pop	{r7, pc}

0801b7c0 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801b7c0:	b580      	push	{r7, lr}
 801b7c2:	b084      	sub	sp, #16
 801b7c4:	af00      	add	r7, sp, #0
 801b7c6:	4603      	mov	r3, r0
 801b7c8:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801b7ca:	f7ff ffdf 	bl	801b78c <udp_new>
 801b7ce:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801b7d0:	68fb      	ldr	r3, [r7, #12]
}
 801b7d2:	4618      	mov	r0, r3
 801b7d4:	3710      	adds	r7, #16
 801b7d6:	46bd      	mov	sp, r7
 801b7d8:	bd80      	pop	{r7, pc}
	...

0801b7dc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801b7dc:	b480      	push	{r7}
 801b7de:	b085      	sub	sp, #20
 801b7e0:	af00      	add	r7, sp, #0
 801b7e2:	6078      	str	r0, [r7, #4]
 801b7e4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	d01e      	beq.n	801b82a <udp_netif_ip_addr_changed+0x4e>
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	681b      	ldr	r3, [r3, #0]
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	d01a      	beq.n	801b82a <udp_netif_ip_addr_changed+0x4e>
 801b7f4:	683b      	ldr	r3, [r7, #0]
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d017      	beq.n	801b82a <udp_netif_ip_addr_changed+0x4e>
 801b7fa:	683b      	ldr	r3, [r7, #0]
 801b7fc:	681b      	ldr	r3, [r3, #0]
 801b7fe:	2b00      	cmp	r3, #0
 801b800:	d013      	beq.n	801b82a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b802:	4b0d      	ldr	r3, [pc, #52]	@ (801b838 <udp_netif_ip_addr_changed+0x5c>)
 801b804:	681b      	ldr	r3, [r3, #0]
 801b806:	60fb      	str	r3, [r7, #12]
 801b808:	e00c      	b.n	801b824 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801b80a:	68fb      	ldr	r3, [r7, #12]
 801b80c:	681a      	ldr	r2, [r3, #0]
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	681b      	ldr	r3, [r3, #0]
 801b812:	429a      	cmp	r2, r3
 801b814:	d103      	bne.n	801b81e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801b816:	683b      	ldr	r3, [r7, #0]
 801b818:	681a      	ldr	r2, [r3, #0]
 801b81a:	68fb      	ldr	r3, [r7, #12]
 801b81c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b81e:	68fb      	ldr	r3, [r7, #12]
 801b820:	68db      	ldr	r3, [r3, #12]
 801b822:	60fb      	str	r3, [r7, #12]
 801b824:	68fb      	ldr	r3, [r7, #12]
 801b826:	2b00      	cmp	r3, #0
 801b828:	d1ef      	bne.n	801b80a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801b82a:	bf00      	nop
 801b82c:	3714      	adds	r7, #20
 801b82e:	46bd      	mov	sp, r7
 801b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b834:	4770      	bx	lr
 801b836:	bf00      	nop
 801b838:	20004c44 	.word	0x20004c44

0801b83c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801b83c:	b580      	push	{r7, lr}
 801b83e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801b840:	4b20      	ldr	r3, [pc, #128]	@ (801b8c4 <dhcp_inc_pcb_refcount+0x88>)
 801b842:	781b      	ldrb	r3, [r3, #0]
 801b844:	2b00      	cmp	r3, #0
 801b846:	d133      	bne.n	801b8b0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801b848:	4b1f      	ldr	r3, [pc, #124]	@ (801b8c8 <dhcp_inc_pcb_refcount+0x8c>)
 801b84a:	681b      	ldr	r3, [r3, #0]
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d005      	beq.n	801b85c <dhcp_inc_pcb_refcount+0x20>
 801b850:	4b1e      	ldr	r3, [pc, #120]	@ (801b8cc <dhcp_inc_pcb_refcount+0x90>)
 801b852:	22e5      	movs	r2, #229	@ 0xe5
 801b854:	491e      	ldr	r1, [pc, #120]	@ (801b8d0 <dhcp_inc_pcb_refcount+0x94>)
 801b856:	481f      	ldr	r0, [pc, #124]	@ (801b8d4 <dhcp_inc_pcb_refcount+0x98>)
 801b858:	f005 fdac 	bl	80213b4 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801b85c:	f7ff ff96 	bl	801b78c <udp_new>
 801b860:	4603      	mov	r3, r0
 801b862:	4a19      	ldr	r2, [pc, #100]	@ (801b8c8 <dhcp_inc_pcb_refcount+0x8c>)
 801b864:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801b866:	4b18      	ldr	r3, [pc, #96]	@ (801b8c8 <dhcp_inc_pcb_refcount+0x8c>)
 801b868:	681b      	ldr	r3, [r3, #0]
 801b86a:	2b00      	cmp	r3, #0
 801b86c:	d102      	bne.n	801b874 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801b86e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b872:	e024      	b.n	801b8be <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801b874:	4b14      	ldr	r3, [pc, #80]	@ (801b8c8 <dhcp_inc_pcb_refcount+0x8c>)
 801b876:	681b      	ldr	r3, [r3, #0]
 801b878:	7a5a      	ldrb	r2, [r3, #9]
 801b87a:	4b13      	ldr	r3, [pc, #76]	@ (801b8c8 <dhcp_inc_pcb_refcount+0x8c>)
 801b87c:	681b      	ldr	r3, [r3, #0]
 801b87e:	f042 0220 	orr.w	r2, r2, #32
 801b882:	b2d2      	uxtb	r2, r2
 801b884:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801b886:	4b10      	ldr	r3, [pc, #64]	@ (801b8c8 <dhcp_inc_pcb_refcount+0x8c>)
 801b888:	681b      	ldr	r3, [r3, #0]
 801b88a:	2244      	movs	r2, #68	@ 0x44
 801b88c:	4912      	ldr	r1, [pc, #72]	@ (801b8d8 <dhcp_inc_pcb_refcount+0x9c>)
 801b88e:	4618      	mov	r0, r3
 801b890:	f7ff fe24 	bl	801b4dc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801b894:	4b0c      	ldr	r3, [pc, #48]	@ (801b8c8 <dhcp_inc_pcb_refcount+0x8c>)
 801b896:	681b      	ldr	r3, [r3, #0]
 801b898:	2243      	movs	r2, #67	@ 0x43
 801b89a:	490f      	ldr	r1, [pc, #60]	@ (801b8d8 <dhcp_inc_pcb_refcount+0x9c>)
 801b89c:	4618      	mov	r0, r3
 801b89e:	f7ff fea5 	bl	801b5ec <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801b8a2:	4b09      	ldr	r3, [pc, #36]	@ (801b8c8 <dhcp_inc_pcb_refcount+0x8c>)
 801b8a4:	681b      	ldr	r3, [r3, #0]
 801b8a6:	2200      	movs	r2, #0
 801b8a8:	490c      	ldr	r1, [pc, #48]	@ (801b8dc <dhcp_inc_pcb_refcount+0xa0>)
 801b8aa:	4618      	mov	r0, r3
 801b8ac:	f7ff ff0c 	bl	801b6c8 <udp_recv>
  }

  dhcp_pcb_refcount++;
 801b8b0:	4b04      	ldr	r3, [pc, #16]	@ (801b8c4 <dhcp_inc_pcb_refcount+0x88>)
 801b8b2:	781b      	ldrb	r3, [r3, #0]
 801b8b4:	3301      	adds	r3, #1
 801b8b6:	b2da      	uxtb	r2, r3
 801b8b8:	4b02      	ldr	r3, [pc, #8]	@ (801b8c4 <dhcp_inc_pcb_refcount+0x88>)
 801b8ba:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801b8bc:	2300      	movs	r3, #0
}
 801b8be:	4618      	mov	r0, r3
 801b8c0:	bd80      	pop	{r7, pc}
 801b8c2:	bf00      	nop
 801b8c4:	20004c74 	.word	0x20004c74
 801b8c8:	20004c70 	.word	0x20004c70
 801b8cc:	080259a0 	.word	0x080259a0
 801b8d0:	080259d8 	.word	0x080259d8
 801b8d4:	08025a00 	.word	0x08025a00
 801b8d8:	08027754 	.word	0x08027754
 801b8dc:	0801d169 	.word	0x0801d169

0801b8e0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801b8e0:	b580      	push	{r7, lr}
 801b8e2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801b8e4:	4b0e      	ldr	r3, [pc, #56]	@ (801b920 <dhcp_dec_pcb_refcount+0x40>)
 801b8e6:	781b      	ldrb	r3, [r3, #0]
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d105      	bne.n	801b8f8 <dhcp_dec_pcb_refcount+0x18>
 801b8ec:	4b0d      	ldr	r3, [pc, #52]	@ (801b924 <dhcp_dec_pcb_refcount+0x44>)
 801b8ee:	22ff      	movs	r2, #255	@ 0xff
 801b8f0:	490d      	ldr	r1, [pc, #52]	@ (801b928 <dhcp_dec_pcb_refcount+0x48>)
 801b8f2:	480e      	ldr	r0, [pc, #56]	@ (801b92c <dhcp_dec_pcb_refcount+0x4c>)
 801b8f4:	f005 fd5e 	bl	80213b4 <iprintf>
  dhcp_pcb_refcount--;
 801b8f8:	4b09      	ldr	r3, [pc, #36]	@ (801b920 <dhcp_dec_pcb_refcount+0x40>)
 801b8fa:	781b      	ldrb	r3, [r3, #0]
 801b8fc:	3b01      	subs	r3, #1
 801b8fe:	b2da      	uxtb	r2, r3
 801b900:	4b07      	ldr	r3, [pc, #28]	@ (801b920 <dhcp_dec_pcb_refcount+0x40>)
 801b902:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801b904:	4b06      	ldr	r3, [pc, #24]	@ (801b920 <dhcp_dec_pcb_refcount+0x40>)
 801b906:	781b      	ldrb	r3, [r3, #0]
 801b908:	2b00      	cmp	r3, #0
 801b90a:	d107      	bne.n	801b91c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801b90c:	4b08      	ldr	r3, [pc, #32]	@ (801b930 <dhcp_dec_pcb_refcount+0x50>)
 801b90e:	681b      	ldr	r3, [r3, #0]
 801b910:	4618      	mov	r0, r3
 801b912:	f7ff fef9 	bl	801b708 <udp_remove>
    dhcp_pcb = NULL;
 801b916:	4b06      	ldr	r3, [pc, #24]	@ (801b930 <dhcp_dec_pcb_refcount+0x50>)
 801b918:	2200      	movs	r2, #0
 801b91a:	601a      	str	r2, [r3, #0]
  }
}
 801b91c:	bf00      	nop
 801b91e:	bd80      	pop	{r7, pc}
 801b920:	20004c74 	.word	0x20004c74
 801b924:	080259a0 	.word	0x080259a0
 801b928:	08025a28 	.word	0x08025a28
 801b92c:	08025a00 	.word	0x08025a00
 801b930:	20004c70 	.word	0x20004c70

0801b934 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801b934:	b580      	push	{r7, lr}
 801b936:	b084      	sub	sp, #16
 801b938:	af00      	add	r7, sp, #0
 801b93a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b93c:	687b      	ldr	r3, [r7, #4]
 801b93e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b940:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801b942:	210c      	movs	r1, #12
 801b944:	68f8      	ldr	r0, [r7, #12]
 801b946:	f001 f851 	bl	801c9ec <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801b94a:	4b06      	ldr	r3, [pc, #24]	@ (801b964 <dhcp_handle_nak+0x30>)
 801b94c:	4a05      	ldr	r2, [pc, #20]	@ (801b964 <dhcp_handle_nak+0x30>)
 801b94e:	4905      	ldr	r1, [pc, #20]	@ (801b964 <dhcp_handle_nak+0x30>)
 801b950:	6878      	ldr	r0, [r7, #4]
 801b952:	f7f7 fed3 	bl	80136fc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801b956:	6878      	ldr	r0, [r7, #4]
 801b958:	f000 fc4a 	bl	801c1f0 <dhcp_discover>
}
 801b95c:	bf00      	nop
 801b95e:	3710      	adds	r7, #16
 801b960:	46bd      	mov	sp, r7
 801b962:	bd80      	pop	{r7, pc}
 801b964:	08027754 	.word	0x08027754

0801b968 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801b968:	b580      	push	{r7, lr}
 801b96a:	b084      	sub	sp, #16
 801b96c:	af00      	add	r7, sp, #0
 801b96e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b970:	687b      	ldr	r3, [r7, #4]
 801b972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b974:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801b976:	2108      	movs	r1, #8
 801b978:	68f8      	ldr	r0, [r7, #12]
 801b97a:	f001 f837 	bl	801c9ec <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801b97e:	68fb      	ldr	r3, [r7, #12]
 801b980:	331c      	adds	r3, #28
 801b982:	2200      	movs	r2, #0
 801b984:	4619      	mov	r1, r3
 801b986:	6878      	ldr	r0, [r7, #4]
 801b988:	f002 fb38 	bl	801dffc <etharp_query>
 801b98c:	4603      	mov	r3, r0
 801b98e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801b990:	68fb      	ldr	r3, [r7, #12]
 801b992:	799b      	ldrb	r3, [r3, #6]
 801b994:	2bff      	cmp	r3, #255	@ 0xff
 801b996:	d005      	beq.n	801b9a4 <dhcp_check+0x3c>
    dhcp->tries++;
 801b998:	68fb      	ldr	r3, [r7, #12]
 801b99a:	799b      	ldrb	r3, [r3, #6]
 801b99c:	3301      	adds	r3, #1
 801b99e:	b2da      	uxtb	r2, r3
 801b9a0:	68fb      	ldr	r3, [r7, #12]
 801b9a2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801b9a4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801b9a8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801b9aa:	893b      	ldrh	r3, [r7, #8]
 801b9ac:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801b9b0:	4a06      	ldr	r2, [pc, #24]	@ (801b9cc <dhcp_check+0x64>)
 801b9b2:	fb82 1203 	smull	r1, r2, r2, r3
 801b9b6:	1152      	asrs	r2, r2, #5
 801b9b8:	17db      	asrs	r3, r3, #31
 801b9ba:	1ad3      	subs	r3, r2, r3
 801b9bc:	b29a      	uxth	r2, r3
 801b9be:	68fb      	ldr	r3, [r7, #12]
 801b9c0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801b9c2:	bf00      	nop
 801b9c4:	3710      	adds	r7, #16
 801b9c6:	46bd      	mov	sp, r7
 801b9c8:	bd80      	pop	{r7, pc}
 801b9ca:	bf00      	nop
 801b9cc:	10624dd3 	.word	0x10624dd3

0801b9d0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801b9d0:	b580      	push	{r7, lr}
 801b9d2:	b084      	sub	sp, #16
 801b9d4:	af00      	add	r7, sp, #0
 801b9d6:	6078      	str	r0, [r7, #4]
 801b9d8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b9da:	687b      	ldr	r3, [r7, #4]
 801b9dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b9de:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801b9e0:	4b0c      	ldr	r3, [pc, #48]	@ (801ba14 <dhcp_handle_offer+0x44>)
 801b9e2:	789b      	ldrb	r3, [r3, #2]
 801b9e4:	2b00      	cmp	r3, #0
 801b9e6:	d011      	beq.n	801ba0c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801b9e8:	68fb      	ldr	r3, [r7, #12]
 801b9ea:	2200      	movs	r2, #0
 801b9ec:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801b9ee:	4b0a      	ldr	r3, [pc, #40]	@ (801ba18 <dhcp_handle_offer+0x48>)
 801b9f0:	689b      	ldr	r3, [r3, #8]
 801b9f2:	4618      	mov	r0, r3
 801b9f4:	f7f6 fe18 	bl	8012628 <lwip_htonl>
 801b9f8:	4602      	mov	r2, r0
 801b9fa:	68fb      	ldr	r3, [r7, #12]
 801b9fc:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801b9fe:	683b      	ldr	r3, [r7, #0]
 801ba00:	691a      	ldr	r2, [r3, #16]
 801ba02:	68fb      	ldr	r3, [r7, #12]
 801ba04:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801ba06:	6878      	ldr	r0, [r7, #4]
 801ba08:	f000 f808 	bl	801ba1c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801ba0c:	bf00      	nop
 801ba0e:	3710      	adds	r7, #16
 801ba10:	46bd      	mov	sp, r7
 801ba12:	bd80      	pop	{r7, pc}
 801ba14:	20004c68 	.word	0x20004c68
 801ba18:	20004c48 	.word	0x20004c48

0801ba1c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801ba1c:	b5b0      	push	{r4, r5, r7, lr}
 801ba1e:	b08a      	sub	sp, #40	@ 0x28
 801ba20:	af02      	add	r7, sp, #8
 801ba22:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	d109      	bne.n	801ba3e <dhcp_select+0x22>
 801ba2a:	4b71      	ldr	r3, [pc, #452]	@ (801bbf0 <dhcp_select+0x1d4>)
 801ba2c:	f240 1277 	movw	r2, #375	@ 0x177
 801ba30:	4970      	ldr	r1, [pc, #448]	@ (801bbf4 <dhcp_select+0x1d8>)
 801ba32:	4871      	ldr	r0, [pc, #452]	@ (801bbf8 <dhcp_select+0x1dc>)
 801ba34:	f005 fcbe 	bl	80213b4 <iprintf>
 801ba38:	f06f 030f 	mvn.w	r3, #15
 801ba3c:	e0d3      	b.n	801bbe6 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ba42:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801ba44:	69bb      	ldr	r3, [r7, #24]
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	d109      	bne.n	801ba5e <dhcp_select+0x42>
 801ba4a:	4b69      	ldr	r3, [pc, #420]	@ (801bbf0 <dhcp_select+0x1d4>)
 801ba4c:	f240 1279 	movw	r2, #377	@ 0x179
 801ba50:	496a      	ldr	r1, [pc, #424]	@ (801bbfc <dhcp_select+0x1e0>)
 801ba52:	4869      	ldr	r0, [pc, #420]	@ (801bbf8 <dhcp_select+0x1dc>)
 801ba54:	f005 fcae 	bl	80213b4 <iprintf>
 801ba58:	f06f 0305 	mvn.w	r3, #5
 801ba5c:	e0c3      	b.n	801bbe6 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801ba5e:	2101      	movs	r1, #1
 801ba60:	69b8      	ldr	r0, [r7, #24]
 801ba62:	f000 ffc3 	bl	801c9ec <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801ba66:	f107 030c 	add.w	r3, r7, #12
 801ba6a:	2203      	movs	r2, #3
 801ba6c:	69b9      	ldr	r1, [r7, #24]
 801ba6e:	6878      	ldr	r0, [r7, #4]
 801ba70:	f001 fc48 	bl	801d304 <dhcp_create_msg>
 801ba74:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801ba76:	697b      	ldr	r3, [r7, #20]
 801ba78:	2b00      	cmp	r3, #0
 801ba7a:	f000 8085 	beq.w	801bb88 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801ba7e:	697b      	ldr	r3, [r7, #20]
 801ba80:	685b      	ldr	r3, [r3, #4]
 801ba82:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ba84:	89b8      	ldrh	r0, [r7, #12]
 801ba86:	693b      	ldr	r3, [r7, #16]
 801ba88:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801ba8c:	2302      	movs	r3, #2
 801ba8e:	2239      	movs	r2, #57	@ 0x39
 801ba90:	f000 ffc6 	bl	801ca20 <dhcp_option>
 801ba94:	4603      	mov	r3, r0
 801ba96:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801ba98:	89b8      	ldrh	r0, [r7, #12]
 801ba9a:	693b      	ldr	r3, [r7, #16]
 801ba9c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801baa4:	461a      	mov	r2, r3
 801baa6:	f001 f815 	bl	801cad4 <dhcp_option_short>
 801baaa:	4603      	mov	r3, r0
 801baac:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801baae:	89b8      	ldrh	r0, [r7, #12]
 801bab0:	693b      	ldr	r3, [r7, #16]
 801bab2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801bab6:	2304      	movs	r3, #4
 801bab8:	2232      	movs	r2, #50	@ 0x32
 801baba:	f000 ffb1 	bl	801ca20 <dhcp_option>
 801babe:	4603      	mov	r3, r0
 801bac0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801bac2:	89bc      	ldrh	r4, [r7, #12]
 801bac4:	693b      	ldr	r3, [r7, #16]
 801bac6:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801baca:	69bb      	ldr	r3, [r7, #24]
 801bacc:	69db      	ldr	r3, [r3, #28]
 801bace:	4618      	mov	r0, r3
 801bad0:	f7f6 fdaa 	bl	8012628 <lwip_htonl>
 801bad4:	4603      	mov	r3, r0
 801bad6:	461a      	mov	r2, r3
 801bad8:	4629      	mov	r1, r5
 801bada:	4620      	mov	r0, r4
 801badc:	f001 f82c 	bl	801cb38 <dhcp_option_long>
 801bae0:	4603      	mov	r3, r0
 801bae2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801bae4:	89b8      	ldrh	r0, [r7, #12]
 801bae6:	693b      	ldr	r3, [r7, #16]
 801bae8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801baec:	2304      	movs	r3, #4
 801baee:	2236      	movs	r2, #54	@ 0x36
 801baf0:	f000 ff96 	bl	801ca20 <dhcp_option>
 801baf4:	4603      	mov	r3, r0
 801baf6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801baf8:	89bc      	ldrh	r4, [r7, #12]
 801bafa:	693b      	ldr	r3, [r7, #16]
 801bafc:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801bb00:	69bb      	ldr	r3, [r7, #24]
 801bb02:	699b      	ldr	r3, [r3, #24]
 801bb04:	4618      	mov	r0, r3
 801bb06:	f7f6 fd8f 	bl	8012628 <lwip_htonl>
 801bb0a:	4603      	mov	r3, r0
 801bb0c:	461a      	mov	r2, r3
 801bb0e:	4629      	mov	r1, r5
 801bb10:	4620      	mov	r0, r4
 801bb12:	f001 f811 	bl	801cb38 <dhcp_option_long>
 801bb16:	4603      	mov	r3, r0
 801bb18:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801bb1a:	89b8      	ldrh	r0, [r7, #12]
 801bb1c:	693b      	ldr	r3, [r7, #16]
 801bb1e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801bb22:	2303      	movs	r3, #3
 801bb24:	2237      	movs	r2, #55	@ 0x37
 801bb26:	f000 ff7b 	bl	801ca20 <dhcp_option>
 801bb2a:	4603      	mov	r3, r0
 801bb2c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801bb2e:	2300      	movs	r3, #0
 801bb30:	77bb      	strb	r3, [r7, #30]
 801bb32:	e00e      	b.n	801bb52 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801bb34:	89b8      	ldrh	r0, [r7, #12]
 801bb36:	693b      	ldr	r3, [r7, #16]
 801bb38:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801bb3c:	7fbb      	ldrb	r3, [r7, #30]
 801bb3e:	4a30      	ldr	r2, [pc, #192]	@ (801bc00 <dhcp_select+0x1e4>)
 801bb40:	5cd3      	ldrb	r3, [r2, r3]
 801bb42:	461a      	mov	r2, r3
 801bb44:	f000 ffa0 	bl	801ca88 <dhcp_option_byte>
 801bb48:	4603      	mov	r3, r0
 801bb4a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801bb4c:	7fbb      	ldrb	r3, [r7, #30]
 801bb4e:	3301      	adds	r3, #1
 801bb50:	77bb      	strb	r3, [r7, #30]
 801bb52:	7fbb      	ldrb	r3, [r7, #30]
 801bb54:	2b02      	cmp	r3, #2
 801bb56:	d9ed      	bls.n	801bb34 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801bb58:	89b8      	ldrh	r0, [r7, #12]
 801bb5a:	693b      	ldr	r3, [r7, #16]
 801bb5c:	33f0      	adds	r3, #240	@ 0xf0
 801bb5e:	697a      	ldr	r2, [r7, #20]
 801bb60:	4619      	mov	r1, r3
 801bb62:	f001 fca5 	bl	801d4b0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801bb66:	4b27      	ldr	r3, [pc, #156]	@ (801bc04 <dhcp_select+0x1e8>)
 801bb68:	6818      	ldr	r0, [r3, #0]
 801bb6a:	4b27      	ldr	r3, [pc, #156]	@ (801bc08 <dhcp_select+0x1ec>)
 801bb6c:	9301      	str	r3, [sp, #4]
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	9300      	str	r3, [sp, #0]
 801bb72:	2343      	movs	r3, #67	@ 0x43
 801bb74:	4a25      	ldr	r2, [pc, #148]	@ (801bc0c <dhcp_select+0x1f0>)
 801bb76:	6979      	ldr	r1, [r7, #20]
 801bb78:	f7ff fbae 	bl	801b2d8 <udp_sendto_if_src>
 801bb7c:	4603      	mov	r3, r0
 801bb7e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801bb80:	6978      	ldr	r0, [r7, #20]
 801bb82:	f7f8 faf9 	bl	8014178 <pbuf_free>
 801bb86:	e001      	b.n	801bb8c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801bb88:	23ff      	movs	r3, #255	@ 0xff
 801bb8a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801bb8c:	69bb      	ldr	r3, [r7, #24]
 801bb8e:	799b      	ldrb	r3, [r3, #6]
 801bb90:	2bff      	cmp	r3, #255	@ 0xff
 801bb92:	d005      	beq.n	801bba0 <dhcp_select+0x184>
    dhcp->tries++;
 801bb94:	69bb      	ldr	r3, [r7, #24]
 801bb96:	799b      	ldrb	r3, [r3, #6]
 801bb98:	3301      	adds	r3, #1
 801bb9a:	b2da      	uxtb	r2, r3
 801bb9c:	69bb      	ldr	r3, [r7, #24]
 801bb9e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801bba0:	69bb      	ldr	r3, [r7, #24]
 801bba2:	799b      	ldrb	r3, [r3, #6]
 801bba4:	2b05      	cmp	r3, #5
 801bba6:	d80d      	bhi.n	801bbc4 <dhcp_select+0x1a8>
 801bba8:	69bb      	ldr	r3, [r7, #24]
 801bbaa:	799b      	ldrb	r3, [r3, #6]
 801bbac:	461a      	mov	r2, r3
 801bbae:	2301      	movs	r3, #1
 801bbb0:	4093      	lsls	r3, r2
 801bbb2:	b29b      	uxth	r3, r3
 801bbb4:	461a      	mov	r2, r3
 801bbb6:	0152      	lsls	r2, r2, #5
 801bbb8:	1ad2      	subs	r2, r2, r3
 801bbba:	0092      	lsls	r2, r2, #2
 801bbbc:	4413      	add	r3, r2
 801bbbe:	00db      	lsls	r3, r3, #3
 801bbc0:	b29b      	uxth	r3, r3
 801bbc2:	e001      	b.n	801bbc8 <dhcp_select+0x1ac>
 801bbc4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801bbc8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801bbca:	89fb      	ldrh	r3, [r7, #14]
 801bbcc:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801bbd0:	4a0f      	ldr	r2, [pc, #60]	@ (801bc10 <dhcp_select+0x1f4>)
 801bbd2:	fb82 1203 	smull	r1, r2, r2, r3
 801bbd6:	1152      	asrs	r2, r2, #5
 801bbd8:	17db      	asrs	r3, r3, #31
 801bbda:	1ad3      	subs	r3, r2, r3
 801bbdc:	b29a      	uxth	r2, r3
 801bbde:	69bb      	ldr	r3, [r7, #24]
 801bbe0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801bbe2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801bbe6:	4618      	mov	r0, r3
 801bbe8:	3720      	adds	r7, #32
 801bbea:	46bd      	mov	sp, r7
 801bbec:	bdb0      	pop	{r4, r5, r7, pc}
 801bbee:	bf00      	nop
 801bbf0:	080259a0 	.word	0x080259a0
 801bbf4:	08025a4c 	.word	0x08025a4c
 801bbf8:	08025a00 	.word	0x08025a00
 801bbfc:	08025a68 	.word	0x08025a68
 801bc00:	200000c4 	.word	0x200000c4
 801bc04:	20004c70 	.word	0x20004c70
 801bc08:	08027754 	.word	0x08027754
 801bc0c:	08027758 	.word	0x08027758
 801bc10:	10624dd3 	.word	0x10624dd3

0801bc14 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801bc14:	b580      	push	{r7, lr}
 801bc16:	b082      	sub	sp, #8
 801bc18:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801bc1a:	4b27      	ldr	r3, [pc, #156]	@ (801bcb8 <dhcp_coarse_tmr+0xa4>)
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	607b      	str	r3, [r7, #4]
 801bc20:	e042      	b.n	801bca8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bc26:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801bc28:	683b      	ldr	r3, [r7, #0]
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	d039      	beq.n	801bca2 <dhcp_coarse_tmr+0x8e>
 801bc2e:	683b      	ldr	r3, [r7, #0]
 801bc30:	795b      	ldrb	r3, [r3, #5]
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d035      	beq.n	801bca2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801bc36:	683b      	ldr	r3, [r7, #0]
 801bc38:	8a9b      	ldrh	r3, [r3, #20]
 801bc3a:	2b00      	cmp	r3, #0
 801bc3c:	d012      	beq.n	801bc64 <dhcp_coarse_tmr+0x50>
 801bc3e:	683b      	ldr	r3, [r7, #0]
 801bc40:	8a5b      	ldrh	r3, [r3, #18]
 801bc42:	3301      	adds	r3, #1
 801bc44:	b29a      	uxth	r2, r3
 801bc46:	683b      	ldr	r3, [r7, #0]
 801bc48:	825a      	strh	r2, [r3, #18]
 801bc4a:	683b      	ldr	r3, [r7, #0]
 801bc4c:	8a5a      	ldrh	r2, [r3, #18]
 801bc4e:	683b      	ldr	r3, [r7, #0]
 801bc50:	8a9b      	ldrh	r3, [r3, #20]
 801bc52:	429a      	cmp	r2, r3
 801bc54:	d106      	bne.n	801bc64 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801bc56:	6878      	ldr	r0, [r7, #4]
 801bc58:	f000 fe2e 	bl	801c8b8 <dhcp_release_and_stop>
        dhcp_start(netif);
 801bc5c:	6878      	ldr	r0, [r7, #4]
 801bc5e:	f000 f96b 	bl	801bf38 <dhcp_start>
 801bc62:	e01e      	b.n	801bca2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801bc64:	683b      	ldr	r3, [r7, #0]
 801bc66:	8a1b      	ldrh	r3, [r3, #16]
 801bc68:	2b00      	cmp	r3, #0
 801bc6a:	d00b      	beq.n	801bc84 <dhcp_coarse_tmr+0x70>
 801bc6c:	683b      	ldr	r3, [r7, #0]
 801bc6e:	8a1b      	ldrh	r3, [r3, #16]
 801bc70:	1e5a      	subs	r2, r3, #1
 801bc72:	b291      	uxth	r1, r2
 801bc74:	683a      	ldr	r2, [r7, #0]
 801bc76:	8211      	strh	r1, [r2, #16]
 801bc78:	2b01      	cmp	r3, #1
 801bc7a:	d103      	bne.n	801bc84 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801bc7c:	6878      	ldr	r0, [r7, #4]
 801bc7e:	f000 f8c7 	bl	801be10 <dhcp_t2_timeout>
 801bc82:	e00e      	b.n	801bca2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801bc84:	683b      	ldr	r3, [r7, #0]
 801bc86:	89db      	ldrh	r3, [r3, #14]
 801bc88:	2b00      	cmp	r3, #0
 801bc8a:	d00a      	beq.n	801bca2 <dhcp_coarse_tmr+0x8e>
 801bc8c:	683b      	ldr	r3, [r7, #0]
 801bc8e:	89db      	ldrh	r3, [r3, #14]
 801bc90:	1e5a      	subs	r2, r3, #1
 801bc92:	b291      	uxth	r1, r2
 801bc94:	683a      	ldr	r2, [r7, #0]
 801bc96:	81d1      	strh	r1, [r2, #14]
 801bc98:	2b01      	cmp	r3, #1
 801bc9a:	d102      	bne.n	801bca2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801bc9c:	6878      	ldr	r0, [r7, #4]
 801bc9e:	f000 f888 	bl	801bdb2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801bca2:	687b      	ldr	r3, [r7, #4]
 801bca4:	681b      	ldr	r3, [r3, #0]
 801bca6:	607b      	str	r3, [r7, #4]
 801bca8:	687b      	ldr	r3, [r7, #4]
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	d1b9      	bne.n	801bc22 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801bcae:	bf00      	nop
 801bcb0:	bf00      	nop
 801bcb2:	3708      	adds	r7, #8
 801bcb4:	46bd      	mov	sp, r7
 801bcb6:	bd80      	pop	{r7, pc}
 801bcb8:	20004bdc 	.word	0x20004bdc

0801bcbc <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801bcbc:	b580      	push	{r7, lr}
 801bcbe:	b082      	sub	sp, #8
 801bcc0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801bcc2:	4b16      	ldr	r3, [pc, #88]	@ (801bd1c <dhcp_fine_tmr+0x60>)
 801bcc4:	681b      	ldr	r3, [r3, #0]
 801bcc6:	607b      	str	r3, [r7, #4]
 801bcc8:	e020      	b.n	801bd0c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801bcca:	687b      	ldr	r3, [r7, #4]
 801bccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bcce:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801bcd0:	683b      	ldr	r3, [r7, #0]
 801bcd2:	2b00      	cmp	r3, #0
 801bcd4:	d017      	beq.n	801bd06 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801bcd6:	683b      	ldr	r3, [r7, #0]
 801bcd8:	891b      	ldrh	r3, [r3, #8]
 801bcda:	2b01      	cmp	r3, #1
 801bcdc:	d906      	bls.n	801bcec <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801bcde:	683b      	ldr	r3, [r7, #0]
 801bce0:	891b      	ldrh	r3, [r3, #8]
 801bce2:	3b01      	subs	r3, #1
 801bce4:	b29a      	uxth	r2, r3
 801bce6:	683b      	ldr	r3, [r7, #0]
 801bce8:	811a      	strh	r2, [r3, #8]
 801bcea:	e00c      	b.n	801bd06 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801bcec:	683b      	ldr	r3, [r7, #0]
 801bcee:	891b      	ldrh	r3, [r3, #8]
 801bcf0:	2b01      	cmp	r3, #1
 801bcf2:	d108      	bne.n	801bd06 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801bcf4:	683b      	ldr	r3, [r7, #0]
 801bcf6:	891b      	ldrh	r3, [r3, #8]
 801bcf8:	3b01      	subs	r3, #1
 801bcfa:	b29a      	uxth	r2, r3
 801bcfc:	683b      	ldr	r3, [r7, #0]
 801bcfe:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801bd00:	6878      	ldr	r0, [r7, #4]
 801bd02:	f000 f80d 	bl	801bd20 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801bd06:	687b      	ldr	r3, [r7, #4]
 801bd08:	681b      	ldr	r3, [r3, #0]
 801bd0a:	607b      	str	r3, [r7, #4]
 801bd0c:	687b      	ldr	r3, [r7, #4]
 801bd0e:	2b00      	cmp	r3, #0
 801bd10:	d1db      	bne.n	801bcca <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801bd12:	bf00      	nop
 801bd14:	bf00      	nop
 801bd16:	3708      	adds	r7, #8
 801bd18:	46bd      	mov	sp, r7
 801bd1a:	bd80      	pop	{r7, pc}
 801bd1c:	20004bdc 	.word	0x20004bdc

0801bd20 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801bd20:	b580      	push	{r7, lr}
 801bd22:	b084      	sub	sp, #16
 801bd24:	af00      	add	r7, sp, #0
 801bd26:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bd2c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801bd2e:	68fb      	ldr	r3, [r7, #12]
 801bd30:	795b      	ldrb	r3, [r3, #5]
 801bd32:	2b0c      	cmp	r3, #12
 801bd34:	d003      	beq.n	801bd3e <dhcp_timeout+0x1e>
 801bd36:	68fb      	ldr	r3, [r7, #12]
 801bd38:	795b      	ldrb	r3, [r3, #5]
 801bd3a:	2b06      	cmp	r3, #6
 801bd3c:	d103      	bne.n	801bd46 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801bd3e:	6878      	ldr	r0, [r7, #4]
 801bd40:	f000 fa56 	bl	801c1f0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801bd44:	e031      	b.n	801bdaa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801bd46:	68fb      	ldr	r3, [r7, #12]
 801bd48:	795b      	ldrb	r3, [r3, #5]
 801bd4a:	2b01      	cmp	r3, #1
 801bd4c:	d10e      	bne.n	801bd6c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801bd4e:	68fb      	ldr	r3, [r7, #12]
 801bd50:	799b      	ldrb	r3, [r3, #6]
 801bd52:	2b05      	cmp	r3, #5
 801bd54:	d803      	bhi.n	801bd5e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801bd56:	6878      	ldr	r0, [r7, #4]
 801bd58:	f7ff fe60 	bl	801ba1c <dhcp_select>
}
 801bd5c:	e025      	b.n	801bdaa <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801bd5e:	6878      	ldr	r0, [r7, #4]
 801bd60:	f000 fdaa 	bl	801c8b8 <dhcp_release_and_stop>
      dhcp_start(netif);
 801bd64:	6878      	ldr	r0, [r7, #4]
 801bd66:	f000 f8e7 	bl	801bf38 <dhcp_start>
}
 801bd6a:	e01e      	b.n	801bdaa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801bd6c:	68fb      	ldr	r3, [r7, #12]
 801bd6e:	795b      	ldrb	r3, [r3, #5]
 801bd70:	2b08      	cmp	r3, #8
 801bd72:	d10b      	bne.n	801bd8c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801bd74:	68fb      	ldr	r3, [r7, #12]
 801bd76:	799b      	ldrb	r3, [r3, #6]
 801bd78:	2b01      	cmp	r3, #1
 801bd7a:	d803      	bhi.n	801bd84 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801bd7c:	6878      	ldr	r0, [r7, #4]
 801bd7e:	f7ff fdf3 	bl	801b968 <dhcp_check>
}
 801bd82:	e012      	b.n	801bdaa <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801bd84:	6878      	ldr	r0, [r7, #4]
 801bd86:	f000 fad5 	bl	801c334 <dhcp_bind>
}
 801bd8a:	e00e      	b.n	801bdaa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801bd8c:	68fb      	ldr	r3, [r7, #12]
 801bd8e:	795b      	ldrb	r3, [r3, #5]
 801bd90:	2b03      	cmp	r3, #3
 801bd92:	d10a      	bne.n	801bdaa <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801bd94:	68fb      	ldr	r3, [r7, #12]
 801bd96:	799b      	ldrb	r3, [r3, #6]
 801bd98:	2b01      	cmp	r3, #1
 801bd9a:	d803      	bhi.n	801bda4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801bd9c:	6878      	ldr	r0, [r7, #4]
 801bd9e:	f000 fcd7 	bl	801c750 <dhcp_reboot>
}
 801bda2:	e002      	b.n	801bdaa <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801bda4:	6878      	ldr	r0, [r7, #4]
 801bda6:	f000 fa23 	bl	801c1f0 <dhcp_discover>
}
 801bdaa:	bf00      	nop
 801bdac:	3710      	adds	r7, #16
 801bdae:	46bd      	mov	sp, r7
 801bdb0:	bd80      	pop	{r7, pc}

0801bdb2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801bdb2:	b580      	push	{r7, lr}
 801bdb4:	b084      	sub	sp, #16
 801bdb6:	af00      	add	r7, sp, #0
 801bdb8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bdba:	687b      	ldr	r3, [r7, #4]
 801bdbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bdbe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801bdc0:	68fb      	ldr	r3, [r7, #12]
 801bdc2:	795b      	ldrb	r3, [r3, #5]
 801bdc4:	2b01      	cmp	r3, #1
 801bdc6:	d007      	beq.n	801bdd8 <dhcp_t1_timeout+0x26>
 801bdc8:	68fb      	ldr	r3, [r7, #12]
 801bdca:	795b      	ldrb	r3, [r3, #5]
 801bdcc:	2b0a      	cmp	r3, #10
 801bdce:	d003      	beq.n	801bdd8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801bdd0:	68fb      	ldr	r3, [r7, #12]
 801bdd2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801bdd4:	2b05      	cmp	r3, #5
 801bdd6:	d117      	bne.n	801be08 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801bdd8:	6878      	ldr	r0, [r7, #4]
 801bdda:	f000 fb85 	bl	801c4e8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801bdde:	68fb      	ldr	r3, [r7, #12]
 801bde0:	899b      	ldrh	r3, [r3, #12]
 801bde2:	461a      	mov	r2, r3
 801bde4:	68fb      	ldr	r3, [r7, #12]
 801bde6:	8a5b      	ldrh	r3, [r3, #18]
 801bde8:	1ad3      	subs	r3, r2, r3
 801bdea:	2b01      	cmp	r3, #1
 801bdec:	dd0c      	ble.n	801be08 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801bdee:	68fb      	ldr	r3, [r7, #12]
 801bdf0:	899b      	ldrh	r3, [r3, #12]
 801bdf2:	461a      	mov	r2, r3
 801bdf4:	68fb      	ldr	r3, [r7, #12]
 801bdf6:	8a5b      	ldrh	r3, [r3, #18]
 801bdf8:	1ad3      	subs	r3, r2, r3
 801bdfa:	2b00      	cmp	r3, #0
 801bdfc:	da00      	bge.n	801be00 <dhcp_t1_timeout+0x4e>
 801bdfe:	3301      	adds	r3, #1
 801be00:	105b      	asrs	r3, r3, #1
 801be02:	b29a      	uxth	r2, r3
 801be04:	68fb      	ldr	r3, [r7, #12]
 801be06:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801be08:	bf00      	nop
 801be0a:	3710      	adds	r7, #16
 801be0c:	46bd      	mov	sp, r7
 801be0e:	bd80      	pop	{r7, pc}

0801be10 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801be10:	b580      	push	{r7, lr}
 801be12:	b084      	sub	sp, #16
 801be14:	af00      	add	r7, sp, #0
 801be16:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801be1c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801be1e:	68fb      	ldr	r3, [r7, #12]
 801be20:	795b      	ldrb	r3, [r3, #5]
 801be22:	2b01      	cmp	r3, #1
 801be24:	d00b      	beq.n	801be3e <dhcp_t2_timeout+0x2e>
 801be26:	68fb      	ldr	r3, [r7, #12]
 801be28:	795b      	ldrb	r3, [r3, #5]
 801be2a:	2b0a      	cmp	r3, #10
 801be2c:	d007      	beq.n	801be3e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801be2e:	68fb      	ldr	r3, [r7, #12]
 801be30:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801be32:	2b05      	cmp	r3, #5
 801be34:	d003      	beq.n	801be3e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801be36:	68fb      	ldr	r3, [r7, #12]
 801be38:	795b      	ldrb	r3, [r3, #5]
 801be3a:	2b04      	cmp	r3, #4
 801be3c:	d117      	bne.n	801be6e <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801be3e:	6878      	ldr	r0, [r7, #4]
 801be40:	f000 fbec 	bl	801c61c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801be44:	68fb      	ldr	r3, [r7, #12]
 801be46:	8a9b      	ldrh	r3, [r3, #20]
 801be48:	461a      	mov	r2, r3
 801be4a:	68fb      	ldr	r3, [r7, #12]
 801be4c:	8a5b      	ldrh	r3, [r3, #18]
 801be4e:	1ad3      	subs	r3, r2, r3
 801be50:	2b01      	cmp	r3, #1
 801be52:	dd0c      	ble.n	801be6e <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801be54:	68fb      	ldr	r3, [r7, #12]
 801be56:	8a9b      	ldrh	r3, [r3, #20]
 801be58:	461a      	mov	r2, r3
 801be5a:	68fb      	ldr	r3, [r7, #12]
 801be5c:	8a5b      	ldrh	r3, [r3, #18]
 801be5e:	1ad3      	subs	r3, r2, r3
 801be60:	2b00      	cmp	r3, #0
 801be62:	da00      	bge.n	801be66 <dhcp_t2_timeout+0x56>
 801be64:	3301      	adds	r3, #1
 801be66:	105b      	asrs	r3, r3, #1
 801be68:	b29a      	uxth	r2, r3
 801be6a:	68fb      	ldr	r3, [r7, #12]
 801be6c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801be6e:	bf00      	nop
 801be70:	3710      	adds	r7, #16
 801be72:	46bd      	mov	sp, r7
 801be74:	bd80      	pop	{r7, pc}
	...

0801be78 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801be78:	b580      	push	{r7, lr}
 801be7a:	b084      	sub	sp, #16
 801be7c:	af00      	add	r7, sp, #0
 801be7e:	6078      	str	r0, [r7, #4]
 801be80:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801be86:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801be88:	68fb      	ldr	r3, [r7, #12]
 801be8a:	2200      	movs	r2, #0
 801be8c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801be8e:	68fb      	ldr	r3, [r7, #12]
 801be90:	2200      	movs	r2, #0
 801be92:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801be94:	4b26      	ldr	r3, [pc, #152]	@ (801bf30 <dhcp_handle_ack+0xb8>)
 801be96:	78db      	ldrb	r3, [r3, #3]
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d003      	beq.n	801bea4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801be9c:	4b25      	ldr	r3, [pc, #148]	@ (801bf34 <dhcp_handle_ack+0xbc>)
 801be9e:	68da      	ldr	r2, [r3, #12]
 801bea0:	68fb      	ldr	r3, [r7, #12]
 801bea2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801bea4:	4b22      	ldr	r3, [pc, #136]	@ (801bf30 <dhcp_handle_ack+0xb8>)
 801bea6:	791b      	ldrb	r3, [r3, #4]
 801bea8:	2b00      	cmp	r3, #0
 801beaa:	d004      	beq.n	801beb6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801beac:	4b21      	ldr	r3, [pc, #132]	@ (801bf34 <dhcp_handle_ack+0xbc>)
 801beae:	691a      	ldr	r2, [r3, #16]
 801beb0:	68fb      	ldr	r3, [r7, #12]
 801beb2:	62da      	str	r2, [r3, #44]	@ 0x2c
 801beb4:	e004      	b.n	801bec0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801beb6:	68fb      	ldr	r3, [r7, #12]
 801beb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801beba:	085a      	lsrs	r2, r3, #1
 801bebc:	68fb      	ldr	r3, [r7, #12]
 801bebe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801bec0:	4b1b      	ldr	r3, [pc, #108]	@ (801bf30 <dhcp_handle_ack+0xb8>)
 801bec2:	795b      	ldrb	r3, [r3, #5]
 801bec4:	2b00      	cmp	r3, #0
 801bec6:	d004      	beq.n	801bed2 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801bec8:	4b1a      	ldr	r3, [pc, #104]	@ (801bf34 <dhcp_handle_ack+0xbc>)
 801beca:	695a      	ldr	r2, [r3, #20]
 801becc:	68fb      	ldr	r3, [r7, #12]
 801bece:	631a      	str	r2, [r3, #48]	@ 0x30
 801bed0:	e007      	b.n	801bee2 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801bed2:	68fb      	ldr	r3, [r7, #12]
 801bed4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801bed6:	4613      	mov	r3, r2
 801bed8:	00db      	lsls	r3, r3, #3
 801beda:	1a9b      	subs	r3, r3, r2
 801bedc:	08da      	lsrs	r2, r3, #3
 801bede:	68fb      	ldr	r3, [r7, #12]
 801bee0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801bee2:	683b      	ldr	r3, [r7, #0]
 801bee4:	691a      	ldr	r2, [r3, #16]
 801bee6:	68fb      	ldr	r3, [r7, #12]
 801bee8:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801beea:	4b11      	ldr	r3, [pc, #68]	@ (801bf30 <dhcp_handle_ack+0xb8>)
 801beec:	799b      	ldrb	r3, [r3, #6]
 801beee:	2b00      	cmp	r3, #0
 801bef0:	d00b      	beq.n	801bf0a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801bef2:	4b10      	ldr	r3, [pc, #64]	@ (801bf34 <dhcp_handle_ack+0xbc>)
 801bef4:	699b      	ldr	r3, [r3, #24]
 801bef6:	4618      	mov	r0, r3
 801bef8:	f7f6 fb96 	bl	8012628 <lwip_htonl>
 801befc:	4602      	mov	r2, r0
 801befe:	68fb      	ldr	r3, [r7, #12]
 801bf00:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801bf02:	68fb      	ldr	r3, [r7, #12]
 801bf04:	2201      	movs	r2, #1
 801bf06:	71da      	strb	r2, [r3, #7]
 801bf08:	e002      	b.n	801bf10 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801bf0a:	68fb      	ldr	r3, [r7, #12]
 801bf0c:	2200      	movs	r2, #0
 801bf0e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801bf10:	4b07      	ldr	r3, [pc, #28]	@ (801bf30 <dhcp_handle_ack+0xb8>)
 801bf12:	79db      	ldrb	r3, [r3, #7]
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	d007      	beq.n	801bf28 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801bf18:	4b06      	ldr	r3, [pc, #24]	@ (801bf34 <dhcp_handle_ack+0xbc>)
 801bf1a:	69db      	ldr	r3, [r3, #28]
 801bf1c:	4618      	mov	r0, r3
 801bf1e:	f7f6 fb83 	bl	8012628 <lwip_htonl>
 801bf22:	4602      	mov	r2, r0
 801bf24:	68fb      	ldr	r3, [r7, #12]
 801bf26:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801bf28:	bf00      	nop
 801bf2a:	3710      	adds	r7, #16
 801bf2c:	46bd      	mov	sp, r7
 801bf2e:	bd80      	pop	{r7, pc}
 801bf30:	20004c68 	.word	0x20004c68
 801bf34:	20004c48 	.word	0x20004c48

0801bf38 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801bf38:	b580      	push	{r7, lr}
 801bf3a:	b084      	sub	sp, #16
 801bf3c:	af00      	add	r7, sp, #0
 801bf3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d109      	bne.n	801bf5a <dhcp_start+0x22>
 801bf46:	4b37      	ldr	r3, [pc, #220]	@ (801c024 <dhcp_start+0xec>)
 801bf48:	f240 22e7 	movw	r2, #743	@ 0x2e7
 801bf4c:	4936      	ldr	r1, [pc, #216]	@ (801c028 <dhcp_start+0xf0>)
 801bf4e:	4837      	ldr	r0, [pc, #220]	@ (801c02c <dhcp_start+0xf4>)
 801bf50:	f005 fa30 	bl	80213b4 <iprintf>
 801bf54:	f06f 030f 	mvn.w	r3, #15
 801bf58:	e060      	b.n	801c01c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 801bf60:	f003 0301 	and.w	r3, r3, #1
 801bf64:	2b00      	cmp	r3, #0
 801bf66:	d109      	bne.n	801bf7c <dhcp_start+0x44>
 801bf68:	4b2e      	ldr	r3, [pc, #184]	@ (801c024 <dhcp_start+0xec>)
 801bf6a:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 801bf6e:	4930      	ldr	r1, [pc, #192]	@ (801c030 <dhcp_start+0xf8>)
 801bf70:	482e      	ldr	r0, [pc, #184]	@ (801c02c <dhcp_start+0xf4>)
 801bf72:	f005 fa1f 	bl	80213b4 <iprintf>
 801bf76:	f06f 030f 	mvn.w	r3, #15
 801bf7a:	e04f      	b.n	801c01c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bf80:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801bf82:	687b      	ldr	r3, [r7, #4]
 801bf84:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801bf86:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 801bf8a:	d202      	bcs.n	801bf92 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801bf8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bf90:	e044      	b.n	801c01c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801bf92:	68fb      	ldr	r3, [r7, #12]
 801bf94:	2b00      	cmp	r3, #0
 801bf96:	d10d      	bne.n	801bfb4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801bf98:	2034      	movs	r0, #52	@ 0x34
 801bf9a:	f7f6 ffe9 	bl	8012f70 <mem_malloc>
 801bf9e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801bfa0:	68fb      	ldr	r3, [r7, #12]
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	d102      	bne.n	801bfac <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801bfa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bfaa:	e037      	b.n	801c01c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	68fa      	ldr	r2, [r7, #12]
 801bfb0:	625a      	str	r2, [r3, #36]	@ 0x24
 801bfb2:	e005      	b.n	801bfc0 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801bfb4:	68fb      	ldr	r3, [r7, #12]
 801bfb6:	791b      	ldrb	r3, [r3, #4]
 801bfb8:	2b00      	cmp	r3, #0
 801bfba:	d001      	beq.n	801bfc0 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801bfbc:	f7ff fc90 	bl	801b8e0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801bfc0:	2234      	movs	r2, #52	@ 0x34
 801bfc2:	2100      	movs	r1, #0
 801bfc4:	68f8      	ldr	r0, [r7, #12]
 801bfc6:	f005 fbc5 	bl	8021754 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801bfca:	f7ff fc37 	bl	801b83c <dhcp_inc_pcb_refcount>
 801bfce:	4603      	mov	r3, r0
 801bfd0:	2b00      	cmp	r3, #0
 801bfd2:	d002      	beq.n	801bfda <dhcp_start+0xa2>
    return ERR_MEM;
 801bfd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bfd8:	e020      	b.n	801c01c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801bfda:	68fb      	ldr	r3, [r7, #12]
 801bfdc:	2201      	movs	r2, #1
 801bfde:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 801bfe6:	f003 0304 	and.w	r3, r3, #4
 801bfea:	2b00      	cmp	r3, #0
 801bfec:	d105      	bne.n	801bffa <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801bfee:	2102      	movs	r1, #2
 801bff0:	68f8      	ldr	r0, [r7, #12]
 801bff2:	f000 fcfb 	bl	801c9ec <dhcp_set_state>
    return ERR_OK;
 801bff6:	2300      	movs	r3, #0
 801bff8:	e010      	b.n	801c01c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801bffa:	6878      	ldr	r0, [r7, #4]
 801bffc:	f000 f8f8 	bl	801c1f0 <dhcp_discover>
 801c000:	4603      	mov	r3, r0
 801c002:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801c004:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801c008:	2b00      	cmp	r3, #0
 801c00a:	d005      	beq.n	801c018 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801c00c:	6878      	ldr	r0, [r7, #4]
 801c00e:	f000 fc53 	bl	801c8b8 <dhcp_release_and_stop>
    return ERR_MEM;
 801c012:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c016:	e001      	b.n	801c01c <dhcp_start+0xe4>
  }
  return result;
 801c018:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801c01c:	4618      	mov	r0, r3
 801c01e:	3710      	adds	r7, #16
 801c020:	46bd      	mov	sp, r7
 801c022:	bd80      	pop	{r7, pc}
 801c024:	080259a0 	.word	0x080259a0
 801c028:	08025a84 	.word	0x08025a84
 801c02c:	08025a00 	.word	0x08025a00
 801c030:	08025ac8 	.word	0x08025ac8

0801c034 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801c034:	b580      	push	{r7, lr}
 801c036:	b084      	sub	sp, #16
 801c038:	af00      	add	r7, sp, #0
 801c03a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c03c:	687b      	ldr	r3, [r7, #4]
 801c03e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c040:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801c042:	68fb      	ldr	r3, [r7, #12]
 801c044:	2b00      	cmp	r3, #0
 801c046:	d025      	beq.n	801c094 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801c048:	68fb      	ldr	r3, [r7, #12]
 801c04a:	795b      	ldrb	r3, [r3, #5]
 801c04c:	2b0a      	cmp	r3, #10
 801c04e:	d008      	beq.n	801c062 <dhcp_network_changed+0x2e>
 801c050:	2b0a      	cmp	r3, #10
 801c052:	dc0d      	bgt.n	801c070 <dhcp_network_changed+0x3c>
 801c054:	2b00      	cmp	r3, #0
 801c056:	d01f      	beq.n	801c098 <dhcp_network_changed+0x64>
 801c058:	2b00      	cmp	r3, #0
 801c05a:	db09      	blt.n	801c070 <dhcp_network_changed+0x3c>
 801c05c:	3b03      	subs	r3, #3
 801c05e:	2b02      	cmp	r3, #2
 801c060:	d806      	bhi.n	801c070 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801c062:	68fb      	ldr	r3, [r7, #12]
 801c064:	2200      	movs	r2, #0
 801c066:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801c068:	6878      	ldr	r0, [r7, #4]
 801c06a:	f000 fb71 	bl	801c750 <dhcp_reboot>
      break;
 801c06e:	e014      	b.n	801c09a <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801c070:	68fb      	ldr	r3, [r7, #12]
 801c072:	795b      	ldrb	r3, [r3, #5]
 801c074:	2b0c      	cmp	r3, #12
 801c076:	d906      	bls.n	801c086 <dhcp_network_changed+0x52>
 801c078:	4b09      	ldr	r3, [pc, #36]	@ (801c0a0 <dhcp_network_changed+0x6c>)
 801c07a:	f240 326d 	movw	r2, #877	@ 0x36d
 801c07e:	4909      	ldr	r1, [pc, #36]	@ (801c0a4 <dhcp_network_changed+0x70>)
 801c080:	4809      	ldr	r0, [pc, #36]	@ (801c0a8 <dhcp_network_changed+0x74>)
 801c082:	f005 f997 	bl	80213b4 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801c086:	68fb      	ldr	r3, [r7, #12]
 801c088:	2200      	movs	r2, #0
 801c08a:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801c08c:	6878      	ldr	r0, [r7, #4]
 801c08e:	f000 f8af 	bl	801c1f0 <dhcp_discover>
      break;
 801c092:	e002      	b.n	801c09a <dhcp_network_changed+0x66>
    return;
 801c094:	bf00      	nop
 801c096:	e000      	b.n	801c09a <dhcp_network_changed+0x66>
      break;
 801c098:	bf00      	nop
  }
}
 801c09a:	3710      	adds	r7, #16
 801c09c:	46bd      	mov	sp, r7
 801c09e:	bd80      	pop	{r7, pc}
 801c0a0:	080259a0 	.word	0x080259a0
 801c0a4:	08025aec 	.word	0x08025aec
 801c0a8:	08025a00 	.word	0x08025a00

0801c0ac <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801c0ac:	b580      	push	{r7, lr}
 801c0ae:	b084      	sub	sp, #16
 801c0b0:	af00      	add	r7, sp, #0
 801c0b2:	6078      	str	r0, [r7, #4]
 801c0b4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801c0b6:	687b      	ldr	r3, [r7, #4]
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	d107      	bne.n	801c0cc <dhcp_arp_reply+0x20>
 801c0bc:	4b0e      	ldr	r3, [pc, #56]	@ (801c0f8 <dhcp_arp_reply+0x4c>)
 801c0be:	f240 328b 	movw	r2, #907	@ 0x38b
 801c0c2:	490e      	ldr	r1, [pc, #56]	@ (801c0fc <dhcp_arp_reply+0x50>)
 801c0c4:	480e      	ldr	r0, [pc, #56]	@ (801c100 <dhcp_arp_reply+0x54>)
 801c0c6:	f005 f975 	bl	80213b4 <iprintf>
 801c0ca:	e012      	b.n	801c0f2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801c0cc:	687b      	ldr	r3, [r7, #4]
 801c0ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c0d0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801c0d2:	68fb      	ldr	r3, [r7, #12]
 801c0d4:	2b00      	cmp	r3, #0
 801c0d6:	d00c      	beq.n	801c0f2 <dhcp_arp_reply+0x46>
 801c0d8:	68fb      	ldr	r3, [r7, #12]
 801c0da:	795b      	ldrb	r3, [r3, #5]
 801c0dc:	2b08      	cmp	r3, #8
 801c0de:	d108      	bne.n	801c0f2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801c0e0:	683b      	ldr	r3, [r7, #0]
 801c0e2:	681a      	ldr	r2, [r3, #0]
 801c0e4:	68fb      	ldr	r3, [r7, #12]
 801c0e6:	69db      	ldr	r3, [r3, #28]
 801c0e8:	429a      	cmp	r2, r3
 801c0ea:	d102      	bne.n	801c0f2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801c0ec:	6878      	ldr	r0, [r7, #4]
 801c0ee:	f000 f809 	bl	801c104 <dhcp_decline>
    }
  }
}
 801c0f2:	3710      	adds	r7, #16
 801c0f4:	46bd      	mov	sp, r7
 801c0f6:	bd80      	pop	{r7, pc}
 801c0f8:	080259a0 	.word	0x080259a0
 801c0fc:	08025a84 	.word	0x08025a84
 801c100:	08025a00 	.word	0x08025a00

0801c104 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801c104:	b5b0      	push	{r4, r5, r7, lr}
 801c106:	b08a      	sub	sp, #40	@ 0x28
 801c108:	af02      	add	r7, sp, #8
 801c10a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c10c:	687b      	ldr	r3, [r7, #4]
 801c10e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c110:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801c112:	210c      	movs	r1, #12
 801c114:	69b8      	ldr	r0, [r7, #24]
 801c116:	f000 fc69 	bl	801c9ec <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801c11a:	f107 030c 	add.w	r3, r7, #12
 801c11e:	2204      	movs	r2, #4
 801c120:	69b9      	ldr	r1, [r7, #24]
 801c122:	6878      	ldr	r0, [r7, #4]
 801c124:	f001 f8ee 	bl	801d304 <dhcp_create_msg>
 801c128:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c12a:	697b      	ldr	r3, [r7, #20]
 801c12c:	2b00      	cmp	r3, #0
 801c12e:	d035      	beq.n	801c19c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c130:	697b      	ldr	r3, [r7, #20]
 801c132:	685b      	ldr	r3, [r3, #4]
 801c134:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c136:	89b8      	ldrh	r0, [r7, #12]
 801c138:	693b      	ldr	r3, [r7, #16]
 801c13a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c13e:	2304      	movs	r3, #4
 801c140:	2232      	movs	r2, #50	@ 0x32
 801c142:	f000 fc6d 	bl	801ca20 <dhcp_option>
 801c146:	4603      	mov	r3, r0
 801c148:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c14a:	89bc      	ldrh	r4, [r7, #12]
 801c14c:	693b      	ldr	r3, [r7, #16]
 801c14e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801c152:	69bb      	ldr	r3, [r7, #24]
 801c154:	69db      	ldr	r3, [r3, #28]
 801c156:	4618      	mov	r0, r3
 801c158:	f7f6 fa66 	bl	8012628 <lwip_htonl>
 801c15c:	4603      	mov	r3, r0
 801c15e:	461a      	mov	r2, r3
 801c160:	4629      	mov	r1, r5
 801c162:	4620      	mov	r0, r4
 801c164:	f000 fce8 	bl	801cb38 <dhcp_option_long>
 801c168:	4603      	mov	r3, r0
 801c16a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c16c:	89b8      	ldrh	r0, [r7, #12]
 801c16e:	693b      	ldr	r3, [r7, #16]
 801c170:	33f0      	adds	r3, #240	@ 0xf0
 801c172:	697a      	ldr	r2, [r7, #20]
 801c174:	4619      	mov	r1, r3
 801c176:	f001 f99b 	bl	801d4b0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801c17a:	4b19      	ldr	r3, [pc, #100]	@ (801c1e0 <dhcp_decline+0xdc>)
 801c17c:	6818      	ldr	r0, [r3, #0]
 801c17e:	4b19      	ldr	r3, [pc, #100]	@ (801c1e4 <dhcp_decline+0xe0>)
 801c180:	9301      	str	r3, [sp, #4]
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	9300      	str	r3, [sp, #0]
 801c186:	2343      	movs	r3, #67	@ 0x43
 801c188:	4a17      	ldr	r2, [pc, #92]	@ (801c1e8 <dhcp_decline+0xe4>)
 801c18a:	6979      	ldr	r1, [r7, #20]
 801c18c:	f7ff f8a4 	bl	801b2d8 <udp_sendto_if_src>
 801c190:	4603      	mov	r3, r0
 801c192:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801c194:	6978      	ldr	r0, [r7, #20]
 801c196:	f7f7 ffef 	bl	8014178 <pbuf_free>
 801c19a:	e001      	b.n	801c1a0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c19c:	23ff      	movs	r3, #255	@ 0xff
 801c19e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801c1a0:	69bb      	ldr	r3, [r7, #24]
 801c1a2:	799b      	ldrb	r3, [r3, #6]
 801c1a4:	2bff      	cmp	r3, #255	@ 0xff
 801c1a6:	d005      	beq.n	801c1b4 <dhcp_decline+0xb0>
    dhcp->tries++;
 801c1a8:	69bb      	ldr	r3, [r7, #24]
 801c1aa:	799b      	ldrb	r3, [r3, #6]
 801c1ac:	3301      	adds	r3, #1
 801c1ae:	b2da      	uxtb	r2, r3
 801c1b0:	69bb      	ldr	r3, [r7, #24]
 801c1b2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801c1b4:	f242 7310 	movw	r3, #10000	@ 0x2710
 801c1b8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c1ba:	89fb      	ldrh	r3, [r7, #14]
 801c1bc:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801c1c0:	4a0a      	ldr	r2, [pc, #40]	@ (801c1ec <dhcp_decline+0xe8>)
 801c1c2:	fb82 1203 	smull	r1, r2, r2, r3
 801c1c6:	1152      	asrs	r2, r2, #5
 801c1c8:	17db      	asrs	r3, r3, #31
 801c1ca:	1ad3      	subs	r3, r2, r3
 801c1cc:	b29a      	uxth	r2, r3
 801c1ce:	69bb      	ldr	r3, [r7, #24]
 801c1d0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c1d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c1d6:	4618      	mov	r0, r3
 801c1d8:	3720      	adds	r7, #32
 801c1da:	46bd      	mov	sp, r7
 801c1dc:	bdb0      	pop	{r4, r5, r7, pc}
 801c1de:	bf00      	nop
 801c1e0:	20004c70 	.word	0x20004c70
 801c1e4:	08027754 	.word	0x08027754
 801c1e8:	08027758 	.word	0x08027758
 801c1ec:	10624dd3 	.word	0x10624dd3

0801c1f0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801c1f0:	b580      	push	{r7, lr}
 801c1f2:	b08a      	sub	sp, #40	@ 0x28
 801c1f4:	af02      	add	r7, sp, #8
 801c1f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c1fc:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801c1fe:	2300      	movs	r3, #0
 801c200:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801c202:	69bb      	ldr	r3, [r7, #24]
 801c204:	2200      	movs	r2, #0
 801c206:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801c208:	2106      	movs	r1, #6
 801c20a:	69b8      	ldr	r0, [r7, #24]
 801c20c:	f000 fbee 	bl	801c9ec <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801c210:	f107 0308 	add.w	r3, r7, #8
 801c214:	2201      	movs	r2, #1
 801c216:	69b9      	ldr	r1, [r7, #24]
 801c218:	6878      	ldr	r0, [r7, #4]
 801c21a:	f001 f873 	bl	801d304 <dhcp_create_msg>
 801c21e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801c220:	693b      	ldr	r3, [r7, #16]
 801c222:	2b00      	cmp	r3, #0
 801c224:	d04b      	beq.n	801c2be <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c226:	693b      	ldr	r3, [r7, #16]
 801c228:	685b      	ldr	r3, [r3, #4]
 801c22a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c22c:	8938      	ldrh	r0, [r7, #8]
 801c22e:	68fb      	ldr	r3, [r7, #12]
 801c230:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c234:	2302      	movs	r3, #2
 801c236:	2239      	movs	r2, #57	@ 0x39
 801c238:	f000 fbf2 	bl	801ca20 <dhcp_option>
 801c23c:	4603      	mov	r3, r0
 801c23e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c240:	8938      	ldrh	r0, [r7, #8]
 801c242:	68fb      	ldr	r3, [r7, #12]
 801c244:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c248:	687b      	ldr	r3, [r7, #4]
 801c24a:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801c24c:	461a      	mov	r2, r3
 801c24e:	f000 fc41 	bl	801cad4 <dhcp_option_short>
 801c252:	4603      	mov	r3, r0
 801c254:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c256:	8938      	ldrh	r0, [r7, #8]
 801c258:	68fb      	ldr	r3, [r7, #12]
 801c25a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c25e:	2303      	movs	r3, #3
 801c260:	2237      	movs	r2, #55	@ 0x37
 801c262:	f000 fbdd 	bl	801ca20 <dhcp_option>
 801c266:	4603      	mov	r3, r0
 801c268:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c26a:	2300      	movs	r3, #0
 801c26c:	77fb      	strb	r3, [r7, #31]
 801c26e:	e00e      	b.n	801c28e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c270:	8938      	ldrh	r0, [r7, #8]
 801c272:	68fb      	ldr	r3, [r7, #12]
 801c274:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c278:	7ffb      	ldrb	r3, [r7, #31]
 801c27a:	4a29      	ldr	r2, [pc, #164]	@ (801c320 <dhcp_discover+0x130>)
 801c27c:	5cd3      	ldrb	r3, [r2, r3]
 801c27e:	461a      	mov	r2, r3
 801c280:	f000 fc02 	bl	801ca88 <dhcp_option_byte>
 801c284:	4603      	mov	r3, r0
 801c286:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c288:	7ffb      	ldrb	r3, [r7, #31]
 801c28a:	3301      	adds	r3, #1
 801c28c:	77fb      	strb	r3, [r7, #31]
 801c28e:	7ffb      	ldrb	r3, [r7, #31]
 801c290:	2b02      	cmp	r3, #2
 801c292:	d9ed      	bls.n	801c270 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c294:	8938      	ldrh	r0, [r7, #8]
 801c296:	68fb      	ldr	r3, [r7, #12]
 801c298:	33f0      	adds	r3, #240	@ 0xf0
 801c29a:	693a      	ldr	r2, [r7, #16]
 801c29c:	4619      	mov	r1, r3
 801c29e:	f001 f907 	bl	801d4b0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801c2a2:	4b20      	ldr	r3, [pc, #128]	@ (801c324 <dhcp_discover+0x134>)
 801c2a4:	6818      	ldr	r0, [r3, #0]
 801c2a6:	4b20      	ldr	r3, [pc, #128]	@ (801c328 <dhcp_discover+0x138>)
 801c2a8:	9301      	str	r3, [sp, #4]
 801c2aa:	687b      	ldr	r3, [r7, #4]
 801c2ac:	9300      	str	r3, [sp, #0]
 801c2ae:	2343      	movs	r3, #67	@ 0x43
 801c2b0:	4a1e      	ldr	r2, [pc, #120]	@ (801c32c <dhcp_discover+0x13c>)
 801c2b2:	6939      	ldr	r1, [r7, #16]
 801c2b4:	f7ff f810 	bl	801b2d8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801c2b8:	6938      	ldr	r0, [r7, #16]
 801c2ba:	f7f7 ff5d 	bl	8014178 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801c2be:	69bb      	ldr	r3, [r7, #24]
 801c2c0:	799b      	ldrb	r3, [r3, #6]
 801c2c2:	2bff      	cmp	r3, #255	@ 0xff
 801c2c4:	d005      	beq.n	801c2d2 <dhcp_discover+0xe2>
    dhcp->tries++;
 801c2c6:	69bb      	ldr	r3, [r7, #24]
 801c2c8:	799b      	ldrb	r3, [r3, #6]
 801c2ca:	3301      	adds	r3, #1
 801c2cc:	b2da      	uxtb	r2, r3
 801c2ce:	69bb      	ldr	r3, [r7, #24]
 801c2d0:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801c2d2:	69bb      	ldr	r3, [r7, #24]
 801c2d4:	799b      	ldrb	r3, [r3, #6]
 801c2d6:	2b05      	cmp	r3, #5
 801c2d8:	d80d      	bhi.n	801c2f6 <dhcp_discover+0x106>
 801c2da:	69bb      	ldr	r3, [r7, #24]
 801c2dc:	799b      	ldrb	r3, [r3, #6]
 801c2de:	461a      	mov	r2, r3
 801c2e0:	2301      	movs	r3, #1
 801c2e2:	4093      	lsls	r3, r2
 801c2e4:	b29b      	uxth	r3, r3
 801c2e6:	461a      	mov	r2, r3
 801c2e8:	0152      	lsls	r2, r2, #5
 801c2ea:	1ad2      	subs	r2, r2, r3
 801c2ec:	0092      	lsls	r2, r2, #2
 801c2ee:	4413      	add	r3, r2
 801c2f0:	00db      	lsls	r3, r3, #3
 801c2f2:	b29b      	uxth	r3, r3
 801c2f4:	e001      	b.n	801c2fa <dhcp_discover+0x10a>
 801c2f6:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801c2fa:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c2fc:	897b      	ldrh	r3, [r7, #10]
 801c2fe:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801c302:	4a0b      	ldr	r2, [pc, #44]	@ (801c330 <dhcp_discover+0x140>)
 801c304:	fb82 1203 	smull	r1, r2, r2, r3
 801c308:	1152      	asrs	r2, r2, #5
 801c30a:	17db      	asrs	r3, r3, #31
 801c30c:	1ad3      	subs	r3, r2, r3
 801c30e:	b29a      	uxth	r2, r3
 801c310:	69bb      	ldr	r3, [r7, #24]
 801c312:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c314:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c318:	4618      	mov	r0, r3
 801c31a:	3720      	adds	r7, #32
 801c31c:	46bd      	mov	sp, r7
 801c31e:	bd80      	pop	{r7, pc}
 801c320:	200000c4 	.word	0x200000c4
 801c324:	20004c70 	.word	0x20004c70
 801c328:	08027754 	.word	0x08027754
 801c32c:	08027758 	.word	0x08027758
 801c330:	10624dd3 	.word	0x10624dd3

0801c334 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801c334:	b580      	push	{r7, lr}
 801c336:	b088      	sub	sp, #32
 801c338:	af00      	add	r7, sp, #0
 801c33a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	2b00      	cmp	r3, #0
 801c340:	d107      	bne.n	801c352 <dhcp_bind+0x1e>
 801c342:	4b64      	ldr	r3, [pc, #400]	@ (801c4d4 <dhcp_bind+0x1a0>)
 801c344:	f240 4215 	movw	r2, #1045	@ 0x415
 801c348:	4963      	ldr	r1, [pc, #396]	@ (801c4d8 <dhcp_bind+0x1a4>)
 801c34a:	4864      	ldr	r0, [pc, #400]	@ (801c4dc <dhcp_bind+0x1a8>)
 801c34c:	f005 f832 	bl	80213b4 <iprintf>
 801c350:	e0bc      	b.n	801c4cc <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c356:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801c358:	69bb      	ldr	r3, [r7, #24]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d107      	bne.n	801c36e <dhcp_bind+0x3a>
 801c35e:	4b5d      	ldr	r3, [pc, #372]	@ (801c4d4 <dhcp_bind+0x1a0>)
 801c360:	f240 4217 	movw	r2, #1047	@ 0x417
 801c364:	495e      	ldr	r1, [pc, #376]	@ (801c4e0 <dhcp_bind+0x1ac>)
 801c366:	485d      	ldr	r0, [pc, #372]	@ (801c4dc <dhcp_bind+0x1a8>)
 801c368:	f005 f824 	bl	80213b4 <iprintf>
 801c36c:	e0ae      	b.n	801c4cc <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801c36e:	69bb      	ldr	r3, [r7, #24]
 801c370:	2200      	movs	r2, #0
 801c372:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801c374:	69bb      	ldr	r3, [r7, #24]
 801c376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c378:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c37c:	d019      	beq.n	801c3b2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c37e:	69bb      	ldr	r3, [r7, #24]
 801c380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c382:	331e      	adds	r3, #30
 801c384:	4a57      	ldr	r2, [pc, #348]	@ (801c4e4 <dhcp_bind+0x1b0>)
 801c386:	fba2 2303 	umull	r2, r3, r2, r3
 801c38a:	095b      	lsrs	r3, r3, #5
 801c38c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801c38e:	69fb      	ldr	r3, [r7, #28]
 801c390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c394:	d302      	bcc.n	801c39c <dhcp_bind+0x68>
      timeout = 0xffff;
 801c396:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c39a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801c39c:	69fb      	ldr	r3, [r7, #28]
 801c39e:	b29a      	uxth	r2, r3
 801c3a0:	69bb      	ldr	r3, [r7, #24]
 801c3a2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801c3a4:	69bb      	ldr	r3, [r7, #24]
 801c3a6:	8a9b      	ldrh	r3, [r3, #20]
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	d102      	bne.n	801c3b2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801c3ac:	69bb      	ldr	r3, [r7, #24]
 801c3ae:	2201      	movs	r2, #1
 801c3b0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801c3b2:	69bb      	ldr	r3, [r7, #24]
 801c3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c3b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c3ba:	d01d      	beq.n	801c3f8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c3bc:	69bb      	ldr	r3, [r7, #24]
 801c3be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c3c0:	331e      	adds	r3, #30
 801c3c2:	4a48      	ldr	r2, [pc, #288]	@ (801c4e4 <dhcp_bind+0x1b0>)
 801c3c4:	fba2 2303 	umull	r2, r3, r2, r3
 801c3c8:	095b      	lsrs	r3, r3, #5
 801c3ca:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801c3cc:	69fb      	ldr	r3, [r7, #28]
 801c3ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c3d2:	d302      	bcc.n	801c3da <dhcp_bind+0xa6>
      timeout = 0xffff;
 801c3d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c3d8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801c3da:	69fb      	ldr	r3, [r7, #28]
 801c3dc:	b29a      	uxth	r2, r3
 801c3de:	69bb      	ldr	r3, [r7, #24]
 801c3e0:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801c3e2:	69bb      	ldr	r3, [r7, #24]
 801c3e4:	895b      	ldrh	r3, [r3, #10]
 801c3e6:	2b00      	cmp	r3, #0
 801c3e8:	d102      	bne.n	801c3f0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801c3ea:	69bb      	ldr	r3, [r7, #24]
 801c3ec:	2201      	movs	r2, #1
 801c3ee:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801c3f0:	69bb      	ldr	r3, [r7, #24]
 801c3f2:	895a      	ldrh	r2, [r3, #10]
 801c3f4:	69bb      	ldr	r3, [r7, #24]
 801c3f6:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801c3f8:	69bb      	ldr	r3, [r7, #24]
 801c3fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c3fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c400:	d01d      	beq.n	801c43e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c402:	69bb      	ldr	r3, [r7, #24]
 801c404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c406:	331e      	adds	r3, #30
 801c408:	4a36      	ldr	r2, [pc, #216]	@ (801c4e4 <dhcp_bind+0x1b0>)
 801c40a:	fba2 2303 	umull	r2, r3, r2, r3
 801c40e:	095b      	lsrs	r3, r3, #5
 801c410:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801c412:	69fb      	ldr	r3, [r7, #28]
 801c414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c418:	d302      	bcc.n	801c420 <dhcp_bind+0xec>
      timeout = 0xffff;
 801c41a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c41e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801c420:	69fb      	ldr	r3, [r7, #28]
 801c422:	b29a      	uxth	r2, r3
 801c424:	69bb      	ldr	r3, [r7, #24]
 801c426:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801c428:	69bb      	ldr	r3, [r7, #24]
 801c42a:	899b      	ldrh	r3, [r3, #12]
 801c42c:	2b00      	cmp	r3, #0
 801c42e:	d102      	bne.n	801c436 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801c430:	69bb      	ldr	r3, [r7, #24]
 801c432:	2201      	movs	r2, #1
 801c434:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801c436:	69bb      	ldr	r3, [r7, #24]
 801c438:	899a      	ldrh	r2, [r3, #12]
 801c43a:	69bb      	ldr	r3, [r7, #24]
 801c43c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801c43e:	69bb      	ldr	r3, [r7, #24]
 801c440:	895a      	ldrh	r2, [r3, #10]
 801c442:	69bb      	ldr	r3, [r7, #24]
 801c444:	899b      	ldrh	r3, [r3, #12]
 801c446:	429a      	cmp	r2, r3
 801c448:	d306      	bcc.n	801c458 <dhcp_bind+0x124>
 801c44a:	69bb      	ldr	r3, [r7, #24]
 801c44c:	899b      	ldrh	r3, [r3, #12]
 801c44e:	2b00      	cmp	r3, #0
 801c450:	d002      	beq.n	801c458 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801c452:	69bb      	ldr	r3, [r7, #24]
 801c454:	2200      	movs	r2, #0
 801c456:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801c458:	69bb      	ldr	r3, [r7, #24]
 801c45a:	79db      	ldrb	r3, [r3, #7]
 801c45c:	2b00      	cmp	r3, #0
 801c45e:	d003      	beq.n	801c468 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801c460:	69bb      	ldr	r3, [r7, #24]
 801c462:	6a1b      	ldr	r3, [r3, #32]
 801c464:	613b      	str	r3, [r7, #16]
 801c466:	e014      	b.n	801c492 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801c468:	69bb      	ldr	r3, [r7, #24]
 801c46a:	331c      	adds	r3, #28
 801c46c:	781b      	ldrb	r3, [r3, #0]
 801c46e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801c470:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c474:	2b00      	cmp	r3, #0
 801c476:	db02      	blt.n	801c47e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801c478:	23ff      	movs	r3, #255	@ 0xff
 801c47a:	613b      	str	r3, [r7, #16]
 801c47c:	e009      	b.n	801c492 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801c47e:	7dfb      	ldrb	r3, [r7, #23]
 801c480:	2bbf      	cmp	r3, #191	@ 0xbf
 801c482:	d903      	bls.n	801c48c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801c484:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 801c488:	613b      	str	r3, [r7, #16]
 801c48a:	e002      	b.n	801c492 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801c48c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c490:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801c492:	69bb      	ldr	r3, [r7, #24]
 801c494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c496:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801c498:	68fb      	ldr	r3, [r7, #12]
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	d108      	bne.n	801c4b0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801c49e:	69bb      	ldr	r3, [r7, #24]
 801c4a0:	69da      	ldr	r2, [r3, #28]
 801c4a2:	693b      	ldr	r3, [r7, #16]
 801c4a4:	4013      	ands	r3, r2
 801c4a6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801c4a8:	68fb      	ldr	r3, [r7, #12]
 801c4aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801c4ae:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801c4b0:	210a      	movs	r1, #10
 801c4b2:	69b8      	ldr	r0, [r7, #24]
 801c4b4:	f000 fa9a 	bl	801c9ec <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801c4b8:	69bb      	ldr	r3, [r7, #24]
 801c4ba:	f103 011c 	add.w	r1, r3, #28
 801c4be:	f107 030c 	add.w	r3, r7, #12
 801c4c2:	f107 0210 	add.w	r2, r7, #16
 801c4c6:	6878      	ldr	r0, [r7, #4]
 801c4c8:	f7f7 f918 	bl	80136fc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801c4cc:	3720      	adds	r7, #32
 801c4ce:	46bd      	mov	sp, r7
 801c4d0:	bd80      	pop	{r7, pc}
 801c4d2:	bf00      	nop
 801c4d4:	080259a0 	.word	0x080259a0
 801c4d8:	08025b00 	.word	0x08025b00
 801c4dc:	08025a00 	.word	0x08025a00
 801c4e0:	08025b1c 	.word	0x08025b1c
 801c4e4:	88888889 	.word	0x88888889

0801c4e8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801c4e8:	b580      	push	{r7, lr}
 801c4ea:	b08a      	sub	sp, #40	@ 0x28
 801c4ec:	af02      	add	r7, sp, #8
 801c4ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c4f4:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801c4f6:	2105      	movs	r1, #5
 801c4f8:	69b8      	ldr	r0, [r7, #24]
 801c4fa:	f000 fa77 	bl	801c9ec <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c4fe:	f107 030c 	add.w	r3, r7, #12
 801c502:	2203      	movs	r2, #3
 801c504:	69b9      	ldr	r1, [r7, #24]
 801c506:	6878      	ldr	r0, [r7, #4]
 801c508:	f000 fefc 	bl	801d304 <dhcp_create_msg>
 801c50c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c50e:	697b      	ldr	r3, [r7, #20]
 801c510:	2b00      	cmp	r3, #0
 801c512:	d04e      	beq.n	801c5b2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c514:	697b      	ldr	r3, [r7, #20]
 801c516:	685b      	ldr	r3, [r3, #4]
 801c518:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c51a:	89b8      	ldrh	r0, [r7, #12]
 801c51c:	693b      	ldr	r3, [r7, #16]
 801c51e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c522:	2302      	movs	r3, #2
 801c524:	2239      	movs	r2, #57	@ 0x39
 801c526:	f000 fa7b 	bl	801ca20 <dhcp_option>
 801c52a:	4603      	mov	r3, r0
 801c52c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c52e:	89b8      	ldrh	r0, [r7, #12]
 801c530:	693b      	ldr	r3, [r7, #16]
 801c532:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c536:	687b      	ldr	r3, [r7, #4]
 801c538:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801c53a:	461a      	mov	r2, r3
 801c53c:	f000 faca 	bl	801cad4 <dhcp_option_short>
 801c540:	4603      	mov	r3, r0
 801c542:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c544:	89b8      	ldrh	r0, [r7, #12]
 801c546:	693b      	ldr	r3, [r7, #16]
 801c548:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c54c:	2303      	movs	r3, #3
 801c54e:	2237      	movs	r2, #55	@ 0x37
 801c550:	f000 fa66 	bl	801ca20 <dhcp_option>
 801c554:	4603      	mov	r3, r0
 801c556:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c558:	2300      	movs	r3, #0
 801c55a:	77bb      	strb	r3, [r7, #30]
 801c55c:	e00e      	b.n	801c57c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c55e:	89b8      	ldrh	r0, [r7, #12]
 801c560:	693b      	ldr	r3, [r7, #16]
 801c562:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c566:	7fbb      	ldrb	r3, [r7, #30]
 801c568:	4a29      	ldr	r2, [pc, #164]	@ (801c610 <dhcp_renew+0x128>)
 801c56a:	5cd3      	ldrb	r3, [r2, r3]
 801c56c:	461a      	mov	r2, r3
 801c56e:	f000 fa8b 	bl	801ca88 <dhcp_option_byte>
 801c572:	4603      	mov	r3, r0
 801c574:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c576:	7fbb      	ldrb	r3, [r7, #30]
 801c578:	3301      	adds	r3, #1
 801c57a:	77bb      	strb	r3, [r7, #30]
 801c57c:	7fbb      	ldrb	r3, [r7, #30]
 801c57e:	2b02      	cmp	r3, #2
 801c580:	d9ed      	bls.n	801c55e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c582:	89b8      	ldrh	r0, [r7, #12]
 801c584:	693b      	ldr	r3, [r7, #16]
 801c586:	33f0      	adds	r3, #240	@ 0xf0
 801c588:	697a      	ldr	r2, [r7, #20]
 801c58a:	4619      	mov	r1, r3
 801c58c:	f000 ff90 	bl	801d4b0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801c590:	4b20      	ldr	r3, [pc, #128]	@ (801c614 <dhcp_renew+0x12c>)
 801c592:	6818      	ldr	r0, [r3, #0]
 801c594:	69bb      	ldr	r3, [r7, #24]
 801c596:	f103 0218 	add.w	r2, r3, #24
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	9300      	str	r3, [sp, #0]
 801c59e:	2343      	movs	r3, #67	@ 0x43
 801c5a0:	6979      	ldr	r1, [r7, #20]
 801c5a2:	f7fe fe25 	bl	801b1f0 <udp_sendto_if>
 801c5a6:	4603      	mov	r3, r0
 801c5a8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801c5aa:	6978      	ldr	r0, [r7, #20]
 801c5ac:	f7f7 fde4 	bl	8014178 <pbuf_free>
 801c5b0:	e001      	b.n	801c5b6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c5b2:	23ff      	movs	r3, #255	@ 0xff
 801c5b4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801c5b6:	69bb      	ldr	r3, [r7, #24]
 801c5b8:	799b      	ldrb	r3, [r3, #6]
 801c5ba:	2bff      	cmp	r3, #255	@ 0xff
 801c5bc:	d005      	beq.n	801c5ca <dhcp_renew+0xe2>
    dhcp->tries++;
 801c5be:	69bb      	ldr	r3, [r7, #24]
 801c5c0:	799b      	ldrb	r3, [r3, #6]
 801c5c2:	3301      	adds	r3, #1
 801c5c4:	b2da      	uxtb	r2, r3
 801c5c6:	69bb      	ldr	r3, [r7, #24]
 801c5c8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801c5ca:	69bb      	ldr	r3, [r7, #24]
 801c5cc:	799b      	ldrb	r3, [r3, #6]
 801c5ce:	2b09      	cmp	r3, #9
 801c5d0:	d809      	bhi.n	801c5e6 <dhcp_renew+0xfe>
 801c5d2:	69bb      	ldr	r3, [r7, #24]
 801c5d4:	799b      	ldrb	r3, [r3, #6]
 801c5d6:	461a      	mov	r2, r3
 801c5d8:	0152      	lsls	r2, r2, #5
 801c5da:	1ad2      	subs	r2, r2, r3
 801c5dc:	0092      	lsls	r2, r2, #2
 801c5de:	4413      	add	r3, r2
 801c5e0:	011b      	lsls	r3, r3, #4
 801c5e2:	b29b      	uxth	r3, r3
 801c5e4:	e001      	b.n	801c5ea <dhcp_renew+0x102>
 801c5e6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801c5ea:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c5ec:	89fb      	ldrh	r3, [r7, #14]
 801c5ee:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801c5f2:	4a09      	ldr	r2, [pc, #36]	@ (801c618 <dhcp_renew+0x130>)
 801c5f4:	fb82 1203 	smull	r1, r2, r2, r3
 801c5f8:	1152      	asrs	r2, r2, #5
 801c5fa:	17db      	asrs	r3, r3, #31
 801c5fc:	1ad3      	subs	r3, r2, r3
 801c5fe:	b29a      	uxth	r2, r3
 801c600:	69bb      	ldr	r3, [r7, #24]
 801c602:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c604:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c608:	4618      	mov	r0, r3
 801c60a:	3720      	adds	r7, #32
 801c60c:	46bd      	mov	sp, r7
 801c60e:	bd80      	pop	{r7, pc}
 801c610:	200000c4 	.word	0x200000c4
 801c614:	20004c70 	.word	0x20004c70
 801c618:	10624dd3 	.word	0x10624dd3

0801c61c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801c61c:	b580      	push	{r7, lr}
 801c61e:	b08a      	sub	sp, #40	@ 0x28
 801c620:	af02      	add	r7, sp, #8
 801c622:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c624:	687b      	ldr	r3, [r7, #4]
 801c626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c628:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801c62a:	2104      	movs	r1, #4
 801c62c:	69b8      	ldr	r0, [r7, #24]
 801c62e:	f000 f9dd 	bl	801c9ec <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c632:	f107 030c 	add.w	r3, r7, #12
 801c636:	2203      	movs	r2, #3
 801c638:	69b9      	ldr	r1, [r7, #24]
 801c63a:	6878      	ldr	r0, [r7, #4]
 801c63c:	f000 fe62 	bl	801d304 <dhcp_create_msg>
 801c640:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c642:	697b      	ldr	r3, [r7, #20]
 801c644:	2b00      	cmp	r3, #0
 801c646:	d04c      	beq.n	801c6e2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c648:	697b      	ldr	r3, [r7, #20]
 801c64a:	685b      	ldr	r3, [r3, #4]
 801c64c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c64e:	89b8      	ldrh	r0, [r7, #12]
 801c650:	693b      	ldr	r3, [r7, #16]
 801c652:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c656:	2302      	movs	r3, #2
 801c658:	2239      	movs	r2, #57	@ 0x39
 801c65a:	f000 f9e1 	bl	801ca20 <dhcp_option>
 801c65e:	4603      	mov	r3, r0
 801c660:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c662:	89b8      	ldrh	r0, [r7, #12]
 801c664:	693b      	ldr	r3, [r7, #16]
 801c666:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c66a:	687b      	ldr	r3, [r7, #4]
 801c66c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801c66e:	461a      	mov	r2, r3
 801c670:	f000 fa30 	bl	801cad4 <dhcp_option_short>
 801c674:	4603      	mov	r3, r0
 801c676:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c678:	89b8      	ldrh	r0, [r7, #12]
 801c67a:	693b      	ldr	r3, [r7, #16]
 801c67c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c680:	2303      	movs	r3, #3
 801c682:	2237      	movs	r2, #55	@ 0x37
 801c684:	f000 f9cc 	bl	801ca20 <dhcp_option>
 801c688:	4603      	mov	r3, r0
 801c68a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c68c:	2300      	movs	r3, #0
 801c68e:	77bb      	strb	r3, [r7, #30]
 801c690:	e00e      	b.n	801c6b0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c692:	89b8      	ldrh	r0, [r7, #12]
 801c694:	693b      	ldr	r3, [r7, #16]
 801c696:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c69a:	7fbb      	ldrb	r3, [r7, #30]
 801c69c:	4a28      	ldr	r2, [pc, #160]	@ (801c740 <dhcp_rebind+0x124>)
 801c69e:	5cd3      	ldrb	r3, [r2, r3]
 801c6a0:	461a      	mov	r2, r3
 801c6a2:	f000 f9f1 	bl	801ca88 <dhcp_option_byte>
 801c6a6:	4603      	mov	r3, r0
 801c6a8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c6aa:	7fbb      	ldrb	r3, [r7, #30]
 801c6ac:	3301      	adds	r3, #1
 801c6ae:	77bb      	strb	r3, [r7, #30]
 801c6b0:	7fbb      	ldrb	r3, [r7, #30]
 801c6b2:	2b02      	cmp	r3, #2
 801c6b4:	d9ed      	bls.n	801c692 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c6b6:	89b8      	ldrh	r0, [r7, #12]
 801c6b8:	693b      	ldr	r3, [r7, #16]
 801c6ba:	33f0      	adds	r3, #240	@ 0xf0
 801c6bc:	697a      	ldr	r2, [r7, #20]
 801c6be:	4619      	mov	r1, r3
 801c6c0:	f000 fef6 	bl	801d4b0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801c6c4:	4b1f      	ldr	r3, [pc, #124]	@ (801c744 <dhcp_rebind+0x128>)
 801c6c6:	6818      	ldr	r0, [r3, #0]
 801c6c8:	687b      	ldr	r3, [r7, #4]
 801c6ca:	9300      	str	r3, [sp, #0]
 801c6cc:	2343      	movs	r3, #67	@ 0x43
 801c6ce:	4a1e      	ldr	r2, [pc, #120]	@ (801c748 <dhcp_rebind+0x12c>)
 801c6d0:	6979      	ldr	r1, [r7, #20]
 801c6d2:	f7fe fd8d 	bl	801b1f0 <udp_sendto_if>
 801c6d6:	4603      	mov	r3, r0
 801c6d8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801c6da:	6978      	ldr	r0, [r7, #20]
 801c6dc:	f7f7 fd4c 	bl	8014178 <pbuf_free>
 801c6e0:	e001      	b.n	801c6e6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c6e2:	23ff      	movs	r3, #255	@ 0xff
 801c6e4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801c6e6:	69bb      	ldr	r3, [r7, #24]
 801c6e8:	799b      	ldrb	r3, [r3, #6]
 801c6ea:	2bff      	cmp	r3, #255	@ 0xff
 801c6ec:	d005      	beq.n	801c6fa <dhcp_rebind+0xde>
    dhcp->tries++;
 801c6ee:	69bb      	ldr	r3, [r7, #24]
 801c6f0:	799b      	ldrb	r3, [r3, #6]
 801c6f2:	3301      	adds	r3, #1
 801c6f4:	b2da      	uxtb	r2, r3
 801c6f6:	69bb      	ldr	r3, [r7, #24]
 801c6f8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801c6fa:	69bb      	ldr	r3, [r7, #24]
 801c6fc:	799b      	ldrb	r3, [r3, #6]
 801c6fe:	2b09      	cmp	r3, #9
 801c700:	d809      	bhi.n	801c716 <dhcp_rebind+0xfa>
 801c702:	69bb      	ldr	r3, [r7, #24]
 801c704:	799b      	ldrb	r3, [r3, #6]
 801c706:	461a      	mov	r2, r3
 801c708:	0152      	lsls	r2, r2, #5
 801c70a:	1ad2      	subs	r2, r2, r3
 801c70c:	0092      	lsls	r2, r2, #2
 801c70e:	4413      	add	r3, r2
 801c710:	00db      	lsls	r3, r3, #3
 801c712:	b29b      	uxth	r3, r3
 801c714:	e001      	b.n	801c71a <dhcp_rebind+0xfe>
 801c716:	f242 7310 	movw	r3, #10000	@ 0x2710
 801c71a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c71c:	89fb      	ldrh	r3, [r7, #14]
 801c71e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801c722:	4a0a      	ldr	r2, [pc, #40]	@ (801c74c <dhcp_rebind+0x130>)
 801c724:	fb82 1203 	smull	r1, r2, r2, r3
 801c728:	1152      	asrs	r2, r2, #5
 801c72a:	17db      	asrs	r3, r3, #31
 801c72c:	1ad3      	subs	r3, r2, r3
 801c72e:	b29a      	uxth	r2, r3
 801c730:	69bb      	ldr	r3, [r7, #24]
 801c732:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c734:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c738:	4618      	mov	r0, r3
 801c73a:	3720      	adds	r7, #32
 801c73c:	46bd      	mov	sp, r7
 801c73e:	bd80      	pop	{r7, pc}
 801c740:	200000c4 	.word	0x200000c4
 801c744:	20004c70 	.word	0x20004c70
 801c748:	08027758 	.word	0x08027758
 801c74c:	10624dd3 	.word	0x10624dd3

0801c750 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801c750:	b5b0      	push	{r4, r5, r7, lr}
 801c752:	b08a      	sub	sp, #40	@ 0x28
 801c754:	af02      	add	r7, sp, #8
 801c756:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c75c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801c75e:	2103      	movs	r1, #3
 801c760:	69b8      	ldr	r0, [r7, #24]
 801c762:	f000 f943 	bl	801c9ec <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c766:	f107 030c 	add.w	r3, r7, #12
 801c76a:	2203      	movs	r2, #3
 801c76c:	69b9      	ldr	r1, [r7, #24]
 801c76e:	6878      	ldr	r0, [r7, #4]
 801c770:	f000 fdc8 	bl	801d304 <dhcp_create_msg>
 801c774:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c776:	697b      	ldr	r3, [r7, #20]
 801c778:	2b00      	cmp	r3, #0
 801c77a:	d066      	beq.n	801c84a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c77c:	697b      	ldr	r3, [r7, #20]
 801c77e:	685b      	ldr	r3, [r3, #4]
 801c780:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c782:	89b8      	ldrh	r0, [r7, #12]
 801c784:	693b      	ldr	r3, [r7, #16]
 801c786:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c78a:	2302      	movs	r3, #2
 801c78c:	2239      	movs	r2, #57	@ 0x39
 801c78e:	f000 f947 	bl	801ca20 <dhcp_option>
 801c792:	4603      	mov	r3, r0
 801c794:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801c796:	89b8      	ldrh	r0, [r7, #12]
 801c798:	693b      	ldr	r3, [r7, #16]
 801c79a:	33f0      	adds	r3, #240	@ 0xf0
 801c79c:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801c7a0:	4619      	mov	r1, r3
 801c7a2:	f000 f997 	bl	801cad4 <dhcp_option_short>
 801c7a6:	4603      	mov	r3, r0
 801c7a8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c7aa:	89b8      	ldrh	r0, [r7, #12]
 801c7ac:	693b      	ldr	r3, [r7, #16]
 801c7ae:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c7b2:	2304      	movs	r3, #4
 801c7b4:	2232      	movs	r2, #50	@ 0x32
 801c7b6:	f000 f933 	bl	801ca20 <dhcp_option>
 801c7ba:	4603      	mov	r3, r0
 801c7bc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c7be:	89bc      	ldrh	r4, [r7, #12]
 801c7c0:	693b      	ldr	r3, [r7, #16]
 801c7c2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801c7c6:	69bb      	ldr	r3, [r7, #24]
 801c7c8:	69db      	ldr	r3, [r3, #28]
 801c7ca:	4618      	mov	r0, r3
 801c7cc:	f7f5 ff2c 	bl	8012628 <lwip_htonl>
 801c7d0:	4603      	mov	r3, r0
 801c7d2:	461a      	mov	r2, r3
 801c7d4:	4629      	mov	r1, r5
 801c7d6:	4620      	mov	r0, r4
 801c7d8:	f000 f9ae 	bl	801cb38 <dhcp_option_long>
 801c7dc:	4603      	mov	r3, r0
 801c7de:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c7e0:	89b8      	ldrh	r0, [r7, #12]
 801c7e2:	693b      	ldr	r3, [r7, #16]
 801c7e4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c7e8:	2303      	movs	r3, #3
 801c7ea:	2237      	movs	r2, #55	@ 0x37
 801c7ec:	f000 f918 	bl	801ca20 <dhcp_option>
 801c7f0:	4603      	mov	r3, r0
 801c7f2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c7f4:	2300      	movs	r3, #0
 801c7f6:	77bb      	strb	r3, [r7, #30]
 801c7f8:	e00e      	b.n	801c818 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c7fa:	89b8      	ldrh	r0, [r7, #12]
 801c7fc:	693b      	ldr	r3, [r7, #16]
 801c7fe:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c802:	7fbb      	ldrb	r3, [r7, #30]
 801c804:	4a28      	ldr	r2, [pc, #160]	@ (801c8a8 <dhcp_reboot+0x158>)
 801c806:	5cd3      	ldrb	r3, [r2, r3]
 801c808:	461a      	mov	r2, r3
 801c80a:	f000 f93d 	bl	801ca88 <dhcp_option_byte>
 801c80e:	4603      	mov	r3, r0
 801c810:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c812:	7fbb      	ldrb	r3, [r7, #30]
 801c814:	3301      	adds	r3, #1
 801c816:	77bb      	strb	r3, [r7, #30]
 801c818:	7fbb      	ldrb	r3, [r7, #30]
 801c81a:	2b02      	cmp	r3, #2
 801c81c:	d9ed      	bls.n	801c7fa <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c81e:	89b8      	ldrh	r0, [r7, #12]
 801c820:	693b      	ldr	r3, [r7, #16]
 801c822:	33f0      	adds	r3, #240	@ 0xf0
 801c824:	697a      	ldr	r2, [r7, #20]
 801c826:	4619      	mov	r1, r3
 801c828:	f000 fe42 	bl	801d4b0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801c82c:	4b1f      	ldr	r3, [pc, #124]	@ (801c8ac <dhcp_reboot+0x15c>)
 801c82e:	6818      	ldr	r0, [r3, #0]
 801c830:	687b      	ldr	r3, [r7, #4]
 801c832:	9300      	str	r3, [sp, #0]
 801c834:	2343      	movs	r3, #67	@ 0x43
 801c836:	4a1e      	ldr	r2, [pc, #120]	@ (801c8b0 <dhcp_reboot+0x160>)
 801c838:	6979      	ldr	r1, [r7, #20]
 801c83a:	f7fe fcd9 	bl	801b1f0 <udp_sendto_if>
 801c83e:	4603      	mov	r3, r0
 801c840:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801c842:	6978      	ldr	r0, [r7, #20]
 801c844:	f7f7 fc98 	bl	8014178 <pbuf_free>
 801c848:	e001      	b.n	801c84e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c84a:	23ff      	movs	r3, #255	@ 0xff
 801c84c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801c84e:	69bb      	ldr	r3, [r7, #24]
 801c850:	799b      	ldrb	r3, [r3, #6]
 801c852:	2bff      	cmp	r3, #255	@ 0xff
 801c854:	d005      	beq.n	801c862 <dhcp_reboot+0x112>
    dhcp->tries++;
 801c856:	69bb      	ldr	r3, [r7, #24]
 801c858:	799b      	ldrb	r3, [r3, #6]
 801c85a:	3301      	adds	r3, #1
 801c85c:	b2da      	uxtb	r2, r3
 801c85e:	69bb      	ldr	r3, [r7, #24]
 801c860:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801c862:	69bb      	ldr	r3, [r7, #24]
 801c864:	799b      	ldrb	r3, [r3, #6]
 801c866:	2b09      	cmp	r3, #9
 801c868:	d809      	bhi.n	801c87e <dhcp_reboot+0x12e>
 801c86a:	69bb      	ldr	r3, [r7, #24]
 801c86c:	799b      	ldrb	r3, [r3, #6]
 801c86e:	461a      	mov	r2, r3
 801c870:	0152      	lsls	r2, r2, #5
 801c872:	1ad2      	subs	r2, r2, r3
 801c874:	0092      	lsls	r2, r2, #2
 801c876:	4413      	add	r3, r2
 801c878:	00db      	lsls	r3, r3, #3
 801c87a:	b29b      	uxth	r3, r3
 801c87c:	e001      	b.n	801c882 <dhcp_reboot+0x132>
 801c87e:	f242 7310 	movw	r3, #10000	@ 0x2710
 801c882:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c884:	89fb      	ldrh	r3, [r7, #14]
 801c886:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801c88a:	4a0a      	ldr	r2, [pc, #40]	@ (801c8b4 <dhcp_reboot+0x164>)
 801c88c:	fb82 1203 	smull	r1, r2, r2, r3
 801c890:	1152      	asrs	r2, r2, #5
 801c892:	17db      	asrs	r3, r3, #31
 801c894:	1ad3      	subs	r3, r2, r3
 801c896:	b29a      	uxth	r2, r3
 801c898:	69bb      	ldr	r3, [r7, #24]
 801c89a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c89c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c8a0:	4618      	mov	r0, r3
 801c8a2:	3720      	adds	r7, #32
 801c8a4:	46bd      	mov	sp, r7
 801c8a6:	bdb0      	pop	{r4, r5, r7, pc}
 801c8a8:	200000c4 	.word	0x200000c4
 801c8ac:	20004c70 	.word	0x20004c70
 801c8b0:	08027758 	.word	0x08027758
 801c8b4:	10624dd3 	.word	0x10624dd3

0801c8b8 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801c8b8:	b5b0      	push	{r4, r5, r7, lr}
 801c8ba:	b08a      	sub	sp, #40	@ 0x28
 801c8bc:	af02      	add	r7, sp, #8
 801c8be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c8c0:	687b      	ldr	r3, [r7, #4]
 801c8c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c8c4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801c8c6:	69fb      	ldr	r3, [r7, #28]
 801c8c8:	2b00      	cmp	r3, #0
 801c8ca:	f000 8084 	beq.w	801c9d6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801c8ce:	69fb      	ldr	r3, [r7, #28]
 801c8d0:	795b      	ldrb	r3, [r3, #5]
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	f000 8081 	beq.w	801c9da <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801c8d8:	69fb      	ldr	r3, [r7, #28]
 801c8da:	699b      	ldr	r3, [r3, #24]
 801c8dc:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801c8de:	69fb      	ldr	r3, [r7, #28]
 801c8e0:	2200      	movs	r2, #0
 801c8e2:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801c8e4:	69fb      	ldr	r3, [r7, #28]
 801c8e6:	2200      	movs	r2, #0
 801c8e8:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801c8ea:	69fb      	ldr	r3, [r7, #28]
 801c8ec:	2200      	movs	r2, #0
 801c8ee:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801c8f0:	69fb      	ldr	r3, [r7, #28]
 801c8f2:	2200      	movs	r2, #0
 801c8f4:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801c8f6:	69fb      	ldr	r3, [r7, #28]
 801c8f8:	2200      	movs	r2, #0
 801c8fa:	631a      	str	r2, [r3, #48]	@ 0x30
 801c8fc:	69fb      	ldr	r3, [r7, #28]
 801c8fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801c900:	69fb      	ldr	r3, [r7, #28]
 801c902:	62da      	str	r2, [r3, #44]	@ 0x2c
 801c904:	69fb      	ldr	r3, [r7, #28]
 801c906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801c908:	69fb      	ldr	r3, [r7, #28]
 801c90a:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801c90c:	69fb      	ldr	r3, [r7, #28]
 801c90e:	2200      	movs	r2, #0
 801c910:	829a      	strh	r2, [r3, #20]
 801c912:	69fb      	ldr	r3, [r7, #28]
 801c914:	8a9a      	ldrh	r2, [r3, #20]
 801c916:	69fb      	ldr	r3, [r7, #28]
 801c918:	825a      	strh	r2, [r3, #18]
 801c91a:	69fb      	ldr	r3, [r7, #28]
 801c91c:	8a5a      	ldrh	r2, [r3, #18]
 801c91e:	69fb      	ldr	r3, [r7, #28]
 801c920:	821a      	strh	r2, [r3, #16]
 801c922:	69fb      	ldr	r3, [r7, #28]
 801c924:	8a1a      	ldrh	r2, [r3, #16]
 801c926:	69fb      	ldr	r3, [r7, #28]
 801c928:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801c92a:	6878      	ldr	r0, [r7, #4]
 801c92c:	f000 fdee 	bl	801d50c <dhcp_supplied_address>
 801c930:	4603      	mov	r3, r0
 801c932:	2b00      	cmp	r3, #0
 801c934:	d03b      	beq.n	801c9ae <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801c936:	f107 030e 	add.w	r3, r7, #14
 801c93a:	2207      	movs	r2, #7
 801c93c:	69f9      	ldr	r1, [r7, #28]
 801c93e:	6878      	ldr	r0, [r7, #4]
 801c940:	f000 fce0 	bl	801d304 <dhcp_create_msg>
 801c944:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801c946:	69bb      	ldr	r3, [r7, #24]
 801c948:	2b00      	cmp	r3, #0
 801c94a:	d030      	beq.n	801c9ae <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c94c:	69bb      	ldr	r3, [r7, #24]
 801c94e:	685b      	ldr	r3, [r3, #4]
 801c950:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801c952:	89f8      	ldrh	r0, [r7, #14]
 801c954:	697b      	ldr	r3, [r7, #20]
 801c956:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801c95a:	2304      	movs	r3, #4
 801c95c:	2236      	movs	r2, #54	@ 0x36
 801c95e:	f000 f85f 	bl	801ca20 <dhcp_option>
 801c962:	4603      	mov	r3, r0
 801c964:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801c966:	89fc      	ldrh	r4, [r7, #14]
 801c968:	697b      	ldr	r3, [r7, #20]
 801c96a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801c96e:	693b      	ldr	r3, [r7, #16]
 801c970:	4618      	mov	r0, r3
 801c972:	f7f5 fe59 	bl	8012628 <lwip_htonl>
 801c976:	4603      	mov	r3, r0
 801c978:	461a      	mov	r2, r3
 801c97a:	4629      	mov	r1, r5
 801c97c:	4620      	mov	r0, r4
 801c97e:	f000 f8db 	bl	801cb38 <dhcp_option_long>
 801c982:	4603      	mov	r3, r0
 801c984:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c986:	89f8      	ldrh	r0, [r7, #14]
 801c988:	697b      	ldr	r3, [r7, #20]
 801c98a:	33f0      	adds	r3, #240	@ 0xf0
 801c98c:	69ba      	ldr	r2, [r7, #24]
 801c98e:	4619      	mov	r1, r3
 801c990:	f000 fd8e 	bl	801d4b0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801c994:	4b13      	ldr	r3, [pc, #76]	@ (801c9e4 <dhcp_release_and_stop+0x12c>)
 801c996:	6818      	ldr	r0, [r3, #0]
 801c998:	f107 0210 	add.w	r2, r7, #16
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	9300      	str	r3, [sp, #0]
 801c9a0:	2343      	movs	r3, #67	@ 0x43
 801c9a2:	69b9      	ldr	r1, [r7, #24]
 801c9a4:	f7fe fc24 	bl	801b1f0 <udp_sendto_if>
      pbuf_free(p_out);
 801c9a8:	69b8      	ldr	r0, [r7, #24]
 801c9aa:	f7f7 fbe5 	bl	8014178 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801c9ae:	4b0e      	ldr	r3, [pc, #56]	@ (801c9e8 <dhcp_release_and_stop+0x130>)
 801c9b0:	4a0d      	ldr	r2, [pc, #52]	@ (801c9e8 <dhcp_release_and_stop+0x130>)
 801c9b2:	490d      	ldr	r1, [pc, #52]	@ (801c9e8 <dhcp_release_and_stop+0x130>)
 801c9b4:	6878      	ldr	r0, [r7, #4]
 801c9b6:	f7f6 fea1 	bl	80136fc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801c9ba:	2100      	movs	r1, #0
 801c9bc:	69f8      	ldr	r0, [r7, #28]
 801c9be:	f000 f815 	bl	801c9ec <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801c9c2:	69fb      	ldr	r3, [r7, #28]
 801c9c4:	791b      	ldrb	r3, [r3, #4]
 801c9c6:	2b00      	cmp	r3, #0
 801c9c8:	d008      	beq.n	801c9dc <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801c9ca:	f7fe ff89 	bl	801b8e0 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801c9ce:	69fb      	ldr	r3, [r7, #28]
 801c9d0:	2200      	movs	r2, #0
 801c9d2:	711a      	strb	r2, [r3, #4]
 801c9d4:	e002      	b.n	801c9dc <dhcp_release_and_stop+0x124>
    return;
 801c9d6:	bf00      	nop
 801c9d8:	e000      	b.n	801c9dc <dhcp_release_and_stop+0x124>
    return;
 801c9da:	bf00      	nop
  }
}
 801c9dc:	3720      	adds	r7, #32
 801c9de:	46bd      	mov	sp, r7
 801c9e0:	bdb0      	pop	{r4, r5, r7, pc}
 801c9e2:	bf00      	nop
 801c9e4:	20004c70 	.word	0x20004c70
 801c9e8:	08027754 	.word	0x08027754

0801c9ec <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801c9ec:	b480      	push	{r7}
 801c9ee:	b083      	sub	sp, #12
 801c9f0:	af00      	add	r7, sp, #0
 801c9f2:	6078      	str	r0, [r7, #4]
 801c9f4:	460b      	mov	r3, r1
 801c9f6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801c9f8:	687b      	ldr	r3, [r7, #4]
 801c9fa:	795b      	ldrb	r3, [r3, #5]
 801c9fc:	78fa      	ldrb	r2, [r7, #3]
 801c9fe:	429a      	cmp	r2, r3
 801ca00:	d008      	beq.n	801ca14 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801ca02:	687b      	ldr	r3, [r7, #4]
 801ca04:	78fa      	ldrb	r2, [r7, #3]
 801ca06:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	2200      	movs	r2, #0
 801ca0c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	2200      	movs	r2, #0
 801ca12:	811a      	strh	r2, [r3, #8]
  }
}
 801ca14:	bf00      	nop
 801ca16:	370c      	adds	r7, #12
 801ca18:	46bd      	mov	sp, r7
 801ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca1e:	4770      	bx	lr

0801ca20 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801ca20:	b580      	push	{r7, lr}
 801ca22:	b082      	sub	sp, #8
 801ca24:	af00      	add	r7, sp, #0
 801ca26:	6039      	str	r1, [r7, #0]
 801ca28:	4611      	mov	r1, r2
 801ca2a:	461a      	mov	r2, r3
 801ca2c:	4603      	mov	r3, r0
 801ca2e:	80fb      	strh	r3, [r7, #6]
 801ca30:	460b      	mov	r3, r1
 801ca32:	717b      	strb	r3, [r7, #5]
 801ca34:	4613      	mov	r3, r2
 801ca36:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801ca38:	88fa      	ldrh	r2, [r7, #6]
 801ca3a:	793b      	ldrb	r3, [r7, #4]
 801ca3c:	4413      	add	r3, r2
 801ca3e:	3302      	adds	r3, #2
 801ca40:	2b44      	cmp	r3, #68	@ 0x44
 801ca42:	d906      	bls.n	801ca52 <dhcp_option+0x32>
 801ca44:	4b0d      	ldr	r3, [pc, #52]	@ (801ca7c <dhcp_option+0x5c>)
 801ca46:	f240 529a 	movw	r2, #1434	@ 0x59a
 801ca4a:	490d      	ldr	r1, [pc, #52]	@ (801ca80 <dhcp_option+0x60>)
 801ca4c:	480d      	ldr	r0, [pc, #52]	@ (801ca84 <dhcp_option+0x64>)
 801ca4e:	f004 fcb1 	bl	80213b4 <iprintf>
  options[options_out_len++] = option_type;
 801ca52:	88fb      	ldrh	r3, [r7, #6]
 801ca54:	1c5a      	adds	r2, r3, #1
 801ca56:	80fa      	strh	r2, [r7, #6]
 801ca58:	461a      	mov	r2, r3
 801ca5a:	683b      	ldr	r3, [r7, #0]
 801ca5c:	4413      	add	r3, r2
 801ca5e:	797a      	ldrb	r2, [r7, #5]
 801ca60:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801ca62:	88fb      	ldrh	r3, [r7, #6]
 801ca64:	1c5a      	adds	r2, r3, #1
 801ca66:	80fa      	strh	r2, [r7, #6]
 801ca68:	461a      	mov	r2, r3
 801ca6a:	683b      	ldr	r3, [r7, #0]
 801ca6c:	4413      	add	r3, r2
 801ca6e:	793a      	ldrb	r2, [r7, #4]
 801ca70:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801ca72:	88fb      	ldrh	r3, [r7, #6]
}
 801ca74:	4618      	mov	r0, r3
 801ca76:	3708      	adds	r7, #8
 801ca78:	46bd      	mov	sp, r7
 801ca7a:	bd80      	pop	{r7, pc}
 801ca7c:	080259a0 	.word	0x080259a0
 801ca80:	08025b34 	.word	0x08025b34
 801ca84:	08025a00 	.word	0x08025a00

0801ca88 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801ca88:	b580      	push	{r7, lr}
 801ca8a:	b082      	sub	sp, #8
 801ca8c:	af00      	add	r7, sp, #0
 801ca8e:	4603      	mov	r3, r0
 801ca90:	6039      	str	r1, [r7, #0]
 801ca92:	80fb      	strh	r3, [r7, #6]
 801ca94:	4613      	mov	r3, r2
 801ca96:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801ca98:	88fb      	ldrh	r3, [r7, #6]
 801ca9a:	2b43      	cmp	r3, #67	@ 0x43
 801ca9c:	d906      	bls.n	801caac <dhcp_option_byte+0x24>
 801ca9e:	4b0a      	ldr	r3, [pc, #40]	@ (801cac8 <dhcp_option_byte+0x40>)
 801caa0:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 801caa4:	4909      	ldr	r1, [pc, #36]	@ (801cacc <dhcp_option_byte+0x44>)
 801caa6:	480a      	ldr	r0, [pc, #40]	@ (801cad0 <dhcp_option_byte+0x48>)
 801caa8:	f004 fc84 	bl	80213b4 <iprintf>
  options[options_out_len++] = value;
 801caac:	88fb      	ldrh	r3, [r7, #6]
 801caae:	1c5a      	adds	r2, r3, #1
 801cab0:	80fa      	strh	r2, [r7, #6]
 801cab2:	461a      	mov	r2, r3
 801cab4:	683b      	ldr	r3, [r7, #0]
 801cab6:	4413      	add	r3, r2
 801cab8:	797a      	ldrb	r2, [r7, #5]
 801caba:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801cabc:	88fb      	ldrh	r3, [r7, #6]
}
 801cabe:	4618      	mov	r0, r3
 801cac0:	3708      	adds	r7, #8
 801cac2:	46bd      	mov	sp, r7
 801cac4:	bd80      	pop	{r7, pc}
 801cac6:	bf00      	nop
 801cac8:	080259a0 	.word	0x080259a0
 801cacc:	08025b78 	.word	0x08025b78
 801cad0:	08025a00 	.word	0x08025a00

0801cad4 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801cad4:	b580      	push	{r7, lr}
 801cad6:	b082      	sub	sp, #8
 801cad8:	af00      	add	r7, sp, #0
 801cada:	4603      	mov	r3, r0
 801cadc:	6039      	str	r1, [r7, #0]
 801cade:	80fb      	strh	r3, [r7, #6]
 801cae0:	4613      	mov	r3, r2
 801cae2:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801cae4:	88fb      	ldrh	r3, [r7, #6]
 801cae6:	3302      	adds	r3, #2
 801cae8:	2b44      	cmp	r3, #68	@ 0x44
 801caea:	d906      	bls.n	801cafa <dhcp_option_short+0x26>
 801caec:	4b0f      	ldr	r3, [pc, #60]	@ (801cb2c <dhcp_option_short+0x58>)
 801caee:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 801caf2:	490f      	ldr	r1, [pc, #60]	@ (801cb30 <dhcp_option_short+0x5c>)
 801caf4:	480f      	ldr	r0, [pc, #60]	@ (801cb34 <dhcp_option_short+0x60>)
 801caf6:	f004 fc5d 	bl	80213b4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801cafa:	88bb      	ldrh	r3, [r7, #4]
 801cafc:	0a1b      	lsrs	r3, r3, #8
 801cafe:	b29a      	uxth	r2, r3
 801cb00:	88fb      	ldrh	r3, [r7, #6]
 801cb02:	1c59      	adds	r1, r3, #1
 801cb04:	80f9      	strh	r1, [r7, #6]
 801cb06:	4619      	mov	r1, r3
 801cb08:	683b      	ldr	r3, [r7, #0]
 801cb0a:	440b      	add	r3, r1
 801cb0c:	b2d2      	uxtb	r2, r2
 801cb0e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801cb10:	88fb      	ldrh	r3, [r7, #6]
 801cb12:	1c5a      	adds	r2, r3, #1
 801cb14:	80fa      	strh	r2, [r7, #6]
 801cb16:	461a      	mov	r2, r3
 801cb18:	683b      	ldr	r3, [r7, #0]
 801cb1a:	4413      	add	r3, r2
 801cb1c:	88ba      	ldrh	r2, [r7, #4]
 801cb1e:	b2d2      	uxtb	r2, r2
 801cb20:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801cb22:	88fb      	ldrh	r3, [r7, #6]
}
 801cb24:	4618      	mov	r0, r3
 801cb26:	3708      	adds	r7, #8
 801cb28:	46bd      	mov	sp, r7
 801cb2a:	bd80      	pop	{r7, pc}
 801cb2c:	080259a0 	.word	0x080259a0
 801cb30:	08025bb0 	.word	0x08025bb0
 801cb34:	08025a00 	.word	0x08025a00

0801cb38 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801cb38:	b580      	push	{r7, lr}
 801cb3a:	b084      	sub	sp, #16
 801cb3c:	af00      	add	r7, sp, #0
 801cb3e:	4603      	mov	r3, r0
 801cb40:	60b9      	str	r1, [r7, #8]
 801cb42:	607a      	str	r2, [r7, #4]
 801cb44:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801cb46:	89fb      	ldrh	r3, [r7, #14]
 801cb48:	3304      	adds	r3, #4
 801cb4a:	2b44      	cmp	r3, #68	@ 0x44
 801cb4c:	d906      	bls.n	801cb5c <dhcp_option_long+0x24>
 801cb4e:	4b19      	ldr	r3, [pc, #100]	@ (801cbb4 <dhcp_option_long+0x7c>)
 801cb50:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 801cb54:	4918      	ldr	r1, [pc, #96]	@ (801cbb8 <dhcp_option_long+0x80>)
 801cb56:	4819      	ldr	r0, [pc, #100]	@ (801cbbc <dhcp_option_long+0x84>)
 801cb58:	f004 fc2c 	bl	80213b4 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801cb5c:	687b      	ldr	r3, [r7, #4]
 801cb5e:	0e1a      	lsrs	r2, r3, #24
 801cb60:	89fb      	ldrh	r3, [r7, #14]
 801cb62:	1c59      	adds	r1, r3, #1
 801cb64:	81f9      	strh	r1, [r7, #14]
 801cb66:	4619      	mov	r1, r3
 801cb68:	68bb      	ldr	r3, [r7, #8]
 801cb6a:	440b      	add	r3, r1
 801cb6c:	b2d2      	uxtb	r2, r2
 801cb6e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801cb70:	687b      	ldr	r3, [r7, #4]
 801cb72:	0c1a      	lsrs	r2, r3, #16
 801cb74:	89fb      	ldrh	r3, [r7, #14]
 801cb76:	1c59      	adds	r1, r3, #1
 801cb78:	81f9      	strh	r1, [r7, #14]
 801cb7a:	4619      	mov	r1, r3
 801cb7c:	68bb      	ldr	r3, [r7, #8]
 801cb7e:	440b      	add	r3, r1
 801cb80:	b2d2      	uxtb	r2, r2
 801cb82:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	0a1a      	lsrs	r2, r3, #8
 801cb88:	89fb      	ldrh	r3, [r7, #14]
 801cb8a:	1c59      	adds	r1, r3, #1
 801cb8c:	81f9      	strh	r1, [r7, #14]
 801cb8e:	4619      	mov	r1, r3
 801cb90:	68bb      	ldr	r3, [r7, #8]
 801cb92:	440b      	add	r3, r1
 801cb94:	b2d2      	uxtb	r2, r2
 801cb96:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801cb98:	89fb      	ldrh	r3, [r7, #14]
 801cb9a:	1c5a      	adds	r2, r3, #1
 801cb9c:	81fa      	strh	r2, [r7, #14]
 801cb9e:	461a      	mov	r2, r3
 801cba0:	68bb      	ldr	r3, [r7, #8]
 801cba2:	4413      	add	r3, r2
 801cba4:	687a      	ldr	r2, [r7, #4]
 801cba6:	b2d2      	uxtb	r2, r2
 801cba8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801cbaa:	89fb      	ldrh	r3, [r7, #14]
}
 801cbac:	4618      	mov	r0, r3
 801cbae:	3710      	adds	r7, #16
 801cbb0:	46bd      	mov	sp, r7
 801cbb2:	bd80      	pop	{r7, pc}
 801cbb4:	080259a0 	.word	0x080259a0
 801cbb8:	08025bec 	.word	0x08025bec
 801cbbc:	08025a00 	.word	0x08025a00

0801cbc0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801cbc0:	b580      	push	{r7, lr}
 801cbc2:	b090      	sub	sp, #64	@ 0x40
 801cbc4:	af00      	add	r7, sp, #0
 801cbc6:	6078      	str	r0, [r7, #4]
 801cbc8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801cbca:	2300      	movs	r3, #0
 801cbcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 801cbce:	2300      	movs	r3, #0
 801cbd0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801cbd2:	2208      	movs	r2, #8
 801cbd4:	2100      	movs	r1, #0
 801cbd6:	48b5      	ldr	r0, [pc, #724]	@ (801ceac <dhcp_parse_reply+0x2ec>)
 801cbd8:	f004 fdbc 	bl	8021754 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801cbdc:	687b      	ldr	r3, [r7, #4]
 801cbde:	895b      	ldrh	r3, [r3, #10]
 801cbe0:	2b2b      	cmp	r3, #43	@ 0x2b
 801cbe2:	d802      	bhi.n	801cbea <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801cbe4:	f06f 0301 	mvn.w	r3, #1
 801cbe8:	e2a7      	b.n	801d13a <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	685b      	ldr	r3, [r3, #4]
 801cbee:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801cbf0:	23f0      	movs	r3, #240	@ 0xf0
 801cbf2:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	891b      	ldrh	r3, [r3, #8]
 801cbf8:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 801cbfa:	687b      	ldr	r3, [r7, #4]
 801cbfc:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801cbfe:	e00c      	b.n	801cc1a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801cc00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc02:	895b      	ldrh	r3, [r3, #10]
 801cc04:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801cc06:	1ad3      	subs	r3, r2, r3
 801cc08:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801cc0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc0c:	895b      	ldrh	r3, [r3, #10]
 801cc0e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 801cc10:	1ad3      	subs	r3, r2, r3
 801cc12:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 801cc14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc16:	681b      	ldr	r3, [r3, #0]
 801cc18:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801cc1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc1c:	2b00      	cmp	r3, #0
 801cc1e:	d004      	beq.n	801cc2a <dhcp_parse_reply+0x6a>
 801cc20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc22:	895b      	ldrh	r3, [r3, #10]
 801cc24:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801cc26:	429a      	cmp	r2, r3
 801cc28:	d2ea      	bcs.n	801cc00 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801cc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	d102      	bne.n	801cc36 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801cc30:	f06f 0301 	mvn.w	r3, #1
 801cc34:	e281      	b.n	801d13a <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801cc36:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801cc38:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 801cc3a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801cc3c:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 801cc3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc40:	685b      	ldr	r3, [r3, #4]
 801cc42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801cc44:	e239      	b.n	801d0ba <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801cc46:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801cc48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801cc4a:	4413      	add	r3, r2
 801cc4c:	781b      	ldrb	r3, [r3, #0]
 801cc4e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801cc50:	2300      	movs	r3, #0
 801cc52:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 801cc56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cc5a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801cc5c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801cc5e:	3302      	adds	r3, #2
 801cc60:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801cc62:	8bfa      	ldrh	r2, [r7, #30]
 801cc64:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801cc66:	429a      	cmp	r2, r3
 801cc68:	d202      	bcs.n	801cc70 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801cc6a:	f06f 0301 	mvn.w	r3, #1
 801cc6e:	e264      	b.n	801d13a <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801cc70:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801cc72:	3301      	adds	r3, #1
 801cc74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801cc76:	8952      	ldrh	r2, [r2, #10]
 801cc78:	4293      	cmp	r3, r2
 801cc7a:	da07      	bge.n	801cc8c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801cc7c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801cc7e:	3301      	adds	r3, #1
 801cc80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801cc82:	4413      	add	r3, r2
 801cc84:	781b      	ldrb	r3, [r3, #0]
 801cc86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cc8a:	e00b      	b.n	801cca4 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801cc8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc8e:	681b      	ldr	r3, [r3, #0]
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	d004      	beq.n	801cc9e <dhcp_parse_reply+0xde>
 801cc94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc96:	681b      	ldr	r3, [r3, #0]
 801cc98:	685b      	ldr	r3, [r3, #4]
 801cc9a:	781b      	ldrb	r3, [r3, #0]
 801cc9c:	e000      	b.n	801cca0 <dhcp_parse_reply+0xe0>
 801cc9e:	2300      	movs	r3, #0
 801cca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801cca4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cca8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 801ccac:	7dfb      	ldrb	r3, [r7, #23]
 801ccae:	2b3b      	cmp	r3, #59	@ 0x3b
 801ccb0:	f200 812c 	bhi.w	801cf0c <dhcp_parse_reply+0x34c>
 801ccb4:	a201      	add	r2, pc, #4	@ (adr r2, 801ccbc <dhcp_parse_reply+0xfc>)
 801ccb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ccba:	bf00      	nop
 801ccbc:	0801cdad 	.word	0x0801cdad
 801ccc0:	0801cdbd 	.word	0x0801cdbd
 801ccc4:	0801cf0d 	.word	0x0801cf0d
 801ccc8:	0801cddf 	.word	0x0801cddf
 801cccc:	0801cf0d 	.word	0x0801cf0d
 801ccd0:	0801cf0d 	.word	0x0801cf0d
 801ccd4:	0801cf0d 	.word	0x0801cf0d
 801ccd8:	0801cf0d 	.word	0x0801cf0d
 801ccdc:	0801cf0d 	.word	0x0801cf0d
 801cce0:	0801cf0d 	.word	0x0801cf0d
 801cce4:	0801cf0d 	.word	0x0801cf0d
 801cce8:	0801cf0d 	.word	0x0801cf0d
 801ccec:	0801cf0d 	.word	0x0801cf0d
 801ccf0:	0801cf0d 	.word	0x0801cf0d
 801ccf4:	0801cf0d 	.word	0x0801cf0d
 801ccf8:	0801cf0d 	.word	0x0801cf0d
 801ccfc:	0801cf0d 	.word	0x0801cf0d
 801cd00:	0801cf0d 	.word	0x0801cf0d
 801cd04:	0801cf0d 	.word	0x0801cf0d
 801cd08:	0801cf0d 	.word	0x0801cf0d
 801cd0c:	0801cf0d 	.word	0x0801cf0d
 801cd10:	0801cf0d 	.word	0x0801cf0d
 801cd14:	0801cf0d 	.word	0x0801cf0d
 801cd18:	0801cf0d 	.word	0x0801cf0d
 801cd1c:	0801cf0d 	.word	0x0801cf0d
 801cd20:	0801cf0d 	.word	0x0801cf0d
 801cd24:	0801cf0d 	.word	0x0801cf0d
 801cd28:	0801cf0d 	.word	0x0801cf0d
 801cd2c:	0801cf0d 	.word	0x0801cf0d
 801cd30:	0801cf0d 	.word	0x0801cf0d
 801cd34:	0801cf0d 	.word	0x0801cf0d
 801cd38:	0801cf0d 	.word	0x0801cf0d
 801cd3c:	0801cf0d 	.word	0x0801cf0d
 801cd40:	0801cf0d 	.word	0x0801cf0d
 801cd44:	0801cf0d 	.word	0x0801cf0d
 801cd48:	0801cf0d 	.word	0x0801cf0d
 801cd4c:	0801cf0d 	.word	0x0801cf0d
 801cd50:	0801cf0d 	.word	0x0801cf0d
 801cd54:	0801cf0d 	.word	0x0801cf0d
 801cd58:	0801cf0d 	.word	0x0801cf0d
 801cd5c:	0801cf0d 	.word	0x0801cf0d
 801cd60:	0801cf0d 	.word	0x0801cf0d
 801cd64:	0801cf0d 	.word	0x0801cf0d
 801cd68:	0801cf0d 	.word	0x0801cf0d
 801cd6c:	0801cf0d 	.word	0x0801cf0d
 801cd70:	0801cf0d 	.word	0x0801cf0d
 801cd74:	0801cf0d 	.word	0x0801cf0d
 801cd78:	0801cf0d 	.word	0x0801cf0d
 801cd7c:	0801cf0d 	.word	0x0801cf0d
 801cd80:	0801cf0d 	.word	0x0801cf0d
 801cd84:	0801cf0d 	.word	0x0801cf0d
 801cd88:	0801ce0b 	.word	0x0801ce0b
 801cd8c:	0801ce2d 	.word	0x0801ce2d
 801cd90:	0801ce69 	.word	0x0801ce69
 801cd94:	0801ce8b 	.word	0x0801ce8b
 801cd98:	0801cf0d 	.word	0x0801cf0d
 801cd9c:	0801cf0d 	.word	0x0801cf0d
 801cda0:	0801cf0d 	.word	0x0801cf0d
 801cda4:	0801cec9 	.word	0x0801cec9
 801cda8:	0801ceeb 	.word	0x0801ceeb
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801cdac:	2300      	movs	r3, #0
 801cdae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cdb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cdb6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 801cdba:	e0ab      	b.n	801cf14 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cdbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cdc0:	2b04      	cmp	r3, #4
 801cdc2:	d009      	beq.n	801cdd8 <dhcp_parse_reply+0x218>
 801cdc4:	4b3a      	ldr	r3, [pc, #232]	@ (801ceb0 <dhcp_parse_reply+0x2f0>)
 801cdc6:	f240 622e 	movw	r2, #1582	@ 0x62e
 801cdca:	493a      	ldr	r1, [pc, #232]	@ (801ceb4 <dhcp_parse_reply+0x2f4>)
 801cdcc:	483a      	ldr	r0, [pc, #232]	@ (801ceb8 <dhcp_parse_reply+0x2f8>)
 801cdce:	f004 faf1 	bl	80213b4 <iprintf>
 801cdd2:	f06f 0305 	mvn.w	r3, #5
 801cdd6:	e1b0      	b.n	801d13a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801cdd8:	2306      	movs	r3, #6
 801cdda:	623b      	str	r3, [r7, #32]
        break;
 801cddc:	e09a      	b.n	801cf14 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801cdde:	2304      	movs	r3, #4
 801cde0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801cde4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801cde8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cdec:	429a      	cmp	r2, r3
 801cdee:	d209      	bcs.n	801ce04 <dhcp_parse_reply+0x244>
 801cdf0:	4b2f      	ldr	r3, [pc, #188]	@ (801ceb0 <dhcp_parse_reply+0x2f0>)
 801cdf2:	f240 6233 	movw	r2, #1587	@ 0x633
 801cdf6:	4931      	ldr	r1, [pc, #196]	@ (801cebc <dhcp_parse_reply+0x2fc>)
 801cdf8:	482f      	ldr	r0, [pc, #188]	@ (801ceb8 <dhcp_parse_reply+0x2f8>)
 801cdfa:	f004 fadb 	bl	80213b4 <iprintf>
 801cdfe:	f06f 0305 	mvn.w	r3, #5
 801ce02:	e19a      	b.n	801d13a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801ce04:	2307      	movs	r3, #7
 801ce06:	623b      	str	r3, [r7, #32]
        break;
 801ce08:	e084      	b.n	801cf14 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ce0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ce0e:	2b04      	cmp	r3, #4
 801ce10:	d009      	beq.n	801ce26 <dhcp_parse_reply+0x266>
 801ce12:	4b27      	ldr	r3, [pc, #156]	@ (801ceb0 <dhcp_parse_reply+0x2f0>)
 801ce14:	f240 6241 	movw	r2, #1601	@ 0x641
 801ce18:	4926      	ldr	r1, [pc, #152]	@ (801ceb4 <dhcp_parse_reply+0x2f4>)
 801ce1a:	4827      	ldr	r0, [pc, #156]	@ (801ceb8 <dhcp_parse_reply+0x2f8>)
 801ce1c:	f004 faca 	bl	80213b4 <iprintf>
 801ce20:	f06f 0305 	mvn.w	r3, #5
 801ce24:	e189      	b.n	801d13a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801ce26:	2303      	movs	r3, #3
 801ce28:	623b      	str	r3, [r7, #32]
        break;
 801ce2a:	e073      	b.n	801cf14 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801ce2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ce30:	2b01      	cmp	r3, #1
 801ce32:	d009      	beq.n	801ce48 <dhcp_parse_reply+0x288>
 801ce34:	4b1e      	ldr	r3, [pc, #120]	@ (801ceb0 <dhcp_parse_reply+0x2f0>)
 801ce36:	f240 624f 	movw	r2, #1615	@ 0x64f
 801ce3a:	4921      	ldr	r1, [pc, #132]	@ (801cec0 <dhcp_parse_reply+0x300>)
 801ce3c:	481e      	ldr	r0, [pc, #120]	@ (801ceb8 <dhcp_parse_reply+0x2f8>)
 801ce3e:	f004 fab9 	bl	80213b4 <iprintf>
 801ce42:	f06f 0305 	mvn.w	r3, #5
 801ce46:	e178      	b.n	801d13a <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801ce48:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801ce4a:	2bf0      	cmp	r3, #240	@ 0xf0
 801ce4c:	d009      	beq.n	801ce62 <dhcp_parse_reply+0x2a2>
 801ce4e:	4b18      	ldr	r3, [pc, #96]	@ (801ceb0 <dhcp_parse_reply+0x2f0>)
 801ce50:	f240 6251 	movw	r2, #1617	@ 0x651
 801ce54:	491b      	ldr	r1, [pc, #108]	@ (801cec4 <dhcp_parse_reply+0x304>)
 801ce56:	4818      	ldr	r0, [pc, #96]	@ (801ceb8 <dhcp_parse_reply+0x2f8>)
 801ce58:	f004 faac 	bl	80213b4 <iprintf>
 801ce5c:	f06f 0305 	mvn.w	r3, #5
 801ce60:	e16b      	b.n	801d13a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801ce62:	2300      	movs	r3, #0
 801ce64:	623b      	str	r3, [r7, #32]
        break;
 801ce66:	e055      	b.n	801cf14 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801ce68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ce6c:	2b01      	cmp	r3, #1
 801ce6e:	d009      	beq.n	801ce84 <dhcp_parse_reply+0x2c4>
 801ce70:	4b0f      	ldr	r3, [pc, #60]	@ (801ceb0 <dhcp_parse_reply+0x2f0>)
 801ce72:	f240 6255 	movw	r2, #1621	@ 0x655
 801ce76:	4912      	ldr	r1, [pc, #72]	@ (801cec0 <dhcp_parse_reply+0x300>)
 801ce78:	480f      	ldr	r0, [pc, #60]	@ (801ceb8 <dhcp_parse_reply+0x2f8>)
 801ce7a:	f004 fa9b 	bl	80213b4 <iprintf>
 801ce7e:	f06f 0305 	mvn.w	r3, #5
 801ce82:	e15a      	b.n	801d13a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801ce84:	2301      	movs	r3, #1
 801ce86:	623b      	str	r3, [r7, #32]
        break;
 801ce88:	e044      	b.n	801cf14 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ce8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ce8e:	2b04      	cmp	r3, #4
 801ce90:	d009      	beq.n	801cea6 <dhcp_parse_reply+0x2e6>
 801ce92:	4b07      	ldr	r3, [pc, #28]	@ (801ceb0 <dhcp_parse_reply+0x2f0>)
 801ce94:	f240 6259 	movw	r2, #1625	@ 0x659
 801ce98:	4906      	ldr	r1, [pc, #24]	@ (801ceb4 <dhcp_parse_reply+0x2f4>)
 801ce9a:	4807      	ldr	r0, [pc, #28]	@ (801ceb8 <dhcp_parse_reply+0x2f8>)
 801ce9c:	f004 fa8a 	bl	80213b4 <iprintf>
 801cea0:	f06f 0305 	mvn.w	r3, #5
 801cea4:	e149      	b.n	801d13a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801cea6:	2302      	movs	r3, #2
 801cea8:	623b      	str	r3, [r7, #32]
        break;
 801ceaa:	e033      	b.n	801cf14 <dhcp_parse_reply+0x354>
 801ceac:	20004c68 	.word	0x20004c68
 801ceb0:	080259a0 	.word	0x080259a0
 801ceb4:	08025c28 	.word	0x08025c28
 801ceb8:	08025a00 	.word	0x08025a00
 801cebc:	08025c34 	.word	0x08025c34
 801cec0:	08025c48 	.word	0x08025c48
 801cec4:	08025c54 	.word	0x08025c54
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cec8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cecc:	2b04      	cmp	r3, #4
 801cece:	d009      	beq.n	801cee4 <dhcp_parse_reply+0x324>
 801ced0:	4b9c      	ldr	r3, [pc, #624]	@ (801d144 <dhcp_parse_reply+0x584>)
 801ced2:	f240 625d 	movw	r2, #1629	@ 0x65d
 801ced6:	499c      	ldr	r1, [pc, #624]	@ (801d148 <dhcp_parse_reply+0x588>)
 801ced8:	489c      	ldr	r0, [pc, #624]	@ (801d14c <dhcp_parse_reply+0x58c>)
 801ceda:	f004 fa6b 	bl	80213b4 <iprintf>
 801cede:	f06f 0305 	mvn.w	r3, #5
 801cee2:	e12a      	b.n	801d13a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 801cee4:	2304      	movs	r3, #4
 801cee6:	623b      	str	r3, [r7, #32]
        break;
 801cee8:	e014      	b.n	801cf14 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ceea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ceee:	2b04      	cmp	r3, #4
 801cef0:	d009      	beq.n	801cf06 <dhcp_parse_reply+0x346>
 801cef2:	4b94      	ldr	r3, [pc, #592]	@ (801d144 <dhcp_parse_reply+0x584>)
 801cef4:	f240 6261 	movw	r2, #1633	@ 0x661
 801cef8:	4993      	ldr	r1, [pc, #588]	@ (801d148 <dhcp_parse_reply+0x588>)
 801cefa:	4894      	ldr	r0, [pc, #592]	@ (801d14c <dhcp_parse_reply+0x58c>)
 801cefc:	f004 fa5a 	bl	80213b4 <iprintf>
 801cf00:	f06f 0305 	mvn.w	r3, #5
 801cf04:	e119      	b.n	801d13a <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801cf06:	2305      	movs	r3, #5
 801cf08:	623b      	str	r3, [r7, #32]
        break;
 801cf0a:	e003      	b.n	801cf14 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 801cf0c:	2300      	movs	r3, #0
 801cf0e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801cf12:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801cf14:	7dfb      	ldrb	r3, [r7, #23]
 801cf16:	2b00      	cmp	r3, #0
 801cf18:	d103      	bne.n	801cf22 <dhcp_parse_reply+0x362>
      offset++;
 801cf1a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801cf1c:	3301      	adds	r3, #1
 801cf1e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 801cf20:	e0a1      	b.n	801d066 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801cf22:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801cf24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cf28:	4413      	add	r3, r2
 801cf2a:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 801cf2e:	4293      	cmp	r3, r2
 801cf30:	dd02      	ble.n	801cf38 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801cf32:	f06f 0301 	mvn.w	r3, #1
 801cf36:	e100      	b.n	801d13a <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 801cf38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801cf3c:	b29a      	uxth	r2, r3
 801cf3e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801cf40:	4413      	add	r3, r2
 801cf42:	b29b      	uxth	r3, r3
 801cf44:	3302      	adds	r3, #2
 801cf46:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 801cf48:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cf4c:	2b00      	cmp	r3, #0
 801cf4e:	f000 808a 	beq.w	801d066 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801cf52:	2300      	movs	r3, #0
 801cf54:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801cf56:	6a3b      	ldr	r3, [r7, #32]
 801cf58:	2b00      	cmp	r3, #0
 801cf5a:	db02      	blt.n	801cf62 <dhcp_parse_reply+0x3a2>
 801cf5c:	6a3b      	ldr	r3, [r7, #32]
 801cf5e:	2b07      	cmp	r3, #7
 801cf60:	dd06      	ble.n	801cf70 <dhcp_parse_reply+0x3b0>
 801cf62:	4b78      	ldr	r3, [pc, #480]	@ (801d144 <dhcp_parse_reply+0x584>)
 801cf64:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 801cf68:	4979      	ldr	r1, [pc, #484]	@ (801d150 <dhcp_parse_reply+0x590>)
 801cf6a:	4878      	ldr	r0, [pc, #480]	@ (801d14c <dhcp_parse_reply+0x58c>)
 801cf6c:	f004 fa22 	bl	80213b4 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801cf70:	4a78      	ldr	r2, [pc, #480]	@ (801d154 <dhcp_parse_reply+0x594>)
 801cf72:	6a3b      	ldr	r3, [r7, #32]
 801cf74:	4413      	add	r3, r2
 801cf76:	781b      	ldrb	r3, [r3, #0]
 801cf78:	2b00      	cmp	r3, #0
 801cf7a:	d174      	bne.n	801d066 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 801cf7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cf80:	2b04      	cmp	r3, #4
 801cf82:	bf28      	it	cs
 801cf84:	2304      	movcs	r3, #4
 801cf86:	b2db      	uxtb	r3, r3
 801cf88:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801cf8a:	8bfb      	ldrh	r3, [r7, #30]
 801cf8c:	8aba      	ldrh	r2, [r7, #20]
 801cf8e:	f107 0108 	add.w	r1, r7, #8
 801cf92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801cf94:	f7f7 faf6 	bl	8014584 <pbuf_copy_partial>
 801cf98:	4603      	mov	r3, r0
 801cf9a:	461a      	mov	r2, r3
 801cf9c:	8abb      	ldrh	r3, [r7, #20]
 801cf9e:	4293      	cmp	r3, r2
 801cfa0:	d002      	beq.n	801cfa8 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801cfa2:	f06f 0301 	mvn.w	r3, #1
 801cfa6:	e0c8      	b.n	801d13a <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 801cfa8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cfac:	2b04      	cmp	r3, #4
 801cfae:	d933      	bls.n	801d018 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801cfb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cfb4:	f003 0303 	and.w	r3, r3, #3
 801cfb8:	b2db      	uxtb	r3, r3
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	d009      	beq.n	801cfd2 <dhcp_parse_reply+0x412>
 801cfbe:	4b61      	ldr	r3, [pc, #388]	@ (801d144 <dhcp_parse_reply+0x584>)
 801cfc0:	f240 6281 	movw	r2, #1665	@ 0x681
 801cfc4:	4964      	ldr	r1, [pc, #400]	@ (801d158 <dhcp_parse_reply+0x598>)
 801cfc6:	4861      	ldr	r0, [pc, #388]	@ (801d14c <dhcp_parse_reply+0x58c>)
 801cfc8:	f004 f9f4 	bl	80213b4 <iprintf>
 801cfcc:	f06f 0305 	mvn.w	r3, #5
 801cfd0:	e0b3      	b.n	801d13a <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801cfd2:	4a60      	ldr	r2, [pc, #384]	@ (801d154 <dhcp_parse_reply+0x594>)
 801cfd4:	6a3b      	ldr	r3, [r7, #32]
 801cfd6:	4413      	add	r3, r2
 801cfd8:	2201      	movs	r2, #1
 801cfda:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801cfdc:	68bb      	ldr	r3, [r7, #8]
 801cfde:	4618      	mov	r0, r3
 801cfe0:	f7f5 fb22 	bl	8012628 <lwip_htonl>
 801cfe4:	4602      	mov	r2, r0
 801cfe6:	495d      	ldr	r1, [pc, #372]	@ (801d15c <dhcp_parse_reply+0x59c>)
 801cfe8:	6a3b      	ldr	r3, [r7, #32]
 801cfea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801cfee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801cff2:	3b04      	subs	r3, #4
 801cff4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801cff8:	8bfb      	ldrh	r3, [r7, #30]
 801cffa:	3304      	adds	r3, #4
 801cffc:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801cffe:	8a7a      	ldrh	r2, [r7, #18]
 801d000:	8bfb      	ldrh	r3, [r7, #30]
 801d002:	429a      	cmp	r2, r3
 801d004:	d202      	bcs.n	801d00c <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801d006:	f06f 0301 	mvn.w	r3, #1
 801d00a:	e096      	b.n	801d13a <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 801d00c:	8a7b      	ldrh	r3, [r7, #18]
 801d00e:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801d010:	6a3b      	ldr	r3, [r7, #32]
 801d012:	3301      	adds	r3, #1
 801d014:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801d016:	e79e      	b.n	801cf56 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 801d018:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801d01c:	2b04      	cmp	r3, #4
 801d01e:	d106      	bne.n	801d02e <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 801d020:	68bb      	ldr	r3, [r7, #8]
 801d022:	4618      	mov	r0, r3
 801d024:	f7f5 fb00 	bl	8012628 <lwip_htonl>
 801d028:	4603      	mov	r3, r0
 801d02a:	60bb      	str	r3, [r7, #8]
 801d02c:	e011      	b.n	801d052 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801d02e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801d032:	2b01      	cmp	r3, #1
 801d034:	d009      	beq.n	801d04a <dhcp_parse_reply+0x48a>
 801d036:	4b43      	ldr	r3, [pc, #268]	@ (801d144 <dhcp_parse_reply+0x584>)
 801d038:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 801d03c:	4948      	ldr	r1, [pc, #288]	@ (801d160 <dhcp_parse_reply+0x5a0>)
 801d03e:	4843      	ldr	r0, [pc, #268]	@ (801d14c <dhcp_parse_reply+0x58c>)
 801d040:	f004 f9b8 	bl	80213b4 <iprintf>
 801d044:	f06f 0305 	mvn.w	r3, #5
 801d048:	e077      	b.n	801d13a <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 801d04a:	f107 0308 	add.w	r3, r7, #8
 801d04e:	781b      	ldrb	r3, [r3, #0]
 801d050:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801d052:	4a40      	ldr	r2, [pc, #256]	@ (801d154 <dhcp_parse_reply+0x594>)
 801d054:	6a3b      	ldr	r3, [r7, #32]
 801d056:	4413      	add	r3, r2
 801d058:	2201      	movs	r2, #1
 801d05a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801d05c:	68ba      	ldr	r2, [r7, #8]
 801d05e:	493f      	ldr	r1, [pc, #252]	@ (801d15c <dhcp_parse_reply+0x59c>)
 801d060:	6a3b      	ldr	r3, [r7, #32]
 801d062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801d066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d068:	895b      	ldrh	r3, [r3, #10]
 801d06a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801d06c:	429a      	cmp	r2, r3
 801d06e:	d324      	bcc.n	801d0ba <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 801d070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d072:	895b      	ldrh	r3, [r3, #10]
 801d074:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801d076:	1ad3      	subs	r3, r2, r3
 801d078:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801d07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d07c:	895b      	ldrh	r3, [r3, #10]
 801d07e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801d080:	1ad3      	subs	r3, r2, r3
 801d082:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 801d084:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801d086:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801d088:	429a      	cmp	r2, r3
 801d08a:	d213      	bcs.n	801d0b4 <dhcp_parse_reply+0x4f4>
        q = q->next;
 801d08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d08e:	681b      	ldr	r3, [r3, #0]
 801d090:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801d092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d094:	2b00      	cmp	r3, #0
 801d096:	d109      	bne.n	801d0ac <dhcp_parse_reply+0x4ec>
 801d098:	4b2a      	ldr	r3, [pc, #168]	@ (801d144 <dhcp_parse_reply+0x584>)
 801d09a:	f240 629d 	movw	r2, #1693	@ 0x69d
 801d09e:	4931      	ldr	r1, [pc, #196]	@ (801d164 <dhcp_parse_reply+0x5a4>)
 801d0a0:	482a      	ldr	r0, [pc, #168]	@ (801d14c <dhcp_parse_reply+0x58c>)
 801d0a2:	f004 f987 	bl	80213b4 <iprintf>
 801d0a6:	f06f 0305 	mvn.w	r3, #5
 801d0aa:	e046      	b.n	801d13a <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 801d0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0ae:	685b      	ldr	r3, [r3, #4]
 801d0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d0b2:	e002      	b.n	801d0ba <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801d0b4:	f06f 0301 	mvn.w	r3, #1
 801d0b8:	e03f      	b.n	801d13a <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801d0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d0bc:	2b00      	cmp	r3, #0
 801d0be:	d00a      	beq.n	801d0d6 <dhcp_parse_reply+0x516>
 801d0c0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801d0c2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801d0c4:	429a      	cmp	r2, r3
 801d0c6:	d206      	bcs.n	801d0d6 <dhcp_parse_reply+0x516>
 801d0c8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801d0ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801d0cc:	4413      	add	r3, r2
 801d0ce:	781b      	ldrb	r3, [r3, #0]
 801d0d0:	2bff      	cmp	r3, #255	@ 0xff
 801d0d2:	f47f adb8 	bne.w	801cc46 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801d0d6:	4b1f      	ldr	r3, [pc, #124]	@ (801d154 <dhcp_parse_reply+0x594>)
 801d0d8:	781b      	ldrb	r3, [r3, #0]
 801d0da:	2b00      	cmp	r3, #0
 801d0dc:	d018      	beq.n	801d110 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801d0de:	4b1f      	ldr	r3, [pc, #124]	@ (801d15c <dhcp_parse_reply+0x59c>)
 801d0e0:	681b      	ldr	r3, [r3, #0]
 801d0e2:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801d0e4:	4b1b      	ldr	r3, [pc, #108]	@ (801d154 <dhcp_parse_reply+0x594>)
 801d0e6:	2200      	movs	r2, #0
 801d0e8:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801d0ea:	68fb      	ldr	r3, [r7, #12]
 801d0ec:	2b01      	cmp	r3, #1
 801d0ee:	d102      	bne.n	801d0f6 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801d0f0:	2301      	movs	r3, #1
 801d0f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d0f4:	e00c      	b.n	801d110 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801d0f6:	68fb      	ldr	r3, [r7, #12]
 801d0f8:	2b02      	cmp	r3, #2
 801d0fa:	d102      	bne.n	801d102 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 801d0fc:	2301      	movs	r3, #1
 801d0fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d100:	e006      	b.n	801d110 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801d102:	68fb      	ldr	r3, [r7, #12]
 801d104:	2b03      	cmp	r3, #3
 801d106:	d103      	bne.n	801d110 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 801d108:	2301      	movs	r3, #1
 801d10a:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 801d10c:	2301      	movs	r3, #1
 801d10e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801d110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d112:	2b00      	cmp	r3, #0
 801d114:	d006      	beq.n	801d124 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801d116:	2300      	movs	r3, #0
 801d118:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 801d11a:	236c      	movs	r3, #108	@ 0x6c
 801d11c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801d11e:	23ec      	movs	r3, #236	@ 0xec
 801d120:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801d122:	e56a      	b.n	801cbfa <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801d124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d126:	2b00      	cmp	r3, #0
 801d128:	d006      	beq.n	801d138 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801d12a:	2300      	movs	r3, #0
 801d12c:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 801d12e:	232c      	movs	r3, #44	@ 0x2c
 801d130:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801d132:	236c      	movs	r3, #108	@ 0x6c
 801d134:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 801d136:	e560      	b.n	801cbfa <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801d138:	2300      	movs	r3, #0
}
 801d13a:	4618      	mov	r0, r3
 801d13c:	3740      	adds	r7, #64	@ 0x40
 801d13e:	46bd      	mov	sp, r7
 801d140:	bd80      	pop	{r7, pc}
 801d142:	bf00      	nop
 801d144:	080259a0 	.word	0x080259a0
 801d148:	08025c28 	.word	0x08025c28
 801d14c:	08025a00 	.word	0x08025a00
 801d150:	08025c6c 	.word	0x08025c6c
 801d154:	20004c68 	.word	0x20004c68
 801d158:	08025c80 	.word	0x08025c80
 801d15c:	20004c48 	.word	0x20004c48
 801d160:	08025c98 	.word	0x08025c98
 801d164:	08025cac 	.word	0x08025cac

0801d168 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801d168:	b580      	push	{r7, lr}
 801d16a:	b08a      	sub	sp, #40	@ 0x28
 801d16c:	af00      	add	r7, sp, #0
 801d16e:	60f8      	str	r0, [r7, #12]
 801d170:	60b9      	str	r1, [r7, #8]
 801d172:	607a      	str	r2, [r7, #4]
 801d174:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801d176:	4b60      	ldr	r3, [pc, #384]	@ (801d2f8 <dhcp_recv+0x190>)
 801d178:	685b      	ldr	r3, [r3, #4]
 801d17a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d17c:	6a3b      	ldr	r3, [r7, #32]
 801d17e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d180:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801d182:	687b      	ldr	r3, [r7, #4]
 801d184:	685b      	ldr	r3, [r3, #4]
 801d186:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801d188:	69fb      	ldr	r3, [r7, #28]
 801d18a:	2b00      	cmp	r3, #0
 801d18c:	f000 809d 	beq.w	801d2ca <dhcp_recv+0x162>
 801d190:	69fb      	ldr	r3, [r7, #28]
 801d192:	791b      	ldrb	r3, [r3, #4]
 801d194:	2b00      	cmp	r3, #0
 801d196:	f000 8098 	beq.w	801d2ca <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801d19a:	687b      	ldr	r3, [r7, #4]
 801d19c:	895b      	ldrh	r3, [r3, #10]
 801d19e:	2b2b      	cmp	r3, #43	@ 0x2b
 801d1a0:	f240 8095 	bls.w	801d2ce <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801d1a4:	69bb      	ldr	r3, [r7, #24]
 801d1a6:	781b      	ldrb	r3, [r3, #0]
 801d1a8:	2b02      	cmp	r3, #2
 801d1aa:	f040 8092 	bne.w	801d2d2 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801d1ae:	2300      	movs	r3, #0
 801d1b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801d1b4:	e012      	b.n	801d1dc <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801d1b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d1ba:	6a3a      	ldr	r2, [r7, #32]
 801d1bc:	4413      	add	r3, r2
 801d1be:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 801d1c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d1c6:	69b9      	ldr	r1, [r7, #24]
 801d1c8:	440b      	add	r3, r1
 801d1ca:	7f1b      	ldrb	r3, [r3, #28]
 801d1cc:	429a      	cmp	r2, r3
 801d1ce:	f040 8082 	bne.w	801d2d6 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801d1d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d1d6:	3301      	adds	r3, #1
 801d1d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801d1dc:	6a3b      	ldr	r3, [r7, #32]
 801d1de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801d1e2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801d1e6:	429a      	cmp	r2, r3
 801d1e8:	d203      	bcs.n	801d1f2 <dhcp_recv+0x8a>
 801d1ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801d1ee:	2b05      	cmp	r3, #5
 801d1f0:	d9e1      	bls.n	801d1b6 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801d1f2:	69bb      	ldr	r3, [r7, #24]
 801d1f4:	685b      	ldr	r3, [r3, #4]
 801d1f6:	4618      	mov	r0, r3
 801d1f8:	f7f5 fa16 	bl	8012628 <lwip_htonl>
 801d1fc:	4602      	mov	r2, r0
 801d1fe:	69fb      	ldr	r3, [r7, #28]
 801d200:	681b      	ldr	r3, [r3, #0]
 801d202:	429a      	cmp	r2, r3
 801d204:	d169      	bne.n	801d2da <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801d206:	69f9      	ldr	r1, [r7, #28]
 801d208:	6878      	ldr	r0, [r7, #4]
 801d20a:	f7ff fcd9 	bl	801cbc0 <dhcp_parse_reply>
 801d20e:	4603      	mov	r3, r0
 801d210:	2b00      	cmp	r3, #0
 801d212:	d164      	bne.n	801d2de <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801d214:	4b39      	ldr	r3, [pc, #228]	@ (801d2fc <dhcp_recv+0x194>)
 801d216:	785b      	ldrb	r3, [r3, #1]
 801d218:	2b00      	cmp	r3, #0
 801d21a:	d062      	beq.n	801d2e2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801d21c:	687b      	ldr	r3, [r7, #4]
 801d21e:	685b      	ldr	r3, [r3, #4]
 801d220:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801d222:	4b37      	ldr	r3, [pc, #220]	@ (801d300 <dhcp_recv+0x198>)
 801d224:	685b      	ldr	r3, [r3, #4]
 801d226:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801d228:	7cfb      	ldrb	r3, [r7, #19]
 801d22a:	2b05      	cmp	r3, #5
 801d22c:	d12a      	bne.n	801d284 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801d22e:	69fb      	ldr	r3, [r7, #28]
 801d230:	795b      	ldrb	r3, [r3, #5]
 801d232:	2b01      	cmp	r3, #1
 801d234:	d112      	bne.n	801d25c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801d236:	6979      	ldr	r1, [r7, #20]
 801d238:	6a38      	ldr	r0, [r7, #32]
 801d23a:	f7fe fe1d 	bl	801be78 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801d23e:	6a3b      	ldr	r3, [r7, #32]
 801d240:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 801d244:	f003 0308 	and.w	r3, r3, #8
 801d248:	2b00      	cmp	r3, #0
 801d24a:	d003      	beq.n	801d254 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801d24c:	6a38      	ldr	r0, [r7, #32]
 801d24e:	f7fe fb8b 	bl	801b968 <dhcp_check>
 801d252:	e049      	b.n	801d2e8 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801d254:	6a38      	ldr	r0, [r7, #32]
 801d256:	f7ff f86d 	bl	801c334 <dhcp_bind>
 801d25a:	e045      	b.n	801d2e8 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801d25c:	69fb      	ldr	r3, [r7, #28]
 801d25e:	795b      	ldrb	r3, [r3, #5]
 801d260:	2b03      	cmp	r3, #3
 801d262:	d007      	beq.n	801d274 <dhcp_recv+0x10c>
 801d264:	69fb      	ldr	r3, [r7, #28]
 801d266:	795b      	ldrb	r3, [r3, #5]
 801d268:	2b04      	cmp	r3, #4
 801d26a:	d003      	beq.n	801d274 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801d26c:	69fb      	ldr	r3, [r7, #28]
 801d26e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801d270:	2b05      	cmp	r3, #5
 801d272:	d139      	bne.n	801d2e8 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801d274:	6979      	ldr	r1, [r7, #20]
 801d276:	6a38      	ldr	r0, [r7, #32]
 801d278:	f7fe fdfe 	bl	801be78 <dhcp_handle_ack>
      dhcp_bind(netif);
 801d27c:	6a38      	ldr	r0, [r7, #32]
 801d27e:	f7ff f859 	bl	801c334 <dhcp_bind>
 801d282:	e031      	b.n	801d2e8 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801d284:	7cfb      	ldrb	r3, [r7, #19]
 801d286:	2b06      	cmp	r3, #6
 801d288:	d113      	bne.n	801d2b2 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801d28a:	69fb      	ldr	r3, [r7, #28]
 801d28c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801d28e:	2b03      	cmp	r3, #3
 801d290:	d00b      	beq.n	801d2aa <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801d292:	69fb      	ldr	r3, [r7, #28]
 801d294:	795b      	ldrb	r3, [r3, #5]
 801d296:	2b01      	cmp	r3, #1
 801d298:	d007      	beq.n	801d2aa <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801d29a:	69fb      	ldr	r3, [r7, #28]
 801d29c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801d29e:	2b04      	cmp	r3, #4
 801d2a0:	d003      	beq.n	801d2aa <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801d2a2:	69fb      	ldr	r3, [r7, #28]
 801d2a4:	795b      	ldrb	r3, [r3, #5]
 801d2a6:	2b05      	cmp	r3, #5
 801d2a8:	d103      	bne.n	801d2b2 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801d2aa:	6a38      	ldr	r0, [r7, #32]
 801d2ac:	f7fe fb42 	bl	801b934 <dhcp_handle_nak>
 801d2b0:	e01a      	b.n	801d2e8 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801d2b2:	7cfb      	ldrb	r3, [r7, #19]
 801d2b4:	2b02      	cmp	r3, #2
 801d2b6:	d116      	bne.n	801d2e6 <dhcp_recv+0x17e>
 801d2b8:	69fb      	ldr	r3, [r7, #28]
 801d2ba:	795b      	ldrb	r3, [r3, #5]
 801d2bc:	2b06      	cmp	r3, #6
 801d2be:	d112      	bne.n	801d2e6 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801d2c0:	6979      	ldr	r1, [r7, #20]
 801d2c2:	6a38      	ldr	r0, [r7, #32]
 801d2c4:	f7fe fb84 	bl	801b9d0 <dhcp_handle_offer>
 801d2c8:	e00e      	b.n	801d2e8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801d2ca:	bf00      	nop
 801d2cc:	e00c      	b.n	801d2e8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801d2ce:	bf00      	nop
 801d2d0:	e00a      	b.n	801d2e8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801d2d2:	bf00      	nop
 801d2d4:	e008      	b.n	801d2e8 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801d2d6:	bf00      	nop
 801d2d8:	e006      	b.n	801d2e8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801d2da:	bf00      	nop
 801d2dc:	e004      	b.n	801d2e8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801d2de:	bf00      	nop
 801d2e0:	e002      	b.n	801d2e8 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801d2e2:	bf00      	nop
 801d2e4:	e000      	b.n	801d2e8 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801d2e6:	bf00      	nop
  pbuf_free(p);
 801d2e8:	6878      	ldr	r0, [r7, #4]
 801d2ea:	f7f6 ff45 	bl	8014178 <pbuf_free>
}
 801d2ee:	bf00      	nop
 801d2f0:	3728      	adds	r7, #40	@ 0x28
 801d2f2:	46bd      	mov	sp, r7
 801d2f4:	bd80      	pop	{r7, pc}
 801d2f6:	bf00      	nop
 801d2f8:	20004bb4 	.word	0x20004bb4
 801d2fc:	20004c68 	.word	0x20004c68
 801d300:	20004c48 	.word	0x20004c48

0801d304 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801d304:	b580      	push	{r7, lr}
 801d306:	b088      	sub	sp, #32
 801d308:	af00      	add	r7, sp, #0
 801d30a:	60f8      	str	r0, [r7, #12]
 801d30c:	60b9      	str	r1, [r7, #8]
 801d30e:	603b      	str	r3, [r7, #0]
 801d310:	4613      	mov	r3, r2
 801d312:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801d314:	68fb      	ldr	r3, [r7, #12]
 801d316:	2b00      	cmp	r3, #0
 801d318:	d108      	bne.n	801d32c <dhcp_create_msg+0x28>
 801d31a:	4b5f      	ldr	r3, [pc, #380]	@ (801d498 <dhcp_create_msg+0x194>)
 801d31c:	f240 7269 	movw	r2, #1897	@ 0x769
 801d320:	495e      	ldr	r1, [pc, #376]	@ (801d49c <dhcp_create_msg+0x198>)
 801d322:	485f      	ldr	r0, [pc, #380]	@ (801d4a0 <dhcp_create_msg+0x19c>)
 801d324:	f004 f846 	bl	80213b4 <iprintf>
 801d328:	2300      	movs	r3, #0
 801d32a:	e0b1      	b.n	801d490 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801d32c:	68bb      	ldr	r3, [r7, #8]
 801d32e:	2b00      	cmp	r3, #0
 801d330:	d108      	bne.n	801d344 <dhcp_create_msg+0x40>
 801d332:	4b59      	ldr	r3, [pc, #356]	@ (801d498 <dhcp_create_msg+0x194>)
 801d334:	f240 726a 	movw	r2, #1898	@ 0x76a
 801d338:	495a      	ldr	r1, [pc, #360]	@ (801d4a4 <dhcp_create_msg+0x1a0>)
 801d33a:	4859      	ldr	r0, [pc, #356]	@ (801d4a0 <dhcp_create_msg+0x19c>)
 801d33c:	f004 f83a 	bl	80213b4 <iprintf>
 801d340:	2300      	movs	r3, #0
 801d342:	e0a5      	b.n	801d490 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801d344:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801d348:	f44f 719a 	mov.w	r1, #308	@ 0x134
 801d34c:	2036      	movs	r0, #54	@ 0x36
 801d34e:	f7f6 fc2f 	bl	8013bb0 <pbuf_alloc>
 801d352:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801d354:	69bb      	ldr	r3, [r7, #24]
 801d356:	2b00      	cmp	r3, #0
 801d358:	d101      	bne.n	801d35e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801d35a:	2300      	movs	r3, #0
 801d35c:	e098      	b.n	801d490 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801d35e:	69bb      	ldr	r3, [r7, #24]
 801d360:	895b      	ldrh	r3, [r3, #10]
 801d362:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801d366:	d206      	bcs.n	801d376 <dhcp_create_msg+0x72>
 801d368:	4b4b      	ldr	r3, [pc, #300]	@ (801d498 <dhcp_create_msg+0x194>)
 801d36a:	f240 7271 	movw	r2, #1905	@ 0x771
 801d36e:	494e      	ldr	r1, [pc, #312]	@ (801d4a8 <dhcp_create_msg+0x1a4>)
 801d370:	484b      	ldr	r0, [pc, #300]	@ (801d4a0 <dhcp_create_msg+0x19c>)
 801d372:	f004 f81f 	bl	80213b4 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801d376:	79fb      	ldrb	r3, [r7, #7]
 801d378:	2b03      	cmp	r3, #3
 801d37a:	d103      	bne.n	801d384 <dhcp_create_msg+0x80>
 801d37c:	68bb      	ldr	r3, [r7, #8]
 801d37e:	795b      	ldrb	r3, [r3, #5]
 801d380:	2b03      	cmp	r3, #3
 801d382:	d10d      	bne.n	801d3a0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801d384:	68bb      	ldr	r3, [r7, #8]
 801d386:	799b      	ldrb	r3, [r3, #6]
 801d388:	2b00      	cmp	r3, #0
 801d38a:	d105      	bne.n	801d398 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801d38c:	f003 ff12 	bl	80211b4 <rand>
 801d390:	4603      	mov	r3, r0
 801d392:	461a      	mov	r2, r3
 801d394:	4b45      	ldr	r3, [pc, #276]	@ (801d4ac <dhcp_create_msg+0x1a8>)
 801d396:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801d398:	4b44      	ldr	r3, [pc, #272]	@ (801d4ac <dhcp_create_msg+0x1a8>)
 801d39a:	681a      	ldr	r2, [r3, #0]
 801d39c:	68bb      	ldr	r3, [r7, #8]
 801d39e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801d3a0:	69bb      	ldr	r3, [r7, #24]
 801d3a2:	685b      	ldr	r3, [r3, #4]
 801d3a4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801d3a6:	f44f 729a 	mov.w	r2, #308	@ 0x134
 801d3aa:	2100      	movs	r1, #0
 801d3ac:	6978      	ldr	r0, [r7, #20]
 801d3ae:	f004 f9d1 	bl	8021754 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801d3b2:	697b      	ldr	r3, [r7, #20]
 801d3b4:	2201      	movs	r2, #1
 801d3b6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801d3b8:	697b      	ldr	r3, [r7, #20]
 801d3ba:	2201      	movs	r2, #1
 801d3bc:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801d3be:	68fb      	ldr	r3, [r7, #12]
 801d3c0:	f893 2038 	ldrb.w	r2, [r3, #56]	@ 0x38
 801d3c4:	697b      	ldr	r3, [r7, #20]
 801d3c6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801d3c8:	68bb      	ldr	r3, [r7, #8]
 801d3ca:	681b      	ldr	r3, [r3, #0]
 801d3cc:	4618      	mov	r0, r3
 801d3ce:	f7f5 f92b 	bl	8012628 <lwip_htonl>
 801d3d2:	4602      	mov	r2, r0
 801d3d4:	697b      	ldr	r3, [r7, #20]
 801d3d6:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801d3d8:	79fb      	ldrb	r3, [r7, #7]
 801d3da:	2b08      	cmp	r3, #8
 801d3dc:	d010      	beq.n	801d400 <dhcp_create_msg+0xfc>
 801d3de:	79fb      	ldrb	r3, [r7, #7]
 801d3e0:	2b04      	cmp	r3, #4
 801d3e2:	d00d      	beq.n	801d400 <dhcp_create_msg+0xfc>
 801d3e4:	79fb      	ldrb	r3, [r7, #7]
 801d3e6:	2b07      	cmp	r3, #7
 801d3e8:	d00a      	beq.n	801d400 <dhcp_create_msg+0xfc>
 801d3ea:	79fb      	ldrb	r3, [r7, #7]
 801d3ec:	2b03      	cmp	r3, #3
 801d3ee:	d10c      	bne.n	801d40a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801d3f0:	68bb      	ldr	r3, [r7, #8]
 801d3f2:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801d3f4:	2b05      	cmp	r3, #5
 801d3f6:	d003      	beq.n	801d400 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801d3f8:	68bb      	ldr	r3, [r7, #8]
 801d3fa:	795b      	ldrb	r3, [r3, #5]
 801d3fc:	2b04      	cmp	r3, #4
 801d3fe:	d104      	bne.n	801d40a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801d400:	68fb      	ldr	r3, [r7, #12]
 801d402:	3304      	adds	r3, #4
 801d404:	681a      	ldr	r2, [r3, #0]
 801d406:	697b      	ldr	r3, [r7, #20]
 801d408:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801d40a:	2300      	movs	r3, #0
 801d40c:	83fb      	strh	r3, [r7, #30]
 801d40e:	e00c      	b.n	801d42a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801d410:	8bfa      	ldrh	r2, [r7, #30]
 801d412:	8bfb      	ldrh	r3, [r7, #30]
 801d414:	68f9      	ldr	r1, [r7, #12]
 801d416:	440a      	add	r2, r1
 801d418:	f892 1032 	ldrb.w	r1, [r2, #50]	@ 0x32
 801d41c:	697a      	ldr	r2, [r7, #20]
 801d41e:	4413      	add	r3, r2
 801d420:	460a      	mov	r2, r1
 801d422:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801d424:	8bfb      	ldrh	r3, [r7, #30]
 801d426:	3301      	adds	r3, #1
 801d428:	83fb      	strh	r3, [r7, #30]
 801d42a:	8bfb      	ldrh	r3, [r7, #30]
 801d42c:	2b05      	cmp	r3, #5
 801d42e:	d9ef      	bls.n	801d410 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801d430:	697b      	ldr	r3, [r7, #20]
 801d432:	2200      	movs	r2, #0
 801d434:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801d438:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801d43c:	2200      	movs	r2, #0
 801d43e:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801d442:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801d446:	2200      	movs	r2, #0
 801d448:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 801d44c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 801d450:	2200      	movs	r2, #0
 801d452:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801d456:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801d45a:	697b      	ldr	r3, [r7, #20]
 801d45c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801d460:	2301      	movs	r3, #1
 801d462:	2235      	movs	r2, #53	@ 0x35
 801d464:	2000      	movs	r0, #0
 801d466:	f7ff fadb 	bl	801ca20 <dhcp_option>
 801d46a:	4603      	mov	r3, r0
 801d46c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801d46e:	697b      	ldr	r3, [r7, #20]
 801d470:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801d474:	79fa      	ldrb	r2, [r7, #7]
 801d476:	8a7b      	ldrh	r3, [r7, #18]
 801d478:	4618      	mov	r0, r3
 801d47a:	f7ff fb05 	bl	801ca88 <dhcp_option_byte>
 801d47e:	4603      	mov	r3, r0
 801d480:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801d482:	683b      	ldr	r3, [r7, #0]
 801d484:	2b00      	cmp	r3, #0
 801d486:	d002      	beq.n	801d48e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801d488:	683b      	ldr	r3, [r7, #0]
 801d48a:	8a7a      	ldrh	r2, [r7, #18]
 801d48c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801d48e:	69bb      	ldr	r3, [r7, #24]
}
 801d490:	4618      	mov	r0, r3
 801d492:	3720      	adds	r7, #32
 801d494:	46bd      	mov	sp, r7
 801d496:	bd80      	pop	{r7, pc}
 801d498:	080259a0 	.word	0x080259a0
 801d49c:	08025cc0 	.word	0x08025cc0
 801d4a0:	08025a00 	.word	0x08025a00
 801d4a4:	08025ce0 	.word	0x08025ce0
 801d4a8:	08025d00 	.word	0x08025d00
 801d4ac:	20004c78 	.word	0x20004c78

0801d4b0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801d4b0:	b580      	push	{r7, lr}
 801d4b2:	b084      	sub	sp, #16
 801d4b4:	af00      	add	r7, sp, #0
 801d4b6:	4603      	mov	r3, r0
 801d4b8:	60b9      	str	r1, [r7, #8]
 801d4ba:	607a      	str	r2, [r7, #4]
 801d4bc:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801d4be:	89fb      	ldrh	r3, [r7, #14]
 801d4c0:	1c5a      	adds	r2, r3, #1
 801d4c2:	81fa      	strh	r2, [r7, #14]
 801d4c4:	461a      	mov	r2, r3
 801d4c6:	68bb      	ldr	r3, [r7, #8]
 801d4c8:	4413      	add	r3, r2
 801d4ca:	22ff      	movs	r2, #255	@ 0xff
 801d4cc:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801d4ce:	e007      	b.n	801d4e0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801d4d0:	89fb      	ldrh	r3, [r7, #14]
 801d4d2:	1c5a      	adds	r2, r3, #1
 801d4d4:	81fa      	strh	r2, [r7, #14]
 801d4d6:	461a      	mov	r2, r3
 801d4d8:	68bb      	ldr	r3, [r7, #8]
 801d4da:	4413      	add	r3, r2
 801d4dc:	2200      	movs	r2, #0
 801d4de:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801d4e0:	89fb      	ldrh	r3, [r7, #14]
 801d4e2:	2b43      	cmp	r3, #67	@ 0x43
 801d4e4:	d904      	bls.n	801d4f0 <dhcp_option_trailer+0x40>
 801d4e6:	89fb      	ldrh	r3, [r7, #14]
 801d4e8:	f003 0303 	and.w	r3, r3, #3
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	d002      	beq.n	801d4f6 <dhcp_option_trailer+0x46>
 801d4f0:	89fb      	ldrh	r3, [r7, #14]
 801d4f2:	2b43      	cmp	r3, #67	@ 0x43
 801d4f4:	d9ec      	bls.n	801d4d0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801d4f6:	89fb      	ldrh	r3, [r7, #14]
 801d4f8:	33f0      	adds	r3, #240	@ 0xf0
 801d4fa:	b29b      	uxth	r3, r3
 801d4fc:	4619      	mov	r1, r3
 801d4fe:	6878      	ldr	r0, [r7, #4]
 801d500:	f7f6 fcb4 	bl	8013e6c <pbuf_realloc>
}
 801d504:	bf00      	nop
 801d506:	3710      	adds	r7, #16
 801d508:	46bd      	mov	sp, r7
 801d50a:	bd80      	pop	{r7, pc}

0801d50c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801d50c:	b480      	push	{r7}
 801d50e:	b085      	sub	sp, #20
 801d510:	af00      	add	r7, sp, #0
 801d512:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801d514:	687b      	ldr	r3, [r7, #4]
 801d516:	2b00      	cmp	r3, #0
 801d518:	d017      	beq.n	801d54a <dhcp_supplied_address+0x3e>
 801d51a:	687b      	ldr	r3, [r7, #4]
 801d51c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d51e:	2b00      	cmp	r3, #0
 801d520:	d013      	beq.n	801d54a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801d522:	687b      	ldr	r3, [r7, #4]
 801d524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d526:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801d528:	68fb      	ldr	r3, [r7, #12]
 801d52a:	795b      	ldrb	r3, [r3, #5]
 801d52c:	2b0a      	cmp	r3, #10
 801d52e:	d007      	beq.n	801d540 <dhcp_supplied_address+0x34>
 801d530:	68fb      	ldr	r3, [r7, #12]
 801d532:	795b      	ldrb	r3, [r3, #5]
 801d534:	2b05      	cmp	r3, #5
 801d536:	d003      	beq.n	801d540 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801d538:	68fb      	ldr	r3, [r7, #12]
 801d53a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801d53c:	2b04      	cmp	r3, #4
 801d53e:	d101      	bne.n	801d544 <dhcp_supplied_address+0x38>
 801d540:	2301      	movs	r3, #1
 801d542:	e000      	b.n	801d546 <dhcp_supplied_address+0x3a>
 801d544:	2300      	movs	r3, #0
 801d546:	b2db      	uxtb	r3, r3
 801d548:	e000      	b.n	801d54c <dhcp_supplied_address+0x40>
  }
  return 0;
 801d54a:	2300      	movs	r3, #0
}
 801d54c:	4618      	mov	r0, r3
 801d54e:	3714      	adds	r7, #20
 801d550:	46bd      	mov	sp, r7
 801d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d556:	4770      	bx	lr

0801d558 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801d558:	b580      	push	{r7, lr}
 801d55a:	b082      	sub	sp, #8
 801d55c:	af00      	add	r7, sp, #0
 801d55e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801d560:	4915      	ldr	r1, [pc, #84]	@ (801d5b8 <etharp_free_entry+0x60>)
 801d562:	687a      	ldr	r2, [r7, #4]
 801d564:	4613      	mov	r3, r2
 801d566:	005b      	lsls	r3, r3, #1
 801d568:	4413      	add	r3, r2
 801d56a:	00db      	lsls	r3, r3, #3
 801d56c:	440b      	add	r3, r1
 801d56e:	681b      	ldr	r3, [r3, #0]
 801d570:	2b00      	cmp	r3, #0
 801d572:	d013      	beq.n	801d59c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801d574:	4910      	ldr	r1, [pc, #64]	@ (801d5b8 <etharp_free_entry+0x60>)
 801d576:	687a      	ldr	r2, [r7, #4]
 801d578:	4613      	mov	r3, r2
 801d57a:	005b      	lsls	r3, r3, #1
 801d57c:	4413      	add	r3, r2
 801d57e:	00db      	lsls	r3, r3, #3
 801d580:	440b      	add	r3, r1
 801d582:	681b      	ldr	r3, [r3, #0]
 801d584:	4618      	mov	r0, r3
 801d586:	f7f6 fdf7 	bl	8014178 <pbuf_free>
    arp_table[i].q = NULL;
 801d58a:	490b      	ldr	r1, [pc, #44]	@ (801d5b8 <etharp_free_entry+0x60>)
 801d58c:	687a      	ldr	r2, [r7, #4]
 801d58e:	4613      	mov	r3, r2
 801d590:	005b      	lsls	r3, r3, #1
 801d592:	4413      	add	r3, r2
 801d594:	00db      	lsls	r3, r3, #3
 801d596:	440b      	add	r3, r1
 801d598:	2200      	movs	r2, #0
 801d59a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801d59c:	4906      	ldr	r1, [pc, #24]	@ (801d5b8 <etharp_free_entry+0x60>)
 801d59e:	687a      	ldr	r2, [r7, #4]
 801d5a0:	4613      	mov	r3, r2
 801d5a2:	005b      	lsls	r3, r3, #1
 801d5a4:	4413      	add	r3, r2
 801d5a6:	00db      	lsls	r3, r3, #3
 801d5a8:	440b      	add	r3, r1
 801d5aa:	3314      	adds	r3, #20
 801d5ac:	2200      	movs	r2, #0
 801d5ae:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801d5b0:	bf00      	nop
 801d5b2:	3708      	adds	r7, #8
 801d5b4:	46bd      	mov	sp, r7
 801d5b6:	bd80      	pop	{r7, pc}
 801d5b8:	20004c7c 	.word	0x20004c7c

0801d5bc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801d5bc:	b580      	push	{r7, lr}
 801d5be:	b082      	sub	sp, #8
 801d5c0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d5c2:	2300      	movs	r3, #0
 801d5c4:	607b      	str	r3, [r7, #4]
 801d5c6:	e096      	b.n	801d6f6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801d5c8:	494f      	ldr	r1, [pc, #316]	@ (801d708 <etharp_tmr+0x14c>)
 801d5ca:	687a      	ldr	r2, [r7, #4]
 801d5cc:	4613      	mov	r3, r2
 801d5ce:	005b      	lsls	r3, r3, #1
 801d5d0:	4413      	add	r3, r2
 801d5d2:	00db      	lsls	r3, r3, #3
 801d5d4:	440b      	add	r3, r1
 801d5d6:	3314      	adds	r3, #20
 801d5d8:	781b      	ldrb	r3, [r3, #0]
 801d5da:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801d5dc:	78fb      	ldrb	r3, [r7, #3]
 801d5de:	2b00      	cmp	r3, #0
 801d5e0:	f000 8086 	beq.w	801d6f0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801d5e4:	4948      	ldr	r1, [pc, #288]	@ (801d708 <etharp_tmr+0x14c>)
 801d5e6:	687a      	ldr	r2, [r7, #4]
 801d5e8:	4613      	mov	r3, r2
 801d5ea:	005b      	lsls	r3, r3, #1
 801d5ec:	4413      	add	r3, r2
 801d5ee:	00db      	lsls	r3, r3, #3
 801d5f0:	440b      	add	r3, r1
 801d5f2:	3312      	adds	r3, #18
 801d5f4:	881b      	ldrh	r3, [r3, #0]
 801d5f6:	3301      	adds	r3, #1
 801d5f8:	b298      	uxth	r0, r3
 801d5fa:	4943      	ldr	r1, [pc, #268]	@ (801d708 <etharp_tmr+0x14c>)
 801d5fc:	687a      	ldr	r2, [r7, #4]
 801d5fe:	4613      	mov	r3, r2
 801d600:	005b      	lsls	r3, r3, #1
 801d602:	4413      	add	r3, r2
 801d604:	00db      	lsls	r3, r3, #3
 801d606:	440b      	add	r3, r1
 801d608:	3312      	adds	r3, #18
 801d60a:	4602      	mov	r2, r0
 801d60c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d60e:	493e      	ldr	r1, [pc, #248]	@ (801d708 <etharp_tmr+0x14c>)
 801d610:	687a      	ldr	r2, [r7, #4]
 801d612:	4613      	mov	r3, r2
 801d614:	005b      	lsls	r3, r3, #1
 801d616:	4413      	add	r3, r2
 801d618:	00db      	lsls	r3, r3, #3
 801d61a:	440b      	add	r3, r1
 801d61c:	3312      	adds	r3, #18
 801d61e:	881b      	ldrh	r3, [r3, #0]
 801d620:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801d624:	d215      	bcs.n	801d652 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801d626:	4938      	ldr	r1, [pc, #224]	@ (801d708 <etharp_tmr+0x14c>)
 801d628:	687a      	ldr	r2, [r7, #4]
 801d62a:	4613      	mov	r3, r2
 801d62c:	005b      	lsls	r3, r3, #1
 801d62e:	4413      	add	r3, r2
 801d630:	00db      	lsls	r3, r3, #3
 801d632:	440b      	add	r3, r1
 801d634:	3314      	adds	r3, #20
 801d636:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d638:	2b01      	cmp	r3, #1
 801d63a:	d10e      	bne.n	801d65a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801d63c:	4932      	ldr	r1, [pc, #200]	@ (801d708 <etharp_tmr+0x14c>)
 801d63e:	687a      	ldr	r2, [r7, #4]
 801d640:	4613      	mov	r3, r2
 801d642:	005b      	lsls	r3, r3, #1
 801d644:	4413      	add	r3, r2
 801d646:	00db      	lsls	r3, r3, #3
 801d648:	440b      	add	r3, r1
 801d64a:	3312      	adds	r3, #18
 801d64c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801d64e:	2b04      	cmp	r3, #4
 801d650:	d903      	bls.n	801d65a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801d652:	6878      	ldr	r0, [r7, #4]
 801d654:	f7ff ff80 	bl	801d558 <etharp_free_entry>
 801d658:	e04a      	b.n	801d6f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801d65a:	492b      	ldr	r1, [pc, #172]	@ (801d708 <etharp_tmr+0x14c>)
 801d65c:	687a      	ldr	r2, [r7, #4]
 801d65e:	4613      	mov	r3, r2
 801d660:	005b      	lsls	r3, r3, #1
 801d662:	4413      	add	r3, r2
 801d664:	00db      	lsls	r3, r3, #3
 801d666:	440b      	add	r3, r1
 801d668:	3314      	adds	r3, #20
 801d66a:	781b      	ldrb	r3, [r3, #0]
 801d66c:	2b03      	cmp	r3, #3
 801d66e:	d10a      	bne.n	801d686 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801d670:	4925      	ldr	r1, [pc, #148]	@ (801d708 <etharp_tmr+0x14c>)
 801d672:	687a      	ldr	r2, [r7, #4]
 801d674:	4613      	mov	r3, r2
 801d676:	005b      	lsls	r3, r3, #1
 801d678:	4413      	add	r3, r2
 801d67a:	00db      	lsls	r3, r3, #3
 801d67c:	440b      	add	r3, r1
 801d67e:	3314      	adds	r3, #20
 801d680:	2204      	movs	r2, #4
 801d682:	701a      	strb	r2, [r3, #0]
 801d684:	e034      	b.n	801d6f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801d686:	4920      	ldr	r1, [pc, #128]	@ (801d708 <etharp_tmr+0x14c>)
 801d688:	687a      	ldr	r2, [r7, #4]
 801d68a:	4613      	mov	r3, r2
 801d68c:	005b      	lsls	r3, r3, #1
 801d68e:	4413      	add	r3, r2
 801d690:	00db      	lsls	r3, r3, #3
 801d692:	440b      	add	r3, r1
 801d694:	3314      	adds	r3, #20
 801d696:	781b      	ldrb	r3, [r3, #0]
 801d698:	2b04      	cmp	r3, #4
 801d69a:	d10a      	bne.n	801d6b2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801d69c:	491a      	ldr	r1, [pc, #104]	@ (801d708 <etharp_tmr+0x14c>)
 801d69e:	687a      	ldr	r2, [r7, #4]
 801d6a0:	4613      	mov	r3, r2
 801d6a2:	005b      	lsls	r3, r3, #1
 801d6a4:	4413      	add	r3, r2
 801d6a6:	00db      	lsls	r3, r3, #3
 801d6a8:	440b      	add	r3, r1
 801d6aa:	3314      	adds	r3, #20
 801d6ac:	2202      	movs	r2, #2
 801d6ae:	701a      	strb	r2, [r3, #0]
 801d6b0:	e01e      	b.n	801d6f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801d6b2:	4915      	ldr	r1, [pc, #84]	@ (801d708 <etharp_tmr+0x14c>)
 801d6b4:	687a      	ldr	r2, [r7, #4]
 801d6b6:	4613      	mov	r3, r2
 801d6b8:	005b      	lsls	r3, r3, #1
 801d6ba:	4413      	add	r3, r2
 801d6bc:	00db      	lsls	r3, r3, #3
 801d6be:	440b      	add	r3, r1
 801d6c0:	3314      	adds	r3, #20
 801d6c2:	781b      	ldrb	r3, [r3, #0]
 801d6c4:	2b01      	cmp	r3, #1
 801d6c6:	d113      	bne.n	801d6f0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801d6c8:	490f      	ldr	r1, [pc, #60]	@ (801d708 <etharp_tmr+0x14c>)
 801d6ca:	687a      	ldr	r2, [r7, #4]
 801d6cc:	4613      	mov	r3, r2
 801d6ce:	005b      	lsls	r3, r3, #1
 801d6d0:	4413      	add	r3, r2
 801d6d2:	00db      	lsls	r3, r3, #3
 801d6d4:	440b      	add	r3, r1
 801d6d6:	3308      	adds	r3, #8
 801d6d8:	6818      	ldr	r0, [r3, #0]
 801d6da:	687a      	ldr	r2, [r7, #4]
 801d6dc:	4613      	mov	r3, r2
 801d6de:	005b      	lsls	r3, r3, #1
 801d6e0:	4413      	add	r3, r2
 801d6e2:	00db      	lsls	r3, r3, #3
 801d6e4:	4a08      	ldr	r2, [pc, #32]	@ (801d708 <etharp_tmr+0x14c>)
 801d6e6:	4413      	add	r3, r2
 801d6e8:	3304      	adds	r3, #4
 801d6ea:	4619      	mov	r1, r3
 801d6ec:	f000 fe72 	bl	801e3d4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d6f0:	687b      	ldr	r3, [r7, #4]
 801d6f2:	3301      	adds	r3, #1
 801d6f4:	607b      	str	r3, [r7, #4]
 801d6f6:	687b      	ldr	r3, [r7, #4]
 801d6f8:	2b09      	cmp	r3, #9
 801d6fa:	f77f af65 	ble.w	801d5c8 <etharp_tmr+0xc>
      }
    }
  }
}
 801d6fe:	bf00      	nop
 801d700:	bf00      	nop
 801d702:	3708      	adds	r7, #8
 801d704:	46bd      	mov	sp, r7
 801d706:	bd80      	pop	{r7, pc}
 801d708:	20004c7c 	.word	0x20004c7c

0801d70c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801d70c:	b580      	push	{r7, lr}
 801d70e:	b08a      	sub	sp, #40	@ 0x28
 801d710:	af00      	add	r7, sp, #0
 801d712:	60f8      	str	r0, [r7, #12]
 801d714:	460b      	mov	r3, r1
 801d716:	607a      	str	r2, [r7, #4]
 801d718:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801d71a:	230a      	movs	r3, #10
 801d71c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801d71e:	230a      	movs	r3, #10
 801d720:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801d722:	230a      	movs	r3, #10
 801d724:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801d726:	2300      	movs	r3, #0
 801d728:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801d72a:	230a      	movs	r3, #10
 801d72c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801d72e:	2300      	movs	r3, #0
 801d730:	83bb      	strh	r3, [r7, #28]
 801d732:	2300      	movs	r3, #0
 801d734:	837b      	strh	r3, [r7, #26]
 801d736:	2300      	movs	r3, #0
 801d738:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d73a:	2300      	movs	r3, #0
 801d73c:	843b      	strh	r3, [r7, #32]
 801d73e:	e0ae      	b.n	801d89e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801d740:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d744:	49a6      	ldr	r1, [pc, #664]	@ (801d9e0 <etharp_find_entry+0x2d4>)
 801d746:	4613      	mov	r3, r2
 801d748:	005b      	lsls	r3, r3, #1
 801d74a:	4413      	add	r3, r2
 801d74c:	00db      	lsls	r3, r3, #3
 801d74e:	440b      	add	r3, r1
 801d750:	3314      	adds	r3, #20
 801d752:	781b      	ldrb	r3, [r3, #0]
 801d754:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801d756:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801d75a:	2b0a      	cmp	r3, #10
 801d75c:	d105      	bne.n	801d76a <etharp_find_entry+0x5e>
 801d75e:	7dfb      	ldrb	r3, [r7, #23]
 801d760:	2b00      	cmp	r3, #0
 801d762:	d102      	bne.n	801d76a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801d764:	8c3b      	ldrh	r3, [r7, #32]
 801d766:	847b      	strh	r3, [r7, #34]	@ 0x22
 801d768:	e095      	b.n	801d896 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801d76a:	7dfb      	ldrb	r3, [r7, #23]
 801d76c:	2b00      	cmp	r3, #0
 801d76e:	f000 8092 	beq.w	801d896 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801d772:	7dfb      	ldrb	r3, [r7, #23]
 801d774:	2b01      	cmp	r3, #1
 801d776:	d009      	beq.n	801d78c <etharp_find_entry+0x80>
 801d778:	7dfb      	ldrb	r3, [r7, #23]
 801d77a:	2b01      	cmp	r3, #1
 801d77c:	d806      	bhi.n	801d78c <etharp_find_entry+0x80>
 801d77e:	4b99      	ldr	r3, [pc, #612]	@ (801d9e4 <etharp_find_entry+0x2d8>)
 801d780:	f240 1223 	movw	r2, #291	@ 0x123
 801d784:	4998      	ldr	r1, [pc, #608]	@ (801d9e8 <etharp_find_entry+0x2dc>)
 801d786:	4899      	ldr	r0, [pc, #612]	@ (801d9ec <etharp_find_entry+0x2e0>)
 801d788:	f003 fe14 	bl	80213b4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801d78c:	68fb      	ldr	r3, [r7, #12]
 801d78e:	2b00      	cmp	r3, #0
 801d790:	d020      	beq.n	801d7d4 <etharp_find_entry+0xc8>
 801d792:	68fb      	ldr	r3, [r7, #12]
 801d794:	6819      	ldr	r1, [r3, #0]
 801d796:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d79a:	4891      	ldr	r0, [pc, #580]	@ (801d9e0 <etharp_find_entry+0x2d4>)
 801d79c:	4613      	mov	r3, r2
 801d79e:	005b      	lsls	r3, r3, #1
 801d7a0:	4413      	add	r3, r2
 801d7a2:	00db      	lsls	r3, r3, #3
 801d7a4:	4403      	add	r3, r0
 801d7a6:	3304      	adds	r3, #4
 801d7a8:	681b      	ldr	r3, [r3, #0]
 801d7aa:	4299      	cmp	r1, r3
 801d7ac:	d112      	bne.n	801d7d4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	2b00      	cmp	r3, #0
 801d7b2:	d00c      	beq.n	801d7ce <etharp_find_entry+0xc2>
 801d7b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d7b8:	4989      	ldr	r1, [pc, #548]	@ (801d9e0 <etharp_find_entry+0x2d4>)
 801d7ba:	4613      	mov	r3, r2
 801d7bc:	005b      	lsls	r3, r3, #1
 801d7be:	4413      	add	r3, r2
 801d7c0:	00db      	lsls	r3, r3, #3
 801d7c2:	440b      	add	r3, r1
 801d7c4:	3308      	adds	r3, #8
 801d7c6:	681b      	ldr	r3, [r3, #0]
 801d7c8:	687a      	ldr	r2, [r7, #4]
 801d7ca:	429a      	cmp	r2, r3
 801d7cc:	d102      	bne.n	801d7d4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801d7ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d7d2:	e100      	b.n	801d9d6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801d7d4:	7dfb      	ldrb	r3, [r7, #23]
 801d7d6:	2b01      	cmp	r3, #1
 801d7d8:	d140      	bne.n	801d85c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801d7da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d7de:	4980      	ldr	r1, [pc, #512]	@ (801d9e0 <etharp_find_entry+0x2d4>)
 801d7e0:	4613      	mov	r3, r2
 801d7e2:	005b      	lsls	r3, r3, #1
 801d7e4:	4413      	add	r3, r2
 801d7e6:	00db      	lsls	r3, r3, #3
 801d7e8:	440b      	add	r3, r1
 801d7ea:	681b      	ldr	r3, [r3, #0]
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	d01a      	beq.n	801d826 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801d7f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d7f4:	497a      	ldr	r1, [pc, #488]	@ (801d9e0 <etharp_find_entry+0x2d4>)
 801d7f6:	4613      	mov	r3, r2
 801d7f8:	005b      	lsls	r3, r3, #1
 801d7fa:	4413      	add	r3, r2
 801d7fc:	00db      	lsls	r3, r3, #3
 801d7fe:	440b      	add	r3, r1
 801d800:	3312      	adds	r3, #18
 801d802:	881b      	ldrh	r3, [r3, #0]
 801d804:	8bba      	ldrh	r2, [r7, #28]
 801d806:	429a      	cmp	r2, r3
 801d808:	d845      	bhi.n	801d896 <etharp_find_entry+0x18a>
            old_queue = i;
 801d80a:	8c3b      	ldrh	r3, [r7, #32]
 801d80c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801d80e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d812:	4973      	ldr	r1, [pc, #460]	@ (801d9e0 <etharp_find_entry+0x2d4>)
 801d814:	4613      	mov	r3, r2
 801d816:	005b      	lsls	r3, r3, #1
 801d818:	4413      	add	r3, r2
 801d81a:	00db      	lsls	r3, r3, #3
 801d81c:	440b      	add	r3, r1
 801d81e:	3312      	adds	r3, #18
 801d820:	881b      	ldrh	r3, [r3, #0]
 801d822:	83bb      	strh	r3, [r7, #28]
 801d824:	e037      	b.n	801d896 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801d826:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d82a:	496d      	ldr	r1, [pc, #436]	@ (801d9e0 <etharp_find_entry+0x2d4>)
 801d82c:	4613      	mov	r3, r2
 801d82e:	005b      	lsls	r3, r3, #1
 801d830:	4413      	add	r3, r2
 801d832:	00db      	lsls	r3, r3, #3
 801d834:	440b      	add	r3, r1
 801d836:	3312      	adds	r3, #18
 801d838:	881b      	ldrh	r3, [r3, #0]
 801d83a:	8b7a      	ldrh	r2, [r7, #26]
 801d83c:	429a      	cmp	r2, r3
 801d83e:	d82a      	bhi.n	801d896 <etharp_find_entry+0x18a>
            old_pending = i;
 801d840:	8c3b      	ldrh	r3, [r7, #32]
 801d842:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801d844:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d848:	4965      	ldr	r1, [pc, #404]	@ (801d9e0 <etharp_find_entry+0x2d4>)
 801d84a:	4613      	mov	r3, r2
 801d84c:	005b      	lsls	r3, r3, #1
 801d84e:	4413      	add	r3, r2
 801d850:	00db      	lsls	r3, r3, #3
 801d852:	440b      	add	r3, r1
 801d854:	3312      	adds	r3, #18
 801d856:	881b      	ldrh	r3, [r3, #0]
 801d858:	837b      	strh	r3, [r7, #26]
 801d85a:	e01c      	b.n	801d896 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801d85c:	7dfb      	ldrb	r3, [r7, #23]
 801d85e:	2b01      	cmp	r3, #1
 801d860:	d919      	bls.n	801d896 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801d862:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d866:	495e      	ldr	r1, [pc, #376]	@ (801d9e0 <etharp_find_entry+0x2d4>)
 801d868:	4613      	mov	r3, r2
 801d86a:	005b      	lsls	r3, r3, #1
 801d86c:	4413      	add	r3, r2
 801d86e:	00db      	lsls	r3, r3, #3
 801d870:	440b      	add	r3, r1
 801d872:	3312      	adds	r3, #18
 801d874:	881b      	ldrh	r3, [r3, #0]
 801d876:	8b3a      	ldrh	r2, [r7, #24]
 801d878:	429a      	cmp	r2, r3
 801d87a:	d80c      	bhi.n	801d896 <etharp_find_entry+0x18a>
            old_stable = i;
 801d87c:	8c3b      	ldrh	r3, [r7, #32]
 801d87e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801d880:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d884:	4956      	ldr	r1, [pc, #344]	@ (801d9e0 <etharp_find_entry+0x2d4>)
 801d886:	4613      	mov	r3, r2
 801d888:	005b      	lsls	r3, r3, #1
 801d88a:	4413      	add	r3, r2
 801d88c:	00db      	lsls	r3, r3, #3
 801d88e:	440b      	add	r3, r1
 801d890:	3312      	adds	r3, #18
 801d892:	881b      	ldrh	r3, [r3, #0]
 801d894:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d896:	8c3b      	ldrh	r3, [r7, #32]
 801d898:	3301      	adds	r3, #1
 801d89a:	b29b      	uxth	r3, r3
 801d89c:	843b      	strh	r3, [r7, #32]
 801d89e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d8a2:	2b09      	cmp	r3, #9
 801d8a4:	f77f af4c 	ble.w	801d740 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801d8a8:	7afb      	ldrb	r3, [r7, #11]
 801d8aa:	f003 0302 	and.w	r3, r3, #2
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	d108      	bne.n	801d8c4 <etharp_find_entry+0x1b8>
 801d8b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801d8b6:	2b0a      	cmp	r3, #10
 801d8b8:	d107      	bne.n	801d8ca <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801d8ba:	7afb      	ldrb	r3, [r7, #11]
 801d8bc:	f003 0301 	and.w	r3, r3, #1
 801d8c0:	2b00      	cmp	r3, #0
 801d8c2:	d102      	bne.n	801d8ca <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801d8c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d8c8:	e085      	b.n	801d9d6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801d8ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801d8ce:	2b09      	cmp	r3, #9
 801d8d0:	dc02      	bgt.n	801d8d8 <etharp_find_entry+0x1cc>
    i = empty;
 801d8d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d8d4:	843b      	strh	r3, [r7, #32]
 801d8d6:	e039      	b.n	801d94c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801d8d8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801d8dc:	2b09      	cmp	r3, #9
 801d8de:	dc14      	bgt.n	801d90a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801d8e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d8e2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801d8e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d8e8:	493d      	ldr	r1, [pc, #244]	@ (801d9e0 <etharp_find_entry+0x2d4>)
 801d8ea:	4613      	mov	r3, r2
 801d8ec:	005b      	lsls	r3, r3, #1
 801d8ee:	4413      	add	r3, r2
 801d8f0:	00db      	lsls	r3, r3, #3
 801d8f2:	440b      	add	r3, r1
 801d8f4:	681b      	ldr	r3, [r3, #0]
 801d8f6:	2b00      	cmp	r3, #0
 801d8f8:	d018      	beq.n	801d92c <etharp_find_entry+0x220>
 801d8fa:	4b3a      	ldr	r3, [pc, #232]	@ (801d9e4 <etharp_find_entry+0x2d8>)
 801d8fc:	f240 126d 	movw	r2, #365	@ 0x16d
 801d900:	493b      	ldr	r1, [pc, #236]	@ (801d9f0 <etharp_find_entry+0x2e4>)
 801d902:	483a      	ldr	r0, [pc, #232]	@ (801d9ec <etharp_find_entry+0x2e0>)
 801d904:	f003 fd56 	bl	80213b4 <iprintf>
 801d908:	e010      	b.n	801d92c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801d90a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801d90e:	2b09      	cmp	r3, #9
 801d910:	dc02      	bgt.n	801d918 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801d912:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801d914:	843b      	strh	r3, [r7, #32]
 801d916:	e009      	b.n	801d92c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801d918:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801d91c:	2b09      	cmp	r3, #9
 801d91e:	dc02      	bgt.n	801d926 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801d920:	8bfb      	ldrh	r3, [r7, #30]
 801d922:	843b      	strh	r3, [r7, #32]
 801d924:	e002      	b.n	801d92c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801d926:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d92a:	e054      	b.n	801d9d6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801d92c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d930:	2b09      	cmp	r3, #9
 801d932:	dd06      	ble.n	801d942 <etharp_find_entry+0x236>
 801d934:	4b2b      	ldr	r3, [pc, #172]	@ (801d9e4 <etharp_find_entry+0x2d8>)
 801d936:	f240 127f 	movw	r2, #383	@ 0x17f
 801d93a:	492e      	ldr	r1, [pc, #184]	@ (801d9f4 <etharp_find_entry+0x2e8>)
 801d93c:	482b      	ldr	r0, [pc, #172]	@ (801d9ec <etharp_find_entry+0x2e0>)
 801d93e:	f003 fd39 	bl	80213b4 <iprintf>
    etharp_free_entry(i);
 801d942:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d946:	4618      	mov	r0, r3
 801d948:	f7ff fe06 	bl	801d558 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801d94c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d950:	2b09      	cmp	r3, #9
 801d952:	dd06      	ble.n	801d962 <etharp_find_entry+0x256>
 801d954:	4b23      	ldr	r3, [pc, #140]	@ (801d9e4 <etharp_find_entry+0x2d8>)
 801d956:	f240 1283 	movw	r2, #387	@ 0x183
 801d95a:	4926      	ldr	r1, [pc, #152]	@ (801d9f4 <etharp_find_entry+0x2e8>)
 801d95c:	4823      	ldr	r0, [pc, #140]	@ (801d9ec <etharp_find_entry+0x2e0>)
 801d95e:	f003 fd29 	bl	80213b4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801d962:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d966:	491e      	ldr	r1, [pc, #120]	@ (801d9e0 <etharp_find_entry+0x2d4>)
 801d968:	4613      	mov	r3, r2
 801d96a:	005b      	lsls	r3, r3, #1
 801d96c:	4413      	add	r3, r2
 801d96e:	00db      	lsls	r3, r3, #3
 801d970:	440b      	add	r3, r1
 801d972:	3314      	adds	r3, #20
 801d974:	781b      	ldrb	r3, [r3, #0]
 801d976:	2b00      	cmp	r3, #0
 801d978:	d006      	beq.n	801d988 <etharp_find_entry+0x27c>
 801d97a:	4b1a      	ldr	r3, [pc, #104]	@ (801d9e4 <etharp_find_entry+0x2d8>)
 801d97c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801d980:	491d      	ldr	r1, [pc, #116]	@ (801d9f8 <etharp_find_entry+0x2ec>)
 801d982:	481a      	ldr	r0, [pc, #104]	@ (801d9ec <etharp_find_entry+0x2e0>)
 801d984:	f003 fd16 	bl	80213b4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801d988:	68fb      	ldr	r3, [r7, #12]
 801d98a:	2b00      	cmp	r3, #0
 801d98c:	d00b      	beq.n	801d9a6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801d98e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d992:	68fb      	ldr	r3, [r7, #12]
 801d994:	6819      	ldr	r1, [r3, #0]
 801d996:	4812      	ldr	r0, [pc, #72]	@ (801d9e0 <etharp_find_entry+0x2d4>)
 801d998:	4613      	mov	r3, r2
 801d99a:	005b      	lsls	r3, r3, #1
 801d99c:	4413      	add	r3, r2
 801d99e:	00db      	lsls	r3, r3, #3
 801d9a0:	4403      	add	r3, r0
 801d9a2:	3304      	adds	r3, #4
 801d9a4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801d9a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d9aa:	490d      	ldr	r1, [pc, #52]	@ (801d9e0 <etharp_find_entry+0x2d4>)
 801d9ac:	4613      	mov	r3, r2
 801d9ae:	005b      	lsls	r3, r3, #1
 801d9b0:	4413      	add	r3, r2
 801d9b2:	00db      	lsls	r3, r3, #3
 801d9b4:	440b      	add	r3, r1
 801d9b6:	3312      	adds	r3, #18
 801d9b8:	2200      	movs	r2, #0
 801d9ba:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801d9bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d9c0:	4907      	ldr	r1, [pc, #28]	@ (801d9e0 <etharp_find_entry+0x2d4>)
 801d9c2:	4613      	mov	r3, r2
 801d9c4:	005b      	lsls	r3, r3, #1
 801d9c6:	4413      	add	r3, r2
 801d9c8:	00db      	lsls	r3, r3, #3
 801d9ca:	440b      	add	r3, r1
 801d9cc:	3308      	adds	r3, #8
 801d9ce:	687a      	ldr	r2, [r7, #4]
 801d9d0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801d9d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801d9d6:	4618      	mov	r0, r3
 801d9d8:	3728      	adds	r7, #40	@ 0x28
 801d9da:	46bd      	mov	sp, r7
 801d9dc:	bd80      	pop	{r7, pc}
 801d9de:	bf00      	nop
 801d9e0:	20004c7c 	.word	0x20004c7c
 801d9e4:	08025d40 	.word	0x08025d40
 801d9e8:	08025d78 	.word	0x08025d78
 801d9ec:	08025db8 	.word	0x08025db8
 801d9f0:	08025de0 	.word	0x08025de0
 801d9f4:	08025df8 	.word	0x08025df8
 801d9f8:	08025e0c 	.word	0x08025e0c

0801d9fc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801d9fc:	b580      	push	{r7, lr}
 801d9fe:	b088      	sub	sp, #32
 801da00:	af02      	add	r7, sp, #8
 801da02:	60f8      	str	r0, [r7, #12]
 801da04:	60b9      	str	r1, [r7, #8]
 801da06:	607a      	str	r2, [r7, #4]
 801da08:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801da0a:	68fb      	ldr	r3, [r7, #12]
 801da0c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801da10:	2b06      	cmp	r3, #6
 801da12:	d006      	beq.n	801da22 <etharp_update_arp_entry+0x26>
 801da14:	4b48      	ldr	r3, [pc, #288]	@ (801db38 <etharp_update_arp_entry+0x13c>)
 801da16:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801da1a:	4948      	ldr	r1, [pc, #288]	@ (801db3c <etharp_update_arp_entry+0x140>)
 801da1c:	4848      	ldr	r0, [pc, #288]	@ (801db40 <etharp_update_arp_entry+0x144>)
 801da1e:	f003 fcc9 	bl	80213b4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801da22:	68bb      	ldr	r3, [r7, #8]
 801da24:	2b00      	cmp	r3, #0
 801da26:	d012      	beq.n	801da4e <etharp_update_arp_entry+0x52>
 801da28:	68bb      	ldr	r3, [r7, #8]
 801da2a:	681b      	ldr	r3, [r3, #0]
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	d00e      	beq.n	801da4e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801da30:	68bb      	ldr	r3, [r7, #8]
 801da32:	681b      	ldr	r3, [r3, #0]
 801da34:	68f9      	ldr	r1, [r7, #12]
 801da36:	4618      	mov	r0, r3
 801da38:	f001 fcfc 	bl	801f434 <ip4_addr_isbroadcast_u32>
 801da3c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801da3e:	2b00      	cmp	r3, #0
 801da40:	d105      	bne.n	801da4e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801da42:	68bb      	ldr	r3, [r7, #8]
 801da44:	681b      	ldr	r3, [r3, #0]
 801da46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801da4a:	2be0      	cmp	r3, #224	@ 0xe0
 801da4c:	d102      	bne.n	801da54 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801da4e:	f06f 030f 	mvn.w	r3, #15
 801da52:	e06c      	b.n	801db2e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801da54:	78fb      	ldrb	r3, [r7, #3]
 801da56:	68fa      	ldr	r2, [r7, #12]
 801da58:	4619      	mov	r1, r3
 801da5a:	68b8      	ldr	r0, [r7, #8]
 801da5c:	f7ff fe56 	bl	801d70c <etharp_find_entry>
 801da60:	4603      	mov	r3, r0
 801da62:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801da64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801da68:	2b00      	cmp	r3, #0
 801da6a:	da02      	bge.n	801da72 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801da6c:	8afb      	ldrh	r3, [r7, #22]
 801da6e:	b25b      	sxtb	r3, r3
 801da70:	e05d      	b.n	801db2e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801da72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801da76:	4933      	ldr	r1, [pc, #204]	@ (801db44 <etharp_update_arp_entry+0x148>)
 801da78:	4613      	mov	r3, r2
 801da7a:	005b      	lsls	r3, r3, #1
 801da7c:	4413      	add	r3, r2
 801da7e:	00db      	lsls	r3, r3, #3
 801da80:	440b      	add	r3, r1
 801da82:	3314      	adds	r3, #20
 801da84:	2202      	movs	r2, #2
 801da86:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801da88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801da8c:	492d      	ldr	r1, [pc, #180]	@ (801db44 <etharp_update_arp_entry+0x148>)
 801da8e:	4613      	mov	r3, r2
 801da90:	005b      	lsls	r3, r3, #1
 801da92:	4413      	add	r3, r2
 801da94:	00db      	lsls	r3, r3, #3
 801da96:	440b      	add	r3, r1
 801da98:	3308      	adds	r3, #8
 801da9a:	68fa      	ldr	r2, [r7, #12]
 801da9c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801da9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801daa2:	4613      	mov	r3, r2
 801daa4:	005b      	lsls	r3, r3, #1
 801daa6:	4413      	add	r3, r2
 801daa8:	00db      	lsls	r3, r3, #3
 801daaa:	3308      	adds	r3, #8
 801daac:	4a25      	ldr	r2, [pc, #148]	@ (801db44 <etharp_update_arp_entry+0x148>)
 801daae:	4413      	add	r3, r2
 801dab0:	3304      	adds	r3, #4
 801dab2:	2206      	movs	r2, #6
 801dab4:	6879      	ldr	r1, [r7, #4]
 801dab6:	4618      	mov	r0, r3
 801dab8:	f003 ff65 	bl	8021986 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801dabc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801dac0:	4920      	ldr	r1, [pc, #128]	@ (801db44 <etharp_update_arp_entry+0x148>)
 801dac2:	4613      	mov	r3, r2
 801dac4:	005b      	lsls	r3, r3, #1
 801dac6:	4413      	add	r3, r2
 801dac8:	00db      	lsls	r3, r3, #3
 801daca:	440b      	add	r3, r1
 801dacc:	3312      	adds	r3, #18
 801dace:	2200      	movs	r2, #0
 801dad0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801dad2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801dad6:	491b      	ldr	r1, [pc, #108]	@ (801db44 <etharp_update_arp_entry+0x148>)
 801dad8:	4613      	mov	r3, r2
 801dada:	005b      	lsls	r3, r3, #1
 801dadc:	4413      	add	r3, r2
 801dade:	00db      	lsls	r3, r3, #3
 801dae0:	440b      	add	r3, r1
 801dae2:	681b      	ldr	r3, [r3, #0]
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	d021      	beq.n	801db2c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801dae8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801daec:	4915      	ldr	r1, [pc, #84]	@ (801db44 <etharp_update_arp_entry+0x148>)
 801daee:	4613      	mov	r3, r2
 801daf0:	005b      	lsls	r3, r3, #1
 801daf2:	4413      	add	r3, r2
 801daf4:	00db      	lsls	r3, r3, #3
 801daf6:	440b      	add	r3, r1
 801daf8:	681b      	ldr	r3, [r3, #0]
 801dafa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801dafc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801db00:	4910      	ldr	r1, [pc, #64]	@ (801db44 <etharp_update_arp_entry+0x148>)
 801db02:	4613      	mov	r3, r2
 801db04:	005b      	lsls	r3, r3, #1
 801db06:	4413      	add	r3, r2
 801db08:	00db      	lsls	r3, r3, #3
 801db0a:	440b      	add	r3, r1
 801db0c:	2200      	movs	r2, #0
 801db0e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801db10:	68fb      	ldr	r3, [r7, #12]
 801db12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 801db16:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801db1a:	9300      	str	r3, [sp, #0]
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	6939      	ldr	r1, [r7, #16]
 801db20:	68f8      	ldr	r0, [r7, #12]
 801db22:	f002 fb95 	bl	8020250 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801db26:	6938      	ldr	r0, [r7, #16]
 801db28:	f7f6 fb26 	bl	8014178 <pbuf_free>
  }
  return ERR_OK;
 801db2c:	2300      	movs	r3, #0
}
 801db2e:	4618      	mov	r0, r3
 801db30:	3718      	adds	r7, #24
 801db32:	46bd      	mov	sp, r7
 801db34:	bd80      	pop	{r7, pc}
 801db36:	bf00      	nop
 801db38:	08025d40 	.word	0x08025d40
 801db3c:	08025e38 	.word	0x08025e38
 801db40:	08025db8 	.word	0x08025db8
 801db44:	20004c7c 	.word	0x20004c7c

0801db48 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801db48:	b580      	push	{r7, lr}
 801db4a:	b084      	sub	sp, #16
 801db4c:	af00      	add	r7, sp, #0
 801db4e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801db50:	2300      	movs	r3, #0
 801db52:	60fb      	str	r3, [r7, #12]
 801db54:	e01e      	b.n	801db94 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801db56:	4913      	ldr	r1, [pc, #76]	@ (801dba4 <etharp_cleanup_netif+0x5c>)
 801db58:	68fa      	ldr	r2, [r7, #12]
 801db5a:	4613      	mov	r3, r2
 801db5c:	005b      	lsls	r3, r3, #1
 801db5e:	4413      	add	r3, r2
 801db60:	00db      	lsls	r3, r3, #3
 801db62:	440b      	add	r3, r1
 801db64:	3314      	adds	r3, #20
 801db66:	781b      	ldrb	r3, [r3, #0]
 801db68:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801db6a:	7afb      	ldrb	r3, [r7, #11]
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	d00e      	beq.n	801db8e <etharp_cleanup_netif+0x46>
 801db70:	490c      	ldr	r1, [pc, #48]	@ (801dba4 <etharp_cleanup_netif+0x5c>)
 801db72:	68fa      	ldr	r2, [r7, #12]
 801db74:	4613      	mov	r3, r2
 801db76:	005b      	lsls	r3, r3, #1
 801db78:	4413      	add	r3, r2
 801db7a:	00db      	lsls	r3, r3, #3
 801db7c:	440b      	add	r3, r1
 801db7e:	3308      	adds	r3, #8
 801db80:	681b      	ldr	r3, [r3, #0]
 801db82:	687a      	ldr	r2, [r7, #4]
 801db84:	429a      	cmp	r2, r3
 801db86:	d102      	bne.n	801db8e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801db88:	68f8      	ldr	r0, [r7, #12]
 801db8a:	f7ff fce5 	bl	801d558 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801db8e:	68fb      	ldr	r3, [r7, #12]
 801db90:	3301      	adds	r3, #1
 801db92:	60fb      	str	r3, [r7, #12]
 801db94:	68fb      	ldr	r3, [r7, #12]
 801db96:	2b09      	cmp	r3, #9
 801db98:	dddd      	ble.n	801db56 <etharp_cleanup_netif+0xe>
    }
  }
}
 801db9a:	bf00      	nop
 801db9c:	bf00      	nop
 801db9e:	3710      	adds	r7, #16
 801dba0:	46bd      	mov	sp, r7
 801dba2:	bd80      	pop	{r7, pc}
 801dba4:	20004c7c 	.word	0x20004c7c

0801dba8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801dba8:	b5b0      	push	{r4, r5, r7, lr}
 801dbaa:	b08a      	sub	sp, #40	@ 0x28
 801dbac:	af04      	add	r7, sp, #16
 801dbae:	6078      	str	r0, [r7, #4]
 801dbb0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801dbb2:	683b      	ldr	r3, [r7, #0]
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	d107      	bne.n	801dbc8 <etharp_input+0x20>
 801dbb8:	4b3f      	ldr	r3, [pc, #252]	@ (801dcb8 <etharp_input+0x110>)
 801dbba:	f240 228a 	movw	r2, #650	@ 0x28a
 801dbbe:	493f      	ldr	r1, [pc, #252]	@ (801dcbc <etharp_input+0x114>)
 801dbc0:	483f      	ldr	r0, [pc, #252]	@ (801dcc0 <etharp_input+0x118>)
 801dbc2:	f003 fbf7 	bl	80213b4 <iprintf>
 801dbc6:	e074      	b.n	801dcb2 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801dbc8:	687b      	ldr	r3, [r7, #4]
 801dbca:	685b      	ldr	r3, [r3, #4]
 801dbcc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801dbce:	693b      	ldr	r3, [r7, #16]
 801dbd0:	881b      	ldrh	r3, [r3, #0]
 801dbd2:	b29b      	uxth	r3, r3
 801dbd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801dbd8:	d10c      	bne.n	801dbf4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801dbda:	693b      	ldr	r3, [r7, #16]
 801dbdc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801dbde:	2b06      	cmp	r3, #6
 801dbe0:	d108      	bne.n	801dbf4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801dbe2:	693b      	ldr	r3, [r7, #16]
 801dbe4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801dbe6:	2b04      	cmp	r3, #4
 801dbe8:	d104      	bne.n	801dbf4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801dbea:	693b      	ldr	r3, [r7, #16]
 801dbec:	885b      	ldrh	r3, [r3, #2]
 801dbee:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801dbf0:	2b08      	cmp	r3, #8
 801dbf2:	d003      	beq.n	801dbfc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801dbf4:	6878      	ldr	r0, [r7, #4]
 801dbf6:	f7f6 fabf 	bl	8014178 <pbuf_free>
    return;
 801dbfa:	e05a      	b.n	801dcb2 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801dbfc:	693b      	ldr	r3, [r7, #16]
 801dbfe:	330e      	adds	r3, #14
 801dc00:	681b      	ldr	r3, [r3, #0]
 801dc02:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801dc04:	693b      	ldr	r3, [r7, #16]
 801dc06:	3318      	adds	r3, #24
 801dc08:	681b      	ldr	r3, [r3, #0]
 801dc0a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801dc0c:	683b      	ldr	r3, [r7, #0]
 801dc0e:	3304      	adds	r3, #4
 801dc10:	681b      	ldr	r3, [r3, #0]
 801dc12:	2b00      	cmp	r3, #0
 801dc14:	d102      	bne.n	801dc1c <etharp_input+0x74>
    for_us = 0;
 801dc16:	2300      	movs	r3, #0
 801dc18:	75fb      	strb	r3, [r7, #23]
 801dc1a:	e009      	b.n	801dc30 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801dc1c:	68ba      	ldr	r2, [r7, #8]
 801dc1e:	683b      	ldr	r3, [r7, #0]
 801dc20:	3304      	adds	r3, #4
 801dc22:	681b      	ldr	r3, [r3, #0]
 801dc24:	429a      	cmp	r2, r3
 801dc26:	bf0c      	ite	eq
 801dc28:	2301      	moveq	r3, #1
 801dc2a:	2300      	movne	r3, #0
 801dc2c:	b2db      	uxtb	r3, r3
 801dc2e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801dc30:	693b      	ldr	r3, [r7, #16]
 801dc32:	f103 0208 	add.w	r2, r3, #8
 801dc36:	7dfb      	ldrb	r3, [r7, #23]
 801dc38:	2b00      	cmp	r3, #0
 801dc3a:	d001      	beq.n	801dc40 <etharp_input+0x98>
 801dc3c:	2301      	movs	r3, #1
 801dc3e:	e000      	b.n	801dc42 <etharp_input+0x9a>
 801dc40:	2302      	movs	r3, #2
 801dc42:	f107 010c 	add.w	r1, r7, #12
 801dc46:	6838      	ldr	r0, [r7, #0]
 801dc48:	f7ff fed8 	bl	801d9fc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801dc4c:	693b      	ldr	r3, [r7, #16]
 801dc4e:	88db      	ldrh	r3, [r3, #6]
 801dc50:	b29b      	uxth	r3, r3
 801dc52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801dc56:	d003      	beq.n	801dc60 <etharp_input+0xb8>
 801dc58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dc5c:	d01e      	beq.n	801dc9c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801dc5e:	e025      	b.n	801dcac <etharp_input+0x104>
      if (for_us) {
 801dc60:	7dfb      	ldrb	r3, [r7, #23]
 801dc62:	2b00      	cmp	r3, #0
 801dc64:	d021      	beq.n	801dcaa <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801dc66:	683b      	ldr	r3, [r7, #0]
 801dc68:	f103 0032 	add.w	r0, r3, #50	@ 0x32
 801dc6c:	693b      	ldr	r3, [r7, #16]
 801dc6e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801dc72:	683b      	ldr	r3, [r7, #0]
 801dc74:	f103 0532 	add.w	r5, r3, #50	@ 0x32
 801dc78:	683b      	ldr	r3, [r7, #0]
 801dc7a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801dc7c:	693a      	ldr	r2, [r7, #16]
 801dc7e:	3208      	adds	r2, #8
        etharp_raw(netif,
 801dc80:	2102      	movs	r1, #2
 801dc82:	9103      	str	r1, [sp, #12]
 801dc84:	f107 010c 	add.w	r1, r7, #12
 801dc88:	9102      	str	r1, [sp, #8]
 801dc8a:	9201      	str	r2, [sp, #4]
 801dc8c:	9300      	str	r3, [sp, #0]
 801dc8e:	462b      	mov	r3, r5
 801dc90:	4622      	mov	r2, r4
 801dc92:	4601      	mov	r1, r0
 801dc94:	6838      	ldr	r0, [r7, #0]
 801dc96:	f000 faef 	bl	801e278 <etharp_raw>
      break;
 801dc9a:	e006      	b.n	801dcaa <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801dc9c:	f107 030c 	add.w	r3, r7, #12
 801dca0:	4619      	mov	r1, r3
 801dca2:	6838      	ldr	r0, [r7, #0]
 801dca4:	f7fe fa02 	bl	801c0ac <dhcp_arp_reply>
      break;
 801dca8:	e000      	b.n	801dcac <etharp_input+0x104>
      break;
 801dcaa:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801dcac:	6878      	ldr	r0, [r7, #4]
 801dcae:	f7f6 fa63 	bl	8014178 <pbuf_free>
}
 801dcb2:	3718      	adds	r7, #24
 801dcb4:	46bd      	mov	sp, r7
 801dcb6:	bdb0      	pop	{r4, r5, r7, pc}
 801dcb8:	08025d40 	.word	0x08025d40
 801dcbc:	08025e90 	.word	0x08025e90
 801dcc0:	08025db8 	.word	0x08025db8

0801dcc4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801dcc4:	b580      	push	{r7, lr}
 801dcc6:	b086      	sub	sp, #24
 801dcc8:	af02      	add	r7, sp, #8
 801dcca:	60f8      	str	r0, [r7, #12]
 801dccc:	60b9      	str	r1, [r7, #8]
 801dcce:	4613      	mov	r3, r2
 801dcd0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801dcd2:	79fa      	ldrb	r2, [r7, #7]
 801dcd4:	4944      	ldr	r1, [pc, #272]	@ (801dde8 <etharp_output_to_arp_index+0x124>)
 801dcd6:	4613      	mov	r3, r2
 801dcd8:	005b      	lsls	r3, r3, #1
 801dcda:	4413      	add	r3, r2
 801dcdc:	00db      	lsls	r3, r3, #3
 801dcde:	440b      	add	r3, r1
 801dce0:	3314      	adds	r3, #20
 801dce2:	781b      	ldrb	r3, [r3, #0]
 801dce4:	2b01      	cmp	r3, #1
 801dce6:	d806      	bhi.n	801dcf6 <etharp_output_to_arp_index+0x32>
 801dce8:	4b40      	ldr	r3, [pc, #256]	@ (801ddec <etharp_output_to_arp_index+0x128>)
 801dcea:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801dcee:	4940      	ldr	r1, [pc, #256]	@ (801ddf0 <etharp_output_to_arp_index+0x12c>)
 801dcf0:	4840      	ldr	r0, [pc, #256]	@ (801ddf4 <etharp_output_to_arp_index+0x130>)
 801dcf2:	f003 fb5f 	bl	80213b4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801dcf6:	79fa      	ldrb	r2, [r7, #7]
 801dcf8:	493b      	ldr	r1, [pc, #236]	@ (801dde8 <etharp_output_to_arp_index+0x124>)
 801dcfa:	4613      	mov	r3, r2
 801dcfc:	005b      	lsls	r3, r3, #1
 801dcfe:	4413      	add	r3, r2
 801dd00:	00db      	lsls	r3, r3, #3
 801dd02:	440b      	add	r3, r1
 801dd04:	3314      	adds	r3, #20
 801dd06:	781b      	ldrb	r3, [r3, #0]
 801dd08:	2b02      	cmp	r3, #2
 801dd0a:	d153      	bne.n	801ddb4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801dd0c:	79fa      	ldrb	r2, [r7, #7]
 801dd0e:	4936      	ldr	r1, [pc, #216]	@ (801dde8 <etharp_output_to_arp_index+0x124>)
 801dd10:	4613      	mov	r3, r2
 801dd12:	005b      	lsls	r3, r3, #1
 801dd14:	4413      	add	r3, r2
 801dd16:	00db      	lsls	r3, r3, #3
 801dd18:	440b      	add	r3, r1
 801dd1a:	3312      	adds	r3, #18
 801dd1c:	881b      	ldrh	r3, [r3, #0]
 801dd1e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801dd22:	d919      	bls.n	801dd58 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801dd24:	79fa      	ldrb	r2, [r7, #7]
 801dd26:	4613      	mov	r3, r2
 801dd28:	005b      	lsls	r3, r3, #1
 801dd2a:	4413      	add	r3, r2
 801dd2c:	00db      	lsls	r3, r3, #3
 801dd2e:	4a2e      	ldr	r2, [pc, #184]	@ (801dde8 <etharp_output_to_arp_index+0x124>)
 801dd30:	4413      	add	r3, r2
 801dd32:	3304      	adds	r3, #4
 801dd34:	4619      	mov	r1, r3
 801dd36:	68f8      	ldr	r0, [r7, #12]
 801dd38:	f000 fb4c 	bl	801e3d4 <etharp_request>
 801dd3c:	4603      	mov	r3, r0
 801dd3e:	2b00      	cmp	r3, #0
 801dd40:	d138      	bne.n	801ddb4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801dd42:	79fa      	ldrb	r2, [r7, #7]
 801dd44:	4928      	ldr	r1, [pc, #160]	@ (801dde8 <etharp_output_to_arp_index+0x124>)
 801dd46:	4613      	mov	r3, r2
 801dd48:	005b      	lsls	r3, r3, #1
 801dd4a:	4413      	add	r3, r2
 801dd4c:	00db      	lsls	r3, r3, #3
 801dd4e:	440b      	add	r3, r1
 801dd50:	3314      	adds	r3, #20
 801dd52:	2203      	movs	r2, #3
 801dd54:	701a      	strb	r2, [r3, #0]
 801dd56:	e02d      	b.n	801ddb4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801dd58:	79fa      	ldrb	r2, [r7, #7]
 801dd5a:	4923      	ldr	r1, [pc, #140]	@ (801dde8 <etharp_output_to_arp_index+0x124>)
 801dd5c:	4613      	mov	r3, r2
 801dd5e:	005b      	lsls	r3, r3, #1
 801dd60:	4413      	add	r3, r2
 801dd62:	00db      	lsls	r3, r3, #3
 801dd64:	440b      	add	r3, r1
 801dd66:	3312      	adds	r3, #18
 801dd68:	881b      	ldrh	r3, [r3, #0]
 801dd6a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801dd6e:	d321      	bcc.n	801ddb4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801dd70:	79fa      	ldrb	r2, [r7, #7]
 801dd72:	4613      	mov	r3, r2
 801dd74:	005b      	lsls	r3, r3, #1
 801dd76:	4413      	add	r3, r2
 801dd78:	00db      	lsls	r3, r3, #3
 801dd7a:	4a1b      	ldr	r2, [pc, #108]	@ (801dde8 <etharp_output_to_arp_index+0x124>)
 801dd7c:	4413      	add	r3, r2
 801dd7e:	1d19      	adds	r1, r3, #4
 801dd80:	79fa      	ldrb	r2, [r7, #7]
 801dd82:	4613      	mov	r3, r2
 801dd84:	005b      	lsls	r3, r3, #1
 801dd86:	4413      	add	r3, r2
 801dd88:	00db      	lsls	r3, r3, #3
 801dd8a:	3308      	adds	r3, #8
 801dd8c:	4a16      	ldr	r2, [pc, #88]	@ (801dde8 <etharp_output_to_arp_index+0x124>)
 801dd8e:	4413      	add	r3, r2
 801dd90:	3304      	adds	r3, #4
 801dd92:	461a      	mov	r2, r3
 801dd94:	68f8      	ldr	r0, [r7, #12]
 801dd96:	f000 fafb 	bl	801e390 <etharp_request_dst>
 801dd9a:	4603      	mov	r3, r0
 801dd9c:	2b00      	cmp	r3, #0
 801dd9e:	d109      	bne.n	801ddb4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801dda0:	79fa      	ldrb	r2, [r7, #7]
 801dda2:	4911      	ldr	r1, [pc, #68]	@ (801dde8 <etharp_output_to_arp_index+0x124>)
 801dda4:	4613      	mov	r3, r2
 801dda6:	005b      	lsls	r3, r3, #1
 801dda8:	4413      	add	r3, r2
 801ddaa:	00db      	lsls	r3, r3, #3
 801ddac:	440b      	add	r3, r1
 801ddae:	3314      	adds	r3, #20
 801ddb0:	2203      	movs	r2, #3
 801ddb2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801ddb4:	68fb      	ldr	r3, [r7, #12]
 801ddb6:	f103 0132 	add.w	r1, r3, #50	@ 0x32
 801ddba:	79fa      	ldrb	r2, [r7, #7]
 801ddbc:	4613      	mov	r3, r2
 801ddbe:	005b      	lsls	r3, r3, #1
 801ddc0:	4413      	add	r3, r2
 801ddc2:	00db      	lsls	r3, r3, #3
 801ddc4:	3308      	adds	r3, #8
 801ddc6:	4a08      	ldr	r2, [pc, #32]	@ (801dde8 <etharp_output_to_arp_index+0x124>)
 801ddc8:	4413      	add	r3, r2
 801ddca:	3304      	adds	r3, #4
 801ddcc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801ddd0:	9200      	str	r2, [sp, #0]
 801ddd2:	460a      	mov	r2, r1
 801ddd4:	68b9      	ldr	r1, [r7, #8]
 801ddd6:	68f8      	ldr	r0, [r7, #12]
 801ddd8:	f002 fa3a 	bl	8020250 <ethernet_output>
 801dddc:	4603      	mov	r3, r0
}
 801ddde:	4618      	mov	r0, r3
 801dde0:	3710      	adds	r7, #16
 801dde2:	46bd      	mov	sp, r7
 801dde4:	bd80      	pop	{r7, pc}
 801dde6:	bf00      	nop
 801dde8:	20004c7c 	.word	0x20004c7c
 801ddec:	08025d40 	.word	0x08025d40
 801ddf0:	08025eb0 	.word	0x08025eb0
 801ddf4:	08025db8 	.word	0x08025db8

0801ddf8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801ddf8:	b580      	push	{r7, lr}
 801ddfa:	b08a      	sub	sp, #40	@ 0x28
 801ddfc:	af02      	add	r7, sp, #8
 801ddfe:	60f8      	str	r0, [r7, #12]
 801de00:	60b9      	str	r1, [r7, #8]
 801de02:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801de04:	687b      	ldr	r3, [r7, #4]
 801de06:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801de08:	68fb      	ldr	r3, [r7, #12]
 801de0a:	2b00      	cmp	r3, #0
 801de0c:	d106      	bne.n	801de1c <etharp_output+0x24>
 801de0e:	4b73      	ldr	r3, [pc, #460]	@ (801dfdc <etharp_output+0x1e4>)
 801de10:	f240 321e 	movw	r2, #798	@ 0x31e
 801de14:	4972      	ldr	r1, [pc, #456]	@ (801dfe0 <etharp_output+0x1e8>)
 801de16:	4873      	ldr	r0, [pc, #460]	@ (801dfe4 <etharp_output+0x1ec>)
 801de18:	f003 facc 	bl	80213b4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801de1c:	68bb      	ldr	r3, [r7, #8]
 801de1e:	2b00      	cmp	r3, #0
 801de20:	d106      	bne.n	801de30 <etharp_output+0x38>
 801de22:	4b6e      	ldr	r3, [pc, #440]	@ (801dfdc <etharp_output+0x1e4>)
 801de24:	f240 321f 	movw	r2, #799	@ 0x31f
 801de28:	496f      	ldr	r1, [pc, #444]	@ (801dfe8 <etharp_output+0x1f0>)
 801de2a:	486e      	ldr	r0, [pc, #440]	@ (801dfe4 <etharp_output+0x1ec>)
 801de2c:	f003 fac2 	bl	80213b4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801de30:	687b      	ldr	r3, [r7, #4]
 801de32:	2b00      	cmp	r3, #0
 801de34:	d106      	bne.n	801de44 <etharp_output+0x4c>
 801de36:	4b69      	ldr	r3, [pc, #420]	@ (801dfdc <etharp_output+0x1e4>)
 801de38:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801de3c:	496b      	ldr	r1, [pc, #428]	@ (801dfec <etharp_output+0x1f4>)
 801de3e:	4869      	ldr	r0, [pc, #420]	@ (801dfe4 <etharp_output+0x1ec>)
 801de40:	f003 fab8 	bl	80213b4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801de44:	687b      	ldr	r3, [r7, #4]
 801de46:	681b      	ldr	r3, [r3, #0]
 801de48:	68f9      	ldr	r1, [r7, #12]
 801de4a:	4618      	mov	r0, r3
 801de4c:	f001 faf2 	bl	801f434 <ip4_addr_isbroadcast_u32>
 801de50:	4603      	mov	r3, r0
 801de52:	2b00      	cmp	r3, #0
 801de54:	d002      	beq.n	801de5c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801de56:	4b66      	ldr	r3, [pc, #408]	@ (801dff0 <etharp_output+0x1f8>)
 801de58:	61fb      	str	r3, [r7, #28]
 801de5a:	e0af      	b.n	801dfbc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801de5c:	687b      	ldr	r3, [r7, #4]
 801de5e:	681b      	ldr	r3, [r3, #0]
 801de60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801de64:	2be0      	cmp	r3, #224	@ 0xe0
 801de66:	d118      	bne.n	801de9a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801de68:	2301      	movs	r3, #1
 801de6a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801de6c:	2300      	movs	r3, #0
 801de6e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801de70:	235e      	movs	r3, #94	@ 0x5e
 801de72:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801de74:	687b      	ldr	r3, [r7, #4]
 801de76:	3301      	adds	r3, #1
 801de78:	781b      	ldrb	r3, [r3, #0]
 801de7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801de7e:	b2db      	uxtb	r3, r3
 801de80:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801de82:	687b      	ldr	r3, [r7, #4]
 801de84:	3302      	adds	r3, #2
 801de86:	781b      	ldrb	r3, [r3, #0]
 801de88:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801de8a:	687b      	ldr	r3, [r7, #4]
 801de8c:	3303      	adds	r3, #3
 801de8e:	781b      	ldrb	r3, [r3, #0]
 801de90:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801de92:	f107 0310 	add.w	r3, r7, #16
 801de96:	61fb      	str	r3, [r7, #28]
 801de98:	e090      	b.n	801dfbc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801de9a:	687b      	ldr	r3, [r7, #4]
 801de9c:	681a      	ldr	r2, [r3, #0]
 801de9e:	68fb      	ldr	r3, [r7, #12]
 801dea0:	3304      	adds	r3, #4
 801dea2:	681b      	ldr	r3, [r3, #0]
 801dea4:	405a      	eors	r2, r3
 801dea6:	68fb      	ldr	r3, [r7, #12]
 801dea8:	3308      	adds	r3, #8
 801deaa:	681b      	ldr	r3, [r3, #0]
 801deac:	4013      	ands	r3, r2
 801deae:	2b00      	cmp	r3, #0
 801deb0:	d012      	beq.n	801ded8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801deb2:	687b      	ldr	r3, [r7, #4]
 801deb4:	681b      	ldr	r3, [r3, #0]
 801deb6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801deb8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801debc:	4293      	cmp	r3, r2
 801debe:	d00b      	beq.n	801ded8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801dec0:	68fb      	ldr	r3, [r7, #12]
 801dec2:	330c      	adds	r3, #12
 801dec4:	681b      	ldr	r3, [r3, #0]
 801dec6:	2b00      	cmp	r3, #0
 801dec8:	d003      	beq.n	801ded2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801deca:	68fb      	ldr	r3, [r7, #12]
 801decc:	330c      	adds	r3, #12
 801dece:	61bb      	str	r3, [r7, #24]
 801ded0:	e002      	b.n	801ded8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801ded2:	f06f 0303 	mvn.w	r3, #3
 801ded6:	e07d      	b.n	801dfd4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ded8:	4b46      	ldr	r3, [pc, #280]	@ (801dff4 <etharp_output+0x1fc>)
 801deda:	781b      	ldrb	r3, [r3, #0]
 801dedc:	4619      	mov	r1, r3
 801dede:	4a46      	ldr	r2, [pc, #280]	@ (801dff8 <etharp_output+0x200>)
 801dee0:	460b      	mov	r3, r1
 801dee2:	005b      	lsls	r3, r3, #1
 801dee4:	440b      	add	r3, r1
 801dee6:	00db      	lsls	r3, r3, #3
 801dee8:	4413      	add	r3, r2
 801deea:	3314      	adds	r3, #20
 801deec:	781b      	ldrb	r3, [r3, #0]
 801deee:	2b01      	cmp	r3, #1
 801def0:	d925      	bls.n	801df3e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801def2:	4b40      	ldr	r3, [pc, #256]	@ (801dff4 <etharp_output+0x1fc>)
 801def4:	781b      	ldrb	r3, [r3, #0]
 801def6:	4619      	mov	r1, r3
 801def8:	4a3f      	ldr	r2, [pc, #252]	@ (801dff8 <etharp_output+0x200>)
 801defa:	460b      	mov	r3, r1
 801defc:	005b      	lsls	r3, r3, #1
 801defe:	440b      	add	r3, r1
 801df00:	00db      	lsls	r3, r3, #3
 801df02:	4413      	add	r3, r2
 801df04:	3308      	adds	r3, #8
 801df06:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801df08:	68fa      	ldr	r2, [r7, #12]
 801df0a:	429a      	cmp	r2, r3
 801df0c:	d117      	bne.n	801df3e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801df0e:	69bb      	ldr	r3, [r7, #24]
 801df10:	681a      	ldr	r2, [r3, #0]
 801df12:	4b38      	ldr	r3, [pc, #224]	@ (801dff4 <etharp_output+0x1fc>)
 801df14:	781b      	ldrb	r3, [r3, #0]
 801df16:	4618      	mov	r0, r3
 801df18:	4937      	ldr	r1, [pc, #220]	@ (801dff8 <etharp_output+0x200>)
 801df1a:	4603      	mov	r3, r0
 801df1c:	005b      	lsls	r3, r3, #1
 801df1e:	4403      	add	r3, r0
 801df20:	00db      	lsls	r3, r3, #3
 801df22:	440b      	add	r3, r1
 801df24:	3304      	adds	r3, #4
 801df26:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801df28:	429a      	cmp	r2, r3
 801df2a:	d108      	bne.n	801df3e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801df2c:	4b31      	ldr	r3, [pc, #196]	@ (801dff4 <etharp_output+0x1fc>)
 801df2e:	781b      	ldrb	r3, [r3, #0]
 801df30:	461a      	mov	r2, r3
 801df32:	68b9      	ldr	r1, [r7, #8]
 801df34:	68f8      	ldr	r0, [r7, #12]
 801df36:	f7ff fec5 	bl	801dcc4 <etharp_output_to_arp_index>
 801df3a:	4603      	mov	r3, r0
 801df3c:	e04a      	b.n	801dfd4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801df3e:	2300      	movs	r3, #0
 801df40:	75fb      	strb	r3, [r7, #23]
 801df42:	e031      	b.n	801dfa8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801df44:	7dfa      	ldrb	r2, [r7, #23]
 801df46:	492c      	ldr	r1, [pc, #176]	@ (801dff8 <etharp_output+0x200>)
 801df48:	4613      	mov	r3, r2
 801df4a:	005b      	lsls	r3, r3, #1
 801df4c:	4413      	add	r3, r2
 801df4e:	00db      	lsls	r3, r3, #3
 801df50:	440b      	add	r3, r1
 801df52:	3314      	adds	r3, #20
 801df54:	781b      	ldrb	r3, [r3, #0]
 801df56:	2b01      	cmp	r3, #1
 801df58:	d923      	bls.n	801dfa2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801df5a:	7dfa      	ldrb	r2, [r7, #23]
 801df5c:	4926      	ldr	r1, [pc, #152]	@ (801dff8 <etharp_output+0x200>)
 801df5e:	4613      	mov	r3, r2
 801df60:	005b      	lsls	r3, r3, #1
 801df62:	4413      	add	r3, r2
 801df64:	00db      	lsls	r3, r3, #3
 801df66:	440b      	add	r3, r1
 801df68:	3308      	adds	r3, #8
 801df6a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801df6c:	68fa      	ldr	r2, [r7, #12]
 801df6e:	429a      	cmp	r2, r3
 801df70:	d117      	bne.n	801dfa2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801df72:	69bb      	ldr	r3, [r7, #24]
 801df74:	6819      	ldr	r1, [r3, #0]
 801df76:	7dfa      	ldrb	r2, [r7, #23]
 801df78:	481f      	ldr	r0, [pc, #124]	@ (801dff8 <etharp_output+0x200>)
 801df7a:	4613      	mov	r3, r2
 801df7c:	005b      	lsls	r3, r3, #1
 801df7e:	4413      	add	r3, r2
 801df80:	00db      	lsls	r3, r3, #3
 801df82:	4403      	add	r3, r0
 801df84:	3304      	adds	r3, #4
 801df86:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801df88:	4299      	cmp	r1, r3
 801df8a:	d10a      	bne.n	801dfa2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801df8c:	4a19      	ldr	r2, [pc, #100]	@ (801dff4 <etharp_output+0x1fc>)
 801df8e:	7dfb      	ldrb	r3, [r7, #23]
 801df90:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801df92:	7dfb      	ldrb	r3, [r7, #23]
 801df94:	461a      	mov	r2, r3
 801df96:	68b9      	ldr	r1, [r7, #8]
 801df98:	68f8      	ldr	r0, [r7, #12]
 801df9a:	f7ff fe93 	bl	801dcc4 <etharp_output_to_arp_index>
 801df9e:	4603      	mov	r3, r0
 801dfa0:	e018      	b.n	801dfd4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801dfa2:	7dfb      	ldrb	r3, [r7, #23]
 801dfa4:	3301      	adds	r3, #1
 801dfa6:	75fb      	strb	r3, [r7, #23]
 801dfa8:	7dfb      	ldrb	r3, [r7, #23]
 801dfaa:	2b09      	cmp	r3, #9
 801dfac:	d9ca      	bls.n	801df44 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801dfae:	68ba      	ldr	r2, [r7, #8]
 801dfb0:	69b9      	ldr	r1, [r7, #24]
 801dfb2:	68f8      	ldr	r0, [r7, #12]
 801dfb4:	f000 f822 	bl	801dffc <etharp_query>
 801dfb8:	4603      	mov	r3, r0
 801dfba:	e00b      	b.n	801dfd4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801dfbc:	68fb      	ldr	r3, [r7, #12]
 801dfbe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 801dfc2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801dfc6:	9300      	str	r3, [sp, #0]
 801dfc8:	69fb      	ldr	r3, [r7, #28]
 801dfca:	68b9      	ldr	r1, [r7, #8]
 801dfcc:	68f8      	ldr	r0, [r7, #12]
 801dfce:	f002 f93f 	bl	8020250 <ethernet_output>
 801dfd2:	4603      	mov	r3, r0
}
 801dfd4:	4618      	mov	r0, r3
 801dfd6:	3720      	adds	r7, #32
 801dfd8:	46bd      	mov	sp, r7
 801dfda:	bd80      	pop	{r7, pc}
 801dfdc:	08025d40 	.word	0x08025d40
 801dfe0:	08025e90 	.word	0x08025e90
 801dfe4:	08025db8 	.word	0x08025db8
 801dfe8:	08025ee0 	.word	0x08025ee0
 801dfec:	08025e80 	.word	0x08025e80
 801dff0:	0802775c 	.word	0x0802775c
 801dff4:	20004d6c 	.word	0x20004d6c
 801dff8:	20004c7c 	.word	0x20004c7c

0801dffc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801dffc:	b580      	push	{r7, lr}
 801dffe:	b08c      	sub	sp, #48	@ 0x30
 801e000:	af02      	add	r7, sp, #8
 801e002:	60f8      	str	r0, [r7, #12]
 801e004:	60b9      	str	r1, [r7, #8]
 801e006:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801e008:	68fb      	ldr	r3, [r7, #12]
 801e00a:	3332      	adds	r3, #50	@ 0x32
 801e00c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801e00e:	23ff      	movs	r3, #255	@ 0xff
 801e010:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801e014:	2300      	movs	r3, #0
 801e016:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801e018:	68bb      	ldr	r3, [r7, #8]
 801e01a:	681b      	ldr	r3, [r3, #0]
 801e01c:	68f9      	ldr	r1, [r7, #12]
 801e01e:	4618      	mov	r0, r3
 801e020:	f001 fa08 	bl	801f434 <ip4_addr_isbroadcast_u32>
 801e024:	4603      	mov	r3, r0
 801e026:	2b00      	cmp	r3, #0
 801e028:	d10c      	bne.n	801e044 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801e02a:	68bb      	ldr	r3, [r7, #8]
 801e02c:	681b      	ldr	r3, [r3, #0]
 801e02e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801e032:	2be0      	cmp	r3, #224	@ 0xe0
 801e034:	d006      	beq.n	801e044 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801e036:	68bb      	ldr	r3, [r7, #8]
 801e038:	2b00      	cmp	r3, #0
 801e03a:	d003      	beq.n	801e044 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801e03c:	68bb      	ldr	r3, [r7, #8]
 801e03e:	681b      	ldr	r3, [r3, #0]
 801e040:	2b00      	cmp	r3, #0
 801e042:	d102      	bne.n	801e04a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801e044:	f06f 030f 	mvn.w	r3, #15
 801e048:	e101      	b.n	801e24e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801e04a:	68fa      	ldr	r2, [r7, #12]
 801e04c:	2101      	movs	r1, #1
 801e04e:	68b8      	ldr	r0, [r7, #8]
 801e050:	f7ff fb5c 	bl	801d70c <etharp_find_entry>
 801e054:	4603      	mov	r3, r0
 801e056:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801e058:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801e05c:	2b00      	cmp	r3, #0
 801e05e:	da02      	bge.n	801e066 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801e060:	8a7b      	ldrh	r3, [r7, #18]
 801e062:	b25b      	sxtb	r3, r3
 801e064:	e0f3      	b.n	801e24e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801e066:	8a7b      	ldrh	r3, [r7, #18]
 801e068:	2b7e      	cmp	r3, #126	@ 0x7e
 801e06a:	d906      	bls.n	801e07a <etharp_query+0x7e>
 801e06c:	4b7a      	ldr	r3, [pc, #488]	@ (801e258 <etharp_query+0x25c>)
 801e06e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801e072:	497a      	ldr	r1, [pc, #488]	@ (801e25c <etharp_query+0x260>)
 801e074:	487a      	ldr	r0, [pc, #488]	@ (801e260 <etharp_query+0x264>)
 801e076:	f003 f99d 	bl	80213b4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801e07a:	8a7b      	ldrh	r3, [r7, #18]
 801e07c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801e07e:	7c7a      	ldrb	r2, [r7, #17]
 801e080:	4978      	ldr	r1, [pc, #480]	@ (801e264 <etharp_query+0x268>)
 801e082:	4613      	mov	r3, r2
 801e084:	005b      	lsls	r3, r3, #1
 801e086:	4413      	add	r3, r2
 801e088:	00db      	lsls	r3, r3, #3
 801e08a:	440b      	add	r3, r1
 801e08c:	3314      	adds	r3, #20
 801e08e:	781b      	ldrb	r3, [r3, #0]
 801e090:	2b00      	cmp	r3, #0
 801e092:	d115      	bne.n	801e0c0 <etharp_query+0xc4>
    is_new_entry = 1;
 801e094:	2301      	movs	r3, #1
 801e096:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801e098:	7c7a      	ldrb	r2, [r7, #17]
 801e09a:	4972      	ldr	r1, [pc, #456]	@ (801e264 <etharp_query+0x268>)
 801e09c:	4613      	mov	r3, r2
 801e09e:	005b      	lsls	r3, r3, #1
 801e0a0:	4413      	add	r3, r2
 801e0a2:	00db      	lsls	r3, r3, #3
 801e0a4:	440b      	add	r3, r1
 801e0a6:	3314      	adds	r3, #20
 801e0a8:	2201      	movs	r2, #1
 801e0aa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801e0ac:	7c7a      	ldrb	r2, [r7, #17]
 801e0ae:	496d      	ldr	r1, [pc, #436]	@ (801e264 <etharp_query+0x268>)
 801e0b0:	4613      	mov	r3, r2
 801e0b2:	005b      	lsls	r3, r3, #1
 801e0b4:	4413      	add	r3, r2
 801e0b6:	00db      	lsls	r3, r3, #3
 801e0b8:	440b      	add	r3, r1
 801e0ba:	3308      	adds	r3, #8
 801e0bc:	68fa      	ldr	r2, [r7, #12]
 801e0be:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801e0c0:	7c7a      	ldrb	r2, [r7, #17]
 801e0c2:	4968      	ldr	r1, [pc, #416]	@ (801e264 <etharp_query+0x268>)
 801e0c4:	4613      	mov	r3, r2
 801e0c6:	005b      	lsls	r3, r3, #1
 801e0c8:	4413      	add	r3, r2
 801e0ca:	00db      	lsls	r3, r3, #3
 801e0cc:	440b      	add	r3, r1
 801e0ce:	3314      	adds	r3, #20
 801e0d0:	781b      	ldrb	r3, [r3, #0]
 801e0d2:	2b01      	cmp	r3, #1
 801e0d4:	d011      	beq.n	801e0fa <etharp_query+0xfe>
 801e0d6:	7c7a      	ldrb	r2, [r7, #17]
 801e0d8:	4962      	ldr	r1, [pc, #392]	@ (801e264 <etharp_query+0x268>)
 801e0da:	4613      	mov	r3, r2
 801e0dc:	005b      	lsls	r3, r3, #1
 801e0de:	4413      	add	r3, r2
 801e0e0:	00db      	lsls	r3, r3, #3
 801e0e2:	440b      	add	r3, r1
 801e0e4:	3314      	adds	r3, #20
 801e0e6:	781b      	ldrb	r3, [r3, #0]
 801e0e8:	2b01      	cmp	r3, #1
 801e0ea:	d806      	bhi.n	801e0fa <etharp_query+0xfe>
 801e0ec:	4b5a      	ldr	r3, [pc, #360]	@ (801e258 <etharp_query+0x25c>)
 801e0ee:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801e0f2:	495d      	ldr	r1, [pc, #372]	@ (801e268 <etharp_query+0x26c>)
 801e0f4:	485a      	ldr	r0, [pc, #360]	@ (801e260 <etharp_query+0x264>)
 801e0f6:	f003 f95d 	bl	80213b4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801e0fa:	6a3b      	ldr	r3, [r7, #32]
 801e0fc:	2b00      	cmp	r3, #0
 801e0fe:	d102      	bne.n	801e106 <etharp_query+0x10a>
 801e100:	687b      	ldr	r3, [r7, #4]
 801e102:	2b00      	cmp	r3, #0
 801e104:	d10c      	bne.n	801e120 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801e106:	68b9      	ldr	r1, [r7, #8]
 801e108:	68f8      	ldr	r0, [r7, #12]
 801e10a:	f000 f963 	bl	801e3d4 <etharp_request>
 801e10e:	4603      	mov	r3, r0
 801e110:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801e114:	687b      	ldr	r3, [r7, #4]
 801e116:	2b00      	cmp	r3, #0
 801e118:	d102      	bne.n	801e120 <etharp_query+0x124>
      return result;
 801e11a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801e11e:	e096      	b.n	801e24e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	2b00      	cmp	r3, #0
 801e124:	d106      	bne.n	801e134 <etharp_query+0x138>
 801e126:	4b4c      	ldr	r3, [pc, #304]	@ (801e258 <etharp_query+0x25c>)
 801e128:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801e12c:	494f      	ldr	r1, [pc, #316]	@ (801e26c <etharp_query+0x270>)
 801e12e:	484c      	ldr	r0, [pc, #304]	@ (801e260 <etharp_query+0x264>)
 801e130:	f003 f940 	bl	80213b4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801e134:	7c7a      	ldrb	r2, [r7, #17]
 801e136:	494b      	ldr	r1, [pc, #300]	@ (801e264 <etharp_query+0x268>)
 801e138:	4613      	mov	r3, r2
 801e13a:	005b      	lsls	r3, r3, #1
 801e13c:	4413      	add	r3, r2
 801e13e:	00db      	lsls	r3, r3, #3
 801e140:	440b      	add	r3, r1
 801e142:	3314      	adds	r3, #20
 801e144:	781b      	ldrb	r3, [r3, #0]
 801e146:	2b01      	cmp	r3, #1
 801e148:	d917      	bls.n	801e17a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801e14a:	4a49      	ldr	r2, [pc, #292]	@ (801e270 <etharp_query+0x274>)
 801e14c:	7c7b      	ldrb	r3, [r7, #17]
 801e14e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801e150:	7c7a      	ldrb	r2, [r7, #17]
 801e152:	4613      	mov	r3, r2
 801e154:	005b      	lsls	r3, r3, #1
 801e156:	4413      	add	r3, r2
 801e158:	00db      	lsls	r3, r3, #3
 801e15a:	3308      	adds	r3, #8
 801e15c:	4a41      	ldr	r2, [pc, #260]	@ (801e264 <etharp_query+0x268>)
 801e15e:	4413      	add	r3, r2
 801e160:	3304      	adds	r3, #4
 801e162:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801e166:	9200      	str	r2, [sp, #0]
 801e168:	697a      	ldr	r2, [r7, #20]
 801e16a:	6879      	ldr	r1, [r7, #4]
 801e16c:	68f8      	ldr	r0, [r7, #12]
 801e16e:	f002 f86f 	bl	8020250 <ethernet_output>
 801e172:	4603      	mov	r3, r0
 801e174:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801e178:	e067      	b.n	801e24a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801e17a:	7c7a      	ldrb	r2, [r7, #17]
 801e17c:	4939      	ldr	r1, [pc, #228]	@ (801e264 <etharp_query+0x268>)
 801e17e:	4613      	mov	r3, r2
 801e180:	005b      	lsls	r3, r3, #1
 801e182:	4413      	add	r3, r2
 801e184:	00db      	lsls	r3, r3, #3
 801e186:	440b      	add	r3, r1
 801e188:	3314      	adds	r3, #20
 801e18a:	781b      	ldrb	r3, [r3, #0]
 801e18c:	2b01      	cmp	r3, #1
 801e18e:	d15c      	bne.n	801e24a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801e190:	2300      	movs	r3, #0
 801e192:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	61fb      	str	r3, [r7, #28]
    while (p) {
 801e198:	e01c      	b.n	801e1d4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801e19a:	69fb      	ldr	r3, [r7, #28]
 801e19c:	895a      	ldrh	r2, [r3, #10]
 801e19e:	69fb      	ldr	r3, [r7, #28]
 801e1a0:	891b      	ldrh	r3, [r3, #8]
 801e1a2:	429a      	cmp	r2, r3
 801e1a4:	d10a      	bne.n	801e1bc <etharp_query+0x1c0>
 801e1a6:	69fb      	ldr	r3, [r7, #28]
 801e1a8:	681b      	ldr	r3, [r3, #0]
 801e1aa:	2b00      	cmp	r3, #0
 801e1ac:	d006      	beq.n	801e1bc <etharp_query+0x1c0>
 801e1ae:	4b2a      	ldr	r3, [pc, #168]	@ (801e258 <etharp_query+0x25c>)
 801e1b0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801e1b4:	492f      	ldr	r1, [pc, #188]	@ (801e274 <etharp_query+0x278>)
 801e1b6:	482a      	ldr	r0, [pc, #168]	@ (801e260 <etharp_query+0x264>)
 801e1b8:	f003 f8fc 	bl	80213b4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801e1bc:	69fb      	ldr	r3, [r7, #28]
 801e1be:	7b1b      	ldrb	r3, [r3, #12]
 801e1c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e1c4:	2b00      	cmp	r3, #0
 801e1c6:	d002      	beq.n	801e1ce <etharp_query+0x1d2>
        copy_needed = 1;
 801e1c8:	2301      	movs	r3, #1
 801e1ca:	61bb      	str	r3, [r7, #24]
        break;
 801e1cc:	e005      	b.n	801e1da <etharp_query+0x1de>
      }
      p = p->next;
 801e1ce:	69fb      	ldr	r3, [r7, #28]
 801e1d0:	681b      	ldr	r3, [r3, #0]
 801e1d2:	61fb      	str	r3, [r7, #28]
    while (p) {
 801e1d4:	69fb      	ldr	r3, [r7, #28]
 801e1d6:	2b00      	cmp	r3, #0
 801e1d8:	d1df      	bne.n	801e19a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801e1da:	69bb      	ldr	r3, [r7, #24]
 801e1dc:	2b00      	cmp	r3, #0
 801e1de:	d007      	beq.n	801e1f0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801e1e0:	687a      	ldr	r2, [r7, #4]
 801e1e2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801e1e6:	200e      	movs	r0, #14
 801e1e8:	f7f6 fb76 	bl	80148d8 <pbuf_clone>
 801e1ec:	61f8      	str	r0, [r7, #28]
 801e1ee:	e004      	b.n	801e1fa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801e1f0:	687b      	ldr	r3, [r7, #4]
 801e1f2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801e1f4:	69f8      	ldr	r0, [r7, #28]
 801e1f6:	f7f6 f865 	bl	80142c4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801e1fa:	69fb      	ldr	r3, [r7, #28]
 801e1fc:	2b00      	cmp	r3, #0
 801e1fe:	d021      	beq.n	801e244 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801e200:	7c7a      	ldrb	r2, [r7, #17]
 801e202:	4918      	ldr	r1, [pc, #96]	@ (801e264 <etharp_query+0x268>)
 801e204:	4613      	mov	r3, r2
 801e206:	005b      	lsls	r3, r3, #1
 801e208:	4413      	add	r3, r2
 801e20a:	00db      	lsls	r3, r3, #3
 801e20c:	440b      	add	r3, r1
 801e20e:	681b      	ldr	r3, [r3, #0]
 801e210:	2b00      	cmp	r3, #0
 801e212:	d00a      	beq.n	801e22a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801e214:	7c7a      	ldrb	r2, [r7, #17]
 801e216:	4913      	ldr	r1, [pc, #76]	@ (801e264 <etharp_query+0x268>)
 801e218:	4613      	mov	r3, r2
 801e21a:	005b      	lsls	r3, r3, #1
 801e21c:	4413      	add	r3, r2
 801e21e:	00db      	lsls	r3, r3, #3
 801e220:	440b      	add	r3, r1
 801e222:	681b      	ldr	r3, [r3, #0]
 801e224:	4618      	mov	r0, r3
 801e226:	f7f5 ffa7 	bl	8014178 <pbuf_free>
      }
      arp_table[i].q = p;
 801e22a:	7c7a      	ldrb	r2, [r7, #17]
 801e22c:	490d      	ldr	r1, [pc, #52]	@ (801e264 <etharp_query+0x268>)
 801e22e:	4613      	mov	r3, r2
 801e230:	005b      	lsls	r3, r3, #1
 801e232:	4413      	add	r3, r2
 801e234:	00db      	lsls	r3, r3, #3
 801e236:	440b      	add	r3, r1
 801e238:	69fa      	ldr	r2, [r7, #28]
 801e23a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801e23c:	2300      	movs	r3, #0
 801e23e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801e242:	e002      	b.n	801e24a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801e244:	23ff      	movs	r3, #255	@ 0xff
 801e246:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801e24a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801e24e:	4618      	mov	r0, r3
 801e250:	3728      	adds	r7, #40	@ 0x28
 801e252:	46bd      	mov	sp, r7
 801e254:	bd80      	pop	{r7, pc}
 801e256:	bf00      	nop
 801e258:	08025d40 	.word	0x08025d40
 801e25c:	08025eec 	.word	0x08025eec
 801e260:	08025db8 	.word	0x08025db8
 801e264:	20004c7c 	.word	0x20004c7c
 801e268:	08025efc 	.word	0x08025efc
 801e26c:	08025ee0 	.word	0x08025ee0
 801e270:	20004d6c 	.word	0x20004d6c
 801e274:	08025f24 	.word	0x08025f24

0801e278 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801e278:	b580      	push	{r7, lr}
 801e27a:	b08a      	sub	sp, #40	@ 0x28
 801e27c:	af02      	add	r7, sp, #8
 801e27e:	60f8      	str	r0, [r7, #12]
 801e280:	60b9      	str	r1, [r7, #8]
 801e282:	607a      	str	r2, [r7, #4]
 801e284:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801e286:	2300      	movs	r3, #0
 801e288:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801e28a:	68fb      	ldr	r3, [r7, #12]
 801e28c:	2b00      	cmp	r3, #0
 801e28e:	d106      	bne.n	801e29e <etharp_raw+0x26>
 801e290:	4b3a      	ldr	r3, [pc, #232]	@ (801e37c <etharp_raw+0x104>)
 801e292:	f240 4257 	movw	r2, #1111	@ 0x457
 801e296:	493a      	ldr	r1, [pc, #232]	@ (801e380 <etharp_raw+0x108>)
 801e298:	483a      	ldr	r0, [pc, #232]	@ (801e384 <etharp_raw+0x10c>)
 801e29a:	f003 f88b 	bl	80213b4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801e29e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801e2a2:	211c      	movs	r1, #28
 801e2a4:	200e      	movs	r0, #14
 801e2a6:	f7f5 fc83 	bl	8013bb0 <pbuf_alloc>
 801e2aa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801e2ac:	69bb      	ldr	r3, [r7, #24]
 801e2ae:	2b00      	cmp	r3, #0
 801e2b0:	d102      	bne.n	801e2b8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801e2b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e2b6:	e05d      	b.n	801e374 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801e2b8:	69bb      	ldr	r3, [r7, #24]
 801e2ba:	895b      	ldrh	r3, [r3, #10]
 801e2bc:	2b1b      	cmp	r3, #27
 801e2be:	d806      	bhi.n	801e2ce <etharp_raw+0x56>
 801e2c0:	4b2e      	ldr	r3, [pc, #184]	@ (801e37c <etharp_raw+0x104>)
 801e2c2:	f240 4262 	movw	r2, #1122	@ 0x462
 801e2c6:	4930      	ldr	r1, [pc, #192]	@ (801e388 <etharp_raw+0x110>)
 801e2c8:	482e      	ldr	r0, [pc, #184]	@ (801e384 <etharp_raw+0x10c>)
 801e2ca:	f003 f873 	bl	80213b4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801e2ce:	69bb      	ldr	r3, [r7, #24]
 801e2d0:	685b      	ldr	r3, [r3, #4]
 801e2d2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801e2d4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801e2d6:	4618      	mov	r0, r3
 801e2d8:	f7f4 f990 	bl	80125fc <lwip_htons>
 801e2dc:	4603      	mov	r3, r0
 801e2de:	461a      	mov	r2, r3
 801e2e0:	697b      	ldr	r3, [r7, #20]
 801e2e2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801e2e4:	68fb      	ldr	r3, [r7, #12]
 801e2e6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801e2ea:	2b06      	cmp	r3, #6
 801e2ec:	d006      	beq.n	801e2fc <etharp_raw+0x84>
 801e2ee:	4b23      	ldr	r3, [pc, #140]	@ (801e37c <etharp_raw+0x104>)
 801e2f0:	f240 4269 	movw	r2, #1129	@ 0x469
 801e2f4:	4925      	ldr	r1, [pc, #148]	@ (801e38c <etharp_raw+0x114>)
 801e2f6:	4823      	ldr	r0, [pc, #140]	@ (801e384 <etharp_raw+0x10c>)
 801e2f8:	f003 f85c 	bl	80213b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801e2fc:	697b      	ldr	r3, [r7, #20]
 801e2fe:	3308      	adds	r3, #8
 801e300:	2206      	movs	r2, #6
 801e302:	6839      	ldr	r1, [r7, #0]
 801e304:	4618      	mov	r0, r3
 801e306:	f003 fb3e 	bl	8021986 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801e30a:	697b      	ldr	r3, [r7, #20]
 801e30c:	3312      	adds	r3, #18
 801e30e:	2206      	movs	r2, #6
 801e310:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801e312:	4618      	mov	r0, r3
 801e314:	f003 fb37 	bl	8021986 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801e318:	697b      	ldr	r3, [r7, #20]
 801e31a:	330e      	adds	r3, #14
 801e31c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801e31e:	6812      	ldr	r2, [r2, #0]
 801e320:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801e322:	697b      	ldr	r3, [r7, #20]
 801e324:	3318      	adds	r3, #24
 801e326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e328:	6812      	ldr	r2, [r2, #0]
 801e32a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801e32c:	697b      	ldr	r3, [r7, #20]
 801e32e:	2200      	movs	r2, #0
 801e330:	701a      	strb	r2, [r3, #0]
 801e332:	2200      	movs	r2, #0
 801e334:	f042 0201 	orr.w	r2, r2, #1
 801e338:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801e33a:	697b      	ldr	r3, [r7, #20]
 801e33c:	2200      	movs	r2, #0
 801e33e:	f042 0208 	orr.w	r2, r2, #8
 801e342:	709a      	strb	r2, [r3, #2]
 801e344:	2200      	movs	r2, #0
 801e346:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801e348:	697b      	ldr	r3, [r7, #20]
 801e34a:	2206      	movs	r2, #6
 801e34c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801e34e:	697b      	ldr	r3, [r7, #20]
 801e350:	2204      	movs	r2, #4
 801e352:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801e354:	f640 0306 	movw	r3, #2054	@ 0x806
 801e358:	9300      	str	r3, [sp, #0]
 801e35a:	687b      	ldr	r3, [r7, #4]
 801e35c:	68ba      	ldr	r2, [r7, #8]
 801e35e:	69b9      	ldr	r1, [r7, #24]
 801e360:	68f8      	ldr	r0, [r7, #12]
 801e362:	f001 ff75 	bl	8020250 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801e366:	69b8      	ldr	r0, [r7, #24]
 801e368:	f7f5 ff06 	bl	8014178 <pbuf_free>
  p = NULL;
 801e36c:	2300      	movs	r3, #0
 801e36e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801e370:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e374:	4618      	mov	r0, r3
 801e376:	3720      	adds	r7, #32
 801e378:	46bd      	mov	sp, r7
 801e37a:	bd80      	pop	{r7, pc}
 801e37c:	08025d40 	.word	0x08025d40
 801e380:	08025e90 	.word	0x08025e90
 801e384:	08025db8 	.word	0x08025db8
 801e388:	08025f40 	.word	0x08025f40
 801e38c:	08025f74 	.word	0x08025f74

0801e390 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801e390:	b580      	push	{r7, lr}
 801e392:	b088      	sub	sp, #32
 801e394:	af04      	add	r7, sp, #16
 801e396:	60f8      	str	r0, [r7, #12]
 801e398:	60b9      	str	r1, [r7, #8]
 801e39a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e39c:	68fb      	ldr	r3, [r7, #12]
 801e39e:	f103 0132 	add.w	r1, r3, #50	@ 0x32
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801e3a2:	68fb      	ldr	r3, [r7, #12]
 801e3a4:	f103 0032 	add.w	r0, r3, #50	@ 0x32
 801e3a8:	68fb      	ldr	r3, [r7, #12]
 801e3aa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e3ac:	2201      	movs	r2, #1
 801e3ae:	9203      	str	r2, [sp, #12]
 801e3b0:	68ba      	ldr	r2, [r7, #8]
 801e3b2:	9202      	str	r2, [sp, #8]
 801e3b4:	4a06      	ldr	r2, [pc, #24]	@ (801e3d0 <etharp_request_dst+0x40>)
 801e3b6:	9201      	str	r2, [sp, #4]
 801e3b8:	9300      	str	r3, [sp, #0]
 801e3ba:	4603      	mov	r3, r0
 801e3bc:	687a      	ldr	r2, [r7, #4]
 801e3be:	68f8      	ldr	r0, [r7, #12]
 801e3c0:	f7ff ff5a 	bl	801e278 <etharp_raw>
 801e3c4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801e3c6:	4618      	mov	r0, r3
 801e3c8:	3710      	adds	r7, #16
 801e3ca:	46bd      	mov	sp, r7
 801e3cc:	bd80      	pop	{r7, pc}
 801e3ce:	bf00      	nop
 801e3d0:	08027764 	.word	0x08027764

0801e3d4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801e3d4:	b580      	push	{r7, lr}
 801e3d6:	b082      	sub	sp, #8
 801e3d8:	af00      	add	r7, sp, #0
 801e3da:	6078      	str	r0, [r7, #4]
 801e3dc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801e3de:	4a05      	ldr	r2, [pc, #20]	@ (801e3f4 <etharp_request+0x20>)
 801e3e0:	6839      	ldr	r1, [r7, #0]
 801e3e2:	6878      	ldr	r0, [r7, #4]
 801e3e4:	f7ff ffd4 	bl	801e390 <etharp_request_dst>
 801e3e8:	4603      	mov	r3, r0
}
 801e3ea:	4618      	mov	r0, r3
 801e3ec:	3708      	adds	r7, #8
 801e3ee:	46bd      	mov	sp, r7
 801e3f0:	bd80      	pop	{r7, pc}
 801e3f2:	bf00      	nop
 801e3f4:	0802775c 	.word	0x0802775c

0801e3f8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801e3f8:	b580      	push	{r7, lr}
 801e3fa:	b08e      	sub	sp, #56	@ 0x38
 801e3fc:	af04      	add	r7, sp, #16
 801e3fe:	6078      	str	r0, [r7, #4]
 801e400:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801e402:	4b79      	ldr	r3, [pc, #484]	@ (801e5e8 <icmp_input+0x1f0>)
 801e404:	689b      	ldr	r3, [r3, #8]
 801e406:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801e408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e40a:	781b      	ldrb	r3, [r3, #0]
 801e40c:	f003 030f 	and.w	r3, r3, #15
 801e410:	b2db      	uxtb	r3, r3
 801e412:	009b      	lsls	r3, r3, #2
 801e414:	b2db      	uxtb	r3, r3
 801e416:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801e418:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e41a:	2b13      	cmp	r3, #19
 801e41c:	f240 80cd 	bls.w	801e5ba <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801e420:	687b      	ldr	r3, [r7, #4]
 801e422:	895b      	ldrh	r3, [r3, #10]
 801e424:	2b03      	cmp	r3, #3
 801e426:	f240 80ca 	bls.w	801e5be <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801e42a:	687b      	ldr	r3, [r7, #4]
 801e42c:	685b      	ldr	r3, [r3, #4]
 801e42e:	781b      	ldrb	r3, [r3, #0]
 801e430:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801e434:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801e438:	2b00      	cmp	r3, #0
 801e43a:	f000 80b7 	beq.w	801e5ac <icmp_input+0x1b4>
 801e43e:	2b08      	cmp	r3, #8
 801e440:	f040 80b7 	bne.w	801e5b2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801e444:	4b69      	ldr	r3, [pc, #420]	@ (801e5ec <icmp_input+0x1f4>)
 801e446:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e448:	4b67      	ldr	r3, [pc, #412]	@ (801e5e8 <icmp_input+0x1f0>)
 801e44a:	695b      	ldr	r3, [r3, #20]
 801e44c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801e450:	2be0      	cmp	r3, #224	@ 0xe0
 801e452:	f000 80bb 	beq.w	801e5cc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801e456:	4b64      	ldr	r3, [pc, #400]	@ (801e5e8 <icmp_input+0x1f0>)
 801e458:	695b      	ldr	r3, [r3, #20]
 801e45a:	4a63      	ldr	r2, [pc, #396]	@ (801e5e8 <icmp_input+0x1f0>)
 801e45c:	6812      	ldr	r2, [r2, #0]
 801e45e:	4611      	mov	r1, r2
 801e460:	4618      	mov	r0, r3
 801e462:	f000 ffe7 	bl	801f434 <ip4_addr_isbroadcast_u32>
 801e466:	4603      	mov	r3, r0
 801e468:	2b00      	cmp	r3, #0
 801e46a:	f040 80b1 	bne.w	801e5d0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801e46e:	687b      	ldr	r3, [r7, #4]
 801e470:	891b      	ldrh	r3, [r3, #8]
 801e472:	2b07      	cmp	r3, #7
 801e474:	f240 80a5 	bls.w	801e5c2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801e478:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e47a:	330e      	adds	r3, #14
 801e47c:	4619      	mov	r1, r3
 801e47e:	6878      	ldr	r0, [r7, #4]
 801e480:	f7f5 fde4 	bl	801404c <pbuf_add_header>
 801e484:	4603      	mov	r3, r0
 801e486:	2b00      	cmp	r3, #0
 801e488:	d04b      	beq.n	801e522 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801e48a:	687b      	ldr	r3, [r7, #4]
 801e48c:	891a      	ldrh	r2, [r3, #8]
 801e48e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e490:	4413      	add	r3, r2
 801e492:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801e494:	687b      	ldr	r3, [r7, #4]
 801e496:	891b      	ldrh	r3, [r3, #8]
 801e498:	8b7a      	ldrh	r2, [r7, #26]
 801e49a:	429a      	cmp	r2, r3
 801e49c:	f0c0 809a 	bcc.w	801e5d4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801e4a0:	8b7b      	ldrh	r3, [r7, #26]
 801e4a2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801e4a6:	4619      	mov	r1, r3
 801e4a8:	200e      	movs	r0, #14
 801e4aa:	f7f5 fb81 	bl	8013bb0 <pbuf_alloc>
 801e4ae:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801e4b0:	697b      	ldr	r3, [r7, #20]
 801e4b2:	2b00      	cmp	r3, #0
 801e4b4:	f000 8090 	beq.w	801e5d8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801e4b8:	697b      	ldr	r3, [r7, #20]
 801e4ba:	895b      	ldrh	r3, [r3, #10]
 801e4bc:	461a      	mov	r2, r3
 801e4be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e4c0:	3308      	adds	r3, #8
 801e4c2:	429a      	cmp	r2, r3
 801e4c4:	d203      	bcs.n	801e4ce <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801e4c6:	6978      	ldr	r0, [r7, #20]
 801e4c8:	f7f5 fe56 	bl	8014178 <pbuf_free>
          goto icmperr;
 801e4cc:	e085      	b.n	801e5da <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801e4ce:	697b      	ldr	r3, [r7, #20]
 801e4d0:	685b      	ldr	r3, [r3, #4]
 801e4d2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801e4d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801e4d6:	4618      	mov	r0, r3
 801e4d8:	f003 fa55 	bl	8021986 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801e4dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e4de:	4619      	mov	r1, r3
 801e4e0:	6978      	ldr	r0, [r7, #20]
 801e4e2:	f7f5 fdc3 	bl	801406c <pbuf_remove_header>
 801e4e6:	4603      	mov	r3, r0
 801e4e8:	2b00      	cmp	r3, #0
 801e4ea:	d009      	beq.n	801e500 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801e4ec:	4b40      	ldr	r3, [pc, #256]	@ (801e5f0 <icmp_input+0x1f8>)
 801e4ee:	22b6      	movs	r2, #182	@ 0xb6
 801e4f0:	4940      	ldr	r1, [pc, #256]	@ (801e5f4 <icmp_input+0x1fc>)
 801e4f2:	4841      	ldr	r0, [pc, #260]	@ (801e5f8 <icmp_input+0x200>)
 801e4f4:	f002 ff5e 	bl	80213b4 <iprintf>
          pbuf_free(r);
 801e4f8:	6978      	ldr	r0, [r7, #20]
 801e4fa:	f7f5 fe3d 	bl	8014178 <pbuf_free>
          goto icmperr;
 801e4fe:	e06c      	b.n	801e5da <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801e500:	6879      	ldr	r1, [r7, #4]
 801e502:	6978      	ldr	r0, [r7, #20]
 801e504:	f7f5 ff6c 	bl	80143e0 <pbuf_copy>
 801e508:	4603      	mov	r3, r0
 801e50a:	2b00      	cmp	r3, #0
 801e50c:	d003      	beq.n	801e516 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801e50e:	6978      	ldr	r0, [r7, #20]
 801e510:	f7f5 fe32 	bl	8014178 <pbuf_free>
          goto icmperr;
 801e514:	e061      	b.n	801e5da <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801e516:	6878      	ldr	r0, [r7, #4]
 801e518:	f7f5 fe2e 	bl	8014178 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801e51c:	697b      	ldr	r3, [r7, #20]
 801e51e:	607b      	str	r3, [r7, #4]
 801e520:	e00f      	b.n	801e542 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801e522:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e524:	330e      	adds	r3, #14
 801e526:	4619      	mov	r1, r3
 801e528:	6878      	ldr	r0, [r7, #4]
 801e52a:	f7f5 fd9f 	bl	801406c <pbuf_remove_header>
 801e52e:	4603      	mov	r3, r0
 801e530:	2b00      	cmp	r3, #0
 801e532:	d006      	beq.n	801e542 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801e534:	4b2e      	ldr	r3, [pc, #184]	@ (801e5f0 <icmp_input+0x1f8>)
 801e536:	22c7      	movs	r2, #199	@ 0xc7
 801e538:	4930      	ldr	r1, [pc, #192]	@ (801e5fc <icmp_input+0x204>)
 801e53a:	482f      	ldr	r0, [pc, #188]	@ (801e5f8 <icmp_input+0x200>)
 801e53c:	f002 ff3a 	bl	80213b4 <iprintf>
          goto icmperr;
 801e540:	e04b      	b.n	801e5da <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801e542:	687b      	ldr	r3, [r7, #4]
 801e544:	685b      	ldr	r3, [r3, #4]
 801e546:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801e548:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801e54a:	4619      	mov	r1, r3
 801e54c:	6878      	ldr	r0, [r7, #4]
 801e54e:	f7f5 fd7d 	bl	801404c <pbuf_add_header>
 801e552:	4603      	mov	r3, r0
 801e554:	2b00      	cmp	r3, #0
 801e556:	d12b      	bne.n	801e5b0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801e558:	687b      	ldr	r3, [r7, #4]
 801e55a:	685b      	ldr	r3, [r3, #4]
 801e55c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801e55e:	69fb      	ldr	r3, [r7, #28]
 801e560:	681a      	ldr	r2, [r3, #0]
 801e562:	68fb      	ldr	r3, [r7, #12]
 801e564:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801e566:	4b20      	ldr	r3, [pc, #128]	@ (801e5e8 <icmp_input+0x1f0>)
 801e568:	691a      	ldr	r2, [r3, #16]
 801e56a:	68fb      	ldr	r3, [r7, #12]
 801e56c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801e56e:	693b      	ldr	r3, [r7, #16]
 801e570:	2200      	movs	r2, #0
 801e572:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801e574:	693b      	ldr	r3, [r7, #16]
 801e576:	2200      	movs	r2, #0
 801e578:	709a      	strb	r2, [r3, #2]
 801e57a:	2200      	movs	r2, #0
 801e57c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801e57e:	68fb      	ldr	r3, [r7, #12]
 801e580:	22ff      	movs	r2, #255	@ 0xff
 801e582:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801e584:	68fb      	ldr	r3, [r7, #12]
 801e586:	2200      	movs	r2, #0
 801e588:	729a      	strb	r2, [r3, #10]
 801e58a:	2200      	movs	r2, #0
 801e58c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801e58e:	683b      	ldr	r3, [r7, #0]
 801e590:	9302      	str	r3, [sp, #8]
 801e592:	2301      	movs	r3, #1
 801e594:	9301      	str	r3, [sp, #4]
 801e596:	2300      	movs	r3, #0
 801e598:	9300      	str	r3, [sp, #0]
 801e59a:	23ff      	movs	r3, #255	@ 0xff
 801e59c:	2200      	movs	r2, #0
 801e59e:	69f9      	ldr	r1, [r7, #28]
 801e5a0:	6878      	ldr	r0, [r7, #4]
 801e5a2:	f000 fdf9 	bl	801f198 <ip4_output_if>
 801e5a6:	4603      	mov	r3, r0
 801e5a8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801e5aa:	e001      	b.n	801e5b0 <icmp_input+0x1b8>
      break;
 801e5ac:	bf00      	nop
 801e5ae:	e000      	b.n	801e5b2 <icmp_input+0x1ba>
      break;
 801e5b0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801e5b2:	6878      	ldr	r0, [r7, #4]
 801e5b4:	f7f5 fde0 	bl	8014178 <pbuf_free>
  return;
 801e5b8:	e013      	b.n	801e5e2 <icmp_input+0x1ea>
    goto lenerr;
 801e5ba:	bf00      	nop
 801e5bc:	e002      	b.n	801e5c4 <icmp_input+0x1cc>
    goto lenerr;
 801e5be:	bf00      	nop
 801e5c0:	e000      	b.n	801e5c4 <icmp_input+0x1cc>
        goto lenerr;
 801e5c2:	bf00      	nop
lenerr:
  pbuf_free(p);
 801e5c4:	6878      	ldr	r0, [r7, #4]
 801e5c6:	f7f5 fdd7 	bl	8014178 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801e5ca:	e00a      	b.n	801e5e2 <icmp_input+0x1ea>
        goto icmperr;
 801e5cc:	bf00      	nop
 801e5ce:	e004      	b.n	801e5da <icmp_input+0x1e2>
        goto icmperr;
 801e5d0:	bf00      	nop
 801e5d2:	e002      	b.n	801e5da <icmp_input+0x1e2>
          goto icmperr;
 801e5d4:	bf00      	nop
 801e5d6:	e000      	b.n	801e5da <icmp_input+0x1e2>
          goto icmperr;
 801e5d8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801e5da:	6878      	ldr	r0, [r7, #4]
 801e5dc:	f7f5 fdcc 	bl	8014178 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801e5e0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801e5e2:	3728      	adds	r7, #40	@ 0x28
 801e5e4:	46bd      	mov	sp, r7
 801e5e6:	bd80      	pop	{r7, pc}
 801e5e8:	20004bb4 	.word	0x20004bb4
 801e5ec:	20004bc8 	.word	0x20004bc8
 801e5f0:	08025fb8 	.word	0x08025fb8
 801e5f4:	08025ff0 	.word	0x08025ff0
 801e5f8:	08026028 	.word	0x08026028
 801e5fc:	08026050 	.word	0x08026050

0801e600 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801e600:	b580      	push	{r7, lr}
 801e602:	b082      	sub	sp, #8
 801e604:	af00      	add	r7, sp, #0
 801e606:	6078      	str	r0, [r7, #4]
 801e608:	460b      	mov	r3, r1
 801e60a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801e60c:	78fb      	ldrb	r3, [r7, #3]
 801e60e:	461a      	mov	r2, r3
 801e610:	2103      	movs	r1, #3
 801e612:	6878      	ldr	r0, [r7, #4]
 801e614:	f000 f814 	bl	801e640 <icmp_send_response>
}
 801e618:	bf00      	nop
 801e61a:	3708      	adds	r7, #8
 801e61c:	46bd      	mov	sp, r7
 801e61e:	bd80      	pop	{r7, pc}

0801e620 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801e620:	b580      	push	{r7, lr}
 801e622:	b082      	sub	sp, #8
 801e624:	af00      	add	r7, sp, #0
 801e626:	6078      	str	r0, [r7, #4]
 801e628:	460b      	mov	r3, r1
 801e62a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801e62c:	78fb      	ldrb	r3, [r7, #3]
 801e62e:	461a      	mov	r2, r3
 801e630:	210b      	movs	r1, #11
 801e632:	6878      	ldr	r0, [r7, #4]
 801e634:	f000 f804 	bl	801e640 <icmp_send_response>
}
 801e638:	bf00      	nop
 801e63a:	3708      	adds	r7, #8
 801e63c:	46bd      	mov	sp, r7
 801e63e:	bd80      	pop	{r7, pc}

0801e640 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801e640:	b580      	push	{r7, lr}
 801e642:	b08c      	sub	sp, #48	@ 0x30
 801e644:	af04      	add	r7, sp, #16
 801e646:	6078      	str	r0, [r7, #4]
 801e648:	460b      	mov	r3, r1
 801e64a:	70fb      	strb	r3, [r7, #3]
 801e64c:	4613      	mov	r3, r2
 801e64e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801e650:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801e654:	2124      	movs	r1, #36	@ 0x24
 801e656:	2022      	movs	r0, #34	@ 0x22
 801e658:	f7f5 faaa 	bl	8013bb0 <pbuf_alloc>
 801e65c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801e65e:	69fb      	ldr	r3, [r7, #28]
 801e660:	2b00      	cmp	r3, #0
 801e662:	d04c      	beq.n	801e6fe <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801e664:	69fb      	ldr	r3, [r7, #28]
 801e666:	895b      	ldrh	r3, [r3, #10]
 801e668:	2b23      	cmp	r3, #35	@ 0x23
 801e66a:	d806      	bhi.n	801e67a <icmp_send_response+0x3a>
 801e66c:	4b26      	ldr	r3, [pc, #152]	@ (801e708 <icmp_send_response+0xc8>)
 801e66e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801e672:	4926      	ldr	r1, [pc, #152]	@ (801e70c <icmp_send_response+0xcc>)
 801e674:	4826      	ldr	r0, [pc, #152]	@ (801e710 <icmp_send_response+0xd0>)
 801e676:	f002 fe9d 	bl	80213b4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801e67a:	687b      	ldr	r3, [r7, #4]
 801e67c:	685b      	ldr	r3, [r3, #4]
 801e67e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801e680:	69fb      	ldr	r3, [r7, #28]
 801e682:	685b      	ldr	r3, [r3, #4]
 801e684:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801e686:	697b      	ldr	r3, [r7, #20]
 801e688:	78fa      	ldrb	r2, [r7, #3]
 801e68a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801e68c:	697b      	ldr	r3, [r7, #20]
 801e68e:	78ba      	ldrb	r2, [r7, #2]
 801e690:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801e692:	697b      	ldr	r3, [r7, #20]
 801e694:	2200      	movs	r2, #0
 801e696:	711a      	strb	r2, [r3, #4]
 801e698:	2200      	movs	r2, #0
 801e69a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801e69c:	697b      	ldr	r3, [r7, #20]
 801e69e:	2200      	movs	r2, #0
 801e6a0:	719a      	strb	r2, [r3, #6]
 801e6a2:	2200      	movs	r2, #0
 801e6a4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801e6a6:	69fb      	ldr	r3, [r7, #28]
 801e6a8:	685b      	ldr	r3, [r3, #4]
 801e6aa:	f103 0008 	add.w	r0, r3, #8
 801e6ae:	687b      	ldr	r3, [r7, #4]
 801e6b0:	685b      	ldr	r3, [r3, #4]
 801e6b2:	221c      	movs	r2, #28
 801e6b4:	4619      	mov	r1, r3
 801e6b6:	f003 f966 	bl	8021986 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801e6ba:	69bb      	ldr	r3, [r7, #24]
 801e6bc:	68db      	ldr	r3, [r3, #12]
 801e6be:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801e6c0:	f107 030c 	add.w	r3, r7, #12
 801e6c4:	4618      	mov	r0, r3
 801e6c6:	f000 fb45 	bl	801ed54 <ip4_route>
 801e6ca:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801e6cc:	693b      	ldr	r3, [r7, #16]
 801e6ce:	2b00      	cmp	r3, #0
 801e6d0:	d011      	beq.n	801e6f6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801e6d2:	697b      	ldr	r3, [r7, #20]
 801e6d4:	2200      	movs	r2, #0
 801e6d6:	709a      	strb	r2, [r3, #2]
 801e6d8:	2200      	movs	r2, #0
 801e6da:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801e6dc:	f107 020c 	add.w	r2, r7, #12
 801e6e0:	693b      	ldr	r3, [r7, #16]
 801e6e2:	9302      	str	r3, [sp, #8]
 801e6e4:	2301      	movs	r3, #1
 801e6e6:	9301      	str	r3, [sp, #4]
 801e6e8:	2300      	movs	r3, #0
 801e6ea:	9300      	str	r3, [sp, #0]
 801e6ec:	23ff      	movs	r3, #255	@ 0xff
 801e6ee:	2100      	movs	r1, #0
 801e6f0:	69f8      	ldr	r0, [r7, #28]
 801e6f2:	f000 fd51 	bl	801f198 <ip4_output_if>
  }
  pbuf_free(q);
 801e6f6:	69f8      	ldr	r0, [r7, #28]
 801e6f8:	f7f5 fd3e 	bl	8014178 <pbuf_free>
 801e6fc:	e000      	b.n	801e700 <icmp_send_response+0xc0>
    return;
 801e6fe:	bf00      	nop
}
 801e700:	3720      	adds	r7, #32
 801e702:	46bd      	mov	sp, r7
 801e704:	bd80      	pop	{r7, pc}
 801e706:	bf00      	nop
 801e708:	08025fb8 	.word	0x08025fb8
 801e70c:	08026084 	.word	0x08026084
 801e710:	08026028 	.word	0x08026028

0801e714 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
 801e714:	b480      	push	{r7}
 801e716:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 801e718:	4b05      	ldr	r3, [pc, #20]	@ (801e730 <igmp_init+0x1c>)
 801e71a:	4a06      	ldr	r2, [pc, #24]	@ (801e734 <igmp_init+0x20>)
 801e71c:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 801e71e:	4b06      	ldr	r3, [pc, #24]	@ (801e738 <igmp_init+0x24>)
 801e720:	4a06      	ldr	r2, [pc, #24]	@ (801e73c <igmp_init+0x28>)
 801e722:	601a      	str	r2, [r3, #0]
}
 801e724:	bf00      	nop
 801e726:	46bd      	mov	sp, r7
 801e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e72c:	4770      	bx	lr
 801e72e:	bf00      	nop
 801e730:	20004d70 	.word	0x20004d70
 801e734:	010000e0 	.word	0x010000e0
 801e738:	20004d74 	.word	0x20004d74
 801e73c:	020000e0 	.word	0x020000e0

0801e740 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
 801e740:	b580      	push	{r7, lr}
 801e742:	b084      	sub	sp, #16
 801e744:	af00      	add	r7, sp, #0
 801e746:	6078      	str	r0, [r7, #4]
  struct igmp_group *group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void *)netif));

  group = igmp_lookup_group(netif, &allsystems);
 801e748:	4911      	ldr	r1, [pc, #68]	@ (801e790 <igmp_start+0x50>)
 801e74a:	6878      	ldr	r0, [r7, #4]
 801e74c:	f000 f85e 	bl	801e80c <igmp_lookup_group>
 801e750:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 801e752:	68fb      	ldr	r3, [r7, #12]
 801e754:	2b00      	cmp	r3, #0
 801e756:	d014      	beq.n	801e782 <igmp_start+0x42>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 801e758:	68fb      	ldr	r3, [r7, #12]
 801e75a:	2202      	movs	r2, #2
 801e75c:	725a      	strb	r2, [r3, #9]
    group->use++;
 801e75e:	68fb      	ldr	r3, [r7, #12]
 801e760:	7b1b      	ldrb	r3, [r3, #12]
 801e762:	3301      	adds	r3, #1
 801e764:	b2da      	uxtb	r2, r3
 801e766:	68fb      	ldr	r3, [r7, #12]
 801e768:	731a      	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
 801e76a:	687b      	ldr	r3, [r7, #4]
 801e76c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e76e:	2b00      	cmp	r3, #0
 801e770:	d005      	beq.n	801e77e <igmp_start+0x3e>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
 801e772:	687b      	ldr	r3, [r7, #4]
 801e774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e776:	2201      	movs	r2, #1
 801e778:	4905      	ldr	r1, [pc, #20]	@ (801e790 <igmp_start+0x50>)
 801e77a:	6878      	ldr	r0, [r7, #4]
 801e77c:	4798      	blx	r3
    }

    return ERR_OK;
 801e77e:	2300      	movs	r3, #0
 801e780:	e001      	b.n	801e786 <igmp_start+0x46>
  }

  return ERR_MEM;
 801e782:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801e786:	4618      	mov	r0, r3
 801e788:	3710      	adds	r7, #16
 801e78a:	46bd      	mov	sp, r7
 801e78c:	bd80      	pop	{r7, pc}
 801e78e:	bf00      	nop
 801e790:	20004d70 	.word	0x20004d70

0801e794 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
 801e794:	b580      	push	{r7, lr}
 801e796:	b084      	sub	sp, #16
 801e798:	af00      	add	r7, sp, #0
 801e79a:	6078      	str	r0, [r7, #4]
  struct igmp_group *group = netif_igmp_data(netif);
 801e79c:	687b      	ldr	r3, [r7, #4]
 801e79e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e7a0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void *)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if (group != NULL) {
 801e7a2:	68fb      	ldr	r3, [r7, #12]
 801e7a4:	2b00      	cmp	r3, #0
 801e7a6:	d00a      	beq.n	801e7be <igmp_report_groups+0x2a>
    group = group->next;
 801e7a8:	68fb      	ldr	r3, [r7, #12]
 801e7aa:	681b      	ldr	r3, [r3, #0]
 801e7ac:	60fb      	str	r3, [r7, #12]
  }

  while (group != NULL) {
 801e7ae:	e006      	b.n	801e7be <igmp_report_groups+0x2a>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 801e7b0:	2105      	movs	r1, #5
 801e7b2:	68f8      	ldr	r0, [r7, #12]
 801e7b4:	f000 fa13 	bl	801ebde <igmp_delaying_member>
    group = group->next;
 801e7b8:	68fb      	ldr	r3, [r7, #12]
 801e7ba:	681b      	ldr	r3, [r3, #0]
 801e7bc:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 801e7be:	68fb      	ldr	r3, [r7, #12]
 801e7c0:	2b00      	cmp	r3, #0
 801e7c2:	d1f5      	bne.n	801e7b0 <igmp_report_groups+0x1c>
  }
}
 801e7c4:	bf00      	nop
 801e7c6:	bf00      	nop
 801e7c8:	3710      	adds	r7, #16
 801e7ca:	46bd      	mov	sp, r7
 801e7cc:	bd80      	pop	{r7, pc}

0801e7ce <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
 801e7ce:	b480      	push	{r7}
 801e7d0:	b085      	sub	sp, #20
 801e7d2:	af00      	add	r7, sp, #0
 801e7d4:	6078      	str	r0, [r7, #4]
 801e7d6:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = netif_igmp_data(ifp);
 801e7d8:	687b      	ldr	r3, [r7, #4]
 801e7da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e7dc:	60fb      	str	r3, [r7, #12]

  while (group != NULL) {
 801e7de:	e00a      	b.n	801e7f6 <igmp_lookfor_group+0x28>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 801e7e0:	68fb      	ldr	r3, [r7, #12]
 801e7e2:	685a      	ldr	r2, [r3, #4]
 801e7e4:	683b      	ldr	r3, [r7, #0]
 801e7e6:	681b      	ldr	r3, [r3, #0]
 801e7e8:	429a      	cmp	r2, r3
 801e7ea:	d101      	bne.n	801e7f0 <igmp_lookfor_group+0x22>
      return group;
 801e7ec:	68fb      	ldr	r3, [r7, #12]
 801e7ee:	e006      	b.n	801e7fe <igmp_lookfor_group+0x30>
    }
    group = group->next;
 801e7f0:	68fb      	ldr	r3, [r7, #12]
 801e7f2:	681b      	ldr	r3, [r3, #0]
 801e7f4:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 801e7f6:	68fb      	ldr	r3, [r7, #12]
 801e7f8:	2b00      	cmp	r3, #0
 801e7fa:	d1f1      	bne.n	801e7e0 <igmp_lookfor_group+0x12>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
 801e7fc:	2300      	movs	r3, #0
}
 801e7fe:	4618      	mov	r0, r3
 801e800:	3714      	adds	r7, #20
 801e802:	46bd      	mov	sp, r7
 801e804:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e808:	4770      	bx	lr
	...

0801e80c <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
 801e80c:	b580      	push	{r7, lr}
 801e80e:	b084      	sub	sp, #16
 801e810:	af00      	add	r7, sp, #0
 801e812:	6078      	str	r0, [r7, #4]
 801e814:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
 801e816:	687b      	ldr	r3, [r7, #4]
 801e818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e81a:	60fb      	str	r3, [r7, #12]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
 801e81c:	6839      	ldr	r1, [r7, #0]
 801e81e:	6878      	ldr	r0, [r7, #4]
 801e820:	f7ff ffd5 	bl	801e7ce <igmp_lookfor_group>
 801e824:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 801e826:	68bb      	ldr	r3, [r7, #8]
 801e828:	2b00      	cmp	r3, #0
 801e82a:	d001      	beq.n	801e830 <igmp_lookup_group+0x24>
    /* Group already exists. */
    return group;
 801e82c:	68bb      	ldr	r3, [r7, #8]
 801e82e:	e047      	b.n	801e8c0 <igmp_lookup_group+0xb4>
  }

  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 801e830:	200a      	movs	r0, #10
 801e832:	f7f4 fd45 	bl	80132c0 <memp_malloc>
 801e836:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 801e838:	68bb      	ldr	r3, [r7, #8]
 801e83a:	2b00      	cmp	r3, #0
 801e83c:	d03f      	beq.n	801e8be <igmp_lookup_group+0xb2>
    ip4_addr_set(&(group->group_address), addr);
 801e83e:	683b      	ldr	r3, [r7, #0]
 801e840:	2b00      	cmp	r3, #0
 801e842:	d002      	beq.n	801e84a <igmp_lookup_group+0x3e>
 801e844:	683b      	ldr	r3, [r7, #0]
 801e846:	681b      	ldr	r3, [r3, #0]
 801e848:	e000      	b.n	801e84c <igmp_lookup_group+0x40>
 801e84a:	2300      	movs	r3, #0
 801e84c:	68ba      	ldr	r2, [r7, #8]
 801e84e:	6053      	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
 801e850:	68bb      	ldr	r3, [r7, #8]
 801e852:	2200      	movs	r2, #0
 801e854:	815a      	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 801e856:	68bb      	ldr	r3, [r7, #8]
 801e858:	2200      	movs	r2, #0
 801e85a:	725a      	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
 801e85c:	68bb      	ldr	r3, [r7, #8]
 801e85e:	2200      	movs	r2, #0
 801e860:	721a      	strb	r2, [r3, #8]
    group->use                = 0;
 801e862:	68bb      	ldr	r3, [r7, #8]
 801e864:	2200      	movs	r2, #0
 801e866:	731a      	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */
    if (list_head == NULL) {
 801e868:	68fb      	ldr	r3, [r7, #12]
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	d113      	bne.n	801e896 <igmp_lookup_group+0x8a>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 801e86e:	683b      	ldr	r3, [r7, #0]
 801e870:	681a      	ldr	r2, [r3, #0]
 801e872:	4b15      	ldr	r3, [pc, #84]	@ (801e8c8 <igmp_lookup_group+0xbc>)
 801e874:	681b      	ldr	r3, [r3, #0]
 801e876:	429a      	cmp	r2, r3
 801e878:	d006      	beq.n	801e888 <igmp_lookup_group+0x7c>
 801e87a:	4b14      	ldr	r3, [pc, #80]	@ (801e8cc <igmp_lookup_group+0xc0>)
 801e87c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 801e880:	4913      	ldr	r1, [pc, #76]	@ (801e8d0 <igmp_lookup_group+0xc4>)
 801e882:	4814      	ldr	r0, [pc, #80]	@ (801e8d4 <igmp_lookup_group+0xc8>)
 801e884:	f002 fd96 	bl	80213b4 <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
 801e888:	68bb      	ldr	r3, [r7, #8]
 801e88a:	2200      	movs	r2, #0
 801e88c:	601a      	str	r2, [r3, #0]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
 801e88e:	687b      	ldr	r3, [r7, #4]
 801e890:	68ba      	ldr	r2, [r7, #8]
 801e892:	629a      	str	r2, [r3, #40]	@ 0x28
 801e894:	e013      	b.n	801e8be <igmp_lookup_group+0xb2>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 801e896:	683b      	ldr	r3, [r7, #0]
 801e898:	681a      	ldr	r2, [r3, #0]
 801e89a:	4b0b      	ldr	r3, [pc, #44]	@ (801e8c8 <igmp_lookup_group+0xbc>)
 801e89c:	681b      	ldr	r3, [r3, #0]
 801e89e:	429a      	cmp	r2, r3
 801e8a0:	d106      	bne.n	801e8b0 <igmp_lookup_group+0xa4>
 801e8a2:	4b0a      	ldr	r3, [pc, #40]	@ (801e8cc <igmp_lookup_group+0xc0>)
 801e8a4:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801e8a8:	490b      	ldr	r1, [pc, #44]	@ (801e8d8 <igmp_lookup_group+0xcc>)
 801e8aa:	480a      	ldr	r0, [pc, #40]	@ (801e8d4 <igmp_lookup_group+0xc8>)
 801e8ac:	f002 fd82 	bl	80213b4 <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
 801e8b0:	68fb      	ldr	r3, [r7, #12]
 801e8b2:	681a      	ldr	r2, [r3, #0]
 801e8b4:	68bb      	ldr	r3, [r7, #8]
 801e8b6:	601a      	str	r2, [r3, #0]
      list_head->next = group;
 801e8b8:	68fb      	ldr	r3, [r7, #12]
 801e8ba:	68ba      	ldr	r2, [r7, #8]
 801e8bc:	601a      	str	r2, [r3, #0]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group ? "" : "impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)ifp));

  return group;
 801e8be:	68bb      	ldr	r3, [r7, #8]
}
 801e8c0:	4618      	mov	r0, r3
 801e8c2:	3710      	adds	r7, #16
 801e8c4:	46bd      	mov	sp, r7
 801e8c6:	bd80      	pop	{r7, pc}
 801e8c8:	20004d70 	.word	0x20004d70
 801e8cc:	080260b0 	.word	0x080260b0
 801e8d0:	080260e8 	.word	0x080260e8
 801e8d4:	0802611c 	.word	0x0802611c
 801e8d8:	08026144 	.word	0x08026144

0801e8dc <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
 801e8dc:	b580      	push	{r7, lr}
 801e8de:	b088      	sub	sp, #32
 801e8e0:	af00      	add	r7, sp, #0
 801e8e2:	60f8      	str	r0, [r7, #12]
 801e8e4:	60b9      	str	r1, [r7, #8]
 801e8e6:	607a      	str	r2, [r7, #4]
  struct igmp_group *groupref;

  IGMP_STATS_INC(igmp.recv);

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
 801e8e8:	68fb      	ldr	r3, [r7, #12]
 801e8ea:	895b      	ldrh	r3, [r3, #10]
 801e8ec:	2b07      	cmp	r3, #7
 801e8ee:	d803      	bhi.n	801e8f8 <igmp_input+0x1c>
    pbuf_free(p);
 801e8f0:	68f8      	ldr	r0, [r7, #12]
 801e8f2:	f7f5 fc41 	bl	8014178 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
 801e8f6:	e086      	b.n	801ea06 <igmp_input+0x12a>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print_val(IGMP_DEBUG, ip4_current_header()->dest);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
 801e8f8:	68fb      	ldr	r3, [r7, #12]
 801e8fa:	685b      	ldr	r3, [r3, #4]
 801e8fc:	617b      	str	r3, [r7, #20]
  if (inet_chksum(igmp, p->len)) {
 801e8fe:	68fb      	ldr	r3, [r7, #12]
 801e900:	895b      	ldrh	r3, [r3, #10]
 801e902:	4619      	mov	r1, r3
 801e904:	6978      	ldr	r0, [r7, #20]
 801e906:	f7f4 f81e 	bl	8012946 <inet_chksum>
 801e90a:	4603      	mov	r3, r0
 801e90c:	2b00      	cmp	r3, #0
 801e90e:	d003      	beq.n	801e918 <igmp_input+0x3c>
    pbuf_free(p);
 801e910:	68f8      	ldr	r0, [r7, #12]
 801e912:	f7f5 fc31 	bl	8014178 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
 801e916:	e076      	b.n	801ea06 <igmp_input+0x12a>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 801e918:	6879      	ldr	r1, [r7, #4]
 801e91a:	68b8      	ldr	r0, [r7, #8]
 801e91c:	f7ff ff57 	bl	801e7ce <igmp_lookfor_group>
 801e920:	61f8      	str	r0, [r7, #28]

  /* If group can be found or create... */
  if (!group) {
 801e922:	69fb      	ldr	r3, [r7, #28]
 801e924:	2b00      	cmp	r3, #0
 801e926:	d103      	bne.n	801e930 <igmp_input+0x54>
    pbuf_free(p);
 801e928:	68f8      	ldr	r0, [r7, #12]
 801e92a:	f7f5 fc25 	bl	8014178 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
 801e92e:	e06a      	b.n	801ea06 <igmp_input+0x12a>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
 801e930:	697b      	ldr	r3, [r7, #20]
 801e932:	781b      	ldrb	r3, [r3, #0]
 801e934:	2b11      	cmp	r3, #17
 801e936:	d002      	beq.n	801e93e <igmp_input+0x62>
 801e938:	2b16      	cmp	r3, #22
 801e93a:	d04f      	beq.n	801e9dc <igmp_input+0x100>
      break;
    default:
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
                               igmp->igmp_msgtype, group->group_state, (void *)&group, (void *)inp));
      IGMP_STATS_INC(igmp.proterr);
      break;
 801e93c:	e05f      	b.n	801e9fe <igmp_input+0x122>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 801e93e:	687b      	ldr	r3, [r7, #4]
 801e940:	681a      	ldr	r2, [r3, #0]
 801e942:	4b32      	ldr	r3, [pc, #200]	@ (801ea0c <igmp_input+0x130>)
 801e944:	681b      	ldr	r3, [r3, #0]
 801e946:	429a      	cmp	r2, r3
 801e948:	d125      	bne.n	801e996 <igmp_input+0xba>
 801e94a:	697b      	ldr	r3, [r7, #20]
 801e94c:	3304      	adds	r3, #4
 801e94e:	2b00      	cmp	r3, #0
 801e950:	d003      	beq.n	801e95a <igmp_input+0x7e>
 801e952:	697b      	ldr	r3, [r7, #20]
 801e954:	685b      	ldr	r3, [r3, #4]
 801e956:	2b00      	cmp	r3, #0
 801e958:	d11d      	bne.n	801e996 <igmp_input+0xba>
        if (igmp->igmp_maxresp == 0) {
 801e95a:	697b      	ldr	r3, [r7, #20]
 801e95c:	785b      	ldrb	r3, [r3, #1]
 801e95e:	2b00      	cmp	r3, #0
 801e960:	d102      	bne.n	801e968 <igmp_input+0x8c>
          igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 801e962:	697b      	ldr	r3, [r7, #20]
 801e964:	220a      	movs	r2, #10
 801e966:	705a      	strb	r2, [r3, #1]
        groupref = netif_igmp_data(inp);
 801e968:	68bb      	ldr	r3, [r7, #8]
 801e96a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e96c:	61bb      	str	r3, [r7, #24]
        if (groupref != NULL) {
 801e96e:	69bb      	ldr	r3, [r7, #24]
 801e970:	2b00      	cmp	r3, #0
 801e972:	d00c      	beq.n	801e98e <igmp_input+0xb2>
          groupref = groupref->next;
 801e974:	69bb      	ldr	r3, [r7, #24]
 801e976:	681b      	ldr	r3, [r3, #0]
 801e978:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 801e97a:	e008      	b.n	801e98e <igmp_input+0xb2>
          igmp_delaying_member(groupref, igmp->igmp_maxresp);
 801e97c:	697b      	ldr	r3, [r7, #20]
 801e97e:	785b      	ldrb	r3, [r3, #1]
 801e980:	4619      	mov	r1, r3
 801e982:	69b8      	ldr	r0, [r7, #24]
 801e984:	f000 f92b 	bl	801ebde <igmp_delaying_member>
          groupref = groupref->next;
 801e988:	69bb      	ldr	r3, [r7, #24]
 801e98a:	681b      	ldr	r3, [r3, #0]
 801e98c:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 801e98e:	69bb      	ldr	r3, [r7, #24]
 801e990:	2b00      	cmp	r3, #0
 801e992:	d1f3      	bne.n	801e97c <igmp_input+0xa0>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 801e994:	e021      	b.n	801e9da <igmp_input+0xfe>
        if (!ip4_addr_isany(&igmp->igmp_group_address)) {
 801e996:	697b      	ldr	r3, [r7, #20]
 801e998:	3304      	adds	r3, #4
 801e99a:	2b00      	cmp	r3, #0
 801e99c:	d02c      	beq.n	801e9f8 <igmp_input+0x11c>
 801e99e:	697b      	ldr	r3, [r7, #20]
 801e9a0:	685b      	ldr	r3, [r3, #4]
 801e9a2:	2b00      	cmp	r3, #0
 801e9a4:	d028      	beq.n	801e9f8 <igmp_input+0x11c>
          if (ip4_addr_cmp(dest, &allsystems)) {
 801e9a6:	687b      	ldr	r3, [r7, #4]
 801e9a8:	681a      	ldr	r2, [r3, #0]
 801e9aa:	4b18      	ldr	r3, [pc, #96]	@ (801ea0c <igmp_input+0x130>)
 801e9ac:	681b      	ldr	r3, [r3, #0]
 801e9ae:	429a      	cmp	r2, r3
 801e9b0:	d109      	bne.n	801e9c6 <igmp_input+0xea>
            ip4_addr_copy(groupaddr, igmp->igmp_group_address);
 801e9b2:	697b      	ldr	r3, [r7, #20]
 801e9b4:	685b      	ldr	r3, [r3, #4]
 801e9b6:	613b      	str	r3, [r7, #16]
            group = igmp_lookfor_group(inp, &groupaddr);
 801e9b8:	f107 0310 	add.w	r3, r7, #16
 801e9bc:	4619      	mov	r1, r3
 801e9be:	68b8      	ldr	r0, [r7, #8]
 801e9c0:	f7ff ff05 	bl	801e7ce <igmp_lookfor_group>
 801e9c4:	61f8      	str	r0, [r7, #28]
          if (group != NULL) {
 801e9c6:	69fb      	ldr	r3, [r7, #28]
 801e9c8:	2b00      	cmp	r3, #0
 801e9ca:	d015      	beq.n	801e9f8 <igmp_input+0x11c>
            igmp_delaying_member(group, igmp->igmp_maxresp);
 801e9cc:	697b      	ldr	r3, [r7, #20]
 801e9ce:	785b      	ldrb	r3, [r3, #1]
 801e9d0:	4619      	mov	r1, r3
 801e9d2:	69f8      	ldr	r0, [r7, #28]
 801e9d4:	f000 f903 	bl	801ebde <igmp_delaying_member>
      break;
 801e9d8:	e00e      	b.n	801e9f8 <igmp_input+0x11c>
 801e9da:	e00d      	b.n	801e9f8 <igmp_input+0x11c>
      if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 801e9dc:	69fb      	ldr	r3, [r7, #28]
 801e9de:	7a5b      	ldrb	r3, [r3, #9]
 801e9e0:	2b01      	cmp	r3, #1
 801e9e2:	d10b      	bne.n	801e9fc <igmp_input+0x120>
        group->timer = 0; /* stopped */
 801e9e4:	69fb      	ldr	r3, [r7, #28]
 801e9e6:	2200      	movs	r2, #0
 801e9e8:	815a      	strh	r2, [r3, #10]
        group->group_state = IGMP_GROUP_IDLE_MEMBER;
 801e9ea:	69fb      	ldr	r3, [r7, #28]
 801e9ec:	2202      	movs	r2, #2
 801e9ee:	725a      	strb	r2, [r3, #9]
        group->last_reporter_flag = 0;
 801e9f0:	69fb      	ldr	r3, [r7, #28]
 801e9f2:	2200      	movs	r2, #0
 801e9f4:	721a      	strb	r2, [r3, #8]
      break;
 801e9f6:	e001      	b.n	801e9fc <igmp_input+0x120>
      break;
 801e9f8:	bf00      	nop
 801e9fa:	e000      	b.n	801e9fe <igmp_input+0x122>
      break;
 801e9fc:	bf00      	nop
  }

  pbuf_free(p);
 801e9fe:	68f8      	ldr	r0, [r7, #12]
 801ea00:	f7f5 fbba 	bl	8014178 <pbuf_free>
  return;
 801ea04:	bf00      	nop
}
 801ea06:	3720      	adds	r7, #32
 801ea08:	46bd      	mov	sp, r7
 801ea0a:	bd80      	pop	{r7, pc}
 801ea0c:	20004d70 	.word	0x20004d70

0801ea10 <igmp_joingroup_netif>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif, an err_t otherwise
 */
err_t
igmp_joingroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
 801ea10:	b580      	push	{r7, lr}
 801ea12:	b084      	sub	sp, #16
 801ea14:	af00      	add	r7, sp, #0
 801ea16:	6078      	str	r0, [r7, #4]
 801ea18:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 801ea1a:	683b      	ldr	r3, [r7, #0]
 801ea1c:	681b      	ldr	r3, [r3, #0]
 801ea1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ea22:	2be0      	cmp	r3, #224	@ 0xe0
 801ea24:	d009      	beq.n	801ea3a <igmp_joingroup_netif+0x2a>
 801ea26:	4b2f      	ldr	r3, [pc, #188]	@ (801eae4 <igmp_joingroup_netif+0xd4>)
 801ea28:	f44f 72f6 	mov.w	r2, #492	@ 0x1ec
 801ea2c:	492e      	ldr	r1, [pc, #184]	@ (801eae8 <igmp_joingroup_netif+0xd8>)
 801ea2e:	482f      	ldr	r0, [pc, #188]	@ (801eaec <igmp_joingroup_netif+0xdc>)
 801ea30:	f002 fcc0 	bl	80213b4 <iprintf>
 801ea34:	f06f 0305 	mvn.w	r3, #5
 801ea38:	e050      	b.n	801eadc <igmp_joingroup_netif+0xcc>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 801ea3a:	683b      	ldr	r3, [r7, #0]
 801ea3c:	681a      	ldr	r2, [r3, #0]
 801ea3e:	4b2c      	ldr	r3, [pc, #176]	@ (801eaf0 <igmp_joingroup_netif+0xe0>)
 801ea40:	681b      	ldr	r3, [r3, #0]
 801ea42:	429a      	cmp	r2, r3
 801ea44:	d109      	bne.n	801ea5a <igmp_joingroup_netif+0x4a>
 801ea46:	4b27      	ldr	r3, [pc, #156]	@ (801eae4 <igmp_joingroup_netif+0xd4>)
 801ea48:	f240 12ed 	movw	r2, #493	@ 0x1ed
 801ea4c:	4929      	ldr	r1, [pc, #164]	@ (801eaf4 <igmp_joingroup_netif+0xe4>)
 801ea4e:	4827      	ldr	r0, [pc, #156]	@ (801eaec <igmp_joingroup_netif+0xdc>)
 801ea50:	f002 fcb0 	bl	80213b4 <iprintf>
 801ea54:	f06f 0305 	mvn.w	r3, #5
 801ea58:	e040      	b.n	801eadc <igmp_joingroup_netif+0xcc>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
 801ea5a:	687b      	ldr	r3, [r7, #4]
 801ea5c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 801ea60:	f003 0320 	and.w	r3, r3, #32
 801ea64:	2b00      	cmp	r3, #0
 801ea66:	d109      	bne.n	801ea7c <igmp_joingroup_netif+0x6c>
 801ea68:	4b1e      	ldr	r3, [pc, #120]	@ (801eae4 <igmp_joingroup_netif+0xd4>)
 801ea6a:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 801ea6e:	4922      	ldr	r1, [pc, #136]	@ (801eaf8 <igmp_joingroup_netif+0xe8>)
 801ea70:	481e      	ldr	r0, [pc, #120]	@ (801eaec <igmp_joingroup_netif+0xdc>)
 801ea72:	f002 fc9f 	bl	80213b4 <iprintf>
 801ea76:	f06f 0305 	mvn.w	r3, #5
 801ea7a:	e02f      	b.n	801eadc <igmp_joingroup_netif+0xcc>

  /* find group or create a new one if not found */
  group = igmp_lookup_group(netif, groupaddr);
 801ea7c:	6839      	ldr	r1, [r7, #0]
 801ea7e:	6878      	ldr	r0, [r7, #4]
 801ea80:	f7ff fec4 	bl	801e80c <igmp_lookup_group>
 801ea84:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 801ea86:	68fb      	ldr	r3, [r7, #12]
 801ea88:	2b00      	cmp	r3, #0
 801ea8a:	d025      	beq.n	801ead8 <igmp_joingroup_netif+0xc8>
    /* This should create a new group, check the state to make sure */
    if (group->group_state != IGMP_GROUP_NON_MEMBER) {
 801ea8c:	68fb      	ldr	r3, [r7, #12]
 801ea8e:	7a5b      	ldrb	r3, [r3, #9]
 801ea90:	2b00      	cmp	r3, #0
 801ea92:	d119      	bne.n	801eac8 <igmp_joingroup_netif+0xb8>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: join to new group: "));
      ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
      LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

      /* If first use of the group, allow the group at the MAC level */
      if ((group->use == 0) && (netif->igmp_mac_filter != NULL)) {
 801ea94:	68fb      	ldr	r3, [r7, #12]
 801ea96:	7b1b      	ldrb	r3, [r3, #12]
 801ea98:	2b00      	cmp	r3, #0
 801ea9a:	d109      	bne.n	801eab0 <igmp_joingroup_netif+0xa0>
 801ea9c:	687b      	ldr	r3, [r7, #4]
 801ea9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801eaa0:	2b00      	cmp	r3, #0
 801eaa2:	d005      	beq.n	801eab0 <igmp_joingroup_netif+0xa0>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: igmp_mac_filter(ADD "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
 801eaa4:	687b      	ldr	r3, [r7, #4]
 801eaa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801eaa8:	2201      	movs	r2, #1
 801eaaa:	6839      	ldr	r1, [r7, #0]
 801eaac:	6878      	ldr	r0, [r7, #4]
 801eaae:	4798      	blx	r3
      }

      IGMP_STATS_INC(igmp.tx_join);
      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 801eab0:	2216      	movs	r2, #22
 801eab2:	68f9      	ldr	r1, [r7, #12]
 801eab4:	6878      	ldr	r0, [r7, #4]
 801eab6:	f000 f8d9 	bl	801ec6c <igmp_send>

      igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 801eaba:	2105      	movs	r1, #5
 801eabc:	68f8      	ldr	r0, [r7, #12]
 801eabe:	f000 f86b 	bl	801eb98 <igmp_start_timer>

      /* Need to work out where this timer comes from */
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 801eac2:	68fb      	ldr	r3, [r7, #12]
 801eac4:	2201      	movs	r2, #1
 801eac6:	725a      	strb	r2, [r3, #9]
    }
    /* Increment group use */
    group->use++;
 801eac8:	68fb      	ldr	r3, [r7, #12]
 801eaca:	7b1b      	ldrb	r3, [r3, #12]
 801eacc:	3301      	adds	r3, #1
 801eace:	b2da      	uxtb	r2, r3
 801ead0:	68fb      	ldr	r3, [r7, #12]
 801ead2:	731a      	strb	r2, [r3, #12]
    /* Join on this interface */
    return ERR_OK;
 801ead4:	2300      	movs	r3, #0
 801ead6:	e001      	b.n	801eadc <igmp_joingroup_netif+0xcc>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: Not enough memory to join to group\n"));
    return ERR_MEM;
 801ead8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 801eadc:	4618      	mov	r0, r3
 801eade:	3710      	adds	r7, #16
 801eae0:	46bd      	mov	sp, r7
 801eae2:	bd80      	pop	{r7, pc}
 801eae4:	080260b0 	.word	0x080260b0
 801eae8:	080261f4 	.word	0x080261f4
 801eaec:	0802611c 	.word	0x0802611c
 801eaf0:	20004d70 	.word	0x20004d70
 801eaf4:	08026230 	.word	0x08026230
 801eaf8:	0802626c 	.word	0x0802626c

0801eafc <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
 801eafc:	b580      	push	{r7, lr}
 801eafe:	b082      	sub	sp, #8
 801eb00:	af00      	add	r7, sp, #0
  struct netif *netif;

  NETIF_FOREACH(netif) {
 801eb02:	4b15      	ldr	r3, [pc, #84]	@ (801eb58 <igmp_tmr+0x5c>)
 801eb04:	681b      	ldr	r3, [r3, #0]
 801eb06:	607b      	str	r3, [r7, #4]
 801eb08:	e01e      	b.n	801eb48 <igmp_tmr+0x4c>
    struct igmp_group *group = netif_igmp_data(netif);
 801eb0a:	687b      	ldr	r3, [r7, #4]
 801eb0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eb0e:	603b      	str	r3, [r7, #0]

    while (group != NULL) {
 801eb10:	e014      	b.n	801eb3c <igmp_tmr+0x40>
      if (group->timer > 0) {
 801eb12:	683b      	ldr	r3, [r7, #0]
 801eb14:	895b      	ldrh	r3, [r3, #10]
 801eb16:	2b00      	cmp	r3, #0
 801eb18:	d00d      	beq.n	801eb36 <igmp_tmr+0x3a>
        group->timer--;
 801eb1a:	683b      	ldr	r3, [r7, #0]
 801eb1c:	895b      	ldrh	r3, [r3, #10]
 801eb1e:	3b01      	subs	r3, #1
 801eb20:	b29a      	uxth	r2, r3
 801eb22:	683b      	ldr	r3, [r7, #0]
 801eb24:	815a      	strh	r2, [r3, #10]
        if (group->timer == 0) {
 801eb26:	683b      	ldr	r3, [r7, #0]
 801eb28:	895b      	ldrh	r3, [r3, #10]
 801eb2a:	2b00      	cmp	r3, #0
 801eb2c:	d103      	bne.n	801eb36 <igmp_tmr+0x3a>
          igmp_timeout(netif, group);
 801eb2e:	6839      	ldr	r1, [r7, #0]
 801eb30:	6878      	ldr	r0, [r7, #4]
 801eb32:	f000 f813 	bl	801eb5c <igmp_timeout>
        }
      }
      group = group->next;
 801eb36:	683b      	ldr	r3, [r7, #0]
 801eb38:	681b      	ldr	r3, [r3, #0]
 801eb3a:	603b      	str	r3, [r7, #0]
    while (group != NULL) {
 801eb3c:	683b      	ldr	r3, [r7, #0]
 801eb3e:	2b00      	cmp	r3, #0
 801eb40:	d1e7      	bne.n	801eb12 <igmp_tmr+0x16>
  NETIF_FOREACH(netif) {
 801eb42:	687b      	ldr	r3, [r7, #4]
 801eb44:	681b      	ldr	r3, [r3, #0]
 801eb46:	607b      	str	r3, [r7, #4]
 801eb48:	687b      	ldr	r3, [r7, #4]
 801eb4a:	2b00      	cmp	r3, #0
 801eb4c:	d1dd      	bne.n	801eb0a <igmp_tmr+0xe>
    }
  }
}
 801eb4e:	bf00      	nop
 801eb50:	bf00      	nop
 801eb52:	3708      	adds	r7, #8
 801eb54:	46bd      	mov	sp, r7
 801eb56:	bd80      	pop	{r7, pc}
 801eb58:	20004bdc 	.word	0x20004bdc

0801eb5c <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
 801eb5c:	b580      	push	{r7, lr}
 801eb5e:	b082      	sub	sp, #8
 801eb60:	af00      	add	r7, sp, #0
 801eb62:	6078      	str	r0, [r7, #4]
 801eb64:	6039      	str	r1, [r7, #0]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 801eb66:	683b      	ldr	r3, [r7, #0]
 801eb68:	7a5b      	ldrb	r3, [r3, #9]
 801eb6a:	2b01      	cmp	r3, #1
 801eb6c:	d10d      	bne.n	801eb8a <igmp_timeout+0x2e>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
 801eb6e:	683b      	ldr	r3, [r7, #0]
 801eb70:	685a      	ldr	r2, [r3, #4]
 801eb72:	4b08      	ldr	r3, [pc, #32]	@ (801eb94 <igmp_timeout+0x38>)
 801eb74:	681b      	ldr	r3, [r3, #0]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 801eb76:	429a      	cmp	r2, r3
 801eb78:	d007      	beq.n	801eb8a <igmp_timeout+0x2e>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print_val(IGMP_DEBUG, group->group_address);
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 801eb7a:	683b      	ldr	r3, [r7, #0]
 801eb7c:	2202      	movs	r2, #2
 801eb7e:	725a      	strb	r2, [r3, #9]

    IGMP_STATS_INC(igmp.tx_report);
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 801eb80:	2216      	movs	r2, #22
 801eb82:	6839      	ldr	r1, [r7, #0]
 801eb84:	6878      	ldr	r0, [r7, #4]
 801eb86:	f000 f871 	bl	801ec6c <igmp_send>
  }
}
 801eb8a:	bf00      	nop
 801eb8c:	3708      	adds	r7, #8
 801eb8e:	46bd      	mov	sp, r7
 801eb90:	bd80      	pop	{r7, pc}
 801eb92:	bf00      	nop
 801eb94:	20004d70 	.word	0x20004d70

0801eb98 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 801eb98:	b580      	push	{r7, lr}
 801eb9a:	b082      	sub	sp, #8
 801eb9c:	af00      	add	r7, sp, #0
 801eb9e:	6078      	str	r0, [r7, #4]
 801eba0:	460b      	mov	r3, r1
 801eba2:	70fb      	strb	r3, [r7, #3]
#ifdef LWIP_RAND
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 801eba4:	78fb      	ldrb	r3, [r7, #3]
 801eba6:	2b02      	cmp	r3, #2
 801eba8:	d90b      	bls.n	801ebc2 <igmp_start_timer+0x2a>
 801ebaa:	f002 fb03 	bl	80211b4 <rand>
 801ebae:	4603      	mov	r3, r0
 801ebb0:	461a      	mov	r2, r3
 801ebb2:	78fb      	ldrb	r3, [r7, #3]
 801ebb4:	fbb2 f1f3 	udiv	r1, r2, r3
 801ebb8:	fb01 f303 	mul.w	r3, r1, r3
 801ebbc:	1ad3      	subs	r3, r2, r3
 801ebbe:	b29a      	uxth	r2, r3
 801ebc0:	e000      	b.n	801ebc4 <igmp_start_timer+0x2c>
 801ebc2:	2201      	movs	r2, #1
 801ebc4:	687b      	ldr	r3, [r7, #4]
 801ebc6:	815a      	strh	r2, [r3, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
 801ebc8:	687b      	ldr	r3, [r7, #4]
 801ebca:	895b      	ldrh	r3, [r3, #10]
 801ebcc:	2b00      	cmp	r3, #0
 801ebce:	d102      	bne.n	801ebd6 <igmp_start_timer+0x3e>
    group->timer = 1;
 801ebd0:	687b      	ldr	r3, [r7, #4]
 801ebd2:	2201      	movs	r2, #1
 801ebd4:	815a      	strh	r2, [r3, #10]
  }
}
 801ebd6:	bf00      	nop
 801ebd8:	3708      	adds	r7, #8
 801ebda:	46bd      	mov	sp, r7
 801ebdc:	bd80      	pop	{r7, pc}

0801ebde <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 801ebde:	b580      	push	{r7, lr}
 801ebe0:	b082      	sub	sp, #8
 801ebe2:	af00      	add	r7, sp, #0
 801ebe4:	6078      	str	r0, [r7, #4]
 801ebe6:	460b      	mov	r3, r1
 801ebe8:	70fb      	strb	r3, [r7, #3]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 801ebea:	687b      	ldr	r3, [r7, #4]
 801ebec:	7a5b      	ldrb	r3, [r3, #9]
 801ebee:	2b02      	cmp	r3, #2
 801ebf0:	d00d      	beq.n	801ec0e <igmp_delaying_member+0x30>
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 801ebf2:	687b      	ldr	r3, [r7, #4]
 801ebf4:	7a5b      	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 801ebf6:	2b01      	cmp	r3, #1
 801ebf8:	d111      	bne.n	801ec1e <igmp_delaying_member+0x40>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 801ebfa:	687b      	ldr	r3, [r7, #4]
 801ebfc:	895b      	ldrh	r3, [r3, #10]
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 801ebfe:	2b00      	cmp	r3, #0
 801ec00:	d005      	beq.n	801ec0e <igmp_delaying_member+0x30>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 801ec02:	78fb      	ldrb	r3, [r7, #3]
 801ec04:	b29a      	uxth	r2, r3
 801ec06:	687b      	ldr	r3, [r7, #4]
 801ec08:	895b      	ldrh	r3, [r3, #10]
 801ec0a:	429a      	cmp	r2, r3
 801ec0c:	d207      	bcs.n	801ec1e <igmp_delaying_member+0x40>
    igmp_start_timer(group, maxresp);
 801ec0e:	78fb      	ldrb	r3, [r7, #3]
 801ec10:	4619      	mov	r1, r3
 801ec12:	6878      	ldr	r0, [r7, #4]
 801ec14:	f7ff ffc0 	bl	801eb98 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 801ec18:	687b      	ldr	r3, [r7, #4]
 801ec1a:	2201      	movs	r2, #1
 801ec1c:	725a      	strb	r2, [r3, #9]
  }
}
 801ec1e:	bf00      	nop
 801ec20:	3708      	adds	r7, #8
 801ec22:	46bd      	mov	sp, r7
 801ec24:	bd80      	pop	{r7, pc}

0801ec26 <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
 801ec26:	b580      	push	{r7, lr}
 801ec28:	b08c      	sub	sp, #48	@ 0x30
 801ec2a:	af06      	add	r7, sp, #24
 801ec2c:	60f8      	str	r0, [r7, #12]
 801ec2e:	60b9      	str	r1, [r7, #8]
 801ec30:	607a      	str	r2, [r7, #4]
 801ec32:	603b      	str	r3, [r7, #0]
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 801ec34:	f240 4394 	movw	r3, #1172	@ 0x494
 801ec38:	82bb      	strh	r3, [r7, #20]
  ra[1] = 0x0000; /* Router shall examine packet */
 801ec3a:	2300      	movs	r3, #0
 801ec3c:	82fb      	strh	r3, [r7, #22]
  IGMP_STATS_INC(igmp.xmit);
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 801ec3e:	2304      	movs	r3, #4
 801ec40:	9304      	str	r3, [sp, #16]
 801ec42:	f107 0314 	add.w	r3, r7, #20
 801ec46:	9303      	str	r3, [sp, #12]
 801ec48:	683b      	ldr	r3, [r7, #0]
 801ec4a:	9302      	str	r3, [sp, #8]
 801ec4c:	2302      	movs	r3, #2
 801ec4e:	9301      	str	r3, [sp, #4]
 801ec50:	2300      	movs	r3, #0
 801ec52:	9300      	str	r3, [sp, #0]
 801ec54:	2301      	movs	r3, #1
 801ec56:	687a      	ldr	r2, [r7, #4]
 801ec58:	68b9      	ldr	r1, [r7, #8]
 801ec5a:	68f8      	ldr	r0, [r7, #12]
 801ec5c:	f000 fab9 	bl	801f1d2 <ip4_output_if_opt>
 801ec60:	4603      	mov	r3, r0
}
 801ec62:	4618      	mov	r0, r3
 801ec64:	3718      	adds	r7, #24
 801ec66:	46bd      	mov	sp, r7
 801ec68:	bd80      	pop	{r7, pc}
	...

0801ec6c <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
 801ec6c:	b580      	push	{r7, lr}
 801ec6e:	b088      	sub	sp, #32
 801ec70:	af00      	add	r7, sp, #0
 801ec72:	60f8      	str	r0, [r7, #12]
 801ec74:	60b9      	str	r1, [r7, #8]
 801ec76:	4613      	mov	r3, r2
 801ec78:	71fb      	strb	r3, [r7, #7]
  struct pbuf     *p    = NULL;
 801ec7a:	2300      	movs	r3, #0
 801ec7c:	61bb      	str	r3, [r7, #24]
  struct igmp_msg *igmp = NULL;
 801ec7e:	2300      	movs	r3, #0
 801ec80:	617b      	str	r3, [r7, #20]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 801ec82:	4b2f      	ldr	r3, [pc, #188]	@ (801ed40 <igmp_send+0xd4>)
 801ec84:	681b      	ldr	r3, [r3, #0]
 801ec86:	613b      	str	r3, [r7, #16]
  ip4_addr_t  *dest = NULL;
 801ec88:	2300      	movs	r3, #0
 801ec8a:	61fb      	str	r3, [r7, #28]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 801ec8c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ec90:	2108      	movs	r1, #8
 801ec92:	2036      	movs	r0, #54	@ 0x36
 801ec94:	f7f4 ff8c 	bl	8013bb0 <pbuf_alloc>
 801ec98:	61b8      	str	r0, [r7, #24]

  if (p) {
 801ec9a:	69bb      	ldr	r3, [r7, #24]
 801ec9c:	2b00      	cmp	r3, #0
 801ec9e:	d04b      	beq.n	801ed38 <igmp_send+0xcc>
    igmp = (struct igmp_msg *)p->payload;
 801eca0:	69bb      	ldr	r3, [r7, #24]
 801eca2:	685b      	ldr	r3, [r3, #4]
 801eca4:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 801eca6:	69bb      	ldr	r3, [r7, #24]
 801eca8:	895b      	ldrh	r3, [r3, #10]
 801ecaa:	2b07      	cmp	r3, #7
 801ecac:	d806      	bhi.n	801ecbc <igmp_send+0x50>
 801ecae:	4b25      	ldr	r3, [pc, #148]	@ (801ed44 <igmp_send+0xd8>)
 801ecb0:	f240 3202 	movw	r2, #770	@ 0x302
 801ecb4:	4924      	ldr	r1, [pc, #144]	@ (801ed48 <igmp_send+0xdc>)
 801ecb6:	4825      	ldr	r0, [pc, #148]	@ (801ed4c <igmp_send+0xe0>)
 801ecb8:	f002 fb7c 	bl	80213b4 <iprintf>
                (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
 801ecbc:	68fb      	ldr	r3, [r7, #12]
 801ecbe:	3304      	adds	r3, #4
 801ecc0:	681b      	ldr	r3, [r3, #0]
 801ecc2:	613b      	str	r3, [r7, #16]

    if (type == IGMP_V2_MEMB_REPORT) {
 801ecc4:	79fb      	ldrb	r3, [r7, #7]
 801ecc6:	2b16      	cmp	r3, #22
 801ecc8:	d10a      	bne.n	801ece0 <igmp_send+0x74>
      dest = &(group->group_address);
 801ecca:	68bb      	ldr	r3, [r7, #8]
 801eccc:	3304      	adds	r3, #4
 801ecce:	61fb      	str	r3, [r7, #28]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 801ecd0:	68bb      	ldr	r3, [r7, #8]
 801ecd2:	685a      	ldr	r2, [r3, #4]
 801ecd4:	697b      	ldr	r3, [r7, #20]
 801ecd6:	605a      	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 801ecd8:	68bb      	ldr	r3, [r7, #8]
 801ecda:	2201      	movs	r2, #1
 801ecdc:	721a      	strb	r2, [r3, #8]
 801ecde:	e008      	b.n	801ecf2 <igmp_send+0x86>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 801ece0:	79fb      	ldrb	r3, [r7, #7]
 801ece2:	2b17      	cmp	r3, #23
 801ece4:	d105      	bne.n	801ecf2 <igmp_send+0x86>
        dest = &allrouters;
 801ece6:	4b1a      	ldr	r3, [pc, #104]	@ (801ed50 <igmp_send+0xe4>)
 801ece8:	61fb      	str	r3, [r7, #28]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 801ecea:	68bb      	ldr	r3, [r7, #8]
 801ecec:	685a      	ldr	r2, [r3, #4]
 801ecee:	697b      	ldr	r3, [r7, #20]
 801ecf0:	605a      	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 801ecf2:	79fb      	ldrb	r3, [r7, #7]
 801ecf4:	2b16      	cmp	r3, #22
 801ecf6:	d002      	beq.n	801ecfe <igmp_send+0x92>
 801ecf8:	79fb      	ldrb	r3, [r7, #7]
 801ecfa:	2b17      	cmp	r3, #23
 801ecfc:	d119      	bne.n	801ed32 <igmp_send+0xc6>
      igmp->igmp_msgtype  = type;
 801ecfe:	697b      	ldr	r3, [r7, #20]
 801ed00:	79fa      	ldrb	r2, [r7, #7]
 801ed02:	701a      	strb	r2, [r3, #0]
      igmp->igmp_maxresp  = 0;
 801ed04:	697b      	ldr	r3, [r7, #20]
 801ed06:	2200      	movs	r2, #0
 801ed08:	705a      	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
 801ed0a:	697b      	ldr	r3, [r7, #20]
 801ed0c:	2200      	movs	r2, #0
 801ed0e:	709a      	strb	r2, [r3, #2]
 801ed10:	2200      	movs	r2, #0
 801ed12:	70da      	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 801ed14:	2108      	movs	r1, #8
 801ed16:	6978      	ldr	r0, [r7, #20]
 801ed18:	f7f3 fe15 	bl	8012946 <inet_chksum>
 801ed1c:	4603      	mov	r3, r0
 801ed1e:	461a      	mov	r2, r3
 801ed20:	697b      	ldr	r3, [r7, #20]
 801ed22:	805a      	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
 801ed24:	f107 0110 	add.w	r1, r7, #16
 801ed28:	68fb      	ldr	r3, [r7, #12]
 801ed2a:	69fa      	ldr	r2, [r7, #28]
 801ed2c:	69b8      	ldr	r0, [r7, #24]
 801ed2e:	f7ff ff7a 	bl	801ec26 <igmp_ip_output_if>
    }

    pbuf_free(p);
 801ed32:	69b8      	ldr	r0, [r7, #24]
 801ed34:	f7f5 fa20 	bl	8014178 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 801ed38:	bf00      	nop
 801ed3a:	3720      	adds	r7, #32
 801ed3c:	46bd      	mov	sp, r7
 801ed3e:	bd80      	pop	{r7, pc}
 801ed40:	08027754 	.word	0x08027754
 801ed44:	080260b0 	.word	0x080260b0
 801ed48:	080263cc 	.word	0x080263cc
 801ed4c:	0802611c 	.word	0x0802611c
 801ed50:	20004d74 	.word	0x20004d74

0801ed54 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801ed54:	b480      	push	{r7}
 801ed56:	b085      	sub	sp, #20
 801ed58:	af00      	add	r7, sp, #0
 801ed5a:	6078      	str	r0, [r7, #4]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 801ed5c:	687b      	ldr	r3, [r7, #4]
 801ed5e:	681b      	ldr	r3, [r3, #0]
 801ed60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ed64:	2be0      	cmp	r3, #224	@ 0xe0
 801ed66:	d106      	bne.n	801ed76 <ip4_route+0x22>
 801ed68:	4b36      	ldr	r3, [pc, #216]	@ (801ee44 <ip4_route+0xf0>)
 801ed6a:	681b      	ldr	r3, [r3, #0]
 801ed6c:	2b00      	cmp	r3, #0
 801ed6e:	d002      	beq.n	801ed76 <ip4_route+0x22>
    return ip4_default_multicast_netif;
 801ed70:	4b34      	ldr	r3, [pc, #208]	@ (801ee44 <ip4_route+0xf0>)
 801ed72:	681b      	ldr	r3, [r3, #0]
 801ed74:	e060      	b.n	801ee38 <ip4_route+0xe4>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801ed76:	4b34      	ldr	r3, [pc, #208]	@ (801ee48 <ip4_route+0xf4>)
 801ed78:	681b      	ldr	r3, [r3, #0]
 801ed7a:	60fb      	str	r3, [r7, #12]
 801ed7c:	e036      	b.n	801edec <ip4_route+0x98>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801ed7e:	68fb      	ldr	r3, [r7, #12]
 801ed80:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 801ed84:	f003 0301 	and.w	r3, r3, #1
 801ed88:	b2db      	uxtb	r3, r3
 801ed8a:	2b00      	cmp	r3, #0
 801ed8c:	d02b      	beq.n	801ede6 <ip4_route+0x92>
 801ed8e:	68fb      	ldr	r3, [r7, #12]
 801ed90:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 801ed94:	089b      	lsrs	r3, r3, #2
 801ed96:	f003 0301 	and.w	r3, r3, #1
 801ed9a:	b2db      	uxtb	r3, r3
 801ed9c:	2b00      	cmp	r3, #0
 801ed9e:	d022      	beq.n	801ede6 <ip4_route+0x92>
 801eda0:	68fb      	ldr	r3, [r7, #12]
 801eda2:	3304      	adds	r3, #4
 801eda4:	681b      	ldr	r3, [r3, #0]
 801eda6:	2b00      	cmp	r3, #0
 801eda8:	d01d      	beq.n	801ede6 <ip4_route+0x92>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801edaa:	687b      	ldr	r3, [r7, #4]
 801edac:	681a      	ldr	r2, [r3, #0]
 801edae:	68fb      	ldr	r3, [r7, #12]
 801edb0:	3304      	adds	r3, #4
 801edb2:	681b      	ldr	r3, [r3, #0]
 801edb4:	405a      	eors	r2, r3
 801edb6:	68fb      	ldr	r3, [r7, #12]
 801edb8:	3308      	adds	r3, #8
 801edba:	681b      	ldr	r3, [r3, #0]
 801edbc:	4013      	ands	r3, r2
 801edbe:	2b00      	cmp	r3, #0
 801edc0:	d101      	bne.n	801edc6 <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 801edc2:	68fb      	ldr	r3, [r7, #12]
 801edc4:	e038      	b.n	801ee38 <ip4_route+0xe4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801edc6:	68fb      	ldr	r3, [r7, #12]
 801edc8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 801edcc:	f003 0302 	and.w	r3, r3, #2
 801edd0:	2b00      	cmp	r3, #0
 801edd2:	d108      	bne.n	801ede6 <ip4_route+0x92>
 801edd4:	687b      	ldr	r3, [r7, #4]
 801edd6:	681a      	ldr	r2, [r3, #0]
 801edd8:	68fb      	ldr	r3, [r7, #12]
 801edda:	330c      	adds	r3, #12
 801eddc:	681b      	ldr	r3, [r3, #0]
 801edde:	429a      	cmp	r2, r3
 801ede0:	d101      	bne.n	801ede6 <ip4_route+0x92>
        /* return netif on which to forward IP packet */
        return netif;
 801ede2:	68fb      	ldr	r3, [r7, #12]
 801ede4:	e028      	b.n	801ee38 <ip4_route+0xe4>
  NETIF_FOREACH(netif) {
 801ede6:	68fb      	ldr	r3, [r7, #12]
 801ede8:	681b      	ldr	r3, [r3, #0]
 801edea:	60fb      	str	r3, [r7, #12]
 801edec:	68fb      	ldr	r3, [r7, #12]
 801edee:	2b00      	cmp	r3, #0
 801edf0:	d1c5      	bne.n	801ed7e <ip4_route+0x2a>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801edf2:	4b16      	ldr	r3, [pc, #88]	@ (801ee4c <ip4_route+0xf8>)
 801edf4:	681b      	ldr	r3, [r3, #0]
 801edf6:	2b00      	cmp	r3, #0
 801edf8:	d01a      	beq.n	801ee30 <ip4_route+0xdc>
 801edfa:	4b14      	ldr	r3, [pc, #80]	@ (801ee4c <ip4_route+0xf8>)
 801edfc:	681b      	ldr	r3, [r3, #0]
 801edfe:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 801ee02:	f003 0301 	and.w	r3, r3, #1
 801ee06:	2b00      	cmp	r3, #0
 801ee08:	d012      	beq.n	801ee30 <ip4_route+0xdc>
 801ee0a:	4b10      	ldr	r3, [pc, #64]	@ (801ee4c <ip4_route+0xf8>)
 801ee0c:	681b      	ldr	r3, [r3, #0]
 801ee0e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 801ee12:	f003 0304 	and.w	r3, r3, #4
 801ee16:	2b00      	cmp	r3, #0
 801ee18:	d00a      	beq.n	801ee30 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ee1a:	4b0c      	ldr	r3, [pc, #48]	@ (801ee4c <ip4_route+0xf8>)
 801ee1c:	681b      	ldr	r3, [r3, #0]
 801ee1e:	3304      	adds	r3, #4
 801ee20:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ee22:	2b00      	cmp	r3, #0
 801ee24:	d004      	beq.n	801ee30 <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ee26:	687b      	ldr	r3, [r7, #4]
 801ee28:	681b      	ldr	r3, [r3, #0]
 801ee2a:	b2db      	uxtb	r3, r3
 801ee2c:	2b7f      	cmp	r3, #127	@ 0x7f
 801ee2e:	d101      	bne.n	801ee34 <ip4_route+0xe0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801ee30:	2300      	movs	r3, #0
 801ee32:	e001      	b.n	801ee38 <ip4_route+0xe4>
  }

  return netif_default;
 801ee34:	4b05      	ldr	r3, [pc, #20]	@ (801ee4c <ip4_route+0xf8>)
 801ee36:	681b      	ldr	r3, [r3, #0]
}
 801ee38:	4618      	mov	r0, r3
 801ee3a:	3714      	adds	r7, #20
 801ee3c:	46bd      	mov	sp, r7
 801ee3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee42:	4770      	bx	lr
 801ee44:	20004d7c 	.word	0x20004d7c
 801ee48:	20004bdc 	.word	0x20004bdc
 801ee4c:	20004be0 	.word	0x20004be0

0801ee50 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801ee50:	b580      	push	{r7, lr}
 801ee52:	b082      	sub	sp, #8
 801ee54:	af00      	add	r7, sp, #0
 801ee56:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801ee58:	687b      	ldr	r3, [r7, #4]
 801ee5a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 801ee5e:	f003 0301 	and.w	r3, r3, #1
 801ee62:	b2db      	uxtb	r3, r3
 801ee64:	2b00      	cmp	r3, #0
 801ee66:	d016      	beq.n	801ee96 <ip4_input_accept+0x46>
 801ee68:	687b      	ldr	r3, [r7, #4]
 801ee6a:	3304      	adds	r3, #4
 801ee6c:	681b      	ldr	r3, [r3, #0]
 801ee6e:	2b00      	cmp	r3, #0
 801ee70:	d011      	beq.n	801ee96 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ee72:	4b0b      	ldr	r3, [pc, #44]	@ (801eea0 <ip4_input_accept+0x50>)
 801ee74:	695a      	ldr	r2, [r3, #20]
 801ee76:	687b      	ldr	r3, [r7, #4]
 801ee78:	3304      	adds	r3, #4
 801ee7a:	681b      	ldr	r3, [r3, #0]
 801ee7c:	429a      	cmp	r2, r3
 801ee7e:	d008      	beq.n	801ee92 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801ee80:	4b07      	ldr	r3, [pc, #28]	@ (801eea0 <ip4_input_accept+0x50>)
 801ee82:	695b      	ldr	r3, [r3, #20]
 801ee84:	6879      	ldr	r1, [r7, #4]
 801ee86:	4618      	mov	r0, r3
 801ee88:	f000 fad4 	bl	801f434 <ip4_addr_isbroadcast_u32>
 801ee8c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ee8e:	2b00      	cmp	r3, #0
 801ee90:	d001      	beq.n	801ee96 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801ee92:	2301      	movs	r3, #1
 801ee94:	e000      	b.n	801ee98 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801ee96:	2300      	movs	r3, #0
}
 801ee98:	4618      	mov	r0, r3
 801ee9a:	3708      	adds	r7, #8
 801ee9c:	46bd      	mov	sp, r7
 801ee9e:	bd80      	pop	{r7, pc}
 801eea0:	20004bb4 	.word	0x20004bb4

0801eea4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801eea4:	b580      	push	{r7, lr}
 801eea6:	b088      	sub	sp, #32
 801eea8:	af00      	add	r7, sp, #0
 801eeaa:	6078      	str	r0, [r7, #4]
 801eeac:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801eeae:	2301      	movs	r3, #1
 801eeb0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801eeb2:	687b      	ldr	r3, [r7, #4]
 801eeb4:	685b      	ldr	r3, [r3, #4]
 801eeb6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801eeb8:	69fb      	ldr	r3, [r7, #28]
 801eeba:	781b      	ldrb	r3, [r3, #0]
 801eebc:	091b      	lsrs	r3, r3, #4
 801eebe:	b2db      	uxtb	r3, r3
 801eec0:	2b04      	cmp	r3, #4
 801eec2:	d004      	beq.n	801eece <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801eec4:	6878      	ldr	r0, [r7, #4]
 801eec6:	f7f5 f957 	bl	8014178 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801eeca:	2300      	movs	r3, #0
 801eecc:	e157      	b.n	801f17e <ip4_input+0x2da>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801eece:	69fb      	ldr	r3, [r7, #28]
 801eed0:	781b      	ldrb	r3, [r3, #0]
 801eed2:	f003 030f 	and.w	r3, r3, #15
 801eed6:	b2db      	uxtb	r3, r3
 801eed8:	009b      	lsls	r3, r3, #2
 801eeda:	b2db      	uxtb	r3, r3
 801eedc:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801eede:	69fb      	ldr	r3, [r7, #28]
 801eee0:	885b      	ldrh	r3, [r3, #2]
 801eee2:	b29b      	uxth	r3, r3
 801eee4:	4618      	mov	r0, r3
 801eee6:	f7f3 fb89 	bl	80125fc <lwip_htons>
 801eeea:	4603      	mov	r3, r0
 801eeec:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801eeee:	687b      	ldr	r3, [r7, #4]
 801eef0:	891b      	ldrh	r3, [r3, #8]
 801eef2:	8a3a      	ldrh	r2, [r7, #16]
 801eef4:	429a      	cmp	r2, r3
 801eef6:	d204      	bcs.n	801ef02 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801eef8:	8a3b      	ldrh	r3, [r7, #16]
 801eefa:	4619      	mov	r1, r3
 801eefc:	6878      	ldr	r0, [r7, #4]
 801eefe:	f7f4 ffb5 	bl	8013e6c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801ef02:	687b      	ldr	r3, [r7, #4]
 801ef04:	895b      	ldrh	r3, [r3, #10]
 801ef06:	8a7a      	ldrh	r2, [r7, #18]
 801ef08:	429a      	cmp	r2, r3
 801ef0a:	d807      	bhi.n	801ef1c <ip4_input+0x78>
 801ef0c:	687b      	ldr	r3, [r7, #4]
 801ef0e:	891b      	ldrh	r3, [r3, #8]
 801ef10:	8a3a      	ldrh	r2, [r7, #16]
 801ef12:	429a      	cmp	r2, r3
 801ef14:	d802      	bhi.n	801ef1c <ip4_input+0x78>
 801ef16:	8a7b      	ldrh	r3, [r7, #18]
 801ef18:	2b13      	cmp	r3, #19
 801ef1a:	d804      	bhi.n	801ef26 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801ef1c:	6878      	ldr	r0, [r7, #4]
 801ef1e:	f7f5 f92b 	bl	8014178 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801ef22:	2300      	movs	r3, #0
 801ef24:	e12b      	b.n	801f17e <ip4_input+0x2da>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801ef26:	69fb      	ldr	r3, [r7, #28]
 801ef28:	691b      	ldr	r3, [r3, #16]
 801ef2a:	4a97      	ldr	r2, [pc, #604]	@ (801f188 <ip4_input+0x2e4>)
 801ef2c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801ef2e:	69fb      	ldr	r3, [r7, #28]
 801ef30:	68db      	ldr	r3, [r3, #12]
 801ef32:	4a95      	ldr	r2, [pc, #596]	@ (801f188 <ip4_input+0x2e4>)
 801ef34:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ef36:	4b94      	ldr	r3, [pc, #592]	@ (801f188 <ip4_input+0x2e4>)
 801ef38:	695b      	ldr	r3, [r3, #20]
 801ef3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ef3e:	2be0      	cmp	r3, #224	@ 0xe0
 801ef40:	d120      	bne.n	801ef84 <ip4_input+0xe0>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 801ef42:	683b      	ldr	r3, [r7, #0]
 801ef44:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 801ef48:	f003 0320 	and.w	r3, r3, #32
 801ef4c:	2b00      	cmp	r3, #0
 801ef4e:	d016      	beq.n	801ef7e <ip4_input+0xda>
 801ef50:	498e      	ldr	r1, [pc, #568]	@ (801f18c <ip4_input+0x2e8>)
 801ef52:	6838      	ldr	r0, [r7, #0]
 801ef54:	f7ff fc3b 	bl	801e7ce <igmp_lookfor_group>
 801ef58:	4603      	mov	r3, r0
 801ef5a:	2b00      	cmp	r3, #0
 801ef5c:	d00f      	beq.n	801ef7e <ip4_input+0xda>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
 801ef5e:	4b8c      	ldr	r3, [pc, #560]	@ (801f190 <ip4_input+0x2ec>)
 801ef60:	60bb      	str	r3, [r7, #8]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 801ef62:	4b89      	ldr	r3, [pc, #548]	@ (801f188 <ip4_input+0x2e4>)
 801ef64:	695a      	ldr	r2, [r3, #20]
 801ef66:	68bb      	ldr	r3, [r7, #8]
 801ef68:	429a      	cmp	r2, r3
 801ef6a:	d105      	bne.n	801ef78 <ip4_input+0xd4>
          ip4_addr_isany(ip4_current_src_addr())) {
 801ef6c:	4b86      	ldr	r3, [pc, #536]	@ (801f188 <ip4_input+0x2e4>)
 801ef6e:	691b      	ldr	r3, [r3, #16]
 801ef70:	2b00      	cmp	r3, #0
 801ef72:	d101      	bne.n	801ef78 <ip4_input+0xd4>
        check_ip_src = 0;
 801ef74:	2300      	movs	r3, #0
 801ef76:	617b      	str	r3, [r7, #20]
      }
      netif = inp;
 801ef78:	683b      	ldr	r3, [r7, #0]
 801ef7a:	61bb      	str	r3, [r7, #24]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 801ef7c:	e02a      	b.n	801efd4 <ip4_input+0x130>
    } else {
      netif = NULL;
 801ef7e:	2300      	movs	r3, #0
 801ef80:	61bb      	str	r3, [r7, #24]
 801ef82:	e027      	b.n	801efd4 <ip4_input+0x130>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801ef84:	6838      	ldr	r0, [r7, #0]
 801ef86:	f7ff ff63 	bl	801ee50 <ip4_input_accept>
 801ef8a:	4603      	mov	r3, r0
 801ef8c:	2b00      	cmp	r3, #0
 801ef8e:	d002      	beq.n	801ef96 <ip4_input+0xf2>
      netif = inp;
 801ef90:	683b      	ldr	r3, [r7, #0]
 801ef92:	61bb      	str	r3, [r7, #24]
 801ef94:	e01e      	b.n	801efd4 <ip4_input+0x130>
    } else {
      netif = NULL;
 801ef96:	2300      	movs	r3, #0
 801ef98:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801ef9a:	4b7b      	ldr	r3, [pc, #492]	@ (801f188 <ip4_input+0x2e4>)
 801ef9c:	695b      	ldr	r3, [r3, #20]
 801ef9e:	b2db      	uxtb	r3, r3
 801efa0:	2b7f      	cmp	r3, #127	@ 0x7f
 801efa2:	d017      	beq.n	801efd4 <ip4_input+0x130>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801efa4:	4b7b      	ldr	r3, [pc, #492]	@ (801f194 <ip4_input+0x2f0>)
 801efa6:	681b      	ldr	r3, [r3, #0]
 801efa8:	61bb      	str	r3, [r7, #24]
 801efaa:	e00e      	b.n	801efca <ip4_input+0x126>
          if (netif == inp) {
 801efac:	69ba      	ldr	r2, [r7, #24]
 801efae:	683b      	ldr	r3, [r7, #0]
 801efb0:	429a      	cmp	r2, r3
 801efb2:	d006      	beq.n	801efc2 <ip4_input+0x11e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801efb4:	69b8      	ldr	r0, [r7, #24]
 801efb6:	f7ff ff4b 	bl	801ee50 <ip4_input_accept>
 801efba:	4603      	mov	r3, r0
 801efbc:	2b00      	cmp	r3, #0
 801efbe:	d108      	bne.n	801efd2 <ip4_input+0x12e>
 801efc0:	e000      	b.n	801efc4 <ip4_input+0x120>
            continue;
 801efc2:	bf00      	nop
        NETIF_FOREACH(netif) {
 801efc4:	69bb      	ldr	r3, [r7, #24]
 801efc6:	681b      	ldr	r3, [r3, #0]
 801efc8:	61bb      	str	r3, [r7, #24]
 801efca:	69bb      	ldr	r3, [r7, #24]
 801efcc:	2b00      	cmp	r3, #0
 801efce:	d1ed      	bne.n	801efac <ip4_input+0x108>
 801efd0:	e000      	b.n	801efd4 <ip4_input+0x130>
            break;
 801efd2:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801efd4:	69bb      	ldr	r3, [r7, #24]
 801efd6:	2b00      	cmp	r3, #0
 801efd8:	d111      	bne.n	801effe <ip4_input+0x15a>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801efda:	69fb      	ldr	r3, [r7, #28]
 801efdc:	7a5b      	ldrb	r3, [r3, #9]
 801efde:	2b11      	cmp	r3, #17
 801efe0:	d10d      	bne.n	801effe <ip4_input+0x15a>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801efe2:	8a7b      	ldrh	r3, [r7, #18]
 801efe4:	69fa      	ldr	r2, [r7, #28]
 801efe6:	4413      	add	r3, r2
 801efe8:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801efea:	68fb      	ldr	r3, [r7, #12]
 801efec:	885b      	ldrh	r3, [r3, #2]
 801efee:	b29b      	uxth	r3, r3
 801eff0:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801eff4:	d103      	bne.n	801effe <ip4_input+0x15a>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801eff6:	683b      	ldr	r3, [r7, #0]
 801eff8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801effa:	2300      	movs	r3, #0
 801effc:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801effe:	697b      	ldr	r3, [r7, #20]
 801f000:	2b00      	cmp	r3, #0
 801f002:	d017      	beq.n	801f034 <ip4_input+0x190>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801f004:	4b60      	ldr	r3, [pc, #384]	@ (801f188 <ip4_input+0x2e4>)
 801f006:	691b      	ldr	r3, [r3, #16]
 801f008:	2b00      	cmp	r3, #0
 801f00a:	d013      	beq.n	801f034 <ip4_input+0x190>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801f00c:	4b5e      	ldr	r3, [pc, #376]	@ (801f188 <ip4_input+0x2e4>)
 801f00e:	691b      	ldr	r3, [r3, #16]
 801f010:	6839      	ldr	r1, [r7, #0]
 801f012:	4618      	mov	r0, r3
 801f014:	f000 fa0e 	bl	801f434 <ip4_addr_isbroadcast_u32>
 801f018:	4603      	mov	r3, r0
 801f01a:	2b00      	cmp	r3, #0
 801f01c:	d105      	bne.n	801f02a <ip4_input+0x186>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801f01e:	4b5a      	ldr	r3, [pc, #360]	@ (801f188 <ip4_input+0x2e4>)
 801f020:	691b      	ldr	r3, [r3, #16]
 801f022:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801f026:	2be0      	cmp	r3, #224	@ 0xe0
 801f028:	d104      	bne.n	801f034 <ip4_input+0x190>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801f02a:	6878      	ldr	r0, [r7, #4]
 801f02c:	f7f5 f8a4 	bl	8014178 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801f030:	2300      	movs	r3, #0
 801f032:	e0a4      	b.n	801f17e <ip4_input+0x2da>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801f034:	69bb      	ldr	r3, [r7, #24]
 801f036:	2b00      	cmp	r3, #0
 801f038:	d104      	bne.n	801f044 <ip4_input+0x1a0>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801f03a:	6878      	ldr	r0, [r7, #4]
 801f03c:	f7f5 f89c 	bl	8014178 <pbuf_free>
    return ERR_OK;
 801f040:	2300      	movs	r3, #0
 801f042:	e09c      	b.n	801f17e <ip4_input+0x2da>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801f044:	69fb      	ldr	r3, [r7, #28]
 801f046:	88db      	ldrh	r3, [r3, #6]
 801f048:	b29b      	uxth	r3, r3
 801f04a:	461a      	mov	r2, r3
 801f04c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801f050:	4013      	ands	r3, r2
 801f052:	2b00      	cmp	r3, #0
 801f054:	d00b      	beq.n	801f06e <ip4_input+0x1ca>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801f056:	6878      	ldr	r0, [r7, #4]
 801f058:	f000 fd32 	bl	801fac0 <ip4_reass>
 801f05c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801f05e:	687b      	ldr	r3, [r7, #4]
 801f060:	2b00      	cmp	r3, #0
 801f062:	d101      	bne.n	801f068 <ip4_input+0x1c4>
      return ERR_OK;
 801f064:	2300      	movs	r3, #0
 801f066:	e08a      	b.n	801f17e <ip4_input+0x2da>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801f068:	687b      	ldr	r3, [r7, #4]
 801f06a:	685b      	ldr	r3, [r3, #4]
 801f06c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801f06e:	4a46      	ldr	r2, [pc, #280]	@ (801f188 <ip4_input+0x2e4>)
 801f070:	69bb      	ldr	r3, [r7, #24]
 801f072:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801f074:	4a44      	ldr	r2, [pc, #272]	@ (801f188 <ip4_input+0x2e4>)
 801f076:	683b      	ldr	r3, [r7, #0]
 801f078:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801f07a:	4a43      	ldr	r2, [pc, #268]	@ (801f188 <ip4_input+0x2e4>)
 801f07c:	69fb      	ldr	r3, [r7, #28]
 801f07e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801f080:	69fb      	ldr	r3, [r7, #28]
 801f082:	781b      	ldrb	r3, [r3, #0]
 801f084:	f003 030f 	and.w	r3, r3, #15
 801f088:	b2db      	uxtb	r3, r3
 801f08a:	009b      	lsls	r3, r3, #2
 801f08c:	b2db      	uxtb	r3, r3
 801f08e:	461a      	mov	r2, r3
 801f090:	4b3d      	ldr	r3, [pc, #244]	@ (801f188 <ip4_input+0x2e4>)
 801f092:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801f094:	8a7b      	ldrh	r3, [r7, #18]
 801f096:	4619      	mov	r1, r3
 801f098:	6878      	ldr	r0, [r7, #4]
 801f09a:	f7f4 ffe7 	bl	801406c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801f09e:	69fb      	ldr	r3, [r7, #28]
 801f0a0:	7a5b      	ldrb	r3, [r3, #9]
 801f0a2:	3b01      	subs	r3, #1
 801f0a4:	2b10      	cmp	r3, #16
 801f0a6:	d83a      	bhi.n	801f11e <ip4_input+0x27a>
 801f0a8:	a201      	add	r2, pc, #4	@ (adr r2, 801f0b0 <ip4_input+0x20c>)
 801f0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f0ae:	bf00      	nop
 801f0b0:	0801f109 	.word	0x0801f109
 801f0b4:	0801f113 	.word	0x0801f113
 801f0b8:	0801f11f 	.word	0x0801f11f
 801f0bc:	0801f11f 	.word	0x0801f11f
 801f0c0:	0801f11f 	.word	0x0801f11f
 801f0c4:	0801f0ff 	.word	0x0801f0ff
 801f0c8:	0801f11f 	.word	0x0801f11f
 801f0cc:	0801f11f 	.word	0x0801f11f
 801f0d0:	0801f11f 	.word	0x0801f11f
 801f0d4:	0801f11f 	.word	0x0801f11f
 801f0d8:	0801f11f 	.word	0x0801f11f
 801f0dc:	0801f11f 	.word	0x0801f11f
 801f0e0:	0801f11f 	.word	0x0801f11f
 801f0e4:	0801f11f 	.word	0x0801f11f
 801f0e8:	0801f11f 	.word	0x0801f11f
 801f0ec:	0801f11f 	.word	0x0801f11f
 801f0f0:	0801f0f5 	.word	0x0801f0f5
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801f0f4:	6839      	ldr	r1, [r7, #0]
 801f0f6:	6878      	ldr	r0, [r7, #4]
 801f0f8:	f7fb ff66 	bl	801afc8 <udp_input>
        break;
 801f0fc:	e02c      	b.n	801f158 <ip4_input+0x2b4>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801f0fe:	6839      	ldr	r1, [r7, #0]
 801f100:	6878      	ldr	r0, [r7, #4]
 801f102:	f7f7 faeb 	bl	80166dc <tcp_input>
        break;
 801f106:	e027      	b.n	801f158 <ip4_input+0x2b4>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801f108:	6839      	ldr	r1, [r7, #0]
 801f10a:	6878      	ldr	r0, [r7, #4]
 801f10c:	f7ff f974 	bl	801e3f8 <icmp_input>
        break;
 801f110:	e022      	b.n	801f158 <ip4_input+0x2b4>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
      case IP_PROTO_IGMP:
        igmp_input(p, inp, ip4_current_dest_addr());
 801f112:	4a1e      	ldr	r2, [pc, #120]	@ (801f18c <ip4_input+0x2e8>)
 801f114:	6839      	ldr	r1, [r7, #0]
 801f116:	6878      	ldr	r0, [r7, #4]
 801f118:	f7ff fbe0 	bl	801e8dc <igmp_input>
        break;
 801f11c:	e01c      	b.n	801f158 <ip4_input+0x2b4>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801f11e:	4b1a      	ldr	r3, [pc, #104]	@ (801f188 <ip4_input+0x2e4>)
 801f120:	695b      	ldr	r3, [r3, #20]
 801f122:	69b9      	ldr	r1, [r7, #24]
 801f124:	4618      	mov	r0, r3
 801f126:	f000 f985 	bl	801f434 <ip4_addr_isbroadcast_u32>
 801f12a:	4603      	mov	r3, r0
 801f12c:	2b00      	cmp	r3, #0
 801f12e:	d10f      	bne.n	801f150 <ip4_input+0x2ac>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f130:	4b15      	ldr	r3, [pc, #84]	@ (801f188 <ip4_input+0x2e4>)
 801f132:	695b      	ldr	r3, [r3, #20]
 801f134:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801f138:	2be0      	cmp	r3, #224	@ 0xe0
 801f13a:	d009      	beq.n	801f150 <ip4_input+0x2ac>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801f13c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801f140:	4619      	mov	r1, r3
 801f142:	6878      	ldr	r0, [r7, #4]
 801f144:	f7f5 f805 	bl	8014152 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801f148:	2102      	movs	r1, #2
 801f14a:	6878      	ldr	r0, [r7, #4]
 801f14c:	f7ff fa58 	bl	801e600 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801f150:	6878      	ldr	r0, [r7, #4]
 801f152:	f7f5 f811 	bl	8014178 <pbuf_free>
        break;
 801f156:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801f158:	4b0b      	ldr	r3, [pc, #44]	@ (801f188 <ip4_input+0x2e4>)
 801f15a:	2200      	movs	r2, #0
 801f15c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801f15e:	4b0a      	ldr	r3, [pc, #40]	@ (801f188 <ip4_input+0x2e4>)
 801f160:	2200      	movs	r2, #0
 801f162:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801f164:	4b08      	ldr	r3, [pc, #32]	@ (801f188 <ip4_input+0x2e4>)
 801f166:	2200      	movs	r2, #0
 801f168:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801f16a:	4b07      	ldr	r3, [pc, #28]	@ (801f188 <ip4_input+0x2e4>)
 801f16c:	2200      	movs	r2, #0
 801f16e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801f170:	4b05      	ldr	r3, [pc, #20]	@ (801f188 <ip4_input+0x2e4>)
 801f172:	2200      	movs	r2, #0
 801f174:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801f176:	4b04      	ldr	r3, [pc, #16]	@ (801f188 <ip4_input+0x2e4>)
 801f178:	2200      	movs	r2, #0
 801f17a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801f17c:	2300      	movs	r3, #0
}
 801f17e:	4618      	mov	r0, r3
 801f180:	3720      	adds	r7, #32
 801f182:	46bd      	mov	sp, r7
 801f184:	bd80      	pop	{r7, pc}
 801f186:	bf00      	nop
 801f188:	20004bb4 	.word	0x20004bb4
 801f18c:	20004bc8 	.word	0x20004bc8
 801f190:	010000e0 	.word	0x010000e0
 801f194:	20004bdc 	.word	0x20004bdc

0801f198 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801f198:	b580      	push	{r7, lr}
 801f19a:	b08a      	sub	sp, #40	@ 0x28
 801f19c:	af06      	add	r7, sp, #24
 801f19e:	60f8      	str	r0, [r7, #12]
 801f1a0:	60b9      	str	r1, [r7, #8]
 801f1a2:	607a      	str	r2, [r7, #4]
 801f1a4:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 801f1a6:	78fa      	ldrb	r2, [r7, #3]
 801f1a8:	2300      	movs	r3, #0
 801f1aa:	9304      	str	r3, [sp, #16]
 801f1ac:	2300      	movs	r3, #0
 801f1ae:	9303      	str	r3, [sp, #12]
 801f1b0:	6a3b      	ldr	r3, [r7, #32]
 801f1b2:	9302      	str	r3, [sp, #8]
 801f1b4:	7f3b      	ldrb	r3, [r7, #28]
 801f1b6:	9301      	str	r3, [sp, #4]
 801f1b8:	7e3b      	ldrb	r3, [r7, #24]
 801f1ba:	9300      	str	r3, [sp, #0]
 801f1bc:	4613      	mov	r3, r2
 801f1be:	687a      	ldr	r2, [r7, #4]
 801f1c0:	68b9      	ldr	r1, [r7, #8]
 801f1c2:	68f8      	ldr	r0, [r7, #12]
 801f1c4:	f000 f805 	bl	801f1d2 <ip4_output_if_opt>
 801f1c8:	4603      	mov	r3, r0
}
 801f1ca:	4618      	mov	r0, r3
 801f1cc:	3710      	adds	r7, #16
 801f1ce:	46bd      	mov	sp, r7
 801f1d0:	bd80      	pop	{r7, pc}

0801f1d2 <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
 801f1d2:	b580      	push	{r7, lr}
 801f1d4:	b08c      	sub	sp, #48	@ 0x30
 801f1d6:	af06      	add	r7, sp, #24
 801f1d8:	60f8      	str	r0, [r7, #12]
 801f1da:	60b9      	str	r1, [r7, #8]
 801f1dc:	607a      	str	r2, [r7, #4]
 801f1de:	70fb      	strb	r3, [r7, #3]
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801f1e0:	68bb      	ldr	r3, [r7, #8]
 801f1e2:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801f1e4:	687b      	ldr	r3, [r7, #4]
 801f1e6:	2b00      	cmp	r3, #0
 801f1e8:	d009      	beq.n	801f1fe <ip4_output_if_opt+0x2c>
    if (ip4_addr_isany(src)) {
 801f1ea:	68bb      	ldr	r3, [r7, #8]
 801f1ec:	2b00      	cmp	r3, #0
 801f1ee:	d003      	beq.n	801f1f8 <ip4_output_if_opt+0x26>
 801f1f0:	68bb      	ldr	r3, [r7, #8]
 801f1f2:	681b      	ldr	r3, [r3, #0]
 801f1f4:	2b00      	cmp	r3, #0
 801f1f6:	d102      	bne.n	801f1fe <ip4_output_if_opt+0x2c>
      src_used = netif_ip4_addr(netif);
 801f1f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f1fa:	3304      	adds	r3, #4
 801f1fc:	617b      	str	r3, [r7, #20]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 801f1fe:	78fa      	ldrb	r2, [r7, #3]
 801f200:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801f202:	9304      	str	r3, [sp, #16]
 801f204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f206:	9303      	str	r3, [sp, #12]
 801f208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f20a:	9302      	str	r3, [sp, #8]
 801f20c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801f210:	9301      	str	r3, [sp, #4]
 801f212:	f897 3020 	ldrb.w	r3, [r7, #32]
 801f216:	9300      	str	r3, [sp, #0]
 801f218:	4613      	mov	r3, r2
 801f21a:	687a      	ldr	r2, [r7, #4]
 801f21c:	6979      	ldr	r1, [r7, #20]
 801f21e:	68f8      	ldr	r0, [r7, #12]
 801f220:	f000 f822 	bl	801f268 <ip4_output_if_opt_src>
 801f224:	4603      	mov	r3, r0
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
 801f226:	4618      	mov	r0, r3
 801f228:	3718      	adds	r7, #24
 801f22a:	46bd      	mov	sp, r7
 801f22c:	bd80      	pop	{r7, pc}

0801f22e <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801f22e:	b580      	push	{r7, lr}
 801f230:	b08a      	sub	sp, #40	@ 0x28
 801f232:	af06      	add	r7, sp, #24
 801f234:	60f8      	str	r0, [r7, #12]
 801f236:	60b9      	str	r1, [r7, #8]
 801f238:	607a      	str	r2, [r7, #4]
 801f23a:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 801f23c:	78fa      	ldrb	r2, [r7, #3]
 801f23e:	2300      	movs	r3, #0
 801f240:	9304      	str	r3, [sp, #16]
 801f242:	2300      	movs	r3, #0
 801f244:	9303      	str	r3, [sp, #12]
 801f246:	6a3b      	ldr	r3, [r7, #32]
 801f248:	9302      	str	r3, [sp, #8]
 801f24a:	7f3b      	ldrb	r3, [r7, #28]
 801f24c:	9301      	str	r3, [sp, #4]
 801f24e:	7e3b      	ldrb	r3, [r7, #24]
 801f250:	9300      	str	r3, [sp, #0]
 801f252:	4613      	mov	r3, r2
 801f254:	687a      	ldr	r2, [r7, #4]
 801f256:	68b9      	ldr	r1, [r7, #8]
 801f258:	68f8      	ldr	r0, [r7, #12]
 801f25a:	f000 f805 	bl	801f268 <ip4_output_if_opt_src>
 801f25e:	4603      	mov	r3, r0
}
 801f260:	4618      	mov	r0, r3
 801f262:	3710      	adds	r7, #16
 801f264:	46bd      	mov	sp, r7
 801f266:	bd80      	pop	{r7, pc}

0801f268 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                      u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                      u16_t optlen)
{
 801f268:	b580      	push	{r7, lr}
 801f26a:	b088      	sub	sp, #32
 801f26c:	af00      	add	r7, sp, #0
 801f26e:	60f8      	str	r0, [r7, #12]
 801f270:	60b9      	str	r1, [r7, #8]
 801f272:	607a      	str	r2, [r7, #4]
 801f274:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801f276:	68fb      	ldr	r3, [r7, #12]
 801f278:	7b9b      	ldrb	r3, [r3, #14]
 801f27a:	2b01      	cmp	r3, #1
 801f27c:	d006      	beq.n	801f28c <ip4_output_if_opt_src+0x24>
 801f27e:	4b67      	ldr	r3, [pc, #412]	@ (801f41c <ip4_output_if_opt_src+0x1b4>)
 801f280:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801f284:	4966      	ldr	r1, [pc, #408]	@ (801f420 <ip4_output_if_opt_src+0x1b8>)
 801f286:	4867      	ldr	r0, [pc, #412]	@ (801f424 <ip4_output_if_opt_src+0x1bc>)
 801f288:	f002 f894 	bl	80213b4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801f28c:	687b      	ldr	r3, [r7, #4]
 801f28e:	2b00      	cmp	r3, #0
 801f290:	f000 8097 	beq.w	801f3c2 <ip4_output_if_opt_src+0x15a>
    u16_t ip_hlen = IP_HLEN;
 801f294:	2314      	movs	r3, #20
 801f296:	83fb      	strh	r3, [r7, #30]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
 801f298:	2300      	movs	r3, #0
 801f29a:	82fb      	strh	r3, [r7, #22]
    if (optlen != 0) {
 801f29c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801f29e:	2b00      	cmp	r3, #0
 801f2a0:	d030      	beq.n	801f304 <ip4_output_if_opt_src+0x9c>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      if (optlen > (IP_HLEN_MAX - IP_HLEN)) {
 801f2a2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801f2a4:	2b28      	cmp	r3, #40	@ 0x28
 801f2a6:	d902      	bls.n	801f2ae <ip4_output_if_opt_src+0x46>
        /* optlen too long */
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: optlen too long\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_VAL;
 801f2a8:	f06f 0305 	mvn.w	r3, #5
 801f2ac:	e0b1      	b.n	801f412 <ip4_output_if_opt_src+0x1aa>
      }
      /* round up to a multiple of 4 */
      optlen_aligned = (u16_t)((optlen + 3) & ~3);
 801f2ae:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801f2b0:	3303      	adds	r3, #3
 801f2b2:	b29b      	uxth	r3, r3
 801f2b4:	f023 0303 	bic.w	r3, r3, #3
 801f2b8:	82fb      	strh	r3, [r7, #22]
      ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
 801f2ba:	8bfa      	ldrh	r2, [r7, #30]
 801f2bc:	8afb      	ldrh	r3, [r7, #22]
 801f2be:	4413      	add	r3, r2
 801f2c0:	83fb      	strh	r3, [r7, #30]
      /* First write in the IP options */
      if (pbuf_add_header(p, optlen_aligned)) {
 801f2c2:	8afb      	ldrh	r3, [r7, #22]
 801f2c4:	4619      	mov	r1, r3
 801f2c6:	68f8      	ldr	r0, [r7, #12]
 801f2c8:	f7f4 fec0 	bl	801404c <pbuf_add_header>
 801f2cc:	4603      	mov	r3, r0
 801f2ce:	2b00      	cmp	r3, #0
 801f2d0:	d002      	beq.n	801f2d8 <ip4_output_if_opt_src+0x70>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_BUF;
 801f2d2:	f06f 0301 	mvn.w	r3, #1
 801f2d6:	e09c      	b.n	801f412 <ip4_output_if_opt_src+0x1aa>
      }
      MEMCPY(p->payload, ip_options, optlen);
 801f2d8:	68fb      	ldr	r3, [r7, #12]
 801f2da:	685b      	ldr	r3, [r3, #4]
 801f2dc:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801f2de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801f2e0:	4618      	mov	r0, r3
 801f2e2:	f002 fb50 	bl	8021986 <memcpy>
      if (optlen < optlen_aligned) {
 801f2e6:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801f2e8:	8afb      	ldrh	r3, [r7, #22]
 801f2ea:	429a      	cmp	r2, r3
 801f2ec:	d20a      	bcs.n	801f304 <ip4_output_if_opt_src+0x9c>
        /* zero the remaining bytes */
        memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
 801f2ee:	68fb      	ldr	r3, [r7, #12]
 801f2f0:	685a      	ldr	r2, [r3, #4]
 801f2f2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801f2f4:	18d0      	adds	r0, r2, r3
 801f2f6:	8afa      	ldrh	r2, [r7, #22]
 801f2f8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801f2fa:	1ad3      	subs	r3, r2, r3
 801f2fc:	461a      	mov	r2, r3
 801f2fe:	2100      	movs	r1, #0
 801f300:	f002 fa28 	bl	8021754 <memset>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801f304:	2114      	movs	r1, #20
 801f306:	68f8      	ldr	r0, [r7, #12]
 801f308:	f7f4 fea0 	bl	801404c <pbuf_add_header>
 801f30c:	4603      	mov	r3, r0
 801f30e:	2b00      	cmp	r3, #0
 801f310:	d002      	beq.n	801f318 <ip4_output_if_opt_src+0xb0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801f312:	f06f 0301 	mvn.w	r3, #1
 801f316:	e07c      	b.n	801f412 <ip4_output_if_opt_src+0x1aa>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801f318:	68fb      	ldr	r3, [r7, #12]
 801f31a:	685b      	ldr	r3, [r3, #4]
 801f31c:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801f31e:	68fb      	ldr	r3, [r7, #12]
 801f320:	895b      	ldrh	r3, [r3, #10]
 801f322:	2b13      	cmp	r3, #19
 801f324:	d806      	bhi.n	801f334 <ip4_output_if_opt_src+0xcc>
 801f326:	4b3d      	ldr	r3, [pc, #244]	@ (801f41c <ip4_output_if_opt_src+0x1b4>)
 801f328:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801f32c:	493e      	ldr	r1, [pc, #248]	@ (801f428 <ip4_output_if_opt_src+0x1c0>)
 801f32e:	483d      	ldr	r0, [pc, #244]	@ (801f424 <ip4_output_if_opt_src+0x1bc>)
 801f330:	f002 f840 	bl	80213b4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801f334:	69bb      	ldr	r3, [r7, #24]
 801f336:	78fa      	ldrb	r2, [r7, #3]
 801f338:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801f33a:	69bb      	ldr	r3, [r7, #24]
 801f33c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801f340:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801f342:	687b      	ldr	r3, [r7, #4]
 801f344:	681a      	ldr	r2, [r3, #0]
 801f346:	69bb      	ldr	r3, [r7, #24]
 801f348:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801f34a:	8bfb      	ldrh	r3, [r7, #30]
 801f34c:	089b      	lsrs	r3, r3, #2
 801f34e:	b29b      	uxth	r3, r3
 801f350:	b2db      	uxtb	r3, r3
 801f352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f356:	b2da      	uxtb	r2, r3
 801f358:	69bb      	ldr	r3, [r7, #24]
 801f35a:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801f35c:	69bb      	ldr	r3, [r7, #24]
 801f35e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801f362:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801f364:	68fb      	ldr	r3, [r7, #12]
 801f366:	891b      	ldrh	r3, [r3, #8]
 801f368:	4618      	mov	r0, r3
 801f36a:	f7f3 f947 	bl	80125fc <lwip_htons>
 801f36e:	4603      	mov	r3, r0
 801f370:	461a      	mov	r2, r3
 801f372:	69bb      	ldr	r3, [r7, #24]
 801f374:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801f376:	69bb      	ldr	r3, [r7, #24]
 801f378:	2200      	movs	r2, #0
 801f37a:	719a      	strb	r2, [r3, #6]
 801f37c:	2200      	movs	r2, #0
 801f37e:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801f380:	4b2a      	ldr	r3, [pc, #168]	@ (801f42c <ip4_output_if_opt_src+0x1c4>)
 801f382:	881b      	ldrh	r3, [r3, #0]
 801f384:	4618      	mov	r0, r3
 801f386:	f7f3 f939 	bl	80125fc <lwip_htons>
 801f38a:	4603      	mov	r3, r0
 801f38c:	461a      	mov	r2, r3
 801f38e:	69bb      	ldr	r3, [r7, #24]
 801f390:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801f392:	4b26      	ldr	r3, [pc, #152]	@ (801f42c <ip4_output_if_opt_src+0x1c4>)
 801f394:	881b      	ldrh	r3, [r3, #0]
 801f396:	3301      	adds	r3, #1
 801f398:	b29a      	uxth	r2, r3
 801f39a:	4b24      	ldr	r3, [pc, #144]	@ (801f42c <ip4_output_if_opt_src+0x1c4>)
 801f39c:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801f39e:	68bb      	ldr	r3, [r7, #8]
 801f3a0:	2b00      	cmp	r3, #0
 801f3a2:	d104      	bne.n	801f3ae <ip4_output_if_opt_src+0x146>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801f3a4:	4b22      	ldr	r3, [pc, #136]	@ (801f430 <ip4_output_if_opt_src+0x1c8>)
 801f3a6:	681a      	ldr	r2, [r3, #0]
 801f3a8:	69bb      	ldr	r3, [r7, #24]
 801f3aa:	60da      	str	r2, [r3, #12]
 801f3ac:	e003      	b.n	801f3b6 <ip4_output_if_opt_src+0x14e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801f3ae:	68bb      	ldr	r3, [r7, #8]
 801f3b0:	681a      	ldr	r2, [r3, #0]
 801f3b2:	69bb      	ldr	r3, [r7, #24]
 801f3b4:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801f3b6:	69bb      	ldr	r3, [r7, #24]
 801f3b8:	2200      	movs	r2, #0
 801f3ba:	729a      	strb	r2, [r3, #10]
 801f3bc:	2200      	movs	r2, #0
 801f3be:	72da      	strb	r2, [r3, #11]
 801f3c0:	e00f      	b.n	801f3e2 <ip4_output_if_opt_src+0x17a>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801f3c2:	68fb      	ldr	r3, [r7, #12]
 801f3c4:	895b      	ldrh	r3, [r3, #10]
 801f3c6:	2b13      	cmp	r3, #19
 801f3c8:	d802      	bhi.n	801f3d0 <ip4_output_if_opt_src+0x168>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801f3ca:	f06f 0301 	mvn.w	r3, #1
 801f3ce:	e020      	b.n	801f412 <ip4_output_if_opt_src+0x1aa>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801f3d0:	68fb      	ldr	r3, [r7, #12]
 801f3d2:	685b      	ldr	r3, [r3, #4]
 801f3d4:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801f3d6:	69bb      	ldr	r3, [r7, #24]
 801f3d8:	691b      	ldr	r3, [r3, #16]
 801f3da:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 801f3dc:	f107 0310 	add.w	r3, r7, #16
 801f3e0:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801f3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f3e4:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801f3e6:	2b00      	cmp	r3, #0
 801f3e8:	d00c      	beq.n	801f404 <ip4_output_if_opt_src+0x19c>
 801f3ea:	68fb      	ldr	r3, [r7, #12]
 801f3ec:	891a      	ldrh	r2, [r3, #8]
 801f3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f3f0:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801f3f2:	429a      	cmp	r2, r3
 801f3f4:	d906      	bls.n	801f404 <ip4_output_if_opt_src+0x19c>
    return ip4_frag(p, netif, dest);
 801f3f6:	687a      	ldr	r2, [r7, #4]
 801f3f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801f3fa:	68f8      	ldr	r0, [r7, #12]
 801f3fc:	f000 fd54 	bl	801fea8 <ip4_frag>
 801f400:	4603      	mov	r3, r0
 801f402:	e006      	b.n	801f412 <ip4_output_if_opt_src+0x1aa>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801f404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f406:	695b      	ldr	r3, [r3, #20]
 801f408:	687a      	ldr	r2, [r7, #4]
 801f40a:	68f9      	ldr	r1, [r7, #12]
 801f40c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f40e:	4798      	blx	r3
 801f410:	4603      	mov	r3, r0
}
 801f412:	4618      	mov	r0, r3
 801f414:	3720      	adds	r7, #32
 801f416:	46bd      	mov	sp, r7
 801f418:	bd80      	pop	{r7, pc}
 801f41a:	bf00      	nop
 801f41c:	08026408 	.word	0x08026408
 801f420:	0802643c 	.word	0x0802643c
 801f424:	08026448 	.word	0x08026448
 801f428:	08026470 	.word	0x08026470
 801f42c:	20004d78 	.word	0x20004d78
 801f430:	08027754 	.word	0x08027754

0801f434 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801f434:	b480      	push	{r7}
 801f436:	b085      	sub	sp, #20
 801f438:	af00      	add	r7, sp, #0
 801f43a:	6078      	str	r0, [r7, #4]
 801f43c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801f43e:	687b      	ldr	r3, [r7, #4]
 801f440:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801f442:	687b      	ldr	r3, [r7, #4]
 801f444:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f448:	d002      	beq.n	801f450 <ip4_addr_isbroadcast_u32+0x1c>
 801f44a:	687b      	ldr	r3, [r7, #4]
 801f44c:	2b00      	cmp	r3, #0
 801f44e:	d101      	bne.n	801f454 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801f450:	2301      	movs	r3, #1
 801f452:	e02a      	b.n	801f4aa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801f454:	683b      	ldr	r3, [r7, #0]
 801f456:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 801f45a:	f003 0302 	and.w	r3, r3, #2
 801f45e:	2b00      	cmp	r3, #0
 801f460:	d101      	bne.n	801f466 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801f462:	2300      	movs	r3, #0
 801f464:	e021      	b.n	801f4aa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801f466:	683b      	ldr	r3, [r7, #0]
 801f468:	3304      	adds	r3, #4
 801f46a:	681b      	ldr	r3, [r3, #0]
 801f46c:	687a      	ldr	r2, [r7, #4]
 801f46e:	429a      	cmp	r2, r3
 801f470:	d101      	bne.n	801f476 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801f472:	2300      	movs	r3, #0
 801f474:	e019      	b.n	801f4aa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801f476:	68fa      	ldr	r2, [r7, #12]
 801f478:	683b      	ldr	r3, [r7, #0]
 801f47a:	3304      	adds	r3, #4
 801f47c:	681b      	ldr	r3, [r3, #0]
 801f47e:	405a      	eors	r2, r3
 801f480:	683b      	ldr	r3, [r7, #0]
 801f482:	3308      	adds	r3, #8
 801f484:	681b      	ldr	r3, [r3, #0]
 801f486:	4013      	ands	r3, r2
 801f488:	2b00      	cmp	r3, #0
 801f48a:	d10d      	bne.n	801f4a8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801f48c:	683b      	ldr	r3, [r7, #0]
 801f48e:	3308      	adds	r3, #8
 801f490:	681b      	ldr	r3, [r3, #0]
 801f492:	43da      	mvns	r2, r3
 801f494:	687b      	ldr	r3, [r7, #4]
 801f496:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801f498:	683b      	ldr	r3, [r7, #0]
 801f49a:	3308      	adds	r3, #8
 801f49c:	681b      	ldr	r3, [r3, #0]
 801f49e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801f4a0:	429a      	cmp	r2, r3
 801f4a2:	d101      	bne.n	801f4a8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801f4a4:	2301      	movs	r3, #1
 801f4a6:	e000      	b.n	801f4aa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801f4a8:	2300      	movs	r3, #0
  }
}
 801f4aa:	4618      	mov	r0, r3
 801f4ac:	3714      	adds	r7, #20
 801f4ae:	46bd      	mov	sp, r7
 801f4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4b4:	4770      	bx	lr
	...

0801f4b8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801f4b8:	b580      	push	{r7, lr}
 801f4ba:	b084      	sub	sp, #16
 801f4bc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801f4be:	2300      	movs	r3, #0
 801f4c0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801f4c2:	4b12      	ldr	r3, [pc, #72]	@ (801f50c <ip_reass_tmr+0x54>)
 801f4c4:	681b      	ldr	r3, [r3, #0]
 801f4c6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801f4c8:	e018      	b.n	801f4fc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801f4ca:	68fb      	ldr	r3, [r7, #12]
 801f4cc:	7fdb      	ldrb	r3, [r3, #31]
 801f4ce:	2b00      	cmp	r3, #0
 801f4d0:	d00b      	beq.n	801f4ea <ip_reass_tmr+0x32>
      r->timer--;
 801f4d2:	68fb      	ldr	r3, [r7, #12]
 801f4d4:	7fdb      	ldrb	r3, [r3, #31]
 801f4d6:	3b01      	subs	r3, #1
 801f4d8:	b2da      	uxtb	r2, r3
 801f4da:	68fb      	ldr	r3, [r7, #12]
 801f4dc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801f4de:	68fb      	ldr	r3, [r7, #12]
 801f4e0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801f4e2:	68fb      	ldr	r3, [r7, #12]
 801f4e4:	681b      	ldr	r3, [r3, #0]
 801f4e6:	60fb      	str	r3, [r7, #12]
 801f4e8:	e008      	b.n	801f4fc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801f4ea:	68fb      	ldr	r3, [r7, #12]
 801f4ec:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801f4ee:	68fb      	ldr	r3, [r7, #12]
 801f4f0:	681b      	ldr	r3, [r3, #0]
 801f4f2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801f4f4:	68b9      	ldr	r1, [r7, #8]
 801f4f6:	6878      	ldr	r0, [r7, #4]
 801f4f8:	f000 f80a 	bl	801f510 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801f4fc:	68fb      	ldr	r3, [r7, #12]
 801f4fe:	2b00      	cmp	r3, #0
 801f500:	d1e3      	bne.n	801f4ca <ip_reass_tmr+0x12>
    }
  }
}
 801f502:	bf00      	nop
 801f504:	bf00      	nop
 801f506:	3710      	adds	r7, #16
 801f508:	46bd      	mov	sp, r7
 801f50a:	bd80      	pop	{r7, pc}
 801f50c:	20004d80 	.word	0x20004d80

0801f510 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801f510:	b580      	push	{r7, lr}
 801f512:	b088      	sub	sp, #32
 801f514:	af00      	add	r7, sp, #0
 801f516:	6078      	str	r0, [r7, #4]
 801f518:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801f51a:	2300      	movs	r3, #0
 801f51c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801f51e:	683a      	ldr	r2, [r7, #0]
 801f520:	687b      	ldr	r3, [r7, #4]
 801f522:	429a      	cmp	r2, r3
 801f524:	d105      	bne.n	801f532 <ip_reass_free_complete_datagram+0x22>
 801f526:	4b45      	ldr	r3, [pc, #276]	@ (801f63c <ip_reass_free_complete_datagram+0x12c>)
 801f528:	22ab      	movs	r2, #171	@ 0xab
 801f52a:	4945      	ldr	r1, [pc, #276]	@ (801f640 <ip_reass_free_complete_datagram+0x130>)
 801f52c:	4845      	ldr	r0, [pc, #276]	@ (801f644 <ip_reass_free_complete_datagram+0x134>)
 801f52e:	f001 ff41 	bl	80213b4 <iprintf>
  if (prev != NULL) {
 801f532:	683b      	ldr	r3, [r7, #0]
 801f534:	2b00      	cmp	r3, #0
 801f536:	d00a      	beq.n	801f54e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801f538:	683b      	ldr	r3, [r7, #0]
 801f53a:	681b      	ldr	r3, [r3, #0]
 801f53c:	687a      	ldr	r2, [r7, #4]
 801f53e:	429a      	cmp	r2, r3
 801f540:	d005      	beq.n	801f54e <ip_reass_free_complete_datagram+0x3e>
 801f542:	4b3e      	ldr	r3, [pc, #248]	@ (801f63c <ip_reass_free_complete_datagram+0x12c>)
 801f544:	22ad      	movs	r2, #173	@ 0xad
 801f546:	4940      	ldr	r1, [pc, #256]	@ (801f648 <ip_reass_free_complete_datagram+0x138>)
 801f548:	483e      	ldr	r0, [pc, #248]	@ (801f644 <ip_reass_free_complete_datagram+0x134>)
 801f54a:	f001 ff33 	bl	80213b4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801f54e:	687b      	ldr	r3, [r7, #4]
 801f550:	685b      	ldr	r3, [r3, #4]
 801f552:	685b      	ldr	r3, [r3, #4]
 801f554:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801f556:	697b      	ldr	r3, [r7, #20]
 801f558:	889b      	ldrh	r3, [r3, #4]
 801f55a:	b29b      	uxth	r3, r3
 801f55c:	2b00      	cmp	r3, #0
 801f55e:	d12a      	bne.n	801f5b6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801f560:	687b      	ldr	r3, [r7, #4]
 801f562:	685b      	ldr	r3, [r3, #4]
 801f564:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801f566:	697b      	ldr	r3, [r7, #20]
 801f568:	681a      	ldr	r2, [r3, #0]
 801f56a:	687b      	ldr	r3, [r7, #4]
 801f56c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801f56e:	69bb      	ldr	r3, [r7, #24]
 801f570:	6858      	ldr	r0, [r3, #4]
 801f572:	687b      	ldr	r3, [r7, #4]
 801f574:	3308      	adds	r3, #8
 801f576:	2214      	movs	r2, #20
 801f578:	4619      	mov	r1, r3
 801f57a:	f002 fa04 	bl	8021986 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801f57e:	2101      	movs	r1, #1
 801f580:	69b8      	ldr	r0, [r7, #24]
 801f582:	f7ff f84d 	bl	801e620 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801f586:	69b8      	ldr	r0, [r7, #24]
 801f588:	f7f4 fe84 	bl	8014294 <pbuf_clen>
 801f58c:	4603      	mov	r3, r0
 801f58e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801f590:	8bfa      	ldrh	r2, [r7, #30]
 801f592:	8a7b      	ldrh	r3, [r7, #18]
 801f594:	4413      	add	r3, r2
 801f596:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801f59a:	db05      	blt.n	801f5a8 <ip_reass_free_complete_datagram+0x98>
 801f59c:	4b27      	ldr	r3, [pc, #156]	@ (801f63c <ip_reass_free_complete_datagram+0x12c>)
 801f59e:	22bc      	movs	r2, #188	@ 0xbc
 801f5a0:	492a      	ldr	r1, [pc, #168]	@ (801f64c <ip_reass_free_complete_datagram+0x13c>)
 801f5a2:	4828      	ldr	r0, [pc, #160]	@ (801f644 <ip_reass_free_complete_datagram+0x134>)
 801f5a4:	f001 ff06 	bl	80213b4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801f5a8:	8bfa      	ldrh	r2, [r7, #30]
 801f5aa:	8a7b      	ldrh	r3, [r7, #18]
 801f5ac:	4413      	add	r3, r2
 801f5ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801f5b0:	69b8      	ldr	r0, [r7, #24]
 801f5b2:	f7f4 fde1 	bl	8014178 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801f5b6:	687b      	ldr	r3, [r7, #4]
 801f5b8:	685b      	ldr	r3, [r3, #4]
 801f5ba:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801f5bc:	e01f      	b.n	801f5fe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801f5be:	69bb      	ldr	r3, [r7, #24]
 801f5c0:	685b      	ldr	r3, [r3, #4]
 801f5c2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801f5c4:	69bb      	ldr	r3, [r7, #24]
 801f5c6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801f5c8:	697b      	ldr	r3, [r7, #20]
 801f5ca:	681b      	ldr	r3, [r3, #0]
 801f5cc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801f5ce:	68f8      	ldr	r0, [r7, #12]
 801f5d0:	f7f4 fe60 	bl	8014294 <pbuf_clen>
 801f5d4:	4603      	mov	r3, r0
 801f5d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801f5d8:	8bfa      	ldrh	r2, [r7, #30]
 801f5da:	8a7b      	ldrh	r3, [r7, #18]
 801f5dc:	4413      	add	r3, r2
 801f5de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801f5e2:	db05      	blt.n	801f5f0 <ip_reass_free_complete_datagram+0xe0>
 801f5e4:	4b15      	ldr	r3, [pc, #84]	@ (801f63c <ip_reass_free_complete_datagram+0x12c>)
 801f5e6:	22cc      	movs	r2, #204	@ 0xcc
 801f5e8:	4918      	ldr	r1, [pc, #96]	@ (801f64c <ip_reass_free_complete_datagram+0x13c>)
 801f5ea:	4816      	ldr	r0, [pc, #88]	@ (801f644 <ip_reass_free_complete_datagram+0x134>)
 801f5ec:	f001 fee2 	bl	80213b4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801f5f0:	8bfa      	ldrh	r2, [r7, #30]
 801f5f2:	8a7b      	ldrh	r3, [r7, #18]
 801f5f4:	4413      	add	r3, r2
 801f5f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801f5f8:	68f8      	ldr	r0, [r7, #12]
 801f5fa:	f7f4 fdbd 	bl	8014178 <pbuf_free>
  while (p != NULL) {
 801f5fe:	69bb      	ldr	r3, [r7, #24]
 801f600:	2b00      	cmp	r3, #0
 801f602:	d1dc      	bne.n	801f5be <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801f604:	6839      	ldr	r1, [r7, #0]
 801f606:	6878      	ldr	r0, [r7, #4]
 801f608:	f000 f8c2 	bl	801f790 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801f60c:	4b10      	ldr	r3, [pc, #64]	@ (801f650 <ip_reass_free_complete_datagram+0x140>)
 801f60e:	881b      	ldrh	r3, [r3, #0]
 801f610:	8bfa      	ldrh	r2, [r7, #30]
 801f612:	429a      	cmp	r2, r3
 801f614:	d905      	bls.n	801f622 <ip_reass_free_complete_datagram+0x112>
 801f616:	4b09      	ldr	r3, [pc, #36]	@ (801f63c <ip_reass_free_complete_datagram+0x12c>)
 801f618:	22d2      	movs	r2, #210	@ 0xd2
 801f61a:	490e      	ldr	r1, [pc, #56]	@ (801f654 <ip_reass_free_complete_datagram+0x144>)
 801f61c:	4809      	ldr	r0, [pc, #36]	@ (801f644 <ip_reass_free_complete_datagram+0x134>)
 801f61e:	f001 fec9 	bl	80213b4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801f622:	4b0b      	ldr	r3, [pc, #44]	@ (801f650 <ip_reass_free_complete_datagram+0x140>)
 801f624:	881a      	ldrh	r2, [r3, #0]
 801f626:	8bfb      	ldrh	r3, [r7, #30]
 801f628:	1ad3      	subs	r3, r2, r3
 801f62a:	b29a      	uxth	r2, r3
 801f62c:	4b08      	ldr	r3, [pc, #32]	@ (801f650 <ip_reass_free_complete_datagram+0x140>)
 801f62e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801f630:	8bfb      	ldrh	r3, [r7, #30]
}
 801f632:	4618      	mov	r0, r3
 801f634:	3720      	adds	r7, #32
 801f636:	46bd      	mov	sp, r7
 801f638:	bd80      	pop	{r7, pc}
 801f63a:	bf00      	nop
 801f63c:	080264a0 	.word	0x080264a0
 801f640:	080264dc 	.word	0x080264dc
 801f644:	080264e8 	.word	0x080264e8
 801f648:	08026510 	.word	0x08026510
 801f64c:	08026524 	.word	0x08026524
 801f650:	20004d84 	.word	0x20004d84
 801f654:	08026544 	.word	0x08026544

0801f658 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801f658:	b580      	push	{r7, lr}
 801f65a:	b08a      	sub	sp, #40	@ 0x28
 801f65c:	af00      	add	r7, sp, #0
 801f65e:	6078      	str	r0, [r7, #4]
 801f660:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801f662:	2300      	movs	r3, #0
 801f664:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801f666:	2300      	movs	r3, #0
 801f668:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801f66a:	2300      	movs	r3, #0
 801f66c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801f66e:	2300      	movs	r3, #0
 801f670:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801f672:	2300      	movs	r3, #0
 801f674:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801f676:	4b28      	ldr	r3, [pc, #160]	@ (801f718 <ip_reass_remove_oldest_datagram+0xc0>)
 801f678:	681b      	ldr	r3, [r3, #0]
 801f67a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801f67c:	e030      	b.n	801f6e0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801f67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f680:	695a      	ldr	r2, [r3, #20]
 801f682:	687b      	ldr	r3, [r7, #4]
 801f684:	68db      	ldr	r3, [r3, #12]
 801f686:	429a      	cmp	r2, r3
 801f688:	d10c      	bne.n	801f6a4 <ip_reass_remove_oldest_datagram+0x4c>
 801f68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f68c:	699a      	ldr	r2, [r3, #24]
 801f68e:	687b      	ldr	r3, [r7, #4]
 801f690:	691b      	ldr	r3, [r3, #16]
 801f692:	429a      	cmp	r2, r3
 801f694:	d106      	bne.n	801f6a4 <ip_reass_remove_oldest_datagram+0x4c>
 801f696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f698:	899a      	ldrh	r2, [r3, #12]
 801f69a:	687b      	ldr	r3, [r7, #4]
 801f69c:	889b      	ldrh	r3, [r3, #4]
 801f69e:	b29b      	uxth	r3, r3
 801f6a0:	429a      	cmp	r2, r3
 801f6a2:	d014      	beq.n	801f6ce <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801f6a4:	693b      	ldr	r3, [r7, #16]
 801f6a6:	3301      	adds	r3, #1
 801f6a8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801f6aa:	6a3b      	ldr	r3, [r7, #32]
 801f6ac:	2b00      	cmp	r3, #0
 801f6ae:	d104      	bne.n	801f6ba <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801f6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f6b2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801f6b4:	69fb      	ldr	r3, [r7, #28]
 801f6b6:	61bb      	str	r3, [r7, #24]
 801f6b8:	e009      	b.n	801f6ce <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801f6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f6bc:	7fda      	ldrb	r2, [r3, #31]
 801f6be:	6a3b      	ldr	r3, [r7, #32]
 801f6c0:	7fdb      	ldrb	r3, [r3, #31]
 801f6c2:	429a      	cmp	r2, r3
 801f6c4:	d803      	bhi.n	801f6ce <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801f6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f6c8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801f6ca:	69fb      	ldr	r3, [r7, #28]
 801f6cc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801f6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f6d0:	681b      	ldr	r3, [r3, #0]
 801f6d2:	2b00      	cmp	r3, #0
 801f6d4:	d001      	beq.n	801f6da <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801f6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f6d8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801f6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f6dc:	681b      	ldr	r3, [r3, #0]
 801f6de:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801f6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f6e2:	2b00      	cmp	r3, #0
 801f6e4:	d1cb      	bne.n	801f67e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801f6e6:	6a3b      	ldr	r3, [r7, #32]
 801f6e8:	2b00      	cmp	r3, #0
 801f6ea:	d008      	beq.n	801f6fe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801f6ec:	69b9      	ldr	r1, [r7, #24]
 801f6ee:	6a38      	ldr	r0, [r7, #32]
 801f6f0:	f7ff ff0e 	bl	801f510 <ip_reass_free_complete_datagram>
 801f6f4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801f6f6:	697a      	ldr	r2, [r7, #20]
 801f6f8:	68fb      	ldr	r3, [r7, #12]
 801f6fa:	4413      	add	r3, r2
 801f6fc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801f6fe:	697a      	ldr	r2, [r7, #20]
 801f700:	683b      	ldr	r3, [r7, #0]
 801f702:	429a      	cmp	r2, r3
 801f704:	da02      	bge.n	801f70c <ip_reass_remove_oldest_datagram+0xb4>
 801f706:	693b      	ldr	r3, [r7, #16]
 801f708:	2b01      	cmp	r3, #1
 801f70a:	dcac      	bgt.n	801f666 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801f70c:	697b      	ldr	r3, [r7, #20]
}
 801f70e:	4618      	mov	r0, r3
 801f710:	3728      	adds	r7, #40	@ 0x28
 801f712:	46bd      	mov	sp, r7
 801f714:	bd80      	pop	{r7, pc}
 801f716:	bf00      	nop
 801f718:	20004d80 	.word	0x20004d80

0801f71c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801f71c:	b580      	push	{r7, lr}
 801f71e:	b084      	sub	sp, #16
 801f720:	af00      	add	r7, sp, #0
 801f722:	6078      	str	r0, [r7, #4]
 801f724:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801f726:	2004      	movs	r0, #4
 801f728:	f7f3 fdca 	bl	80132c0 <memp_malloc>
 801f72c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801f72e:	68fb      	ldr	r3, [r7, #12]
 801f730:	2b00      	cmp	r3, #0
 801f732:	d110      	bne.n	801f756 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801f734:	6839      	ldr	r1, [r7, #0]
 801f736:	6878      	ldr	r0, [r7, #4]
 801f738:	f7ff ff8e 	bl	801f658 <ip_reass_remove_oldest_datagram>
 801f73c:	4602      	mov	r2, r0
 801f73e:	683b      	ldr	r3, [r7, #0]
 801f740:	4293      	cmp	r3, r2
 801f742:	dc03      	bgt.n	801f74c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801f744:	2004      	movs	r0, #4
 801f746:	f7f3 fdbb 	bl	80132c0 <memp_malloc>
 801f74a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801f74c:	68fb      	ldr	r3, [r7, #12]
 801f74e:	2b00      	cmp	r3, #0
 801f750:	d101      	bne.n	801f756 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801f752:	2300      	movs	r3, #0
 801f754:	e016      	b.n	801f784 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801f756:	2220      	movs	r2, #32
 801f758:	2100      	movs	r1, #0
 801f75a:	68f8      	ldr	r0, [r7, #12]
 801f75c:	f001 fffa 	bl	8021754 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801f760:	68fb      	ldr	r3, [r7, #12]
 801f762:	220f      	movs	r2, #15
 801f764:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801f766:	4b09      	ldr	r3, [pc, #36]	@ (801f78c <ip_reass_enqueue_new_datagram+0x70>)
 801f768:	681a      	ldr	r2, [r3, #0]
 801f76a:	68fb      	ldr	r3, [r7, #12]
 801f76c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801f76e:	4a07      	ldr	r2, [pc, #28]	@ (801f78c <ip_reass_enqueue_new_datagram+0x70>)
 801f770:	68fb      	ldr	r3, [r7, #12]
 801f772:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801f774:	68fb      	ldr	r3, [r7, #12]
 801f776:	3308      	adds	r3, #8
 801f778:	2214      	movs	r2, #20
 801f77a:	6879      	ldr	r1, [r7, #4]
 801f77c:	4618      	mov	r0, r3
 801f77e:	f002 f902 	bl	8021986 <memcpy>
  return ipr;
 801f782:	68fb      	ldr	r3, [r7, #12]
}
 801f784:	4618      	mov	r0, r3
 801f786:	3710      	adds	r7, #16
 801f788:	46bd      	mov	sp, r7
 801f78a:	bd80      	pop	{r7, pc}
 801f78c:	20004d80 	.word	0x20004d80

0801f790 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801f790:	b580      	push	{r7, lr}
 801f792:	b082      	sub	sp, #8
 801f794:	af00      	add	r7, sp, #0
 801f796:	6078      	str	r0, [r7, #4]
 801f798:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801f79a:	4b10      	ldr	r3, [pc, #64]	@ (801f7dc <ip_reass_dequeue_datagram+0x4c>)
 801f79c:	681b      	ldr	r3, [r3, #0]
 801f79e:	687a      	ldr	r2, [r7, #4]
 801f7a0:	429a      	cmp	r2, r3
 801f7a2:	d104      	bne.n	801f7ae <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801f7a4:	687b      	ldr	r3, [r7, #4]
 801f7a6:	681b      	ldr	r3, [r3, #0]
 801f7a8:	4a0c      	ldr	r2, [pc, #48]	@ (801f7dc <ip_reass_dequeue_datagram+0x4c>)
 801f7aa:	6013      	str	r3, [r2, #0]
 801f7ac:	e00d      	b.n	801f7ca <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801f7ae:	683b      	ldr	r3, [r7, #0]
 801f7b0:	2b00      	cmp	r3, #0
 801f7b2:	d106      	bne.n	801f7c2 <ip_reass_dequeue_datagram+0x32>
 801f7b4:	4b0a      	ldr	r3, [pc, #40]	@ (801f7e0 <ip_reass_dequeue_datagram+0x50>)
 801f7b6:	f240 1245 	movw	r2, #325	@ 0x145
 801f7ba:	490a      	ldr	r1, [pc, #40]	@ (801f7e4 <ip_reass_dequeue_datagram+0x54>)
 801f7bc:	480a      	ldr	r0, [pc, #40]	@ (801f7e8 <ip_reass_dequeue_datagram+0x58>)
 801f7be:	f001 fdf9 	bl	80213b4 <iprintf>
    prev->next = ipr->next;
 801f7c2:	687b      	ldr	r3, [r7, #4]
 801f7c4:	681a      	ldr	r2, [r3, #0]
 801f7c6:	683b      	ldr	r3, [r7, #0]
 801f7c8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801f7ca:	6879      	ldr	r1, [r7, #4]
 801f7cc:	2004      	movs	r0, #4
 801f7ce:	f7f3 fde7 	bl	80133a0 <memp_free>
}
 801f7d2:	bf00      	nop
 801f7d4:	3708      	adds	r7, #8
 801f7d6:	46bd      	mov	sp, r7
 801f7d8:	bd80      	pop	{r7, pc}
 801f7da:	bf00      	nop
 801f7dc:	20004d80 	.word	0x20004d80
 801f7e0:	080264a0 	.word	0x080264a0
 801f7e4:	08026568 	.word	0x08026568
 801f7e8:	080264e8 	.word	0x080264e8

0801f7ec <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801f7ec:	b580      	push	{r7, lr}
 801f7ee:	b08c      	sub	sp, #48	@ 0x30
 801f7f0:	af00      	add	r7, sp, #0
 801f7f2:	60f8      	str	r0, [r7, #12]
 801f7f4:	60b9      	str	r1, [r7, #8]
 801f7f6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801f7f8:	2300      	movs	r3, #0
 801f7fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801f7fc:	2301      	movs	r3, #1
 801f7fe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801f800:	68bb      	ldr	r3, [r7, #8]
 801f802:	685b      	ldr	r3, [r3, #4]
 801f804:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801f806:	69fb      	ldr	r3, [r7, #28]
 801f808:	885b      	ldrh	r3, [r3, #2]
 801f80a:	b29b      	uxth	r3, r3
 801f80c:	4618      	mov	r0, r3
 801f80e:	f7f2 fef5 	bl	80125fc <lwip_htons>
 801f812:	4603      	mov	r3, r0
 801f814:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801f816:	69fb      	ldr	r3, [r7, #28]
 801f818:	781b      	ldrb	r3, [r3, #0]
 801f81a:	f003 030f 	and.w	r3, r3, #15
 801f81e:	b2db      	uxtb	r3, r3
 801f820:	009b      	lsls	r3, r3, #2
 801f822:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801f824:	7e7b      	ldrb	r3, [r7, #25]
 801f826:	b29b      	uxth	r3, r3
 801f828:	8b7a      	ldrh	r2, [r7, #26]
 801f82a:	429a      	cmp	r2, r3
 801f82c:	d202      	bcs.n	801f834 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f82e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f832:	e135      	b.n	801faa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801f834:	7e7b      	ldrb	r3, [r7, #25]
 801f836:	b29b      	uxth	r3, r3
 801f838:	8b7a      	ldrh	r2, [r7, #26]
 801f83a:	1ad3      	subs	r3, r2, r3
 801f83c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801f83e:	69fb      	ldr	r3, [r7, #28]
 801f840:	88db      	ldrh	r3, [r3, #6]
 801f842:	b29b      	uxth	r3, r3
 801f844:	4618      	mov	r0, r3
 801f846:	f7f2 fed9 	bl	80125fc <lwip_htons>
 801f84a:	4603      	mov	r3, r0
 801f84c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f850:	b29b      	uxth	r3, r3
 801f852:	00db      	lsls	r3, r3, #3
 801f854:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801f856:	68bb      	ldr	r3, [r7, #8]
 801f858:	685b      	ldr	r3, [r3, #4]
 801f85a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801f85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f85e:	2200      	movs	r2, #0
 801f860:	701a      	strb	r2, [r3, #0]
 801f862:	2200      	movs	r2, #0
 801f864:	705a      	strb	r2, [r3, #1]
 801f866:	2200      	movs	r2, #0
 801f868:	709a      	strb	r2, [r3, #2]
 801f86a:	2200      	movs	r2, #0
 801f86c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801f86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f870:	8afa      	ldrh	r2, [r7, #22]
 801f872:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801f874:	8afa      	ldrh	r2, [r7, #22]
 801f876:	8b7b      	ldrh	r3, [r7, #26]
 801f878:	4413      	add	r3, r2
 801f87a:	b29a      	uxth	r2, r3
 801f87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f87e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801f880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f882:	88db      	ldrh	r3, [r3, #6]
 801f884:	b29b      	uxth	r3, r3
 801f886:	8afa      	ldrh	r2, [r7, #22]
 801f888:	429a      	cmp	r2, r3
 801f88a:	d902      	bls.n	801f892 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f88c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f890:	e106      	b.n	801faa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801f892:	68fb      	ldr	r3, [r7, #12]
 801f894:	685b      	ldr	r3, [r3, #4]
 801f896:	627b      	str	r3, [r7, #36]	@ 0x24
 801f898:	e068      	b.n	801f96c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801f89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f89c:	685b      	ldr	r3, [r3, #4]
 801f89e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801f8a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f8a2:	889b      	ldrh	r3, [r3, #4]
 801f8a4:	b29a      	uxth	r2, r3
 801f8a6:	693b      	ldr	r3, [r7, #16]
 801f8a8:	889b      	ldrh	r3, [r3, #4]
 801f8aa:	b29b      	uxth	r3, r3
 801f8ac:	429a      	cmp	r2, r3
 801f8ae:	d235      	bcs.n	801f91c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801f8b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f8b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f8b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801f8b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f8b8:	2b00      	cmp	r3, #0
 801f8ba:	d020      	beq.n	801f8fe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801f8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f8be:	889b      	ldrh	r3, [r3, #4]
 801f8c0:	b29a      	uxth	r2, r3
 801f8c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f8c4:	88db      	ldrh	r3, [r3, #6]
 801f8c6:	b29b      	uxth	r3, r3
 801f8c8:	429a      	cmp	r2, r3
 801f8ca:	d307      	bcc.n	801f8dc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801f8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f8ce:	88db      	ldrh	r3, [r3, #6]
 801f8d0:	b29a      	uxth	r2, r3
 801f8d2:	693b      	ldr	r3, [r7, #16]
 801f8d4:	889b      	ldrh	r3, [r3, #4]
 801f8d6:	b29b      	uxth	r3, r3
 801f8d8:	429a      	cmp	r2, r3
 801f8da:	d902      	bls.n	801f8e2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f8dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f8e0:	e0de      	b.n	801faa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801f8e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f8e4:	68ba      	ldr	r2, [r7, #8]
 801f8e6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801f8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f8ea:	88db      	ldrh	r3, [r3, #6]
 801f8ec:	b29a      	uxth	r2, r3
 801f8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f8f0:	889b      	ldrh	r3, [r3, #4]
 801f8f2:	b29b      	uxth	r3, r3
 801f8f4:	429a      	cmp	r2, r3
 801f8f6:	d03d      	beq.n	801f974 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801f8f8:	2300      	movs	r3, #0
 801f8fa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801f8fc:	e03a      	b.n	801f974 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801f8fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f900:	88db      	ldrh	r3, [r3, #6]
 801f902:	b29a      	uxth	r2, r3
 801f904:	693b      	ldr	r3, [r7, #16]
 801f906:	889b      	ldrh	r3, [r3, #4]
 801f908:	b29b      	uxth	r3, r3
 801f90a:	429a      	cmp	r2, r3
 801f90c:	d902      	bls.n	801f914 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f90e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f912:	e0c5      	b.n	801faa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801f914:	68fb      	ldr	r3, [r7, #12]
 801f916:	68ba      	ldr	r2, [r7, #8]
 801f918:	605a      	str	r2, [r3, #4]
      break;
 801f91a:	e02b      	b.n	801f974 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801f91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f91e:	889b      	ldrh	r3, [r3, #4]
 801f920:	b29a      	uxth	r2, r3
 801f922:	693b      	ldr	r3, [r7, #16]
 801f924:	889b      	ldrh	r3, [r3, #4]
 801f926:	b29b      	uxth	r3, r3
 801f928:	429a      	cmp	r2, r3
 801f92a:	d102      	bne.n	801f932 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f92c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f930:	e0b6      	b.n	801faa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801f932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f934:	889b      	ldrh	r3, [r3, #4]
 801f936:	b29a      	uxth	r2, r3
 801f938:	693b      	ldr	r3, [r7, #16]
 801f93a:	88db      	ldrh	r3, [r3, #6]
 801f93c:	b29b      	uxth	r3, r3
 801f93e:	429a      	cmp	r2, r3
 801f940:	d202      	bcs.n	801f948 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801f942:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f946:	e0ab      	b.n	801faa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801f948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f94a:	2b00      	cmp	r3, #0
 801f94c:	d009      	beq.n	801f962 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801f94e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f950:	88db      	ldrh	r3, [r3, #6]
 801f952:	b29a      	uxth	r2, r3
 801f954:	693b      	ldr	r3, [r7, #16]
 801f956:	889b      	ldrh	r3, [r3, #4]
 801f958:	b29b      	uxth	r3, r3
 801f95a:	429a      	cmp	r2, r3
 801f95c:	d001      	beq.n	801f962 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801f95e:	2300      	movs	r3, #0
 801f960:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801f962:	693b      	ldr	r3, [r7, #16]
 801f964:	681b      	ldr	r3, [r3, #0]
 801f966:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801f968:	693b      	ldr	r3, [r7, #16]
 801f96a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801f96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f96e:	2b00      	cmp	r3, #0
 801f970:	d193      	bne.n	801f89a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801f972:	e000      	b.n	801f976 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801f974:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801f976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f978:	2b00      	cmp	r3, #0
 801f97a:	d12d      	bne.n	801f9d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801f97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f97e:	2b00      	cmp	r3, #0
 801f980:	d01c      	beq.n	801f9bc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801f982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f984:	88db      	ldrh	r3, [r3, #6]
 801f986:	b29a      	uxth	r2, r3
 801f988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f98a:	889b      	ldrh	r3, [r3, #4]
 801f98c:	b29b      	uxth	r3, r3
 801f98e:	429a      	cmp	r2, r3
 801f990:	d906      	bls.n	801f9a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801f992:	4b45      	ldr	r3, [pc, #276]	@ (801faa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f994:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801f998:	4944      	ldr	r1, [pc, #272]	@ (801faac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801f99a:	4845      	ldr	r0, [pc, #276]	@ (801fab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f99c:	f001 fd0a 	bl	80213b4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801f9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f9a2:	68ba      	ldr	r2, [r7, #8]
 801f9a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801f9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f9a8:	88db      	ldrh	r3, [r3, #6]
 801f9aa:	b29a      	uxth	r2, r3
 801f9ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f9ae:	889b      	ldrh	r3, [r3, #4]
 801f9b0:	b29b      	uxth	r3, r3
 801f9b2:	429a      	cmp	r2, r3
 801f9b4:	d010      	beq.n	801f9d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801f9b6:	2300      	movs	r3, #0
 801f9b8:	623b      	str	r3, [r7, #32]
 801f9ba:	e00d      	b.n	801f9d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801f9bc:	68fb      	ldr	r3, [r7, #12]
 801f9be:	685b      	ldr	r3, [r3, #4]
 801f9c0:	2b00      	cmp	r3, #0
 801f9c2:	d006      	beq.n	801f9d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801f9c4:	4b38      	ldr	r3, [pc, #224]	@ (801faa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f9c6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801f9ca:	493a      	ldr	r1, [pc, #232]	@ (801fab4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801f9cc:	4838      	ldr	r0, [pc, #224]	@ (801fab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f9ce:	f001 fcf1 	bl	80213b4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801f9d2:	68fb      	ldr	r3, [r7, #12]
 801f9d4:	68ba      	ldr	r2, [r7, #8]
 801f9d6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801f9d8:	687b      	ldr	r3, [r7, #4]
 801f9da:	2b00      	cmp	r3, #0
 801f9dc:	d105      	bne.n	801f9ea <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801f9de:	68fb      	ldr	r3, [r7, #12]
 801f9e0:	7f9b      	ldrb	r3, [r3, #30]
 801f9e2:	f003 0301 	and.w	r3, r3, #1
 801f9e6:	2b00      	cmp	r3, #0
 801f9e8:	d059      	beq.n	801fa9e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801f9ea:	6a3b      	ldr	r3, [r7, #32]
 801f9ec:	2b00      	cmp	r3, #0
 801f9ee:	d04f      	beq.n	801fa90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801f9f0:	68fb      	ldr	r3, [r7, #12]
 801f9f2:	685b      	ldr	r3, [r3, #4]
 801f9f4:	2b00      	cmp	r3, #0
 801f9f6:	d006      	beq.n	801fa06 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801f9f8:	68fb      	ldr	r3, [r7, #12]
 801f9fa:	685b      	ldr	r3, [r3, #4]
 801f9fc:	685b      	ldr	r3, [r3, #4]
 801f9fe:	889b      	ldrh	r3, [r3, #4]
 801fa00:	b29b      	uxth	r3, r3
 801fa02:	2b00      	cmp	r3, #0
 801fa04:	d002      	beq.n	801fa0c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801fa06:	2300      	movs	r3, #0
 801fa08:	623b      	str	r3, [r7, #32]
 801fa0a:	e041      	b.n	801fa90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801fa0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fa0e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801fa10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fa12:	681b      	ldr	r3, [r3, #0]
 801fa14:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801fa16:	e012      	b.n	801fa3e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801fa18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fa1a:	685b      	ldr	r3, [r3, #4]
 801fa1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801fa1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fa20:	88db      	ldrh	r3, [r3, #6]
 801fa22:	b29a      	uxth	r2, r3
 801fa24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fa26:	889b      	ldrh	r3, [r3, #4]
 801fa28:	b29b      	uxth	r3, r3
 801fa2a:	429a      	cmp	r2, r3
 801fa2c:	d002      	beq.n	801fa34 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801fa2e:	2300      	movs	r3, #0
 801fa30:	623b      	str	r3, [r7, #32]
            break;
 801fa32:	e007      	b.n	801fa44 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801fa34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fa36:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801fa38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fa3a:	681b      	ldr	r3, [r3, #0]
 801fa3c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801fa3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fa40:	2b00      	cmp	r3, #0
 801fa42:	d1e9      	bne.n	801fa18 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801fa44:	6a3b      	ldr	r3, [r7, #32]
 801fa46:	2b00      	cmp	r3, #0
 801fa48:	d022      	beq.n	801fa90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801fa4a:	68fb      	ldr	r3, [r7, #12]
 801fa4c:	685b      	ldr	r3, [r3, #4]
 801fa4e:	2b00      	cmp	r3, #0
 801fa50:	d106      	bne.n	801fa60 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801fa52:	4b15      	ldr	r3, [pc, #84]	@ (801faa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801fa54:	f240 12df 	movw	r2, #479	@ 0x1df
 801fa58:	4917      	ldr	r1, [pc, #92]	@ (801fab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801fa5a:	4815      	ldr	r0, [pc, #84]	@ (801fab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801fa5c:	f001 fcaa 	bl	80213b4 <iprintf>
          LWIP_ASSERT("sanity check",
 801fa60:	68fb      	ldr	r3, [r7, #12]
 801fa62:	685b      	ldr	r3, [r3, #4]
 801fa64:	685b      	ldr	r3, [r3, #4]
 801fa66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801fa68:	429a      	cmp	r2, r3
 801fa6a:	d106      	bne.n	801fa7a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801fa6c:	4b0e      	ldr	r3, [pc, #56]	@ (801faa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801fa6e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801fa72:	4911      	ldr	r1, [pc, #68]	@ (801fab8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801fa74:	480e      	ldr	r0, [pc, #56]	@ (801fab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801fa76:	f001 fc9d 	bl	80213b4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801fa7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fa7c:	681b      	ldr	r3, [r3, #0]
 801fa7e:	2b00      	cmp	r3, #0
 801fa80:	d006      	beq.n	801fa90 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801fa82:	4b09      	ldr	r3, [pc, #36]	@ (801faa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801fa84:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801fa88:	490c      	ldr	r1, [pc, #48]	@ (801fabc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801fa8a:	4809      	ldr	r0, [pc, #36]	@ (801fab0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801fa8c:	f001 fc92 	bl	80213b4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801fa90:	6a3b      	ldr	r3, [r7, #32]
 801fa92:	2b00      	cmp	r3, #0
 801fa94:	bf14      	ite	ne
 801fa96:	2301      	movne	r3, #1
 801fa98:	2300      	moveq	r3, #0
 801fa9a:	b2db      	uxtb	r3, r3
 801fa9c:	e000      	b.n	801faa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801fa9e:	2300      	movs	r3, #0
}
 801faa0:	4618      	mov	r0, r3
 801faa2:	3730      	adds	r7, #48	@ 0x30
 801faa4:	46bd      	mov	sp, r7
 801faa6:	bd80      	pop	{r7, pc}
 801faa8:	080264a0 	.word	0x080264a0
 801faac:	08026584 	.word	0x08026584
 801fab0:	080264e8 	.word	0x080264e8
 801fab4:	080265a4 	.word	0x080265a4
 801fab8:	080265dc 	.word	0x080265dc
 801fabc:	080265ec 	.word	0x080265ec

0801fac0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801fac0:	b580      	push	{r7, lr}
 801fac2:	b08e      	sub	sp, #56	@ 0x38
 801fac4:	af00      	add	r7, sp, #0
 801fac6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801fac8:	687b      	ldr	r3, [r7, #4]
 801faca:	685b      	ldr	r3, [r3, #4]
 801facc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801face:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fad0:	781b      	ldrb	r3, [r3, #0]
 801fad2:	f003 030f 	and.w	r3, r3, #15
 801fad6:	b2db      	uxtb	r3, r3
 801fad8:	009b      	lsls	r3, r3, #2
 801fada:	b2db      	uxtb	r3, r3
 801fadc:	2b14      	cmp	r3, #20
 801fade:	f040 8171 	bne.w	801fdc4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801fae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fae4:	88db      	ldrh	r3, [r3, #6]
 801fae6:	b29b      	uxth	r3, r3
 801fae8:	4618      	mov	r0, r3
 801faea:	f7f2 fd87 	bl	80125fc <lwip_htons>
 801faee:	4603      	mov	r3, r0
 801faf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801faf4:	b29b      	uxth	r3, r3
 801faf6:	00db      	lsls	r3, r3, #3
 801faf8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801fafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fafc:	885b      	ldrh	r3, [r3, #2]
 801fafe:	b29b      	uxth	r3, r3
 801fb00:	4618      	mov	r0, r3
 801fb02:	f7f2 fd7b 	bl	80125fc <lwip_htons>
 801fb06:	4603      	mov	r3, r0
 801fb08:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801fb0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fb0c:	781b      	ldrb	r3, [r3, #0]
 801fb0e:	f003 030f 	and.w	r3, r3, #15
 801fb12:	b2db      	uxtb	r3, r3
 801fb14:	009b      	lsls	r3, r3, #2
 801fb16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801fb1a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801fb1e:	b29b      	uxth	r3, r3
 801fb20:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801fb22:	429a      	cmp	r2, r3
 801fb24:	f0c0 8150 	bcc.w	801fdc8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801fb28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801fb2c:	b29b      	uxth	r3, r3
 801fb2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801fb30:	1ad3      	subs	r3, r2, r3
 801fb32:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801fb34:	6878      	ldr	r0, [r7, #4]
 801fb36:	f7f4 fbad 	bl	8014294 <pbuf_clen>
 801fb3a:	4603      	mov	r3, r0
 801fb3c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801fb3e:	4b8c      	ldr	r3, [pc, #560]	@ (801fd70 <ip4_reass+0x2b0>)
 801fb40:	881b      	ldrh	r3, [r3, #0]
 801fb42:	461a      	mov	r2, r3
 801fb44:	8c3b      	ldrh	r3, [r7, #32]
 801fb46:	4413      	add	r3, r2
 801fb48:	2b0a      	cmp	r3, #10
 801fb4a:	dd10      	ble.n	801fb6e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801fb4c:	8c3b      	ldrh	r3, [r7, #32]
 801fb4e:	4619      	mov	r1, r3
 801fb50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801fb52:	f7ff fd81 	bl	801f658 <ip_reass_remove_oldest_datagram>
 801fb56:	4603      	mov	r3, r0
 801fb58:	2b00      	cmp	r3, #0
 801fb5a:	f000 8137 	beq.w	801fdcc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801fb5e:	4b84      	ldr	r3, [pc, #528]	@ (801fd70 <ip4_reass+0x2b0>)
 801fb60:	881b      	ldrh	r3, [r3, #0]
 801fb62:	461a      	mov	r2, r3
 801fb64:	8c3b      	ldrh	r3, [r7, #32]
 801fb66:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801fb68:	2b0a      	cmp	r3, #10
 801fb6a:	f300 812f 	bgt.w	801fdcc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801fb6e:	4b81      	ldr	r3, [pc, #516]	@ (801fd74 <ip4_reass+0x2b4>)
 801fb70:	681b      	ldr	r3, [r3, #0]
 801fb72:	633b      	str	r3, [r7, #48]	@ 0x30
 801fb74:	e015      	b.n	801fba2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801fb76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fb78:	695a      	ldr	r2, [r3, #20]
 801fb7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fb7c:	68db      	ldr	r3, [r3, #12]
 801fb7e:	429a      	cmp	r2, r3
 801fb80:	d10c      	bne.n	801fb9c <ip4_reass+0xdc>
 801fb82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fb84:	699a      	ldr	r2, [r3, #24]
 801fb86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fb88:	691b      	ldr	r3, [r3, #16]
 801fb8a:	429a      	cmp	r2, r3
 801fb8c:	d106      	bne.n	801fb9c <ip4_reass+0xdc>
 801fb8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fb90:	899a      	ldrh	r2, [r3, #12]
 801fb92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fb94:	889b      	ldrh	r3, [r3, #4]
 801fb96:	b29b      	uxth	r3, r3
 801fb98:	429a      	cmp	r2, r3
 801fb9a:	d006      	beq.n	801fbaa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801fb9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fb9e:	681b      	ldr	r3, [r3, #0]
 801fba0:	633b      	str	r3, [r7, #48]	@ 0x30
 801fba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fba4:	2b00      	cmp	r3, #0
 801fba6:	d1e6      	bne.n	801fb76 <ip4_reass+0xb6>
 801fba8:	e000      	b.n	801fbac <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801fbaa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801fbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fbae:	2b00      	cmp	r3, #0
 801fbb0:	d109      	bne.n	801fbc6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801fbb2:	8c3b      	ldrh	r3, [r7, #32]
 801fbb4:	4619      	mov	r1, r3
 801fbb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801fbb8:	f7ff fdb0 	bl	801f71c <ip_reass_enqueue_new_datagram>
 801fbbc:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801fbbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fbc0:	2b00      	cmp	r3, #0
 801fbc2:	d11c      	bne.n	801fbfe <ip4_reass+0x13e>
      goto nullreturn;
 801fbc4:	e105      	b.n	801fdd2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801fbc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fbc8:	88db      	ldrh	r3, [r3, #6]
 801fbca:	b29b      	uxth	r3, r3
 801fbcc:	4618      	mov	r0, r3
 801fbce:	f7f2 fd15 	bl	80125fc <lwip_htons>
 801fbd2:	4603      	mov	r3, r0
 801fbd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801fbd8:	2b00      	cmp	r3, #0
 801fbda:	d110      	bne.n	801fbfe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801fbdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fbde:	89db      	ldrh	r3, [r3, #14]
 801fbe0:	4618      	mov	r0, r3
 801fbe2:	f7f2 fd0b 	bl	80125fc <lwip_htons>
 801fbe6:	4603      	mov	r3, r0
 801fbe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801fbec:	2b00      	cmp	r3, #0
 801fbee:	d006      	beq.n	801fbfe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801fbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fbf2:	3308      	adds	r3, #8
 801fbf4:	2214      	movs	r2, #20
 801fbf6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801fbf8:	4618      	mov	r0, r3
 801fbfa:	f001 fec4 	bl	8021986 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801fbfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fc00:	88db      	ldrh	r3, [r3, #6]
 801fc02:	b29b      	uxth	r3, r3
 801fc04:	f003 0320 	and.w	r3, r3, #32
 801fc08:	2b00      	cmp	r3, #0
 801fc0a:	bf0c      	ite	eq
 801fc0c:	2301      	moveq	r3, #1
 801fc0e:	2300      	movne	r3, #0
 801fc10:	b2db      	uxtb	r3, r3
 801fc12:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801fc14:	69fb      	ldr	r3, [r7, #28]
 801fc16:	2b00      	cmp	r3, #0
 801fc18:	d00e      	beq.n	801fc38 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801fc1a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801fc1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801fc1e:	4413      	add	r3, r2
 801fc20:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801fc22:	8b7a      	ldrh	r2, [r7, #26]
 801fc24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801fc26:	429a      	cmp	r2, r3
 801fc28:	f0c0 80a0 	bcc.w	801fd6c <ip4_reass+0x2ac>
 801fc2c:	8b7b      	ldrh	r3, [r7, #26]
 801fc2e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801fc32:	4293      	cmp	r3, r2
 801fc34:	f200 809a 	bhi.w	801fd6c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801fc38:	69fa      	ldr	r2, [r7, #28]
 801fc3a:	6879      	ldr	r1, [r7, #4]
 801fc3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801fc3e:	f7ff fdd5 	bl	801f7ec <ip_reass_chain_frag_into_datagram_and_validate>
 801fc42:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801fc44:	697b      	ldr	r3, [r7, #20]
 801fc46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801fc4a:	f000 809b 	beq.w	801fd84 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801fc4e:	4b48      	ldr	r3, [pc, #288]	@ (801fd70 <ip4_reass+0x2b0>)
 801fc50:	881a      	ldrh	r2, [r3, #0]
 801fc52:	8c3b      	ldrh	r3, [r7, #32]
 801fc54:	4413      	add	r3, r2
 801fc56:	b29a      	uxth	r2, r3
 801fc58:	4b45      	ldr	r3, [pc, #276]	@ (801fd70 <ip4_reass+0x2b0>)
 801fc5a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801fc5c:	69fb      	ldr	r3, [r7, #28]
 801fc5e:	2b00      	cmp	r3, #0
 801fc60:	d00d      	beq.n	801fc7e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801fc62:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801fc64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801fc66:	4413      	add	r3, r2
 801fc68:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801fc6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fc6c:	8a7a      	ldrh	r2, [r7, #18]
 801fc6e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801fc70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fc72:	7f9b      	ldrb	r3, [r3, #30]
 801fc74:	f043 0301 	orr.w	r3, r3, #1
 801fc78:	b2da      	uxtb	r2, r3
 801fc7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fc7c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801fc7e:	697b      	ldr	r3, [r7, #20]
 801fc80:	2b01      	cmp	r3, #1
 801fc82:	d171      	bne.n	801fd68 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801fc84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fc86:	8b9b      	ldrh	r3, [r3, #28]
 801fc88:	3314      	adds	r3, #20
 801fc8a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801fc8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fc8e:	685b      	ldr	r3, [r3, #4]
 801fc90:	685b      	ldr	r3, [r3, #4]
 801fc92:	681b      	ldr	r3, [r3, #0]
 801fc94:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801fc96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fc98:	685b      	ldr	r3, [r3, #4]
 801fc9a:	685b      	ldr	r3, [r3, #4]
 801fc9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801fc9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fca0:	3308      	adds	r3, #8
 801fca2:	2214      	movs	r2, #20
 801fca4:	4619      	mov	r1, r3
 801fca6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801fca8:	f001 fe6d 	bl	8021986 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801fcac:	8a3b      	ldrh	r3, [r7, #16]
 801fcae:	4618      	mov	r0, r3
 801fcb0:	f7f2 fca4 	bl	80125fc <lwip_htons>
 801fcb4:	4603      	mov	r3, r0
 801fcb6:	461a      	mov	r2, r3
 801fcb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fcba:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801fcbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fcbe:	2200      	movs	r2, #0
 801fcc0:	719a      	strb	r2, [r3, #6]
 801fcc2:	2200      	movs	r2, #0
 801fcc4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801fcc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fcc8:	2200      	movs	r2, #0
 801fcca:	729a      	strb	r2, [r3, #10]
 801fccc:	2200      	movs	r2, #0
 801fcce:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801fcd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fcd2:	685b      	ldr	r3, [r3, #4]
 801fcd4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801fcd6:	e00d      	b.n	801fcf4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801fcd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fcda:	685b      	ldr	r3, [r3, #4]
 801fcdc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801fcde:	2114      	movs	r1, #20
 801fce0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801fce2:	f7f4 f9c3 	bl	801406c <pbuf_remove_header>
      pbuf_cat(p, r);
 801fce6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801fce8:	6878      	ldr	r0, [r7, #4]
 801fcea:	f7f4 fb13 	bl	8014314 <pbuf_cat>
      r = iprh->next_pbuf;
 801fcee:	68fb      	ldr	r3, [r7, #12]
 801fcf0:	681b      	ldr	r3, [r3, #0]
 801fcf2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801fcf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fcf6:	2b00      	cmp	r3, #0
 801fcf8:	d1ee      	bne.n	801fcd8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801fcfa:	4b1e      	ldr	r3, [pc, #120]	@ (801fd74 <ip4_reass+0x2b4>)
 801fcfc:	681b      	ldr	r3, [r3, #0]
 801fcfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801fd00:	429a      	cmp	r2, r3
 801fd02:	d102      	bne.n	801fd0a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801fd04:	2300      	movs	r3, #0
 801fd06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801fd08:	e010      	b.n	801fd2c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801fd0a:	4b1a      	ldr	r3, [pc, #104]	@ (801fd74 <ip4_reass+0x2b4>)
 801fd0c:	681b      	ldr	r3, [r3, #0]
 801fd0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801fd10:	e007      	b.n	801fd22 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801fd12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fd14:	681b      	ldr	r3, [r3, #0]
 801fd16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801fd18:	429a      	cmp	r2, r3
 801fd1a:	d006      	beq.n	801fd2a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801fd1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fd1e:	681b      	ldr	r3, [r3, #0]
 801fd20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801fd22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fd24:	2b00      	cmp	r3, #0
 801fd26:	d1f4      	bne.n	801fd12 <ip4_reass+0x252>
 801fd28:	e000      	b.n	801fd2c <ip4_reass+0x26c>
          break;
 801fd2a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801fd2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801fd2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801fd30:	f7ff fd2e 	bl	801f790 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801fd34:	6878      	ldr	r0, [r7, #4]
 801fd36:	f7f4 faad 	bl	8014294 <pbuf_clen>
 801fd3a:	4603      	mov	r3, r0
 801fd3c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801fd3e:	4b0c      	ldr	r3, [pc, #48]	@ (801fd70 <ip4_reass+0x2b0>)
 801fd40:	881b      	ldrh	r3, [r3, #0]
 801fd42:	8c3a      	ldrh	r2, [r7, #32]
 801fd44:	429a      	cmp	r2, r3
 801fd46:	d906      	bls.n	801fd56 <ip4_reass+0x296>
 801fd48:	4b0b      	ldr	r3, [pc, #44]	@ (801fd78 <ip4_reass+0x2b8>)
 801fd4a:	f240 229b 	movw	r2, #667	@ 0x29b
 801fd4e:	490b      	ldr	r1, [pc, #44]	@ (801fd7c <ip4_reass+0x2bc>)
 801fd50:	480b      	ldr	r0, [pc, #44]	@ (801fd80 <ip4_reass+0x2c0>)
 801fd52:	f001 fb2f 	bl	80213b4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801fd56:	4b06      	ldr	r3, [pc, #24]	@ (801fd70 <ip4_reass+0x2b0>)
 801fd58:	881a      	ldrh	r2, [r3, #0]
 801fd5a:	8c3b      	ldrh	r3, [r7, #32]
 801fd5c:	1ad3      	subs	r3, r2, r3
 801fd5e:	b29a      	uxth	r2, r3
 801fd60:	4b03      	ldr	r3, [pc, #12]	@ (801fd70 <ip4_reass+0x2b0>)
 801fd62:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801fd64:	687b      	ldr	r3, [r7, #4]
 801fd66:	e038      	b.n	801fdda <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801fd68:	2300      	movs	r3, #0
 801fd6a:	e036      	b.n	801fdda <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801fd6c:	bf00      	nop
 801fd6e:	e00a      	b.n	801fd86 <ip4_reass+0x2c6>
 801fd70:	20004d84 	.word	0x20004d84
 801fd74:	20004d80 	.word	0x20004d80
 801fd78:	080264a0 	.word	0x080264a0
 801fd7c:	08026610 	.word	0x08026610
 801fd80:	080264e8 	.word	0x080264e8
    goto nullreturn_ipr;
 801fd84:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801fd86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fd88:	2b00      	cmp	r3, #0
 801fd8a:	d106      	bne.n	801fd9a <ip4_reass+0x2da>
 801fd8c:	4b15      	ldr	r3, [pc, #84]	@ (801fde4 <ip4_reass+0x324>)
 801fd8e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801fd92:	4915      	ldr	r1, [pc, #84]	@ (801fde8 <ip4_reass+0x328>)
 801fd94:	4815      	ldr	r0, [pc, #84]	@ (801fdec <ip4_reass+0x32c>)
 801fd96:	f001 fb0d 	bl	80213b4 <iprintf>
  if (ipr->p == NULL) {
 801fd9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fd9c:	685b      	ldr	r3, [r3, #4]
 801fd9e:	2b00      	cmp	r3, #0
 801fda0:	d116      	bne.n	801fdd0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801fda2:	4b13      	ldr	r3, [pc, #76]	@ (801fdf0 <ip4_reass+0x330>)
 801fda4:	681b      	ldr	r3, [r3, #0]
 801fda6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801fda8:	429a      	cmp	r2, r3
 801fdaa:	d006      	beq.n	801fdba <ip4_reass+0x2fa>
 801fdac:	4b0d      	ldr	r3, [pc, #52]	@ (801fde4 <ip4_reass+0x324>)
 801fdae:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801fdb2:	4910      	ldr	r1, [pc, #64]	@ (801fdf4 <ip4_reass+0x334>)
 801fdb4:	480d      	ldr	r0, [pc, #52]	@ (801fdec <ip4_reass+0x32c>)
 801fdb6:	f001 fafd 	bl	80213b4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801fdba:	2100      	movs	r1, #0
 801fdbc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801fdbe:	f7ff fce7 	bl	801f790 <ip_reass_dequeue_datagram>
 801fdc2:	e006      	b.n	801fdd2 <ip4_reass+0x312>
    goto nullreturn;
 801fdc4:	bf00      	nop
 801fdc6:	e004      	b.n	801fdd2 <ip4_reass+0x312>
    goto nullreturn;
 801fdc8:	bf00      	nop
 801fdca:	e002      	b.n	801fdd2 <ip4_reass+0x312>
      goto nullreturn;
 801fdcc:	bf00      	nop
 801fdce:	e000      	b.n	801fdd2 <ip4_reass+0x312>
  }

nullreturn:
 801fdd0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801fdd2:	6878      	ldr	r0, [r7, #4]
 801fdd4:	f7f4 f9d0 	bl	8014178 <pbuf_free>
  return NULL;
 801fdd8:	2300      	movs	r3, #0
}
 801fdda:	4618      	mov	r0, r3
 801fddc:	3738      	adds	r7, #56	@ 0x38
 801fdde:	46bd      	mov	sp, r7
 801fde0:	bd80      	pop	{r7, pc}
 801fde2:	bf00      	nop
 801fde4:	080264a0 	.word	0x080264a0
 801fde8:	0802662c 	.word	0x0802662c
 801fdec:	080264e8 	.word	0x080264e8
 801fdf0:	20004d80 	.word	0x20004d80
 801fdf4:	08026638 	.word	0x08026638

0801fdf8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801fdf8:	b580      	push	{r7, lr}
 801fdfa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801fdfc:	2005      	movs	r0, #5
 801fdfe:	f7f3 fa5f 	bl	80132c0 <memp_malloc>
 801fe02:	4603      	mov	r3, r0
}
 801fe04:	4618      	mov	r0, r3
 801fe06:	bd80      	pop	{r7, pc}

0801fe08 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801fe08:	b580      	push	{r7, lr}
 801fe0a:	b082      	sub	sp, #8
 801fe0c:	af00      	add	r7, sp, #0
 801fe0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801fe10:	687b      	ldr	r3, [r7, #4]
 801fe12:	2b00      	cmp	r3, #0
 801fe14:	d106      	bne.n	801fe24 <ip_frag_free_pbuf_custom_ref+0x1c>
 801fe16:	4b07      	ldr	r3, [pc, #28]	@ (801fe34 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801fe18:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801fe1c:	4906      	ldr	r1, [pc, #24]	@ (801fe38 <ip_frag_free_pbuf_custom_ref+0x30>)
 801fe1e:	4807      	ldr	r0, [pc, #28]	@ (801fe3c <ip_frag_free_pbuf_custom_ref+0x34>)
 801fe20:	f001 fac8 	bl	80213b4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801fe24:	6879      	ldr	r1, [r7, #4]
 801fe26:	2005      	movs	r0, #5
 801fe28:	f7f3 faba 	bl	80133a0 <memp_free>
}
 801fe2c:	bf00      	nop
 801fe2e:	3708      	adds	r7, #8
 801fe30:	46bd      	mov	sp, r7
 801fe32:	bd80      	pop	{r7, pc}
 801fe34:	080264a0 	.word	0x080264a0
 801fe38:	08026658 	.word	0x08026658
 801fe3c:	080264e8 	.word	0x080264e8

0801fe40 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801fe40:	b580      	push	{r7, lr}
 801fe42:	b084      	sub	sp, #16
 801fe44:	af00      	add	r7, sp, #0
 801fe46:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801fe48:	687b      	ldr	r3, [r7, #4]
 801fe4a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801fe4c:	68fb      	ldr	r3, [r7, #12]
 801fe4e:	2b00      	cmp	r3, #0
 801fe50:	d106      	bne.n	801fe60 <ipfrag_free_pbuf_custom+0x20>
 801fe52:	4b11      	ldr	r3, [pc, #68]	@ (801fe98 <ipfrag_free_pbuf_custom+0x58>)
 801fe54:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801fe58:	4910      	ldr	r1, [pc, #64]	@ (801fe9c <ipfrag_free_pbuf_custom+0x5c>)
 801fe5a:	4811      	ldr	r0, [pc, #68]	@ (801fea0 <ipfrag_free_pbuf_custom+0x60>)
 801fe5c:	f001 faaa 	bl	80213b4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801fe60:	68fa      	ldr	r2, [r7, #12]
 801fe62:	687b      	ldr	r3, [r7, #4]
 801fe64:	429a      	cmp	r2, r3
 801fe66:	d006      	beq.n	801fe76 <ipfrag_free_pbuf_custom+0x36>
 801fe68:	4b0b      	ldr	r3, [pc, #44]	@ (801fe98 <ipfrag_free_pbuf_custom+0x58>)
 801fe6a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801fe6e:	490d      	ldr	r1, [pc, #52]	@ (801fea4 <ipfrag_free_pbuf_custom+0x64>)
 801fe70:	480b      	ldr	r0, [pc, #44]	@ (801fea0 <ipfrag_free_pbuf_custom+0x60>)
 801fe72:	f001 fa9f 	bl	80213b4 <iprintf>
  if (pcr->original != NULL) {
 801fe76:	68fb      	ldr	r3, [r7, #12]
 801fe78:	695b      	ldr	r3, [r3, #20]
 801fe7a:	2b00      	cmp	r3, #0
 801fe7c:	d004      	beq.n	801fe88 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801fe7e:	68fb      	ldr	r3, [r7, #12]
 801fe80:	695b      	ldr	r3, [r3, #20]
 801fe82:	4618      	mov	r0, r3
 801fe84:	f7f4 f978 	bl	8014178 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801fe88:	68f8      	ldr	r0, [r7, #12]
 801fe8a:	f7ff ffbd 	bl	801fe08 <ip_frag_free_pbuf_custom_ref>
}
 801fe8e:	bf00      	nop
 801fe90:	3710      	adds	r7, #16
 801fe92:	46bd      	mov	sp, r7
 801fe94:	bd80      	pop	{r7, pc}
 801fe96:	bf00      	nop
 801fe98:	080264a0 	.word	0x080264a0
 801fe9c:	08026664 	.word	0x08026664
 801fea0:	080264e8 	.word	0x080264e8
 801fea4:	08026670 	.word	0x08026670

0801fea8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801fea8:	b580      	push	{r7, lr}
 801feaa:	b094      	sub	sp, #80	@ 0x50
 801feac:	af02      	add	r7, sp, #8
 801feae:	60f8      	str	r0, [r7, #12]
 801feb0:	60b9      	str	r1, [r7, #8]
 801feb2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801feb4:	2300      	movs	r3, #0
 801feb6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801feba:	68bb      	ldr	r3, [r7, #8]
 801febc:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801febe:	3b14      	subs	r3, #20
 801fec0:	2b00      	cmp	r3, #0
 801fec2:	da00      	bge.n	801fec6 <ip4_frag+0x1e>
 801fec4:	3307      	adds	r3, #7
 801fec6:	10db      	asrs	r3, r3, #3
 801fec8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801feca:	2314      	movs	r3, #20
 801fecc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801fece:	68fb      	ldr	r3, [r7, #12]
 801fed0:	685b      	ldr	r3, [r3, #4]
 801fed2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801fed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fed6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801fed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801feda:	781b      	ldrb	r3, [r3, #0]
 801fedc:	f003 030f 	and.w	r3, r3, #15
 801fee0:	b2db      	uxtb	r3, r3
 801fee2:	009b      	lsls	r3, r3, #2
 801fee4:	b2db      	uxtb	r3, r3
 801fee6:	2b14      	cmp	r3, #20
 801fee8:	d002      	beq.n	801fef0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801feea:	f06f 0305 	mvn.w	r3, #5
 801feee:	e110      	b.n	8020112 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801fef0:	68fb      	ldr	r3, [r7, #12]
 801fef2:	895b      	ldrh	r3, [r3, #10]
 801fef4:	2b13      	cmp	r3, #19
 801fef6:	d809      	bhi.n	801ff0c <ip4_frag+0x64>
 801fef8:	4b88      	ldr	r3, [pc, #544]	@ (802011c <ip4_frag+0x274>)
 801fefa:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801fefe:	4988      	ldr	r1, [pc, #544]	@ (8020120 <ip4_frag+0x278>)
 801ff00:	4888      	ldr	r0, [pc, #544]	@ (8020124 <ip4_frag+0x27c>)
 801ff02:	f001 fa57 	bl	80213b4 <iprintf>
 801ff06:	f06f 0305 	mvn.w	r3, #5
 801ff0a:	e102      	b.n	8020112 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801ff0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ff0e:	88db      	ldrh	r3, [r3, #6]
 801ff10:	b29b      	uxth	r3, r3
 801ff12:	4618      	mov	r0, r3
 801ff14:	f7f2 fb72 	bl	80125fc <lwip_htons>
 801ff18:	4603      	mov	r3, r0
 801ff1a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801ff1c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ff1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ff22:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801ff26:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ff28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801ff2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801ff2e:	68fb      	ldr	r3, [r7, #12]
 801ff30:	891b      	ldrh	r3, [r3, #8]
 801ff32:	3b14      	subs	r3, #20
 801ff34:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801ff38:	e0e1      	b.n	80200fe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ff3a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ff3c:	00db      	lsls	r3, r3, #3
 801ff3e:	b29b      	uxth	r3, r3
 801ff40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ff44:	4293      	cmp	r3, r2
 801ff46:	bf28      	it	cs
 801ff48:	4613      	movcs	r3, r2
 801ff4a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ff4c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ff50:	2114      	movs	r1, #20
 801ff52:	200e      	movs	r0, #14
 801ff54:	f7f3 fe2c 	bl	8013bb0 <pbuf_alloc>
 801ff58:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801ff5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff5c:	2b00      	cmp	r3, #0
 801ff5e:	f000 80d5 	beq.w	802010c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ff62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff64:	895b      	ldrh	r3, [r3, #10]
 801ff66:	2b13      	cmp	r3, #19
 801ff68:	d806      	bhi.n	801ff78 <ip4_frag+0xd0>
 801ff6a:	4b6c      	ldr	r3, [pc, #432]	@ (802011c <ip4_frag+0x274>)
 801ff6c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801ff70:	496d      	ldr	r1, [pc, #436]	@ (8020128 <ip4_frag+0x280>)
 801ff72:	486c      	ldr	r0, [pc, #432]	@ (8020124 <ip4_frag+0x27c>)
 801ff74:	f001 fa1e 	bl	80213b4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801ff78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff7a:	685b      	ldr	r3, [r3, #4]
 801ff7c:	2214      	movs	r2, #20
 801ff7e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801ff80:	4618      	mov	r0, r3
 801ff82:	f001 fd00 	bl	8021986 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801ff86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ff88:	685b      	ldr	r3, [r3, #4]
 801ff8a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801ff8c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ff8e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801ff92:	e064      	b.n	802005e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801ff94:	68fb      	ldr	r3, [r7, #12]
 801ff96:	895a      	ldrh	r2, [r3, #10]
 801ff98:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ff9a:	1ad3      	subs	r3, r2, r3
 801ff9c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801ff9e:	68fb      	ldr	r3, [r7, #12]
 801ffa0:	895b      	ldrh	r3, [r3, #10]
 801ffa2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801ffa4:	429a      	cmp	r2, r3
 801ffa6:	d906      	bls.n	801ffb6 <ip4_frag+0x10e>
 801ffa8:	4b5c      	ldr	r3, [pc, #368]	@ (802011c <ip4_frag+0x274>)
 801ffaa:	f240 322d 	movw	r2, #813	@ 0x32d
 801ffae:	495f      	ldr	r1, [pc, #380]	@ (802012c <ip4_frag+0x284>)
 801ffb0:	485c      	ldr	r0, [pc, #368]	@ (8020124 <ip4_frag+0x27c>)
 801ffb2:	f001 f9ff 	bl	80213b4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801ffb6:	8bfa      	ldrh	r2, [r7, #30]
 801ffb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801ffbc:	4293      	cmp	r3, r2
 801ffbe:	bf28      	it	cs
 801ffc0:	4613      	movcs	r3, r2
 801ffc2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801ffc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801ffca:	2b00      	cmp	r3, #0
 801ffcc:	d105      	bne.n	801ffda <ip4_frag+0x132>
        poff = 0;
 801ffce:	2300      	movs	r3, #0
 801ffd0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801ffd2:	68fb      	ldr	r3, [r7, #12]
 801ffd4:	681b      	ldr	r3, [r3, #0]
 801ffd6:	60fb      	str	r3, [r7, #12]
        continue;
 801ffd8:	e041      	b.n	802005e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801ffda:	f7ff ff0d 	bl	801fdf8 <ip_frag_alloc_pbuf_custom_ref>
 801ffde:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801ffe0:	69bb      	ldr	r3, [r7, #24]
 801ffe2:	2b00      	cmp	r3, #0
 801ffe4:	d103      	bne.n	801ffee <ip4_frag+0x146>
        pbuf_free(rambuf);
 801ffe6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ffe8:	f7f4 f8c6 	bl	8014178 <pbuf_free>
        goto memerr;
 801ffec:	e08f      	b.n	802010e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ffee:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801fff0:	68fb      	ldr	r3, [r7, #12]
 801fff2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801fff4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801fff6:	4413      	add	r3, r2
 801fff8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801fffc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8020000:	9201      	str	r2, [sp, #4]
 8020002:	9300      	str	r3, [sp, #0]
 8020004:	4603      	mov	r3, r0
 8020006:	2241      	movs	r2, #65	@ 0x41
 8020008:	2000      	movs	r0, #0
 802000a:	f7f3 fefb 	bl	8013e04 <pbuf_alloced_custom>
 802000e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8020010:	697b      	ldr	r3, [r7, #20]
 8020012:	2b00      	cmp	r3, #0
 8020014:	d106      	bne.n	8020024 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8020016:	69b8      	ldr	r0, [r7, #24]
 8020018:	f7ff fef6 	bl	801fe08 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 802001c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802001e:	f7f4 f8ab 	bl	8014178 <pbuf_free>
        goto memerr;
 8020022:	e074      	b.n	802010e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8020024:	68f8      	ldr	r0, [r7, #12]
 8020026:	f7f4 f94d 	bl	80142c4 <pbuf_ref>
      pcr->original = p;
 802002a:	69bb      	ldr	r3, [r7, #24]
 802002c:	68fa      	ldr	r2, [r7, #12]
 802002e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8020030:	69bb      	ldr	r3, [r7, #24]
 8020032:	4a3f      	ldr	r2, [pc, #252]	@ (8020130 <ip4_frag+0x288>)
 8020034:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8020036:	6979      	ldr	r1, [r7, #20]
 8020038:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 802003a:	f7f4 f96b 	bl	8014314 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 802003e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8020042:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8020046:	1ad3      	subs	r3, r2, r3
 8020048:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 802004c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8020050:	2b00      	cmp	r3, #0
 8020052:	d004      	beq.n	802005e <ip4_frag+0x1b6>
        poff = 0;
 8020054:	2300      	movs	r3, #0
 8020056:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8020058:	68fb      	ldr	r3, [r7, #12]
 802005a:	681b      	ldr	r3, [r3, #0]
 802005c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 802005e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8020062:	2b00      	cmp	r3, #0
 8020064:	d196      	bne.n	801ff94 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8020066:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8020068:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 802006c:	4413      	add	r3, r2
 802006e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8020070:	68bb      	ldr	r3, [r7, #8]
 8020072:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8020074:	f1a3 0213 	sub.w	r2, r3, #19
 8020078:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 802007c:	429a      	cmp	r2, r3
 802007e:	bfcc      	ite	gt
 8020080:	2301      	movgt	r3, #1
 8020082:	2300      	movle	r3, #0
 8020084:	b2db      	uxtb	r3, r3
 8020086:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8020088:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 802008c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020090:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8020092:	6a3b      	ldr	r3, [r7, #32]
 8020094:	2b00      	cmp	r3, #0
 8020096:	d002      	beq.n	802009e <ip4_frag+0x1f6>
 8020098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802009a:	2b00      	cmp	r3, #0
 802009c:	d003      	beq.n	80200a6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 802009e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80200a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80200a4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80200a6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80200a8:	4618      	mov	r0, r3
 80200aa:	f7f2 faa7 	bl	80125fc <lwip_htons>
 80200ae:	4603      	mov	r3, r0
 80200b0:	461a      	mov	r2, r3
 80200b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80200b4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80200b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80200b8:	3314      	adds	r3, #20
 80200ba:	b29b      	uxth	r3, r3
 80200bc:	4618      	mov	r0, r3
 80200be:	f7f2 fa9d 	bl	80125fc <lwip_htons>
 80200c2:	4603      	mov	r3, r0
 80200c4:	461a      	mov	r2, r3
 80200c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80200c8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80200ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80200cc:	2200      	movs	r2, #0
 80200ce:	729a      	strb	r2, [r3, #10]
 80200d0:	2200      	movs	r2, #0
 80200d2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80200d4:	68bb      	ldr	r3, [r7, #8]
 80200d6:	695b      	ldr	r3, [r3, #20]
 80200d8:	687a      	ldr	r2, [r7, #4]
 80200da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80200dc:	68b8      	ldr	r0, [r7, #8]
 80200de:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80200e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80200e2:	f7f4 f849 	bl	8014178 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80200e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80200ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80200ec:	1ad3      	subs	r3, r2, r3
 80200ee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80200f2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80200f6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80200f8:	4413      	add	r3, r2
 80200fa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80200fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8020102:	2b00      	cmp	r3, #0
 8020104:	f47f af19 	bne.w	801ff3a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8020108:	2300      	movs	r3, #0
 802010a:	e002      	b.n	8020112 <ip4_frag+0x26a>
      goto memerr;
 802010c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 802010e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8020112:	4618      	mov	r0, r3
 8020114:	3748      	adds	r7, #72	@ 0x48
 8020116:	46bd      	mov	sp, r7
 8020118:	bd80      	pop	{r7, pc}
 802011a:	bf00      	nop
 802011c:	080264a0 	.word	0x080264a0
 8020120:	0802667c 	.word	0x0802667c
 8020124:	080264e8 	.word	0x080264e8
 8020128:	08026698 	.word	0x08026698
 802012c:	080266b8 	.word	0x080266b8
 8020130:	0801fe41 	.word	0x0801fe41

08020134 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8020134:	b580      	push	{r7, lr}
 8020136:	b086      	sub	sp, #24
 8020138:	af00      	add	r7, sp, #0
 802013a:	6078      	str	r0, [r7, #4]
 802013c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 802013e:	230e      	movs	r3, #14
 8020140:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8020142:	687b      	ldr	r3, [r7, #4]
 8020144:	895b      	ldrh	r3, [r3, #10]
 8020146:	2b0e      	cmp	r3, #14
 8020148:	d96e      	bls.n	8020228 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 802014a:	687b      	ldr	r3, [r7, #4]
 802014c:	7bdb      	ldrb	r3, [r3, #15]
 802014e:	2b00      	cmp	r3, #0
 8020150:	d106      	bne.n	8020160 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8020152:	683b      	ldr	r3, [r7, #0]
 8020154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8020158:	3301      	adds	r3, #1
 802015a:	b2da      	uxtb	r2, r3
 802015c:	687b      	ldr	r3, [r7, #4]
 802015e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8020160:	687b      	ldr	r3, [r7, #4]
 8020162:	685b      	ldr	r3, [r3, #4]
 8020164:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8020166:	693b      	ldr	r3, [r7, #16]
 8020168:	7b1a      	ldrb	r2, [r3, #12]
 802016a:	7b5b      	ldrb	r3, [r3, #13]
 802016c:	021b      	lsls	r3, r3, #8
 802016e:	4313      	orrs	r3, r2
 8020170:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8020172:	693b      	ldr	r3, [r7, #16]
 8020174:	781b      	ldrb	r3, [r3, #0]
 8020176:	f003 0301 	and.w	r3, r3, #1
 802017a:	2b00      	cmp	r3, #0
 802017c:	d023      	beq.n	80201c6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 802017e:	693b      	ldr	r3, [r7, #16]
 8020180:	781b      	ldrb	r3, [r3, #0]
 8020182:	2b01      	cmp	r3, #1
 8020184:	d10f      	bne.n	80201a6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8020186:	693b      	ldr	r3, [r7, #16]
 8020188:	785b      	ldrb	r3, [r3, #1]
 802018a:	2b00      	cmp	r3, #0
 802018c:	d11b      	bne.n	80201c6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 802018e:	693b      	ldr	r3, [r7, #16]
 8020190:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8020192:	2b5e      	cmp	r3, #94	@ 0x5e
 8020194:	d117      	bne.n	80201c6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8020196:	687b      	ldr	r3, [r7, #4]
 8020198:	7b5b      	ldrb	r3, [r3, #13]
 802019a:	f043 0310 	orr.w	r3, r3, #16
 802019e:	b2da      	uxtb	r2, r3
 80201a0:	687b      	ldr	r3, [r7, #4]
 80201a2:	735a      	strb	r2, [r3, #13]
 80201a4:	e00f      	b.n	80201c6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80201a6:	693b      	ldr	r3, [r7, #16]
 80201a8:	2206      	movs	r2, #6
 80201aa:	4928      	ldr	r1, [pc, #160]	@ (802024c <ethernet_input+0x118>)
 80201ac:	4618      	mov	r0, r3
 80201ae:	f001 faa7 	bl	8021700 <memcmp>
 80201b2:	4603      	mov	r3, r0
 80201b4:	2b00      	cmp	r3, #0
 80201b6:	d106      	bne.n	80201c6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80201b8:	687b      	ldr	r3, [r7, #4]
 80201ba:	7b5b      	ldrb	r3, [r3, #13]
 80201bc:	f043 0308 	orr.w	r3, r3, #8
 80201c0:	b2da      	uxtb	r2, r3
 80201c2:	687b      	ldr	r3, [r7, #4]
 80201c4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80201c6:	89fb      	ldrh	r3, [r7, #14]
 80201c8:	2b08      	cmp	r3, #8
 80201ca:	d003      	beq.n	80201d4 <ethernet_input+0xa0>
 80201cc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80201d0:	d014      	beq.n	80201fc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80201d2:	e032      	b.n	802023a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80201d4:	683b      	ldr	r3, [r7, #0]
 80201d6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80201da:	f003 0308 	and.w	r3, r3, #8
 80201de:	2b00      	cmp	r3, #0
 80201e0:	d024      	beq.n	802022c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80201e2:	8afb      	ldrh	r3, [r7, #22]
 80201e4:	4619      	mov	r1, r3
 80201e6:	6878      	ldr	r0, [r7, #4]
 80201e8:	f7f3 ff40 	bl	801406c <pbuf_remove_header>
 80201ec:	4603      	mov	r3, r0
 80201ee:	2b00      	cmp	r3, #0
 80201f0:	d11e      	bne.n	8020230 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80201f2:	6839      	ldr	r1, [r7, #0]
 80201f4:	6878      	ldr	r0, [r7, #4]
 80201f6:	f7fe fe55 	bl	801eea4 <ip4_input>
      break;
 80201fa:	e013      	b.n	8020224 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80201fc:	683b      	ldr	r3, [r7, #0]
 80201fe:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8020202:	f003 0308 	and.w	r3, r3, #8
 8020206:	2b00      	cmp	r3, #0
 8020208:	d014      	beq.n	8020234 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802020a:	8afb      	ldrh	r3, [r7, #22]
 802020c:	4619      	mov	r1, r3
 802020e:	6878      	ldr	r0, [r7, #4]
 8020210:	f7f3 ff2c 	bl	801406c <pbuf_remove_header>
 8020214:	4603      	mov	r3, r0
 8020216:	2b00      	cmp	r3, #0
 8020218:	d10e      	bne.n	8020238 <ethernet_input+0x104>
        etharp_input(p, netif);
 802021a:	6839      	ldr	r1, [r7, #0]
 802021c:	6878      	ldr	r0, [r7, #4]
 802021e:	f7fd fcc3 	bl	801dba8 <etharp_input>
      break;
 8020222:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8020224:	2300      	movs	r3, #0
 8020226:	e00c      	b.n	8020242 <ethernet_input+0x10e>
    goto free_and_return;
 8020228:	bf00      	nop
 802022a:	e006      	b.n	802023a <ethernet_input+0x106>
        goto free_and_return;
 802022c:	bf00      	nop
 802022e:	e004      	b.n	802023a <ethernet_input+0x106>
        goto free_and_return;
 8020230:	bf00      	nop
 8020232:	e002      	b.n	802023a <ethernet_input+0x106>
        goto free_and_return;
 8020234:	bf00      	nop
 8020236:	e000      	b.n	802023a <ethernet_input+0x106>
        goto free_and_return;
 8020238:	bf00      	nop

free_and_return:
  pbuf_free(p);
 802023a:	6878      	ldr	r0, [r7, #4]
 802023c:	f7f3 ff9c 	bl	8014178 <pbuf_free>
  return ERR_OK;
 8020240:	2300      	movs	r3, #0
}
 8020242:	4618      	mov	r0, r3
 8020244:	3718      	adds	r7, #24
 8020246:	46bd      	mov	sp, r7
 8020248:	bd80      	pop	{r7, pc}
 802024a:	bf00      	nop
 802024c:	0802775c 	.word	0x0802775c

08020250 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8020250:	b580      	push	{r7, lr}
 8020252:	b086      	sub	sp, #24
 8020254:	af00      	add	r7, sp, #0
 8020256:	60f8      	str	r0, [r7, #12]
 8020258:	60b9      	str	r1, [r7, #8]
 802025a:	607a      	str	r2, [r7, #4]
 802025c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 802025e:	8c3b      	ldrh	r3, [r7, #32]
 8020260:	4618      	mov	r0, r3
 8020262:	f7f2 f9cb 	bl	80125fc <lwip_htons>
 8020266:	4603      	mov	r3, r0
 8020268:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 802026a:	210e      	movs	r1, #14
 802026c:	68b8      	ldr	r0, [r7, #8]
 802026e:	f7f3 feed 	bl	801404c <pbuf_add_header>
 8020272:	4603      	mov	r3, r0
 8020274:	2b00      	cmp	r3, #0
 8020276:	d125      	bne.n	80202c4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8020278:	68bb      	ldr	r3, [r7, #8]
 802027a:	685b      	ldr	r3, [r3, #4]
 802027c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 802027e:	693b      	ldr	r3, [r7, #16]
 8020280:	8afa      	ldrh	r2, [r7, #22]
 8020282:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8020284:	693b      	ldr	r3, [r7, #16]
 8020286:	2206      	movs	r2, #6
 8020288:	6839      	ldr	r1, [r7, #0]
 802028a:	4618      	mov	r0, r3
 802028c:	f001 fb7b 	bl	8021986 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8020290:	693b      	ldr	r3, [r7, #16]
 8020292:	3306      	adds	r3, #6
 8020294:	2206      	movs	r2, #6
 8020296:	6879      	ldr	r1, [r7, #4]
 8020298:	4618      	mov	r0, r3
 802029a:	f001 fb74 	bl	8021986 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 802029e:	68fb      	ldr	r3, [r7, #12]
 80202a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80202a4:	2b06      	cmp	r3, #6
 80202a6:	d006      	beq.n	80202b6 <ethernet_output+0x66>
 80202a8:	4b0a      	ldr	r3, [pc, #40]	@ (80202d4 <ethernet_output+0x84>)
 80202aa:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80202ae:	490a      	ldr	r1, [pc, #40]	@ (80202d8 <ethernet_output+0x88>)
 80202b0:	480a      	ldr	r0, [pc, #40]	@ (80202dc <ethernet_output+0x8c>)
 80202b2:	f001 f87f 	bl	80213b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80202b6:	68fb      	ldr	r3, [r7, #12]
 80202b8:	699b      	ldr	r3, [r3, #24]
 80202ba:	68b9      	ldr	r1, [r7, #8]
 80202bc:	68f8      	ldr	r0, [r7, #12]
 80202be:	4798      	blx	r3
 80202c0:	4603      	mov	r3, r0
 80202c2:	e002      	b.n	80202ca <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80202c4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80202c6:	f06f 0301 	mvn.w	r3, #1
}
 80202ca:	4618      	mov	r0, r3
 80202cc:	3718      	adds	r7, #24
 80202ce:	46bd      	mov	sp, r7
 80202d0:	bd80      	pop	{r7, pc}
 80202d2:	bf00      	nop
 80202d4:	080266c8 	.word	0x080266c8
 80202d8:	08026700 	.word	0x08026700
 80202dc:	08026734 	.word	0x08026734

080202e0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80202e0:	b580      	push	{r7, lr}
 80202e2:	b086      	sub	sp, #24
 80202e4:	af00      	add	r7, sp, #0
 80202e6:	6078      	str	r0, [r7, #4]
 80202e8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80202ea:	683b      	ldr	r3, [r7, #0]
 80202ec:	60bb      	str	r3, [r7, #8]
 80202ee:	2304      	movs	r3, #4
 80202f0:	60fb      	str	r3, [r7, #12]
 80202f2:	2300      	movs	r3, #0
 80202f4:	613b      	str	r3, [r7, #16]
 80202f6:	2300      	movs	r3, #0
 80202f8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80202fa:	f107 0308 	add.w	r3, r7, #8
 80202fe:	2100      	movs	r1, #0
 8020300:	4618      	mov	r0, r3
 8020302:	f7ea fd3b 	bl	800ad7c <osMessageCreate>
 8020306:	4602      	mov	r2, r0
 8020308:	687b      	ldr	r3, [r7, #4]
 802030a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 802030c:	687b      	ldr	r3, [r7, #4]
 802030e:	681b      	ldr	r3, [r3, #0]
 8020310:	2b00      	cmp	r3, #0
 8020312:	d102      	bne.n	802031a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8020314:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020318:	e000      	b.n	802031c <sys_mbox_new+0x3c>

  return ERR_OK;
 802031a:	2300      	movs	r3, #0
}
 802031c:	4618      	mov	r0, r3
 802031e:	3718      	adds	r7, #24
 8020320:	46bd      	mov	sp, r7
 8020322:	bd80      	pop	{r7, pc}

08020324 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8020324:	b580      	push	{r7, lr}
 8020326:	b084      	sub	sp, #16
 8020328:	af00      	add	r7, sp, #0
 802032a:	6078      	str	r0, [r7, #4]
 802032c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 802032e:	687b      	ldr	r3, [r7, #4]
 8020330:	681b      	ldr	r3, [r3, #0]
 8020332:	6839      	ldr	r1, [r7, #0]
 8020334:	2200      	movs	r2, #0
 8020336:	4618      	mov	r0, r3
 8020338:	f7ea fd48 	bl	800adcc <osMessagePut>
 802033c:	4603      	mov	r3, r0
 802033e:	2b00      	cmp	r3, #0
 8020340:	d102      	bne.n	8020348 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8020342:	2300      	movs	r3, #0
 8020344:	73fb      	strb	r3, [r7, #15]
 8020346:	e001      	b.n	802034c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8020348:	23ff      	movs	r3, #255	@ 0xff
 802034a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 802034c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8020350:	4618      	mov	r0, r3
 8020352:	3710      	adds	r7, #16
 8020354:	46bd      	mov	sp, r7
 8020356:	bd80      	pop	{r7, pc}

08020358 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8020358:	b580      	push	{r7, lr}
 802035a:	b08c      	sub	sp, #48	@ 0x30
 802035c:	af00      	add	r7, sp, #0
 802035e:	61f8      	str	r0, [r7, #28]
 8020360:	61b9      	str	r1, [r7, #24]
 8020362:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8020364:	f7ea fb3c 	bl	800a9e0 <osKernelSysTick>
 8020368:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 802036a:	697b      	ldr	r3, [r7, #20]
 802036c:	2b00      	cmp	r3, #0
 802036e:	d017      	beq.n	80203a0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8020370:	69fb      	ldr	r3, [r7, #28]
 8020372:	6819      	ldr	r1, [r3, #0]
 8020374:	f107 0320 	add.w	r3, r7, #32
 8020378:	697a      	ldr	r2, [r7, #20]
 802037a:	4618      	mov	r0, r3
 802037c:	f7ea fd66 	bl	800ae4c <osMessageGet>

    if(event.status == osEventMessage)
 8020380:	6a3b      	ldr	r3, [r7, #32]
 8020382:	2b10      	cmp	r3, #16
 8020384:	d109      	bne.n	802039a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8020386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020388:	461a      	mov	r2, r3
 802038a:	69bb      	ldr	r3, [r7, #24]
 802038c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 802038e:	f7ea fb27 	bl	800a9e0 <osKernelSysTick>
 8020392:	4602      	mov	r2, r0
 8020394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020396:	1ad3      	subs	r3, r2, r3
 8020398:	e019      	b.n	80203ce <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 802039a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802039e:	e016      	b.n	80203ce <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80203a0:	69fb      	ldr	r3, [r7, #28]
 80203a2:	6819      	ldr	r1, [r3, #0]
 80203a4:	463b      	mov	r3, r7
 80203a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80203aa:	4618      	mov	r0, r3
 80203ac:	f7ea fd4e 	bl	800ae4c <osMessageGet>
 80203b0:	f107 0320 	add.w	r3, r7, #32
 80203b4:	463a      	mov	r2, r7
 80203b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80203b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80203bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80203be:	461a      	mov	r2, r3
 80203c0:	69bb      	ldr	r3, [r7, #24]
 80203c2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80203c4:	f7ea fb0c 	bl	800a9e0 <osKernelSysTick>
 80203c8:	4602      	mov	r2, r0
 80203ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80203cc:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80203ce:	4618      	mov	r0, r3
 80203d0:	3730      	adds	r7, #48	@ 0x30
 80203d2:	46bd      	mov	sp, r7
 80203d4:	bd80      	pop	{r7, pc}

080203d6 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80203d6:	b480      	push	{r7}
 80203d8:	b083      	sub	sp, #12
 80203da:	af00      	add	r7, sp, #0
 80203dc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80203de:	687b      	ldr	r3, [r7, #4]
 80203e0:	681b      	ldr	r3, [r3, #0]
 80203e2:	2b00      	cmp	r3, #0
 80203e4:	d101      	bne.n	80203ea <sys_mbox_valid+0x14>
    return 0;
 80203e6:	2300      	movs	r3, #0
 80203e8:	e000      	b.n	80203ec <sys_mbox_valid+0x16>
  else
    return 1;
 80203ea:	2301      	movs	r3, #1
}
 80203ec:	4618      	mov	r0, r3
 80203ee:	370c      	adds	r7, #12
 80203f0:	46bd      	mov	sp, r7
 80203f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203f6:	4770      	bx	lr

080203f8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80203f8:	b580      	push	{r7, lr}
 80203fa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80203fc:	4803      	ldr	r0, [pc, #12]	@ (802040c <sys_init+0x14>)
 80203fe:	f7ea fb6b 	bl	800aad8 <osMutexCreate>
 8020402:	4603      	mov	r3, r0
 8020404:	4a02      	ldr	r2, [pc, #8]	@ (8020410 <sys_init+0x18>)
 8020406:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8020408:	bf00      	nop
 802040a:	bd80      	pop	{r7, pc}
 802040c:	0802776c 	.word	0x0802776c
 8020410:	20004d88 	.word	0x20004d88

08020414 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8020414:	b580      	push	{r7, lr}
 8020416:	b084      	sub	sp, #16
 8020418:	af00      	add	r7, sp, #0
 802041a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 802041c:	2300      	movs	r3, #0
 802041e:	60bb      	str	r3, [r7, #8]
 8020420:	2300      	movs	r3, #0
 8020422:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8020424:	f107 0308 	add.w	r3, r7, #8
 8020428:	4618      	mov	r0, r3
 802042a:	f7ea fb55 	bl	800aad8 <osMutexCreate>
 802042e:	4602      	mov	r2, r0
 8020430:	687b      	ldr	r3, [r7, #4]
 8020432:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8020434:	687b      	ldr	r3, [r7, #4]
 8020436:	681b      	ldr	r3, [r3, #0]
 8020438:	2b00      	cmp	r3, #0
 802043a:	d102      	bne.n	8020442 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 802043c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020440:	e000      	b.n	8020444 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8020442:	2300      	movs	r3, #0
}
 8020444:	4618      	mov	r0, r3
 8020446:	3710      	adds	r7, #16
 8020448:	46bd      	mov	sp, r7
 802044a:	bd80      	pop	{r7, pc}

0802044c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 802044c:	b580      	push	{r7, lr}
 802044e:	b082      	sub	sp, #8
 8020450:	af00      	add	r7, sp, #0
 8020452:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8020454:	687b      	ldr	r3, [r7, #4]
 8020456:	681b      	ldr	r3, [r3, #0]
 8020458:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 802045c:	4618      	mov	r0, r3
 802045e:	f7ea fb53 	bl	800ab08 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8020462:	bf00      	nop
 8020464:	3708      	adds	r7, #8
 8020466:	46bd      	mov	sp, r7
 8020468:	bd80      	pop	{r7, pc}

0802046a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 802046a:	b580      	push	{r7, lr}
 802046c:	b082      	sub	sp, #8
 802046e:	af00      	add	r7, sp, #0
 8020470:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8020472:	687b      	ldr	r3, [r7, #4]
 8020474:	681b      	ldr	r3, [r3, #0]
 8020476:	4618      	mov	r0, r3
 8020478:	f7ea fb94 	bl	800aba4 <osMutexRelease>
}
 802047c:	bf00      	nop
 802047e:	3708      	adds	r7, #8
 8020480:	46bd      	mov	sp, r7
 8020482:	bd80      	pop	{r7, pc}

08020484 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8020484:	b580      	push	{r7, lr}
 8020486:	b08c      	sub	sp, #48	@ 0x30
 8020488:	af00      	add	r7, sp, #0
 802048a:	60f8      	str	r0, [r7, #12]
 802048c:	60b9      	str	r1, [r7, #8]
 802048e:	607a      	str	r2, [r7, #4]
 8020490:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8020492:	f107 0314 	add.w	r3, r7, #20
 8020496:	2200      	movs	r2, #0
 8020498:	601a      	str	r2, [r3, #0]
 802049a:	605a      	str	r2, [r3, #4]
 802049c:	609a      	str	r2, [r3, #8]
 802049e:	60da      	str	r2, [r3, #12]
 80204a0:	611a      	str	r2, [r3, #16]
 80204a2:	615a      	str	r2, [r3, #20]
 80204a4:	619a      	str	r2, [r3, #24]
 80204a6:	68fb      	ldr	r3, [r7, #12]
 80204a8:	617b      	str	r3, [r7, #20]
 80204aa:	68bb      	ldr	r3, [r7, #8]
 80204ac:	61bb      	str	r3, [r7, #24]
 80204ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80204b0:	b21b      	sxth	r3, r3
 80204b2:	83bb      	strh	r3, [r7, #28]
 80204b4:	683b      	ldr	r3, [r7, #0]
 80204b6:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 80204b8:	f107 0314 	add.w	r3, r7, #20
 80204bc:	6879      	ldr	r1, [r7, #4]
 80204be:	4618      	mov	r0, r3
 80204c0:	f7ea fa9e 	bl	800aa00 <osThreadCreate>
 80204c4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80204c6:	4618      	mov	r0, r3
 80204c8:	3730      	adds	r7, #48	@ 0x30
 80204ca:	46bd      	mov	sp, r7
 80204cc:	bd80      	pop	{r7, pc}
	...

080204d0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80204d0:	b580      	push	{r7, lr}
 80204d2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80204d4:	4b04      	ldr	r3, [pc, #16]	@ (80204e8 <sys_arch_protect+0x18>)
 80204d6:	681b      	ldr	r3, [r3, #0]
 80204d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80204dc:	4618      	mov	r0, r3
 80204de:	f7ea fb13 	bl	800ab08 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80204e2:	2301      	movs	r3, #1
}
 80204e4:	4618      	mov	r0, r3
 80204e6:	bd80      	pop	{r7, pc}
 80204e8:	20004d88 	.word	0x20004d88

080204ec <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80204ec:	b580      	push	{r7, lr}
 80204ee:	b082      	sub	sp, #8
 80204f0:	af00      	add	r7, sp, #0
 80204f2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80204f4:	4b04      	ldr	r3, [pc, #16]	@ (8020508 <sys_arch_unprotect+0x1c>)
 80204f6:	681b      	ldr	r3, [r3, #0]
 80204f8:	4618      	mov	r0, r3
 80204fa:	f7ea fb53 	bl	800aba4 <osMutexRelease>
}
 80204fe:	bf00      	nop
 8020500:	3708      	adds	r7, #8
 8020502:	46bd      	mov	sp, r7
 8020504:	bd80      	pop	{r7, pc}
 8020506:	bf00      	nop
 8020508:	20004d88 	.word	0x20004d88

0802050c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 802050c:	b580      	push	{r7, lr}
 802050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8020510:	2200      	movs	r2, #0
 8020512:	4912      	ldr	r1, [pc, #72]	@ (802055c <MX_USB_DEVICE_Init+0x50>)
 8020514:	4812      	ldr	r0, [pc, #72]	@ (8020560 <MX_USB_DEVICE_Init+0x54>)
 8020516:	f7e8 fee9 	bl	80092ec <USBD_Init>
 802051a:	4603      	mov	r3, r0
 802051c:	2b00      	cmp	r3, #0
 802051e:	d001      	beq.n	8020524 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8020520:	f7e0 fb64 	bl	8000bec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8020524:	490f      	ldr	r1, [pc, #60]	@ (8020564 <MX_USB_DEVICE_Init+0x58>)
 8020526:	480e      	ldr	r0, [pc, #56]	@ (8020560 <MX_USB_DEVICE_Init+0x54>)
 8020528:	f7e8 ff10 	bl	800934c <USBD_RegisterClass>
 802052c:	4603      	mov	r3, r0
 802052e:	2b00      	cmp	r3, #0
 8020530:	d001      	beq.n	8020536 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8020532:	f7e0 fb5b 	bl	8000bec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8020536:	490c      	ldr	r1, [pc, #48]	@ (8020568 <MX_USB_DEVICE_Init+0x5c>)
 8020538:	4809      	ldr	r0, [pc, #36]	@ (8020560 <MX_USB_DEVICE_Init+0x54>)
 802053a:	f7e8 fe07 	bl	800914c <USBD_CDC_RegisterInterface>
 802053e:	4603      	mov	r3, r0
 8020540:	2b00      	cmp	r3, #0
 8020542:	d001      	beq.n	8020548 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8020544:	f7e0 fb52 	bl	8000bec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8020548:	4805      	ldr	r0, [pc, #20]	@ (8020560 <MX_USB_DEVICE_Init+0x54>)
 802054a:	f7e8 ff35 	bl	80093b8 <USBD_Start>
 802054e:	4603      	mov	r3, r0
 8020550:	2b00      	cmp	r3, #0
 8020552:	d001      	beq.n	8020558 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8020554:	f7e0 fb4a 	bl	8000bec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8020558:	bf00      	nop
 802055a:	bd80      	pop	{r7, pc}
 802055c:	200000dc 	.word	0x200000dc
 8020560:	20004d8c 	.word	0x20004d8c
 8020564:	2000002c 	.word	0x2000002c
 8020568:	200000c8 	.word	0x200000c8

0802056c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 802056c:	b580      	push	{r7, lr}
 802056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8020570:	2200      	movs	r2, #0
 8020572:	4905      	ldr	r1, [pc, #20]	@ (8020588 <CDC_Init_FS+0x1c>)
 8020574:	4805      	ldr	r0, [pc, #20]	@ (802058c <CDC_Init_FS+0x20>)
 8020576:	f7e8 fe03 	bl	8009180 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 802057a:	4905      	ldr	r1, [pc, #20]	@ (8020590 <CDC_Init_FS+0x24>)
 802057c:	4803      	ldr	r0, [pc, #12]	@ (802058c <CDC_Init_FS+0x20>)
 802057e:	f7e8 fe21 	bl	80091c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8020582:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8020584:	4618      	mov	r0, r3
 8020586:	bd80      	pop	{r7, pc}
 8020588:	20005868 	.word	0x20005868
 802058c:	20004d8c 	.word	0x20004d8c
 8020590:	20005068 	.word	0x20005068

08020594 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8020594:	b480      	push	{r7}
 8020596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8020598:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 802059a:	4618      	mov	r0, r3
 802059c:	46bd      	mov	sp, r7
 802059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205a2:	4770      	bx	lr

080205a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80205a4:	b480      	push	{r7}
 80205a6:	b083      	sub	sp, #12
 80205a8:	af00      	add	r7, sp, #0
 80205aa:	4603      	mov	r3, r0
 80205ac:	6039      	str	r1, [r7, #0]
 80205ae:	71fb      	strb	r3, [r7, #7]
 80205b0:	4613      	mov	r3, r2
 80205b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80205b4:	79fb      	ldrb	r3, [r7, #7]
 80205b6:	2b23      	cmp	r3, #35	@ 0x23
 80205b8:	d84a      	bhi.n	8020650 <CDC_Control_FS+0xac>
 80205ba:	a201      	add	r2, pc, #4	@ (adr r2, 80205c0 <CDC_Control_FS+0x1c>)
 80205bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80205c0:	08020651 	.word	0x08020651
 80205c4:	08020651 	.word	0x08020651
 80205c8:	08020651 	.word	0x08020651
 80205cc:	08020651 	.word	0x08020651
 80205d0:	08020651 	.word	0x08020651
 80205d4:	08020651 	.word	0x08020651
 80205d8:	08020651 	.word	0x08020651
 80205dc:	08020651 	.word	0x08020651
 80205e0:	08020651 	.word	0x08020651
 80205e4:	08020651 	.word	0x08020651
 80205e8:	08020651 	.word	0x08020651
 80205ec:	08020651 	.word	0x08020651
 80205f0:	08020651 	.word	0x08020651
 80205f4:	08020651 	.word	0x08020651
 80205f8:	08020651 	.word	0x08020651
 80205fc:	08020651 	.word	0x08020651
 8020600:	08020651 	.word	0x08020651
 8020604:	08020651 	.word	0x08020651
 8020608:	08020651 	.word	0x08020651
 802060c:	08020651 	.word	0x08020651
 8020610:	08020651 	.word	0x08020651
 8020614:	08020651 	.word	0x08020651
 8020618:	08020651 	.word	0x08020651
 802061c:	08020651 	.word	0x08020651
 8020620:	08020651 	.word	0x08020651
 8020624:	08020651 	.word	0x08020651
 8020628:	08020651 	.word	0x08020651
 802062c:	08020651 	.word	0x08020651
 8020630:	08020651 	.word	0x08020651
 8020634:	08020651 	.word	0x08020651
 8020638:	08020651 	.word	0x08020651
 802063c:	08020651 	.word	0x08020651
 8020640:	08020651 	.word	0x08020651
 8020644:	08020651 	.word	0x08020651
 8020648:	08020651 	.word	0x08020651
 802064c:	08020651 	.word	0x08020651
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8020650:	bf00      	nop
  }

  return (USBD_OK);
 8020652:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8020654:	4618      	mov	r0, r3
 8020656:	370c      	adds	r7, #12
 8020658:	46bd      	mov	sp, r7
 802065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802065e:	4770      	bx	lr

08020660 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8020660:	b580      	push	{r7, lr}
 8020662:	b082      	sub	sp, #8
 8020664:	af00      	add	r7, sp, #0
 8020666:	6078      	str	r0, [r7, #4]
 8020668:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 802066a:	6879      	ldr	r1, [r7, #4]
 802066c:	4805      	ldr	r0, [pc, #20]	@ (8020684 <CDC_Receive_FS+0x24>)
 802066e:	f7e8 fda9 	bl	80091c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8020672:	4804      	ldr	r0, [pc, #16]	@ (8020684 <CDC_Receive_FS+0x24>)
 8020674:	f7e8 fe04 	bl	8009280 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8020678:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 802067a:	4618      	mov	r0, r3
 802067c:	3708      	adds	r7, #8
 802067e:	46bd      	mov	sp, r7
 8020680:	bd80      	pop	{r7, pc}
 8020682:	bf00      	nop
 8020684:	20004d8c 	.word	0x20004d8c

08020688 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8020688:	b580      	push	{r7, lr}
 802068a:	b084      	sub	sp, #16
 802068c:	af00      	add	r7, sp, #0
 802068e:	6078      	str	r0, [r7, #4]
 8020690:	460b      	mov	r3, r1
 8020692:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8020694:	2300      	movs	r3, #0
 8020696:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8020698:	4b0d      	ldr	r3, [pc, #52]	@ (80206d0 <CDC_Transmit_FS+0x48>)
 802069a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 802069e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80206a0:	68bb      	ldr	r3, [r7, #8]
 80206a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80206a6:	2b00      	cmp	r3, #0
 80206a8:	d001      	beq.n	80206ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80206aa:	2301      	movs	r3, #1
 80206ac:	e00b      	b.n	80206c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80206ae:	887b      	ldrh	r3, [r7, #2]
 80206b0:	461a      	mov	r2, r3
 80206b2:	6879      	ldr	r1, [r7, #4]
 80206b4:	4806      	ldr	r0, [pc, #24]	@ (80206d0 <CDC_Transmit_FS+0x48>)
 80206b6:	f7e8 fd63 	bl	8009180 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80206ba:	4805      	ldr	r0, [pc, #20]	@ (80206d0 <CDC_Transmit_FS+0x48>)
 80206bc:	f7e8 fda0 	bl	8009200 <USBD_CDC_TransmitPacket>
 80206c0:	4603      	mov	r3, r0
 80206c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80206c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80206c6:	4618      	mov	r0, r3
 80206c8:	3710      	adds	r7, #16
 80206ca:	46bd      	mov	sp, r7
 80206cc:	bd80      	pop	{r7, pc}
 80206ce:	bf00      	nop
 80206d0:	20004d8c 	.word	0x20004d8c

080206d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80206d4:	b480      	push	{r7}
 80206d6:	b087      	sub	sp, #28
 80206d8:	af00      	add	r7, sp, #0
 80206da:	60f8      	str	r0, [r7, #12]
 80206dc:	60b9      	str	r1, [r7, #8]
 80206de:	4613      	mov	r3, r2
 80206e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80206e2:	2300      	movs	r3, #0
 80206e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80206e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80206ea:	4618      	mov	r0, r3
 80206ec:	371c      	adds	r7, #28
 80206ee:	46bd      	mov	sp, r7
 80206f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206f4:	4770      	bx	lr
	...

080206f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80206f8:	b480      	push	{r7}
 80206fa:	b083      	sub	sp, #12
 80206fc:	af00      	add	r7, sp, #0
 80206fe:	4603      	mov	r3, r0
 8020700:	6039      	str	r1, [r7, #0]
 8020702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8020704:	683b      	ldr	r3, [r7, #0]
 8020706:	2212      	movs	r2, #18
 8020708:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 802070a:	4b03      	ldr	r3, [pc, #12]	@ (8020718 <USBD_FS_DeviceDescriptor+0x20>)
}
 802070c:	4618      	mov	r0, r3
 802070e:	370c      	adds	r7, #12
 8020710:	46bd      	mov	sp, r7
 8020712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020716:	4770      	bx	lr
 8020718:	200000fc 	.word	0x200000fc

0802071c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802071c:	b480      	push	{r7}
 802071e:	b083      	sub	sp, #12
 8020720:	af00      	add	r7, sp, #0
 8020722:	4603      	mov	r3, r0
 8020724:	6039      	str	r1, [r7, #0]
 8020726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8020728:	683b      	ldr	r3, [r7, #0]
 802072a:	2204      	movs	r2, #4
 802072c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 802072e:	4b03      	ldr	r3, [pc, #12]	@ (802073c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8020730:	4618      	mov	r0, r3
 8020732:	370c      	adds	r7, #12
 8020734:	46bd      	mov	sp, r7
 8020736:	f85d 7b04 	ldr.w	r7, [sp], #4
 802073a:	4770      	bx	lr
 802073c:	2000011c 	.word	0x2000011c

08020740 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020740:	b580      	push	{r7, lr}
 8020742:	b082      	sub	sp, #8
 8020744:	af00      	add	r7, sp, #0
 8020746:	4603      	mov	r3, r0
 8020748:	6039      	str	r1, [r7, #0]
 802074a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 802074c:	79fb      	ldrb	r3, [r7, #7]
 802074e:	2b00      	cmp	r3, #0
 8020750:	d105      	bne.n	802075e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8020752:	683a      	ldr	r2, [r7, #0]
 8020754:	4907      	ldr	r1, [pc, #28]	@ (8020774 <USBD_FS_ProductStrDescriptor+0x34>)
 8020756:	4808      	ldr	r0, [pc, #32]	@ (8020778 <USBD_FS_ProductStrDescriptor+0x38>)
 8020758:	f7ea f81e 	bl	800a798 <USBD_GetString>
 802075c:	e004      	b.n	8020768 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802075e:	683a      	ldr	r2, [r7, #0]
 8020760:	4904      	ldr	r1, [pc, #16]	@ (8020774 <USBD_FS_ProductStrDescriptor+0x34>)
 8020762:	4805      	ldr	r0, [pc, #20]	@ (8020778 <USBD_FS_ProductStrDescriptor+0x38>)
 8020764:	f7ea f818 	bl	800a798 <USBD_GetString>
  }
  return USBD_StrDesc;
 8020768:	4b02      	ldr	r3, [pc, #8]	@ (8020774 <USBD_FS_ProductStrDescriptor+0x34>)
}
 802076a:	4618      	mov	r0, r3
 802076c:	3708      	adds	r7, #8
 802076e:	46bd      	mov	sp, r7
 8020770:	bd80      	pop	{r7, pc}
 8020772:	bf00      	nop
 8020774:	20006068 	.word	0x20006068
 8020778:	0802675c 	.word	0x0802675c

0802077c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802077c:	b580      	push	{r7, lr}
 802077e:	b082      	sub	sp, #8
 8020780:	af00      	add	r7, sp, #0
 8020782:	4603      	mov	r3, r0
 8020784:	6039      	str	r1, [r7, #0]
 8020786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8020788:	683a      	ldr	r2, [r7, #0]
 802078a:	4904      	ldr	r1, [pc, #16]	@ (802079c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 802078c:	4804      	ldr	r0, [pc, #16]	@ (80207a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 802078e:	f7ea f803 	bl	800a798 <USBD_GetString>
  return USBD_StrDesc;
 8020792:	4b02      	ldr	r3, [pc, #8]	@ (802079c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8020794:	4618      	mov	r0, r3
 8020796:	3708      	adds	r7, #8
 8020798:	46bd      	mov	sp, r7
 802079a:	bd80      	pop	{r7, pc}
 802079c:	20006068 	.word	0x20006068
 80207a0:	08026774 	.word	0x08026774

080207a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80207a4:	b580      	push	{r7, lr}
 80207a6:	b082      	sub	sp, #8
 80207a8:	af00      	add	r7, sp, #0
 80207aa:	4603      	mov	r3, r0
 80207ac:	6039      	str	r1, [r7, #0]
 80207ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80207b0:	683b      	ldr	r3, [r7, #0]
 80207b2:	221a      	movs	r2, #26
 80207b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80207b6:	f000 f855 	bl	8020864 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80207ba:	4b02      	ldr	r3, [pc, #8]	@ (80207c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80207bc:	4618      	mov	r0, r3
 80207be:	3708      	adds	r7, #8
 80207c0:	46bd      	mov	sp, r7
 80207c2:	bd80      	pop	{r7, pc}
 80207c4:	20000120 	.word	0x20000120

080207c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80207c8:	b580      	push	{r7, lr}
 80207ca:	b082      	sub	sp, #8
 80207cc:	af00      	add	r7, sp, #0
 80207ce:	4603      	mov	r3, r0
 80207d0:	6039      	str	r1, [r7, #0]
 80207d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80207d4:	79fb      	ldrb	r3, [r7, #7]
 80207d6:	2b00      	cmp	r3, #0
 80207d8:	d105      	bne.n	80207e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80207da:	683a      	ldr	r2, [r7, #0]
 80207dc:	4907      	ldr	r1, [pc, #28]	@ (80207fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80207de:	4808      	ldr	r0, [pc, #32]	@ (8020800 <USBD_FS_ConfigStrDescriptor+0x38>)
 80207e0:	f7e9 ffda 	bl	800a798 <USBD_GetString>
 80207e4:	e004      	b.n	80207f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80207e6:	683a      	ldr	r2, [r7, #0]
 80207e8:	4904      	ldr	r1, [pc, #16]	@ (80207fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80207ea:	4805      	ldr	r0, [pc, #20]	@ (8020800 <USBD_FS_ConfigStrDescriptor+0x38>)
 80207ec:	f7e9 ffd4 	bl	800a798 <USBD_GetString>
  }
  return USBD_StrDesc;
 80207f0:	4b02      	ldr	r3, [pc, #8]	@ (80207fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80207f2:	4618      	mov	r0, r3
 80207f4:	3708      	adds	r7, #8
 80207f6:	46bd      	mov	sp, r7
 80207f8:	bd80      	pop	{r7, pc}
 80207fa:	bf00      	nop
 80207fc:	20006068 	.word	0x20006068
 8020800:	08026788 	.word	0x08026788

08020804 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020804:	b580      	push	{r7, lr}
 8020806:	b082      	sub	sp, #8
 8020808:	af00      	add	r7, sp, #0
 802080a:	4603      	mov	r3, r0
 802080c:	6039      	str	r1, [r7, #0]
 802080e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8020810:	79fb      	ldrb	r3, [r7, #7]
 8020812:	2b00      	cmp	r3, #0
 8020814:	d105      	bne.n	8020822 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8020816:	683a      	ldr	r2, [r7, #0]
 8020818:	4907      	ldr	r1, [pc, #28]	@ (8020838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 802081a:	4808      	ldr	r0, [pc, #32]	@ (802083c <USBD_FS_InterfaceStrDescriptor+0x38>)
 802081c:	f7e9 ffbc 	bl	800a798 <USBD_GetString>
 8020820:	e004      	b.n	802082c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8020822:	683a      	ldr	r2, [r7, #0]
 8020824:	4904      	ldr	r1, [pc, #16]	@ (8020838 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8020826:	4805      	ldr	r0, [pc, #20]	@ (802083c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8020828:	f7e9 ffb6 	bl	800a798 <USBD_GetString>
  }
  return USBD_StrDesc;
 802082c:	4b02      	ldr	r3, [pc, #8]	@ (8020838 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 802082e:	4618      	mov	r0, r3
 8020830:	3708      	adds	r7, #8
 8020832:	46bd      	mov	sp, r7
 8020834:	bd80      	pop	{r7, pc}
 8020836:	bf00      	nop
 8020838:	20006068 	.word	0x20006068
 802083c:	08026794 	.word	0x08026794

08020840 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8020840:	b480      	push	{r7}
 8020842:	b083      	sub	sp, #12
 8020844:	af00      	add	r7, sp, #0
 8020846:	4603      	mov	r3, r0
 8020848:	6039      	str	r1, [r7, #0]
 802084a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 802084c:	683b      	ldr	r3, [r7, #0]
 802084e:	220c      	movs	r2, #12
 8020850:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8020852:	4b03      	ldr	r3, [pc, #12]	@ (8020860 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8020854:	4618      	mov	r0, r3
 8020856:	370c      	adds	r7, #12
 8020858:	46bd      	mov	sp, r7
 802085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802085e:	4770      	bx	lr
 8020860:	20000110 	.word	0x20000110

08020864 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8020864:	b580      	push	{r7, lr}
 8020866:	b084      	sub	sp, #16
 8020868:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802086a:	4b0f      	ldr	r3, [pc, #60]	@ (80208a8 <Get_SerialNum+0x44>)
 802086c:	681b      	ldr	r3, [r3, #0]
 802086e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8020870:	4b0e      	ldr	r3, [pc, #56]	@ (80208ac <Get_SerialNum+0x48>)
 8020872:	681b      	ldr	r3, [r3, #0]
 8020874:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8020876:	4b0e      	ldr	r3, [pc, #56]	@ (80208b0 <Get_SerialNum+0x4c>)
 8020878:	681b      	ldr	r3, [r3, #0]
 802087a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 802087c:	68fa      	ldr	r2, [r7, #12]
 802087e:	687b      	ldr	r3, [r7, #4]
 8020880:	4413      	add	r3, r2
 8020882:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8020884:	68fb      	ldr	r3, [r7, #12]
 8020886:	2b00      	cmp	r3, #0
 8020888:	d009      	beq.n	802089e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 802088a:	2208      	movs	r2, #8
 802088c:	4909      	ldr	r1, [pc, #36]	@ (80208b4 <Get_SerialNum+0x50>)
 802088e:	68f8      	ldr	r0, [r7, #12]
 8020890:	f000 f814 	bl	80208bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8020894:	2204      	movs	r2, #4
 8020896:	4908      	ldr	r1, [pc, #32]	@ (80208b8 <Get_SerialNum+0x54>)
 8020898:	68b8      	ldr	r0, [r7, #8]
 802089a:	f000 f80f 	bl	80208bc <IntToUnicode>
  }
}
 802089e:	bf00      	nop
 80208a0:	3710      	adds	r7, #16
 80208a2:	46bd      	mov	sp, r7
 80208a4:	bd80      	pop	{r7, pc}
 80208a6:	bf00      	nop
 80208a8:	1ff0f420 	.word	0x1ff0f420
 80208ac:	1ff0f424 	.word	0x1ff0f424
 80208b0:	1ff0f428 	.word	0x1ff0f428
 80208b4:	20000122 	.word	0x20000122
 80208b8:	20000132 	.word	0x20000132

080208bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80208bc:	b480      	push	{r7}
 80208be:	b087      	sub	sp, #28
 80208c0:	af00      	add	r7, sp, #0
 80208c2:	60f8      	str	r0, [r7, #12]
 80208c4:	60b9      	str	r1, [r7, #8]
 80208c6:	4613      	mov	r3, r2
 80208c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80208ca:	2300      	movs	r3, #0
 80208cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80208ce:	2300      	movs	r3, #0
 80208d0:	75fb      	strb	r3, [r7, #23]
 80208d2:	e027      	b.n	8020924 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80208d4:	68fb      	ldr	r3, [r7, #12]
 80208d6:	0f1b      	lsrs	r3, r3, #28
 80208d8:	2b09      	cmp	r3, #9
 80208da:	d80b      	bhi.n	80208f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80208dc:	68fb      	ldr	r3, [r7, #12]
 80208de:	0f1b      	lsrs	r3, r3, #28
 80208e0:	b2da      	uxtb	r2, r3
 80208e2:	7dfb      	ldrb	r3, [r7, #23]
 80208e4:	005b      	lsls	r3, r3, #1
 80208e6:	4619      	mov	r1, r3
 80208e8:	68bb      	ldr	r3, [r7, #8]
 80208ea:	440b      	add	r3, r1
 80208ec:	3230      	adds	r2, #48	@ 0x30
 80208ee:	b2d2      	uxtb	r2, r2
 80208f0:	701a      	strb	r2, [r3, #0]
 80208f2:	e00a      	b.n	802090a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80208f4:	68fb      	ldr	r3, [r7, #12]
 80208f6:	0f1b      	lsrs	r3, r3, #28
 80208f8:	b2da      	uxtb	r2, r3
 80208fa:	7dfb      	ldrb	r3, [r7, #23]
 80208fc:	005b      	lsls	r3, r3, #1
 80208fe:	4619      	mov	r1, r3
 8020900:	68bb      	ldr	r3, [r7, #8]
 8020902:	440b      	add	r3, r1
 8020904:	3237      	adds	r2, #55	@ 0x37
 8020906:	b2d2      	uxtb	r2, r2
 8020908:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 802090a:	68fb      	ldr	r3, [r7, #12]
 802090c:	011b      	lsls	r3, r3, #4
 802090e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8020910:	7dfb      	ldrb	r3, [r7, #23]
 8020912:	005b      	lsls	r3, r3, #1
 8020914:	3301      	adds	r3, #1
 8020916:	68ba      	ldr	r2, [r7, #8]
 8020918:	4413      	add	r3, r2
 802091a:	2200      	movs	r2, #0
 802091c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 802091e:	7dfb      	ldrb	r3, [r7, #23]
 8020920:	3301      	adds	r3, #1
 8020922:	75fb      	strb	r3, [r7, #23]
 8020924:	7dfa      	ldrb	r2, [r7, #23]
 8020926:	79fb      	ldrb	r3, [r7, #7]
 8020928:	429a      	cmp	r2, r3
 802092a:	d3d3      	bcc.n	80208d4 <IntToUnicode+0x18>
  }
}
 802092c:	bf00      	nop
 802092e:	bf00      	nop
 8020930:	371c      	adds	r7, #28
 8020932:	46bd      	mov	sp, r7
 8020934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020938:	4770      	bx	lr
	...

0802093c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 802093c:	b580      	push	{r7, lr}
 802093e:	b0ae      	sub	sp, #184	@ 0xb8
 8020940:	af00      	add	r7, sp, #0
 8020942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020944:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8020948:	2200      	movs	r2, #0
 802094a:	601a      	str	r2, [r3, #0]
 802094c:	605a      	str	r2, [r3, #4]
 802094e:	609a      	str	r2, [r3, #8]
 8020950:	60da      	str	r2, [r3, #12]
 8020952:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8020954:	f107 0314 	add.w	r3, r7, #20
 8020958:	2290      	movs	r2, #144	@ 0x90
 802095a:	2100      	movs	r1, #0
 802095c:	4618      	mov	r0, r3
 802095e:	f000 fef9 	bl	8021754 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8020962:	687b      	ldr	r3, [r7, #4]
 8020964:	681b      	ldr	r3, [r3, #0]
 8020966:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 802096a:	d161      	bne.n	8020a30 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 802096c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8020970:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8020972:	2300      	movs	r3, #0
 8020974:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8020978:	f107 0314 	add.w	r3, r7, #20
 802097c:	4618      	mov	r0, r3
 802097e:	f7e4 fa1b 	bl	8004db8 <HAL_RCCEx_PeriphCLKConfig>
 8020982:	4603      	mov	r3, r0
 8020984:	2b00      	cmp	r3, #0
 8020986:	d001      	beq.n	802098c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8020988:	f7e0 f930 	bl	8000bec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 802098c:	4b2a      	ldr	r3, [pc, #168]	@ (8020a38 <HAL_PCD_MspInit+0xfc>)
 802098e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8020990:	4a29      	ldr	r2, [pc, #164]	@ (8020a38 <HAL_PCD_MspInit+0xfc>)
 8020992:	f043 0301 	orr.w	r3, r3, #1
 8020996:	6313      	str	r3, [r2, #48]	@ 0x30
 8020998:	4b27      	ldr	r3, [pc, #156]	@ (8020a38 <HAL_PCD_MspInit+0xfc>)
 802099a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802099c:	f003 0301 	and.w	r3, r3, #1
 80209a0:	613b      	str	r3, [r7, #16]
 80209a2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80209a4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80209a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80209ac:	2302      	movs	r3, #2
 80209ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80209b2:	2300      	movs	r3, #0
 80209b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80209b8:	2303      	movs	r3, #3
 80209ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80209be:	230a      	movs	r3, #10
 80209c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80209c4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80209c8:	4619      	mov	r1, r3
 80209ca:	481c      	ldr	r0, [pc, #112]	@ (8020a3c <HAL_PCD_MspInit+0x100>)
 80209cc:	f7e2 f83e 	bl	8002a4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80209d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80209d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80209d8:	2300      	movs	r3, #0
 80209da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80209de:	2300      	movs	r3, #0
 80209e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80209e4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80209e8:	4619      	mov	r1, r3
 80209ea:	4814      	ldr	r0, [pc, #80]	@ (8020a3c <HAL_PCD_MspInit+0x100>)
 80209ec:	f7e2 f82e 	bl	8002a4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80209f0:	4b11      	ldr	r3, [pc, #68]	@ (8020a38 <HAL_PCD_MspInit+0xfc>)
 80209f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80209f4:	4a10      	ldr	r2, [pc, #64]	@ (8020a38 <HAL_PCD_MspInit+0xfc>)
 80209f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80209fa:	6353      	str	r3, [r2, #52]	@ 0x34
 80209fc:	4b0e      	ldr	r3, [pc, #56]	@ (8020a38 <HAL_PCD_MspInit+0xfc>)
 80209fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020a00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8020a04:	60fb      	str	r3, [r7, #12]
 8020a06:	68fb      	ldr	r3, [r7, #12]
 8020a08:	4b0b      	ldr	r3, [pc, #44]	@ (8020a38 <HAL_PCD_MspInit+0xfc>)
 8020a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8020a38 <HAL_PCD_MspInit+0xfc>)
 8020a0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8020a12:	6453      	str	r3, [r2, #68]	@ 0x44
 8020a14:	4b08      	ldr	r3, [pc, #32]	@ (8020a38 <HAL_PCD_MspInit+0xfc>)
 8020a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020a18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8020a1c:	60bb      	str	r3, [r7, #8]
 8020a1e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8020a20:	2200      	movs	r2, #0
 8020a22:	2105      	movs	r1, #5
 8020a24:	2043      	movs	r0, #67	@ 0x43
 8020a26:	f7e0 fd71 	bl	800150c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8020a2a:	2043      	movs	r0, #67	@ 0x43
 8020a2c:	f7e0 fd8a 	bl	8001544 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8020a30:	bf00      	nop
 8020a32:	37b8      	adds	r7, #184	@ 0xb8
 8020a34:	46bd      	mov	sp, r7
 8020a36:	bd80      	pop	{r7, pc}
 8020a38:	40023800 	.word	0x40023800
 8020a3c:	40020000 	.word	0x40020000

08020a40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020a40:	b580      	push	{r7, lr}
 8020a42:	b082      	sub	sp, #8
 8020a44:	af00      	add	r7, sp, #0
 8020a46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8020a48:	687b      	ldr	r3, [r7, #4]
 8020a4a:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 8020a4e:	687b      	ldr	r3, [r7, #4]
 8020a50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8020a54:	4619      	mov	r1, r3
 8020a56:	4610      	mov	r0, r2
 8020a58:	f7e8 fcfb 	bl	8009452 <USBD_LL_SetupStage>
}
 8020a5c:	bf00      	nop
 8020a5e:	3708      	adds	r7, #8
 8020a60:	46bd      	mov	sp, r7
 8020a62:	bd80      	pop	{r7, pc}

08020a64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020a64:	b580      	push	{r7, lr}
 8020a66:	b082      	sub	sp, #8
 8020a68:	af00      	add	r7, sp, #0
 8020a6a:	6078      	str	r0, [r7, #4]
 8020a6c:	460b      	mov	r3, r1
 8020a6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8020a70:	687b      	ldr	r3, [r7, #4]
 8020a72:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 8020a76:	78fa      	ldrb	r2, [r7, #3]
 8020a78:	6879      	ldr	r1, [r7, #4]
 8020a7a:	4613      	mov	r3, r2
 8020a7c:	00db      	lsls	r3, r3, #3
 8020a7e:	4413      	add	r3, r2
 8020a80:	009b      	lsls	r3, r3, #2
 8020a82:	440b      	add	r3, r1
 8020a84:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8020a88:	681a      	ldr	r2, [r3, #0]
 8020a8a:	78fb      	ldrb	r3, [r7, #3]
 8020a8c:	4619      	mov	r1, r3
 8020a8e:	f7e8 fd35 	bl	80094fc <USBD_LL_DataOutStage>
}
 8020a92:	bf00      	nop
 8020a94:	3708      	adds	r7, #8
 8020a96:	46bd      	mov	sp, r7
 8020a98:	bd80      	pop	{r7, pc}

08020a9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020a9a:	b580      	push	{r7, lr}
 8020a9c:	b082      	sub	sp, #8
 8020a9e:	af00      	add	r7, sp, #0
 8020aa0:	6078      	str	r0, [r7, #4]
 8020aa2:	460b      	mov	r3, r1
 8020aa4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8020aa6:	687b      	ldr	r3, [r7, #4]
 8020aa8:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 8020aac:	78fa      	ldrb	r2, [r7, #3]
 8020aae:	6879      	ldr	r1, [r7, #4]
 8020ab0:	4613      	mov	r3, r2
 8020ab2:	00db      	lsls	r3, r3, #3
 8020ab4:	4413      	add	r3, r2
 8020ab6:	009b      	lsls	r3, r3, #2
 8020ab8:	440b      	add	r3, r1
 8020aba:	3320      	adds	r3, #32
 8020abc:	681a      	ldr	r2, [r3, #0]
 8020abe:	78fb      	ldrb	r3, [r7, #3]
 8020ac0:	4619      	mov	r1, r3
 8020ac2:	f7e8 fdd7 	bl	8009674 <USBD_LL_DataInStage>
}
 8020ac6:	bf00      	nop
 8020ac8:	3708      	adds	r7, #8
 8020aca:	46bd      	mov	sp, r7
 8020acc:	bd80      	pop	{r7, pc}

08020ace <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020ace:	b580      	push	{r7, lr}
 8020ad0:	b082      	sub	sp, #8
 8020ad2:	af00      	add	r7, sp, #0
 8020ad4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8020ad6:	687b      	ldr	r3, [r7, #4]
 8020ad8:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8020adc:	4618      	mov	r0, r3
 8020ade:	f7e8 ff1b 	bl	8009918 <USBD_LL_SOF>
}
 8020ae2:	bf00      	nop
 8020ae4:	3708      	adds	r7, #8
 8020ae6:	46bd      	mov	sp, r7
 8020ae8:	bd80      	pop	{r7, pc}

08020aea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020aea:	b580      	push	{r7, lr}
 8020aec:	b084      	sub	sp, #16
 8020aee:	af00      	add	r7, sp, #0
 8020af0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8020af2:	2301      	movs	r3, #1
 8020af4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8020af6:	687b      	ldr	r3, [r7, #4]
 8020af8:	79db      	ldrb	r3, [r3, #7]
 8020afa:	2b00      	cmp	r3, #0
 8020afc:	d102      	bne.n	8020b04 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8020afe:	2300      	movs	r3, #0
 8020b00:	73fb      	strb	r3, [r7, #15]
 8020b02:	e008      	b.n	8020b16 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8020b04:	687b      	ldr	r3, [r7, #4]
 8020b06:	79db      	ldrb	r3, [r3, #7]
 8020b08:	2b02      	cmp	r3, #2
 8020b0a:	d102      	bne.n	8020b12 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8020b0c:	2301      	movs	r3, #1
 8020b0e:	73fb      	strb	r3, [r7, #15]
 8020b10:	e001      	b.n	8020b16 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8020b12:	f7e0 f86b 	bl	8000bec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8020b16:	687b      	ldr	r3, [r7, #4]
 8020b18:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8020b1c:	7bfa      	ldrb	r2, [r7, #15]
 8020b1e:	4611      	mov	r1, r2
 8020b20:	4618      	mov	r0, r3
 8020b22:	f7e8 feb5 	bl	8009890 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8020b26:	687b      	ldr	r3, [r7, #4]
 8020b28:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8020b2c:	4618      	mov	r0, r3
 8020b2e:	f7e8 fe5c 	bl	80097ea <USBD_LL_Reset>
}
 8020b32:	bf00      	nop
 8020b34:	3710      	adds	r7, #16
 8020b36:	46bd      	mov	sp, r7
 8020b38:	bd80      	pop	{r7, pc}
	...

08020b3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020b3c:	b580      	push	{r7, lr}
 8020b3e:	b082      	sub	sp, #8
 8020b40:	af00      	add	r7, sp, #0
 8020b42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8020b44:	687b      	ldr	r3, [r7, #4]
 8020b46:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8020b4a:	4618      	mov	r0, r3
 8020b4c:	f7e8 feb0 	bl	80098b0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8020b50:	687b      	ldr	r3, [r7, #4]
 8020b52:	681b      	ldr	r3, [r3, #0]
 8020b54:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8020b58:	681b      	ldr	r3, [r3, #0]
 8020b5a:	687a      	ldr	r2, [r7, #4]
 8020b5c:	6812      	ldr	r2, [r2, #0]
 8020b5e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8020b62:	f043 0301 	orr.w	r3, r3, #1
 8020b66:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8020b68:	687b      	ldr	r3, [r7, #4]
 8020b6a:	7adb      	ldrb	r3, [r3, #11]
 8020b6c:	2b00      	cmp	r3, #0
 8020b6e:	d005      	beq.n	8020b7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8020b70:	4b04      	ldr	r3, [pc, #16]	@ (8020b84 <HAL_PCD_SuspendCallback+0x48>)
 8020b72:	691b      	ldr	r3, [r3, #16]
 8020b74:	4a03      	ldr	r2, [pc, #12]	@ (8020b84 <HAL_PCD_SuspendCallback+0x48>)
 8020b76:	f043 0306 	orr.w	r3, r3, #6
 8020b7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8020b7c:	bf00      	nop
 8020b7e:	3708      	adds	r7, #8
 8020b80:	46bd      	mov	sp, r7
 8020b82:	bd80      	pop	{r7, pc}
 8020b84:	e000ed00 	.word	0xe000ed00

08020b88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020b88:	b580      	push	{r7, lr}
 8020b8a:	b082      	sub	sp, #8
 8020b8c:	af00      	add	r7, sp, #0
 8020b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8020b90:	687b      	ldr	r3, [r7, #4]
 8020b92:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8020b96:	4618      	mov	r0, r3
 8020b98:	f7e8 fea6 	bl	80098e8 <USBD_LL_Resume>
}
 8020b9c:	bf00      	nop
 8020b9e:	3708      	adds	r7, #8
 8020ba0:	46bd      	mov	sp, r7
 8020ba2:	bd80      	pop	{r7, pc}

08020ba4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020ba4:	b580      	push	{r7, lr}
 8020ba6:	b082      	sub	sp, #8
 8020ba8:	af00      	add	r7, sp, #0
 8020baa:	6078      	str	r0, [r7, #4]
 8020bac:	460b      	mov	r3, r1
 8020bae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8020bb0:	687b      	ldr	r3, [r7, #4]
 8020bb2:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8020bb6:	78fa      	ldrb	r2, [r7, #3]
 8020bb8:	4611      	mov	r1, r2
 8020bba:	4618      	mov	r0, r3
 8020bbc:	f7e8 fefe 	bl	80099bc <USBD_LL_IsoOUTIncomplete>
}
 8020bc0:	bf00      	nop
 8020bc2:	3708      	adds	r7, #8
 8020bc4:	46bd      	mov	sp, r7
 8020bc6:	bd80      	pop	{r7, pc}

08020bc8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020bc8:	b580      	push	{r7, lr}
 8020bca:	b082      	sub	sp, #8
 8020bcc:	af00      	add	r7, sp, #0
 8020bce:	6078      	str	r0, [r7, #4]
 8020bd0:	460b      	mov	r3, r1
 8020bd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8020bd4:	687b      	ldr	r3, [r7, #4]
 8020bd6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8020bda:	78fa      	ldrb	r2, [r7, #3]
 8020bdc:	4611      	mov	r1, r2
 8020bde:	4618      	mov	r0, r3
 8020be0:	f7e8 feba 	bl	8009958 <USBD_LL_IsoINIncomplete>
}
 8020be4:	bf00      	nop
 8020be6:	3708      	adds	r7, #8
 8020be8:	46bd      	mov	sp, r7
 8020bea:	bd80      	pop	{r7, pc}

08020bec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020bec:	b580      	push	{r7, lr}
 8020bee:	b082      	sub	sp, #8
 8020bf0:	af00      	add	r7, sp, #0
 8020bf2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8020bf4:	687b      	ldr	r3, [r7, #4]
 8020bf6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8020bfa:	4618      	mov	r0, r3
 8020bfc:	f7e8 ff10 	bl	8009a20 <USBD_LL_DevConnected>
}
 8020c00:	bf00      	nop
 8020c02:	3708      	adds	r7, #8
 8020c04:	46bd      	mov	sp, r7
 8020c06:	bd80      	pop	{r7, pc}

08020c08 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8020c08:	b580      	push	{r7, lr}
 8020c0a:	b082      	sub	sp, #8
 8020c0c:	af00      	add	r7, sp, #0
 8020c0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8020c10:	687b      	ldr	r3, [r7, #4]
 8020c12:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8020c16:	4618      	mov	r0, r3
 8020c18:	f7e8 ff0d 	bl	8009a36 <USBD_LL_DevDisconnected>
}
 8020c1c:	bf00      	nop
 8020c1e:	3708      	adds	r7, #8
 8020c20:	46bd      	mov	sp, r7
 8020c22:	bd80      	pop	{r7, pc}

08020c24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8020c24:	b580      	push	{r7, lr}
 8020c26:	b082      	sub	sp, #8
 8020c28:	af00      	add	r7, sp, #0
 8020c2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8020c2c:	687b      	ldr	r3, [r7, #4]
 8020c2e:	781b      	ldrb	r3, [r3, #0]
 8020c30:	2b00      	cmp	r3, #0
 8020c32:	d13c      	bne.n	8020cae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8020c34:	4a20      	ldr	r2, [pc, #128]	@ (8020cb8 <USBD_LL_Init+0x94>)
 8020c36:	687b      	ldr	r3, [r7, #4]
 8020c38:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 8020c3c:	687b      	ldr	r3, [r7, #4]
 8020c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8020cb8 <USBD_LL_Init+0x94>)
 8020c40:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8020c44:	4b1c      	ldr	r3, [pc, #112]	@ (8020cb8 <USBD_LL_Init+0x94>)
 8020c46:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8020c4a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8020c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8020cb8 <USBD_LL_Init+0x94>)
 8020c4e:	2206      	movs	r2, #6
 8020c50:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8020c52:	4b19      	ldr	r3, [pc, #100]	@ (8020cb8 <USBD_LL_Init+0x94>)
 8020c54:	2202      	movs	r2, #2
 8020c56:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8020c58:	4b17      	ldr	r3, [pc, #92]	@ (8020cb8 <USBD_LL_Init+0x94>)
 8020c5a:	2200      	movs	r2, #0
 8020c5c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8020c5e:	4b16      	ldr	r3, [pc, #88]	@ (8020cb8 <USBD_LL_Init+0x94>)
 8020c60:	2202      	movs	r2, #2
 8020c62:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8020c64:	4b14      	ldr	r3, [pc, #80]	@ (8020cb8 <USBD_LL_Init+0x94>)
 8020c66:	2201      	movs	r2, #1
 8020c68:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8020c6a:	4b13      	ldr	r3, [pc, #76]	@ (8020cb8 <USBD_LL_Init+0x94>)
 8020c6c:	2200      	movs	r2, #0
 8020c6e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8020c70:	4b11      	ldr	r3, [pc, #68]	@ (8020cb8 <USBD_LL_Init+0x94>)
 8020c72:	2200      	movs	r2, #0
 8020c74:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8020c76:	4b10      	ldr	r3, [pc, #64]	@ (8020cb8 <USBD_LL_Init+0x94>)
 8020c78:	2201      	movs	r2, #1
 8020c7a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8020c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8020cb8 <USBD_LL_Init+0x94>)
 8020c7e:	2200      	movs	r2, #0
 8020c80:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8020c82:	480d      	ldr	r0, [pc, #52]	@ (8020cb8 <USBD_LL_Init+0x94>)
 8020c84:	f7e2 f8a7 	bl	8002dd6 <HAL_PCD_Init>
 8020c88:	4603      	mov	r3, r0
 8020c8a:	2b00      	cmp	r3, #0
 8020c8c:	d001      	beq.n	8020c92 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8020c8e:	f7df ffad 	bl	8000bec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8020c92:	2180      	movs	r1, #128	@ 0x80
 8020c94:	4808      	ldr	r0, [pc, #32]	@ (8020cb8 <USBD_LL_Init+0x94>)
 8020c96:	f7e3 faf4 	bl	8004282 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8020c9a:	2240      	movs	r2, #64	@ 0x40
 8020c9c:	2100      	movs	r1, #0
 8020c9e:	4806      	ldr	r0, [pc, #24]	@ (8020cb8 <USBD_LL_Init+0x94>)
 8020ca0:	f7e3 faa8 	bl	80041f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8020ca4:	2280      	movs	r2, #128	@ 0x80
 8020ca6:	2101      	movs	r1, #1
 8020ca8:	4803      	ldr	r0, [pc, #12]	@ (8020cb8 <USBD_LL_Init+0x94>)
 8020caa:	f7e3 faa3 	bl	80041f4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8020cae:	2300      	movs	r3, #0
}
 8020cb0:	4618      	mov	r0, r3
 8020cb2:	3708      	adds	r7, #8
 8020cb4:	46bd      	mov	sp, r7
 8020cb6:	bd80      	pop	{r7, pc}
 8020cb8:	20006268 	.word	0x20006268

08020cbc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8020cbc:	b580      	push	{r7, lr}
 8020cbe:	b084      	sub	sp, #16
 8020cc0:	af00      	add	r7, sp, #0
 8020cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020cc4:	2300      	movs	r3, #0
 8020cc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020cc8:	2300      	movs	r3, #0
 8020cca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8020ccc:	687b      	ldr	r3, [r7, #4]
 8020cce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8020cd2:	4618      	mov	r0, r3
 8020cd4:	f7e2 f995 	bl	8003002 <HAL_PCD_Start>
 8020cd8:	4603      	mov	r3, r0
 8020cda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020cdc:	7bfb      	ldrb	r3, [r7, #15]
 8020cde:	4618      	mov	r0, r3
 8020ce0:	f000 f97e 	bl	8020fe0 <USBD_Get_USB_Status>
 8020ce4:	4603      	mov	r3, r0
 8020ce6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020ce8:	7bbb      	ldrb	r3, [r7, #14]
}
 8020cea:	4618      	mov	r0, r3
 8020cec:	3710      	adds	r7, #16
 8020cee:	46bd      	mov	sp, r7
 8020cf0:	bd80      	pop	{r7, pc}

08020cf2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8020cf2:	b580      	push	{r7, lr}
 8020cf4:	b084      	sub	sp, #16
 8020cf6:	af00      	add	r7, sp, #0
 8020cf8:	6078      	str	r0, [r7, #4]
 8020cfa:	4608      	mov	r0, r1
 8020cfc:	4611      	mov	r1, r2
 8020cfe:	461a      	mov	r2, r3
 8020d00:	4603      	mov	r3, r0
 8020d02:	70fb      	strb	r3, [r7, #3]
 8020d04:	460b      	mov	r3, r1
 8020d06:	70bb      	strb	r3, [r7, #2]
 8020d08:	4613      	mov	r3, r2
 8020d0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020d0c:	2300      	movs	r3, #0
 8020d0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020d10:	2300      	movs	r3, #0
 8020d12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8020d14:	687b      	ldr	r3, [r7, #4]
 8020d16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8020d1a:	78bb      	ldrb	r3, [r7, #2]
 8020d1c:	883a      	ldrh	r2, [r7, #0]
 8020d1e:	78f9      	ldrb	r1, [r7, #3]
 8020d20:	f7e2 fe83 	bl	8003a2a <HAL_PCD_EP_Open>
 8020d24:	4603      	mov	r3, r0
 8020d26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020d28:	7bfb      	ldrb	r3, [r7, #15]
 8020d2a:	4618      	mov	r0, r3
 8020d2c:	f000 f958 	bl	8020fe0 <USBD_Get_USB_Status>
 8020d30:	4603      	mov	r3, r0
 8020d32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020d34:	7bbb      	ldrb	r3, [r7, #14]
}
 8020d36:	4618      	mov	r0, r3
 8020d38:	3710      	adds	r7, #16
 8020d3a:	46bd      	mov	sp, r7
 8020d3c:	bd80      	pop	{r7, pc}

08020d3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020d3e:	b580      	push	{r7, lr}
 8020d40:	b084      	sub	sp, #16
 8020d42:	af00      	add	r7, sp, #0
 8020d44:	6078      	str	r0, [r7, #4]
 8020d46:	460b      	mov	r3, r1
 8020d48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020d4a:	2300      	movs	r3, #0
 8020d4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020d4e:	2300      	movs	r3, #0
 8020d50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8020d52:	687b      	ldr	r3, [r7, #4]
 8020d54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8020d58:	78fa      	ldrb	r2, [r7, #3]
 8020d5a:	4611      	mov	r1, r2
 8020d5c:	4618      	mov	r0, r3
 8020d5e:	f7e2 fece 	bl	8003afe <HAL_PCD_EP_Close>
 8020d62:	4603      	mov	r3, r0
 8020d64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020d66:	7bfb      	ldrb	r3, [r7, #15]
 8020d68:	4618      	mov	r0, r3
 8020d6a:	f000 f939 	bl	8020fe0 <USBD_Get_USB_Status>
 8020d6e:	4603      	mov	r3, r0
 8020d70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020d72:	7bbb      	ldrb	r3, [r7, #14]
}
 8020d74:	4618      	mov	r0, r3
 8020d76:	3710      	adds	r7, #16
 8020d78:	46bd      	mov	sp, r7
 8020d7a:	bd80      	pop	{r7, pc}

08020d7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020d7c:	b580      	push	{r7, lr}
 8020d7e:	b084      	sub	sp, #16
 8020d80:	af00      	add	r7, sp, #0
 8020d82:	6078      	str	r0, [r7, #4]
 8020d84:	460b      	mov	r3, r1
 8020d86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020d88:	2300      	movs	r3, #0
 8020d8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020d8c:	2300      	movs	r3, #0
 8020d8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8020d90:	687b      	ldr	r3, [r7, #4]
 8020d92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8020d96:	78fa      	ldrb	r2, [r7, #3]
 8020d98:	4611      	mov	r1, r2
 8020d9a:	4618      	mov	r0, r3
 8020d9c:	f7e2 ff86 	bl	8003cac <HAL_PCD_EP_SetStall>
 8020da0:	4603      	mov	r3, r0
 8020da2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020da4:	7bfb      	ldrb	r3, [r7, #15]
 8020da6:	4618      	mov	r0, r3
 8020da8:	f000 f91a 	bl	8020fe0 <USBD_Get_USB_Status>
 8020dac:	4603      	mov	r3, r0
 8020dae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020db0:	7bbb      	ldrb	r3, [r7, #14]
}
 8020db2:	4618      	mov	r0, r3
 8020db4:	3710      	adds	r7, #16
 8020db6:	46bd      	mov	sp, r7
 8020db8:	bd80      	pop	{r7, pc}

08020dba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020dba:	b580      	push	{r7, lr}
 8020dbc:	b084      	sub	sp, #16
 8020dbe:	af00      	add	r7, sp, #0
 8020dc0:	6078      	str	r0, [r7, #4]
 8020dc2:	460b      	mov	r3, r1
 8020dc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020dc6:	2300      	movs	r3, #0
 8020dc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020dca:	2300      	movs	r3, #0
 8020dcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8020dce:	687b      	ldr	r3, [r7, #4]
 8020dd0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8020dd4:	78fa      	ldrb	r2, [r7, #3]
 8020dd6:	4611      	mov	r1, r2
 8020dd8:	4618      	mov	r0, r3
 8020dda:	f7e2 ffca 	bl	8003d72 <HAL_PCD_EP_ClrStall>
 8020dde:	4603      	mov	r3, r0
 8020de0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020de2:	7bfb      	ldrb	r3, [r7, #15]
 8020de4:	4618      	mov	r0, r3
 8020de6:	f000 f8fb 	bl	8020fe0 <USBD_Get_USB_Status>
 8020dea:	4603      	mov	r3, r0
 8020dec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020dee:	7bbb      	ldrb	r3, [r7, #14]
}
 8020df0:	4618      	mov	r0, r3
 8020df2:	3710      	adds	r7, #16
 8020df4:	46bd      	mov	sp, r7
 8020df6:	bd80      	pop	{r7, pc}

08020df8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020df8:	b480      	push	{r7}
 8020dfa:	b085      	sub	sp, #20
 8020dfc:	af00      	add	r7, sp, #0
 8020dfe:	6078      	str	r0, [r7, #4]
 8020e00:	460b      	mov	r3, r1
 8020e02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8020e04:	687b      	ldr	r3, [r7, #4]
 8020e06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8020e0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8020e0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8020e10:	2b00      	cmp	r3, #0
 8020e12:	da0b      	bge.n	8020e2c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8020e14:	78fb      	ldrb	r3, [r7, #3]
 8020e16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8020e1a:	68f9      	ldr	r1, [r7, #12]
 8020e1c:	4613      	mov	r3, r2
 8020e1e:	00db      	lsls	r3, r3, #3
 8020e20:	4413      	add	r3, r2
 8020e22:	009b      	lsls	r3, r3, #2
 8020e24:	440b      	add	r3, r1
 8020e26:	3316      	adds	r3, #22
 8020e28:	781b      	ldrb	r3, [r3, #0]
 8020e2a:	e00b      	b.n	8020e44 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8020e2c:	78fb      	ldrb	r3, [r7, #3]
 8020e2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8020e32:	68f9      	ldr	r1, [r7, #12]
 8020e34:	4613      	mov	r3, r2
 8020e36:	00db      	lsls	r3, r3, #3
 8020e38:	4413      	add	r3, r2
 8020e3a:	009b      	lsls	r3, r3, #2
 8020e3c:	440b      	add	r3, r1
 8020e3e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8020e42:	781b      	ldrb	r3, [r3, #0]
  }
}
 8020e44:	4618      	mov	r0, r3
 8020e46:	3714      	adds	r7, #20
 8020e48:	46bd      	mov	sp, r7
 8020e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e4e:	4770      	bx	lr

08020e50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8020e50:	b580      	push	{r7, lr}
 8020e52:	b084      	sub	sp, #16
 8020e54:	af00      	add	r7, sp, #0
 8020e56:	6078      	str	r0, [r7, #4]
 8020e58:	460b      	mov	r3, r1
 8020e5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020e5c:	2300      	movs	r3, #0
 8020e5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020e60:	2300      	movs	r3, #0
 8020e62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8020e64:	687b      	ldr	r3, [r7, #4]
 8020e66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8020e6a:	78fa      	ldrb	r2, [r7, #3]
 8020e6c:	4611      	mov	r1, r2
 8020e6e:	4618      	mov	r0, r3
 8020e70:	f7e2 fdb7 	bl	80039e2 <HAL_PCD_SetAddress>
 8020e74:	4603      	mov	r3, r0
 8020e76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020e78:	7bfb      	ldrb	r3, [r7, #15]
 8020e7a:	4618      	mov	r0, r3
 8020e7c:	f000 f8b0 	bl	8020fe0 <USBD_Get_USB_Status>
 8020e80:	4603      	mov	r3, r0
 8020e82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020e84:	7bbb      	ldrb	r3, [r7, #14]
}
 8020e86:	4618      	mov	r0, r3
 8020e88:	3710      	adds	r7, #16
 8020e8a:	46bd      	mov	sp, r7
 8020e8c:	bd80      	pop	{r7, pc}

08020e8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8020e8e:	b580      	push	{r7, lr}
 8020e90:	b086      	sub	sp, #24
 8020e92:	af00      	add	r7, sp, #0
 8020e94:	60f8      	str	r0, [r7, #12]
 8020e96:	607a      	str	r2, [r7, #4]
 8020e98:	603b      	str	r3, [r7, #0]
 8020e9a:	460b      	mov	r3, r1
 8020e9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020e9e:	2300      	movs	r3, #0
 8020ea0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020ea2:	2300      	movs	r3, #0
 8020ea4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8020ea6:	68fb      	ldr	r3, [r7, #12]
 8020ea8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8020eac:	7af9      	ldrb	r1, [r7, #11]
 8020eae:	683b      	ldr	r3, [r7, #0]
 8020eb0:	687a      	ldr	r2, [r7, #4]
 8020eb2:	f7e2 fec1 	bl	8003c38 <HAL_PCD_EP_Transmit>
 8020eb6:	4603      	mov	r3, r0
 8020eb8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020eba:	7dfb      	ldrb	r3, [r7, #23]
 8020ebc:	4618      	mov	r0, r3
 8020ebe:	f000 f88f 	bl	8020fe0 <USBD_Get_USB_Status>
 8020ec2:	4603      	mov	r3, r0
 8020ec4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8020ec6:	7dbb      	ldrb	r3, [r7, #22]
}
 8020ec8:	4618      	mov	r0, r3
 8020eca:	3718      	adds	r7, #24
 8020ecc:	46bd      	mov	sp, r7
 8020ece:	bd80      	pop	{r7, pc}

08020ed0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8020ed0:	b580      	push	{r7, lr}
 8020ed2:	b086      	sub	sp, #24
 8020ed4:	af00      	add	r7, sp, #0
 8020ed6:	60f8      	str	r0, [r7, #12]
 8020ed8:	607a      	str	r2, [r7, #4]
 8020eda:	603b      	str	r3, [r7, #0]
 8020edc:	460b      	mov	r3, r1
 8020ede:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020ee0:	2300      	movs	r3, #0
 8020ee2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020ee4:	2300      	movs	r3, #0
 8020ee6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8020ee8:	68fb      	ldr	r3, [r7, #12]
 8020eea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8020eee:	7af9      	ldrb	r1, [r7, #11]
 8020ef0:	683b      	ldr	r3, [r7, #0]
 8020ef2:	687a      	ldr	r2, [r7, #4]
 8020ef4:	f7e2 fe4d 	bl	8003b92 <HAL_PCD_EP_Receive>
 8020ef8:	4603      	mov	r3, r0
 8020efa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8020efc:	7dfb      	ldrb	r3, [r7, #23]
 8020efe:	4618      	mov	r0, r3
 8020f00:	f000 f86e 	bl	8020fe0 <USBD_Get_USB_Status>
 8020f04:	4603      	mov	r3, r0
 8020f06:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8020f08:	7dbb      	ldrb	r3, [r7, #22]
}
 8020f0a:	4618      	mov	r0, r3
 8020f0c:	3718      	adds	r7, #24
 8020f0e:	46bd      	mov	sp, r7
 8020f10:	bd80      	pop	{r7, pc}

08020f12 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8020f12:	b580      	push	{r7, lr}
 8020f14:	b082      	sub	sp, #8
 8020f16:	af00      	add	r7, sp, #0
 8020f18:	6078      	str	r0, [r7, #4]
 8020f1a:	460b      	mov	r3, r1
 8020f1c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8020f1e:	687b      	ldr	r3, [r7, #4]
 8020f20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8020f24:	78fa      	ldrb	r2, [r7, #3]
 8020f26:	4611      	mov	r1, r2
 8020f28:	4618      	mov	r0, r3
 8020f2a:	f7e2 fe6d 	bl	8003c08 <HAL_PCD_EP_GetRxCount>
 8020f2e:	4603      	mov	r3, r0
}
 8020f30:	4618      	mov	r0, r3
 8020f32:	3708      	adds	r7, #8
 8020f34:	46bd      	mov	sp, r7
 8020f36:	bd80      	pop	{r7, pc}

08020f38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8020f38:	b580      	push	{r7, lr}
 8020f3a:	b082      	sub	sp, #8
 8020f3c:	af00      	add	r7, sp, #0
 8020f3e:	6078      	str	r0, [r7, #4]
 8020f40:	460b      	mov	r3, r1
 8020f42:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8020f44:	78fb      	ldrb	r3, [r7, #3]
 8020f46:	2b00      	cmp	r3, #0
 8020f48:	d002      	beq.n	8020f50 <HAL_PCDEx_LPM_Callback+0x18>
 8020f4a:	2b01      	cmp	r3, #1
 8020f4c:	d01f      	beq.n	8020f8e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8020f4e:	e03b      	b.n	8020fc8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8020f50:	687b      	ldr	r3, [r7, #4]
 8020f52:	7adb      	ldrb	r3, [r3, #11]
 8020f54:	2b00      	cmp	r3, #0
 8020f56:	d007      	beq.n	8020f68 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8020f58:	f000 f83c 	bl	8020fd4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8020f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8020fd0 <HAL_PCDEx_LPM_Callback+0x98>)
 8020f5e:	691b      	ldr	r3, [r3, #16]
 8020f60:	4a1b      	ldr	r2, [pc, #108]	@ (8020fd0 <HAL_PCDEx_LPM_Callback+0x98>)
 8020f62:	f023 0306 	bic.w	r3, r3, #6
 8020f66:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8020f68:	687b      	ldr	r3, [r7, #4]
 8020f6a:	681b      	ldr	r3, [r3, #0]
 8020f6c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8020f70:	681b      	ldr	r3, [r3, #0]
 8020f72:	687a      	ldr	r2, [r7, #4]
 8020f74:	6812      	ldr	r2, [r2, #0]
 8020f76:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8020f7a:	f023 0301 	bic.w	r3, r3, #1
 8020f7e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8020f80:	687b      	ldr	r3, [r7, #4]
 8020f82:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8020f86:	4618      	mov	r0, r3
 8020f88:	f7e8 fcae 	bl	80098e8 <USBD_LL_Resume>
    break;
 8020f8c:	e01c      	b.n	8020fc8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8020f8e:	687b      	ldr	r3, [r7, #4]
 8020f90:	681b      	ldr	r3, [r3, #0]
 8020f92:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8020f96:	681b      	ldr	r3, [r3, #0]
 8020f98:	687a      	ldr	r2, [r7, #4]
 8020f9a:	6812      	ldr	r2, [r2, #0]
 8020f9c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8020fa0:	f043 0301 	orr.w	r3, r3, #1
 8020fa4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8020fa6:	687b      	ldr	r3, [r7, #4]
 8020fa8:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 8020fac:	4618      	mov	r0, r3
 8020fae:	f7e8 fc7f 	bl	80098b0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8020fb2:	687b      	ldr	r3, [r7, #4]
 8020fb4:	7adb      	ldrb	r3, [r3, #11]
 8020fb6:	2b00      	cmp	r3, #0
 8020fb8:	d005      	beq.n	8020fc6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8020fba:	4b05      	ldr	r3, [pc, #20]	@ (8020fd0 <HAL_PCDEx_LPM_Callback+0x98>)
 8020fbc:	691b      	ldr	r3, [r3, #16]
 8020fbe:	4a04      	ldr	r2, [pc, #16]	@ (8020fd0 <HAL_PCDEx_LPM_Callback+0x98>)
 8020fc0:	f043 0306 	orr.w	r3, r3, #6
 8020fc4:	6113      	str	r3, [r2, #16]
    break;
 8020fc6:	bf00      	nop
}
 8020fc8:	bf00      	nop
 8020fca:	3708      	adds	r7, #8
 8020fcc:	46bd      	mov	sp, r7
 8020fce:	bd80      	pop	{r7, pc}
 8020fd0:	e000ed00 	.word	0xe000ed00

08020fd4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8020fd4:	b580      	push	{r7, lr}
 8020fd6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8020fd8:	f7df fbca 	bl	8000770 <SystemClock_Config>
}
 8020fdc:	bf00      	nop
 8020fde:	bd80      	pop	{r7, pc}

08020fe0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8020fe0:	b480      	push	{r7}
 8020fe2:	b085      	sub	sp, #20
 8020fe4:	af00      	add	r7, sp, #0
 8020fe6:	4603      	mov	r3, r0
 8020fe8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8020fea:	2300      	movs	r3, #0
 8020fec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8020fee:	79fb      	ldrb	r3, [r7, #7]
 8020ff0:	2b03      	cmp	r3, #3
 8020ff2:	d817      	bhi.n	8021024 <USBD_Get_USB_Status+0x44>
 8020ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8020ffc <USBD_Get_USB_Status+0x1c>)
 8020ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020ffa:	bf00      	nop
 8020ffc:	0802100d 	.word	0x0802100d
 8021000:	08021013 	.word	0x08021013
 8021004:	08021019 	.word	0x08021019
 8021008:	0802101f 	.word	0x0802101f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 802100c:	2300      	movs	r3, #0
 802100e:	73fb      	strb	r3, [r7, #15]
    break;
 8021010:	e00b      	b.n	802102a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8021012:	2303      	movs	r3, #3
 8021014:	73fb      	strb	r3, [r7, #15]
    break;
 8021016:	e008      	b.n	802102a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8021018:	2301      	movs	r3, #1
 802101a:	73fb      	strb	r3, [r7, #15]
    break;
 802101c:	e005      	b.n	802102a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 802101e:	2303      	movs	r3, #3
 8021020:	73fb      	strb	r3, [r7, #15]
    break;
 8021022:	e002      	b.n	802102a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8021024:	2303      	movs	r3, #3
 8021026:	73fb      	strb	r3, [r7, #15]
    break;
 8021028:	bf00      	nop
  }
  return usb_status;
 802102a:	7bfb      	ldrb	r3, [r7, #15]
}
 802102c:	4618      	mov	r0, r3
 802102e:	3714      	adds	r7, #20
 8021030:	46bd      	mov	sp, r7
 8021032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021036:	4770      	bx	lr

08021038 <malloc>:
 8021038:	4b02      	ldr	r3, [pc, #8]	@ (8021044 <malloc+0xc>)
 802103a:	4601      	mov	r1, r0
 802103c:	6818      	ldr	r0, [r3, #0]
 802103e:	f000 b82d 	b.w	802109c <_malloc_r>
 8021042:	bf00      	nop
 8021044:	20000148 	.word	0x20000148

08021048 <free>:
 8021048:	4b02      	ldr	r3, [pc, #8]	@ (8021054 <free+0xc>)
 802104a:	4601      	mov	r1, r0
 802104c:	6818      	ldr	r0, [r3, #0]
 802104e:	f000 bcc7 	b.w	80219e0 <_free_r>
 8021052:	bf00      	nop
 8021054:	20000148 	.word	0x20000148

08021058 <sbrk_aligned>:
 8021058:	b570      	push	{r4, r5, r6, lr}
 802105a:	4e0f      	ldr	r6, [pc, #60]	@ (8021098 <sbrk_aligned+0x40>)
 802105c:	460c      	mov	r4, r1
 802105e:	6831      	ldr	r1, [r6, #0]
 8021060:	4605      	mov	r5, r0
 8021062:	b911      	cbnz	r1, 802106a <sbrk_aligned+0x12>
 8021064:	f000 fc46 	bl	80218f4 <_sbrk_r>
 8021068:	6030      	str	r0, [r6, #0]
 802106a:	4621      	mov	r1, r4
 802106c:	4628      	mov	r0, r5
 802106e:	f000 fc41 	bl	80218f4 <_sbrk_r>
 8021072:	1c43      	adds	r3, r0, #1
 8021074:	d103      	bne.n	802107e <sbrk_aligned+0x26>
 8021076:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 802107a:	4620      	mov	r0, r4
 802107c:	bd70      	pop	{r4, r5, r6, pc}
 802107e:	1cc4      	adds	r4, r0, #3
 8021080:	f024 0403 	bic.w	r4, r4, #3
 8021084:	42a0      	cmp	r0, r4
 8021086:	d0f8      	beq.n	802107a <sbrk_aligned+0x22>
 8021088:	1a21      	subs	r1, r4, r0
 802108a:	4628      	mov	r0, r5
 802108c:	f000 fc32 	bl	80218f4 <_sbrk_r>
 8021090:	3001      	adds	r0, #1
 8021092:	d1f2      	bne.n	802107a <sbrk_aligned+0x22>
 8021094:	e7ef      	b.n	8021076 <sbrk_aligned+0x1e>
 8021096:	bf00      	nop
 8021098:	20006748 	.word	0x20006748

0802109c <_malloc_r>:
 802109c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80210a0:	1ccd      	adds	r5, r1, #3
 80210a2:	f025 0503 	bic.w	r5, r5, #3
 80210a6:	3508      	adds	r5, #8
 80210a8:	2d0c      	cmp	r5, #12
 80210aa:	bf38      	it	cc
 80210ac:	250c      	movcc	r5, #12
 80210ae:	2d00      	cmp	r5, #0
 80210b0:	4606      	mov	r6, r0
 80210b2:	db01      	blt.n	80210b8 <_malloc_r+0x1c>
 80210b4:	42a9      	cmp	r1, r5
 80210b6:	d904      	bls.n	80210c2 <_malloc_r+0x26>
 80210b8:	230c      	movs	r3, #12
 80210ba:	6033      	str	r3, [r6, #0]
 80210bc:	2000      	movs	r0, #0
 80210be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80210c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8021198 <_malloc_r+0xfc>
 80210c6:	f000 f869 	bl	802119c <__malloc_lock>
 80210ca:	f8d8 3000 	ldr.w	r3, [r8]
 80210ce:	461c      	mov	r4, r3
 80210d0:	bb44      	cbnz	r4, 8021124 <_malloc_r+0x88>
 80210d2:	4629      	mov	r1, r5
 80210d4:	4630      	mov	r0, r6
 80210d6:	f7ff ffbf 	bl	8021058 <sbrk_aligned>
 80210da:	1c43      	adds	r3, r0, #1
 80210dc:	4604      	mov	r4, r0
 80210de:	d158      	bne.n	8021192 <_malloc_r+0xf6>
 80210e0:	f8d8 4000 	ldr.w	r4, [r8]
 80210e4:	4627      	mov	r7, r4
 80210e6:	2f00      	cmp	r7, #0
 80210e8:	d143      	bne.n	8021172 <_malloc_r+0xd6>
 80210ea:	2c00      	cmp	r4, #0
 80210ec:	d04b      	beq.n	8021186 <_malloc_r+0xea>
 80210ee:	6823      	ldr	r3, [r4, #0]
 80210f0:	4639      	mov	r1, r7
 80210f2:	4630      	mov	r0, r6
 80210f4:	eb04 0903 	add.w	r9, r4, r3
 80210f8:	f000 fbfc 	bl	80218f4 <_sbrk_r>
 80210fc:	4581      	cmp	r9, r0
 80210fe:	d142      	bne.n	8021186 <_malloc_r+0xea>
 8021100:	6821      	ldr	r1, [r4, #0]
 8021102:	1a6d      	subs	r5, r5, r1
 8021104:	4629      	mov	r1, r5
 8021106:	4630      	mov	r0, r6
 8021108:	f7ff ffa6 	bl	8021058 <sbrk_aligned>
 802110c:	3001      	adds	r0, #1
 802110e:	d03a      	beq.n	8021186 <_malloc_r+0xea>
 8021110:	6823      	ldr	r3, [r4, #0]
 8021112:	442b      	add	r3, r5
 8021114:	6023      	str	r3, [r4, #0]
 8021116:	f8d8 3000 	ldr.w	r3, [r8]
 802111a:	685a      	ldr	r2, [r3, #4]
 802111c:	bb62      	cbnz	r2, 8021178 <_malloc_r+0xdc>
 802111e:	f8c8 7000 	str.w	r7, [r8]
 8021122:	e00f      	b.n	8021144 <_malloc_r+0xa8>
 8021124:	6822      	ldr	r2, [r4, #0]
 8021126:	1b52      	subs	r2, r2, r5
 8021128:	d420      	bmi.n	802116c <_malloc_r+0xd0>
 802112a:	2a0b      	cmp	r2, #11
 802112c:	d917      	bls.n	802115e <_malloc_r+0xc2>
 802112e:	1961      	adds	r1, r4, r5
 8021130:	42a3      	cmp	r3, r4
 8021132:	6025      	str	r5, [r4, #0]
 8021134:	bf18      	it	ne
 8021136:	6059      	strne	r1, [r3, #4]
 8021138:	6863      	ldr	r3, [r4, #4]
 802113a:	bf08      	it	eq
 802113c:	f8c8 1000 	streq.w	r1, [r8]
 8021140:	5162      	str	r2, [r4, r5]
 8021142:	604b      	str	r3, [r1, #4]
 8021144:	4630      	mov	r0, r6
 8021146:	f000 f82f 	bl	80211a8 <__malloc_unlock>
 802114a:	f104 000b 	add.w	r0, r4, #11
 802114e:	1d23      	adds	r3, r4, #4
 8021150:	f020 0007 	bic.w	r0, r0, #7
 8021154:	1ac2      	subs	r2, r0, r3
 8021156:	bf1c      	itt	ne
 8021158:	1a1b      	subne	r3, r3, r0
 802115a:	50a3      	strne	r3, [r4, r2]
 802115c:	e7af      	b.n	80210be <_malloc_r+0x22>
 802115e:	6862      	ldr	r2, [r4, #4]
 8021160:	42a3      	cmp	r3, r4
 8021162:	bf0c      	ite	eq
 8021164:	f8c8 2000 	streq.w	r2, [r8]
 8021168:	605a      	strne	r2, [r3, #4]
 802116a:	e7eb      	b.n	8021144 <_malloc_r+0xa8>
 802116c:	4623      	mov	r3, r4
 802116e:	6864      	ldr	r4, [r4, #4]
 8021170:	e7ae      	b.n	80210d0 <_malloc_r+0x34>
 8021172:	463c      	mov	r4, r7
 8021174:	687f      	ldr	r7, [r7, #4]
 8021176:	e7b6      	b.n	80210e6 <_malloc_r+0x4a>
 8021178:	461a      	mov	r2, r3
 802117a:	685b      	ldr	r3, [r3, #4]
 802117c:	42a3      	cmp	r3, r4
 802117e:	d1fb      	bne.n	8021178 <_malloc_r+0xdc>
 8021180:	2300      	movs	r3, #0
 8021182:	6053      	str	r3, [r2, #4]
 8021184:	e7de      	b.n	8021144 <_malloc_r+0xa8>
 8021186:	230c      	movs	r3, #12
 8021188:	6033      	str	r3, [r6, #0]
 802118a:	4630      	mov	r0, r6
 802118c:	f000 f80c 	bl	80211a8 <__malloc_unlock>
 8021190:	e794      	b.n	80210bc <_malloc_r+0x20>
 8021192:	6005      	str	r5, [r0, #0]
 8021194:	e7d6      	b.n	8021144 <_malloc_r+0xa8>
 8021196:	bf00      	nop
 8021198:	2000674c 	.word	0x2000674c

0802119c <__malloc_lock>:
 802119c:	4801      	ldr	r0, [pc, #4]	@ (80211a4 <__malloc_lock+0x8>)
 802119e:	f000 bbf0 	b.w	8021982 <__retarget_lock_acquire_recursive>
 80211a2:	bf00      	nop
 80211a4:	20006890 	.word	0x20006890

080211a8 <__malloc_unlock>:
 80211a8:	4801      	ldr	r0, [pc, #4]	@ (80211b0 <__malloc_unlock+0x8>)
 80211aa:	f000 bbeb 	b.w	8021984 <__retarget_lock_release_recursive>
 80211ae:	bf00      	nop
 80211b0:	20006890 	.word	0x20006890

080211b4 <rand>:
 80211b4:	4b16      	ldr	r3, [pc, #88]	@ (8021210 <rand+0x5c>)
 80211b6:	b510      	push	{r4, lr}
 80211b8:	681c      	ldr	r4, [r3, #0]
 80211ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80211bc:	b9b3      	cbnz	r3, 80211ec <rand+0x38>
 80211be:	2018      	movs	r0, #24
 80211c0:	f7ff ff3a 	bl	8021038 <malloc>
 80211c4:	4602      	mov	r2, r0
 80211c6:	6320      	str	r0, [r4, #48]	@ 0x30
 80211c8:	b920      	cbnz	r0, 80211d4 <rand+0x20>
 80211ca:	4b12      	ldr	r3, [pc, #72]	@ (8021214 <rand+0x60>)
 80211cc:	4812      	ldr	r0, [pc, #72]	@ (8021218 <rand+0x64>)
 80211ce:	2152      	movs	r1, #82	@ 0x52
 80211d0:	f000 fbe8 	bl	80219a4 <__assert_func>
 80211d4:	4911      	ldr	r1, [pc, #68]	@ (802121c <rand+0x68>)
 80211d6:	4b12      	ldr	r3, [pc, #72]	@ (8021220 <rand+0x6c>)
 80211d8:	e9c0 1300 	strd	r1, r3, [r0]
 80211dc:	4b11      	ldr	r3, [pc, #68]	@ (8021224 <rand+0x70>)
 80211de:	6083      	str	r3, [r0, #8]
 80211e0:	230b      	movs	r3, #11
 80211e2:	8183      	strh	r3, [r0, #12]
 80211e4:	2100      	movs	r1, #0
 80211e6:	2001      	movs	r0, #1
 80211e8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80211ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80211ee:	480e      	ldr	r0, [pc, #56]	@ (8021228 <rand+0x74>)
 80211f0:	690b      	ldr	r3, [r1, #16]
 80211f2:	694c      	ldr	r4, [r1, #20]
 80211f4:	4a0d      	ldr	r2, [pc, #52]	@ (802122c <rand+0x78>)
 80211f6:	4358      	muls	r0, r3
 80211f8:	fb02 0004 	mla	r0, r2, r4, r0
 80211fc:	fba3 3202 	umull	r3, r2, r3, r2
 8021200:	3301      	adds	r3, #1
 8021202:	eb40 0002 	adc.w	r0, r0, r2
 8021206:	e9c1 3004 	strd	r3, r0, [r1, #16]
 802120a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802120e:	bd10      	pop	{r4, pc}
 8021210:	20000148 	.word	0x20000148
 8021214:	08027774 	.word	0x08027774
 8021218:	0802778b 	.word	0x0802778b
 802121c:	abcd330e 	.word	0xabcd330e
 8021220:	e66d1234 	.word	0xe66d1234
 8021224:	0005deec 	.word	0x0005deec
 8021228:	5851f42d 	.word	0x5851f42d
 802122c:	4c957f2d 	.word	0x4c957f2d

08021230 <std>:
 8021230:	2300      	movs	r3, #0
 8021232:	b510      	push	{r4, lr}
 8021234:	4604      	mov	r4, r0
 8021236:	e9c0 3300 	strd	r3, r3, [r0]
 802123a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802123e:	6083      	str	r3, [r0, #8]
 8021240:	8181      	strh	r1, [r0, #12]
 8021242:	6643      	str	r3, [r0, #100]	@ 0x64
 8021244:	81c2      	strh	r2, [r0, #14]
 8021246:	6183      	str	r3, [r0, #24]
 8021248:	4619      	mov	r1, r3
 802124a:	2208      	movs	r2, #8
 802124c:	305c      	adds	r0, #92	@ 0x5c
 802124e:	f000 fa81 	bl	8021754 <memset>
 8021252:	4b0d      	ldr	r3, [pc, #52]	@ (8021288 <std+0x58>)
 8021254:	6263      	str	r3, [r4, #36]	@ 0x24
 8021256:	4b0d      	ldr	r3, [pc, #52]	@ (802128c <std+0x5c>)
 8021258:	62a3      	str	r3, [r4, #40]	@ 0x28
 802125a:	4b0d      	ldr	r3, [pc, #52]	@ (8021290 <std+0x60>)
 802125c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802125e:	4b0d      	ldr	r3, [pc, #52]	@ (8021294 <std+0x64>)
 8021260:	6323      	str	r3, [r4, #48]	@ 0x30
 8021262:	4b0d      	ldr	r3, [pc, #52]	@ (8021298 <std+0x68>)
 8021264:	6224      	str	r4, [r4, #32]
 8021266:	429c      	cmp	r4, r3
 8021268:	d006      	beq.n	8021278 <std+0x48>
 802126a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802126e:	4294      	cmp	r4, r2
 8021270:	d002      	beq.n	8021278 <std+0x48>
 8021272:	33d0      	adds	r3, #208	@ 0xd0
 8021274:	429c      	cmp	r4, r3
 8021276:	d105      	bne.n	8021284 <std+0x54>
 8021278:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802127c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021280:	f000 bb7e 	b.w	8021980 <__retarget_lock_init_recursive>
 8021284:	bd10      	pop	{r4, pc}
 8021286:	bf00      	nop
 8021288:	080214d9 	.word	0x080214d9
 802128c:	080214fb 	.word	0x080214fb
 8021290:	08021533 	.word	0x08021533
 8021294:	08021557 	.word	0x08021557
 8021298:	20006750 	.word	0x20006750

0802129c <stdio_exit_handler>:
 802129c:	4a02      	ldr	r2, [pc, #8]	@ (80212a8 <stdio_exit_handler+0xc>)
 802129e:	4903      	ldr	r1, [pc, #12]	@ (80212ac <stdio_exit_handler+0x10>)
 80212a0:	4803      	ldr	r0, [pc, #12]	@ (80212b0 <stdio_exit_handler+0x14>)
 80212a2:	f000 b869 	b.w	8021378 <_fwalk_sglue>
 80212a6:	bf00      	nop
 80212a8:	2000013c 	.word	0x2000013c
 80212ac:	080223c9 	.word	0x080223c9
 80212b0:	2000014c 	.word	0x2000014c

080212b4 <cleanup_stdio>:
 80212b4:	6841      	ldr	r1, [r0, #4]
 80212b6:	4b0c      	ldr	r3, [pc, #48]	@ (80212e8 <cleanup_stdio+0x34>)
 80212b8:	4299      	cmp	r1, r3
 80212ba:	b510      	push	{r4, lr}
 80212bc:	4604      	mov	r4, r0
 80212be:	d001      	beq.n	80212c4 <cleanup_stdio+0x10>
 80212c0:	f001 f882 	bl	80223c8 <_fflush_r>
 80212c4:	68a1      	ldr	r1, [r4, #8]
 80212c6:	4b09      	ldr	r3, [pc, #36]	@ (80212ec <cleanup_stdio+0x38>)
 80212c8:	4299      	cmp	r1, r3
 80212ca:	d002      	beq.n	80212d2 <cleanup_stdio+0x1e>
 80212cc:	4620      	mov	r0, r4
 80212ce:	f001 f87b 	bl	80223c8 <_fflush_r>
 80212d2:	68e1      	ldr	r1, [r4, #12]
 80212d4:	4b06      	ldr	r3, [pc, #24]	@ (80212f0 <cleanup_stdio+0x3c>)
 80212d6:	4299      	cmp	r1, r3
 80212d8:	d004      	beq.n	80212e4 <cleanup_stdio+0x30>
 80212da:	4620      	mov	r0, r4
 80212dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80212e0:	f001 b872 	b.w	80223c8 <_fflush_r>
 80212e4:	bd10      	pop	{r4, pc}
 80212e6:	bf00      	nop
 80212e8:	20006750 	.word	0x20006750
 80212ec:	200067b8 	.word	0x200067b8
 80212f0:	20006820 	.word	0x20006820

080212f4 <global_stdio_init.part.0>:
 80212f4:	b510      	push	{r4, lr}
 80212f6:	4b0b      	ldr	r3, [pc, #44]	@ (8021324 <global_stdio_init.part.0+0x30>)
 80212f8:	4c0b      	ldr	r4, [pc, #44]	@ (8021328 <global_stdio_init.part.0+0x34>)
 80212fa:	4a0c      	ldr	r2, [pc, #48]	@ (802132c <global_stdio_init.part.0+0x38>)
 80212fc:	601a      	str	r2, [r3, #0]
 80212fe:	4620      	mov	r0, r4
 8021300:	2200      	movs	r2, #0
 8021302:	2104      	movs	r1, #4
 8021304:	f7ff ff94 	bl	8021230 <std>
 8021308:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802130c:	2201      	movs	r2, #1
 802130e:	2109      	movs	r1, #9
 8021310:	f7ff ff8e 	bl	8021230 <std>
 8021314:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8021318:	2202      	movs	r2, #2
 802131a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802131e:	2112      	movs	r1, #18
 8021320:	f7ff bf86 	b.w	8021230 <std>
 8021324:	20006888 	.word	0x20006888
 8021328:	20006750 	.word	0x20006750
 802132c:	0802129d 	.word	0x0802129d

08021330 <__sfp_lock_acquire>:
 8021330:	4801      	ldr	r0, [pc, #4]	@ (8021338 <__sfp_lock_acquire+0x8>)
 8021332:	f000 bb26 	b.w	8021982 <__retarget_lock_acquire_recursive>
 8021336:	bf00      	nop
 8021338:	20006891 	.word	0x20006891

0802133c <__sfp_lock_release>:
 802133c:	4801      	ldr	r0, [pc, #4]	@ (8021344 <__sfp_lock_release+0x8>)
 802133e:	f000 bb21 	b.w	8021984 <__retarget_lock_release_recursive>
 8021342:	bf00      	nop
 8021344:	20006891 	.word	0x20006891

08021348 <__sinit>:
 8021348:	b510      	push	{r4, lr}
 802134a:	4604      	mov	r4, r0
 802134c:	f7ff fff0 	bl	8021330 <__sfp_lock_acquire>
 8021350:	6a23      	ldr	r3, [r4, #32]
 8021352:	b11b      	cbz	r3, 802135c <__sinit+0x14>
 8021354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021358:	f7ff bff0 	b.w	802133c <__sfp_lock_release>
 802135c:	4b04      	ldr	r3, [pc, #16]	@ (8021370 <__sinit+0x28>)
 802135e:	6223      	str	r3, [r4, #32]
 8021360:	4b04      	ldr	r3, [pc, #16]	@ (8021374 <__sinit+0x2c>)
 8021362:	681b      	ldr	r3, [r3, #0]
 8021364:	2b00      	cmp	r3, #0
 8021366:	d1f5      	bne.n	8021354 <__sinit+0xc>
 8021368:	f7ff ffc4 	bl	80212f4 <global_stdio_init.part.0>
 802136c:	e7f2      	b.n	8021354 <__sinit+0xc>
 802136e:	bf00      	nop
 8021370:	080212b5 	.word	0x080212b5
 8021374:	20006888 	.word	0x20006888

08021378 <_fwalk_sglue>:
 8021378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802137c:	4607      	mov	r7, r0
 802137e:	4688      	mov	r8, r1
 8021380:	4614      	mov	r4, r2
 8021382:	2600      	movs	r6, #0
 8021384:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021388:	f1b9 0901 	subs.w	r9, r9, #1
 802138c:	d505      	bpl.n	802139a <_fwalk_sglue+0x22>
 802138e:	6824      	ldr	r4, [r4, #0]
 8021390:	2c00      	cmp	r4, #0
 8021392:	d1f7      	bne.n	8021384 <_fwalk_sglue+0xc>
 8021394:	4630      	mov	r0, r6
 8021396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802139a:	89ab      	ldrh	r3, [r5, #12]
 802139c:	2b01      	cmp	r3, #1
 802139e:	d907      	bls.n	80213b0 <_fwalk_sglue+0x38>
 80213a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80213a4:	3301      	adds	r3, #1
 80213a6:	d003      	beq.n	80213b0 <_fwalk_sglue+0x38>
 80213a8:	4629      	mov	r1, r5
 80213aa:	4638      	mov	r0, r7
 80213ac:	47c0      	blx	r8
 80213ae:	4306      	orrs	r6, r0
 80213b0:	3568      	adds	r5, #104	@ 0x68
 80213b2:	e7e9      	b.n	8021388 <_fwalk_sglue+0x10>

080213b4 <iprintf>:
 80213b4:	b40f      	push	{r0, r1, r2, r3}
 80213b6:	b507      	push	{r0, r1, r2, lr}
 80213b8:	4906      	ldr	r1, [pc, #24]	@ (80213d4 <iprintf+0x20>)
 80213ba:	ab04      	add	r3, sp, #16
 80213bc:	6808      	ldr	r0, [r1, #0]
 80213be:	f853 2b04 	ldr.w	r2, [r3], #4
 80213c2:	6881      	ldr	r1, [r0, #8]
 80213c4:	9301      	str	r3, [sp, #4]
 80213c6:	f000 fcd7 	bl	8021d78 <_vfiprintf_r>
 80213ca:	b003      	add	sp, #12
 80213cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80213d0:	b004      	add	sp, #16
 80213d2:	4770      	bx	lr
 80213d4:	20000148 	.word	0x20000148

080213d8 <_puts_r>:
 80213d8:	6a03      	ldr	r3, [r0, #32]
 80213da:	b570      	push	{r4, r5, r6, lr}
 80213dc:	6884      	ldr	r4, [r0, #8]
 80213de:	4605      	mov	r5, r0
 80213e0:	460e      	mov	r6, r1
 80213e2:	b90b      	cbnz	r3, 80213e8 <_puts_r+0x10>
 80213e4:	f7ff ffb0 	bl	8021348 <__sinit>
 80213e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80213ea:	07db      	lsls	r3, r3, #31
 80213ec:	d405      	bmi.n	80213fa <_puts_r+0x22>
 80213ee:	89a3      	ldrh	r3, [r4, #12]
 80213f0:	0598      	lsls	r0, r3, #22
 80213f2:	d402      	bmi.n	80213fa <_puts_r+0x22>
 80213f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80213f6:	f000 fac4 	bl	8021982 <__retarget_lock_acquire_recursive>
 80213fa:	89a3      	ldrh	r3, [r4, #12]
 80213fc:	0719      	lsls	r1, r3, #28
 80213fe:	d502      	bpl.n	8021406 <_puts_r+0x2e>
 8021400:	6923      	ldr	r3, [r4, #16]
 8021402:	2b00      	cmp	r3, #0
 8021404:	d135      	bne.n	8021472 <_puts_r+0x9a>
 8021406:	4621      	mov	r1, r4
 8021408:	4628      	mov	r0, r5
 802140a:	f000 f923 	bl	8021654 <__swsetup_r>
 802140e:	b380      	cbz	r0, 8021472 <_puts_r+0x9a>
 8021410:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8021414:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021416:	07da      	lsls	r2, r3, #31
 8021418:	d405      	bmi.n	8021426 <_puts_r+0x4e>
 802141a:	89a3      	ldrh	r3, [r4, #12]
 802141c:	059b      	lsls	r3, r3, #22
 802141e:	d402      	bmi.n	8021426 <_puts_r+0x4e>
 8021420:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021422:	f000 faaf 	bl	8021984 <__retarget_lock_release_recursive>
 8021426:	4628      	mov	r0, r5
 8021428:	bd70      	pop	{r4, r5, r6, pc}
 802142a:	2b00      	cmp	r3, #0
 802142c:	da04      	bge.n	8021438 <_puts_r+0x60>
 802142e:	69a2      	ldr	r2, [r4, #24]
 8021430:	429a      	cmp	r2, r3
 8021432:	dc17      	bgt.n	8021464 <_puts_r+0x8c>
 8021434:	290a      	cmp	r1, #10
 8021436:	d015      	beq.n	8021464 <_puts_r+0x8c>
 8021438:	6823      	ldr	r3, [r4, #0]
 802143a:	1c5a      	adds	r2, r3, #1
 802143c:	6022      	str	r2, [r4, #0]
 802143e:	7019      	strb	r1, [r3, #0]
 8021440:	68a3      	ldr	r3, [r4, #8]
 8021442:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8021446:	3b01      	subs	r3, #1
 8021448:	60a3      	str	r3, [r4, #8]
 802144a:	2900      	cmp	r1, #0
 802144c:	d1ed      	bne.n	802142a <_puts_r+0x52>
 802144e:	2b00      	cmp	r3, #0
 8021450:	da11      	bge.n	8021476 <_puts_r+0x9e>
 8021452:	4622      	mov	r2, r4
 8021454:	210a      	movs	r1, #10
 8021456:	4628      	mov	r0, r5
 8021458:	f000 f8be 	bl	80215d8 <__swbuf_r>
 802145c:	3001      	adds	r0, #1
 802145e:	d0d7      	beq.n	8021410 <_puts_r+0x38>
 8021460:	250a      	movs	r5, #10
 8021462:	e7d7      	b.n	8021414 <_puts_r+0x3c>
 8021464:	4622      	mov	r2, r4
 8021466:	4628      	mov	r0, r5
 8021468:	f000 f8b6 	bl	80215d8 <__swbuf_r>
 802146c:	3001      	adds	r0, #1
 802146e:	d1e7      	bne.n	8021440 <_puts_r+0x68>
 8021470:	e7ce      	b.n	8021410 <_puts_r+0x38>
 8021472:	3e01      	subs	r6, #1
 8021474:	e7e4      	b.n	8021440 <_puts_r+0x68>
 8021476:	6823      	ldr	r3, [r4, #0]
 8021478:	1c5a      	adds	r2, r3, #1
 802147a:	6022      	str	r2, [r4, #0]
 802147c:	220a      	movs	r2, #10
 802147e:	701a      	strb	r2, [r3, #0]
 8021480:	e7ee      	b.n	8021460 <_puts_r+0x88>
	...

08021484 <puts>:
 8021484:	4b02      	ldr	r3, [pc, #8]	@ (8021490 <puts+0xc>)
 8021486:	4601      	mov	r1, r0
 8021488:	6818      	ldr	r0, [r3, #0]
 802148a:	f7ff bfa5 	b.w	80213d8 <_puts_r>
 802148e:	bf00      	nop
 8021490:	20000148 	.word	0x20000148

08021494 <siprintf>:
 8021494:	b40e      	push	{r1, r2, r3}
 8021496:	b510      	push	{r4, lr}
 8021498:	b09d      	sub	sp, #116	@ 0x74
 802149a:	ab1f      	add	r3, sp, #124	@ 0x7c
 802149c:	9002      	str	r0, [sp, #8]
 802149e:	9006      	str	r0, [sp, #24]
 80214a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80214a4:	480a      	ldr	r0, [pc, #40]	@ (80214d0 <siprintf+0x3c>)
 80214a6:	9107      	str	r1, [sp, #28]
 80214a8:	9104      	str	r1, [sp, #16]
 80214aa:	490a      	ldr	r1, [pc, #40]	@ (80214d4 <siprintf+0x40>)
 80214ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80214b0:	9105      	str	r1, [sp, #20]
 80214b2:	2400      	movs	r4, #0
 80214b4:	a902      	add	r1, sp, #8
 80214b6:	6800      	ldr	r0, [r0, #0]
 80214b8:	9301      	str	r3, [sp, #4]
 80214ba:	941b      	str	r4, [sp, #108]	@ 0x6c
 80214bc:	f000 fb36 	bl	8021b2c <_svfiprintf_r>
 80214c0:	9b02      	ldr	r3, [sp, #8]
 80214c2:	701c      	strb	r4, [r3, #0]
 80214c4:	b01d      	add	sp, #116	@ 0x74
 80214c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80214ca:	b003      	add	sp, #12
 80214cc:	4770      	bx	lr
 80214ce:	bf00      	nop
 80214d0:	20000148 	.word	0x20000148
 80214d4:	ffff0208 	.word	0xffff0208

080214d8 <__sread>:
 80214d8:	b510      	push	{r4, lr}
 80214da:	460c      	mov	r4, r1
 80214dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80214e0:	f000 f9f6 	bl	80218d0 <_read_r>
 80214e4:	2800      	cmp	r0, #0
 80214e6:	bfab      	itete	ge
 80214e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80214ea:	89a3      	ldrhlt	r3, [r4, #12]
 80214ec:	181b      	addge	r3, r3, r0
 80214ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80214f2:	bfac      	ite	ge
 80214f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80214f6:	81a3      	strhlt	r3, [r4, #12]
 80214f8:	bd10      	pop	{r4, pc}

080214fa <__swrite>:
 80214fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80214fe:	461f      	mov	r7, r3
 8021500:	898b      	ldrh	r3, [r1, #12]
 8021502:	05db      	lsls	r3, r3, #23
 8021504:	4605      	mov	r5, r0
 8021506:	460c      	mov	r4, r1
 8021508:	4616      	mov	r6, r2
 802150a:	d505      	bpl.n	8021518 <__swrite+0x1e>
 802150c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021510:	2302      	movs	r3, #2
 8021512:	2200      	movs	r2, #0
 8021514:	f000 f9ca 	bl	80218ac <_lseek_r>
 8021518:	89a3      	ldrh	r3, [r4, #12]
 802151a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802151e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8021522:	81a3      	strh	r3, [r4, #12]
 8021524:	4632      	mov	r2, r6
 8021526:	463b      	mov	r3, r7
 8021528:	4628      	mov	r0, r5
 802152a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802152e:	f000 b9f1 	b.w	8021914 <_write_r>

08021532 <__sseek>:
 8021532:	b510      	push	{r4, lr}
 8021534:	460c      	mov	r4, r1
 8021536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802153a:	f000 f9b7 	bl	80218ac <_lseek_r>
 802153e:	1c43      	adds	r3, r0, #1
 8021540:	89a3      	ldrh	r3, [r4, #12]
 8021542:	bf15      	itete	ne
 8021544:	6560      	strne	r0, [r4, #84]	@ 0x54
 8021546:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802154a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802154e:	81a3      	strheq	r3, [r4, #12]
 8021550:	bf18      	it	ne
 8021552:	81a3      	strhne	r3, [r4, #12]
 8021554:	bd10      	pop	{r4, pc}

08021556 <__sclose>:
 8021556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802155a:	f000 b939 	b.w	80217d0 <_close_r>

0802155e <_vsniprintf_r>:
 802155e:	b530      	push	{r4, r5, lr}
 8021560:	4614      	mov	r4, r2
 8021562:	2c00      	cmp	r4, #0
 8021564:	b09b      	sub	sp, #108	@ 0x6c
 8021566:	4605      	mov	r5, r0
 8021568:	461a      	mov	r2, r3
 802156a:	da05      	bge.n	8021578 <_vsniprintf_r+0x1a>
 802156c:	238b      	movs	r3, #139	@ 0x8b
 802156e:	6003      	str	r3, [r0, #0]
 8021570:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021574:	b01b      	add	sp, #108	@ 0x6c
 8021576:	bd30      	pop	{r4, r5, pc}
 8021578:	f44f 7302 	mov.w	r3, #520	@ 0x208
 802157c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8021580:	f04f 0300 	mov.w	r3, #0
 8021584:	9319      	str	r3, [sp, #100]	@ 0x64
 8021586:	bf14      	ite	ne
 8021588:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802158c:	4623      	moveq	r3, r4
 802158e:	9302      	str	r3, [sp, #8]
 8021590:	9305      	str	r3, [sp, #20]
 8021592:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8021596:	9100      	str	r1, [sp, #0]
 8021598:	9104      	str	r1, [sp, #16]
 802159a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802159e:	4669      	mov	r1, sp
 80215a0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80215a2:	f000 fac3 	bl	8021b2c <_svfiprintf_r>
 80215a6:	1c43      	adds	r3, r0, #1
 80215a8:	bfbc      	itt	lt
 80215aa:	238b      	movlt	r3, #139	@ 0x8b
 80215ac:	602b      	strlt	r3, [r5, #0]
 80215ae:	2c00      	cmp	r4, #0
 80215b0:	d0e0      	beq.n	8021574 <_vsniprintf_r+0x16>
 80215b2:	9b00      	ldr	r3, [sp, #0]
 80215b4:	2200      	movs	r2, #0
 80215b6:	701a      	strb	r2, [r3, #0]
 80215b8:	e7dc      	b.n	8021574 <_vsniprintf_r+0x16>
	...

080215bc <vsniprintf>:
 80215bc:	b507      	push	{r0, r1, r2, lr}
 80215be:	9300      	str	r3, [sp, #0]
 80215c0:	4613      	mov	r3, r2
 80215c2:	460a      	mov	r2, r1
 80215c4:	4601      	mov	r1, r0
 80215c6:	4803      	ldr	r0, [pc, #12]	@ (80215d4 <vsniprintf+0x18>)
 80215c8:	6800      	ldr	r0, [r0, #0]
 80215ca:	f7ff ffc8 	bl	802155e <_vsniprintf_r>
 80215ce:	b003      	add	sp, #12
 80215d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80215d4:	20000148 	.word	0x20000148

080215d8 <__swbuf_r>:
 80215d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80215da:	460e      	mov	r6, r1
 80215dc:	4614      	mov	r4, r2
 80215de:	4605      	mov	r5, r0
 80215e0:	b118      	cbz	r0, 80215ea <__swbuf_r+0x12>
 80215e2:	6a03      	ldr	r3, [r0, #32]
 80215e4:	b90b      	cbnz	r3, 80215ea <__swbuf_r+0x12>
 80215e6:	f7ff feaf 	bl	8021348 <__sinit>
 80215ea:	69a3      	ldr	r3, [r4, #24]
 80215ec:	60a3      	str	r3, [r4, #8]
 80215ee:	89a3      	ldrh	r3, [r4, #12]
 80215f0:	071a      	lsls	r2, r3, #28
 80215f2:	d501      	bpl.n	80215f8 <__swbuf_r+0x20>
 80215f4:	6923      	ldr	r3, [r4, #16]
 80215f6:	b943      	cbnz	r3, 802160a <__swbuf_r+0x32>
 80215f8:	4621      	mov	r1, r4
 80215fa:	4628      	mov	r0, r5
 80215fc:	f000 f82a 	bl	8021654 <__swsetup_r>
 8021600:	b118      	cbz	r0, 802160a <__swbuf_r+0x32>
 8021602:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8021606:	4638      	mov	r0, r7
 8021608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802160a:	6823      	ldr	r3, [r4, #0]
 802160c:	6922      	ldr	r2, [r4, #16]
 802160e:	1a98      	subs	r0, r3, r2
 8021610:	6963      	ldr	r3, [r4, #20]
 8021612:	b2f6      	uxtb	r6, r6
 8021614:	4283      	cmp	r3, r0
 8021616:	4637      	mov	r7, r6
 8021618:	dc05      	bgt.n	8021626 <__swbuf_r+0x4e>
 802161a:	4621      	mov	r1, r4
 802161c:	4628      	mov	r0, r5
 802161e:	f000 fed3 	bl	80223c8 <_fflush_r>
 8021622:	2800      	cmp	r0, #0
 8021624:	d1ed      	bne.n	8021602 <__swbuf_r+0x2a>
 8021626:	68a3      	ldr	r3, [r4, #8]
 8021628:	3b01      	subs	r3, #1
 802162a:	60a3      	str	r3, [r4, #8]
 802162c:	6823      	ldr	r3, [r4, #0]
 802162e:	1c5a      	adds	r2, r3, #1
 8021630:	6022      	str	r2, [r4, #0]
 8021632:	701e      	strb	r6, [r3, #0]
 8021634:	6962      	ldr	r2, [r4, #20]
 8021636:	1c43      	adds	r3, r0, #1
 8021638:	429a      	cmp	r2, r3
 802163a:	d004      	beq.n	8021646 <__swbuf_r+0x6e>
 802163c:	89a3      	ldrh	r3, [r4, #12]
 802163e:	07db      	lsls	r3, r3, #31
 8021640:	d5e1      	bpl.n	8021606 <__swbuf_r+0x2e>
 8021642:	2e0a      	cmp	r6, #10
 8021644:	d1df      	bne.n	8021606 <__swbuf_r+0x2e>
 8021646:	4621      	mov	r1, r4
 8021648:	4628      	mov	r0, r5
 802164a:	f000 febd 	bl	80223c8 <_fflush_r>
 802164e:	2800      	cmp	r0, #0
 8021650:	d0d9      	beq.n	8021606 <__swbuf_r+0x2e>
 8021652:	e7d6      	b.n	8021602 <__swbuf_r+0x2a>

08021654 <__swsetup_r>:
 8021654:	b538      	push	{r3, r4, r5, lr}
 8021656:	4b29      	ldr	r3, [pc, #164]	@ (80216fc <__swsetup_r+0xa8>)
 8021658:	4605      	mov	r5, r0
 802165a:	6818      	ldr	r0, [r3, #0]
 802165c:	460c      	mov	r4, r1
 802165e:	b118      	cbz	r0, 8021668 <__swsetup_r+0x14>
 8021660:	6a03      	ldr	r3, [r0, #32]
 8021662:	b90b      	cbnz	r3, 8021668 <__swsetup_r+0x14>
 8021664:	f7ff fe70 	bl	8021348 <__sinit>
 8021668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802166c:	0719      	lsls	r1, r3, #28
 802166e:	d422      	bmi.n	80216b6 <__swsetup_r+0x62>
 8021670:	06da      	lsls	r2, r3, #27
 8021672:	d407      	bmi.n	8021684 <__swsetup_r+0x30>
 8021674:	2209      	movs	r2, #9
 8021676:	602a      	str	r2, [r5, #0]
 8021678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802167c:	81a3      	strh	r3, [r4, #12]
 802167e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021682:	e033      	b.n	80216ec <__swsetup_r+0x98>
 8021684:	0758      	lsls	r0, r3, #29
 8021686:	d512      	bpl.n	80216ae <__swsetup_r+0x5a>
 8021688:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802168a:	b141      	cbz	r1, 802169e <__swsetup_r+0x4a>
 802168c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021690:	4299      	cmp	r1, r3
 8021692:	d002      	beq.n	802169a <__swsetup_r+0x46>
 8021694:	4628      	mov	r0, r5
 8021696:	f000 f9a3 	bl	80219e0 <_free_r>
 802169a:	2300      	movs	r3, #0
 802169c:	6363      	str	r3, [r4, #52]	@ 0x34
 802169e:	89a3      	ldrh	r3, [r4, #12]
 80216a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80216a4:	81a3      	strh	r3, [r4, #12]
 80216a6:	2300      	movs	r3, #0
 80216a8:	6063      	str	r3, [r4, #4]
 80216aa:	6923      	ldr	r3, [r4, #16]
 80216ac:	6023      	str	r3, [r4, #0]
 80216ae:	89a3      	ldrh	r3, [r4, #12]
 80216b0:	f043 0308 	orr.w	r3, r3, #8
 80216b4:	81a3      	strh	r3, [r4, #12]
 80216b6:	6923      	ldr	r3, [r4, #16]
 80216b8:	b94b      	cbnz	r3, 80216ce <__swsetup_r+0x7a>
 80216ba:	89a3      	ldrh	r3, [r4, #12]
 80216bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80216c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80216c4:	d003      	beq.n	80216ce <__swsetup_r+0x7a>
 80216c6:	4621      	mov	r1, r4
 80216c8:	4628      	mov	r0, r5
 80216ca:	f000 fedd 	bl	8022488 <__smakebuf_r>
 80216ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80216d2:	f013 0201 	ands.w	r2, r3, #1
 80216d6:	d00a      	beq.n	80216ee <__swsetup_r+0x9a>
 80216d8:	2200      	movs	r2, #0
 80216da:	60a2      	str	r2, [r4, #8]
 80216dc:	6962      	ldr	r2, [r4, #20]
 80216de:	4252      	negs	r2, r2
 80216e0:	61a2      	str	r2, [r4, #24]
 80216e2:	6922      	ldr	r2, [r4, #16]
 80216e4:	b942      	cbnz	r2, 80216f8 <__swsetup_r+0xa4>
 80216e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80216ea:	d1c5      	bne.n	8021678 <__swsetup_r+0x24>
 80216ec:	bd38      	pop	{r3, r4, r5, pc}
 80216ee:	0799      	lsls	r1, r3, #30
 80216f0:	bf58      	it	pl
 80216f2:	6962      	ldrpl	r2, [r4, #20]
 80216f4:	60a2      	str	r2, [r4, #8]
 80216f6:	e7f4      	b.n	80216e2 <__swsetup_r+0x8e>
 80216f8:	2000      	movs	r0, #0
 80216fa:	e7f7      	b.n	80216ec <__swsetup_r+0x98>
 80216fc:	20000148 	.word	0x20000148

08021700 <memcmp>:
 8021700:	b510      	push	{r4, lr}
 8021702:	3901      	subs	r1, #1
 8021704:	4402      	add	r2, r0
 8021706:	4290      	cmp	r0, r2
 8021708:	d101      	bne.n	802170e <memcmp+0xe>
 802170a:	2000      	movs	r0, #0
 802170c:	e005      	b.n	802171a <memcmp+0x1a>
 802170e:	7803      	ldrb	r3, [r0, #0]
 8021710:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021714:	42a3      	cmp	r3, r4
 8021716:	d001      	beq.n	802171c <memcmp+0x1c>
 8021718:	1b18      	subs	r0, r3, r4
 802171a:	bd10      	pop	{r4, pc}
 802171c:	3001      	adds	r0, #1
 802171e:	e7f2      	b.n	8021706 <memcmp+0x6>

08021720 <memmove>:
 8021720:	4288      	cmp	r0, r1
 8021722:	b510      	push	{r4, lr}
 8021724:	eb01 0402 	add.w	r4, r1, r2
 8021728:	d902      	bls.n	8021730 <memmove+0x10>
 802172a:	4284      	cmp	r4, r0
 802172c:	4623      	mov	r3, r4
 802172e:	d807      	bhi.n	8021740 <memmove+0x20>
 8021730:	1e43      	subs	r3, r0, #1
 8021732:	42a1      	cmp	r1, r4
 8021734:	d008      	beq.n	8021748 <memmove+0x28>
 8021736:	f811 2b01 	ldrb.w	r2, [r1], #1
 802173a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802173e:	e7f8      	b.n	8021732 <memmove+0x12>
 8021740:	4402      	add	r2, r0
 8021742:	4601      	mov	r1, r0
 8021744:	428a      	cmp	r2, r1
 8021746:	d100      	bne.n	802174a <memmove+0x2a>
 8021748:	bd10      	pop	{r4, pc}
 802174a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802174e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021752:	e7f7      	b.n	8021744 <memmove+0x24>

08021754 <memset>:
 8021754:	4402      	add	r2, r0
 8021756:	4603      	mov	r3, r0
 8021758:	4293      	cmp	r3, r2
 802175a:	d100      	bne.n	802175e <memset+0xa>
 802175c:	4770      	bx	lr
 802175e:	f803 1b01 	strb.w	r1, [r3], #1
 8021762:	e7f9      	b.n	8021758 <memset+0x4>

08021764 <strchr>:
 8021764:	b2c9      	uxtb	r1, r1
 8021766:	4603      	mov	r3, r0
 8021768:	4618      	mov	r0, r3
 802176a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802176e:	b112      	cbz	r2, 8021776 <strchr+0x12>
 8021770:	428a      	cmp	r2, r1
 8021772:	d1f9      	bne.n	8021768 <strchr+0x4>
 8021774:	4770      	bx	lr
 8021776:	2900      	cmp	r1, #0
 8021778:	bf18      	it	ne
 802177a:	2000      	movne	r0, #0
 802177c:	4770      	bx	lr

0802177e <strncmp>:
 802177e:	b510      	push	{r4, lr}
 8021780:	b16a      	cbz	r2, 802179e <strncmp+0x20>
 8021782:	3901      	subs	r1, #1
 8021784:	1884      	adds	r4, r0, r2
 8021786:	f810 2b01 	ldrb.w	r2, [r0], #1
 802178a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802178e:	429a      	cmp	r2, r3
 8021790:	d103      	bne.n	802179a <strncmp+0x1c>
 8021792:	42a0      	cmp	r0, r4
 8021794:	d001      	beq.n	802179a <strncmp+0x1c>
 8021796:	2a00      	cmp	r2, #0
 8021798:	d1f5      	bne.n	8021786 <strncmp+0x8>
 802179a:	1ad0      	subs	r0, r2, r3
 802179c:	bd10      	pop	{r4, pc}
 802179e:	4610      	mov	r0, r2
 80217a0:	e7fc      	b.n	802179c <strncmp+0x1e>

080217a2 <strstr>:
 80217a2:	780a      	ldrb	r2, [r1, #0]
 80217a4:	b570      	push	{r4, r5, r6, lr}
 80217a6:	b96a      	cbnz	r2, 80217c4 <strstr+0x22>
 80217a8:	bd70      	pop	{r4, r5, r6, pc}
 80217aa:	429a      	cmp	r2, r3
 80217ac:	d109      	bne.n	80217c2 <strstr+0x20>
 80217ae:	460c      	mov	r4, r1
 80217b0:	4605      	mov	r5, r0
 80217b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80217b6:	2b00      	cmp	r3, #0
 80217b8:	d0f6      	beq.n	80217a8 <strstr+0x6>
 80217ba:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80217be:	429e      	cmp	r6, r3
 80217c0:	d0f7      	beq.n	80217b2 <strstr+0x10>
 80217c2:	3001      	adds	r0, #1
 80217c4:	7803      	ldrb	r3, [r0, #0]
 80217c6:	2b00      	cmp	r3, #0
 80217c8:	d1ef      	bne.n	80217aa <strstr+0x8>
 80217ca:	4618      	mov	r0, r3
 80217cc:	e7ec      	b.n	80217a8 <strstr+0x6>
	...

080217d0 <_close_r>:
 80217d0:	b538      	push	{r3, r4, r5, lr}
 80217d2:	4d06      	ldr	r5, [pc, #24]	@ (80217ec <_close_r+0x1c>)
 80217d4:	2300      	movs	r3, #0
 80217d6:	4604      	mov	r4, r0
 80217d8:	4608      	mov	r0, r1
 80217da:	602b      	str	r3, [r5, #0]
 80217dc:	f7df fbd4 	bl	8000f88 <_close>
 80217e0:	1c43      	adds	r3, r0, #1
 80217e2:	d102      	bne.n	80217ea <_close_r+0x1a>
 80217e4:	682b      	ldr	r3, [r5, #0]
 80217e6:	b103      	cbz	r3, 80217ea <_close_r+0x1a>
 80217e8:	6023      	str	r3, [r4, #0]
 80217ea:	bd38      	pop	{r3, r4, r5, pc}
 80217ec:	2000688c 	.word	0x2000688c

080217f0 <_reclaim_reent>:
 80217f0:	4b2d      	ldr	r3, [pc, #180]	@ (80218a8 <_reclaim_reent+0xb8>)
 80217f2:	681b      	ldr	r3, [r3, #0]
 80217f4:	4283      	cmp	r3, r0
 80217f6:	b570      	push	{r4, r5, r6, lr}
 80217f8:	4604      	mov	r4, r0
 80217fa:	d053      	beq.n	80218a4 <_reclaim_reent+0xb4>
 80217fc:	69c3      	ldr	r3, [r0, #28]
 80217fe:	b31b      	cbz	r3, 8021848 <_reclaim_reent+0x58>
 8021800:	68db      	ldr	r3, [r3, #12]
 8021802:	b163      	cbz	r3, 802181e <_reclaim_reent+0x2e>
 8021804:	2500      	movs	r5, #0
 8021806:	69e3      	ldr	r3, [r4, #28]
 8021808:	68db      	ldr	r3, [r3, #12]
 802180a:	5959      	ldr	r1, [r3, r5]
 802180c:	b9b1      	cbnz	r1, 802183c <_reclaim_reent+0x4c>
 802180e:	3504      	adds	r5, #4
 8021810:	2d80      	cmp	r5, #128	@ 0x80
 8021812:	d1f8      	bne.n	8021806 <_reclaim_reent+0x16>
 8021814:	69e3      	ldr	r3, [r4, #28]
 8021816:	4620      	mov	r0, r4
 8021818:	68d9      	ldr	r1, [r3, #12]
 802181a:	f000 f8e1 	bl	80219e0 <_free_r>
 802181e:	69e3      	ldr	r3, [r4, #28]
 8021820:	6819      	ldr	r1, [r3, #0]
 8021822:	b111      	cbz	r1, 802182a <_reclaim_reent+0x3a>
 8021824:	4620      	mov	r0, r4
 8021826:	f000 f8db 	bl	80219e0 <_free_r>
 802182a:	69e3      	ldr	r3, [r4, #28]
 802182c:	689d      	ldr	r5, [r3, #8]
 802182e:	b15d      	cbz	r5, 8021848 <_reclaim_reent+0x58>
 8021830:	4629      	mov	r1, r5
 8021832:	4620      	mov	r0, r4
 8021834:	682d      	ldr	r5, [r5, #0]
 8021836:	f000 f8d3 	bl	80219e0 <_free_r>
 802183a:	e7f8      	b.n	802182e <_reclaim_reent+0x3e>
 802183c:	680e      	ldr	r6, [r1, #0]
 802183e:	4620      	mov	r0, r4
 8021840:	f000 f8ce 	bl	80219e0 <_free_r>
 8021844:	4631      	mov	r1, r6
 8021846:	e7e1      	b.n	802180c <_reclaim_reent+0x1c>
 8021848:	6961      	ldr	r1, [r4, #20]
 802184a:	b111      	cbz	r1, 8021852 <_reclaim_reent+0x62>
 802184c:	4620      	mov	r0, r4
 802184e:	f000 f8c7 	bl	80219e0 <_free_r>
 8021852:	69e1      	ldr	r1, [r4, #28]
 8021854:	b111      	cbz	r1, 802185c <_reclaim_reent+0x6c>
 8021856:	4620      	mov	r0, r4
 8021858:	f000 f8c2 	bl	80219e0 <_free_r>
 802185c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802185e:	b111      	cbz	r1, 8021866 <_reclaim_reent+0x76>
 8021860:	4620      	mov	r0, r4
 8021862:	f000 f8bd 	bl	80219e0 <_free_r>
 8021866:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021868:	b111      	cbz	r1, 8021870 <_reclaim_reent+0x80>
 802186a:	4620      	mov	r0, r4
 802186c:	f000 f8b8 	bl	80219e0 <_free_r>
 8021870:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8021872:	b111      	cbz	r1, 802187a <_reclaim_reent+0x8a>
 8021874:	4620      	mov	r0, r4
 8021876:	f000 f8b3 	bl	80219e0 <_free_r>
 802187a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 802187c:	b111      	cbz	r1, 8021884 <_reclaim_reent+0x94>
 802187e:	4620      	mov	r0, r4
 8021880:	f000 f8ae 	bl	80219e0 <_free_r>
 8021884:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8021886:	b111      	cbz	r1, 802188e <_reclaim_reent+0x9e>
 8021888:	4620      	mov	r0, r4
 802188a:	f000 f8a9 	bl	80219e0 <_free_r>
 802188e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8021890:	b111      	cbz	r1, 8021898 <_reclaim_reent+0xa8>
 8021892:	4620      	mov	r0, r4
 8021894:	f000 f8a4 	bl	80219e0 <_free_r>
 8021898:	6a23      	ldr	r3, [r4, #32]
 802189a:	b11b      	cbz	r3, 80218a4 <_reclaim_reent+0xb4>
 802189c:	4620      	mov	r0, r4
 802189e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80218a2:	4718      	bx	r3
 80218a4:	bd70      	pop	{r4, r5, r6, pc}
 80218a6:	bf00      	nop
 80218a8:	20000148 	.word	0x20000148

080218ac <_lseek_r>:
 80218ac:	b538      	push	{r3, r4, r5, lr}
 80218ae:	4d07      	ldr	r5, [pc, #28]	@ (80218cc <_lseek_r+0x20>)
 80218b0:	4604      	mov	r4, r0
 80218b2:	4608      	mov	r0, r1
 80218b4:	4611      	mov	r1, r2
 80218b6:	2200      	movs	r2, #0
 80218b8:	602a      	str	r2, [r5, #0]
 80218ba:	461a      	mov	r2, r3
 80218bc:	f7df fb8b 	bl	8000fd6 <_lseek>
 80218c0:	1c43      	adds	r3, r0, #1
 80218c2:	d102      	bne.n	80218ca <_lseek_r+0x1e>
 80218c4:	682b      	ldr	r3, [r5, #0]
 80218c6:	b103      	cbz	r3, 80218ca <_lseek_r+0x1e>
 80218c8:	6023      	str	r3, [r4, #0]
 80218ca:	bd38      	pop	{r3, r4, r5, pc}
 80218cc:	2000688c 	.word	0x2000688c

080218d0 <_read_r>:
 80218d0:	b538      	push	{r3, r4, r5, lr}
 80218d2:	4d07      	ldr	r5, [pc, #28]	@ (80218f0 <_read_r+0x20>)
 80218d4:	4604      	mov	r4, r0
 80218d6:	4608      	mov	r0, r1
 80218d8:	4611      	mov	r1, r2
 80218da:	2200      	movs	r2, #0
 80218dc:	602a      	str	r2, [r5, #0]
 80218de:	461a      	mov	r2, r3
 80218e0:	f7df fb19 	bl	8000f16 <_read>
 80218e4:	1c43      	adds	r3, r0, #1
 80218e6:	d102      	bne.n	80218ee <_read_r+0x1e>
 80218e8:	682b      	ldr	r3, [r5, #0]
 80218ea:	b103      	cbz	r3, 80218ee <_read_r+0x1e>
 80218ec:	6023      	str	r3, [r4, #0]
 80218ee:	bd38      	pop	{r3, r4, r5, pc}
 80218f0:	2000688c 	.word	0x2000688c

080218f4 <_sbrk_r>:
 80218f4:	b538      	push	{r3, r4, r5, lr}
 80218f6:	4d06      	ldr	r5, [pc, #24]	@ (8021910 <_sbrk_r+0x1c>)
 80218f8:	2300      	movs	r3, #0
 80218fa:	4604      	mov	r4, r0
 80218fc:	4608      	mov	r0, r1
 80218fe:	602b      	str	r3, [r5, #0]
 8021900:	f7df fb76 	bl	8000ff0 <_sbrk>
 8021904:	1c43      	adds	r3, r0, #1
 8021906:	d102      	bne.n	802190e <_sbrk_r+0x1a>
 8021908:	682b      	ldr	r3, [r5, #0]
 802190a:	b103      	cbz	r3, 802190e <_sbrk_r+0x1a>
 802190c:	6023      	str	r3, [r4, #0]
 802190e:	bd38      	pop	{r3, r4, r5, pc}
 8021910:	2000688c 	.word	0x2000688c

08021914 <_write_r>:
 8021914:	b538      	push	{r3, r4, r5, lr}
 8021916:	4d07      	ldr	r5, [pc, #28]	@ (8021934 <_write_r+0x20>)
 8021918:	4604      	mov	r4, r0
 802191a:	4608      	mov	r0, r1
 802191c:	4611      	mov	r1, r2
 802191e:	2200      	movs	r2, #0
 8021920:	602a      	str	r2, [r5, #0]
 8021922:	461a      	mov	r2, r3
 8021924:	f7df fb14 	bl	8000f50 <_write>
 8021928:	1c43      	adds	r3, r0, #1
 802192a:	d102      	bne.n	8021932 <_write_r+0x1e>
 802192c:	682b      	ldr	r3, [r5, #0]
 802192e:	b103      	cbz	r3, 8021932 <_write_r+0x1e>
 8021930:	6023      	str	r3, [r4, #0]
 8021932:	bd38      	pop	{r3, r4, r5, pc}
 8021934:	2000688c 	.word	0x2000688c

08021938 <__libc_init_array>:
 8021938:	b570      	push	{r4, r5, r6, lr}
 802193a:	4d0d      	ldr	r5, [pc, #52]	@ (8021970 <__libc_init_array+0x38>)
 802193c:	4c0d      	ldr	r4, [pc, #52]	@ (8021974 <__libc_init_array+0x3c>)
 802193e:	1b64      	subs	r4, r4, r5
 8021940:	10a4      	asrs	r4, r4, #2
 8021942:	2600      	movs	r6, #0
 8021944:	42a6      	cmp	r6, r4
 8021946:	d109      	bne.n	802195c <__libc_init_array+0x24>
 8021948:	4d0b      	ldr	r5, [pc, #44]	@ (8021978 <__libc_init_array+0x40>)
 802194a:	4c0c      	ldr	r4, [pc, #48]	@ (802197c <__libc_init_array+0x44>)
 802194c:	f000 fe7c 	bl	8022648 <_init>
 8021950:	1b64      	subs	r4, r4, r5
 8021952:	10a4      	asrs	r4, r4, #2
 8021954:	2600      	movs	r6, #0
 8021956:	42a6      	cmp	r6, r4
 8021958:	d105      	bne.n	8021966 <__libc_init_array+0x2e>
 802195a:	bd70      	pop	{r4, r5, r6, pc}
 802195c:	f855 3b04 	ldr.w	r3, [r5], #4
 8021960:	4798      	blx	r3
 8021962:	3601      	adds	r6, #1
 8021964:	e7ee      	b.n	8021944 <__libc_init_array+0xc>
 8021966:	f855 3b04 	ldr.w	r3, [r5], #4
 802196a:	4798      	blx	r3
 802196c:	3601      	adds	r6, #1
 802196e:	e7f2      	b.n	8021956 <__libc_init_array+0x1e>
 8021970:	0802785c 	.word	0x0802785c
 8021974:	0802785c 	.word	0x0802785c
 8021978:	0802785c 	.word	0x0802785c
 802197c:	08027860 	.word	0x08027860

08021980 <__retarget_lock_init_recursive>:
 8021980:	4770      	bx	lr

08021982 <__retarget_lock_acquire_recursive>:
 8021982:	4770      	bx	lr

08021984 <__retarget_lock_release_recursive>:
 8021984:	4770      	bx	lr

08021986 <memcpy>:
 8021986:	440a      	add	r2, r1
 8021988:	4291      	cmp	r1, r2
 802198a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 802198e:	d100      	bne.n	8021992 <memcpy+0xc>
 8021990:	4770      	bx	lr
 8021992:	b510      	push	{r4, lr}
 8021994:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021998:	f803 4f01 	strb.w	r4, [r3, #1]!
 802199c:	4291      	cmp	r1, r2
 802199e:	d1f9      	bne.n	8021994 <memcpy+0xe>
 80219a0:	bd10      	pop	{r4, pc}
	...

080219a4 <__assert_func>:
 80219a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80219a6:	4614      	mov	r4, r2
 80219a8:	461a      	mov	r2, r3
 80219aa:	4b09      	ldr	r3, [pc, #36]	@ (80219d0 <__assert_func+0x2c>)
 80219ac:	681b      	ldr	r3, [r3, #0]
 80219ae:	4605      	mov	r5, r0
 80219b0:	68d8      	ldr	r0, [r3, #12]
 80219b2:	b14c      	cbz	r4, 80219c8 <__assert_func+0x24>
 80219b4:	4b07      	ldr	r3, [pc, #28]	@ (80219d4 <__assert_func+0x30>)
 80219b6:	9100      	str	r1, [sp, #0]
 80219b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80219bc:	4906      	ldr	r1, [pc, #24]	@ (80219d8 <__assert_func+0x34>)
 80219be:	462b      	mov	r3, r5
 80219c0:	f000 fd2a 	bl	8022418 <fiprintf>
 80219c4:	f000 fdbe 	bl	8022544 <abort>
 80219c8:	4b04      	ldr	r3, [pc, #16]	@ (80219dc <__assert_func+0x38>)
 80219ca:	461c      	mov	r4, r3
 80219cc:	e7f3      	b.n	80219b6 <__assert_func+0x12>
 80219ce:	bf00      	nop
 80219d0:	20000148 	.word	0x20000148
 80219d4:	080277e3 	.word	0x080277e3
 80219d8:	080277f0 	.word	0x080277f0
 80219dc:	0802781e 	.word	0x0802781e

080219e0 <_free_r>:
 80219e0:	b538      	push	{r3, r4, r5, lr}
 80219e2:	4605      	mov	r5, r0
 80219e4:	2900      	cmp	r1, #0
 80219e6:	d041      	beq.n	8021a6c <_free_r+0x8c>
 80219e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80219ec:	1f0c      	subs	r4, r1, #4
 80219ee:	2b00      	cmp	r3, #0
 80219f0:	bfb8      	it	lt
 80219f2:	18e4      	addlt	r4, r4, r3
 80219f4:	f7ff fbd2 	bl	802119c <__malloc_lock>
 80219f8:	4a1d      	ldr	r2, [pc, #116]	@ (8021a70 <_free_r+0x90>)
 80219fa:	6813      	ldr	r3, [r2, #0]
 80219fc:	b933      	cbnz	r3, 8021a0c <_free_r+0x2c>
 80219fe:	6063      	str	r3, [r4, #4]
 8021a00:	6014      	str	r4, [r2, #0]
 8021a02:	4628      	mov	r0, r5
 8021a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021a08:	f7ff bbce 	b.w	80211a8 <__malloc_unlock>
 8021a0c:	42a3      	cmp	r3, r4
 8021a0e:	d908      	bls.n	8021a22 <_free_r+0x42>
 8021a10:	6820      	ldr	r0, [r4, #0]
 8021a12:	1821      	adds	r1, r4, r0
 8021a14:	428b      	cmp	r3, r1
 8021a16:	bf01      	itttt	eq
 8021a18:	6819      	ldreq	r1, [r3, #0]
 8021a1a:	685b      	ldreq	r3, [r3, #4]
 8021a1c:	1809      	addeq	r1, r1, r0
 8021a1e:	6021      	streq	r1, [r4, #0]
 8021a20:	e7ed      	b.n	80219fe <_free_r+0x1e>
 8021a22:	461a      	mov	r2, r3
 8021a24:	685b      	ldr	r3, [r3, #4]
 8021a26:	b10b      	cbz	r3, 8021a2c <_free_r+0x4c>
 8021a28:	42a3      	cmp	r3, r4
 8021a2a:	d9fa      	bls.n	8021a22 <_free_r+0x42>
 8021a2c:	6811      	ldr	r1, [r2, #0]
 8021a2e:	1850      	adds	r0, r2, r1
 8021a30:	42a0      	cmp	r0, r4
 8021a32:	d10b      	bne.n	8021a4c <_free_r+0x6c>
 8021a34:	6820      	ldr	r0, [r4, #0]
 8021a36:	4401      	add	r1, r0
 8021a38:	1850      	adds	r0, r2, r1
 8021a3a:	4283      	cmp	r3, r0
 8021a3c:	6011      	str	r1, [r2, #0]
 8021a3e:	d1e0      	bne.n	8021a02 <_free_r+0x22>
 8021a40:	6818      	ldr	r0, [r3, #0]
 8021a42:	685b      	ldr	r3, [r3, #4]
 8021a44:	6053      	str	r3, [r2, #4]
 8021a46:	4408      	add	r0, r1
 8021a48:	6010      	str	r0, [r2, #0]
 8021a4a:	e7da      	b.n	8021a02 <_free_r+0x22>
 8021a4c:	d902      	bls.n	8021a54 <_free_r+0x74>
 8021a4e:	230c      	movs	r3, #12
 8021a50:	602b      	str	r3, [r5, #0]
 8021a52:	e7d6      	b.n	8021a02 <_free_r+0x22>
 8021a54:	6820      	ldr	r0, [r4, #0]
 8021a56:	1821      	adds	r1, r4, r0
 8021a58:	428b      	cmp	r3, r1
 8021a5a:	bf04      	itt	eq
 8021a5c:	6819      	ldreq	r1, [r3, #0]
 8021a5e:	685b      	ldreq	r3, [r3, #4]
 8021a60:	6063      	str	r3, [r4, #4]
 8021a62:	bf04      	itt	eq
 8021a64:	1809      	addeq	r1, r1, r0
 8021a66:	6021      	streq	r1, [r4, #0]
 8021a68:	6054      	str	r4, [r2, #4]
 8021a6a:	e7ca      	b.n	8021a02 <_free_r+0x22>
 8021a6c:	bd38      	pop	{r3, r4, r5, pc}
 8021a6e:	bf00      	nop
 8021a70:	2000674c 	.word	0x2000674c

08021a74 <__ssputs_r>:
 8021a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021a78:	688e      	ldr	r6, [r1, #8]
 8021a7a:	461f      	mov	r7, r3
 8021a7c:	42be      	cmp	r6, r7
 8021a7e:	680b      	ldr	r3, [r1, #0]
 8021a80:	4682      	mov	sl, r0
 8021a82:	460c      	mov	r4, r1
 8021a84:	4690      	mov	r8, r2
 8021a86:	d82d      	bhi.n	8021ae4 <__ssputs_r+0x70>
 8021a88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021a8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8021a90:	d026      	beq.n	8021ae0 <__ssputs_r+0x6c>
 8021a92:	6965      	ldr	r5, [r4, #20]
 8021a94:	6909      	ldr	r1, [r1, #16]
 8021a96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021a9a:	eba3 0901 	sub.w	r9, r3, r1
 8021a9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021aa2:	1c7b      	adds	r3, r7, #1
 8021aa4:	444b      	add	r3, r9
 8021aa6:	106d      	asrs	r5, r5, #1
 8021aa8:	429d      	cmp	r5, r3
 8021aaa:	bf38      	it	cc
 8021aac:	461d      	movcc	r5, r3
 8021aae:	0553      	lsls	r3, r2, #21
 8021ab0:	d527      	bpl.n	8021b02 <__ssputs_r+0x8e>
 8021ab2:	4629      	mov	r1, r5
 8021ab4:	f7ff faf2 	bl	802109c <_malloc_r>
 8021ab8:	4606      	mov	r6, r0
 8021aba:	b360      	cbz	r0, 8021b16 <__ssputs_r+0xa2>
 8021abc:	6921      	ldr	r1, [r4, #16]
 8021abe:	464a      	mov	r2, r9
 8021ac0:	f7ff ff61 	bl	8021986 <memcpy>
 8021ac4:	89a3      	ldrh	r3, [r4, #12]
 8021ac6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8021aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021ace:	81a3      	strh	r3, [r4, #12]
 8021ad0:	6126      	str	r6, [r4, #16]
 8021ad2:	6165      	str	r5, [r4, #20]
 8021ad4:	444e      	add	r6, r9
 8021ad6:	eba5 0509 	sub.w	r5, r5, r9
 8021ada:	6026      	str	r6, [r4, #0]
 8021adc:	60a5      	str	r5, [r4, #8]
 8021ade:	463e      	mov	r6, r7
 8021ae0:	42be      	cmp	r6, r7
 8021ae2:	d900      	bls.n	8021ae6 <__ssputs_r+0x72>
 8021ae4:	463e      	mov	r6, r7
 8021ae6:	6820      	ldr	r0, [r4, #0]
 8021ae8:	4632      	mov	r2, r6
 8021aea:	4641      	mov	r1, r8
 8021aec:	f7ff fe18 	bl	8021720 <memmove>
 8021af0:	68a3      	ldr	r3, [r4, #8]
 8021af2:	1b9b      	subs	r3, r3, r6
 8021af4:	60a3      	str	r3, [r4, #8]
 8021af6:	6823      	ldr	r3, [r4, #0]
 8021af8:	4433      	add	r3, r6
 8021afa:	6023      	str	r3, [r4, #0]
 8021afc:	2000      	movs	r0, #0
 8021afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021b02:	462a      	mov	r2, r5
 8021b04:	f000 fd25 	bl	8022552 <_realloc_r>
 8021b08:	4606      	mov	r6, r0
 8021b0a:	2800      	cmp	r0, #0
 8021b0c:	d1e0      	bne.n	8021ad0 <__ssputs_r+0x5c>
 8021b0e:	6921      	ldr	r1, [r4, #16]
 8021b10:	4650      	mov	r0, sl
 8021b12:	f7ff ff65 	bl	80219e0 <_free_r>
 8021b16:	230c      	movs	r3, #12
 8021b18:	f8ca 3000 	str.w	r3, [sl]
 8021b1c:	89a3      	ldrh	r3, [r4, #12]
 8021b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021b22:	81a3      	strh	r3, [r4, #12]
 8021b24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021b28:	e7e9      	b.n	8021afe <__ssputs_r+0x8a>
	...

08021b2c <_svfiprintf_r>:
 8021b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b30:	4698      	mov	r8, r3
 8021b32:	898b      	ldrh	r3, [r1, #12]
 8021b34:	061b      	lsls	r3, r3, #24
 8021b36:	b09d      	sub	sp, #116	@ 0x74
 8021b38:	4607      	mov	r7, r0
 8021b3a:	460d      	mov	r5, r1
 8021b3c:	4614      	mov	r4, r2
 8021b3e:	d510      	bpl.n	8021b62 <_svfiprintf_r+0x36>
 8021b40:	690b      	ldr	r3, [r1, #16]
 8021b42:	b973      	cbnz	r3, 8021b62 <_svfiprintf_r+0x36>
 8021b44:	2140      	movs	r1, #64	@ 0x40
 8021b46:	f7ff faa9 	bl	802109c <_malloc_r>
 8021b4a:	6028      	str	r0, [r5, #0]
 8021b4c:	6128      	str	r0, [r5, #16]
 8021b4e:	b930      	cbnz	r0, 8021b5e <_svfiprintf_r+0x32>
 8021b50:	230c      	movs	r3, #12
 8021b52:	603b      	str	r3, [r7, #0]
 8021b54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021b58:	b01d      	add	sp, #116	@ 0x74
 8021b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021b5e:	2340      	movs	r3, #64	@ 0x40
 8021b60:	616b      	str	r3, [r5, #20]
 8021b62:	2300      	movs	r3, #0
 8021b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8021b66:	2320      	movs	r3, #32
 8021b68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021b6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8021b70:	2330      	movs	r3, #48	@ 0x30
 8021b72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8021d10 <_svfiprintf_r+0x1e4>
 8021b76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021b7a:	f04f 0901 	mov.w	r9, #1
 8021b7e:	4623      	mov	r3, r4
 8021b80:	469a      	mov	sl, r3
 8021b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021b86:	b10a      	cbz	r2, 8021b8c <_svfiprintf_r+0x60>
 8021b88:	2a25      	cmp	r2, #37	@ 0x25
 8021b8a:	d1f9      	bne.n	8021b80 <_svfiprintf_r+0x54>
 8021b8c:	ebba 0b04 	subs.w	fp, sl, r4
 8021b90:	d00b      	beq.n	8021baa <_svfiprintf_r+0x7e>
 8021b92:	465b      	mov	r3, fp
 8021b94:	4622      	mov	r2, r4
 8021b96:	4629      	mov	r1, r5
 8021b98:	4638      	mov	r0, r7
 8021b9a:	f7ff ff6b 	bl	8021a74 <__ssputs_r>
 8021b9e:	3001      	adds	r0, #1
 8021ba0:	f000 80a7 	beq.w	8021cf2 <_svfiprintf_r+0x1c6>
 8021ba4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021ba6:	445a      	add	r2, fp
 8021ba8:	9209      	str	r2, [sp, #36]	@ 0x24
 8021baa:	f89a 3000 	ldrb.w	r3, [sl]
 8021bae:	2b00      	cmp	r3, #0
 8021bb0:	f000 809f 	beq.w	8021cf2 <_svfiprintf_r+0x1c6>
 8021bb4:	2300      	movs	r3, #0
 8021bb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021bba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021bbe:	f10a 0a01 	add.w	sl, sl, #1
 8021bc2:	9304      	str	r3, [sp, #16]
 8021bc4:	9307      	str	r3, [sp, #28]
 8021bc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021bca:	931a      	str	r3, [sp, #104]	@ 0x68
 8021bcc:	4654      	mov	r4, sl
 8021bce:	2205      	movs	r2, #5
 8021bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021bd4:	484e      	ldr	r0, [pc, #312]	@ (8021d10 <_svfiprintf_r+0x1e4>)
 8021bd6:	f7de fb4b 	bl	8000270 <memchr>
 8021bda:	9a04      	ldr	r2, [sp, #16]
 8021bdc:	b9d8      	cbnz	r0, 8021c16 <_svfiprintf_r+0xea>
 8021bde:	06d0      	lsls	r0, r2, #27
 8021be0:	bf44      	itt	mi
 8021be2:	2320      	movmi	r3, #32
 8021be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021be8:	0711      	lsls	r1, r2, #28
 8021bea:	bf44      	itt	mi
 8021bec:	232b      	movmi	r3, #43	@ 0x2b
 8021bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8021bf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8021bf8:	d015      	beq.n	8021c26 <_svfiprintf_r+0xfa>
 8021bfa:	9a07      	ldr	r2, [sp, #28]
 8021bfc:	4654      	mov	r4, sl
 8021bfe:	2000      	movs	r0, #0
 8021c00:	f04f 0c0a 	mov.w	ip, #10
 8021c04:	4621      	mov	r1, r4
 8021c06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021c0a:	3b30      	subs	r3, #48	@ 0x30
 8021c0c:	2b09      	cmp	r3, #9
 8021c0e:	d94b      	bls.n	8021ca8 <_svfiprintf_r+0x17c>
 8021c10:	b1b0      	cbz	r0, 8021c40 <_svfiprintf_r+0x114>
 8021c12:	9207      	str	r2, [sp, #28]
 8021c14:	e014      	b.n	8021c40 <_svfiprintf_r+0x114>
 8021c16:	eba0 0308 	sub.w	r3, r0, r8
 8021c1a:	fa09 f303 	lsl.w	r3, r9, r3
 8021c1e:	4313      	orrs	r3, r2
 8021c20:	9304      	str	r3, [sp, #16]
 8021c22:	46a2      	mov	sl, r4
 8021c24:	e7d2      	b.n	8021bcc <_svfiprintf_r+0xa0>
 8021c26:	9b03      	ldr	r3, [sp, #12]
 8021c28:	1d19      	adds	r1, r3, #4
 8021c2a:	681b      	ldr	r3, [r3, #0]
 8021c2c:	9103      	str	r1, [sp, #12]
 8021c2e:	2b00      	cmp	r3, #0
 8021c30:	bfbb      	ittet	lt
 8021c32:	425b      	neglt	r3, r3
 8021c34:	f042 0202 	orrlt.w	r2, r2, #2
 8021c38:	9307      	strge	r3, [sp, #28]
 8021c3a:	9307      	strlt	r3, [sp, #28]
 8021c3c:	bfb8      	it	lt
 8021c3e:	9204      	strlt	r2, [sp, #16]
 8021c40:	7823      	ldrb	r3, [r4, #0]
 8021c42:	2b2e      	cmp	r3, #46	@ 0x2e
 8021c44:	d10a      	bne.n	8021c5c <_svfiprintf_r+0x130>
 8021c46:	7863      	ldrb	r3, [r4, #1]
 8021c48:	2b2a      	cmp	r3, #42	@ 0x2a
 8021c4a:	d132      	bne.n	8021cb2 <_svfiprintf_r+0x186>
 8021c4c:	9b03      	ldr	r3, [sp, #12]
 8021c4e:	1d1a      	adds	r2, r3, #4
 8021c50:	681b      	ldr	r3, [r3, #0]
 8021c52:	9203      	str	r2, [sp, #12]
 8021c54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021c58:	3402      	adds	r4, #2
 8021c5a:	9305      	str	r3, [sp, #20]
 8021c5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8021d20 <_svfiprintf_r+0x1f4>
 8021c60:	7821      	ldrb	r1, [r4, #0]
 8021c62:	2203      	movs	r2, #3
 8021c64:	4650      	mov	r0, sl
 8021c66:	f7de fb03 	bl	8000270 <memchr>
 8021c6a:	b138      	cbz	r0, 8021c7c <_svfiprintf_r+0x150>
 8021c6c:	9b04      	ldr	r3, [sp, #16]
 8021c6e:	eba0 000a 	sub.w	r0, r0, sl
 8021c72:	2240      	movs	r2, #64	@ 0x40
 8021c74:	4082      	lsls	r2, r0
 8021c76:	4313      	orrs	r3, r2
 8021c78:	3401      	adds	r4, #1
 8021c7a:	9304      	str	r3, [sp, #16]
 8021c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021c80:	4824      	ldr	r0, [pc, #144]	@ (8021d14 <_svfiprintf_r+0x1e8>)
 8021c82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021c86:	2206      	movs	r2, #6
 8021c88:	f7de faf2 	bl	8000270 <memchr>
 8021c8c:	2800      	cmp	r0, #0
 8021c8e:	d036      	beq.n	8021cfe <_svfiprintf_r+0x1d2>
 8021c90:	4b21      	ldr	r3, [pc, #132]	@ (8021d18 <_svfiprintf_r+0x1ec>)
 8021c92:	bb1b      	cbnz	r3, 8021cdc <_svfiprintf_r+0x1b0>
 8021c94:	9b03      	ldr	r3, [sp, #12]
 8021c96:	3307      	adds	r3, #7
 8021c98:	f023 0307 	bic.w	r3, r3, #7
 8021c9c:	3308      	adds	r3, #8
 8021c9e:	9303      	str	r3, [sp, #12]
 8021ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021ca2:	4433      	add	r3, r6
 8021ca4:	9309      	str	r3, [sp, #36]	@ 0x24
 8021ca6:	e76a      	b.n	8021b7e <_svfiprintf_r+0x52>
 8021ca8:	fb0c 3202 	mla	r2, ip, r2, r3
 8021cac:	460c      	mov	r4, r1
 8021cae:	2001      	movs	r0, #1
 8021cb0:	e7a8      	b.n	8021c04 <_svfiprintf_r+0xd8>
 8021cb2:	2300      	movs	r3, #0
 8021cb4:	3401      	adds	r4, #1
 8021cb6:	9305      	str	r3, [sp, #20]
 8021cb8:	4619      	mov	r1, r3
 8021cba:	f04f 0c0a 	mov.w	ip, #10
 8021cbe:	4620      	mov	r0, r4
 8021cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021cc4:	3a30      	subs	r2, #48	@ 0x30
 8021cc6:	2a09      	cmp	r2, #9
 8021cc8:	d903      	bls.n	8021cd2 <_svfiprintf_r+0x1a6>
 8021cca:	2b00      	cmp	r3, #0
 8021ccc:	d0c6      	beq.n	8021c5c <_svfiprintf_r+0x130>
 8021cce:	9105      	str	r1, [sp, #20]
 8021cd0:	e7c4      	b.n	8021c5c <_svfiprintf_r+0x130>
 8021cd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8021cd6:	4604      	mov	r4, r0
 8021cd8:	2301      	movs	r3, #1
 8021cda:	e7f0      	b.n	8021cbe <_svfiprintf_r+0x192>
 8021cdc:	ab03      	add	r3, sp, #12
 8021cde:	9300      	str	r3, [sp, #0]
 8021ce0:	462a      	mov	r2, r5
 8021ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8021d1c <_svfiprintf_r+0x1f0>)
 8021ce4:	a904      	add	r1, sp, #16
 8021ce6:	4638      	mov	r0, r7
 8021ce8:	f3af 8000 	nop.w
 8021cec:	1c42      	adds	r2, r0, #1
 8021cee:	4606      	mov	r6, r0
 8021cf0:	d1d6      	bne.n	8021ca0 <_svfiprintf_r+0x174>
 8021cf2:	89ab      	ldrh	r3, [r5, #12]
 8021cf4:	065b      	lsls	r3, r3, #25
 8021cf6:	f53f af2d 	bmi.w	8021b54 <_svfiprintf_r+0x28>
 8021cfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021cfc:	e72c      	b.n	8021b58 <_svfiprintf_r+0x2c>
 8021cfe:	ab03      	add	r3, sp, #12
 8021d00:	9300      	str	r3, [sp, #0]
 8021d02:	462a      	mov	r2, r5
 8021d04:	4b05      	ldr	r3, [pc, #20]	@ (8021d1c <_svfiprintf_r+0x1f0>)
 8021d06:	a904      	add	r1, sp, #16
 8021d08:	4638      	mov	r0, r7
 8021d0a:	f000 f9bb 	bl	8022084 <_printf_i>
 8021d0e:	e7ed      	b.n	8021cec <_svfiprintf_r+0x1c0>
 8021d10:	0802781f 	.word	0x0802781f
 8021d14:	08027829 	.word	0x08027829
 8021d18:	00000000 	.word	0x00000000
 8021d1c:	08021a75 	.word	0x08021a75
 8021d20:	08027825 	.word	0x08027825

08021d24 <__sfputc_r>:
 8021d24:	6893      	ldr	r3, [r2, #8]
 8021d26:	3b01      	subs	r3, #1
 8021d28:	2b00      	cmp	r3, #0
 8021d2a:	b410      	push	{r4}
 8021d2c:	6093      	str	r3, [r2, #8]
 8021d2e:	da08      	bge.n	8021d42 <__sfputc_r+0x1e>
 8021d30:	6994      	ldr	r4, [r2, #24]
 8021d32:	42a3      	cmp	r3, r4
 8021d34:	db01      	blt.n	8021d3a <__sfputc_r+0x16>
 8021d36:	290a      	cmp	r1, #10
 8021d38:	d103      	bne.n	8021d42 <__sfputc_r+0x1e>
 8021d3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021d3e:	f7ff bc4b 	b.w	80215d8 <__swbuf_r>
 8021d42:	6813      	ldr	r3, [r2, #0]
 8021d44:	1c58      	adds	r0, r3, #1
 8021d46:	6010      	str	r0, [r2, #0]
 8021d48:	7019      	strb	r1, [r3, #0]
 8021d4a:	4608      	mov	r0, r1
 8021d4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021d50:	4770      	bx	lr

08021d52 <__sfputs_r>:
 8021d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021d54:	4606      	mov	r6, r0
 8021d56:	460f      	mov	r7, r1
 8021d58:	4614      	mov	r4, r2
 8021d5a:	18d5      	adds	r5, r2, r3
 8021d5c:	42ac      	cmp	r4, r5
 8021d5e:	d101      	bne.n	8021d64 <__sfputs_r+0x12>
 8021d60:	2000      	movs	r0, #0
 8021d62:	e007      	b.n	8021d74 <__sfputs_r+0x22>
 8021d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021d68:	463a      	mov	r2, r7
 8021d6a:	4630      	mov	r0, r6
 8021d6c:	f7ff ffda 	bl	8021d24 <__sfputc_r>
 8021d70:	1c43      	adds	r3, r0, #1
 8021d72:	d1f3      	bne.n	8021d5c <__sfputs_r+0xa>
 8021d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021d78 <_vfiprintf_r>:
 8021d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021d7c:	460d      	mov	r5, r1
 8021d7e:	b09d      	sub	sp, #116	@ 0x74
 8021d80:	4614      	mov	r4, r2
 8021d82:	4698      	mov	r8, r3
 8021d84:	4606      	mov	r6, r0
 8021d86:	b118      	cbz	r0, 8021d90 <_vfiprintf_r+0x18>
 8021d88:	6a03      	ldr	r3, [r0, #32]
 8021d8a:	b90b      	cbnz	r3, 8021d90 <_vfiprintf_r+0x18>
 8021d8c:	f7ff fadc 	bl	8021348 <__sinit>
 8021d90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021d92:	07d9      	lsls	r1, r3, #31
 8021d94:	d405      	bmi.n	8021da2 <_vfiprintf_r+0x2a>
 8021d96:	89ab      	ldrh	r3, [r5, #12]
 8021d98:	059a      	lsls	r2, r3, #22
 8021d9a:	d402      	bmi.n	8021da2 <_vfiprintf_r+0x2a>
 8021d9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021d9e:	f7ff fdf0 	bl	8021982 <__retarget_lock_acquire_recursive>
 8021da2:	89ab      	ldrh	r3, [r5, #12]
 8021da4:	071b      	lsls	r3, r3, #28
 8021da6:	d501      	bpl.n	8021dac <_vfiprintf_r+0x34>
 8021da8:	692b      	ldr	r3, [r5, #16]
 8021daa:	b99b      	cbnz	r3, 8021dd4 <_vfiprintf_r+0x5c>
 8021dac:	4629      	mov	r1, r5
 8021dae:	4630      	mov	r0, r6
 8021db0:	f7ff fc50 	bl	8021654 <__swsetup_r>
 8021db4:	b170      	cbz	r0, 8021dd4 <_vfiprintf_r+0x5c>
 8021db6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021db8:	07dc      	lsls	r4, r3, #31
 8021dba:	d504      	bpl.n	8021dc6 <_vfiprintf_r+0x4e>
 8021dbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021dc0:	b01d      	add	sp, #116	@ 0x74
 8021dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021dc6:	89ab      	ldrh	r3, [r5, #12]
 8021dc8:	0598      	lsls	r0, r3, #22
 8021dca:	d4f7      	bmi.n	8021dbc <_vfiprintf_r+0x44>
 8021dcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021dce:	f7ff fdd9 	bl	8021984 <__retarget_lock_release_recursive>
 8021dd2:	e7f3      	b.n	8021dbc <_vfiprintf_r+0x44>
 8021dd4:	2300      	movs	r3, #0
 8021dd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8021dd8:	2320      	movs	r3, #32
 8021dda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021dde:	f8cd 800c 	str.w	r8, [sp, #12]
 8021de2:	2330      	movs	r3, #48	@ 0x30
 8021de4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8021f94 <_vfiprintf_r+0x21c>
 8021de8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021dec:	f04f 0901 	mov.w	r9, #1
 8021df0:	4623      	mov	r3, r4
 8021df2:	469a      	mov	sl, r3
 8021df4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021df8:	b10a      	cbz	r2, 8021dfe <_vfiprintf_r+0x86>
 8021dfa:	2a25      	cmp	r2, #37	@ 0x25
 8021dfc:	d1f9      	bne.n	8021df2 <_vfiprintf_r+0x7a>
 8021dfe:	ebba 0b04 	subs.w	fp, sl, r4
 8021e02:	d00b      	beq.n	8021e1c <_vfiprintf_r+0xa4>
 8021e04:	465b      	mov	r3, fp
 8021e06:	4622      	mov	r2, r4
 8021e08:	4629      	mov	r1, r5
 8021e0a:	4630      	mov	r0, r6
 8021e0c:	f7ff ffa1 	bl	8021d52 <__sfputs_r>
 8021e10:	3001      	adds	r0, #1
 8021e12:	f000 80a7 	beq.w	8021f64 <_vfiprintf_r+0x1ec>
 8021e16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021e18:	445a      	add	r2, fp
 8021e1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8021e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8021e20:	2b00      	cmp	r3, #0
 8021e22:	f000 809f 	beq.w	8021f64 <_vfiprintf_r+0x1ec>
 8021e26:	2300      	movs	r3, #0
 8021e28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8021e2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021e30:	f10a 0a01 	add.w	sl, sl, #1
 8021e34:	9304      	str	r3, [sp, #16]
 8021e36:	9307      	str	r3, [sp, #28]
 8021e38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021e3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8021e3e:	4654      	mov	r4, sl
 8021e40:	2205      	movs	r2, #5
 8021e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021e46:	4853      	ldr	r0, [pc, #332]	@ (8021f94 <_vfiprintf_r+0x21c>)
 8021e48:	f7de fa12 	bl	8000270 <memchr>
 8021e4c:	9a04      	ldr	r2, [sp, #16]
 8021e4e:	b9d8      	cbnz	r0, 8021e88 <_vfiprintf_r+0x110>
 8021e50:	06d1      	lsls	r1, r2, #27
 8021e52:	bf44      	itt	mi
 8021e54:	2320      	movmi	r3, #32
 8021e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021e5a:	0713      	lsls	r3, r2, #28
 8021e5c:	bf44      	itt	mi
 8021e5e:	232b      	movmi	r3, #43	@ 0x2b
 8021e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021e64:	f89a 3000 	ldrb.w	r3, [sl]
 8021e68:	2b2a      	cmp	r3, #42	@ 0x2a
 8021e6a:	d015      	beq.n	8021e98 <_vfiprintf_r+0x120>
 8021e6c:	9a07      	ldr	r2, [sp, #28]
 8021e6e:	4654      	mov	r4, sl
 8021e70:	2000      	movs	r0, #0
 8021e72:	f04f 0c0a 	mov.w	ip, #10
 8021e76:	4621      	mov	r1, r4
 8021e78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021e7c:	3b30      	subs	r3, #48	@ 0x30
 8021e7e:	2b09      	cmp	r3, #9
 8021e80:	d94b      	bls.n	8021f1a <_vfiprintf_r+0x1a2>
 8021e82:	b1b0      	cbz	r0, 8021eb2 <_vfiprintf_r+0x13a>
 8021e84:	9207      	str	r2, [sp, #28]
 8021e86:	e014      	b.n	8021eb2 <_vfiprintf_r+0x13a>
 8021e88:	eba0 0308 	sub.w	r3, r0, r8
 8021e8c:	fa09 f303 	lsl.w	r3, r9, r3
 8021e90:	4313      	orrs	r3, r2
 8021e92:	9304      	str	r3, [sp, #16]
 8021e94:	46a2      	mov	sl, r4
 8021e96:	e7d2      	b.n	8021e3e <_vfiprintf_r+0xc6>
 8021e98:	9b03      	ldr	r3, [sp, #12]
 8021e9a:	1d19      	adds	r1, r3, #4
 8021e9c:	681b      	ldr	r3, [r3, #0]
 8021e9e:	9103      	str	r1, [sp, #12]
 8021ea0:	2b00      	cmp	r3, #0
 8021ea2:	bfbb      	ittet	lt
 8021ea4:	425b      	neglt	r3, r3
 8021ea6:	f042 0202 	orrlt.w	r2, r2, #2
 8021eaa:	9307      	strge	r3, [sp, #28]
 8021eac:	9307      	strlt	r3, [sp, #28]
 8021eae:	bfb8      	it	lt
 8021eb0:	9204      	strlt	r2, [sp, #16]
 8021eb2:	7823      	ldrb	r3, [r4, #0]
 8021eb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8021eb6:	d10a      	bne.n	8021ece <_vfiprintf_r+0x156>
 8021eb8:	7863      	ldrb	r3, [r4, #1]
 8021eba:	2b2a      	cmp	r3, #42	@ 0x2a
 8021ebc:	d132      	bne.n	8021f24 <_vfiprintf_r+0x1ac>
 8021ebe:	9b03      	ldr	r3, [sp, #12]
 8021ec0:	1d1a      	adds	r2, r3, #4
 8021ec2:	681b      	ldr	r3, [r3, #0]
 8021ec4:	9203      	str	r2, [sp, #12]
 8021ec6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021eca:	3402      	adds	r4, #2
 8021ecc:	9305      	str	r3, [sp, #20]
 8021ece:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8021fa4 <_vfiprintf_r+0x22c>
 8021ed2:	7821      	ldrb	r1, [r4, #0]
 8021ed4:	2203      	movs	r2, #3
 8021ed6:	4650      	mov	r0, sl
 8021ed8:	f7de f9ca 	bl	8000270 <memchr>
 8021edc:	b138      	cbz	r0, 8021eee <_vfiprintf_r+0x176>
 8021ede:	9b04      	ldr	r3, [sp, #16]
 8021ee0:	eba0 000a 	sub.w	r0, r0, sl
 8021ee4:	2240      	movs	r2, #64	@ 0x40
 8021ee6:	4082      	lsls	r2, r0
 8021ee8:	4313      	orrs	r3, r2
 8021eea:	3401      	adds	r4, #1
 8021eec:	9304      	str	r3, [sp, #16]
 8021eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021ef2:	4829      	ldr	r0, [pc, #164]	@ (8021f98 <_vfiprintf_r+0x220>)
 8021ef4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021ef8:	2206      	movs	r2, #6
 8021efa:	f7de f9b9 	bl	8000270 <memchr>
 8021efe:	2800      	cmp	r0, #0
 8021f00:	d03f      	beq.n	8021f82 <_vfiprintf_r+0x20a>
 8021f02:	4b26      	ldr	r3, [pc, #152]	@ (8021f9c <_vfiprintf_r+0x224>)
 8021f04:	bb1b      	cbnz	r3, 8021f4e <_vfiprintf_r+0x1d6>
 8021f06:	9b03      	ldr	r3, [sp, #12]
 8021f08:	3307      	adds	r3, #7
 8021f0a:	f023 0307 	bic.w	r3, r3, #7
 8021f0e:	3308      	adds	r3, #8
 8021f10:	9303      	str	r3, [sp, #12]
 8021f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021f14:	443b      	add	r3, r7
 8021f16:	9309      	str	r3, [sp, #36]	@ 0x24
 8021f18:	e76a      	b.n	8021df0 <_vfiprintf_r+0x78>
 8021f1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8021f1e:	460c      	mov	r4, r1
 8021f20:	2001      	movs	r0, #1
 8021f22:	e7a8      	b.n	8021e76 <_vfiprintf_r+0xfe>
 8021f24:	2300      	movs	r3, #0
 8021f26:	3401      	adds	r4, #1
 8021f28:	9305      	str	r3, [sp, #20]
 8021f2a:	4619      	mov	r1, r3
 8021f2c:	f04f 0c0a 	mov.w	ip, #10
 8021f30:	4620      	mov	r0, r4
 8021f32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021f36:	3a30      	subs	r2, #48	@ 0x30
 8021f38:	2a09      	cmp	r2, #9
 8021f3a:	d903      	bls.n	8021f44 <_vfiprintf_r+0x1cc>
 8021f3c:	2b00      	cmp	r3, #0
 8021f3e:	d0c6      	beq.n	8021ece <_vfiprintf_r+0x156>
 8021f40:	9105      	str	r1, [sp, #20]
 8021f42:	e7c4      	b.n	8021ece <_vfiprintf_r+0x156>
 8021f44:	fb0c 2101 	mla	r1, ip, r1, r2
 8021f48:	4604      	mov	r4, r0
 8021f4a:	2301      	movs	r3, #1
 8021f4c:	e7f0      	b.n	8021f30 <_vfiprintf_r+0x1b8>
 8021f4e:	ab03      	add	r3, sp, #12
 8021f50:	9300      	str	r3, [sp, #0]
 8021f52:	462a      	mov	r2, r5
 8021f54:	4b12      	ldr	r3, [pc, #72]	@ (8021fa0 <_vfiprintf_r+0x228>)
 8021f56:	a904      	add	r1, sp, #16
 8021f58:	4630      	mov	r0, r6
 8021f5a:	f3af 8000 	nop.w
 8021f5e:	4607      	mov	r7, r0
 8021f60:	1c78      	adds	r0, r7, #1
 8021f62:	d1d6      	bne.n	8021f12 <_vfiprintf_r+0x19a>
 8021f64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021f66:	07d9      	lsls	r1, r3, #31
 8021f68:	d405      	bmi.n	8021f76 <_vfiprintf_r+0x1fe>
 8021f6a:	89ab      	ldrh	r3, [r5, #12]
 8021f6c:	059a      	lsls	r2, r3, #22
 8021f6e:	d402      	bmi.n	8021f76 <_vfiprintf_r+0x1fe>
 8021f70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021f72:	f7ff fd07 	bl	8021984 <__retarget_lock_release_recursive>
 8021f76:	89ab      	ldrh	r3, [r5, #12]
 8021f78:	065b      	lsls	r3, r3, #25
 8021f7a:	f53f af1f 	bmi.w	8021dbc <_vfiprintf_r+0x44>
 8021f7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021f80:	e71e      	b.n	8021dc0 <_vfiprintf_r+0x48>
 8021f82:	ab03      	add	r3, sp, #12
 8021f84:	9300      	str	r3, [sp, #0]
 8021f86:	462a      	mov	r2, r5
 8021f88:	4b05      	ldr	r3, [pc, #20]	@ (8021fa0 <_vfiprintf_r+0x228>)
 8021f8a:	a904      	add	r1, sp, #16
 8021f8c:	4630      	mov	r0, r6
 8021f8e:	f000 f879 	bl	8022084 <_printf_i>
 8021f92:	e7e4      	b.n	8021f5e <_vfiprintf_r+0x1e6>
 8021f94:	0802781f 	.word	0x0802781f
 8021f98:	08027829 	.word	0x08027829
 8021f9c:	00000000 	.word	0x00000000
 8021fa0:	08021d53 	.word	0x08021d53
 8021fa4:	08027825 	.word	0x08027825

08021fa8 <_printf_common>:
 8021fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021fac:	4616      	mov	r6, r2
 8021fae:	4698      	mov	r8, r3
 8021fb0:	688a      	ldr	r2, [r1, #8]
 8021fb2:	690b      	ldr	r3, [r1, #16]
 8021fb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8021fb8:	4293      	cmp	r3, r2
 8021fba:	bfb8      	it	lt
 8021fbc:	4613      	movlt	r3, r2
 8021fbe:	6033      	str	r3, [r6, #0]
 8021fc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8021fc4:	4607      	mov	r7, r0
 8021fc6:	460c      	mov	r4, r1
 8021fc8:	b10a      	cbz	r2, 8021fce <_printf_common+0x26>
 8021fca:	3301      	adds	r3, #1
 8021fcc:	6033      	str	r3, [r6, #0]
 8021fce:	6823      	ldr	r3, [r4, #0]
 8021fd0:	0699      	lsls	r1, r3, #26
 8021fd2:	bf42      	ittt	mi
 8021fd4:	6833      	ldrmi	r3, [r6, #0]
 8021fd6:	3302      	addmi	r3, #2
 8021fd8:	6033      	strmi	r3, [r6, #0]
 8021fda:	6825      	ldr	r5, [r4, #0]
 8021fdc:	f015 0506 	ands.w	r5, r5, #6
 8021fe0:	d106      	bne.n	8021ff0 <_printf_common+0x48>
 8021fe2:	f104 0a19 	add.w	sl, r4, #25
 8021fe6:	68e3      	ldr	r3, [r4, #12]
 8021fe8:	6832      	ldr	r2, [r6, #0]
 8021fea:	1a9b      	subs	r3, r3, r2
 8021fec:	42ab      	cmp	r3, r5
 8021fee:	dc26      	bgt.n	802203e <_printf_common+0x96>
 8021ff0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8021ff4:	6822      	ldr	r2, [r4, #0]
 8021ff6:	3b00      	subs	r3, #0
 8021ff8:	bf18      	it	ne
 8021ffa:	2301      	movne	r3, #1
 8021ffc:	0692      	lsls	r2, r2, #26
 8021ffe:	d42b      	bmi.n	8022058 <_printf_common+0xb0>
 8022000:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8022004:	4641      	mov	r1, r8
 8022006:	4638      	mov	r0, r7
 8022008:	47c8      	blx	r9
 802200a:	3001      	adds	r0, #1
 802200c:	d01e      	beq.n	802204c <_printf_common+0xa4>
 802200e:	6823      	ldr	r3, [r4, #0]
 8022010:	6922      	ldr	r2, [r4, #16]
 8022012:	f003 0306 	and.w	r3, r3, #6
 8022016:	2b04      	cmp	r3, #4
 8022018:	bf02      	ittt	eq
 802201a:	68e5      	ldreq	r5, [r4, #12]
 802201c:	6833      	ldreq	r3, [r6, #0]
 802201e:	1aed      	subeq	r5, r5, r3
 8022020:	68a3      	ldr	r3, [r4, #8]
 8022022:	bf0c      	ite	eq
 8022024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022028:	2500      	movne	r5, #0
 802202a:	4293      	cmp	r3, r2
 802202c:	bfc4      	itt	gt
 802202e:	1a9b      	subgt	r3, r3, r2
 8022030:	18ed      	addgt	r5, r5, r3
 8022032:	2600      	movs	r6, #0
 8022034:	341a      	adds	r4, #26
 8022036:	42b5      	cmp	r5, r6
 8022038:	d11a      	bne.n	8022070 <_printf_common+0xc8>
 802203a:	2000      	movs	r0, #0
 802203c:	e008      	b.n	8022050 <_printf_common+0xa8>
 802203e:	2301      	movs	r3, #1
 8022040:	4652      	mov	r2, sl
 8022042:	4641      	mov	r1, r8
 8022044:	4638      	mov	r0, r7
 8022046:	47c8      	blx	r9
 8022048:	3001      	adds	r0, #1
 802204a:	d103      	bne.n	8022054 <_printf_common+0xac>
 802204c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022054:	3501      	adds	r5, #1
 8022056:	e7c6      	b.n	8021fe6 <_printf_common+0x3e>
 8022058:	18e1      	adds	r1, r4, r3
 802205a:	1c5a      	adds	r2, r3, #1
 802205c:	2030      	movs	r0, #48	@ 0x30
 802205e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8022062:	4422      	add	r2, r4
 8022064:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8022068:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802206c:	3302      	adds	r3, #2
 802206e:	e7c7      	b.n	8022000 <_printf_common+0x58>
 8022070:	2301      	movs	r3, #1
 8022072:	4622      	mov	r2, r4
 8022074:	4641      	mov	r1, r8
 8022076:	4638      	mov	r0, r7
 8022078:	47c8      	blx	r9
 802207a:	3001      	adds	r0, #1
 802207c:	d0e6      	beq.n	802204c <_printf_common+0xa4>
 802207e:	3601      	adds	r6, #1
 8022080:	e7d9      	b.n	8022036 <_printf_common+0x8e>
	...

08022084 <_printf_i>:
 8022084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022088:	7e0f      	ldrb	r7, [r1, #24]
 802208a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802208c:	2f78      	cmp	r7, #120	@ 0x78
 802208e:	4691      	mov	r9, r2
 8022090:	4680      	mov	r8, r0
 8022092:	460c      	mov	r4, r1
 8022094:	469a      	mov	sl, r3
 8022096:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802209a:	d807      	bhi.n	80220ac <_printf_i+0x28>
 802209c:	2f62      	cmp	r7, #98	@ 0x62
 802209e:	d80a      	bhi.n	80220b6 <_printf_i+0x32>
 80220a0:	2f00      	cmp	r7, #0
 80220a2:	f000 80d1 	beq.w	8022248 <_printf_i+0x1c4>
 80220a6:	2f58      	cmp	r7, #88	@ 0x58
 80220a8:	f000 80b8 	beq.w	802221c <_printf_i+0x198>
 80220ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80220b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80220b4:	e03a      	b.n	802212c <_printf_i+0xa8>
 80220b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80220ba:	2b15      	cmp	r3, #21
 80220bc:	d8f6      	bhi.n	80220ac <_printf_i+0x28>
 80220be:	a101      	add	r1, pc, #4	@ (adr r1, 80220c4 <_printf_i+0x40>)
 80220c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80220c4:	0802211d 	.word	0x0802211d
 80220c8:	08022131 	.word	0x08022131
 80220cc:	080220ad 	.word	0x080220ad
 80220d0:	080220ad 	.word	0x080220ad
 80220d4:	080220ad 	.word	0x080220ad
 80220d8:	080220ad 	.word	0x080220ad
 80220dc:	08022131 	.word	0x08022131
 80220e0:	080220ad 	.word	0x080220ad
 80220e4:	080220ad 	.word	0x080220ad
 80220e8:	080220ad 	.word	0x080220ad
 80220ec:	080220ad 	.word	0x080220ad
 80220f0:	0802222f 	.word	0x0802222f
 80220f4:	0802215b 	.word	0x0802215b
 80220f8:	080221e9 	.word	0x080221e9
 80220fc:	080220ad 	.word	0x080220ad
 8022100:	080220ad 	.word	0x080220ad
 8022104:	08022251 	.word	0x08022251
 8022108:	080220ad 	.word	0x080220ad
 802210c:	0802215b 	.word	0x0802215b
 8022110:	080220ad 	.word	0x080220ad
 8022114:	080220ad 	.word	0x080220ad
 8022118:	080221f1 	.word	0x080221f1
 802211c:	6833      	ldr	r3, [r6, #0]
 802211e:	1d1a      	adds	r2, r3, #4
 8022120:	681b      	ldr	r3, [r3, #0]
 8022122:	6032      	str	r2, [r6, #0]
 8022124:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022128:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802212c:	2301      	movs	r3, #1
 802212e:	e09c      	b.n	802226a <_printf_i+0x1e6>
 8022130:	6833      	ldr	r3, [r6, #0]
 8022132:	6820      	ldr	r0, [r4, #0]
 8022134:	1d19      	adds	r1, r3, #4
 8022136:	6031      	str	r1, [r6, #0]
 8022138:	0606      	lsls	r6, r0, #24
 802213a:	d501      	bpl.n	8022140 <_printf_i+0xbc>
 802213c:	681d      	ldr	r5, [r3, #0]
 802213e:	e003      	b.n	8022148 <_printf_i+0xc4>
 8022140:	0645      	lsls	r5, r0, #25
 8022142:	d5fb      	bpl.n	802213c <_printf_i+0xb8>
 8022144:	f9b3 5000 	ldrsh.w	r5, [r3]
 8022148:	2d00      	cmp	r5, #0
 802214a:	da03      	bge.n	8022154 <_printf_i+0xd0>
 802214c:	232d      	movs	r3, #45	@ 0x2d
 802214e:	426d      	negs	r5, r5
 8022150:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022154:	4858      	ldr	r0, [pc, #352]	@ (80222b8 <_printf_i+0x234>)
 8022156:	230a      	movs	r3, #10
 8022158:	e011      	b.n	802217e <_printf_i+0xfa>
 802215a:	6821      	ldr	r1, [r4, #0]
 802215c:	6833      	ldr	r3, [r6, #0]
 802215e:	0608      	lsls	r0, r1, #24
 8022160:	f853 5b04 	ldr.w	r5, [r3], #4
 8022164:	d402      	bmi.n	802216c <_printf_i+0xe8>
 8022166:	0649      	lsls	r1, r1, #25
 8022168:	bf48      	it	mi
 802216a:	b2ad      	uxthmi	r5, r5
 802216c:	2f6f      	cmp	r7, #111	@ 0x6f
 802216e:	4852      	ldr	r0, [pc, #328]	@ (80222b8 <_printf_i+0x234>)
 8022170:	6033      	str	r3, [r6, #0]
 8022172:	bf14      	ite	ne
 8022174:	230a      	movne	r3, #10
 8022176:	2308      	moveq	r3, #8
 8022178:	2100      	movs	r1, #0
 802217a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802217e:	6866      	ldr	r6, [r4, #4]
 8022180:	60a6      	str	r6, [r4, #8]
 8022182:	2e00      	cmp	r6, #0
 8022184:	db05      	blt.n	8022192 <_printf_i+0x10e>
 8022186:	6821      	ldr	r1, [r4, #0]
 8022188:	432e      	orrs	r6, r5
 802218a:	f021 0104 	bic.w	r1, r1, #4
 802218e:	6021      	str	r1, [r4, #0]
 8022190:	d04b      	beq.n	802222a <_printf_i+0x1a6>
 8022192:	4616      	mov	r6, r2
 8022194:	fbb5 f1f3 	udiv	r1, r5, r3
 8022198:	fb03 5711 	mls	r7, r3, r1, r5
 802219c:	5dc7      	ldrb	r7, [r0, r7]
 802219e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80221a2:	462f      	mov	r7, r5
 80221a4:	42bb      	cmp	r3, r7
 80221a6:	460d      	mov	r5, r1
 80221a8:	d9f4      	bls.n	8022194 <_printf_i+0x110>
 80221aa:	2b08      	cmp	r3, #8
 80221ac:	d10b      	bne.n	80221c6 <_printf_i+0x142>
 80221ae:	6823      	ldr	r3, [r4, #0]
 80221b0:	07df      	lsls	r7, r3, #31
 80221b2:	d508      	bpl.n	80221c6 <_printf_i+0x142>
 80221b4:	6923      	ldr	r3, [r4, #16]
 80221b6:	6861      	ldr	r1, [r4, #4]
 80221b8:	4299      	cmp	r1, r3
 80221ba:	bfde      	ittt	le
 80221bc:	2330      	movle	r3, #48	@ 0x30
 80221be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80221c2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80221c6:	1b92      	subs	r2, r2, r6
 80221c8:	6122      	str	r2, [r4, #16]
 80221ca:	f8cd a000 	str.w	sl, [sp]
 80221ce:	464b      	mov	r3, r9
 80221d0:	aa03      	add	r2, sp, #12
 80221d2:	4621      	mov	r1, r4
 80221d4:	4640      	mov	r0, r8
 80221d6:	f7ff fee7 	bl	8021fa8 <_printf_common>
 80221da:	3001      	adds	r0, #1
 80221dc:	d14a      	bne.n	8022274 <_printf_i+0x1f0>
 80221de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80221e2:	b004      	add	sp, #16
 80221e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80221e8:	6823      	ldr	r3, [r4, #0]
 80221ea:	f043 0320 	orr.w	r3, r3, #32
 80221ee:	6023      	str	r3, [r4, #0]
 80221f0:	4832      	ldr	r0, [pc, #200]	@ (80222bc <_printf_i+0x238>)
 80221f2:	2778      	movs	r7, #120	@ 0x78
 80221f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80221f8:	6823      	ldr	r3, [r4, #0]
 80221fa:	6831      	ldr	r1, [r6, #0]
 80221fc:	061f      	lsls	r7, r3, #24
 80221fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8022202:	d402      	bmi.n	802220a <_printf_i+0x186>
 8022204:	065f      	lsls	r7, r3, #25
 8022206:	bf48      	it	mi
 8022208:	b2ad      	uxthmi	r5, r5
 802220a:	6031      	str	r1, [r6, #0]
 802220c:	07d9      	lsls	r1, r3, #31
 802220e:	bf44      	itt	mi
 8022210:	f043 0320 	orrmi.w	r3, r3, #32
 8022214:	6023      	strmi	r3, [r4, #0]
 8022216:	b11d      	cbz	r5, 8022220 <_printf_i+0x19c>
 8022218:	2310      	movs	r3, #16
 802221a:	e7ad      	b.n	8022178 <_printf_i+0xf4>
 802221c:	4826      	ldr	r0, [pc, #152]	@ (80222b8 <_printf_i+0x234>)
 802221e:	e7e9      	b.n	80221f4 <_printf_i+0x170>
 8022220:	6823      	ldr	r3, [r4, #0]
 8022222:	f023 0320 	bic.w	r3, r3, #32
 8022226:	6023      	str	r3, [r4, #0]
 8022228:	e7f6      	b.n	8022218 <_printf_i+0x194>
 802222a:	4616      	mov	r6, r2
 802222c:	e7bd      	b.n	80221aa <_printf_i+0x126>
 802222e:	6833      	ldr	r3, [r6, #0]
 8022230:	6825      	ldr	r5, [r4, #0]
 8022232:	6961      	ldr	r1, [r4, #20]
 8022234:	1d18      	adds	r0, r3, #4
 8022236:	6030      	str	r0, [r6, #0]
 8022238:	062e      	lsls	r6, r5, #24
 802223a:	681b      	ldr	r3, [r3, #0]
 802223c:	d501      	bpl.n	8022242 <_printf_i+0x1be>
 802223e:	6019      	str	r1, [r3, #0]
 8022240:	e002      	b.n	8022248 <_printf_i+0x1c4>
 8022242:	0668      	lsls	r0, r5, #25
 8022244:	d5fb      	bpl.n	802223e <_printf_i+0x1ba>
 8022246:	8019      	strh	r1, [r3, #0]
 8022248:	2300      	movs	r3, #0
 802224a:	6123      	str	r3, [r4, #16]
 802224c:	4616      	mov	r6, r2
 802224e:	e7bc      	b.n	80221ca <_printf_i+0x146>
 8022250:	6833      	ldr	r3, [r6, #0]
 8022252:	1d1a      	adds	r2, r3, #4
 8022254:	6032      	str	r2, [r6, #0]
 8022256:	681e      	ldr	r6, [r3, #0]
 8022258:	6862      	ldr	r2, [r4, #4]
 802225a:	2100      	movs	r1, #0
 802225c:	4630      	mov	r0, r6
 802225e:	f7de f807 	bl	8000270 <memchr>
 8022262:	b108      	cbz	r0, 8022268 <_printf_i+0x1e4>
 8022264:	1b80      	subs	r0, r0, r6
 8022266:	6060      	str	r0, [r4, #4]
 8022268:	6863      	ldr	r3, [r4, #4]
 802226a:	6123      	str	r3, [r4, #16]
 802226c:	2300      	movs	r3, #0
 802226e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022272:	e7aa      	b.n	80221ca <_printf_i+0x146>
 8022274:	6923      	ldr	r3, [r4, #16]
 8022276:	4632      	mov	r2, r6
 8022278:	4649      	mov	r1, r9
 802227a:	4640      	mov	r0, r8
 802227c:	47d0      	blx	sl
 802227e:	3001      	adds	r0, #1
 8022280:	d0ad      	beq.n	80221de <_printf_i+0x15a>
 8022282:	6823      	ldr	r3, [r4, #0]
 8022284:	079b      	lsls	r3, r3, #30
 8022286:	d413      	bmi.n	80222b0 <_printf_i+0x22c>
 8022288:	68e0      	ldr	r0, [r4, #12]
 802228a:	9b03      	ldr	r3, [sp, #12]
 802228c:	4298      	cmp	r0, r3
 802228e:	bfb8      	it	lt
 8022290:	4618      	movlt	r0, r3
 8022292:	e7a6      	b.n	80221e2 <_printf_i+0x15e>
 8022294:	2301      	movs	r3, #1
 8022296:	4632      	mov	r2, r6
 8022298:	4649      	mov	r1, r9
 802229a:	4640      	mov	r0, r8
 802229c:	47d0      	blx	sl
 802229e:	3001      	adds	r0, #1
 80222a0:	d09d      	beq.n	80221de <_printf_i+0x15a>
 80222a2:	3501      	adds	r5, #1
 80222a4:	68e3      	ldr	r3, [r4, #12]
 80222a6:	9903      	ldr	r1, [sp, #12]
 80222a8:	1a5b      	subs	r3, r3, r1
 80222aa:	42ab      	cmp	r3, r5
 80222ac:	dcf2      	bgt.n	8022294 <_printf_i+0x210>
 80222ae:	e7eb      	b.n	8022288 <_printf_i+0x204>
 80222b0:	2500      	movs	r5, #0
 80222b2:	f104 0619 	add.w	r6, r4, #25
 80222b6:	e7f5      	b.n	80222a4 <_printf_i+0x220>
 80222b8:	08027830 	.word	0x08027830
 80222bc:	08027841 	.word	0x08027841

080222c0 <__sflush_r>:
 80222c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80222c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80222c8:	0716      	lsls	r6, r2, #28
 80222ca:	4605      	mov	r5, r0
 80222cc:	460c      	mov	r4, r1
 80222ce:	d454      	bmi.n	802237a <__sflush_r+0xba>
 80222d0:	684b      	ldr	r3, [r1, #4]
 80222d2:	2b00      	cmp	r3, #0
 80222d4:	dc02      	bgt.n	80222dc <__sflush_r+0x1c>
 80222d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80222d8:	2b00      	cmp	r3, #0
 80222da:	dd48      	ble.n	802236e <__sflush_r+0xae>
 80222dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80222de:	2e00      	cmp	r6, #0
 80222e0:	d045      	beq.n	802236e <__sflush_r+0xae>
 80222e2:	2300      	movs	r3, #0
 80222e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80222e8:	682f      	ldr	r7, [r5, #0]
 80222ea:	6a21      	ldr	r1, [r4, #32]
 80222ec:	602b      	str	r3, [r5, #0]
 80222ee:	d030      	beq.n	8022352 <__sflush_r+0x92>
 80222f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80222f2:	89a3      	ldrh	r3, [r4, #12]
 80222f4:	0759      	lsls	r1, r3, #29
 80222f6:	d505      	bpl.n	8022304 <__sflush_r+0x44>
 80222f8:	6863      	ldr	r3, [r4, #4]
 80222fa:	1ad2      	subs	r2, r2, r3
 80222fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80222fe:	b10b      	cbz	r3, 8022304 <__sflush_r+0x44>
 8022300:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022302:	1ad2      	subs	r2, r2, r3
 8022304:	2300      	movs	r3, #0
 8022306:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022308:	6a21      	ldr	r1, [r4, #32]
 802230a:	4628      	mov	r0, r5
 802230c:	47b0      	blx	r6
 802230e:	1c43      	adds	r3, r0, #1
 8022310:	89a3      	ldrh	r3, [r4, #12]
 8022312:	d106      	bne.n	8022322 <__sflush_r+0x62>
 8022314:	6829      	ldr	r1, [r5, #0]
 8022316:	291d      	cmp	r1, #29
 8022318:	d82b      	bhi.n	8022372 <__sflush_r+0xb2>
 802231a:	4a2a      	ldr	r2, [pc, #168]	@ (80223c4 <__sflush_r+0x104>)
 802231c:	40ca      	lsrs	r2, r1
 802231e:	07d6      	lsls	r6, r2, #31
 8022320:	d527      	bpl.n	8022372 <__sflush_r+0xb2>
 8022322:	2200      	movs	r2, #0
 8022324:	6062      	str	r2, [r4, #4]
 8022326:	04d9      	lsls	r1, r3, #19
 8022328:	6922      	ldr	r2, [r4, #16]
 802232a:	6022      	str	r2, [r4, #0]
 802232c:	d504      	bpl.n	8022338 <__sflush_r+0x78>
 802232e:	1c42      	adds	r2, r0, #1
 8022330:	d101      	bne.n	8022336 <__sflush_r+0x76>
 8022332:	682b      	ldr	r3, [r5, #0]
 8022334:	b903      	cbnz	r3, 8022338 <__sflush_r+0x78>
 8022336:	6560      	str	r0, [r4, #84]	@ 0x54
 8022338:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802233a:	602f      	str	r7, [r5, #0]
 802233c:	b1b9      	cbz	r1, 802236e <__sflush_r+0xae>
 802233e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022342:	4299      	cmp	r1, r3
 8022344:	d002      	beq.n	802234c <__sflush_r+0x8c>
 8022346:	4628      	mov	r0, r5
 8022348:	f7ff fb4a 	bl	80219e0 <_free_r>
 802234c:	2300      	movs	r3, #0
 802234e:	6363      	str	r3, [r4, #52]	@ 0x34
 8022350:	e00d      	b.n	802236e <__sflush_r+0xae>
 8022352:	2301      	movs	r3, #1
 8022354:	4628      	mov	r0, r5
 8022356:	47b0      	blx	r6
 8022358:	4602      	mov	r2, r0
 802235a:	1c50      	adds	r0, r2, #1
 802235c:	d1c9      	bne.n	80222f2 <__sflush_r+0x32>
 802235e:	682b      	ldr	r3, [r5, #0]
 8022360:	2b00      	cmp	r3, #0
 8022362:	d0c6      	beq.n	80222f2 <__sflush_r+0x32>
 8022364:	2b1d      	cmp	r3, #29
 8022366:	d001      	beq.n	802236c <__sflush_r+0xac>
 8022368:	2b16      	cmp	r3, #22
 802236a:	d11e      	bne.n	80223aa <__sflush_r+0xea>
 802236c:	602f      	str	r7, [r5, #0]
 802236e:	2000      	movs	r0, #0
 8022370:	e022      	b.n	80223b8 <__sflush_r+0xf8>
 8022372:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022376:	b21b      	sxth	r3, r3
 8022378:	e01b      	b.n	80223b2 <__sflush_r+0xf2>
 802237a:	690f      	ldr	r7, [r1, #16]
 802237c:	2f00      	cmp	r7, #0
 802237e:	d0f6      	beq.n	802236e <__sflush_r+0xae>
 8022380:	0793      	lsls	r3, r2, #30
 8022382:	680e      	ldr	r6, [r1, #0]
 8022384:	bf08      	it	eq
 8022386:	694b      	ldreq	r3, [r1, #20]
 8022388:	600f      	str	r7, [r1, #0]
 802238a:	bf18      	it	ne
 802238c:	2300      	movne	r3, #0
 802238e:	eba6 0807 	sub.w	r8, r6, r7
 8022392:	608b      	str	r3, [r1, #8]
 8022394:	f1b8 0f00 	cmp.w	r8, #0
 8022398:	dde9      	ble.n	802236e <__sflush_r+0xae>
 802239a:	6a21      	ldr	r1, [r4, #32]
 802239c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802239e:	4643      	mov	r3, r8
 80223a0:	463a      	mov	r2, r7
 80223a2:	4628      	mov	r0, r5
 80223a4:	47b0      	blx	r6
 80223a6:	2800      	cmp	r0, #0
 80223a8:	dc08      	bgt.n	80223bc <__sflush_r+0xfc>
 80223aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80223ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80223b2:	81a3      	strh	r3, [r4, #12]
 80223b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80223b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80223bc:	4407      	add	r7, r0
 80223be:	eba8 0800 	sub.w	r8, r8, r0
 80223c2:	e7e7      	b.n	8022394 <__sflush_r+0xd4>
 80223c4:	20400001 	.word	0x20400001

080223c8 <_fflush_r>:
 80223c8:	b538      	push	{r3, r4, r5, lr}
 80223ca:	690b      	ldr	r3, [r1, #16]
 80223cc:	4605      	mov	r5, r0
 80223ce:	460c      	mov	r4, r1
 80223d0:	b913      	cbnz	r3, 80223d8 <_fflush_r+0x10>
 80223d2:	2500      	movs	r5, #0
 80223d4:	4628      	mov	r0, r5
 80223d6:	bd38      	pop	{r3, r4, r5, pc}
 80223d8:	b118      	cbz	r0, 80223e2 <_fflush_r+0x1a>
 80223da:	6a03      	ldr	r3, [r0, #32]
 80223dc:	b90b      	cbnz	r3, 80223e2 <_fflush_r+0x1a>
 80223de:	f7fe ffb3 	bl	8021348 <__sinit>
 80223e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80223e6:	2b00      	cmp	r3, #0
 80223e8:	d0f3      	beq.n	80223d2 <_fflush_r+0xa>
 80223ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80223ec:	07d0      	lsls	r0, r2, #31
 80223ee:	d404      	bmi.n	80223fa <_fflush_r+0x32>
 80223f0:	0599      	lsls	r1, r3, #22
 80223f2:	d402      	bmi.n	80223fa <_fflush_r+0x32>
 80223f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80223f6:	f7ff fac4 	bl	8021982 <__retarget_lock_acquire_recursive>
 80223fa:	4628      	mov	r0, r5
 80223fc:	4621      	mov	r1, r4
 80223fe:	f7ff ff5f 	bl	80222c0 <__sflush_r>
 8022402:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022404:	07da      	lsls	r2, r3, #31
 8022406:	4605      	mov	r5, r0
 8022408:	d4e4      	bmi.n	80223d4 <_fflush_r+0xc>
 802240a:	89a3      	ldrh	r3, [r4, #12]
 802240c:	059b      	lsls	r3, r3, #22
 802240e:	d4e1      	bmi.n	80223d4 <_fflush_r+0xc>
 8022410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022412:	f7ff fab7 	bl	8021984 <__retarget_lock_release_recursive>
 8022416:	e7dd      	b.n	80223d4 <_fflush_r+0xc>

08022418 <fiprintf>:
 8022418:	b40e      	push	{r1, r2, r3}
 802241a:	b503      	push	{r0, r1, lr}
 802241c:	4601      	mov	r1, r0
 802241e:	ab03      	add	r3, sp, #12
 8022420:	4805      	ldr	r0, [pc, #20]	@ (8022438 <fiprintf+0x20>)
 8022422:	f853 2b04 	ldr.w	r2, [r3], #4
 8022426:	6800      	ldr	r0, [r0, #0]
 8022428:	9301      	str	r3, [sp, #4]
 802242a:	f7ff fca5 	bl	8021d78 <_vfiprintf_r>
 802242e:	b002      	add	sp, #8
 8022430:	f85d eb04 	ldr.w	lr, [sp], #4
 8022434:	b003      	add	sp, #12
 8022436:	4770      	bx	lr
 8022438:	20000148 	.word	0x20000148

0802243c <__swhatbuf_r>:
 802243c:	b570      	push	{r4, r5, r6, lr}
 802243e:	460c      	mov	r4, r1
 8022440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022444:	2900      	cmp	r1, #0
 8022446:	b096      	sub	sp, #88	@ 0x58
 8022448:	4615      	mov	r5, r2
 802244a:	461e      	mov	r6, r3
 802244c:	da0d      	bge.n	802246a <__swhatbuf_r+0x2e>
 802244e:	89a3      	ldrh	r3, [r4, #12]
 8022450:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8022454:	f04f 0100 	mov.w	r1, #0
 8022458:	bf14      	ite	ne
 802245a:	2340      	movne	r3, #64	@ 0x40
 802245c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8022460:	2000      	movs	r0, #0
 8022462:	6031      	str	r1, [r6, #0]
 8022464:	602b      	str	r3, [r5, #0]
 8022466:	b016      	add	sp, #88	@ 0x58
 8022468:	bd70      	pop	{r4, r5, r6, pc}
 802246a:	466a      	mov	r2, sp
 802246c:	f000 f848 	bl	8022500 <_fstat_r>
 8022470:	2800      	cmp	r0, #0
 8022472:	dbec      	blt.n	802244e <__swhatbuf_r+0x12>
 8022474:	9901      	ldr	r1, [sp, #4]
 8022476:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802247a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802247e:	4259      	negs	r1, r3
 8022480:	4159      	adcs	r1, r3
 8022482:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8022486:	e7eb      	b.n	8022460 <__swhatbuf_r+0x24>

08022488 <__smakebuf_r>:
 8022488:	898b      	ldrh	r3, [r1, #12]
 802248a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802248c:	079d      	lsls	r5, r3, #30
 802248e:	4606      	mov	r6, r0
 8022490:	460c      	mov	r4, r1
 8022492:	d507      	bpl.n	80224a4 <__smakebuf_r+0x1c>
 8022494:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8022498:	6023      	str	r3, [r4, #0]
 802249a:	6123      	str	r3, [r4, #16]
 802249c:	2301      	movs	r3, #1
 802249e:	6163      	str	r3, [r4, #20]
 80224a0:	b003      	add	sp, #12
 80224a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80224a4:	ab01      	add	r3, sp, #4
 80224a6:	466a      	mov	r2, sp
 80224a8:	f7ff ffc8 	bl	802243c <__swhatbuf_r>
 80224ac:	9f00      	ldr	r7, [sp, #0]
 80224ae:	4605      	mov	r5, r0
 80224b0:	4639      	mov	r1, r7
 80224b2:	4630      	mov	r0, r6
 80224b4:	f7fe fdf2 	bl	802109c <_malloc_r>
 80224b8:	b948      	cbnz	r0, 80224ce <__smakebuf_r+0x46>
 80224ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80224be:	059a      	lsls	r2, r3, #22
 80224c0:	d4ee      	bmi.n	80224a0 <__smakebuf_r+0x18>
 80224c2:	f023 0303 	bic.w	r3, r3, #3
 80224c6:	f043 0302 	orr.w	r3, r3, #2
 80224ca:	81a3      	strh	r3, [r4, #12]
 80224cc:	e7e2      	b.n	8022494 <__smakebuf_r+0xc>
 80224ce:	89a3      	ldrh	r3, [r4, #12]
 80224d0:	6020      	str	r0, [r4, #0]
 80224d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80224d6:	81a3      	strh	r3, [r4, #12]
 80224d8:	9b01      	ldr	r3, [sp, #4]
 80224da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80224de:	b15b      	cbz	r3, 80224f8 <__smakebuf_r+0x70>
 80224e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80224e4:	4630      	mov	r0, r6
 80224e6:	f000 f81d 	bl	8022524 <_isatty_r>
 80224ea:	b128      	cbz	r0, 80224f8 <__smakebuf_r+0x70>
 80224ec:	89a3      	ldrh	r3, [r4, #12]
 80224ee:	f023 0303 	bic.w	r3, r3, #3
 80224f2:	f043 0301 	orr.w	r3, r3, #1
 80224f6:	81a3      	strh	r3, [r4, #12]
 80224f8:	89a3      	ldrh	r3, [r4, #12]
 80224fa:	431d      	orrs	r5, r3
 80224fc:	81a5      	strh	r5, [r4, #12]
 80224fe:	e7cf      	b.n	80224a0 <__smakebuf_r+0x18>

08022500 <_fstat_r>:
 8022500:	b538      	push	{r3, r4, r5, lr}
 8022502:	4d07      	ldr	r5, [pc, #28]	@ (8022520 <_fstat_r+0x20>)
 8022504:	2300      	movs	r3, #0
 8022506:	4604      	mov	r4, r0
 8022508:	4608      	mov	r0, r1
 802250a:	4611      	mov	r1, r2
 802250c:	602b      	str	r3, [r5, #0]
 802250e:	f7de fd47 	bl	8000fa0 <_fstat>
 8022512:	1c43      	adds	r3, r0, #1
 8022514:	d102      	bne.n	802251c <_fstat_r+0x1c>
 8022516:	682b      	ldr	r3, [r5, #0]
 8022518:	b103      	cbz	r3, 802251c <_fstat_r+0x1c>
 802251a:	6023      	str	r3, [r4, #0]
 802251c:	bd38      	pop	{r3, r4, r5, pc}
 802251e:	bf00      	nop
 8022520:	2000688c 	.word	0x2000688c

08022524 <_isatty_r>:
 8022524:	b538      	push	{r3, r4, r5, lr}
 8022526:	4d06      	ldr	r5, [pc, #24]	@ (8022540 <_isatty_r+0x1c>)
 8022528:	2300      	movs	r3, #0
 802252a:	4604      	mov	r4, r0
 802252c:	4608      	mov	r0, r1
 802252e:	602b      	str	r3, [r5, #0]
 8022530:	f7de fd46 	bl	8000fc0 <_isatty>
 8022534:	1c43      	adds	r3, r0, #1
 8022536:	d102      	bne.n	802253e <_isatty_r+0x1a>
 8022538:	682b      	ldr	r3, [r5, #0]
 802253a:	b103      	cbz	r3, 802253e <_isatty_r+0x1a>
 802253c:	6023      	str	r3, [r4, #0]
 802253e:	bd38      	pop	{r3, r4, r5, pc}
 8022540:	2000688c 	.word	0x2000688c

08022544 <abort>:
 8022544:	b508      	push	{r3, lr}
 8022546:	2006      	movs	r0, #6
 8022548:	f000 f85a 	bl	8022600 <raise>
 802254c:	2001      	movs	r0, #1
 802254e:	f7de fcd7 	bl	8000f00 <_exit>

08022552 <_realloc_r>:
 8022552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022556:	4607      	mov	r7, r0
 8022558:	4614      	mov	r4, r2
 802255a:	460d      	mov	r5, r1
 802255c:	b921      	cbnz	r1, 8022568 <_realloc_r+0x16>
 802255e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022562:	4611      	mov	r1, r2
 8022564:	f7fe bd9a 	b.w	802109c <_malloc_r>
 8022568:	b92a      	cbnz	r2, 8022576 <_realloc_r+0x24>
 802256a:	f7ff fa39 	bl	80219e0 <_free_r>
 802256e:	4625      	mov	r5, r4
 8022570:	4628      	mov	r0, r5
 8022572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022576:	f000 f85f 	bl	8022638 <_malloc_usable_size_r>
 802257a:	4284      	cmp	r4, r0
 802257c:	4606      	mov	r6, r0
 802257e:	d802      	bhi.n	8022586 <_realloc_r+0x34>
 8022580:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8022584:	d8f4      	bhi.n	8022570 <_realloc_r+0x1e>
 8022586:	4621      	mov	r1, r4
 8022588:	4638      	mov	r0, r7
 802258a:	f7fe fd87 	bl	802109c <_malloc_r>
 802258e:	4680      	mov	r8, r0
 8022590:	b908      	cbnz	r0, 8022596 <_realloc_r+0x44>
 8022592:	4645      	mov	r5, r8
 8022594:	e7ec      	b.n	8022570 <_realloc_r+0x1e>
 8022596:	42b4      	cmp	r4, r6
 8022598:	4622      	mov	r2, r4
 802259a:	4629      	mov	r1, r5
 802259c:	bf28      	it	cs
 802259e:	4632      	movcs	r2, r6
 80225a0:	f7ff f9f1 	bl	8021986 <memcpy>
 80225a4:	4629      	mov	r1, r5
 80225a6:	4638      	mov	r0, r7
 80225a8:	f7ff fa1a 	bl	80219e0 <_free_r>
 80225ac:	e7f1      	b.n	8022592 <_realloc_r+0x40>

080225ae <_raise_r>:
 80225ae:	291f      	cmp	r1, #31
 80225b0:	b538      	push	{r3, r4, r5, lr}
 80225b2:	4605      	mov	r5, r0
 80225b4:	460c      	mov	r4, r1
 80225b6:	d904      	bls.n	80225c2 <_raise_r+0x14>
 80225b8:	2316      	movs	r3, #22
 80225ba:	6003      	str	r3, [r0, #0]
 80225bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80225c0:	bd38      	pop	{r3, r4, r5, pc}
 80225c2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80225c4:	b112      	cbz	r2, 80225cc <_raise_r+0x1e>
 80225c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80225ca:	b94b      	cbnz	r3, 80225e0 <_raise_r+0x32>
 80225cc:	4628      	mov	r0, r5
 80225ce:	f000 f831 	bl	8022634 <_getpid_r>
 80225d2:	4622      	mov	r2, r4
 80225d4:	4601      	mov	r1, r0
 80225d6:	4628      	mov	r0, r5
 80225d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80225dc:	f000 b818 	b.w	8022610 <_kill_r>
 80225e0:	2b01      	cmp	r3, #1
 80225e2:	d00a      	beq.n	80225fa <_raise_r+0x4c>
 80225e4:	1c59      	adds	r1, r3, #1
 80225e6:	d103      	bne.n	80225f0 <_raise_r+0x42>
 80225e8:	2316      	movs	r3, #22
 80225ea:	6003      	str	r3, [r0, #0]
 80225ec:	2001      	movs	r0, #1
 80225ee:	e7e7      	b.n	80225c0 <_raise_r+0x12>
 80225f0:	2100      	movs	r1, #0
 80225f2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80225f6:	4620      	mov	r0, r4
 80225f8:	4798      	blx	r3
 80225fa:	2000      	movs	r0, #0
 80225fc:	e7e0      	b.n	80225c0 <_raise_r+0x12>
	...

08022600 <raise>:
 8022600:	4b02      	ldr	r3, [pc, #8]	@ (802260c <raise+0xc>)
 8022602:	4601      	mov	r1, r0
 8022604:	6818      	ldr	r0, [r3, #0]
 8022606:	f7ff bfd2 	b.w	80225ae <_raise_r>
 802260a:	bf00      	nop
 802260c:	20000148 	.word	0x20000148

08022610 <_kill_r>:
 8022610:	b538      	push	{r3, r4, r5, lr}
 8022612:	4d07      	ldr	r5, [pc, #28]	@ (8022630 <_kill_r+0x20>)
 8022614:	2300      	movs	r3, #0
 8022616:	4604      	mov	r4, r0
 8022618:	4608      	mov	r0, r1
 802261a:	4611      	mov	r1, r2
 802261c:	602b      	str	r3, [r5, #0]
 802261e:	f7de fc5d 	bl	8000edc <_kill>
 8022622:	1c43      	adds	r3, r0, #1
 8022624:	d102      	bne.n	802262c <_kill_r+0x1c>
 8022626:	682b      	ldr	r3, [r5, #0]
 8022628:	b103      	cbz	r3, 802262c <_kill_r+0x1c>
 802262a:	6023      	str	r3, [r4, #0]
 802262c:	bd38      	pop	{r3, r4, r5, pc}
 802262e:	bf00      	nop
 8022630:	2000688c 	.word	0x2000688c

08022634 <_getpid_r>:
 8022634:	f7de bc4a 	b.w	8000ecc <_getpid>

08022638 <_malloc_usable_size_r>:
 8022638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802263c:	1f18      	subs	r0, r3, #4
 802263e:	2b00      	cmp	r3, #0
 8022640:	bfbc      	itt	lt
 8022642:	580b      	ldrlt	r3, [r1, r0]
 8022644:	18c0      	addlt	r0, r0, r3
 8022646:	4770      	bx	lr

08022648 <_init>:
 8022648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802264a:	bf00      	nop
 802264c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802264e:	bc08      	pop	{r3}
 8022650:	469e      	mov	lr, r3
 8022652:	4770      	bx	lr

08022654 <_fini>:
 8022654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022656:	bf00      	nop
 8022658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802265a:	bc08      	pop	{r3}
 802265c:	469e      	mov	lr, r3
 802265e:	4770      	bx	lr
