
test-mangoose-freertos-v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fa20  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b80  0801fc20  0801fc20  00020c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080237a0  080237a0  000252d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080237a0  080237a0  000247a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080237a8  080237a8  000252d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080237a8  080237a8  000247a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080237ac  080237ac  000247ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000198  20000000  080237b0  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000198  08023948  00025198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000238  080239e8  00025238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00006170  200002d8  08023a88  000252d8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20006448  08023a88  00025448  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000252d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004165c  00000000  00000000  00025306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009f0f  00000000  00000000  00066962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002e70  00000000  00000000  00070878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000024da  00000000  00000000  000736e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003e700  00000000  00000000  00075bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000452d3  00000000  00000000  000b42c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012d6ad  00000000  00000000  000f9595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00226c42  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000cb34  00000000  00000000  00226c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  002337bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002d8 	.word	0x200002d8
 800021c:	00000000 	.word	0x00000000
 8000220:	0801fc08 	.word	0x0801fc08

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002dc 	.word	0x200002dc
 800023c:	0801fc08 	.word	0x0801fc08

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	4a07      	ldr	r2, [pc, #28]	@ (8000648 <vApplicationGetIdleTaskMemory+0x2c>)
 800062c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	4a06      	ldr	r2, [pc, #24]	@ (800064c <vApplicationGetIdleTaskMemory+0x30>)
 8000632:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800063a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	200002f4 	.word	0x200002f4
 800064c:	20000394 	.word	0x20000394

08000650 <usb_printf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void usb_printf(const char *fmt, ...) {
 8000650:	b40f      	push	{r0, r1, r2, r3}
 8000652:	b580      	push	{r7, lr}
 8000654:	b0c2      	sub	sp, #264	@ 0x108
 8000656:	af00      	add	r7, sp, #0
	char buffer[256];  // adjust size if needed
	va_list args;
	va_start(args, fmt);
 8000658:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 800065c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000664:	601a      	str	r2, [r3, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800066a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800066e:	1d38      	adds	r0, r7, #4
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000676:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800067a:	f01e fab5 	bl	801ebe8 <vsniprintf>
	va_end(args);

	uint8_t result;
	do {
		result = CDC_Transmit_FS((uint8_t*) buffer, strlen(buffer));
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff fddd 	bl	8000240 <strlen>
 8000686:	4603      	mov	r3, r0
 8000688:	b29a      	uxth	r2, r3
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	4611      	mov	r1, r2
 800068e:	4618      	mov	r0, r3
 8000690:	f01d fb10 	bl	801dcb4 <CDC_Transmit_FS>
 8000694:	4603      	mov	r3, r0
 8000696:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
		if (result == USBD_BUSY) {
 800069a:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d102      	bne.n	80006a8 <usb_printf+0x58>
			osDelay(1); // wait a millisecond and retry
 80006a2:	2001      	movs	r0, #1
 80006a4:	f00a f9d8 	bl	800aa58 <osDelay>
		}
	} while (result == USBD_BUSY);
 80006a8:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d0e6      	beq.n	800067e <usb_printf+0x2e>
}
 80006b0:	bf00      	nop
 80006b2:	bf00      	nop
 80006b4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80006b8:	46bd      	mov	sp, r7
 80006ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006be:	b004      	add	sp, #16
 80006c0:	4770      	bx	lr
	...

080006c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006c4:	b5b0      	push	{r4, r5, r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006ca:	f000 fdde 	bl	800128a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006ce:	f000 f81f 	bl	8000710 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006d2:	f000 f8e7 	bl	80008a4 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80006d6:	f000 f8b5 	bl	8000844 <MX_USART3_UART_Init>
	MX_RTC_Init();
 80006da:	f000 f88d 	bl	80007f8 <MX_RTC_Init>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of MongooseTask */
	osThreadDef(MongooseTask, StartMongooseTask, osPriorityNormal, 0, 1024);
 80006de:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <main+0x44>)
 80006e0:	1d3c      	adds	r4, r7, #4
 80006e2:	461d      	mov	r5, r3
 80006e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	MongooseTaskHandle = osThreadCreate(osThread(MongooseTask), NULL);
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f00a f957 	bl	800a9a8 <osThreadCreate>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a03      	ldr	r2, [pc, #12]	@ (800070c <main+0x48>)
 80006fe:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000700:	f00a f93b 	bl	800a97a <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <main+0x40>
 8000708:	0801fc30 	.word	0x0801fc30
 800070c:	2000083c 	.word	0x2000083c

08000710 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b094      	sub	sp, #80	@ 0x50
 8000714:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2234      	movs	r2, #52	@ 0x34
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f01e fb2e 	bl	801ed80 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000734:	f003 fdae 	bl	8004294 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000738:	4b2d      	ldr	r3, [pc, #180]	@ (80007f0 <SystemClock_Config+0xe0>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073c:	4a2c      	ldr	r2, [pc, #176]	@ (80007f0 <SystemClock_Config+0xe0>)
 800073e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000742:	6413      	str	r3, [r2, #64]	@ 0x40
 8000744:	4b2a      	ldr	r3, [pc, #168]	@ (80007f0 <SystemClock_Config+0xe0>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000748:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000750:	4b28      	ldr	r3, [pc, #160]	@ (80007f4 <SystemClock_Config+0xe4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000758:	4a26      	ldr	r2, [pc, #152]	@ (80007f4 <SystemClock_Config+0xe4>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b24      	ldr	r3, [pc, #144]	@ (80007f4 <SystemClock_Config+0xe4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 800076c:	2309      	movs	r3, #9
 800076e:	61fb      	str	r3, [r7, #28]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000770:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000774:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000776:	2301      	movs	r3, #1
 8000778:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000782:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000784:	2304      	movs	r3, #4
 8000786:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 96;
 8000788:	2360      	movs	r3, #96	@ 0x60
 800078a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000790:	2304      	movs	r3, #4
 8000792:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000794:	2302      	movs	r3, #2
 8000796:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000798:	f107 031c 	add.w	r3, r7, #28
 800079c:	4618      	mov	r0, r3
 800079e:	f003 fdd9 	bl	8004354 <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x9c>
		Error_Handler();
 80007a8:	f000 f9f4 	bl	8000b94 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80007ac:	f003 fd82 	bl	80042b4 <HAL_PWREx_EnableOverDrive>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xaa>
		Error_Handler();
 80007b6:	f000 f9ed 	bl	8000b94 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007ba:	230f      	movs	r3, #15
 80007bc:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007be:	2302      	movs	r3, #2
 80007c0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ca:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	2103      	movs	r1, #3
 80007d6:	4618      	mov	r0, r3
 80007d8:	f004 f86a 	bl	80048b0 <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xd6>
		Error_Handler();
 80007e2:	f000 f9d7 	bl	8000b94 <Error_Handler>
	}
}
 80007e6:	bf00      	nop
 80007e8:	3750      	adds	r7, #80	@ 0x50
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40007000 	.word	0x40007000

080007f8 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <MX_RTC_Init+0x44>)
 80007fe:	4a10      	ldr	r2, [pc, #64]	@ (8000840 <MX_RTC_Init+0x48>)
 8000800:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_RTC_Init+0x44>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <MX_RTC_Init+0x44>)
 800080a:	227f      	movs	r2, #127	@ 0x7f
 800080c:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <MX_RTC_Init+0x44>)
 8000810:	22ff      	movs	r2, #255	@ 0xff
 8000812:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <MX_RTC_Init+0x44>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <MX_RTC_Init+0x44>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_RTC_Init+0x44>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000826:	4805      	ldr	r0, [pc, #20]	@ (800083c <MX_RTC_Init+0x44>)
 8000828:	f004 fec2 	bl	80055b0 <HAL_RTC_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_RTC_Init+0x3e>
		Error_Handler();
 8000832:	f000 f9af 	bl	8000b94 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000794 	.word	0x20000794
 8000840:	40002800 	.word	0x40002800

08000844 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000848:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_USART3_UART_Init+0x58>)
 800084a:	4a15      	ldr	r2, [pc, #84]	@ (80008a0 <MX_USART3_UART_Init+0x5c>)
 800084c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800084e:	4b13      	ldr	r3, [pc, #76]	@ (800089c <MX_USART3_UART_Init+0x58>)
 8000850:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000854:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_USART3_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_USART3_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_USART3_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_USART3_UART_Init+0x58>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <MX_USART3_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_USART3_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <MX_USART3_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_USART3_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000886:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_USART3_UART_Init+0x58>)
 8000888:	f005 fa64 	bl	8005d54 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8000892:	f000 f97f 	bl	8000b94 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200007b4 	.word	0x200007b4
 80008a0:	40004800 	.word	0x40004800

080008a4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	@ 0x30
 80008a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b47      	ldr	r3, [pc, #284]	@ (80009d8 <MX_GPIO_Init+0x134>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a46      	ldr	r2, [pc, #280]	@ (80009d8 <MX_GPIO_Init+0x134>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b44      	ldr	r3, [pc, #272]	@ (80009d8 <MX_GPIO_Init+0x134>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	61bb      	str	r3, [r7, #24]
 80008d0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	4b41      	ldr	r3, [pc, #260]	@ (80009d8 <MX_GPIO_Init+0x134>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a40      	ldr	r2, [pc, #256]	@ (80009d8 <MX_GPIO_Init+0x134>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b3e      	ldr	r3, [pc, #248]	@ (80009d8 <MX_GPIO_Init+0x134>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b3b      	ldr	r3, [pc, #236]	@ (80009d8 <MX_GPIO_Init+0x134>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a3a      	ldr	r2, [pc, #232]	@ (80009d8 <MX_GPIO_Init+0x134>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b38      	ldr	r3, [pc, #224]	@ (80009d8 <MX_GPIO_Init+0x134>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	4b35      	ldr	r3, [pc, #212]	@ (80009d8 <MX_GPIO_Init+0x134>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	4a34      	ldr	r2, [pc, #208]	@ (80009d8 <MX_GPIO_Init+0x134>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	@ 0x30
 800090e:	4b32      	ldr	r3, [pc, #200]	@ (80009d8 <MX_GPIO_Init+0x134>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800091a:	4b2f      	ldr	r3, [pc, #188]	@ (80009d8 <MX_GPIO_Init+0x134>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a2e      	ldr	r2, [pc, #184]	@ (80009d8 <MX_GPIO_Init+0x134>)
 8000920:	f043 0308 	orr.w	r3, r3, #8
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b2c      	ldr	r3, [pc, #176]	@ (80009d8 <MX_GPIO_Init+0x134>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0308 	and.w	r3, r3, #8
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000932:	4b29      	ldr	r3, [pc, #164]	@ (80009d8 <MX_GPIO_Init+0x134>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a28      	ldr	r2, [pc, #160]	@ (80009d8 <MX_GPIO_Init+0x134>)
 8000938:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
 800093e:	4b26      	ldr	r3, [pc, #152]	@ (80009d8 <MX_GPIO_Init+0x134>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000950:	4822      	ldr	r0, [pc, #136]	@ (80009dc <MX_GPIO_Init+0x138>)
 8000952:	f002 f9fb 	bl	8002d4c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000956:	2200      	movs	r2, #0
 8000958:	2140      	movs	r1, #64	@ 0x40
 800095a:	4821      	ldr	r0, [pc, #132]	@ (80009e0 <MX_GPIO_Init+0x13c>)
 800095c:	f002 f9f6 	bl	8002d4c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000960:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000964:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000966:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800096a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	481b      	ldr	r0, [pc, #108]	@ (80009e4 <MX_GPIO_Init+0x140>)
 8000978:	f002 f83c 	bl	80029f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 800097c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000980:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4811      	ldr	r0, [pc, #68]	@ (80009dc <MX_GPIO_Init+0x138>)
 8000996:	f002 f82d 	bl	80029f4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800099a:	2340      	movs	r3, #64	@ 0x40
 800099c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	480b      	ldr	r0, [pc, #44]	@ (80009e0 <MX_GPIO_Init+0x13c>)
 80009b2:	f002 f81f 	bl	80029f4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009b6:	2380      	movs	r3, #128	@ 0x80
 80009b8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_GPIO_Init+0x13c>)
 80009ca:	f002 f813 	bl	80029f4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80009ce:	bf00      	nop
 80009d0:	3730      	adds	r7, #48	@ 0x30
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020400 	.word	0x40020400
 80009e0:	40021800 	.word	0x40021800
 80009e4:	40020800 	.word	0x40020800

080009e8 <StartMongooseTask>:
 * @brief  Function implementing the MongooseTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMongooseTask */
void StartMongooseTask(void const *argument) {
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b099      	sub	sp, #100	@ 0x64
 80009ec:	af04      	add	r7, sp, #16
 80009ee:	6078      	str	r0, [r7, #4]
	/* init code for LWIP */
	MX_LWIP_Init();
 80009f0:	f007 f9c4 	bl	8007d7c <MX_LWIP_Init>

	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 80009f4:	f01d f8a0 	bl	801db38 <MX_USB_DEVICE_Init>
	/* Infinite loop */

	/* USER CODE BEGIN 5 */
	// wait for LWIP to be on (probably should be changed..?)
	// osDelay(1000);
	while (netif_default == NULL || !netif_is_up(netif_default)
 80009f8:	e002      	b.n	8000a00 <StartMongooseTask+0x18>
			|| !ip4_addr_isany_val(*netif_ip4_addr(netif_default))
	// || netif_is_link_up(netif_list) == 0
	) {
		osDelay(100);
 80009fa:	2064      	movs	r0, #100	@ 0x64
 80009fc:	f00a f82c 	bl	800aa58 <osDelay>
	while (netif_default == NULL || !netif_is_up(netif_default)
 8000a00:	4b51      	ldr	r3, [pc, #324]	@ (8000b48 <StartMongooseTask+0x160>)
 8000a02:	681b      	ldr	r3, [r3, #0]
			|| !ip4_addr_isany_val(*netif_ip4_addr(netif_default))
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d0f8      	beq.n	80009fa <StartMongooseTask+0x12>
	while (netif_default == NULL || !netif_is_up(netif_default)
 8000a08:	4b4f      	ldr	r3, [pc, #316]	@ (8000b48 <StartMongooseTask+0x160>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d0f0      	beq.n	80009fa <StartMongooseTask+0x12>
			|| !ip4_addr_isany_val(*netif_ip4_addr(netif_default))
 8000a18:	4b4b      	ldr	r3, [pc, #300]	@ (8000b48 <StartMongooseTask+0x160>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1ea      	bne.n	80009fa <StartMongooseTask+0x12>
//	sprintf(buf, "IP acquired: %u.%u.%u.%u", ip4_addr1(&ip), ip4_addr2(&ip),
//			ip4_addr3(&ip), ip4_addr4(&ip));
//	LOG(buf);

	char buf[64];
	ip4_addr_t ip = *netif_ip4_addr(netif_default);
 8000a24:	4b48      	ldr	r3, [pc, #288]	@ (8000b48 <StartMongooseTask+0x160>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	60bb      	str	r3, [r7, #8]
	sprintf(buf, "IP acquired: %u.%u.%u.%u", ip4_addr1(&ip), ip4_addr2(&ip),
 8000a2e:	f107 0308 	add.w	r3, r7, #8
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f107 0308 	add.w	r3, r7, #8
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	461c      	mov	r4, r3
			ip4_addr3(&ip), ip4_addr4(&ip));
 8000a40:	f107 0308 	add.w	r3, r7, #8
 8000a44:	3302      	adds	r3, #2
 8000a46:	781b      	ldrb	r3, [r3, #0]
	sprintf(buf, "IP acquired: %u.%u.%u.%u", ip4_addr1(&ip), ip4_addr2(&ip),
 8000a48:	461a      	mov	r2, r3
			ip4_addr3(&ip), ip4_addr4(&ip));
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	3303      	adds	r3, #3
 8000a50:	781b      	ldrb	r3, [r3, #0]
	sprintf(buf, "IP acquired: %u.%u.%u.%u", ip4_addr1(&ip), ip4_addr2(&ip),
 8000a52:	f107 000c 	add.w	r0, r7, #12
 8000a56:	9301      	str	r3, [sp, #4]
 8000a58:	9200      	str	r2, [sp, #0]
 8000a5a:	4623      	mov	r3, r4
 8000a5c:	460a      	mov	r2, r1
 8000a5e:	493b      	ldr	r1, [pc, #236]	@ (8000b4c <StartMongooseTask+0x164>)
 8000a60:	f01e f82e 	bl	801eac0 <siprintf>
	LOG(buf);
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4839      	ldr	r0, [pc, #228]	@ (8000b50 <StartMongooseTask+0x168>)
 8000a6c:	f7ff fdf0 	bl	8000650 <usb_printf>

	extern struct dhcp_state_enum_t;

	struct dhcp *dhcp_client = netif_dhcp_data(netif_default);
 8000a70:	4b35      	ldr	r3, [pc, #212]	@ (8000b48 <StartMongooseTask+0x160>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
	while (dhcp_client == NULL || dhcp_client->state != 10) {
 8000a78:	e002      	b.n	8000a80 <StartMongooseTask+0x98>
		osDelay(100);
 8000a7a:	2064      	movs	r0, #100	@ 0x64
 8000a7c:	f009 ffec 	bl	800aa58 <osDelay>
	while (dhcp_client == NULL || dhcp_client->state != 10) {
 8000a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d0f9      	beq.n	8000a7a <StartMongooseTask+0x92>
 8000a86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a88:	795b      	ldrb	r3, [r3, #5]
 8000a8a:	2b0a      	cmp	r3, #10
 8000a8c:	d1f5      	bne.n	8000a7a <StartMongooseTask+0x92>
		// safe to read IP
	}

	LOG("OUTSIDE");
 8000a8e:	4931      	ldr	r1, [pc, #196]	@ (8000b54 <StartMongooseTask+0x16c>)
 8000a90:	482f      	ldr	r0, [pc, #188]	@ (8000b50 <StartMongooseTask+0x168>)
 8000a92:	f7ff fddd 	bl	8000650 <usb_printf>
	printf("outside 2\r\n");
 8000a96:	4830      	ldr	r0, [pc, #192]	@ (8000b58 <StartMongooseTask+0x170>)
 8000a98:	f01e f80a 	bl	801eab0 <puts>
//    sprintf(buf, "IP acquired: %u.%u.%u.%u", ip4_addr1(&ip), ip4_addr2(&ip),
//                    ip4_addr3(&ip), ip4_addr4(&ip));
//    LOG(buf);

	err_t err;
	ip = *netif_ip4_addr(netif_default);
 8000a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b48 <StartMongooseTask+0x160>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60bb      	str	r3, [r7, #8]
	sprintf(buf, "IP acquired: %u.%u.%u.%u", ip4_addr1(&ip), ip4_addr2(&ip),
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	f107 0308 	add.w	r3, r7, #8
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	461c      	mov	r4, r3
			ip4_addr3(&ip), ip4_addr4(&ip));
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	3302      	adds	r3, #2
 8000abe:	781b      	ldrb	r3, [r3, #0]
	sprintf(buf, "IP acquired: %u.%u.%u.%u", ip4_addr1(&ip), ip4_addr2(&ip),
 8000ac0:	461a      	mov	r2, r3
			ip4_addr3(&ip), ip4_addr4(&ip));
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	3303      	adds	r3, #3
 8000ac8:	781b      	ldrb	r3, [r3, #0]
	sprintf(buf, "IP acquired: %u.%u.%u.%u", ip4_addr1(&ip), ip4_addr2(&ip),
 8000aca:	f107 000c 	add.w	r0, r7, #12
 8000ace:	9301      	str	r3, [sp, #4]
 8000ad0:	9200      	str	r2, [sp, #0]
 8000ad2:	4623      	mov	r3, r4
 8000ad4:	460a      	mov	r2, r1
 8000ad6:	491d      	ldr	r1, [pc, #116]	@ (8000b4c <StartMongooseTask+0x164>)
 8000ad8:	f01d fff2 	bl	801eac0 <siprintf>
	LOG(buf);
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	481b      	ldr	r0, [pc, #108]	@ (8000b50 <StartMongooseTask+0x168>)
 8000ae4:	f7ff fdb4 	bl	8000650 <usb_printf>

	LOG("mdns_resp_init starting");
 8000ae8:	491c      	ldr	r1, [pc, #112]	@ (8000b5c <StartMongooseTask+0x174>)
 8000aea:	4819      	ldr	r0, [pc, #100]	@ (8000b50 <StartMongooseTask+0x168>)
 8000aec:	f7ff fdb0 	bl	8000650 <usb_printf>
	mdns_resp_init();
 8000af0:	f00f ffb4 	bl	8010a5c <mdns_resp_init>
	LOG("mdns_resp_init finished");
 8000af4:	491a      	ldr	r1, [pc, #104]	@ (8000b60 <StartMongooseTask+0x178>)
 8000af6:	4816      	ldr	r0, [pc, #88]	@ (8000b50 <StartMongooseTask+0x168>)
 8000af8:	f7ff fdaa 	bl	8000650 <usb_printf>

	mdns_resp_add_netif(netif_default, "22222222", 3600);
 8000afc:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <StartMongooseTask+0x160>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8000b04:	4917      	ldr	r1, [pc, #92]	@ (8000b64 <StartMongooseTask+0x17c>)
 8000b06:	4618      	mov	r0, r3
 8000b08:	f00f fda6 	bl	8010658 <mdns_resp_add_netif>


	mdns_resp_add_service(netif_default, "22222222", "_speakerlink",
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <StartMongooseTask+0x160>)
 8000b0e:	6818      	ldr	r0, [r3, #0]
 8000b10:	2300      	movs	r3, #0
 8000b12:	9303      	str	r3, [sp, #12]
 8000b14:	2300      	movs	r3, #0
 8000b16:	9302      	str	r3, [sp, #8]
 8000b18:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8000b1c:	9301      	str	r3, [sp, #4]
 8000b1e:	2350      	movs	r3, #80	@ 0x50
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	2301      	movs	r3, #1
 8000b24:	4a10      	ldr	r2, [pc, #64]	@ (8000b68 <StartMongooseTask+0x180>)
 8000b26:	490f      	ldr	r1, [pc, #60]	@ (8000b64 <StartMongooseTask+0x17c>)
 8000b28:	f00f fe32 	bl	8010790 <mdns_resp_add_service>



	// osDelay(5000);

	mdns_resp_announce(netif_default);  // 🔹 actively broadcast the service
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <StartMongooseTask+0x160>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f00f ff1f 	bl	8010974 <mdns_resp_announce>
	LOG("mdns_resp_announce finished");
 8000b36:	490d      	ldr	r1, [pc, #52]	@ (8000b6c <StartMongooseTask+0x184>)
 8000b38:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <StartMongooseTask+0x168>)
 8000b3a:	f7ff fd89 	bl	8000650 <usb_printf>
//  }

	// Main event loop
	for (;;) {
//		mg_mgr_poll(&mgr, 10);   // 10 ms polling
		osDelay(1);              // Yield to other FreeRTOS tasks
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f009 ff8a 	bl	800aa58 <osDelay>
 8000b44:	e7fb      	b.n	8000b3e <StartMongooseTask+0x156>
 8000b46:	bf00      	nop
 8000b48:	20004794 	.word	0x20004794
 8000b4c:	0801fc4c 	.word	0x0801fc4c
 8000b50:	0801fc68 	.word	0x0801fc68
 8000b54:	0801fc70 	.word	0x0801fc70
 8000b58:	0801fc78 	.word	0x0801fc78
 8000b5c:	0801fc84 	.word	0x0801fc84
 8000b60:	0801fc9c 	.word	0x0801fc9c
 8000b64:	0801fcb4 	.word	0x0801fcb4
 8000b68:	0801fcc0 	.word	0x0801fcc0
 8000b6c:	0801fcd0 	.word	0x0801fcd0

08000b70 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a04      	ldr	r2, [pc, #16]	@ (8000b90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d101      	bne.n	8000b86 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000b82:	f000 fb8f 	bl	80012a4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40001000 	.word	0x40001000

08000b94 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <Error_Handler+0x8>

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <HAL_MspInit+0x4c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000baa:	4a10      	ldr	r2, [pc, #64]	@ (8000bec <HAL_MspInit+0x4c>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <HAL_MspInit+0x4c>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <HAL_MspInit+0x4c>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <HAL_MspInit+0x4c>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bca:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <HAL_MspInit+0x4c>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	210f      	movs	r1, #15
 8000bda:	f06f 0001 	mvn.w	r0, #1
 8000bde:	f000 fc69 	bl	80014b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800

08000bf0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0a6      	sub	sp, #152	@ 0x98
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf8:	f107 0308 	add.w	r3, r7, #8
 8000bfc:	2290      	movs	r2, #144	@ 0x90
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f01e f8bd 	bl	801ed80 <memset>
  if(hrtc->Instance==RTC)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c44 <HAL_RTC_MspInit+0x54>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d114      	bne.n	8000c3a <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c10:	2320      	movs	r3, #32
 8000c12:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c18:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f004 f89e 	bl	8004d60 <HAL_RCCEx_PeriphCLKConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000c2a:	f7ff ffb3 	bl	8000b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <HAL_RTC_MspInit+0x58>)
 8000c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000c32:	4a05      	ldr	r2, [pc, #20]	@ (8000c48 <HAL_RTC_MspInit+0x58>)
 8000c34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c38:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000c3a:	bf00      	nop
 8000c3c:	3798      	adds	r7, #152	@ 0x98
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40002800 	.word	0x40002800
 8000c48:	40023800 	.word	0x40023800

08000c4c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b0ae      	sub	sp, #184	@ 0xb8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2290      	movs	r2, #144	@ 0x90
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f01e f887 	bl	801ed80 <memset>
  if(huart->Instance==USART3)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a22      	ldr	r2, [pc, #136]	@ (8000d00 <HAL_UART_MspInit+0xb4>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d13c      	bne.n	8000cf6 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c80:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f004 f868 	bl	8004d60 <HAL_RCCEx_PeriphCLKConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c96:	f7ff ff7d 	bl	8000b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <HAL_UART_MspInit+0xb8>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9e:	4a19      	ldr	r2, [pc, #100]	@ (8000d04 <HAL_UART_MspInit+0xb8>)
 8000ca0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca6:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <HAL_UART_MspInit+0xb8>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb2:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <HAL_UART_MspInit+0xb8>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a13      	ldr	r2, [pc, #76]	@ (8000d04 <HAL_UART_MspInit+0xb8>)
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <HAL_UART_MspInit+0xb8>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	@ (8000d08 <HAL_UART_MspInit+0xbc>)
 8000cf2:	f001 fe7f 	bl	80029f4 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000cf6:	bf00      	nop
 8000cf8:	37b8      	adds	r7, #184	@ 0xb8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40004800 	.word	0x40004800
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020c00 	.word	0x40020c00

08000d0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08e      	sub	sp, #56	@ 0x38
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d1c:	4b33      	ldr	r3, [pc, #204]	@ (8000dec <HAL_InitTick+0xe0>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d20:	4a32      	ldr	r2, [pc, #200]	@ (8000dec <HAL_InitTick+0xe0>)
 8000d22:	f043 0310 	orr.w	r3, r3, #16
 8000d26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d28:	4b30      	ldr	r3, [pc, #192]	@ (8000dec <HAL_InitTick+0xe0>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2c:	f003 0310 	and.w	r3, r3, #16
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d34:	f107 0210 	add.w	r2, r7, #16
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f003 ffdc 	bl	8004cfc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d44:	6a3b      	ldr	r3, [r7, #32]
 8000d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d103      	bne.n	8000d56 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d4e:	f003 ffad 	bl	8004cac <HAL_RCC_GetPCLK1Freq>
 8000d52:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d54:	e004      	b.n	8000d60 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d56:	f003 ffa9 	bl	8004cac <HAL_RCC_GetPCLK1Freq>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d62:	4a23      	ldr	r2, [pc, #140]	@ (8000df0 <HAL_InitTick+0xe4>)
 8000d64:	fba2 2303 	umull	r2, r3, r2, r3
 8000d68:	0c9b      	lsrs	r3, r3, #18
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <HAL_InitTick+0xe8>)
 8000d70:	4a21      	ldr	r2, [pc, #132]	@ (8000df8 <HAL_InitTick+0xec>)
 8000d72:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d74:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <HAL_InitTick+0xe8>)
 8000d76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d7a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000df4 <HAL_InitTick+0xe8>)
 8000d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d80:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d82:	4b1c      	ldr	r3, [pc, #112]	@ (8000df4 <HAL_InitTick+0xe8>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d88:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <HAL_InitTick+0xe8>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <HAL_InitTick+0xe8>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d94:	4817      	ldr	r0, [pc, #92]	@ (8000df4 <HAL_InitTick+0xe8>)
 8000d96:	f004 fd0f 	bl	80057b8 <HAL_TIM_Base_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000da0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d11b      	bne.n	8000de0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000da8:	4812      	ldr	r0, [pc, #72]	@ (8000df4 <HAL_InitTick+0xe8>)
 8000daa:	f004 fd67 	bl	800587c <HAL_TIM_Base_Start_IT>
 8000dae:	4603      	mov	r3, r0
 8000db0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000db4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d111      	bne.n	8000de0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dbc:	2036      	movs	r0, #54	@ 0x36
 8000dbe:	f000 fb95 	bl	80014ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d808      	bhi.n	8000dda <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	2036      	movs	r0, #54	@ 0x36
 8000dce:	f000 fb71 	bl	80014b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <HAL_InitTick+0xf0>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	e002      	b.n	8000de0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000de0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3738      	adds	r7, #56	@ 0x38
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800
 8000df0:	431bde83 	.word	0x431bde83
 8000df4:	20000840 	.word	0x20000840
 8000df8:	40001000 	.word	0x40001000
 8000dfc:	20000004 	.word	0x20000004

08000e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <NMI_Handler+0x4>

08000e08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <MemManage_Handler+0x4>

08000e18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <BusFault_Handler+0x4>

08000e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <UsageFault_Handler+0x4>

08000e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <TIM6_DAC_IRQHandler+0x10>)
 8000e3e:	f004 fd95 	bl	800596c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000840 	.word	0x20000840

08000e4c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */
//////////////
	  // ETH_IRQHandler_Mongoose();

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e50:	4802      	ldr	r0, [pc, #8]	@ (8000e5c <ETH_IRQHandler+0x10>)
 8000e52:	f000 fee7 	bl	8001c24 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */
//////////////
  /* USER CODE END ETH_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200008f4 	.word	0x200008f4

08000e60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e64:	4802      	ldr	r0, [pc, #8]	@ (8000e70 <OTG_FS_IRQHandler+0x10>)
 8000e66:	f002 f8c2 	bl	8002fee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20005e1c 	.word	0x20005e1c

08000e74 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
	return 1;
 8000e78:	2301      	movs	r3, #1
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <_kill>:

int _kill(int pid, int sig) {
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8000e8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <_kill+0x20>)
 8000e90:	2216      	movs	r2, #22
 8000e92:	601a      	str	r2, [r3, #0]
	return -1;
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	20006440 	.word	0x20006440

08000ea8 <_exit>:

void _exit(int status) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ffe5 	bl	8000e84 <_kill>
	while (1) {
 8000eba:	bf00      	nop
 8000ebc:	e7fd      	b.n	8000eba <_exit+0x12>

08000ebe <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	60f8      	str	r0, [r7, #12]
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	e00a      	b.n	8000ee6 <_read+0x28>
		*ptr++ = __io_getchar();
 8000ed0:	f3af 8000 	nop.w
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	1c5a      	adds	r2, r3, #1
 8000eda:	60ba      	str	r2, [r7, #8]
 8000edc:	b2ca      	uxtb	r2, r1
 8000ede:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	697a      	ldr	r2, [r7, #20]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	dbf0      	blt.n	8000ed0 <_read+0x12>
	}

	return len;
 8000eee:	687b      	ldr	r3, [r7, #4]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
//  }
//  return len;

	uint8_t result;
	do {
		result = CDC_Transmit_FS((uint8_t*) ptr, len);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	4619      	mov	r1, r3
 8000f0a:	68b8      	ldr	r0, [r7, #8]
 8000f0c:	f01c fed2 	bl	801dcb4 <CDC_Transmit_FS>
 8000f10:	4603      	mov	r3, r0
 8000f12:	75fb      	strb	r3, [r7, #23]
		if (result == USBD_BUSY) {
 8000f14:	7dfb      	ldrb	r3, [r7, #23]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d102      	bne.n	8000f20 <_write+0x28>
			osDelay(1);
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f009 fd9c 	bl	800aa58 <osDelay>
		}
	} while (result == USBD_BUSY);
 8000f20:	7dfb      	ldrb	r3, [r7, #23]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d0ee      	beq.n	8000f04 <_write+0xc>

	return len;
 8000f26:	687b      	ldr	r3, [r7, #4]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_close>:

int _close(int file) {
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <_fstat>:

int _fstat(int file, struct stat *st) {
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f58:	605a      	str	r2, [r3, #4]
	return 0;
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <_isatty>:

int _isatty(int file) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8000f70:	2301      	movs	r3, #1
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8000f7e:	b480      	push	{r7}
 8000f80:	b085      	sub	sp, #20
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	60f8      	str	r0, [r7, #12]
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b087      	sub	sp, #28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa0:	4a14      	ldr	r2, [pc, #80]	@ (8000ff4 <_sbrk+0x5c>)
 8000fa2:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <_sbrk+0x60>)
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fac:	4b13      	ldr	r3, [pc, #76]	@ (8000ffc <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d102      	bne.n	8000fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb4:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <_sbrk+0x64>)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	@ (8001000 <_sbrk+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fba:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d205      	bcs.n	8000fd4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <_sbrk+0x6c>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fd2:	e009      	b.n	8000fe8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd4:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fda:	4b08      	ldr	r3, [pc, #32]	@ (8000ffc <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4a06      	ldr	r2, [pc, #24]	@ (8000ffc <_sbrk+0x64>)
 8000fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	371c      	adds	r7, #28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	20080000 	.word	0x20080000
 8000ff8:	00000400 	.word	0x00000400
 8000ffc:	2000088c 	.word	0x2000088c
 8001000:	20006448 	.word	0x20006448
 8001004:	20006440 	.word	0x20006440

08001008 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <SystemInit+0x20>)
 800100e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001012:	4a05      	ldr	r2, [pc, #20]	@ (8001028 <SystemInit+0x20>)
 8001014:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001018:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800102c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001064 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001030:	f7ff ffea 	bl	8001008 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001034:	480c      	ldr	r0, [pc, #48]	@ (8001068 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001036:	490d      	ldr	r1, [pc, #52]	@ (800106c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001038:	4a0d      	ldr	r2, [pc, #52]	@ (8001070 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800103c:	e002      	b.n	8001044 <LoopCopyDataInit>

0800103e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001042:	3304      	adds	r3, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001048:	d3f9      	bcc.n	800103e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104a:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800104c:	4c0a      	ldr	r4, [pc, #40]	@ (8001078 <LoopFillZerobss+0x22>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001050:	e001      	b.n	8001056 <LoopFillZerobss>

08001052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001054:	3204      	adds	r2, #4

08001056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001058:	d3fb      	bcc.n	8001052 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800105a:	f01d ff4d 	bl	801eef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105e:	f7ff fb31 	bl	80006c4 <main>
  bx  lr    
 8001062:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001064:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800106c:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8001070:	080237b0 	.word	0x080237b0
  ldr r2, =_sbss
 8001074:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8001078:	20006448 	.word	0x20006448

0800107c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800107c:	e7fe      	b.n	800107c <ADC_IRQHandler>

0800107e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00b      	beq.n	80010a6 <LAN8742_RegisterBusIO+0x28>
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d007      	beq.n	80010a6 <LAN8742_RegisterBusIO+0x28>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <LAN8742_RegisterBusIO+0x28>
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d102      	bne.n	80010ac <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010aa:	e014      	b.n	80010d6 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	68da      	ldr	r2, [r3, #12]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d139      	bne.n	8001172 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d002      	beq.n	800110c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2220      	movs	r2, #32
 8001110:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	e01c      	b.n	8001152 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	f107 020c 	add.w	r2, r7, #12
 8001120:	2112      	movs	r1, #18
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	4798      	blx	r3
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	da03      	bge.n	8001134 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 800112c:	f06f 0304 	mvn.w	r3, #4
 8001130:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001132:	e00b      	b.n	800114c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	f003 031f 	and.w	r3, r3, #31
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	429a      	cmp	r2, r3
 800113e:	d105      	bne.n	800114c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
         break;
 800114a:	e005      	b.n	8001158 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	3301      	adds	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2b1f      	cmp	r3, #31
 8001156:	d9df      	bls.n	8001118 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b1f      	cmp	r3, #31
 800115e:	d902      	bls.n	8001166 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001160:	f06f 0302 	mvn.w	r3, #2
 8001164:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d102      	bne.n	8001172 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001172:	693b      	ldr	r3, [r7, #16]
 }
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	6810      	ldr	r0, [r2, #0]
 8001190:	f107 020c 	add.w	r2, r7, #12
 8001194:	2101      	movs	r1, #1
 8001196:	4798      	blx	r3
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	da02      	bge.n	80011a4 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800119e:	f06f 0304 	mvn.w	r3, #4
 80011a2:	e06e      	b.n	8001282 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	6810      	ldr	r0, [r2, #0]
 80011ac:	f107 020c 	add.w	r2, r7, #12
 80011b0:	2101      	movs	r1, #1
 80011b2:	4798      	blx	r3
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	da02      	bge.n	80011c0 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80011ba:	f06f 0304 	mvn.w	r3, #4
 80011be:	e060      	b.n	8001282 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e059      	b.n	8001282 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	6810      	ldr	r0, [r2, #0]
 80011d6:	f107 020c 	add.w	r2, r7, #12
 80011da:	2100      	movs	r1, #0
 80011dc:	4798      	blx	r3
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	da02      	bge.n	80011ea <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80011e4:	f06f 0304 	mvn.w	r3, #4
 80011e8:	e04b      	b.n	8001282 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d11b      	bne.n	800122c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d006      	beq.n	800120c <LAN8742_GetLinkState+0x90>
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001208:	2302      	movs	r3, #2
 800120a:	e03a      	b.n	8001282 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001216:	2303      	movs	r3, #3
 8001218:	e033      	b.n	8001282 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001224:	2304      	movs	r3, #4
 8001226:	e02c      	b.n	8001282 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001228:	2305      	movs	r3, #5
 800122a:	e02a      	b.n	8001282 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	695b      	ldr	r3, [r3, #20]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6810      	ldr	r0, [r2, #0]
 8001234:	f107 020c 	add.w	r2, r7, #12
 8001238:	211f      	movs	r1, #31
 800123a:	4798      	blx	r3
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	da02      	bge.n	8001248 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001242:	f06f 0304 	mvn.w	r3, #4
 8001246:	e01c      	b.n	8001282 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001252:	2306      	movs	r3, #6
 8001254:	e015      	b.n	8001282 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f003 031c 	and.w	r3, r3, #28
 800125c:	2b18      	cmp	r3, #24
 800125e:	d101      	bne.n	8001264 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001260:	2302      	movs	r3, #2
 8001262:	e00e      	b.n	8001282 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f003 031c 	and.w	r3, r3, #28
 800126a:	2b08      	cmp	r3, #8
 800126c:	d101      	bne.n	8001272 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800126e:	2303      	movs	r3, #3
 8001270:	e007      	b.n	8001282 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f003 031c 	and.w	r3, r3, #28
 8001278:	2b14      	cmp	r3, #20
 800127a:	d101      	bne.n	8001280 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800127c:	2304      	movs	r3, #4
 800127e:	e000      	b.n	8001282 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001280:	2305      	movs	r3, #5
    }
  }
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800128e:	2003      	movs	r0, #3
 8001290:	f000 f905 	bl	800149e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001294:	200f      	movs	r0, #15
 8001296:	f7ff fd39 	bl	8000d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800129a:	f7ff fc81 	bl	8000ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <HAL_IncTick+0x20>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <HAL_IncTick+0x24>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <HAL_IncTick+0x24>)
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	20000008 	.word	0x20000008
 80012c8:	20000890 	.word	0x20000890

080012cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b03      	ldr	r3, [pc, #12]	@ (80012e0 <HAL_GetTick+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000890 	.word	0x20000890

080012e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012ec:	f7ff ffee 	bl	80012cc <HAL_GetTick>
 80012f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80012fc:	d005      	beq.n	800130a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001328 <HAL_Delay+0x44>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4413      	add	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800130a:	bf00      	nop
 800130c:	f7ff ffde 	bl	80012cc <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	429a      	cmp	r2, r3
 800131a:	d8f7      	bhi.n	800130c <HAL_Delay+0x28>
  {
  }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000008 	.word	0x20000008

0800132c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8001330:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <HAL_GetREVID+0x14>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	0c1b      	lsrs	r3, r3, #16
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e0042000 	.word	0xe0042000

08001344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <__NVIC_SetPriorityGrouping+0x40>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 800136e:	4313      	orrs	r3, r2
 8001370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001372:	4a04      	ldr	r2, [pc, #16]	@ (8001384 <__NVIC_SetPriorityGrouping+0x40>)
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	60d3      	str	r3, [r2, #12]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00
 8001388:	05fa0000 	.word	0x05fa0000

0800138c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db0b      	blt.n	80013d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	4907      	ldr	r1, [pc, #28]	@ (80013e0 <__NVIC_EnableIRQ+0x38>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	2001      	movs	r0, #1
 80013ca:	fa00 f202 	lsl.w	r2, r0, r2
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e100 	.word	0xe000e100

080013e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db0a      	blt.n	800140e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	490c      	ldr	r1, [pc, #48]	@ (8001430 <__NVIC_SetPriority+0x4c>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	0112      	lsls	r2, r2, #4
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	440b      	add	r3, r1
 8001408:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800140c:	e00a      	b.n	8001424 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4908      	ldr	r1, [pc, #32]	@ (8001434 <__NVIC_SetPriority+0x50>)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	3b04      	subs	r3, #4
 800141c:	0112      	lsls	r2, r2, #4
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	440b      	add	r3, r1
 8001422:	761a      	strb	r2, [r3, #24]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000e100 	.word	0xe000e100
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	@ 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f1c3 0307 	rsb	r3, r3, #7
 8001452:	2b04      	cmp	r3, #4
 8001454:	bf28      	it	cs
 8001456:	2304      	movcs	r3, #4
 8001458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3304      	adds	r3, #4
 800145e:	2b06      	cmp	r3, #6
 8001460:	d902      	bls.n	8001468 <NVIC_EncodePriority+0x30>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3b03      	subs	r3, #3
 8001466:	e000      	b.n	800146a <NVIC_EncodePriority+0x32>
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	401a      	ands	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001480:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	43d9      	mvns	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	4313      	orrs	r3, r2
         );
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	@ 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ff4c 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
 80014c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c6:	f7ff ff61 	bl	800138c <__NVIC_GetPriorityGrouping>
 80014ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	68b9      	ldr	r1, [r7, #8]
 80014d0:	6978      	ldr	r0, [r7, #20]
 80014d2:	f7ff ffb1 	bl	8001438 <NVIC_EncodePriority>
 80014d6:	4602      	mov	r2, r0
 80014d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff ff80 	bl	80013e4 <__NVIC_SetPriority>
}
 80014e4:	bf00      	nop
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff54 	bl	80013a8 <__NVIC_EnableIRQ>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e086      	b.n	8001628 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001520:	2b00      	cmp	r3, #0
 8001522:	d106      	bne.n	8001532 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2220      	movs	r2, #32
 8001528:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f006 ff93 	bl	8008458 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	4b3f      	ldr	r3, [pc, #252]	@ (8001630 <HAL_ETH_Init+0x128>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001536:	4a3e      	ldr	r2, [pc, #248]	@ (8001630 <HAL_ETH_Init+0x128>)
 8001538:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800153c:	6453      	str	r3, [r2, #68]	@ 0x44
 800153e:	4b3c      	ldr	r3, [pc, #240]	@ (8001630 <HAL_ETH_Init+0x128>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001542:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800154a:	4b3a      	ldr	r3, [pc, #232]	@ (8001634 <HAL_ETH_Init+0x12c>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	4a39      	ldr	r2, [pc, #228]	@ (8001634 <HAL_ETH_Init+0x12c>)
 8001550:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001554:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001556:	4b37      	ldr	r3, [pc, #220]	@ (8001634 <HAL_ETH_Init+0x12c>)
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	4935      	ldr	r1, [pc, #212]	@ (8001634 <HAL_ETH_Init+0x12c>)
 8001560:	4313      	orrs	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001564:	4b33      	ldr	r3, [pc, #204]	@ (8001634 <HAL_ETH_Init+0x12c>)
 8001566:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800157e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001580:	f7ff fea4 	bl	80012cc <HAL_GetTick>
 8001584:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001586:	e011      	b.n	80015ac <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001588:	f7ff fea0 	bl	80012cc <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001596:	d909      	bls.n	80015ac <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2204      	movs	r2, #4
 800159c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	22e0      	movs	r2, #224	@ 0xe0
 80015a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e03d      	b.n	8001628 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1e4      	bne.n	8001588 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 ff5c 	bl	800247c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f001 f807 	bl	80025d8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f001 f85d 	bl	800268a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	461a      	mov	r2, r3
 80015d6:	2100      	movs	r1, #0
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 ffc5 	bl	8002568 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80015ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <HAL_ETH_Init+0x130>)
 80015fc:	430b      	orrs	r3, r1
 80015fe:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001612:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2210      	movs	r2, #16
 8001622:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40023800 	.word	0x40023800
 8001634:	40013800 	.word	0x40013800
 8001638:	00020060 	.word	0x00020060

0800163c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800164a:	2b10      	cmp	r3, #16
 800164c:	d15f      	bne.n	800170e <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2220      	movs	r2, #32
 8001652:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2201      	movs	r2, #1
 800165a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2204      	movs	r2, #4
 8001660:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 f9f6 	bl	8001a54 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001670:	2001      	movs	r0, #1
 8001672:	f7ff fe37 	bl	80012e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001690:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001694:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016ac:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 fd80 	bl	80021b4 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0208 	orr.w	r2, r2, #8
 80016c2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016cc:	2001      	movs	r0, #1
 80016ce:	f7ff fe09 	bl	80012e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0204 	orr.w	r2, r2, #4
 80016e8:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016f2:	69d9      	ldr	r1, [r3, #28]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b07      	ldr	r3, [pc, #28]	@ (8001718 <HAL_ETH_Start_IT+0xdc>)
 80016fa:	430b      	orrs	r3, r1
 80016fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001700:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2240      	movs	r2, #64	@ 0x40
 8001706:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e000      	b.n	8001710 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
  }
}
 8001710:	4618      	mov	r0, r3
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	0001a0c1 	.word	0x0001a0c1

0800171c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800172a:	2b40      	cmp	r3, #64	@ 0x40
 800172c:	d16e      	bne.n	800180c <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2220      	movs	r2, #32
 8001732:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800173e:	69d9      	ldr	r1, [r3, #28]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b34      	ldr	r3, [pc, #208]	@ (8001818 <HAL_ETH_Stop_IT+0xfc>)
 8001746:	400b      	ands	r3, r1
 8001748:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800174c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001760:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001764:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	f023 0302 	bic.w	r3, r3, #2
 8001778:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800177c:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0204 	bic.w	r2, r2, #4
 800178c:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001796:	2001      	movs	r0, #1
 8001798:	f7ff fda4 	bl	80012e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 fd05 	bl	80021b4 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0208 	bic.w	r2, r2, #8
 80017b8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017c2:	2001      	movs	r0, #1
 80017c4:	f7ff fd8e 	bl	80012e4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	e00e      	b.n	80017f4 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	3212      	adds	r2, #18
 80017dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e0:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	3301      	adds	r3, #1
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d9ed      	bls.n	80017d6 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2210      	movs	r2, #16
 8001804:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	e000      	b.n	800180e <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
  }
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	fffe5f3e 	.word	0xfffe5f3e

0800181c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d109      	bne.n	8001840 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001832:	f043 0201 	orr.w	r2, r3, #1
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e045      	b.n	80018cc <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001846:	2b40      	cmp	r3, #64	@ 0x40
 8001848:	d13f      	bne.n	80018ca <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001852:	2201      	movs	r2, #1
 8001854:	6839      	ldr	r1, [r7, #0]
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 ff86 	bl	8002768 <ETH_Prepare_Tx_Descriptors>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001868:	f043 0202 	orr.w	r2, r3, #2
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e02a      	b.n	80018cc <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001876:	f3bf 8f4f 	dsb	sy
}
 800187a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	629a      	str	r2, [r3, #40]	@ 0x28
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188a:	2b03      	cmp	r3, #3
 800188c:	d904      	bls.n	8001898 <HAL_ETH_Transmit_IT+0x7c>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001892:	1f1a      	subs	r2, r3, #4
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00d      	beq.n	80018c6 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018b2:	461a      	mov	r2, r3
 80018b4:	2304      	movs	r3, #4
 80018b6:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018c0:	461a      	mov	r2, r3
 80018c2:	2300      	movs	r3, #0
 80018c4:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
  }
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d109      	bne.n	8001900 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018f2:	f043 0201 	orr.w	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0a4      	b.n	8001a4a <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001906:	2b40      	cmp	r3, #64	@ 0x40
 8001908:	d001      	beq.n	800190e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e09d      	b.n	8001a4a <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001912:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	3212      	adds	r2, #18
 800191a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800191e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001924:	f1c3 0304 	rsb	r3, r3, #4
 8001928:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800192a:	e066      	b.n	80019fa <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001934:	2b00      	cmp	r3, #0
 8001936:	d007      	beq.n	8001948 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	69da      	ldr	r2, [r3, #28]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	699a      	ldr	r2, [r3, #24]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001950:	2b00      	cmp	r3, #0
 8001952:	d103      	bne.n	800195c <HAL_ETH_ReadData+0x88>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001958:	2b00      	cmp	r3, #0
 800195a:	d03c      	beq.n	80019d6 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001964:	2b00      	cmp	r3, #0
 8001966:	d005      	beq.n	8001974 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	0c1b      	lsrs	r3, r3, #16
 800197a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800197e:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001994:	2301      	movs	r3, #1
 8001996:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80019b0:	461a      	mov	r2, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	f006 ff1b 	bl	80087f0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	441a      	add	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	2200      	movs	r2, #0
 80019d4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3301      	adds	r3, #1
 80019da:	61fb      	str	r3, [r7, #28]
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d902      	bls.n	80019e8 <HAL_ETH_ReadData+0x114>
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3b04      	subs	r3, #4
 80019e6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	3212      	adds	r2, #18
 80019ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3301      	adds	r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	db06      	blt.n	8001a10 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d202      	bcs.n	8001a10 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8001a0a:	7cfb      	ldrb	r3, [r7, #19]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d08d      	beq.n	800192c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	441a      	add	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f815 	bl	8001a54 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69fa      	ldr	r2, [r7, #28]
 8001a2e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001a30:	7cfb      	ldrb	r3, [r7, #19]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d108      	bne.n	8001a48 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	e000      	b.n	8001a4a <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3720      	adds	r7, #32
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001a60:	2301      	movs	r3, #1
 8001a62:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001a68:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69fa      	ldr	r2, [r7, #28]
 8001a6e:	3212      	adds	r2, #18
 8001a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a74:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a7a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001a7c:	e042      	b.n	8001b04 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d112      	bne.n	8001aac <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001a86:	f107 0308 	add.w	r3, r7, #8
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f006 fe80 	bl	8008790 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d102      	bne.n	8001a9c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	74fb      	strb	r3, [r7, #19]
 8001a9a:	e007      	b.n	8001aac <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001aac:	7cfb      	ldrb	r3, [r7, #19]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d028      	beq.n	8001b04 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d106      	bne.n	8001ac8 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695a      	ldr	r2, [r3, #20]
 8001abe:	4b26      	ldr	r3, [pc, #152]	@ (8001b58 <ETH_UpdateDescriptor+0x104>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	6053      	str	r3, [r2, #4]
 8001ac6:	e005      	b.n	8001ad4 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	695b      	ldr	r3, [r3, #20]
 8001acc:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	61fb      	str	r3, [r7, #28]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	2b03      	cmp	r3, #3
 8001aea:	d902      	bls.n	8001af2 <ETH_UpdateDescriptor+0x9e>
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	3b04      	subs	r3, #4
 8001af0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69fa      	ldr	r2, [r7, #28]
 8001af6:	3212      	adds	r2, #18
 8001af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001afc:	617b      	str	r3, [r7, #20]
      desccount--;
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <ETH_UpdateDescriptor+0xbc>
 8001b0a:	7cfb      	ldrb	r3, [r7, #19]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1b6      	bne.n	8001a7e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d01a      	beq.n	8001b50 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3303      	adds	r3, #3
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b24:	f3bf 8f5f 	dmb	sy
}
 8001b28:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6919      	ldr	r1, [r3, #16]
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	18ca      	adds	r2, r1, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b42:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001b50:	bf00      	nop
 8001b52:	3720      	adds	r7, #32
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	80004000 	.word	0x80004000

08001b5c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3318      	adds	r3, #24
 8001b68:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b6e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b74:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001b76:	2301      	movs	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001b7a:	e047      	b.n	8001c0c <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	3304      	adds	r3, #4
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10a      	bne.n	8001bac <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d902      	bls.n	8001ba8 <HAL_ETH_ReleaseTxPacket+0x4c>
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	3b04      	subs	r3, #4
 8001ba6:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001bac:	7bbb      	ldrb	r3, [r7, #14]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d02c      	beq.n	8001c0c <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68d9      	ldr	r1, [r3, #12]
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	440b      	add	r3, r1
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	db1f      	blt.n	8001c08 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f006 fe4d 	bl	8008874 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	3304      	adds	r3, #4
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	2200      	movs	r2, #0
 8001be6:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	3301      	adds	r3, #1
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d902      	bls.n	8001bfa <HAL_ETH_ReleaseTxPacket+0x9e>
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	3b04      	subs	r3, #4
 8001bf8:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c06:	e001      	b.n	8001c0c <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <HAL_ETH_ReleaseTxPacket+0xbc>
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1b1      	bne.n	8001b7c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c32:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8001c4c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d7c <HAL_ETH_IRQHandler+0x158>)
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d00e      	beq.n	8001c7a <HAL_ETH_IRQHandler+0x56>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d009      	beq.n	8001c7a <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b43      	ldr	r3, [pc, #268]	@ (8001d80 <HAL_ETH_IRQHandler+0x15c>)
 8001c72:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f006 f903 	bl	8007e80 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00f      	beq.n	8001ca4 <HAL_ETH_IRQHandler+0x80>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00a      	beq.n	8001ca4 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c96:	461a      	mov	r2, r3
 8001c98:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001c9c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f006 f8fe 	bl	8007ea0 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d042      	beq.n	8001d34 <HAL_ETH_IRQHandler+0x110>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d03d      	beq.n	8001d34 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cbe:	f043 0208 	orr.w	r2, r3, #8
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d01a      	beq.n	8001d08 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cda:	695a      	ldr	r2, [r3, #20]
 8001cdc:	4b29      	ldr	r3, [pc, #164]	@ (8001d84 <HAL_ETH_IRQHandler+0x160>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8001cf8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cfc:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	22e0      	movs	r2, #224	@ 0xe0
 8001d02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001d06:	e012      	b.n	8001d2e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d10:	695a      	ldr	r2, [r3, #20]
 8001d12:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001d16:	4013      	ands	r3, r2
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d26:	461a      	mov	r2, r3
 8001d28:	f248 6380 	movw	r3, #34432	@ 0x8680
 8001d2c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f006 f8c6 	bl	8007ec0 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00e      	beq.n	8001d5c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d44:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f81a 	bl	8001d88 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d006      	beq.n	8001d74 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001d66:	4b05      	ldr	r3, [pc, #20]	@ (8001d7c <HAL_ETH_IRQHandler+0x158>)
 8001d68:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001d6c:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f814 	bl	8001d9c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001d74:	bf00      	nop
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40013c00 	.word	0x40013c00
 8001d80:	00010040 	.word	0x00010040
 8001d84:	007e2000 	.word	0x007e2000

08001d88 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f003 031c 	and.w	r3, r3, #28
 8001dcc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	02db      	lsls	r3, r3, #11
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	019b      	lsls	r3, r3, #6
 8001dde:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f023 0302 	bic.w	r3, r3, #2
 8001dee:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001e00:	f7ff fa64 	bl	80012cc <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e06:	e00d      	b.n	8001e24 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001e08:	f7ff fa60 	bl	80012cc <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e16:	d301      	bcc.n	8001e1c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e010      	b.n	8001e3e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1ec      	bne.n	8001e08 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	461a      	mov	r2, r3
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b086      	sub	sp, #24
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	60f8      	str	r0, [r7, #12]
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f003 031c 	and.w	r3, r3, #28
 8001e62:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	02db      	lsls	r3, r3, #11
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	019b      	lsls	r3, r3, #6
 8001e74:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ea0:	f7ff fa14 	bl	80012cc <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ea6:	e00d      	b.n	8001ec4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001ea8:	f7ff fa10 	bl	80012cc <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eb6:	d301      	bcc.n	8001ebc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e009      	b.n	8001ed0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1ec      	bne.n	8001ea8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0e6      	b.n	80020ba <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	bf14      	ite	ne
 8001efa:	2301      	movne	r3, #1
 8001efc:	2300      	moveq	r3, #0
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf0c      	ite	eq
 8001f24:	2301      	moveq	r3, #1
 8001f26:	2300      	movne	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	bf14      	ite	ne
 8001f40:	2301      	movne	r3, #1
 8001f42:	2300      	moveq	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	bf0c      	ite	eq
 8001f5a:	2301      	moveq	r3, #1
 8001f5c:	2300      	movne	r3, #0
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bf14      	ite	ne
 8001f74:	2301      	movne	r3, #1
 8001f76:	2300      	moveq	r3, #0
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bf0c      	ite	eq
 8001faa:	2301      	moveq	r3, #1
 8001fac:	2300      	movne	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf0c      	ite	eq
 8001fc4:	2301      	moveq	r3, #1
 8001fc6:	2300      	movne	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	bf14      	ite	ne
 8001fde:	2301      	movne	r3, #1
 8001fe0:	2300      	moveq	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002002:	2b00      	cmp	r3, #0
 8002004:	bf14      	ite	ne
 8002006:	2301      	movne	r3, #1
 8002008:	2300      	moveq	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	bf14      	ite	ne
 8002020:	2301      	movne	r3, #1
 8002022:	2300      	moveq	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	bf14      	ite	ne
 800203a:	2301      	movne	r3, #1
 800203c:	2300      	moveq	r3, #0
 800203e:	b2db      	uxtb	r3, r3
 8002040:	461a      	mov	r2, r3
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002052:	2b00      	cmp	r3, #0
 8002054:	bf0c      	ite	eq
 8002056:	2301      	moveq	r3, #1
 8002058:	2300      	movne	r3, #0
 800205a:	b2db      	uxtb	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	0c1b      	lsrs	r3, r3, #16
 800207a:	b29a      	uxth	r2, r3
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b00      	cmp	r3, #0
 800208c:	bf14      	ite	ne
 800208e:	2301      	movne	r3, #1
 8002090:	2300      	moveq	r3, #0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf14      	ite	ne
 80020aa:	2301      	movne	r3, #1
 80020ac:	2300      	moveq	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d101      	bne.n	80020da <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e00b      	b.n	80020f2 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020e0:	2b10      	cmp	r3, #16
 80020e2:	d105      	bne.n	80020f0 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80020e4:	6839      	ldr	r1, [r7, #0]
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f88a 	bl	8002200 <ETH_SetMACConfig>

    return HAL_OK;
 80020ec:	2300      	movs	r3, #0
 80020ee:	e000      	b.n	80020f2 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
  }
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f023 031c 	bic.w	r3, r3, #28
 8002112:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002114:	f002 fdbe 	bl	8004c94 <HAL_RCC_GetHCLKFreq>
 8002118:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	4a14      	ldr	r2, [pc, #80]	@ (8002170 <HAL_ETH_SetMDIOClockRange+0x74>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d804      	bhi.n	800212c <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f043 0308 	orr.w	r3, r3, #8
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	e019      	b.n	8002160 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	4a11      	ldr	r2, [pc, #68]	@ (8002174 <HAL_ETH_SetMDIOClockRange+0x78>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d204      	bcs.n	800213e <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f043 030c 	orr.w	r3, r3, #12
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	e010      	b.n	8002160 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	4a0d      	ldr	r2, [pc, #52]	@ (8002178 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d90c      	bls.n	8002160 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	4a0c      	ldr	r2, [pc, #48]	@ (800217c <HAL_ETH_SetMDIOClockRange+0x80>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d804      	bhi.n	8002158 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	e003      	b.n	8002160 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f043 0310 	orr.w	r3, r3, #16
 800215e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	611a      	str	r2, [r3, #16]
}
 8002168:	bf00      	nop
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	02160ebf 	.word	0x02160ebf
 8002174:	03938700 	.word	0x03938700
 8002178:	05f5e0ff 	.word	0x05f5e0ff
 800217c:	08f0d17f 	.word	0x08f0d17f

08002180 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021d6:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021e4:	2001      	movs	r0, #1
 80021e6:	f7ff f87d 	bl	80012e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80021f4:	6193      	str	r3, [r2, #24]
}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4b53      	ldr	r3, [pc, #332]	@ (8002364 <ETH_SetMACConfig+0x164>)
 8002216:	4013      	ands	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	7b9b      	ldrb	r3, [r3, #14]
 800221e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	7c12      	ldrb	r2, [r2, #16]
 8002224:	2a00      	cmp	r2, #0
 8002226:	d102      	bne.n	800222e <ETH_SetMACConfig+0x2e>
 8002228:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800222c:	e000      	b.n	8002230 <ETH_SetMACConfig+0x30>
 800222e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002230:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	7c52      	ldrb	r2, [r2, #17]
 8002236:	2a00      	cmp	r2, #0
 8002238:	d102      	bne.n	8002240 <ETH_SetMACConfig+0x40>
 800223a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800223e:	e000      	b.n	8002242 <ETH_SetMACConfig+0x42>
 8002240:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002242:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002248:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	7fdb      	ldrb	r3, [r3, #31]
 800224e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002250:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002256:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	7f92      	ldrb	r2, [r2, #30]
 800225c:	2a00      	cmp	r2, #0
 800225e:	d102      	bne.n	8002266 <ETH_SetMACConfig+0x66>
 8002260:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002264:	e000      	b.n	8002268 <ETH_SetMACConfig+0x68>
 8002266:	2200      	movs	r2, #0
                        macconf->Speed |
 8002268:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	7f1b      	ldrb	r3, [r3, #28]
 800226e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002270:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002276:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	791b      	ldrb	r3, [r3, #4]
 800227c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800227e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002286:	2a00      	cmp	r2, #0
 8002288:	d102      	bne.n	8002290 <ETH_SetMACConfig+0x90>
 800228a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800228e:	e000      	b.n	8002292 <ETH_SetMACConfig+0x92>
 8002290:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002292:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	7bdb      	ldrb	r3, [r3, #15]
 8002298:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800229a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80022a8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80022aa:	4313      	orrs	r3, r2
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022c2:	2001      	movs	r0, #1
 80022c4:	f7ff f80e 	bl	80012e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80022de:	4013      	ands	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80022ee:	2a00      	cmp	r2, #0
 80022f0:	d101      	bne.n	80022f6 <ETH_SetMACConfig+0xf6>
 80022f2:	2280      	movs	r2, #128	@ 0x80
 80022f4:	e000      	b.n	80022f8 <ETH_SetMACConfig+0xf8>
 80022f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022f8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80022fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002306:	2a01      	cmp	r2, #1
 8002308:	d101      	bne.n	800230e <ETH_SetMACConfig+0x10e>
 800230a:	2208      	movs	r2, #8
 800230c:	e000      	b.n	8002310 <ETH_SetMACConfig+0x110>
 800230e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002310:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002318:	2a01      	cmp	r2, #1
 800231a:	d101      	bne.n	8002320 <ETH_SetMACConfig+0x120>
 800231c:	2204      	movs	r2, #4
 800231e:	e000      	b.n	8002322 <ETH_SetMACConfig+0x122>
 8002320:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002322:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800232a:	2a01      	cmp	r2, #1
 800232c:	d101      	bne.n	8002332 <ETH_SetMACConfig+0x132>
 800232e:	2202      	movs	r2, #2
 8002330:	e000      	b.n	8002334 <ETH_SetMACConfig+0x134>
 8002332:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002334:	4313      	orrs	r3, r2
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4313      	orrs	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800234c:	2001      	movs	r0, #1
 800234e:	f7fe ffc9 	bl	80012e4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	619a      	str	r2, [r3, #24]
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	fd20810f 	.word	0xfd20810f

08002368 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	4b3d      	ldr	r3, [pc, #244]	@ (8002478 <ETH_SetDMAConfig+0x110>)
 8002382:	4013      	ands	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	7b1b      	ldrb	r3, [r3, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d102      	bne.n	8002394 <ETH_SetDMAConfig+0x2c>
 800238e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002392:	e000      	b.n	8002396 <ETH_SetDMAConfig+0x2e>
 8002394:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	7b5b      	ldrb	r3, [r3, #13]
 800239a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800239c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	7f52      	ldrb	r2, [r2, #29]
 80023a2:	2a00      	cmp	r2, #0
 80023a4:	d102      	bne.n	80023ac <ETH_SetDMAConfig+0x44>
 80023a6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80023aa:	e000      	b.n	80023ae <ETH_SetDMAConfig+0x46>
 80023ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023ae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	7b9b      	ldrb	r3, [r3, #14]
 80023b4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023b6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80023bc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	7f1b      	ldrb	r3, [r3, #28]
 80023c2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80023c4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	7f9b      	ldrb	r3, [r3, #30]
 80023ca:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80023cc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80023d2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80023da:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023dc:	4313      	orrs	r3, r2
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023ec:	461a      	mov	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023fe:	2001      	movs	r0, #1
 8002400:	f7fe ff70 	bl	80012e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800240c:	461a      	mov	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	791b      	ldrb	r3, [r3, #4]
 8002416:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800241c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002422:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002428:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002430:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002432:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002438:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800243a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002440:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800244a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800244e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800245c:	2001      	movs	r0, #1
 800245e:	f7fe ff41 	bl	80012e4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800246a:	461a      	mov	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6013      	str	r3, [r2, #0]
}
 8002470:	bf00      	nop
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	f8de3f23 	.word	0xf8de3f23

0800247c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b0a6      	sub	sp, #152	@ 0x98
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002484:	2301      	movs	r3, #1
 8002486:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800248a:	2301      	movs	r3, #1
 800248c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002490:	2300      	movs	r3, #0
 8002492:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002494:	2300      	movs	r3, #0
 8002496:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800249a:	2301      	movs	r3, #1
 800249c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80024a6:	2301      	movs	r3, #1
 80024a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80024be:	2300      	movs	r3, #0
 80024c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80024de:	2300      	movs	r3, #0
 80024e0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80024e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80024ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80024ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80024f6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024fa:	4619      	mov	r1, r3
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff fe7f 	bl	8002200 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002502:	2301      	movs	r3, #1
 8002504:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002506:	2301      	movs	r3, #1
 8002508:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800250a:	2301      	movs	r3, #1
 800250c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002510:	2301      	movs	r3, #1
 8002512:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002514:	2300      	movs	r3, #0
 8002516:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002518:	2300      	movs	r3, #0
 800251a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800251e:	2300      	movs	r3, #0
 8002520:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002524:	2300      	movs	r3, #0
 8002526:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002528:	2301      	movs	r3, #1
 800252a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800252e:	2301      	movs	r3, #1
 8002530:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002532:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002536:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002538:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800253c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800253e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002542:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002544:	2301      	movs	r3, #1
 8002546:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800254a:	2300      	movs	r3, #0
 800254c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002552:	f107 0308 	add.w	r3, r7, #8
 8002556:	4619      	mov	r1, r3
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff ff05 	bl	8002368 <ETH_SetDMAConfig>
}
 800255e:	bf00      	nop
 8002560:	3798      	adds	r7, #152	@ 0x98
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3305      	adds	r3, #5
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	3204      	adds	r2, #4
 8002580:	7812      	ldrb	r2, [r2, #0]
 8002582:	4313      	orrs	r3, r2
 8002584:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	4b11      	ldr	r3, [pc, #68]	@ (80025d0 <ETH_MACAddressConfig+0x68>)
 800258a:	4413      	add	r3, r2
 800258c:	461a      	mov	r2, r3
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3303      	adds	r3, #3
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	061a      	lsls	r2, r3, #24
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3302      	adds	r3, #2
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	041b      	lsls	r3, r3, #16
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3301      	adds	r3, #1
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	4313      	orrs	r3, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	7812      	ldrb	r2, [r2, #0]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <ETH_MACAddressConfig+0x6c>)
 80025ba:	4413      	add	r3, r2
 80025bc:	461a      	mov	r2, r3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	6013      	str	r3, [r2, #0]
}
 80025c2:	bf00      	nop
 80025c4:	371c      	adds	r7, #28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40028040 	.word	0x40028040
 80025d4:	40028044 	.word	0x40028044

080025d8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	e03e      	b.n	8002664 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68d9      	ldr	r1, [r3, #12]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	440b      	add	r3, r1
 80025f6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2200      	movs	r2, #0
 8002602:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2200      	movs	r2, #0
 800260e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	3206      	adds	r2, #6
 8002618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d80c      	bhi.n	8002648 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68d9      	ldr	r1, [r3, #12]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	440b      	add	r3, r1
 8002640:	461a      	mov	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	e004      	b.n	8002652 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	461a      	mov	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	3301      	adds	r3, #1
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b03      	cmp	r3, #3
 8002668:	d9bd      	bls.n	80025e6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800267c:	611a      	str	r2, [r3, #16]
}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800268a:	b480      	push	{r7}
 800268c:	b085      	sub	sp, #20
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
 8002696:	e048      	b.n	800272a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6919      	ldr	r1, [r3, #16]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	440b      	add	r3, r1
 80026a8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	2200      	movs	r2, #0
 80026b4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2200      	movs	r2, #0
 80026ba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2200      	movs	r2, #0
 80026c0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	2200      	movs	r2, #0
 80026c6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2200      	movs	r2, #0
 80026cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80026d4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	3212      	adds	r2, #18
 80026f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d80c      	bhi.n	800271a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6919      	ldr	r1, [r3, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	440b      	add	r3, r1
 8002712:	461a      	mov	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	60da      	str	r2, [r3, #12]
 8002718:	e004      	b.n	8002724 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	461a      	mov	r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	3301      	adds	r3, #1
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b03      	cmp	r3, #3
 800272e:	d9b3      	bls.n	8002698 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800275a:	60da      	str	r2, [r3, #12]
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002768:	b480      	push	{r7}
 800276a:	b091      	sub	sp, #68	@ 0x44
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	3318      	adds	r3, #24
 8002778:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800278a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800278e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002792:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800279e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80027a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027aa:	d007      	beq.n	80027bc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80027ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027b0:	3304      	adds	r3, #4
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80027bc:	2302      	movs	r3, #2
 80027be:	e111      	b.n	80029e4 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 80027c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027c2:	3301      	adds	r3, #1
 80027c4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80027c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ce:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80027d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	4b86      	ldr	r3, [pc, #536]	@ (80029f0 <ETH_Prepare_Tx_Descriptors+0x288>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027da:	6852      	ldr	r2, [r2, #4]
 80027dc:	431a      	orrs	r2, r3
 80027de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d008      	beq.n	8002800 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80027ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027fe:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800280c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	431a      	orrs	r2, r3
 800281a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800281c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b00      	cmp	r3, #0
 8002828:	d005      	beq.n	8002836 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800282a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002834:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800283e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002840:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002842:	e082      	b.n	800294a <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800284c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284e:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d006      	beq.n	8002864 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800285e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	e005      	b.n	8002870 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800286c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800286e:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002872:	3301      	adds	r3, #1
 8002874:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002878:	2b03      	cmp	r3, #3
 800287a:	d902      	bls.n	8002882 <ETH_Prepare_Tx_Descriptors+0x11a>
 800287c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800287e:	3b04      	subs	r3, #4
 8002880:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002884:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800288c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002894:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002898:	d007      	beq.n	80028aa <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800289a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800289c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800289e:	3304      	adds	r3, #4
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d029      	beq.n	80028fe <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80028b8:	2300      	movs	r3, #0
 80028ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028bc:	e019      	b.n	80028f2 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80028be:	f3bf 8f5f 	dmb	sy
}
 80028c2:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80028c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ce:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80028d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028d2:	3301      	adds	r3, #1
 80028d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d902      	bls.n	80028e2 <ETH_Prepare_Tx_Descriptors+0x17a>
 80028dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028de:	3b04      	subs	r3, #4
 80028e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ea:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 80028ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ee:	3301      	adds	r3, #1
 80028f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80028f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d3e1      	bcc.n	80028be <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 80028fa:	2302      	movs	r3, #2
 80028fc:	e072      	b.n	80029e4 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80028fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002908:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800290a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800290c:	3301      	adds	r3, #1
 800290e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800291e:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002922:	685a      	ldr	r2, [r3, #4]
 8002924:	4b32      	ldr	r3, [pc, #200]	@ (80029f0 <ETH_Prepare_Tx_Descriptors+0x288>)
 8002926:	4013      	ands	r3, r2
 8002928:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800292a:	6852      	ldr	r2, [r2, #4]
 800292c:	431a      	orrs	r2, r3
 800292e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002930:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002934:	3301      	adds	r3, #1
 8002936:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002938:	f3bf 8f5f 	dmb	sy
}
 800293c:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800293e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002948:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800294a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	f47f af78 	bne.w	8002844 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d006      	beq.n	8002968 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800295a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	e005      	b.n	8002974 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002972:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800297c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297e:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	6a3a      	ldr	r2, [r7, #32]
 8002984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002988:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800298a:	f3bf 8f5f 	dmb	sy
}
 800298e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029a4:	3304      	adds	r3, #4
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80029ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029b0:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029b2:	f3ef 8310 	mrs	r3, PRIMASK
 80029b6:	613b      	str	r3, [r7, #16]
  return(result);
 80029b8:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80029ba:	61fb      	str	r3, [r7, #28]
 80029bc:	2301      	movs	r3, #1
 80029be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f383 8810 	msr	PRIMASK, r3
}
 80029c6:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80029c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ce:	4413      	add	r3, r2
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	f383 8810 	msr	PRIMASK, r3
}
 80029e0:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3744      	adds	r7, #68	@ 0x44
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	ffffe000 	.word	0xffffe000

080029f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b089      	sub	sp, #36	@ 0x24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
 8002a12:	e175      	b.n	8002d00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a14:	2201      	movs	r2, #1
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4013      	ands	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	f040 8164 	bne.w	8002cfa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d005      	beq.n	8002a4a <HAL_GPIO_Init+0x56>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d130      	bne.n	8002aac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	2203      	movs	r2, #3
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a80:	2201      	movs	r2, #1
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 0201 	and.w	r2, r3, #1
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d017      	beq.n	8002ae8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d123      	bne.n	8002b3c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	08da      	lsrs	r2, r3, #3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3208      	adds	r2, #8
 8002afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	220f      	movs	r2, #15
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	08da      	lsrs	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3208      	adds	r2, #8
 8002b36:	69b9      	ldr	r1, [r7, #24]
 8002b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	2203      	movs	r2, #3
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 0203 	and.w	r2, r3, #3
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80be 	beq.w	8002cfa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7e:	4b66      	ldr	r3, [pc, #408]	@ (8002d18 <HAL_GPIO_Init+0x324>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b82:	4a65      	ldr	r2, [pc, #404]	@ (8002d18 <HAL_GPIO_Init+0x324>)
 8002b84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b8a:	4b63      	ldr	r3, [pc, #396]	@ (8002d18 <HAL_GPIO_Init+0x324>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b96:	4a61      	ldr	r2, [pc, #388]	@ (8002d1c <HAL_GPIO_Init+0x328>)
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	089b      	lsrs	r3, r3, #2
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	220f      	movs	r2, #15
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a58      	ldr	r2, [pc, #352]	@ (8002d20 <HAL_GPIO_Init+0x32c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d037      	beq.n	8002c32 <HAL_GPIO_Init+0x23e>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a57      	ldr	r2, [pc, #348]	@ (8002d24 <HAL_GPIO_Init+0x330>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d031      	beq.n	8002c2e <HAL_GPIO_Init+0x23a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a56      	ldr	r2, [pc, #344]	@ (8002d28 <HAL_GPIO_Init+0x334>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d02b      	beq.n	8002c2a <HAL_GPIO_Init+0x236>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a55      	ldr	r2, [pc, #340]	@ (8002d2c <HAL_GPIO_Init+0x338>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d025      	beq.n	8002c26 <HAL_GPIO_Init+0x232>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a54      	ldr	r2, [pc, #336]	@ (8002d30 <HAL_GPIO_Init+0x33c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d01f      	beq.n	8002c22 <HAL_GPIO_Init+0x22e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a53      	ldr	r2, [pc, #332]	@ (8002d34 <HAL_GPIO_Init+0x340>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d019      	beq.n	8002c1e <HAL_GPIO_Init+0x22a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a52      	ldr	r2, [pc, #328]	@ (8002d38 <HAL_GPIO_Init+0x344>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <HAL_GPIO_Init+0x226>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a51      	ldr	r2, [pc, #324]	@ (8002d3c <HAL_GPIO_Init+0x348>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00d      	beq.n	8002c16 <HAL_GPIO_Init+0x222>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a50      	ldr	r2, [pc, #320]	@ (8002d40 <HAL_GPIO_Init+0x34c>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d007      	beq.n	8002c12 <HAL_GPIO_Init+0x21e>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a4f      	ldr	r2, [pc, #316]	@ (8002d44 <HAL_GPIO_Init+0x350>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d101      	bne.n	8002c0e <HAL_GPIO_Init+0x21a>
 8002c0a:	2309      	movs	r3, #9
 8002c0c:	e012      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c0e:	230a      	movs	r3, #10
 8002c10:	e010      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c12:	2308      	movs	r3, #8
 8002c14:	e00e      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c16:	2307      	movs	r3, #7
 8002c18:	e00c      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c1a:	2306      	movs	r3, #6
 8002c1c:	e00a      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c1e:	2305      	movs	r3, #5
 8002c20:	e008      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c22:	2304      	movs	r3, #4
 8002c24:	e006      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c26:	2303      	movs	r3, #3
 8002c28:	e004      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e002      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <HAL_GPIO_Init+0x240>
 8002c32:	2300      	movs	r3, #0
 8002c34:	69fa      	ldr	r2, [r7, #28]
 8002c36:	f002 0203 	and.w	r2, r2, #3
 8002c3a:	0092      	lsls	r2, r2, #2
 8002c3c:	4093      	lsls	r3, r2
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c44:	4935      	ldr	r1, [pc, #212]	@ (8002d1c <HAL_GPIO_Init+0x328>)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	089b      	lsrs	r3, r3, #2
 8002c4a:	3302      	adds	r3, #2
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c52:	4b3d      	ldr	r3, [pc, #244]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c76:	4a34      	ldr	r2, [pc, #208]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c7c:	4b32      	ldr	r3, [pc, #200]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ca0:	4a29      	ldr	r2, [pc, #164]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ca6:	4b28      	ldr	r3, [pc, #160]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cca:	4a1f      	ldr	r2, [pc, #124]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cf4:	4a14      	ldr	r2, [pc, #80]	@ (8002d48 <HAL_GPIO_Init+0x354>)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	61fb      	str	r3, [r7, #28]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	2b0f      	cmp	r3, #15
 8002d04:	f67f ae86 	bls.w	8002a14 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
 8002d0c:	3724      	adds	r7, #36	@ 0x24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40013800 	.word	0x40013800
 8002d20:	40020000 	.word	0x40020000
 8002d24:	40020400 	.word	0x40020400
 8002d28:	40020800 	.word	0x40020800
 8002d2c:	40020c00 	.word	0x40020c00
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40021400 	.word	0x40021400
 8002d38:	40021800 	.word	0x40021800
 8002d3c:	40021c00 	.word	0x40021c00
 8002d40:	40022000 	.word	0x40022000
 8002d44:	40022400 	.word	0x40022400
 8002d48:	40013c00 	.word	0x40013c00

08002d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	807b      	strh	r3, [r7, #2]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d5c:	787b      	ldrb	r3, [r7, #1]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d62:	887a      	ldrh	r2, [r7, #2]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d68:	e003      	b.n	8002d72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d6a:	887b      	ldrh	r3, [r7, #2]
 8002d6c:	041a      	lsls	r2, r3, #16
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	619a      	str	r2, [r3, #24]
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b086      	sub	sp, #24
 8002d82:	af02      	add	r7, sp, #8
 8002d84:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e108      	b.n	8002fa2 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d106      	bne.n	8002db0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f01b f8dc 	bl	801df68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2203      	movs	r2, #3
 8002db4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dbe:	d102      	bne.n	8002dc6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f003 fd9d 	bl	800690a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	7c1a      	ldrb	r2, [r3, #16]
 8002dd8:	f88d 2000 	strb.w	r2, [sp]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002de0:	f003 fc86 	bl	80066f0 <USB_CoreInit>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2202      	movs	r2, #2
 8002dee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e0d5      	b.n	8002fa2 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f003 fd95 	bl	800692c <USB_SetCurrentMode>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d005      	beq.n	8002e14 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0c6      	b.n	8002fa2 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e14:	2300      	movs	r3, #0
 8002e16:	73fb      	strb	r3, [r7, #15]
 8002e18:	e04a      	b.n	8002eb0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e1a:	7bfa      	ldrb	r2, [r7, #15]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	3315      	adds	r3, #21
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e2e:	7bfa      	ldrb	r2, [r7, #15]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	3314      	adds	r3, #20
 8002e3e:	7bfa      	ldrb	r2, [r7, #15]
 8002e40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e42:	7bfa      	ldrb	r2, [r7, #15]
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
 8002e46:	b298      	uxth	r0, r3
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4413      	add	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	332e      	adds	r3, #46	@ 0x2e
 8002e56:	4602      	mov	r2, r0
 8002e58:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e5a:	7bfa      	ldrb	r2, [r7, #15]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	3318      	adds	r3, #24
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e6e:	7bfa      	ldrb	r2, [r7, #15]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	331c      	adds	r3, #28
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e82:	7bfa      	ldrb	r2, [r7, #15]
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	3320      	adds	r3, #32
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e96:	7bfa      	ldrb	r2, [r7, #15]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	3324      	adds	r3, #36	@ 0x24
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	3301      	adds	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	791b      	ldrb	r3, [r3, #4]
 8002eb4:	7bfa      	ldrb	r2, [r7, #15]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d3af      	bcc.n	8002e1a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eba:	2300      	movs	r3, #0
 8002ebc:	73fb      	strb	r3, [r7, #15]
 8002ebe:	e044      	b.n	8002f4a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ec0:	7bfa      	ldrb	r2, [r7, #15]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ed6:	7bfa      	ldrb	r2, [r7, #15]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002ee8:	7bfa      	ldrb	r2, [r7, #15]
 8002eea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002eec:	7bfa      	ldrb	r2, [r7, #15]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002efe:	2200      	movs	r2, #0
 8002f00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f02:	7bfa      	ldrb	r2, [r7, #15]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f18:	7bfa      	ldrb	r2, [r7, #15]
 8002f1a:	6879      	ldr	r1, [r7, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f2e:	7bfa      	ldrb	r2, [r7, #15]
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	3301      	adds	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	791b      	ldrb	r3, [r3, #4]
 8002f4e:	7bfa      	ldrb	r2, [r7, #15]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d3b5      	bcc.n	8002ec0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	7c1a      	ldrb	r2, [r3, #16]
 8002f5c:	f88d 2000 	strb.w	r2, [sp]
 8002f60:	3304      	adds	r3, #4
 8002f62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f64:	f003 fd2e 	bl	80069c4 <USB_DevInit>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2202      	movs	r2, #2
 8002f72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e013      	b.n	8002fa2 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	7b1b      	ldrb	r3, [r3, #12]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d102      	bne.n	8002f96 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f001 f95b 	bl	800424c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f004 fd71 	bl	8007a82 <USB_DevDisconnect>

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_PCD_Start+0x16>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e012      	b.n	8002fe6 <HAL_PCD_Start+0x3c>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f003 fc8b 	bl	80068e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f004 fd32 	bl	8007a40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002fee:	b590      	push	{r4, r7, lr}
 8002ff0:	b08d      	sub	sp, #52	@ 0x34
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f004 fdf0 	bl	8007bea <USB_GetMode>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	f040 84b9 	bne.w	8003984 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f004 fd54 	bl	8007ac4 <USB_ReadInterrupts>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 84af 	beq.w	8003982 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	0a1b      	lsrs	r3, r3, #8
 800302e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4618      	mov	r0, r3
 800303e:	f004 fd41 	bl	8007ac4 <USB_ReadInterrupts>
 8003042:	4603      	mov	r3, r0
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b02      	cmp	r3, #2
 800304a:	d107      	bne.n	800305c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f002 0202 	and.w	r2, r2, #2
 800305a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f004 fd2f 	bl	8007ac4 <USB_ReadInterrupts>
 8003066:	4603      	mov	r3, r0
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	2b10      	cmp	r3, #16
 800306e:	d161      	bne.n	8003134 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699a      	ldr	r2, [r3, #24]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f022 0210 	bic.w	r2, r2, #16
 800307e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	f003 020f 	and.w	r2, r3, #15
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	4413      	add	r3, r2
 800309c:	3304      	adds	r3, #4
 800309e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80030a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030aa:	d124      	bne.n	80030f6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d035      	beq.n	8003124 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	091b      	lsrs	r3, r3, #4
 80030c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	6a38      	ldr	r0, [r7, #32]
 80030cc:	f004 fb66 	bl	800779c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	091b      	lsrs	r3, r3, #4
 80030d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030dc:	441a      	add	r2, r3
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	695a      	ldr	r2, [r3, #20]
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030ee:	441a      	add	r2, r3
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	615a      	str	r2, [r3, #20]
 80030f4:	e016      	b.n	8003124 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80030fc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003100:	d110      	bne.n	8003124 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003108:	2208      	movs	r2, #8
 800310a:	4619      	mov	r1, r3
 800310c:	6a38      	ldr	r0, [r7, #32]
 800310e:	f004 fb45 	bl	800779c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	091b      	lsrs	r3, r3, #4
 800311a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800311e:	441a      	add	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699a      	ldr	r2, [r3, #24]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0210 	orr.w	r2, r2, #16
 8003132:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f004 fcc3 	bl	8007ac4 <USB_ReadInterrupts>
 800313e:	4603      	mov	r3, r0
 8003140:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003144:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003148:	f040 80a7 	bne.w	800329a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800314c:	2300      	movs	r3, #0
 800314e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f004 fcc8 	bl	8007aea <USB_ReadDevAllOutEpInterrupt>
 800315a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800315c:	e099      	b.n	8003292 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800315e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 808e 	beq.w	8003286 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f004 fcec 	bl	8007b52 <USB_ReadDevOutEPInterrupt>
 800317a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00c      	beq.n	80031a0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003192:	461a      	mov	r2, r3
 8003194:	2301      	movs	r3, #1
 8003196:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003198:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fed0 	bl	8003f40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00c      	beq.n	80031c4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80031aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031b6:	461a      	mov	r2, r3
 80031b8:	2308      	movs	r3, #8
 80031ba:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80031bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 ffa6 	bl	8004110 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d008      	beq.n	80031e0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80031ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031da:	461a      	mov	r2, r3
 80031dc:	2310      	movs	r3, #16
 80031de:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d030      	beq.n	800324c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80031ea:	6a3b      	ldr	r3, [r7, #32]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f2:	2b80      	cmp	r3, #128	@ 0x80
 80031f4:	d109      	bne.n	800320a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003204:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003208:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800320a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800320c:	4613      	mov	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	4413      	add	r3, r2
 800321c:	3304      	adds	r3, #4
 800321e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	78db      	ldrb	r3, [r3, #3]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d108      	bne.n	800323a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	2200      	movs	r2, #0
 800322c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800322e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003230:	b2db      	uxtb	r3, r3
 8003232:	4619      	mov	r1, r3
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f01a ffcb 	bl	801e1d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800323a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	4413      	add	r3, r2
 8003242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003246:	461a      	mov	r2, r3
 8003248:	2302      	movs	r3, #2
 800324a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b00      	cmp	r3, #0
 8003254:	d008      	beq.n	8003268 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	4413      	add	r3, r2
 800325e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003262:	461a      	mov	r2, r3
 8003264:	2320      	movs	r3, #32
 8003266:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d009      	beq.n	8003286 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	4413      	add	r3, r2
 800327a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800327e:	461a      	mov	r2, r3
 8003280:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003284:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003288:	3301      	adds	r3, #1
 800328a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800328c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328e:	085b      	lsrs	r3, r3, #1
 8003290:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003294:	2b00      	cmp	r3, #0
 8003296:	f47f af62 	bne.w	800315e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f004 fc10 	bl	8007ac4 <USB_ReadInterrupts>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032ae:	f040 80db 	bne.w	8003468 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f004 fc31 	bl	8007b1e <USB_ReadDevAllInEpInterrupt>
 80032bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80032c2:	e0cd      	b.n	8003460 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80032c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 80c2 	beq.w	8003454 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	4611      	mov	r1, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f004 fc57 	bl	8007b8e <USB_ReadDevInEPInterrupt>
 80032e0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d057      	beq.n	800339c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	2201      	movs	r2, #1
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	43db      	mvns	r3, r3
 8003306:	69f9      	ldr	r1, [r7, #28]
 8003308:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800330c:	4013      	ands	r3, r2
 800330e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800331c:	461a      	mov	r2, r3
 800331e:	2301      	movs	r3, #1
 8003320:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	799b      	ldrb	r3, [r3, #6]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d132      	bne.n	8003390 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800332e:	4613      	mov	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	3320      	adds	r3, #32
 800333a:	6819      	ldr	r1, [r3, #0]
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003340:	4613      	mov	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4403      	add	r3, r0
 800334a:	331c      	adds	r3, #28
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4419      	add	r1, r3
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003354:	4613      	mov	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4403      	add	r3, r0
 800335e:	3320      	adds	r3, #32
 8003360:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003364:	2b00      	cmp	r3, #0
 8003366:	d113      	bne.n	8003390 <HAL_PCD_IRQHandler+0x3a2>
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800336c:	4613      	mov	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	3324      	adds	r3, #36	@ 0x24
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d108      	bne.n	8003390 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003388:	461a      	mov	r2, r3
 800338a:	2101      	movs	r1, #1
 800338c:	f004 fc60 	bl	8007c50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003392:	b2db      	uxtb	r3, r3
 8003394:	4619      	mov	r1, r3
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f01a fe95 	bl	801e0c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033b2:	461a      	mov	r2, r3
 80033b4:	2308      	movs	r3, #8
 80033b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d008      	beq.n	80033d4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033ce:	461a      	mov	r2, r3
 80033d0:	2310      	movs	r3, #16
 80033d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d008      	beq.n	80033f0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e0:	015a      	lsls	r2, r3, #5
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	4413      	add	r3, r2
 80033e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033ea:	461a      	mov	r2, r3
 80033ec:	2340      	movs	r3, #64	@ 0x40
 80033ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d023      	beq.n	8003442 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80033fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033fc:	6a38      	ldr	r0, [r7, #32]
 80033fe:	f003 fc3f 	bl	8006c80 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003402:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	3310      	adds	r3, #16
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	3304      	adds	r3, #4
 8003414:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	78db      	ldrb	r3, [r3, #3]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d108      	bne.n	8003430 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2200      	movs	r2, #0
 8003422:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003426:	b2db      	uxtb	r3, r3
 8003428:	4619      	mov	r1, r3
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f01a fee2 	bl	801e1f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800343c:	461a      	mov	r2, r3
 800343e:	2302      	movs	r3, #2
 8003440:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800344c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fcea 	bl	8003e28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003456:	3301      	adds	r3, #1
 8003458:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800345a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345c:	085b      	lsrs	r3, r3, #1
 800345e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003462:	2b00      	cmp	r3, #0
 8003464:	f47f af2e 	bne.w	80032c4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f004 fb29 	bl	8007ac4 <USB_ReadInterrupts>
 8003472:	4603      	mov	r3, r0
 8003474:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003478:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800347c:	d122      	bne.n	80034c4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800348c:	f023 0301 	bic.w	r3, r3, #1
 8003490:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003498:	2b01      	cmp	r3, #1
 800349a:	d108      	bne.n	80034ae <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034a4:	2100      	movs	r1, #0
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f01b f85c 	bl	801e564 <HAL_PCDEx_LPM_Callback>
 80034ac:	e002      	b.n	80034b4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f01a fe80 	bl	801e1b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80034c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f004 fafb 	bl	8007ac4 <USB_ReadInterrupts>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034d8:	d112      	bne.n	8003500 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d102      	bne.n	80034f0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f01a fe3c 	bl	801e168 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80034fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f004 fadd 	bl	8007ac4 <USB_ReadInterrupts>
 800350a:	4603      	mov	r3, r0
 800350c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003510:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003514:	d121      	bne.n	800355a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695a      	ldr	r2, [r3, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8003524:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800352c:	2b00      	cmp	r3, #0
 800352e:	d111      	bne.n	8003554 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353e:	089b      	lsrs	r3, r3, #2
 8003540:	f003 020f 	and.w	r2, r3, #15
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800354a:	2101      	movs	r1, #1
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f01b f809 	bl	801e564 <HAL_PCDEx_LPM_Callback>
 8003552:	e002      	b.n	800355a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f01a fe07 	bl	801e168 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f004 fab0 	bl	8007ac4 <USB_ReadInterrupts>
 8003564:	4603      	mov	r3, r0
 8003566:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800356a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800356e:	f040 80b7 	bne.w	80036e0 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	69fa      	ldr	r2, [r7, #28]
 800357c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2110      	movs	r1, #16
 800358c:	4618      	mov	r0, r3
 800358e:	f003 fb77 	bl	8006c80 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003592:	2300      	movs	r3, #0
 8003594:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003596:	e046      	b.n	8003626 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035a4:	461a      	mov	r2, r3
 80035a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80035aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035bc:	0151      	lsls	r1, r2, #5
 80035be:	69fa      	ldr	r2, [r7, #28]
 80035c0:	440a      	add	r2, r1
 80035c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80035ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035d8:	461a      	mov	r2, r3
 80035da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80035de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80035e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035f0:	0151      	lsls	r1, r2, #5
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	440a      	add	r2, r1
 80035f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80035fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80035fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003610:	0151      	lsls	r1, r2, #5
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	440a      	add	r2, r1
 8003616:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800361a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800361e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003622:	3301      	adds	r3, #1
 8003624:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	791b      	ldrb	r3, [r3, #4]
 800362a:	461a      	mov	r2, r3
 800362c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800362e:	4293      	cmp	r3, r2
 8003630:	d3b2      	bcc.n	8003598 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003640:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003644:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	7bdb      	ldrb	r3, [r3, #15]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d016      	beq.n	800367c <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003654:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800365e:	f043 030b 	orr.w	r3, r3, #11
 8003662:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800366c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003674:	f043 030b 	orr.w	r3, r3, #11
 8003678:	6453      	str	r3, [r2, #68]	@ 0x44
 800367a:	e015      	b.n	80036a8 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003682:	695a      	ldr	r2, [r3, #20]
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800368a:	4619      	mov	r1, r3
 800368c:	f242 032b 	movw	r3, #8235	@ 0x202b
 8003690:	4313      	orrs	r3, r2
 8003692:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036a2:	f043 030b 	orr.w	r3, r3, #11
 80036a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036b6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80036ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036ca:	461a      	mov	r2, r3
 80036cc:	f004 fac0 	bl	8007c50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695a      	ldr	r2, [r3, #20]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80036de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f004 f9ed 	bl	8007ac4 <USB_ReadInterrupts>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036f4:	d123      	bne.n	800373e <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f004 fa84 	bl	8007c08 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f003 fb34 	bl	8006d72 <USB_GetDevSpeed>
 800370a:	4603      	mov	r3, r0
 800370c:	461a      	mov	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681c      	ldr	r4, [r3, #0]
 8003716:	f001 fabd 	bl	8004c94 <HAL_RCC_GetHCLKFreq>
 800371a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003720:	461a      	mov	r2, r3
 8003722:	4620      	mov	r0, r4
 8003724:	f003 f83e 	bl	80067a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f01a fcf4 	bl	801e116 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	695a      	ldr	r2, [r3, #20]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800373c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f004 f9be 	bl	8007ac4 <USB_ReadInterrupts>
 8003748:	4603      	mov	r3, r0
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b08      	cmp	r3, #8
 8003750:	d10a      	bne.n	8003768 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f01a fcd1 	bl	801e0fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695a      	ldr	r2, [r3, #20]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f002 0208 	and.w	r2, r2, #8
 8003766:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f004 f9a9 	bl	8007ac4 <USB_ReadInterrupts>
 8003772:	4603      	mov	r3, r0
 8003774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003778:	2b80      	cmp	r3, #128	@ 0x80
 800377a:	d123      	bne.n	80037c4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003788:	2301      	movs	r3, #1
 800378a:	627b      	str	r3, [r7, #36]	@ 0x24
 800378c:	e014      	b.n	80037b8 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003792:	4613      	mov	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d105      	bne.n	80037b2 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	4619      	mov	r1, r3
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fb0a 	bl	8003dc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b4:	3301      	adds	r3, #1
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	791b      	ldrb	r3, [r3, #4]
 80037bc:	461a      	mov	r2, r3
 80037be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d3e4      	bcc.n	800378e <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f004 f97b 	bl	8007ac4 <USB_ReadInterrupts>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037d8:	d13c      	bne.n	8003854 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037da:	2301      	movs	r3, #1
 80037dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80037de:	e02b      	b.n	8003838 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80037e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037f4:	4613      	mov	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	3318      	adds	r3, #24
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d115      	bne.n	8003832 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003806:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003808:	2b00      	cmp	r3, #0
 800380a:	da12      	bge.n	8003832 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	3317      	adds	r3, #23
 800381c:	2201      	movs	r2, #1
 800381e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003822:	b2db      	uxtb	r3, r3
 8003824:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003828:	b2db      	uxtb	r3, r3
 800382a:	4619      	mov	r1, r3
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 faca 	bl	8003dc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003834:	3301      	adds	r3, #1
 8003836:	627b      	str	r3, [r7, #36]	@ 0x24
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	791b      	ldrb	r3, [r3, #4]
 800383c:	461a      	mov	r2, r3
 800383e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003840:	4293      	cmp	r3, r2
 8003842:	d3cd      	bcc.n	80037e0 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003852:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f004 f933 	bl	8007ac4 <USB_ReadInterrupts>
 800385e:	4603      	mov	r3, r0
 8003860:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003864:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003868:	d156      	bne.n	8003918 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800386a:	2301      	movs	r3, #1
 800386c:	627b      	str	r3, [r7, #36]	@ 0x24
 800386e:	e045      	b.n	80038fc <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003872:	015a      	lsls	r2, r3, #5
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	4413      	add	r3, r2
 8003878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003884:	4613      	mov	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d12e      	bne.n	80038f6 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003898:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800389a:	2b00      	cmp	r3, #0
 800389c:	da2b      	bge.n	80038f6 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	0c1a      	lsrs	r2, r3, #16
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80038a8:	4053      	eors	r3, r2
 80038aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d121      	bne.n	80038f6 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b6:	4613      	mov	r3, r2
 80038b8:	00db      	lsls	r3, r3, #3
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80038c4:	2201      	movs	r2, #1
 80038c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10a      	bne.n	80038f6 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	69fa      	ldr	r2, [r7, #28]
 80038ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038f2:	6053      	str	r3, [r2, #4]
            break;
 80038f4:	e008      	b.n	8003908 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f8:	3301      	adds	r3, #1
 80038fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	791b      	ldrb	r3, [r3, #4]
 8003900:	461a      	mov	r2, r3
 8003902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003904:	4293      	cmp	r3, r2
 8003906:	d3b3      	bcc.n	8003870 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003916:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f004 f8d1 	bl	8007ac4 <USB_ReadInterrupts>
 8003922:	4603      	mov	r3, r0
 8003924:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800392c:	d10a      	bne.n	8003944 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f01a fc72 	bl	801e218 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695a      	ldr	r2, [r3, #20]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003942:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f004 f8bb 	bl	8007ac4 <USB_ReadInterrupts>
 800394e:	4603      	mov	r3, r0
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b04      	cmp	r3, #4
 8003956:	d115      	bne.n	8003984 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	f003 0304 	and.w	r3, r3, #4
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f01a fc62 	bl	801e234 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6859      	ldr	r1, [r3, #4]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	430a      	orrs	r2, r1
 800397e:	605a      	str	r2, [r3, #4]
 8003980:	e000      	b.n	8003984 <HAL_PCD_IRQHandler+0x996>
      return;
 8003982:	bf00      	nop
    }
  }
}
 8003984:	3734      	adds	r7, #52	@ 0x34
 8003986:	46bd      	mov	sp, r7
 8003988:	bd90      	pop	{r4, r7, pc}

0800398a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	460b      	mov	r3, r1
 8003994:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_PCD_SetAddress+0x1a>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e012      	b.n	80039ca <HAL_PCD_SetAddress+0x40>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	78fa      	ldrb	r2, [r7, #3]
 80039b0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	78fa      	ldrb	r2, [r7, #3]
 80039b8:	4611      	mov	r1, r2
 80039ba:	4618      	mov	r0, r3
 80039bc:	f004 f81a 	bl	80079f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	4608      	mov	r0, r1
 80039dc:	4611      	mov	r1, r2
 80039de:	461a      	mov	r2, r3
 80039e0:	4603      	mov	r3, r0
 80039e2:	70fb      	strb	r3, [r7, #3]
 80039e4:	460b      	mov	r3, r1
 80039e6:	803b      	strh	r3, [r7, #0]
 80039e8:	4613      	mov	r3, r2
 80039ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	da0f      	bge.n	8003a18 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	f003 020f 	and.w	r2, r3, #15
 80039fe:	4613      	mov	r3, r2
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	3310      	adds	r3, #16
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2201      	movs	r2, #1
 8003a14:	705a      	strb	r2, [r3, #1]
 8003a16:	e00f      	b.n	8003a38 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	f003 020f 	and.w	r2, r3, #15
 8003a1e:	4613      	mov	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3304      	adds	r3, #4
 8003a30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a38:	78fb      	ldrb	r3, [r7, #3]
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003a44:	883b      	ldrh	r3, [r7, #0]
 8003a46:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	78ba      	ldrb	r2, [r7, #2]
 8003a52:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	785b      	ldrb	r3, [r3, #1]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	461a      	mov	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a66:	78bb      	ldrb	r3, [r7, #2]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d102      	bne.n	8003a72 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_PCD_EP_Open+0xae>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e00e      	b.n	8003a9e <HAL_PCD_EP_Open+0xcc>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68f9      	ldr	r1, [r7, #12]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f003 f994 	bl	8006dbc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003a9c:	7afb      	ldrb	r3, [r7, #11]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b084      	sub	sp, #16
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ab2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	da0f      	bge.n	8003ada <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aba:	78fb      	ldrb	r3, [r7, #3]
 8003abc:	f003 020f 	and.w	r2, r3, #15
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	3310      	adds	r3, #16
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	4413      	add	r3, r2
 8003ace:	3304      	adds	r3, #4
 8003ad0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	705a      	strb	r2, [r3, #1]
 8003ad8:	e00f      	b.n	8003afa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ada:	78fb      	ldrb	r3, [r7, #3]
 8003adc:	f003 020f 	and.w	r2, r3, #15
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	4413      	add	r3, r2
 8003af0:	3304      	adds	r3, #4
 8003af2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003afa:	78fb      	ldrb	r3, [r7, #3]
 8003afc:	f003 030f 	and.w	r3, r3, #15
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_PCD_EP_Close+0x6e>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e00e      	b.n	8003b32 <HAL_PCD_EP_Close+0x8c>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68f9      	ldr	r1, [r7, #12]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f003 f9d2 	bl	8006ecc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b086      	sub	sp, #24
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	603b      	str	r3, [r7, #0]
 8003b46:	460b      	mov	r3, r1
 8003b48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b4a:	7afb      	ldrb	r3, [r7, #11]
 8003b4c:	f003 020f 	and.w	r2, r3, #15
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4413      	add	r3, r2
 8003b60:	3304      	adds	r3, #4
 8003b62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2200      	movs	r2, #0
 8003b74:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b7c:	7afb      	ldrb	r3, [r7, #11]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	799b      	ldrb	r3, [r3, #6]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d102      	bne.n	8003b96 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	799b      	ldrb	r3, [r3, #6]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	6979      	ldr	r1, [r7, #20]
 8003ba2:	f003 fa6f 	bl	8007084 <USB_EPStartXfer>

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	f003 020f 	and.w	r2, r3, #15
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003bd2:	681b      	ldr	r3, [r3, #0]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	607a      	str	r2, [r7, #4]
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	460b      	mov	r3, r1
 8003bee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf0:	7afb      	ldrb	r3, [r7, #11]
 8003bf2:	f003 020f 	and.w	r2, r3, #15
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	3310      	adds	r3, #16
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4413      	add	r3, r2
 8003c04:	3304      	adds	r3, #4
 8003c06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2200      	movs	r2, #0
 8003c18:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c20:	7afb      	ldrb	r3, [r7, #11]
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	b2da      	uxtb	r2, r3
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	799b      	ldrb	r3, [r3, #6]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d102      	bne.n	8003c3a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	799b      	ldrb	r3, [r3, #6]
 8003c42:	461a      	mov	r2, r3
 8003c44:	6979      	ldr	r1, [r7, #20]
 8003c46:	f003 fa1d 	bl	8007084 <USB_EPStartXfer>

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	7912      	ldrb	r2, [r2, #4]
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d901      	bls.n	8003c72 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e04f      	b.n	8003d12 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	da0f      	bge.n	8003c9a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c7a:	78fb      	ldrb	r3, [r7, #3]
 8003c7c:	f003 020f 	and.w	r2, r3, #15
 8003c80:	4613      	mov	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	4413      	add	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	3310      	adds	r3, #16
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	3304      	adds	r3, #4
 8003c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	705a      	strb	r2, [r3, #1]
 8003c98:	e00d      	b.n	8003cb6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c9a:	78fa      	ldrb	r2, [r7, #3]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	4413      	add	r3, r2
 8003cac:	3304      	adds	r3, #4
 8003cae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_PCD_EP_SetStall+0x82>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e01d      	b.n	8003d12 <HAL_PCD_EP_SetStall+0xbe>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68f9      	ldr	r1, [r7, #12]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f003 fdb1 	bl	800784c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cea:	78fb      	ldrb	r3, [r7, #3]
 8003cec:	f003 030f 	and.w	r3, r3, #15
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d109      	bne.n	8003d08 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	7999      	ldrb	r1, [r3, #6]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d02:	461a      	mov	r2, r3
 8003d04:	f003 ffa4 	bl	8007c50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b084      	sub	sp, #16
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	460b      	mov	r3, r1
 8003d24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	f003 030f 	and.w	r3, r3, #15
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	7912      	ldrb	r2, [r2, #4]
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d901      	bls.n	8003d38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e042      	b.n	8003dbe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	da0f      	bge.n	8003d60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d40:	78fb      	ldrb	r3, [r7, #3]
 8003d42:	f003 020f 	and.w	r2, r3, #15
 8003d46:	4613      	mov	r3, r2
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	3310      	adds	r3, #16
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	4413      	add	r3, r2
 8003d54:	3304      	adds	r3, #4
 8003d56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	705a      	strb	r2, [r3, #1]
 8003d5e:	e00f      	b.n	8003d80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	f003 020f 	and.w	r2, r3, #15
 8003d66:	4613      	mov	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	4413      	add	r3, r2
 8003d76:	3304      	adds	r3, #4
 8003d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d86:	78fb      	ldrb	r3, [r7, #3]
 8003d88:	f003 030f 	and.w	r3, r3, #15
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_PCD_EP_ClrStall+0x86>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e00e      	b.n	8003dbe <HAL_PCD_EP_ClrStall+0xa4>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68f9      	ldr	r1, [r7, #12]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f003 fdba 	bl	8007928 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3710      	adds	r7, #16
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b084      	sub	sp, #16
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
 8003dce:	460b      	mov	r3, r1
 8003dd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003dd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	da0c      	bge.n	8003df4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dda:	78fb      	ldrb	r3, [r7, #3]
 8003ddc:	f003 020f 	and.w	r2, r3, #15
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	3310      	adds	r3, #16
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	3304      	adds	r3, #4
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	e00c      	b.n	8003e0e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	f003 020f 	and.w	r2, r3, #15
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	4413      	add	r3, r2
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68f9      	ldr	r1, [r7, #12]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f003 fbd9 	bl	80075cc <USB_EPStopXfer>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e1e:	7afb      	ldrb	r3, [r7, #11]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08a      	sub	sp, #40	@ 0x28
 8003e2c:	af02      	add	r7, sp, #8
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4413      	add	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	3310      	adds	r3, #16
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d901      	bls.n	8003e60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e06b      	b.n	8003f38 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	69fa      	ldr	r2, [r7, #28]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d902      	bls.n	8003e7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	3303      	adds	r3, #3
 8003e80:	089b      	lsrs	r3, r3, #2
 8003e82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e84:	e02a      	b.n	8003edc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	69fa      	ldr	r2, [r7, #28]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d902      	bls.n	8003ea2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	3303      	adds	r3, #3
 8003ea6:	089b      	lsrs	r3, r3, #2
 8003ea8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	68d9      	ldr	r1, [r3, #12]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	6978      	ldr	r0, [r7, #20]
 8003ec0:	f003 fc2e 	bl	8007720 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	441a      	add	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	695a      	ldr	r2, [r3, #20]
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	441a      	add	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d809      	bhi.n	8003f06 <PCD_WriteEmptyTxFifo+0xde>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d203      	bcs.n	8003f06 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1bf      	bne.n	8003e86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d811      	bhi.n	8003f36 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	2201      	movs	r2, #1
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	6939      	ldr	r1, [r7, #16]
 8003f2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f32:	4013      	ands	r3, r2
 8003f34:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3720      	adds	r7, #32
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b088      	sub	sp, #32
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	333c      	adds	r3, #60	@ 0x3c
 8003f58:	3304      	adds	r3, #4
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	799b      	ldrb	r3, [r3, #6]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d17b      	bne.n	800406e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d015      	beq.n	8003fac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	4a61      	ldr	r2, [pc, #388]	@ (8004108 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	f240 80b9 	bls.w	80040fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 80b3 	beq.w	80040fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fa8:	6093      	str	r3, [r2, #8]
 8003faa:	e0a7      	b.n	80040fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f003 0320 	and.w	r3, r3, #32
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d009      	beq.n	8003fca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	015a      	lsls	r2, r3, #5
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	2320      	movs	r3, #32
 8003fc6:	6093      	str	r3, [r2, #8]
 8003fc8:	e098      	b.n	80040fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f040 8093 	bne.w	80040fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	4a4b      	ldr	r2, [pc, #300]	@ (8004108 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d90f      	bls.n	8003ffe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ffa:	6093      	str	r3, [r2, #8]
 8003ffc:	e07e      	b.n	80040fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	4613      	mov	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	4413      	add	r3, r2
 8004010:	3304      	adds	r3, #4
 8004012:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a1a      	ldr	r2, [r3, #32]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	0159      	lsls	r1, r3, #5
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	440b      	add	r3, r1
 8004020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800402a:	1ad2      	subs	r2, r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d114      	bne.n	8004060 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004048:	461a      	mov	r2, r3
 800404a:	2101      	movs	r1, #1
 800404c:	f003 fe00 	bl	8007c50 <USB_EP0_OutStart>
 8004050:	e006      	b.n	8004060 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	441a      	add	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	b2db      	uxtb	r3, r3
 8004064:	4619      	mov	r1, r3
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f01a f812 	bl	801e090 <HAL_PCD_DataOutStageCallback>
 800406c:	e046      	b.n	80040fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	4a26      	ldr	r2, [pc, #152]	@ (800410c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d124      	bne.n	80040c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800408c:	461a      	mov	r2, r3
 800408e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004092:	6093      	str	r3, [r2, #8]
 8004094:	e032      	b.n	80040fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b00      	cmp	r3, #0
 800409e:	d008      	beq.n	80040b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ac:	461a      	mov	r2, r3
 80040ae:	2320      	movs	r3, #32
 80040b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	4619      	mov	r1, r3
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f019 ffe9 	bl	801e090 <HAL_PCD_DataOutStageCallback>
 80040be:	e01d      	b.n	80040fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d114      	bne.n	80040f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	4613      	mov	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d108      	bne.n	80040f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6818      	ldr	r0, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80040e8:	461a      	mov	r2, r3
 80040ea:	2100      	movs	r1, #0
 80040ec:	f003 fdb0 	bl	8007c50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	4619      	mov	r1, r3
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f019 ffca 	bl	801e090 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3720      	adds	r7, #32
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	4f54300a 	.word	0x4f54300a
 800410c:	4f54310a 	.word	0x4f54310a

08004110 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	333c      	adds	r3, #60	@ 0x3c
 8004128:	3304      	adds	r3, #4
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4a15      	ldr	r2, [pc, #84]	@ (8004198 <PCD_EP_OutSetupPacket_int+0x88>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d90e      	bls.n	8004164 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800414c:	2b00      	cmp	r3, #0
 800414e:	d009      	beq.n	8004164 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4413      	add	r3, r2
 8004158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800415c:	461a      	mov	r2, r3
 800415e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004162:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f019 ff81 	bl	801e06c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4a0a      	ldr	r2, [pc, #40]	@ (8004198 <PCD_EP_OutSetupPacket_int+0x88>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d90c      	bls.n	800418c <PCD_EP_OutSetupPacket_int+0x7c>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	799b      	ldrb	r3, [r3, #6]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d108      	bne.n	800418c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6818      	ldr	r0, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004184:	461a      	mov	r2, r3
 8004186:	2101      	movs	r1, #1
 8004188:	f003 fd62 	bl	8007c50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3718      	adds	r7, #24
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	4f54300a 	.word	0x4f54300a

0800419c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	70fb      	strb	r3, [r7, #3]
 80041a8:	4613      	mov	r3, r2
 80041aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80041b4:	78fb      	ldrb	r3, [r7, #3]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d107      	bne.n	80041ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80041ba:	883b      	ldrh	r3, [r7, #0]
 80041bc:	0419      	lsls	r1, r3, #16
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80041c8:	e028      	b.n	800421c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d0:	0c1b      	lsrs	r3, r3, #16
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	4413      	add	r3, r2
 80041d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041d8:	2300      	movs	r3, #0
 80041da:	73fb      	strb	r3, [r7, #15]
 80041dc:	e00d      	b.n	80041fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	3340      	adds	r3, #64	@ 0x40
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	0c1b      	lsrs	r3, r3, #16
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	4413      	add	r3, r2
 80041f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
 80041f6:	3301      	adds	r3, #1
 80041f8:	73fb      	strb	r3, [r7, #15]
 80041fa:	7bfa      	ldrb	r2, [r7, #15]
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	3b01      	subs	r3, #1
 8004200:	429a      	cmp	r2, r3
 8004202:	d3ec      	bcc.n	80041de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004204:	883b      	ldrh	r3, [r7, #0]
 8004206:	0418      	lsls	r0, r3, #16
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6819      	ldr	r1, [r3, #0]
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	3b01      	subs	r3, #1
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	4302      	orrs	r2, r0
 8004214:	3340      	adds	r3, #64	@ 0x40
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	460b      	mov	r3, r1
 8004234:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	887a      	ldrh	r2, [r7, #2]
 800423c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800427a:	4b05      	ldr	r3, [pc, #20]	@ (8004290 <HAL_PCDEx_ActivateLPM+0x44>)
 800427c:	4313      	orrs	r3, r2
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3714      	adds	r7, #20
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	10000003 	.word	0x10000003

08004294 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004298:	4b05      	ldr	r3, [pc, #20]	@ (80042b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a04      	ldr	r2, [pc, #16]	@ (80042b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800429e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042a2:	6013      	str	r3, [r2, #0]
}
 80042a4:	bf00      	nop
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40007000 	.word	0x40007000

080042b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80042ba:	2300      	movs	r3, #0
 80042bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042be:	4b23      	ldr	r3, [pc, #140]	@ (800434c <HAL_PWREx_EnableOverDrive+0x98>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c2:	4a22      	ldr	r2, [pc, #136]	@ (800434c <HAL_PWREx_EnableOverDrive+0x98>)
 80042c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80042ca:	4b20      	ldr	r3, [pc, #128]	@ (800434c <HAL_PWREx_EnableOverDrive+0x98>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80042d6:	4b1e      	ldr	r3, [pc, #120]	@ (8004350 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a1d      	ldr	r2, [pc, #116]	@ (8004350 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042e2:	f7fc fff3 	bl	80012cc <HAL_GetTick>
 80042e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042e8:	e009      	b.n	80042fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042ea:	f7fc ffef 	bl	80012cc <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042f8:	d901      	bls.n	80042fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e022      	b.n	8004344 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042fe:	4b14      	ldr	r3, [pc, #80]	@ (8004350 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004306:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800430a:	d1ee      	bne.n	80042ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800430c:	4b10      	ldr	r3, [pc, #64]	@ (8004350 <HAL_PWREx_EnableOverDrive+0x9c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a0f      	ldr	r2, [pc, #60]	@ (8004350 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004316:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004318:	f7fc ffd8 	bl	80012cc <HAL_GetTick>
 800431c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800431e:	e009      	b.n	8004334 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004320:	f7fc ffd4 	bl	80012cc <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800432e:	d901      	bls.n	8004334 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e007      	b.n	8004344 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004334:	4b06      	ldr	r3, [pc, #24]	@ (8004350 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004340:	d1ee      	bne.n	8004320 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40023800 	.word	0x40023800
 8004350:	40007000 	.word	0x40007000

08004354 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800435c:	2300      	movs	r3, #0
 800435e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e29b      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 8087 	beq.w	8004486 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004378:	4b96      	ldr	r3, [pc, #600]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b04      	cmp	r3, #4
 8004382:	d00c      	beq.n	800439e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004384:	4b93      	ldr	r3, [pc, #588]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f003 030c 	and.w	r3, r3, #12
 800438c:	2b08      	cmp	r3, #8
 800438e:	d112      	bne.n	80043b6 <HAL_RCC_OscConfig+0x62>
 8004390:	4b90      	ldr	r3, [pc, #576]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004398:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800439c:	d10b      	bne.n	80043b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800439e:	4b8d      	ldr	r3, [pc, #564]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d06c      	beq.n	8004484 <HAL_RCC_OscConfig+0x130>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d168      	bne.n	8004484 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e275      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043be:	d106      	bne.n	80043ce <HAL_RCC_OscConfig+0x7a>
 80043c0:	4b84      	ldr	r3, [pc, #528]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a83      	ldr	r2, [pc, #524]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 80043c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	e02e      	b.n	800442c <HAL_RCC_OscConfig+0xd8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x9c>
 80043d6:	4b7f      	ldr	r3, [pc, #508]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a7e      	ldr	r2, [pc, #504]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 80043dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	4b7c      	ldr	r3, [pc, #496]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a7b      	ldr	r2, [pc, #492]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 80043e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	e01d      	b.n	800442c <HAL_RCC_OscConfig+0xd8>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043f8:	d10c      	bne.n	8004414 <HAL_RCC_OscConfig+0xc0>
 80043fa:	4b76      	ldr	r3, [pc, #472]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a75      	ldr	r2, [pc, #468]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	4b73      	ldr	r3, [pc, #460]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a72      	ldr	r2, [pc, #456]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 800440c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	e00b      	b.n	800442c <HAL_RCC_OscConfig+0xd8>
 8004414:	4b6f      	ldr	r3, [pc, #444]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a6e      	ldr	r2, [pc, #440]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 800441a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	4b6c      	ldr	r3, [pc, #432]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a6b      	ldr	r2, [pc, #428]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004426:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800442a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d013      	beq.n	800445c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fc ff4a 	bl	80012cc <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800443c:	f7fc ff46 	bl	80012cc <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b64      	cmp	r3, #100	@ 0x64
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e229      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444e:	4b61      	ldr	r3, [pc, #388]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f0      	beq.n	800443c <HAL_RCC_OscConfig+0xe8>
 800445a:	e014      	b.n	8004486 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445c:	f7fc ff36 	bl	80012cc <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004464:	f7fc ff32 	bl	80012cc <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b64      	cmp	r3, #100	@ 0x64
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e215      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004476:	4b57      	ldr	r3, [pc, #348]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f0      	bne.n	8004464 <HAL_RCC_OscConfig+0x110>
 8004482:	e000      	b.n	8004486 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d069      	beq.n	8004566 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004492:	4b50      	ldr	r3, [pc, #320]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00b      	beq.n	80044b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800449e:	4b4d      	ldr	r3, [pc, #308]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d11c      	bne.n	80044e4 <HAL_RCC_OscConfig+0x190>
 80044aa:	4b4a      	ldr	r3, [pc, #296]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d116      	bne.n	80044e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044b6:	4b47      	ldr	r3, [pc, #284]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d005      	beq.n	80044ce <HAL_RCC_OscConfig+0x17a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d001      	beq.n	80044ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e1e9      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ce:	4b41      	ldr	r3, [pc, #260]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	493d      	ldr	r1, [pc, #244]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044e2:	e040      	b.n	8004566 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d023      	beq.n	8004534 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044ec:	4b39      	ldr	r3, [pc, #228]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a38      	ldr	r2, [pc, #224]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 80044f2:	f043 0301 	orr.w	r3, r3, #1
 80044f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fc fee8 	bl	80012cc <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004500:	f7fc fee4 	bl	80012cc <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e1c7      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004512:	4b30      	ldr	r3, [pc, #192]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0f0      	beq.n	8004500 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451e:	4b2d      	ldr	r3, [pc, #180]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	4929      	ldr	r1, [pc, #164]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 800452e:	4313      	orrs	r3, r2
 8004530:	600b      	str	r3, [r1, #0]
 8004532:	e018      	b.n	8004566 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004534:	4b27      	ldr	r3, [pc, #156]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a26      	ldr	r2, [pc, #152]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004540:	f7fc fec4 	bl	80012cc <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004546:	e008      	b.n	800455a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004548:	f7fc fec0 	bl	80012cc <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d901      	bls.n	800455a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e1a3      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800455a:	4b1e      	ldr	r3, [pc, #120]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1f0      	bne.n	8004548 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d038      	beq.n	80045e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d019      	beq.n	80045ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800457a:	4b16      	ldr	r3, [pc, #88]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 800457c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800457e:	4a15      	ldr	r2, [pc, #84]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 8004580:	f043 0301 	orr.w	r3, r3, #1
 8004584:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004586:	f7fc fea1 	bl	80012cc <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800458e:	f7fc fe9d 	bl	80012cc <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e180      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a0:	4b0c      	ldr	r3, [pc, #48]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 80045a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0f0      	beq.n	800458e <HAL_RCC_OscConfig+0x23a>
 80045ac:	e01a      	b.n	80045e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ae:	4b09      	ldr	r3, [pc, #36]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 80045b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045b2:	4a08      	ldr	r2, [pc, #32]	@ (80045d4 <HAL_RCC_OscConfig+0x280>)
 80045b4:	f023 0301 	bic.w	r3, r3, #1
 80045b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ba:	f7fc fe87 	bl	80012cc <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c0:	e00a      	b.n	80045d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045c2:	f7fc fe83 	bl	80012cc <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d903      	bls.n	80045d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e166      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
 80045d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d8:	4b92      	ldr	r3, [pc, #584]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80045da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1ee      	bne.n	80045c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80a4 	beq.w	800473a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045f2:	4b8c      	ldr	r3, [pc, #560]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10d      	bne.n	800461a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80045fe:	4b89      	ldr	r3, [pc, #548]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004602:	4a88      	ldr	r2, [pc, #544]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004608:	6413      	str	r3, [r2, #64]	@ 0x40
 800460a:	4b86      	ldr	r3, [pc, #536]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004612:	60bb      	str	r3, [r7, #8]
 8004614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004616:	2301      	movs	r3, #1
 8004618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800461a:	4b83      	ldr	r3, [pc, #524]	@ (8004828 <HAL_RCC_OscConfig+0x4d4>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004622:	2b00      	cmp	r3, #0
 8004624:	d118      	bne.n	8004658 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004626:	4b80      	ldr	r3, [pc, #512]	@ (8004828 <HAL_RCC_OscConfig+0x4d4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a7f      	ldr	r2, [pc, #508]	@ (8004828 <HAL_RCC_OscConfig+0x4d4>)
 800462c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004632:	f7fc fe4b 	bl	80012cc <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800463a:	f7fc fe47 	bl	80012cc <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b64      	cmp	r3, #100	@ 0x64
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e12a      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800464c:	4b76      	ldr	r3, [pc, #472]	@ (8004828 <HAL_RCC_OscConfig+0x4d4>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0f0      	beq.n	800463a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d106      	bne.n	800466e <HAL_RCC_OscConfig+0x31a>
 8004660:	4b70      	ldr	r3, [pc, #448]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004664:	4a6f      	ldr	r2, [pc, #444]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	6713      	str	r3, [r2, #112]	@ 0x70
 800466c:	e02d      	b.n	80046ca <HAL_RCC_OscConfig+0x376>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10c      	bne.n	8004690 <HAL_RCC_OscConfig+0x33c>
 8004676:	4b6b      	ldr	r3, [pc, #428]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800467a:	4a6a      	ldr	r2, [pc, #424]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 800467c:	f023 0301 	bic.w	r3, r3, #1
 8004680:	6713      	str	r3, [r2, #112]	@ 0x70
 8004682:	4b68      	ldr	r3, [pc, #416]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004686:	4a67      	ldr	r2, [pc, #412]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004688:	f023 0304 	bic.w	r3, r3, #4
 800468c:	6713      	str	r3, [r2, #112]	@ 0x70
 800468e:	e01c      	b.n	80046ca <HAL_RCC_OscConfig+0x376>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	2b05      	cmp	r3, #5
 8004696:	d10c      	bne.n	80046b2 <HAL_RCC_OscConfig+0x35e>
 8004698:	4b62      	ldr	r3, [pc, #392]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 800469a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800469c:	4a61      	ldr	r2, [pc, #388]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 800469e:	f043 0304 	orr.w	r3, r3, #4
 80046a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80046a4:	4b5f      	ldr	r3, [pc, #380]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80046a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a8:	4a5e      	ldr	r2, [pc, #376]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80046aa:	f043 0301 	orr.w	r3, r3, #1
 80046ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80046b0:	e00b      	b.n	80046ca <HAL_RCC_OscConfig+0x376>
 80046b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b6:	4a5b      	ldr	r2, [pc, #364]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80046b8:	f023 0301 	bic.w	r3, r3, #1
 80046bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80046be:	4b59      	ldr	r3, [pc, #356]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046c2:	4a58      	ldr	r2, [pc, #352]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80046c4:	f023 0304 	bic.w	r3, r3, #4
 80046c8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d015      	beq.n	80046fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d2:	f7fc fdfb 	bl	80012cc <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d8:	e00a      	b.n	80046f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046da:	f7fc fdf7 	bl	80012cc <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d901      	bls.n	80046f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e0d8      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f0:	4b4c      	ldr	r3, [pc, #304]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80046f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0ee      	beq.n	80046da <HAL_RCC_OscConfig+0x386>
 80046fc:	e014      	b.n	8004728 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fe:	f7fc fde5 	bl	80012cc <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004704:	e00a      	b.n	800471c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004706:	f7fc fde1 	bl	80012cc <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004714:	4293      	cmp	r3, r2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e0c2      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800471c:	4b41      	ldr	r3, [pc, #260]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 800471e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1ee      	bne.n	8004706 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004728:	7dfb      	ldrb	r3, [r7, #23]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d105      	bne.n	800473a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800472e:	4b3d      	ldr	r3, [pc, #244]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004732:	4a3c      	ldr	r2, [pc, #240]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004734:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004738:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 80ae 	beq.w	80048a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004744:	4b37      	ldr	r3, [pc, #220]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 030c 	and.w	r3, r3, #12
 800474c:	2b08      	cmp	r3, #8
 800474e:	d06d      	beq.n	800482c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	2b02      	cmp	r3, #2
 8004756:	d14b      	bne.n	80047f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004758:	4b32      	ldr	r3, [pc, #200]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a31      	ldr	r2, [pc, #196]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 800475e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004764:	f7fc fdb2 	bl	80012cc <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476c:	f7fc fdae 	bl	80012cc <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e091      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477e:	4b29      	ldr	r3, [pc, #164]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f0      	bne.n	800476c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69da      	ldr	r2, [r3, #28]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004798:	019b      	lsls	r3, r3, #6
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	3b01      	subs	r3, #1
 80047a4:	041b      	lsls	r3, r3, #16
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ac:	061b      	lsls	r3, r3, #24
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b4:	071b      	lsls	r3, r3, #28
 80047b6:	491b      	ldr	r1, [pc, #108]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047bc:	4b19      	ldr	r3, [pc, #100]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a18      	ldr	r2, [pc, #96]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80047c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c8:	f7fc fd80 	bl	80012cc <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d0:	f7fc fd7c 	bl	80012cc <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e05f      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e2:	4b10      	ldr	r3, [pc, #64]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0f0      	beq.n	80047d0 <HAL_RCC_OscConfig+0x47c>
 80047ee:	e057      	b.n	80048a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a0b      	ldr	r2, [pc, #44]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 80047f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fc:	f7fc fd66 	bl	80012cc <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004804:	f7fc fd62 	bl	80012cc <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e045      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004816:	4b03      	ldr	r3, [pc, #12]	@ (8004824 <HAL_RCC_OscConfig+0x4d0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f0      	bne.n	8004804 <HAL_RCC_OscConfig+0x4b0>
 8004822:	e03d      	b.n	80048a0 <HAL_RCC_OscConfig+0x54c>
 8004824:	40023800 	.word	0x40023800
 8004828:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800482c:	4b1f      	ldr	r3, [pc, #124]	@ (80048ac <HAL_RCC_OscConfig+0x558>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d030      	beq.n	800489c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004844:	429a      	cmp	r2, r3
 8004846:	d129      	bne.n	800489c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004852:	429a      	cmp	r2, r3
 8004854:	d122      	bne.n	800489c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800485c:	4013      	ands	r3, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004862:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004864:	4293      	cmp	r3, r2
 8004866:	d119      	bne.n	800489c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004872:	085b      	lsrs	r3, r3, #1
 8004874:	3b01      	subs	r3, #1
 8004876:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004878:	429a      	cmp	r2, r3
 800487a:	d10f      	bne.n	800489c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004886:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004888:	429a      	cmp	r2, r3
 800488a:	d107      	bne.n	800489c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004896:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004898:	429a      	cmp	r2, r3
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	40023800 	.word	0x40023800

080048b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0d0      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048c8:	4b6a      	ldr	r3, [pc, #424]	@ (8004a74 <HAL_RCC_ClockConfig+0x1c4>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d910      	bls.n	80048f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d6:	4b67      	ldr	r3, [pc, #412]	@ (8004a74 <HAL_RCC_ClockConfig+0x1c4>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f023 020f 	bic.w	r2, r3, #15
 80048de:	4965      	ldr	r1, [pc, #404]	@ (8004a74 <HAL_RCC_ClockConfig+0x1c4>)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e6:	4b63      	ldr	r3, [pc, #396]	@ (8004a74 <HAL_RCC_ClockConfig+0x1c4>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0b8      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d020      	beq.n	8004946 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004910:	4b59      	ldr	r3, [pc, #356]	@ (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	4a58      	ldr	r2, [pc, #352]	@ (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004916:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800491a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0308 	and.w	r3, r3, #8
 8004924:	2b00      	cmp	r3, #0
 8004926:	d005      	beq.n	8004934 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004928:	4b53      	ldr	r3, [pc, #332]	@ (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	4a52      	ldr	r2, [pc, #328]	@ (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 800492e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004932:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004934:	4b50      	ldr	r3, [pc, #320]	@ (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	494d      	ldr	r1, [pc, #308]	@ (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004942:	4313      	orrs	r3, r2
 8004944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d040      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d107      	bne.n	800496a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495a:	4b47      	ldr	r3, [pc, #284]	@ (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d115      	bne.n	8004992 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e07f      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b02      	cmp	r3, #2
 8004970:	d107      	bne.n	8004982 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004972:	4b41      	ldr	r3, [pc, #260]	@ (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e073      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004982:	4b3d      	ldr	r3, [pc, #244]	@ (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e06b      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004992:	4b39      	ldr	r3, [pc, #228]	@ (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f023 0203 	bic.w	r2, r3, #3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	4936      	ldr	r1, [pc, #216]	@ (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a4:	f7fc fc92 	bl	80012cc <HAL_GetTick>
 80049a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049aa:	e00a      	b.n	80049c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ac:	f7fc fc8e 	bl	80012cc <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e053      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c2:	4b2d      	ldr	r3, [pc, #180]	@ (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 020c 	and.w	r2, r3, #12
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d1eb      	bne.n	80049ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049d4:	4b27      	ldr	r3, [pc, #156]	@ (8004a74 <HAL_RCC_ClockConfig+0x1c4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d210      	bcs.n	8004a04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e2:	4b24      	ldr	r3, [pc, #144]	@ (8004a74 <HAL_RCC_ClockConfig+0x1c4>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f023 020f 	bic.w	r2, r3, #15
 80049ea:	4922      	ldr	r1, [pc, #136]	@ (8004a74 <HAL_RCC_ClockConfig+0x1c4>)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f2:	4b20      	ldr	r3, [pc, #128]	@ (8004a74 <HAL_RCC_ClockConfig+0x1c4>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e032      	b.n	8004a6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d008      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a10:	4b19      	ldr	r3, [pc, #100]	@ (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4916      	ldr	r1, [pc, #88]	@ (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d009      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a2e:	4b12      	ldr	r3, [pc, #72]	@ (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	490e      	ldr	r1, [pc, #56]	@ (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a42:	f000 f821 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8004a46:	4602      	mov	r2, r0
 8004a48:	4b0b      	ldr	r3, [pc, #44]	@ (8004a78 <HAL_RCC_ClockConfig+0x1c8>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	091b      	lsrs	r3, r3, #4
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	490a      	ldr	r1, [pc, #40]	@ (8004a7c <HAL_RCC_ClockConfig+0x1cc>)
 8004a54:	5ccb      	ldrb	r3, [r1, r3]
 8004a56:	fa22 f303 	lsr.w	r3, r2, r3
 8004a5a:	4a09      	ldr	r2, [pc, #36]	@ (8004a80 <HAL_RCC_ClockConfig+0x1d0>)
 8004a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a5e:	4b09      	ldr	r3, [pc, #36]	@ (8004a84 <HAL_RCC_ClockConfig+0x1d4>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fc f952 	bl	8000d0c <HAL_InitTick>

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3710      	adds	r7, #16
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40023c00 	.word	0x40023c00
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	080235b8 	.word	0x080235b8
 8004a80:	20000000 	.word	0x20000000
 8004a84:	20000004 	.word	0x20000004

08004a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a8c:	b094      	sub	sp, #80	@ 0x50
 8004a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a90:	2300      	movs	r3, #0
 8004a92:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a94:	2300      	movs	r3, #0
 8004a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a98:	2300      	movs	r3, #0
 8004a9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aa0:	4b79      	ldr	r3, [pc, #484]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 030c 	and.w	r3, r3, #12
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d00d      	beq.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	f200 80e1 	bhi.w	8004c74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <HAL_RCC_GetSysClockFreq+0x34>
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004aba:	e0db      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004abc:	4b73      	ldr	r3, [pc, #460]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x204>)
 8004abe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ac0:	e0db      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ac2:	4b73      	ldr	r3, [pc, #460]	@ (8004c90 <HAL_RCC_GetSysClockFreq+0x208>)
 8004ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ac6:	e0d8      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ac8:	4b6f      	ldr	r3, [pc, #444]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ad0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004ad2:	4b6d      	ldr	r3, [pc, #436]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d063      	beq.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ade:	4b6a      	ldr	r3, [pc, #424]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	099b      	lsrs	r3, r3, #6
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ae8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004af2:	2300      	movs	r3, #0
 8004af4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004af6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004afa:	4622      	mov	r2, r4
 8004afc:	462b      	mov	r3, r5
 8004afe:	f04f 0000 	mov.w	r0, #0
 8004b02:	f04f 0100 	mov.w	r1, #0
 8004b06:	0159      	lsls	r1, r3, #5
 8004b08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b0c:	0150      	lsls	r0, r2, #5
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	4621      	mov	r1, r4
 8004b14:	1a51      	subs	r1, r2, r1
 8004b16:	6139      	str	r1, [r7, #16]
 8004b18:	4629      	mov	r1, r5
 8004b1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b2c:	4659      	mov	r1, fp
 8004b2e:	018b      	lsls	r3, r1, #6
 8004b30:	4651      	mov	r1, sl
 8004b32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b36:	4651      	mov	r1, sl
 8004b38:	018a      	lsls	r2, r1, #6
 8004b3a:	4651      	mov	r1, sl
 8004b3c:	ebb2 0801 	subs.w	r8, r2, r1
 8004b40:	4659      	mov	r1, fp
 8004b42:	eb63 0901 	sbc.w	r9, r3, r1
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b5a:	4690      	mov	r8, r2
 8004b5c:	4699      	mov	r9, r3
 8004b5e:	4623      	mov	r3, r4
 8004b60:	eb18 0303 	adds.w	r3, r8, r3
 8004b64:	60bb      	str	r3, [r7, #8]
 8004b66:	462b      	mov	r3, r5
 8004b68:	eb49 0303 	adc.w	r3, r9, r3
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	f04f 0300 	mov.w	r3, #0
 8004b76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b7a:	4629      	mov	r1, r5
 8004b7c:	024b      	lsls	r3, r1, #9
 8004b7e:	4621      	mov	r1, r4
 8004b80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b84:	4621      	mov	r1, r4
 8004b86:	024a      	lsls	r2, r1, #9
 8004b88:	4610      	mov	r0, r2
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b8e:	2200      	movs	r2, #0
 8004b90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b98:	f7fb fbaa 	bl	80002f0 <__aeabi_uldivmod>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ba4:	e058      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ba6:	4b38      	ldr	r3, [pc, #224]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	099b      	lsrs	r3, r3, #6
 8004bac:	2200      	movs	r2, #0
 8004bae:	4618      	mov	r0, r3
 8004bb0:	4611      	mov	r1, r2
 8004bb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bb6:	623b      	str	r3, [r7, #32]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bc0:	4642      	mov	r2, r8
 8004bc2:	464b      	mov	r3, r9
 8004bc4:	f04f 0000 	mov.w	r0, #0
 8004bc8:	f04f 0100 	mov.w	r1, #0
 8004bcc:	0159      	lsls	r1, r3, #5
 8004bce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bd2:	0150      	lsls	r0, r2, #5
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4641      	mov	r1, r8
 8004bda:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bde:	4649      	mov	r1, r9
 8004be0:	eb63 0b01 	sbc.w	fp, r3, r1
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bf0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bf4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bf8:	ebb2 040a 	subs.w	r4, r2, sl
 8004bfc:	eb63 050b 	sbc.w	r5, r3, fp
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	00eb      	lsls	r3, r5, #3
 8004c0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c0e:	00e2      	lsls	r2, r4, #3
 8004c10:	4614      	mov	r4, r2
 8004c12:	461d      	mov	r5, r3
 8004c14:	4643      	mov	r3, r8
 8004c16:	18e3      	adds	r3, r4, r3
 8004c18:	603b      	str	r3, [r7, #0]
 8004c1a:	464b      	mov	r3, r9
 8004c1c:	eb45 0303 	adc.w	r3, r5, r3
 8004c20:	607b      	str	r3, [r7, #4]
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c2e:	4629      	mov	r1, r5
 8004c30:	028b      	lsls	r3, r1, #10
 8004c32:	4621      	mov	r1, r4
 8004c34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c38:	4621      	mov	r1, r4
 8004c3a:	028a      	lsls	r2, r1, #10
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c42:	2200      	movs	r2, #0
 8004c44:	61bb      	str	r3, [r7, #24]
 8004c46:	61fa      	str	r2, [r7, #28]
 8004c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c4c:	f7fb fb50 	bl	80002f0 <__aeabi_uldivmod>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4613      	mov	r3, r2
 8004c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004c58:	4b0b      	ldr	r3, [pc, #44]	@ (8004c88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	0c1b      	lsrs	r3, r3, #16
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	3301      	adds	r3, #1
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004c68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c72:	e002      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c74:	4b05      	ldr	r3, [pc, #20]	@ (8004c8c <HAL_RCC_GetSysClockFreq+0x204>)
 8004c76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3750      	adds	r7, #80	@ 0x50
 8004c80:	46bd      	mov	sp, r7
 8004c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c86:	bf00      	nop
 8004c88:	40023800 	.word	0x40023800
 8004c8c:	00f42400 	.word	0x00f42400
 8004c90:	007a1200 	.word	0x007a1200

08004c94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c98:	4b03      	ldr	r3, [pc, #12]	@ (8004ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	20000000 	.word	0x20000000

08004cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cb0:	f7ff fff0 	bl	8004c94 <HAL_RCC_GetHCLKFreq>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	4b05      	ldr	r3, [pc, #20]	@ (8004ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	0a9b      	lsrs	r3, r3, #10
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	4903      	ldr	r1, [pc, #12]	@ (8004cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cc2:	5ccb      	ldrb	r3, [r1, r3]
 8004cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	080235c8 	.word	0x080235c8

08004cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cd8:	f7ff ffdc 	bl	8004c94 <HAL_RCC_GetHCLKFreq>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	0b5b      	lsrs	r3, r3, #13
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	4903      	ldr	r1, [pc, #12]	@ (8004cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cea:	5ccb      	ldrb	r3, [r1, r3]
 8004cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	080235c8 	.word	0x080235c8

08004cfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	220f      	movs	r2, #15
 8004d0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d0c:	4b12      	ldr	r3, [pc, #72]	@ (8004d58 <HAL_RCC_GetClockConfig+0x5c>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 0203 	and.w	r2, r3, #3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d18:	4b0f      	ldr	r3, [pc, #60]	@ (8004d58 <HAL_RCC_GetClockConfig+0x5c>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d24:	4b0c      	ldr	r3, [pc, #48]	@ (8004d58 <HAL_RCC_GetClockConfig+0x5c>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004d30:	4b09      	ldr	r3, [pc, #36]	@ (8004d58 <HAL_RCC_GetClockConfig+0x5c>)
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	08db      	lsrs	r3, r3, #3
 8004d36:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d3e:	4b07      	ldr	r3, [pc, #28]	@ (8004d5c <HAL_RCC_GetClockConfig+0x60>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 020f 	and.w	r2, r3, #15
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	601a      	str	r2, [r3, #0]
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	40023c00 	.word	0x40023c00

08004d60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004d70:	2300      	movs	r3, #0
 8004d72:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d012      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d88:	4b69      	ldr	r3, [pc, #420]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	4a68      	ldr	r2, [pc, #416]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d8e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004d92:	6093      	str	r3, [r2, #8]
 8004d94:	4b66      	ldr	r3, [pc, #408]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d9c:	4964      	ldr	r1, [pc, #400]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004daa:	2301      	movs	r3, #1
 8004dac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d017      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dba:	4b5d      	ldr	r3, [pc, #372]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dc0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc8:	4959      	ldr	r1, [pc, #356]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dd8:	d101      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004de6:	2301      	movs	r3, #1
 8004de8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d017      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004df6:	4b4e      	ldr	r3, [pc, #312]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dfc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e04:	494a      	ldr	r1, [pc, #296]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e14:	d101      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e16:	2301      	movs	r3, #1
 8004e18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004e22:	2301      	movs	r3, #1
 8004e24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e32:	2301      	movs	r3, #1
 8004e34:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0320 	and.w	r3, r3, #32
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 808b 	beq.w	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e44:	4b3a      	ldr	r3, [pc, #232]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e48:	4a39      	ldr	r2, [pc, #228]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e50:	4b37      	ldr	r3, [pc, #220]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e58:	60bb      	str	r3, [r7, #8]
 8004e5a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e5c:	4b35      	ldr	r3, [pc, #212]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a34      	ldr	r2, [pc, #208]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e68:	f7fc fa30 	bl	80012cc <HAL_GetTick>
 8004e6c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e70:	f7fc fa2c 	bl	80012cc <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b64      	cmp	r3, #100	@ 0x64
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e38f      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e82:	4b2c      	ldr	r3, [pc, #176]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0f0      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e8e:	4b28      	ldr	r3, [pc, #160]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e96:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d035      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d02e      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004eac:	4b20      	ldr	r3, [pc, #128]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eb4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eba:	4a1d      	ldr	r2, [pc, #116]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ec0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ecc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004ece:	4a18      	ldr	r2, [pc, #96]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ed4:	4b16      	ldr	r3, [pc, #88]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d114      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee0:	f7fc f9f4 	bl	80012cc <HAL_GetTick>
 8004ee4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee6:	e00a      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ee8:	f7fc f9f0 	bl	80012cc <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e351      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004efe:	4b0c      	ldr	r3, [pc, #48]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0ee      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f16:	d111      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f18:	4b05      	ldr	r3, [pc, #20]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004f24:	4b04      	ldr	r3, [pc, #16]	@ (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f26:	400b      	ands	r3, r1
 8004f28:	4901      	ldr	r1, [pc, #4]	@ (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	608b      	str	r3, [r1, #8]
 8004f2e:	e00b      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f30:	40023800 	.word	0x40023800
 8004f34:	40007000 	.word	0x40007000
 8004f38:	0ffffcff 	.word	0x0ffffcff
 8004f3c:	4bac      	ldr	r3, [pc, #688]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	4aab      	ldr	r2, [pc, #684]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f42:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004f46:	6093      	str	r3, [r2, #8]
 8004f48:	4ba9      	ldr	r3, [pc, #676]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f4a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f54:	49a6      	ldr	r1, [pc, #664]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0310 	and.w	r3, r3, #16
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d010      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f66:	4ba2      	ldr	r3, [pc, #648]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f6c:	4aa0      	ldr	r2, [pc, #640]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004f76:	4b9e      	ldr	r3, [pc, #632]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f78:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f80:	499b      	ldr	r1, [pc, #620]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00a      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f94:	4b96      	ldr	r3, [pc, #600]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f9a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fa2:	4993      	ldr	r1, [pc, #588]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fb6:	4b8e      	ldr	r3, [pc, #568]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fbc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fc4:	498a      	ldr	r1, [pc, #552]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00a      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fd8:	4b85      	ldr	r3, [pc, #532]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fde:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fe6:	4982      	ldr	r1, [pc, #520]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ffa:	4b7d      	ldr	r3, [pc, #500]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005000:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005008:	4979      	ldr	r1, [pc, #484]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00a      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800501c:	4b74      	ldr	r3, [pc, #464]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800501e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005022:	f023 0203 	bic.w	r2, r3, #3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502a:	4971      	ldr	r1, [pc, #452]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800503e:	4b6c      	ldr	r3, [pc, #432]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005044:	f023 020c 	bic.w	r2, r3, #12
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800504c:	4968      	ldr	r1, [pc, #416]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800504e:	4313      	orrs	r3, r2
 8005050:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005060:	4b63      	ldr	r3, [pc, #396]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005066:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800506e:	4960      	ldr	r1, [pc, #384]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005070:	4313      	orrs	r3, r2
 8005072:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005082:	4b5b      	ldr	r3, [pc, #364]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005088:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005090:	4957      	ldr	r1, [pc, #348]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005092:	4313      	orrs	r3, r2
 8005094:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050a4:	4b52      	ldr	r3, [pc, #328]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b2:	494f      	ldr	r1, [pc, #316]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80050c6:	4b4a      	ldr	r3, [pc, #296]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050cc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d4:	4946      	ldr	r1, [pc, #280]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80050e8:	4b41      	ldr	r3, [pc, #260]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f6:	493e      	ldr	r1, [pc, #248]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800510a:	4b39      	ldr	r3, [pc, #228]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800510c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005110:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005118:	4935      	ldr	r1, [pc, #212]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800512c:	4b30      	ldr	r3, [pc, #192]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800512e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005132:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800513a:	492d      	ldr	r1, [pc, #180]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d011      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800514e:	4b28      	ldr	r3, [pc, #160]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005154:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800515c:	4924      	ldr	r1, [pc, #144]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005168:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800516c:	d101      	bne.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800516e:	2301      	movs	r3, #1
 8005170:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800517e:	2301      	movs	r3, #1
 8005180:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800518e:	4b18      	ldr	r3, [pc, #96]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005190:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005194:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800519c:	4914      	ldr	r1, [pc, #80]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00b      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051b0:	4b0f      	ldr	r3, [pc, #60]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051b6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051c0:	490b      	ldr	r1, [pc, #44]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00f      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80051d4:	4b06      	ldr	r3, [pc, #24]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051da:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051e4:	4902      	ldr	r1, [pc, #8]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80051ec:	e002      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80051ee:	bf00      	nop
 80051f0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00b      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005200:	4b8a      	ldr	r3, [pc, #552]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005202:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005206:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005210:	4986      	ldr	r1, [pc, #536]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005212:	4313      	orrs	r3, r2
 8005214:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00b      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005224:	4b81      	ldr	r3, [pc, #516]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005226:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800522a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005234:	497d      	ldr	r1, [pc, #500]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d006      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	f000 80d6 	beq.w	80053fc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005250:	4b76      	ldr	r3, [pc, #472]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a75      	ldr	r2, [pc, #468]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005256:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800525a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800525c:	f7fc f836 	bl	80012cc <HAL_GetTick>
 8005260:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005262:	e008      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005264:	f7fc f832 	bl	80012cc <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b64      	cmp	r3, #100	@ 0x64
 8005270:	d901      	bls.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e195      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005276:	4b6d      	ldr	r3, [pc, #436]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1f0      	bne.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d021      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005292:	2b00      	cmp	r3, #0
 8005294:	d11d      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005296:	4b65      	ldr	r3, [pc, #404]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005298:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800529c:	0c1b      	lsrs	r3, r3, #16
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052a4:	4b61      	ldr	r3, [pc, #388]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052aa:	0e1b      	lsrs	r3, r3, #24
 80052ac:	f003 030f 	and.w	r3, r3, #15
 80052b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	019a      	lsls	r2, r3, #6
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	041b      	lsls	r3, r3, #16
 80052bc:	431a      	orrs	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	061b      	lsls	r3, r3, #24
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	071b      	lsls	r3, r3, #28
 80052ca:	4958      	ldr	r1, [pc, #352]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d004      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052e6:	d00a      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d02e      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052fc:	d129      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052fe:	4b4b      	ldr	r3, [pc, #300]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005300:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005304:	0c1b      	lsrs	r3, r3, #16
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800530c:	4b47      	ldr	r3, [pc, #284]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800530e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005312:	0f1b      	lsrs	r3, r3, #28
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	019a      	lsls	r2, r3, #6
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	041b      	lsls	r3, r3, #16
 8005324:	431a      	orrs	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	061b      	lsls	r3, r3, #24
 800532c:	431a      	orrs	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	071b      	lsls	r3, r3, #28
 8005332:	493e      	ldr	r1, [pc, #248]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005334:	4313      	orrs	r3, r2
 8005336:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800533a:	4b3c      	ldr	r3, [pc, #240]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800533c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005340:	f023 021f 	bic.w	r2, r3, #31
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005348:	3b01      	subs	r3, #1
 800534a:	4938      	ldr	r1, [pc, #224]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800534c:	4313      	orrs	r3, r2
 800534e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d01d      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800535e:	4b33      	ldr	r3, [pc, #204]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005360:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005364:	0e1b      	lsrs	r3, r3, #24
 8005366:	f003 030f 	and.w	r3, r3, #15
 800536a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800536c:	4b2f      	ldr	r3, [pc, #188]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800536e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005372:	0f1b      	lsrs	r3, r3, #28
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	019a      	lsls	r2, r3, #6
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	041b      	lsls	r3, r3, #16
 8005386:	431a      	orrs	r2, r3
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	061b      	lsls	r3, r3, #24
 800538c:	431a      	orrs	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	071b      	lsls	r3, r3, #28
 8005392:	4926      	ldr	r1, [pc, #152]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d011      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	019a      	lsls	r2, r3, #6
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	041b      	lsls	r3, r3, #16
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	061b      	lsls	r3, r3, #24
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	071b      	lsls	r3, r3, #28
 80053c2:	491a      	ldr	r1, [pc, #104]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053ca:	4b18      	ldr	r3, [pc, #96]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a17      	ldr	r2, [pc, #92]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80053d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053d6:	f7fb ff79 	bl	80012cc <HAL_GetTick>
 80053da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053dc:	e008      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053de:	f7fb ff75 	bl	80012cc <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b64      	cmp	r3, #100	@ 0x64
 80053ea:	d901      	bls.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e0d8      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80053f0:	4b0e      	ldr	r3, [pc, #56]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0f0      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	f040 80ce 	bne.w	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005404:	4b09      	ldr	r3, [pc, #36]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a08      	ldr	r2, [pc, #32]	@ (800542c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800540a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800540e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005410:	f7fb ff5c 	bl	80012cc <HAL_GetTick>
 8005414:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005416:	e00b      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005418:	f7fb ff58 	bl	80012cc <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b64      	cmp	r3, #100	@ 0x64
 8005424:	d904      	bls.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e0bb      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800542a:	bf00      	nop
 800542c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005430:	4b5e      	ldr	r3, [pc, #376]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005438:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800543c:	d0ec      	beq.n	8005418 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800544e:	2b00      	cmp	r3, #0
 8005450:	d009      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800545a:	2b00      	cmp	r3, #0
 800545c:	d02e      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005462:	2b00      	cmp	r3, #0
 8005464:	d12a      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005466:	4b51      	ldr	r3, [pc, #324]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800546c:	0c1b      	lsrs	r3, r3, #16
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005474:	4b4d      	ldr	r3, [pc, #308]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800547a:	0f1b      	lsrs	r3, r3, #28
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	019a      	lsls	r2, r3, #6
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	041b      	lsls	r3, r3, #16
 800548c:	431a      	orrs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	061b      	lsls	r3, r3, #24
 8005494:	431a      	orrs	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	071b      	lsls	r3, r3, #28
 800549a:	4944      	ldr	r1, [pc, #272]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800549c:	4313      	orrs	r3, r2
 800549e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054a2:	4b42      	ldr	r3, [pc, #264]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054a8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b0:	3b01      	subs	r3, #1
 80054b2:	021b      	lsls	r3, r3, #8
 80054b4:	493d      	ldr	r1, [pc, #244]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d022      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80054cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054d0:	d11d      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054d2:	4b36      	ldr	r3, [pc, #216]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d8:	0e1b      	lsrs	r3, r3, #24
 80054da:	f003 030f 	and.w	r3, r3, #15
 80054de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054e0:	4b32      	ldr	r3, [pc, #200]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e6:	0f1b      	lsrs	r3, r3, #28
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	019a      	lsls	r2, r3, #6
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	041b      	lsls	r3, r3, #16
 80054fa:	431a      	orrs	r2, r3
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	061b      	lsls	r3, r3, #24
 8005500:	431a      	orrs	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	071b      	lsls	r3, r3, #28
 8005506:	4929      	ldr	r1, [pc, #164]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005508:	4313      	orrs	r3, r2
 800550a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0308 	and.w	r3, r3, #8
 8005516:	2b00      	cmp	r3, #0
 8005518:	d028      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800551a:	4b24      	ldr	r3, [pc, #144]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800551c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005520:	0e1b      	lsrs	r3, r3, #24
 8005522:	f003 030f 	and.w	r3, r3, #15
 8005526:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005528:	4b20      	ldr	r3, [pc, #128]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800552e:	0c1b      	lsrs	r3, r3, #16
 8005530:	f003 0303 	and.w	r3, r3, #3
 8005534:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	019a      	lsls	r2, r3, #6
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	041b      	lsls	r3, r3, #16
 8005540:	431a      	orrs	r2, r3
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	061b      	lsls	r3, r3, #24
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	071b      	lsls	r3, r3, #28
 800554e:	4917      	ldr	r1, [pc, #92]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005556:	4b15      	ldr	r3, [pc, #84]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005558:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800555c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005564:	4911      	ldr	r1, [pc, #68]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005566:	4313      	orrs	r3, r2
 8005568:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800556c:	4b0f      	ldr	r3, [pc, #60]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a0e      	ldr	r2, [pc, #56]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005572:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005576:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005578:	f7fb fea8 	bl	80012cc <HAL_GetTick>
 800557c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800557e:	e008      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005580:	f7fb fea4 	bl	80012cc <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b64      	cmp	r3, #100	@ 0x64
 800558c:	d901      	bls.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e007      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005592:	4b06      	ldr	r3, [pc, #24]	@ (80055ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800559a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800559e:	d1ef      	bne.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3720      	adds	r7, #32
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	40023800 	.word	0x40023800

080055b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e071      	b.n	80056a6 <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	7f5b      	ldrb	r3, [r3, #29]
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d105      	bne.n	80055d8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7fb fb0c 	bl	8000bf0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f003 0310 	and.w	r3, r3, #16
 80055e8:	2b10      	cmp	r3, #16
 80055ea:	d053      	beq.n	8005694 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	22ca      	movs	r2, #202	@ 0xca
 80055f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2253      	movs	r2, #83	@ 0x53
 80055fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 f87f 	bl	8005700 <RTC_EnterInitMode>
 8005602:	4603      	mov	r3, r0
 8005604:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005606:	7bfb      	ldrb	r3, [r7, #15]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d12a      	bne.n	8005662 <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6899      	ldr	r1, [r3, #8]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	4b26      	ldr	r3, [pc, #152]	@ (80056b0 <HAL_RTC_Init+0x100>)
 8005618:	400b      	ands	r3, r1
 800561a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6899      	ldr	r1, [r3, #8]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	431a      	orrs	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	68d2      	ldr	r2, [r2, #12]
 8005642:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6919      	ldr	r1, [r3, #16]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	041a      	lsls	r2, r3, #16
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f888 	bl	800576e <RTC_ExitInitMode>
 800565e:	4603      	mov	r3, r0
 8005660:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005662:	7bfb      	ldrb	r3, [r7, #15]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d110      	bne.n	800568a <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 0208 	bic.w	r2, r2, #8
 8005676:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699a      	ldr	r2, [r3, #24]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	22ff      	movs	r2, #255	@ 0xff
 8005690:	625a      	str	r2, [r3, #36]	@ 0x24
 8005692:	e001      	b.n	8005698 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d102      	bne.n	80056a4 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	ff8fffbf 	.word	0xff8fffbf

080056b4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056bc:	2300      	movs	r3, #0
 80056be:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a0d      	ldr	r2, [pc, #52]	@ (80056fc <HAL_RTC_WaitForSynchro+0x48>)
 80056c6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056c8:	f7fb fe00 	bl	80012cc <HAL_GetTick>
 80056cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056ce:	e009      	b.n	80056e4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80056d0:	f7fb fdfc 	bl	80012cc <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056de:	d901      	bls.n	80056e4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e007      	b.n	80056f4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f003 0320 	and.w	r3, r3, #32
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0ee      	beq.n	80056d0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	0001ff5f 	.word	0x0001ff5f

08005700 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800570c:	2300      	movs	r3, #0
 800570e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800571a:	2b00      	cmp	r3, #0
 800571c:	d122      	bne.n	8005764 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800572c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800572e:	f7fb fdcd 	bl	80012cc <HAL_GetTick>
 8005732:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005734:	e00c      	b.n	8005750 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005736:	f7fb fdc9 	bl	80012cc <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005744:	d904      	bls.n	8005750 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2204      	movs	r2, #4
 800574a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800575a:	2b00      	cmp	r3, #0
 800575c:	d102      	bne.n	8005764 <RTC_EnterInitMode+0x64>
 800575e:	7bfb      	ldrb	r3, [r7, #15]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d1e8      	bne.n	8005736 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005764:	7bfb      	ldrb	r3, [r7, #15]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005788:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f003 0320 	and.w	r3, r3, #32
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10a      	bne.n	80057ae <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7ff ff8b 	bl	80056b4 <HAL_RTC_WaitForSynchro>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d004      	beq.n	80057ae <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2204      	movs	r2, #4
 80057a8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e049      	b.n	800585e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d106      	bne.n	80057e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f841 	bl	8005866 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3304      	adds	r3, #4
 80057f4:	4619      	mov	r1, r3
 80057f6:	4610      	mov	r0, r2
 80057f8:	f000 f9e8 	bl	8005bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b01      	cmp	r3, #1
 800588e:	d001      	beq.n	8005894 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e054      	b.n	800593e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0201 	orr.w	r2, r2, #1
 80058aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a26      	ldr	r2, [pc, #152]	@ (800594c <HAL_TIM_Base_Start_IT+0xd0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d022      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x80>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058be:	d01d      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x80>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a22      	ldr	r2, [pc, #136]	@ (8005950 <HAL_TIM_Base_Start_IT+0xd4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d018      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x80>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a21      	ldr	r2, [pc, #132]	@ (8005954 <HAL_TIM_Base_Start_IT+0xd8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d013      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x80>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005958 <HAL_TIM_Base_Start_IT+0xdc>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d00e      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x80>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a1e      	ldr	r2, [pc, #120]	@ (800595c <HAL_TIM_Base_Start_IT+0xe0>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d009      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x80>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005960 <HAL_TIM_Base_Start_IT+0xe4>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d004      	beq.n	80058fc <HAL_TIM_Base_Start_IT+0x80>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005964 <HAL_TIM_Base_Start_IT+0xe8>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d115      	bne.n	8005928 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	4b19      	ldr	r3, [pc, #100]	@ (8005968 <HAL_TIM_Base_Start_IT+0xec>)
 8005904:	4013      	ands	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b06      	cmp	r3, #6
 800590c:	d015      	beq.n	800593a <HAL_TIM_Base_Start_IT+0xbe>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005914:	d011      	beq.n	800593a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f042 0201 	orr.w	r2, r2, #1
 8005924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005926:	e008      	b.n	800593a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0201 	orr.w	r2, r2, #1
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	e000      	b.n	800593c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40010000 	.word	0x40010000
 8005950:	40000400 	.word	0x40000400
 8005954:	40000800 	.word	0x40000800
 8005958:	40000c00 	.word	0x40000c00
 800595c:	40010400 	.word	0x40010400
 8005960:	40014000 	.word	0x40014000
 8005964:	40001800 	.word	0x40001800
 8005968:	00010007 	.word	0x00010007

0800596c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d020      	beq.n	80059d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01b      	beq.n	80059d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f06f 0202 	mvn.w	r2, #2
 80059a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f8e9 	bl	8005b8e <HAL_TIM_IC_CaptureCallback>
 80059bc:	e005      	b.n	80059ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f8db 	bl	8005b7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f8ec 	bl	8005ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f003 0304 	and.w	r3, r3, #4
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d020      	beq.n	8005a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f003 0304 	and.w	r3, r3, #4
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d01b      	beq.n	8005a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f06f 0204 	mvn.w	r2, #4
 80059ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2202      	movs	r2, #2
 80059f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f8c3 	bl	8005b8e <HAL_TIM_IC_CaptureCallback>
 8005a08:	e005      	b.n	8005a16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f8b5 	bl	8005b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f8c6 	bl	8005ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d020      	beq.n	8005a68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f003 0308 	and.w	r3, r3, #8
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d01b      	beq.n	8005a68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0208 	mvn.w	r2, #8
 8005a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2204      	movs	r2, #4
 8005a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	f003 0303 	and.w	r3, r3, #3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f89d 	bl	8005b8e <HAL_TIM_IC_CaptureCallback>
 8005a54:	e005      	b.n	8005a62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f88f 	bl	8005b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f8a0 	bl	8005ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f003 0310 	and.w	r3, r3, #16
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d020      	beq.n	8005ab4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f003 0310 	and.w	r3, r3, #16
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d01b      	beq.n	8005ab4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f06f 0210 	mvn.w	r2, #16
 8005a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2208      	movs	r2, #8
 8005a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f877 	bl	8005b8e <HAL_TIM_IC_CaptureCallback>
 8005aa0:	e005      	b.n	8005aae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f869 	bl	8005b7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f87a 	bl	8005ba2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00c      	beq.n	8005ad8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d007      	beq.n	8005ad8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f06f 0201 	mvn.w	r2, #1
 8005ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7fb f84c 	bl	8000b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d104      	bne.n	8005aec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00c      	beq.n	8005b06 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d007      	beq.n	8005b06 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f913 	bl	8005d2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00c      	beq.n	8005b2a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d007      	beq.n	8005b2a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f90b 	bl	8005d40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00c      	beq.n	8005b4e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d007      	beq.n	8005b4e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f834 	bl	8005bb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f003 0320 	and.w	r3, r3, #32
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00c      	beq.n	8005b72 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f003 0320 	and.w	r3, r3, #32
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d007      	beq.n	8005b72 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f06f 0220 	mvn.w	r2, #32
 8005b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f8d3 	bl	8005d18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b72:	bf00      	nop
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b82:	bf00      	nop
 8005b84:	370c      	adds	r7, #12
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005baa:	bf00      	nop
 8005bac:	370c      	adds	r7, #12
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bbe:	bf00      	nop
 8005bc0:	370c      	adds	r7, #12
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
	...

08005bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a43      	ldr	r2, [pc, #268]	@ (8005cec <TIM_Base_SetConfig+0x120>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d013      	beq.n	8005c0c <TIM_Base_SetConfig+0x40>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bea:	d00f      	beq.n	8005c0c <TIM_Base_SetConfig+0x40>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a40      	ldr	r2, [pc, #256]	@ (8005cf0 <TIM_Base_SetConfig+0x124>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d00b      	beq.n	8005c0c <TIM_Base_SetConfig+0x40>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a3f      	ldr	r2, [pc, #252]	@ (8005cf4 <TIM_Base_SetConfig+0x128>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d007      	beq.n	8005c0c <TIM_Base_SetConfig+0x40>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a3e      	ldr	r2, [pc, #248]	@ (8005cf8 <TIM_Base_SetConfig+0x12c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d003      	beq.n	8005c0c <TIM_Base_SetConfig+0x40>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a3d      	ldr	r2, [pc, #244]	@ (8005cfc <TIM_Base_SetConfig+0x130>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d108      	bne.n	8005c1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a32      	ldr	r2, [pc, #200]	@ (8005cec <TIM_Base_SetConfig+0x120>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d02b      	beq.n	8005c7e <TIM_Base_SetConfig+0xb2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c2c:	d027      	beq.n	8005c7e <TIM_Base_SetConfig+0xb2>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a2f      	ldr	r2, [pc, #188]	@ (8005cf0 <TIM_Base_SetConfig+0x124>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d023      	beq.n	8005c7e <TIM_Base_SetConfig+0xb2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a2e      	ldr	r2, [pc, #184]	@ (8005cf4 <TIM_Base_SetConfig+0x128>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d01f      	beq.n	8005c7e <TIM_Base_SetConfig+0xb2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a2d      	ldr	r2, [pc, #180]	@ (8005cf8 <TIM_Base_SetConfig+0x12c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d01b      	beq.n	8005c7e <TIM_Base_SetConfig+0xb2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a2c      	ldr	r2, [pc, #176]	@ (8005cfc <TIM_Base_SetConfig+0x130>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d017      	beq.n	8005c7e <TIM_Base_SetConfig+0xb2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a2b      	ldr	r2, [pc, #172]	@ (8005d00 <TIM_Base_SetConfig+0x134>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d013      	beq.n	8005c7e <TIM_Base_SetConfig+0xb2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a2a      	ldr	r2, [pc, #168]	@ (8005d04 <TIM_Base_SetConfig+0x138>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00f      	beq.n	8005c7e <TIM_Base_SetConfig+0xb2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a29      	ldr	r2, [pc, #164]	@ (8005d08 <TIM_Base_SetConfig+0x13c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d00b      	beq.n	8005c7e <TIM_Base_SetConfig+0xb2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a28      	ldr	r2, [pc, #160]	@ (8005d0c <TIM_Base_SetConfig+0x140>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d007      	beq.n	8005c7e <TIM_Base_SetConfig+0xb2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a27      	ldr	r2, [pc, #156]	@ (8005d10 <TIM_Base_SetConfig+0x144>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d003      	beq.n	8005c7e <TIM_Base_SetConfig+0xb2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a26      	ldr	r2, [pc, #152]	@ (8005d14 <TIM_Base_SetConfig+0x148>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d108      	bne.n	8005c90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	689a      	ldr	r2, [r3, #8]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a0e      	ldr	r2, [pc, #56]	@ (8005cec <TIM_Base_SetConfig+0x120>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d003      	beq.n	8005cbe <TIM_Base_SetConfig+0xf2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a10      	ldr	r2, [pc, #64]	@ (8005cfc <TIM_Base_SetConfig+0x130>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d103      	bne.n	8005cc6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	691a      	ldr	r2, [r3, #16]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f043 0204 	orr.w	r2, r3, #4
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	601a      	str	r2, [r3, #0]
}
 8005cde:	bf00      	nop
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	40010000 	.word	0x40010000
 8005cf0:	40000400 	.word	0x40000400
 8005cf4:	40000800 	.word	0x40000800
 8005cf8:	40000c00 	.word	0x40000c00
 8005cfc:	40010400 	.word	0x40010400
 8005d00:	40014000 	.word	0x40014000
 8005d04:	40014400 	.word	0x40014400
 8005d08:	40014800 	.word	0x40014800
 8005d0c:	40001800 	.word	0x40001800
 8005d10:	40001c00 	.word	0x40001c00
 8005d14:	40002000 	.word	0x40002000

08005d18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e040      	b.n	8005de8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d106      	bne.n	8005d7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7fa ff68 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2224      	movs	r2, #36	@ 0x24
 8005d80:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 0201 	bic.w	r2, r2, #1
 8005d90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fa8c 	bl	80062b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f825 	bl	8005df0 <UART_SetConfig>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d101      	bne.n	8005db0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e01b      	b.n	8005de8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005dbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689a      	ldr	r2, [r3, #8]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005dce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0201 	orr.w	r2, r2, #1
 8005dde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fb0b 	bl	80063fc <UART_CheckIdleState>
 8005de6:	4603      	mov	r3, r0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b088      	sub	sp, #32
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	431a      	orrs	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	69db      	ldr	r3, [r3, #28]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	4ba6      	ldr	r3, [pc, #664]	@ (80060b4 <UART_SetConfig+0x2c4>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6812      	ldr	r2, [r2, #0]
 8005e22:	6979      	ldr	r1, [r7, #20]
 8005e24:	430b      	orrs	r3, r1
 8005e26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68da      	ldr	r2, [r3, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a94      	ldr	r2, [pc, #592]	@ (80060b8 <UART_SetConfig+0x2c8>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d120      	bne.n	8005eae <UART_SetConfig+0xbe>
 8005e6c:	4b93      	ldr	r3, [pc, #588]	@ (80060bc <UART_SetConfig+0x2cc>)
 8005e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e72:	f003 0303 	and.w	r3, r3, #3
 8005e76:	2b03      	cmp	r3, #3
 8005e78:	d816      	bhi.n	8005ea8 <UART_SetConfig+0xb8>
 8005e7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e80 <UART_SetConfig+0x90>)
 8005e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e80:	08005e91 	.word	0x08005e91
 8005e84:	08005e9d 	.word	0x08005e9d
 8005e88:	08005e97 	.word	0x08005e97
 8005e8c:	08005ea3 	.word	0x08005ea3
 8005e90:	2301      	movs	r3, #1
 8005e92:	77fb      	strb	r3, [r7, #31]
 8005e94:	e150      	b.n	8006138 <UART_SetConfig+0x348>
 8005e96:	2302      	movs	r3, #2
 8005e98:	77fb      	strb	r3, [r7, #31]
 8005e9a:	e14d      	b.n	8006138 <UART_SetConfig+0x348>
 8005e9c:	2304      	movs	r3, #4
 8005e9e:	77fb      	strb	r3, [r7, #31]
 8005ea0:	e14a      	b.n	8006138 <UART_SetConfig+0x348>
 8005ea2:	2308      	movs	r3, #8
 8005ea4:	77fb      	strb	r3, [r7, #31]
 8005ea6:	e147      	b.n	8006138 <UART_SetConfig+0x348>
 8005ea8:	2310      	movs	r3, #16
 8005eaa:	77fb      	strb	r3, [r7, #31]
 8005eac:	e144      	b.n	8006138 <UART_SetConfig+0x348>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a83      	ldr	r2, [pc, #524]	@ (80060c0 <UART_SetConfig+0x2d0>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d132      	bne.n	8005f1e <UART_SetConfig+0x12e>
 8005eb8:	4b80      	ldr	r3, [pc, #512]	@ (80060bc <UART_SetConfig+0x2cc>)
 8005eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ebe:	f003 030c 	and.w	r3, r3, #12
 8005ec2:	2b0c      	cmp	r3, #12
 8005ec4:	d828      	bhi.n	8005f18 <UART_SetConfig+0x128>
 8005ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8005ecc <UART_SetConfig+0xdc>)
 8005ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ecc:	08005f01 	.word	0x08005f01
 8005ed0:	08005f19 	.word	0x08005f19
 8005ed4:	08005f19 	.word	0x08005f19
 8005ed8:	08005f19 	.word	0x08005f19
 8005edc:	08005f0d 	.word	0x08005f0d
 8005ee0:	08005f19 	.word	0x08005f19
 8005ee4:	08005f19 	.word	0x08005f19
 8005ee8:	08005f19 	.word	0x08005f19
 8005eec:	08005f07 	.word	0x08005f07
 8005ef0:	08005f19 	.word	0x08005f19
 8005ef4:	08005f19 	.word	0x08005f19
 8005ef8:	08005f19 	.word	0x08005f19
 8005efc:	08005f13 	.word	0x08005f13
 8005f00:	2300      	movs	r3, #0
 8005f02:	77fb      	strb	r3, [r7, #31]
 8005f04:	e118      	b.n	8006138 <UART_SetConfig+0x348>
 8005f06:	2302      	movs	r3, #2
 8005f08:	77fb      	strb	r3, [r7, #31]
 8005f0a:	e115      	b.n	8006138 <UART_SetConfig+0x348>
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	77fb      	strb	r3, [r7, #31]
 8005f10:	e112      	b.n	8006138 <UART_SetConfig+0x348>
 8005f12:	2308      	movs	r3, #8
 8005f14:	77fb      	strb	r3, [r7, #31]
 8005f16:	e10f      	b.n	8006138 <UART_SetConfig+0x348>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	77fb      	strb	r3, [r7, #31]
 8005f1c:	e10c      	b.n	8006138 <UART_SetConfig+0x348>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a68      	ldr	r2, [pc, #416]	@ (80060c4 <UART_SetConfig+0x2d4>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d120      	bne.n	8005f6a <UART_SetConfig+0x17a>
 8005f28:	4b64      	ldr	r3, [pc, #400]	@ (80060bc <UART_SetConfig+0x2cc>)
 8005f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f2e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005f32:	2b30      	cmp	r3, #48	@ 0x30
 8005f34:	d013      	beq.n	8005f5e <UART_SetConfig+0x16e>
 8005f36:	2b30      	cmp	r3, #48	@ 0x30
 8005f38:	d814      	bhi.n	8005f64 <UART_SetConfig+0x174>
 8005f3a:	2b20      	cmp	r3, #32
 8005f3c:	d009      	beq.n	8005f52 <UART_SetConfig+0x162>
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	d810      	bhi.n	8005f64 <UART_SetConfig+0x174>
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <UART_SetConfig+0x15c>
 8005f46:	2b10      	cmp	r3, #16
 8005f48:	d006      	beq.n	8005f58 <UART_SetConfig+0x168>
 8005f4a:	e00b      	b.n	8005f64 <UART_SetConfig+0x174>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	77fb      	strb	r3, [r7, #31]
 8005f50:	e0f2      	b.n	8006138 <UART_SetConfig+0x348>
 8005f52:	2302      	movs	r3, #2
 8005f54:	77fb      	strb	r3, [r7, #31]
 8005f56:	e0ef      	b.n	8006138 <UART_SetConfig+0x348>
 8005f58:	2304      	movs	r3, #4
 8005f5a:	77fb      	strb	r3, [r7, #31]
 8005f5c:	e0ec      	b.n	8006138 <UART_SetConfig+0x348>
 8005f5e:	2308      	movs	r3, #8
 8005f60:	77fb      	strb	r3, [r7, #31]
 8005f62:	e0e9      	b.n	8006138 <UART_SetConfig+0x348>
 8005f64:	2310      	movs	r3, #16
 8005f66:	77fb      	strb	r3, [r7, #31]
 8005f68:	e0e6      	b.n	8006138 <UART_SetConfig+0x348>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a56      	ldr	r2, [pc, #344]	@ (80060c8 <UART_SetConfig+0x2d8>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d120      	bne.n	8005fb6 <UART_SetConfig+0x1c6>
 8005f74:	4b51      	ldr	r3, [pc, #324]	@ (80060bc <UART_SetConfig+0x2cc>)
 8005f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f7a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005f7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f80:	d013      	beq.n	8005faa <UART_SetConfig+0x1ba>
 8005f82:	2bc0      	cmp	r3, #192	@ 0xc0
 8005f84:	d814      	bhi.n	8005fb0 <UART_SetConfig+0x1c0>
 8005f86:	2b80      	cmp	r3, #128	@ 0x80
 8005f88:	d009      	beq.n	8005f9e <UART_SetConfig+0x1ae>
 8005f8a:	2b80      	cmp	r3, #128	@ 0x80
 8005f8c:	d810      	bhi.n	8005fb0 <UART_SetConfig+0x1c0>
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <UART_SetConfig+0x1a8>
 8005f92:	2b40      	cmp	r3, #64	@ 0x40
 8005f94:	d006      	beq.n	8005fa4 <UART_SetConfig+0x1b4>
 8005f96:	e00b      	b.n	8005fb0 <UART_SetConfig+0x1c0>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	77fb      	strb	r3, [r7, #31]
 8005f9c:	e0cc      	b.n	8006138 <UART_SetConfig+0x348>
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	77fb      	strb	r3, [r7, #31]
 8005fa2:	e0c9      	b.n	8006138 <UART_SetConfig+0x348>
 8005fa4:	2304      	movs	r3, #4
 8005fa6:	77fb      	strb	r3, [r7, #31]
 8005fa8:	e0c6      	b.n	8006138 <UART_SetConfig+0x348>
 8005faa:	2308      	movs	r3, #8
 8005fac:	77fb      	strb	r3, [r7, #31]
 8005fae:	e0c3      	b.n	8006138 <UART_SetConfig+0x348>
 8005fb0:	2310      	movs	r3, #16
 8005fb2:	77fb      	strb	r3, [r7, #31]
 8005fb4:	e0c0      	b.n	8006138 <UART_SetConfig+0x348>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a44      	ldr	r2, [pc, #272]	@ (80060cc <UART_SetConfig+0x2dc>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d125      	bne.n	800600c <UART_SetConfig+0x21c>
 8005fc0:	4b3e      	ldr	r3, [pc, #248]	@ (80060bc <UART_SetConfig+0x2cc>)
 8005fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fce:	d017      	beq.n	8006000 <UART_SetConfig+0x210>
 8005fd0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fd4:	d817      	bhi.n	8006006 <UART_SetConfig+0x216>
 8005fd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fda:	d00b      	beq.n	8005ff4 <UART_SetConfig+0x204>
 8005fdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005fe0:	d811      	bhi.n	8006006 <UART_SetConfig+0x216>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <UART_SetConfig+0x1fe>
 8005fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fea:	d006      	beq.n	8005ffa <UART_SetConfig+0x20a>
 8005fec:	e00b      	b.n	8006006 <UART_SetConfig+0x216>
 8005fee:	2300      	movs	r3, #0
 8005ff0:	77fb      	strb	r3, [r7, #31]
 8005ff2:	e0a1      	b.n	8006138 <UART_SetConfig+0x348>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	77fb      	strb	r3, [r7, #31]
 8005ff8:	e09e      	b.n	8006138 <UART_SetConfig+0x348>
 8005ffa:	2304      	movs	r3, #4
 8005ffc:	77fb      	strb	r3, [r7, #31]
 8005ffe:	e09b      	b.n	8006138 <UART_SetConfig+0x348>
 8006000:	2308      	movs	r3, #8
 8006002:	77fb      	strb	r3, [r7, #31]
 8006004:	e098      	b.n	8006138 <UART_SetConfig+0x348>
 8006006:	2310      	movs	r3, #16
 8006008:	77fb      	strb	r3, [r7, #31]
 800600a:	e095      	b.n	8006138 <UART_SetConfig+0x348>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a2f      	ldr	r2, [pc, #188]	@ (80060d0 <UART_SetConfig+0x2e0>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d125      	bne.n	8006062 <UART_SetConfig+0x272>
 8006016:	4b29      	ldr	r3, [pc, #164]	@ (80060bc <UART_SetConfig+0x2cc>)
 8006018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800601c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006020:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006024:	d017      	beq.n	8006056 <UART_SetConfig+0x266>
 8006026:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800602a:	d817      	bhi.n	800605c <UART_SetConfig+0x26c>
 800602c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006030:	d00b      	beq.n	800604a <UART_SetConfig+0x25a>
 8006032:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006036:	d811      	bhi.n	800605c <UART_SetConfig+0x26c>
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <UART_SetConfig+0x254>
 800603c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006040:	d006      	beq.n	8006050 <UART_SetConfig+0x260>
 8006042:	e00b      	b.n	800605c <UART_SetConfig+0x26c>
 8006044:	2301      	movs	r3, #1
 8006046:	77fb      	strb	r3, [r7, #31]
 8006048:	e076      	b.n	8006138 <UART_SetConfig+0x348>
 800604a:	2302      	movs	r3, #2
 800604c:	77fb      	strb	r3, [r7, #31]
 800604e:	e073      	b.n	8006138 <UART_SetConfig+0x348>
 8006050:	2304      	movs	r3, #4
 8006052:	77fb      	strb	r3, [r7, #31]
 8006054:	e070      	b.n	8006138 <UART_SetConfig+0x348>
 8006056:	2308      	movs	r3, #8
 8006058:	77fb      	strb	r3, [r7, #31]
 800605a:	e06d      	b.n	8006138 <UART_SetConfig+0x348>
 800605c:	2310      	movs	r3, #16
 800605e:	77fb      	strb	r3, [r7, #31]
 8006060:	e06a      	b.n	8006138 <UART_SetConfig+0x348>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a1b      	ldr	r2, [pc, #108]	@ (80060d4 <UART_SetConfig+0x2e4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d138      	bne.n	80060de <UART_SetConfig+0x2ee>
 800606c:	4b13      	ldr	r3, [pc, #76]	@ (80060bc <UART_SetConfig+0x2cc>)
 800606e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006072:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006076:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800607a:	d017      	beq.n	80060ac <UART_SetConfig+0x2bc>
 800607c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006080:	d82a      	bhi.n	80060d8 <UART_SetConfig+0x2e8>
 8006082:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006086:	d00b      	beq.n	80060a0 <UART_SetConfig+0x2b0>
 8006088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800608c:	d824      	bhi.n	80060d8 <UART_SetConfig+0x2e8>
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <UART_SetConfig+0x2aa>
 8006092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006096:	d006      	beq.n	80060a6 <UART_SetConfig+0x2b6>
 8006098:	e01e      	b.n	80060d8 <UART_SetConfig+0x2e8>
 800609a:	2300      	movs	r3, #0
 800609c:	77fb      	strb	r3, [r7, #31]
 800609e:	e04b      	b.n	8006138 <UART_SetConfig+0x348>
 80060a0:	2302      	movs	r3, #2
 80060a2:	77fb      	strb	r3, [r7, #31]
 80060a4:	e048      	b.n	8006138 <UART_SetConfig+0x348>
 80060a6:	2304      	movs	r3, #4
 80060a8:	77fb      	strb	r3, [r7, #31]
 80060aa:	e045      	b.n	8006138 <UART_SetConfig+0x348>
 80060ac:	2308      	movs	r3, #8
 80060ae:	77fb      	strb	r3, [r7, #31]
 80060b0:	e042      	b.n	8006138 <UART_SetConfig+0x348>
 80060b2:	bf00      	nop
 80060b4:	efff69f3 	.word	0xefff69f3
 80060b8:	40011000 	.word	0x40011000
 80060bc:	40023800 	.word	0x40023800
 80060c0:	40004400 	.word	0x40004400
 80060c4:	40004800 	.word	0x40004800
 80060c8:	40004c00 	.word	0x40004c00
 80060cc:	40005000 	.word	0x40005000
 80060d0:	40011400 	.word	0x40011400
 80060d4:	40007800 	.word	0x40007800
 80060d8:	2310      	movs	r3, #16
 80060da:	77fb      	strb	r3, [r7, #31]
 80060dc:	e02c      	b.n	8006138 <UART_SetConfig+0x348>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a72      	ldr	r2, [pc, #456]	@ (80062ac <UART_SetConfig+0x4bc>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d125      	bne.n	8006134 <UART_SetConfig+0x344>
 80060e8:	4b71      	ldr	r3, [pc, #452]	@ (80062b0 <UART_SetConfig+0x4c0>)
 80060ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80060f2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80060f6:	d017      	beq.n	8006128 <UART_SetConfig+0x338>
 80060f8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80060fc:	d817      	bhi.n	800612e <UART_SetConfig+0x33e>
 80060fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006102:	d00b      	beq.n	800611c <UART_SetConfig+0x32c>
 8006104:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006108:	d811      	bhi.n	800612e <UART_SetConfig+0x33e>
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <UART_SetConfig+0x326>
 800610e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006112:	d006      	beq.n	8006122 <UART_SetConfig+0x332>
 8006114:	e00b      	b.n	800612e <UART_SetConfig+0x33e>
 8006116:	2300      	movs	r3, #0
 8006118:	77fb      	strb	r3, [r7, #31]
 800611a:	e00d      	b.n	8006138 <UART_SetConfig+0x348>
 800611c:	2302      	movs	r3, #2
 800611e:	77fb      	strb	r3, [r7, #31]
 8006120:	e00a      	b.n	8006138 <UART_SetConfig+0x348>
 8006122:	2304      	movs	r3, #4
 8006124:	77fb      	strb	r3, [r7, #31]
 8006126:	e007      	b.n	8006138 <UART_SetConfig+0x348>
 8006128:	2308      	movs	r3, #8
 800612a:	77fb      	strb	r3, [r7, #31]
 800612c:	e004      	b.n	8006138 <UART_SetConfig+0x348>
 800612e:	2310      	movs	r3, #16
 8006130:	77fb      	strb	r3, [r7, #31]
 8006132:	e001      	b.n	8006138 <UART_SetConfig+0x348>
 8006134:	2310      	movs	r3, #16
 8006136:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006140:	d15b      	bne.n	80061fa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006142:	7ffb      	ldrb	r3, [r7, #31]
 8006144:	2b08      	cmp	r3, #8
 8006146:	d828      	bhi.n	800619a <UART_SetConfig+0x3aa>
 8006148:	a201      	add	r2, pc, #4	@ (adr r2, 8006150 <UART_SetConfig+0x360>)
 800614a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614e:	bf00      	nop
 8006150:	08006175 	.word	0x08006175
 8006154:	0800617d 	.word	0x0800617d
 8006158:	08006185 	.word	0x08006185
 800615c:	0800619b 	.word	0x0800619b
 8006160:	0800618b 	.word	0x0800618b
 8006164:	0800619b 	.word	0x0800619b
 8006168:	0800619b 	.word	0x0800619b
 800616c:	0800619b 	.word	0x0800619b
 8006170:	08006193 	.word	0x08006193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006174:	f7fe fd9a 	bl	8004cac <HAL_RCC_GetPCLK1Freq>
 8006178:	61b8      	str	r0, [r7, #24]
        break;
 800617a:	e013      	b.n	80061a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800617c:	f7fe fdaa 	bl	8004cd4 <HAL_RCC_GetPCLK2Freq>
 8006180:	61b8      	str	r0, [r7, #24]
        break;
 8006182:	e00f      	b.n	80061a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006184:	4b4b      	ldr	r3, [pc, #300]	@ (80062b4 <UART_SetConfig+0x4c4>)
 8006186:	61bb      	str	r3, [r7, #24]
        break;
 8006188:	e00c      	b.n	80061a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800618a:	f7fe fc7d 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 800618e:	61b8      	str	r0, [r7, #24]
        break;
 8006190:	e008      	b.n	80061a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006196:	61bb      	str	r3, [r7, #24]
        break;
 8006198:	e004      	b.n	80061a4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	77bb      	strb	r3, [r7, #30]
        break;
 80061a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d074      	beq.n	8006294 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	005a      	lsls	r2, r3, #1
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	085b      	lsrs	r3, r3, #1
 80061b4:	441a      	add	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80061be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	2b0f      	cmp	r3, #15
 80061c4:	d916      	bls.n	80061f4 <UART_SetConfig+0x404>
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061cc:	d212      	bcs.n	80061f4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	f023 030f 	bic.w	r3, r3, #15
 80061d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	085b      	lsrs	r3, r3, #1
 80061dc:	b29b      	uxth	r3, r3
 80061de:	f003 0307 	and.w	r3, r3, #7
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	89fb      	ldrh	r3, [r7, #14]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	89fa      	ldrh	r2, [r7, #14]
 80061f0:	60da      	str	r2, [r3, #12]
 80061f2:	e04f      	b.n	8006294 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	77bb      	strb	r3, [r7, #30]
 80061f8:	e04c      	b.n	8006294 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061fa:	7ffb      	ldrb	r3, [r7, #31]
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d828      	bhi.n	8006252 <UART_SetConfig+0x462>
 8006200:	a201      	add	r2, pc, #4	@ (adr r2, 8006208 <UART_SetConfig+0x418>)
 8006202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006206:	bf00      	nop
 8006208:	0800622d 	.word	0x0800622d
 800620c:	08006235 	.word	0x08006235
 8006210:	0800623d 	.word	0x0800623d
 8006214:	08006253 	.word	0x08006253
 8006218:	08006243 	.word	0x08006243
 800621c:	08006253 	.word	0x08006253
 8006220:	08006253 	.word	0x08006253
 8006224:	08006253 	.word	0x08006253
 8006228:	0800624b 	.word	0x0800624b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800622c:	f7fe fd3e 	bl	8004cac <HAL_RCC_GetPCLK1Freq>
 8006230:	61b8      	str	r0, [r7, #24]
        break;
 8006232:	e013      	b.n	800625c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006234:	f7fe fd4e 	bl	8004cd4 <HAL_RCC_GetPCLK2Freq>
 8006238:	61b8      	str	r0, [r7, #24]
        break;
 800623a:	e00f      	b.n	800625c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800623c:	4b1d      	ldr	r3, [pc, #116]	@ (80062b4 <UART_SetConfig+0x4c4>)
 800623e:	61bb      	str	r3, [r7, #24]
        break;
 8006240:	e00c      	b.n	800625c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006242:	f7fe fc21 	bl	8004a88 <HAL_RCC_GetSysClockFreq>
 8006246:	61b8      	str	r0, [r7, #24]
        break;
 8006248:	e008      	b.n	800625c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800624a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800624e:	61bb      	str	r3, [r7, #24]
        break;
 8006250:	e004      	b.n	800625c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006252:	2300      	movs	r3, #0
 8006254:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	77bb      	strb	r3, [r7, #30]
        break;
 800625a:	bf00      	nop
    }

    if (pclk != 0U)
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d018      	beq.n	8006294 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	085a      	lsrs	r2, r3, #1
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	441a      	add	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	fbb2 f3f3 	udiv	r3, r2, r3
 8006274:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	2b0f      	cmp	r3, #15
 800627a:	d909      	bls.n	8006290 <UART_SetConfig+0x4a0>
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006282:	d205      	bcs.n	8006290 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	b29a      	uxth	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	60da      	str	r2, [r3, #12]
 800628e:	e001      	b.n	8006294 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80062a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3720      	adds	r7, #32
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	40007c00 	.word	0x40007c00
 80062b0:	40023800 	.word	0x40023800
 80062b4:	00f42400 	.word	0x00f42400

080062b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00a      	beq.n	80062e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00a      	beq.n	8006304 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00a      	beq.n	8006326 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632a:	f003 0304 	and.w	r3, r3, #4
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00a      	beq.n	8006348 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	430a      	orrs	r2, r1
 8006346:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634c:	f003 0310 	and.w	r3, r3, #16
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00a      	beq.n	800636a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800636e:	f003 0320 	and.w	r3, r3, #32
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00a      	beq.n	800638c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01a      	beq.n	80063ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063b6:	d10a      	bne.n	80063ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	430a      	orrs	r2, r1
 80063ee:	605a      	str	r2, [r3, #4]
  }
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b098      	sub	sp, #96	@ 0x60
 8006400:	af02      	add	r7, sp, #8
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800640c:	f7fa ff5e 	bl	80012cc <HAL_GetTick>
 8006410:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b08      	cmp	r3, #8
 800641e:	d12e      	bne.n	800647e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006420:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006428:	2200      	movs	r2, #0
 800642a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f88c 	bl	800654c <UART_WaitOnFlagUntilTimeout>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d021      	beq.n	800647e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800644a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800644e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	461a      	mov	r2, r3
 8006456:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006458:	647b      	str	r3, [r7, #68]	@ 0x44
 800645a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800645e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006460:	e841 2300 	strex	r3, r2, [r1]
 8006464:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1e6      	bne.n	800643a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2220      	movs	r2, #32
 8006470:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e062      	b.n	8006544 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0304 	and.w	r3, r3, #4
 8006488:	2b04      	cmp	r3, #4
 800648a:	d149      	bne.n	8006520 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800648c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006494:	2200      	movs	r2, #0
 8006496:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f856 	bl	800654c <UART_WaitOnFlagUntilTimeout>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d03c      	beq.n	8006520 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ae:	e853 3f00 	ldrex	r3, [r3]
 80064b2:	623b      	str	r3, [r7, #32]
   return(result);
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	461a      	mov	r2, r3
 80064c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80064c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064cc:	e841 2300 	strex	r3, r2, [r1]
 80064d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e6      	bne.n	80064a6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3308      	adds	r3, #8
 80064de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	e853 3f00 	ldrex	r3, [r3]
 80064e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f023 0301 	bic.w	r3, r3, #1
 80064ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3308      	adds	r3, #8
 80064f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064f8:	61fa      	str	r2, [r7, #28]
 80064fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	69b9      	ldr	r1, [r7, #24]
 80064fe:	69fa      	ldr	r2, [r7, #28]
 8006500:	e841 2300 	strex	r3, r2, [r1]
 8006504:	617b      	str	r3, [r7, #20]
   return(result);
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1e5      	bne.n	80064d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2220      	movs	r2, #32
 8006510:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e011      	b.n	8006544 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3758      	adds	r7, #88	@ 0x58
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	603b      	str	r3, [r7, #0]
 8006558:	4613      	mov	r3, r2
 800655a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800655c:	e04f      	b.n	80065fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006564:	d04b      	beq.n	80065fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006566:	f7fa feb1 	bl	80012cc <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	429a      	cmp	r2, r3
 8006574:	d302      	bcc.n	800657c <UART_WaitOnFlagUntilTimeout+0x30>
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e04e      	b.n	800661e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0304 	and.w	r3, r3, #4
 800658a:	2b00      	cmp	r3, #0
 800658c:	d037      	beq.n	80065fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b80      	cmp	r3, #128	@ 0x80
 8006592:	d034      	beq.n	80065fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2b40      	cmp	r3, #64	@ 0x40
 8006598:	d031      	beq.n	80065fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69db      	ldr	r3, [r3, #28]
 80065a0:	f003 0308 	and.w	r3, r3, #8
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	d110      	bne.n	80065ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2208      	movs	r2, #8
 80065ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 f838 	bl	8006626 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2208      	movs	r2, #8
 80065ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e029      	b.n	800661e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69db      	ldr	r3, [r3, #28]
 80065d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065d8:	d111      	bne.n	80065fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f000 f81e 	bl	8006626 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e00f      	b.n	800661e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69da      	ldr	r2, [r3, #28]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	4013      	ands	r3, r2
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	429a      	cmp	r2, r3
 800660c:	bf0c      	ite	eq
 800660e:	2301      	moveq	r3, #1
 8006610:	2300      	movne	r3, #0
 8006612:	b2db      	uxtb	r3, r3
 8006614:	461a      	mov	r2, r3
 8006616:	79fb      	ldrb	r3, [r7, #7]
 8006618:	429a      	cmp	r2, r3
 800661a:	d0a0      	beq.n	800655e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006626:	b480      	push	{r7}
 8006628:	b095      	sub	sp, #84	@ 0x54
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006636:	e853 3f00 	ldrex	r3, [r3]
 800663a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800663c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	461a      	mov	r2, r3
 800664a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800664c:	643b      	str	r3, [r7, #64]	@ 0x40
 800664e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006652:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006654:	e841 2300 	strex	r3, r2, [r1]
 8006658:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800665a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e6      	bne.n	800662e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3308      	adds	r3, #8
 8006666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	e853 3f00 	ldrex	r3, [r3]
 800666e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	f023 0301 	bic.w	r3, r3, #1
 8006676:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3308      	adds	r3, #8
 800667e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006680:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006682:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006684:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006688:	e841 2300 	strex	r3, r2, [r1]
 800668c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1e5      	bne.n	8006660 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006698:	2b01      	cmp	r3, #1
 800669a:	d118      	bne.n	80066ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	e853 3f00 	ldrex	r3, [r3]
 80066a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f023 0310 	bic.w	r3, r3, #16
 80066b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	461a      	mov	r2, r3
 80066b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ba:	61bb      	str	r3, [r7, #24]
 80066bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	6979      	ldr	r1, [r7, #20]
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	e841 2300 	strex	r3, r2, [r1]
 80066c6:	613b      	str	r3, [r7, #16]
   return(result);
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1e6      	bne.n	800669c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80066e2:	bf00      	nop
 80066e4:	3754      	adds	r7, #84	@ 0x54
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
	...

080066f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066f0:	b084      	sub	sp, #16
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b084      	sub	sp, #16
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	f107 001c 	add.w	r0, r7, #28
 80066fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006702:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006706:	2b01      	cmp	r3, #1
 8006708:	d121      	bne.n	800674e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800670e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68da      	ldr	r2, [r3, #12]
 800671a:	4b21      	ldr	r3, [pc, #132]	@ (80067a0 <USB_CoreInit+0xb0>)
 800671c:	4013      	ands	r3, r2
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800672e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006732:	2b01      	cmp	r3, #1
 8006734:	d105      	bne.n	8006742 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f001 fae2 	bl	8007d0c <USB_CoreReset>
 8006748:	4603      	mov	r3, r0
 800674a:	73fb      	strb	r3, [r7, #15]
 800674c:	e010      	b.n	8006770 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f001 fad6 	bl	8007d0c <USB_CoreReset>
 8006760:	4603      	mov	r3, r0
 8006762:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006768:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006770:	7fbb      	ldrb	r3, [r7, #30]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d10b      	bne.n	800678e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f043 0206 	orr.w	r2, r3, #6
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f043 0220 	orr.w	r2, r3, #32
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800678e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800679a:	b004      	add	sp, #16
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	ffbdffbf 	.word	0xffbdffbf

080067a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	4613      	mov	r3, r2
 80067b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80067b2:	79fb      	ldrb	r3, [r7, #7]
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d165      	bne.n	8006884 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	4a41      	ldr	r2, [pc, #260]	@ (80068c0 <USB_SetTurnaroundTime+0x11c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d906      	bls.n	80067ce <USB_SetTurnaroundTime+0x2a>
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4a40      	ldr	r2, [pc, #256]	@ (80068c4 <USB_SetTurnaroundTime+0x120>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d202      	bcs.n	80067ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80067c8:	230f      	movs	r3, #15
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	e062      	b.n	8006894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	4a3c      	ldr	r2, [pc, #240]	@ (80068c4 <USB_SetTurnaroundTime+0x120>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d306      	bcc.n	80067e4 <USB_SetTurnaroundTime+0x40>
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	4a3b      	ldr	r2, [pc, #236]	@ (80068c8 <USB_SetTurnaroundTime+0x124>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d202      	bcs.n	80067e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80067de:	230e      	movs	r3, #14
 80067e0:	617b      	str	r3, [r7, #20]
 80067e2:	e057      	b.n	8006894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	4a38      	ldr	r2, [pc, #224]	@ (80068c8 <USB_SetTurnaroundTime+0x124>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d306      	bcc.n	80067fa <USB_SetTurnaroundTime+0x56>
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	4a37      	ldr	r2, [pc, #220]	@ (80068cc <USB_SetTurnaroundTime+0x128>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d202      	bcs.n	80067fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80067f4:	230d      	movs	r3, #13
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	e04c      	b.n	8006894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	4a33      	ldr	r2, [pc, #204]	@ (80068cc <USB_SetTurnaroundTime+0x128>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d306      	bcc.n	8006810 <USB_SetTurnaroundTime+0x6c>
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	4a32      	ldr	r2, [pc, #200]	@ (80068d0 <USB_SetTurnaroundTime+0x12c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d802      	bhi.n	8006810 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800680a:	230c      	movs	r3, #12
 800680c:	617b      	str	r3, [r7, #20]
 800680e:	e041      	b.n	8006894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	4a2f      	ldr	r2, [pc, #188]	@ (80068d0 <USB_SetTurnaroundTime+0x12c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d906      	bls.n	8006826 <USB_SetTurnaroundTime+0x82>
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	4a2e      	ldr	r2, [pc, #184]	@ (80068d4 <USB_SetTurnaroundTime+0x130>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d802      	bhi.n	8006826 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006820:	230b      	movs	r3, #11
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	e036      	b.n	8006894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	4a2a      	ldr	r2, [pc, #168]	@ (80068d4 <USB_SetTurnaroundTime+0x130>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d906      	bls.n	800683c <USB_SetTurnaroundTime+0x98>
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	4a29      	ldr	r2, [pc, #164]	@ (80068d8 <USB_SetTurnaroundTime+0x134>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d802      	bhi.n	800683c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006836:	230a      	movs	r3, #10
 8006838:	617b      	str	r3, [r7, #20]
 800683a:	e02b      	b.n	8006894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	4a26      	ldr	r2, [pc, #152]	@ (80068d8 <USB_SetTurnaroundTime+0x134>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d906      	bls.n	8006852 <USB_SetTurnaroundTime+0xae>
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	4a25      	ldr	r2, [pc, #148]	@ (80068dc <USB_SetTurnaroundTime+0x138>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d202      	bcs.n	8006852 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800684c:	2309      	movs	r3, #9
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	e020      	b.n	8006894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	4a21      	ldr	r2, [pc, #132]	@ (80068dc <USB_SetTurnaroundTime+0x138>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d306      	bcc.n	8006868 <USB_SetTurnaroundTime+0xc4>
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	4a20      	ldr	r2, [pc, #128]	@ (80068e0 <USB_SetTurnaroundTime+0x13c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d802      	bhi.n	8006868 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006862:	2308      	movs	r3, #8
 8006864:	617b      	str	r3, [r7, #20]
 8006866:	e015      	b.n	8006894 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4a1d      	ldr	r2, [pc, #116]	@ (80068e0 <USB_SetTurnaroundTime+0x13c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d906      	bls.n	800687e <USB_SetTurnaroundTime+0xda>
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	4a1c      	ldr	r2, [pc, #112]	@ (80068e4 <USB_SetTurnaroundTime+0x140>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d202      	bcs.n	800687e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006878:	2307      	movs	r3, #7
 800687a:	617b      	str	r3, [r7, #20]
 800687c:	e00a      	b.n	8006894 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800687e:	2306      	movs	r3, #6
 8006880:	617b      	str	r3, [r7, #20]
 8006882:	e007      	b.n	8006894 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006884:	79fb      	ldrb	r3, [r7, #7]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d102      	bne.n	8006890 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800688a:	2309      	movs	r3, #9
 800688c:	617b      	str	r3, [r7, #20]
 800688e:	e001      	b.n	8006894 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006890:	2309      	movs	r3, #9
 8006892:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	029b      	lsls	r3, r3, #10
 80068a8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80068ac:	431a      	orrs	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	371c      	adds	r7, #28
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	00d8acbf 	.word	0x00d8acbf
 80068c4:	00e4e1c0 	.word	0x00e4e1c0
 80068c8:	00f42400 	.word	0x00f42400
 80068cc:	01067380 	.word	0x01067380
 80068d0:	011a499f 	.word	0x011a499f
 80068d4:	01312cff 	.word	0x01312cff
 80068d8:	014ca43f 	.word	0x014ca43f
 80068dc:	016e3600 	.word	0x016e3600
 80068e0:	01a6ab1f 	.word	0x01a6ab1f
 80068e4:	01e84800 	.word	0x01e84800

080068e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f043 0201 	orr.w	r2, r3, #1
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800690a:	b480      	push	{r7}
 800690c:	b083      	sub	sp, #12
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f023 0201 	bic.w	r2, r3, #1
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	460b      	mov	r3, r1
 8006936:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006948:	78fb      	ldrb	r3, [r7, #3]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d115      	bne.n	800697a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800695a:	200a      	movs	r0, #10
 800695c:	f7fa fcc2 	bl	80012e4 <HAL_Delay>
      ms += 10U;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	330a      	adds	r3, #10
 8006964:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 f93f 	bl	8007bea <USB_GetMode>
 800696c:	4603      	mov	r3, r0
 800696e:	2b01      	cmp	r3, #1
 8006970:	d01e      	beq.n	80069b0 <USB_SetCurrentMode+0x84>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2bc7      	cmp	r3, #199	@ 0xc7
 8006976:	d9f0      	bls.n	800695a <USB_SetCurrentMode+0x2e>
 8006978:	e01a      	b.n	80069b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800697a:	78fb      	ldrb	r3, [r7, #3]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d115      	bne.n	80069ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800698c:	200a      	movs	r0, #10
 800698e:	f7fa fca9 	bl	80012e4 <HAL_Delay>
      ms += 10U;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	330a      	adds	r3, #10
 8006996:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f001 f926 	bl	8007bea <USB_GetMode>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d005      	beq.n	80069b0 <USB_SetCurrentMode+0x84>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80069a8:	d9f0      	bls.n	800698c <USB_SetCurrentMode+0x60>
 80069aa:	e001      	b.n	80069b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e005      	b.n	80069bc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2bc8      	cmp	r3, #200	@ 0xc8
 80069b4:	d101      	bne.n	80069ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e000      	b.n	80069bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069c4:	b084      	sub	sp, #16
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b086      	sub	sp, #24
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
 80069ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80069d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80069de:	2300      	movs	r3, #0
 80069e0:	613b      	str	r3, [r7, #16]
 80069e2:	e009      	b.n	80069f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	3340      	adds	r3, #64	@ 0x40
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	4413      	add	r3, r2
 80069ee:	2200      	movs	r2, #0
 80069f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	3301      	adds	r3, #1
 80069f6:	613b      	str	r3, [r7, #16]
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	2b0e      	cmp	r3, #14
 80069fc:	d9f2      	bls.n	80069e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80069fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d11c      	bne.n	8006a40 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a14:	f043 0302 	orr.w	r3, r3, #2
 8006a18:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a1e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	e005      	b.n	8006a4c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a44:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a52:	461a      	mov	r2, r3
 8006a54:	2300      	movs	r3, #0
 8006a56:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a58:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d10d      	bne.n	8006a7c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006a60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d104      	bne.n	8006a72 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006a68:	2100      	movs	r1, #0
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f968 	bl	8006d40 <USB_SetDevSpeed>
 8006a70:	e008      	b.n	8006a84 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006a72:	2101      	movs	r1, #1
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f963 	bl	8006d40 <USB_SetDevSpeed>
 8006a7a:	e003      	b.n	8006a84 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006a7c:	2103      	movs	r1, #3
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f95e 	bl	8006d40 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a84:	2110      	movs	r1, #16
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f8fa 	bl	8006c80 <USB_FlushTxFifo>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f924 	bl	8006ce4 <USB_FlushRxFifo>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aac:	461a      	mov	r2, r3
 8006aae:	2300      	movs	r3, #0
 8006ab0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ab8:	461a      	mov	r2, r3
 8006aba:	2300      	movs	r3, #0
 8006abc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006aca:	2300      	movs	r3, #0
 8006acc:	613b      	str	r3, [r7, #16]
 8006ace:	e043      	b.n	8006b58 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ae6:	d118      	bne.n	8006b1a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10a      	bne.n	8006b04 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006afa:	461a      	mov	r2, r3
 8006afc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006b00:	6013      	str	r3, [r2, #0]
 8006b02:	e013      	b.n	8006b2c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	015a      	lsls	r2, r3, #5
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b10:	461a      	mov	r2, r3
 8006b12:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006b16:	6013      	str	r3, [r2, #0]
 8006b18:	e008      	b.n	8006b2c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	015a      	lsls	r2, r3, #5
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	4413      	add	r3, r2
 8006b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b26:	461a      	mov	r2, r3
 8006b28:	2300      	movs	r3, #0
 8006b2a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b38:	461a      	mov	r2, r3
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	015a      	lsls	r2, r3, #5
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	4413      	add	r3, r2
 8006b46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006b50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	3301      	adds	r3, #1
 8006b56:	613b      	str	r3, [r7, #16]
 8006b58:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d3b5      	bcc.n	8006ad0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b64:	2300      	movs	r3, #0
 8006b66:	613b      	str	r3, [r7, #16]
 8006b68:	e043      	b.n	8006bf2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b80:	d118      	bne.n	8006bb4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d10a      	bne.n	8006b9e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b94:	461a      	mov	r2, r3
 8006b96:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006b9a:	6013      	str	r3, [r2, #0]
 8006b9c:	e013      	b.n	8006bc6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006baa:	461a      	mov	r2, r3
 8006bac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006bb0:	6013      	str	r3, [r2, #0]
 8006bb2:	e008      	b.n	8006bc6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	015a      	lsls	r2, r3, #5
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4413      	add	r3, r2
 8006be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be4:	461a      	mov	r2, r3
 8006be6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006bea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	613b      	str	r3, [r7, #16]
 8006bf2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d3b5      	bcc.n	8006b6a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c10:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006c1e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c20:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d105      	bne.n	8006c34 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	f043 0210 	orr.w	r2, r3, #16
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	699a      	ldr	r2, [r3, #24]
 8006c38:	4b0f      	ldr	r3, [pc, #60]	@ (8006c78 <USB_DevInit+0x2b4>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006c40:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d005      	beq.n	8006c54 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	f043 0208 	orr.w	r2, r3, #8
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006c54:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d105      	bne.n	8006c68 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	699a      	ldr	r2, [r3, #24]
 8006c60:	4b06      	ldr	r3, [pc, #24]	@ (8006c7c <USB_DevInit+0x2b8>)
 8006c62:	4313      	orrs	r3, r2
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c74:	b004      	add	sp, #16
 8006c76:	4770      	bx	lr
 8006c78:	803c3800 	.word	0x803c3800
 8006c7c:	40000004 	.word	0x40000004

08006c80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	3301      	adds	r3, #1
 8006c92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c9a:	d901      	bls.n	8006ca0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e01b      	b.n	8006cd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	daf2      	bge.n	8006c8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	019b      	lsls	r3, r3, #6
 8006cb0:	f043 0220 	orr.w	r2, r3, #32
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cc4:	d901      	bls.n	8006cca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e006      	b.n	8006cd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	f003 0320 	and.w	r3, r3, #32
 8006cd2:	2b20      	cmp	r3, #32
 8006cd4:	d0f0      	beq.n	8006cb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cfc:	d901      	bls.n	8006d02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e018      	b.n	8006d34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	daf2      	bge.n	8006cf0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2210      	movs	r2, #16
 8006d12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	3301      	adds	r3, #1
 8006d18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d20:	d901      	bls.n	8006d26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e006      	b.n	8006d34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	f003 0310 	and.w	r3, r3, #16
 8006d2e:	2b10      	cmp	r3, #16
 8006d30:	d0f0      	beq.n	8006d14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	78fb      	ldrb	r3, [r7, #3]
 8006d5a:	68f9      	ldr	r1, [r7, #12]
 8006d5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d60:	4313      	orrs	r3, r2
 8006d62:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b087      	sub	sp, #28
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f003 0306 	and.w	r3, r3, #6
 8006d8a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d102      	bne.n	8006d98 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006d92:	2300      	movs	r3, #0
 8006d94:	75fb      	strb	r3, [r7, #23]
 8006d96:	e00a      	b.n	8006dae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d002      	beq.n	8006da4 <USB_GetDevSpeed+0x32>
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2b06      	cmp	r3, #6
 8006da2:	d102      	bne.n	8006daa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006da4:	2302      	movs	r3, #2
 8006da6:	75fb      	strb	r3, [r7, #23]
 8006da8:	e001      	b.n	8006dae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006daa:	230f      	movs	r3, #15
 8006dac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	371c      	adds	r7, #28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	785b      	ldrb	r3, [r3, #1]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d139      	bne.n	8006e4c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dde:	69da      	ldr	r2, [r3, #28]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	f003 030f 	and.w	r3, r3, #15
 8006de8:	2101      	movs	r1, #1
 8006dea:	fa01 f303 	lsl.w	r3, r1, r3
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	68f9      	ldr	r1, [r7, #12]
 8006df2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006df6:	4313      	orrs	r3, r2
 8006df8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d153      	bne.n	8006eb8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	791b      	ldrb	r3, [r3, #4]
 8006e2a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e2c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	059b      	lsls	r3, r3, #22
 8006e32:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e34:	431a      	orrs	r2, r3
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	0159      	lsls	r1, r3, #5
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	440b      	add	r3, r1
 8006e3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e42:	4619      	mov	r1, r3
 8006e44:	4b20      	ldr	r3, [pc, #128]	@ (8006ec8 <USB_ActivateEndpoint+0x10c>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	600b      	str	r3, [r1, #0]
 8006e4a:	e035      	b.n	8006eb8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e52:	69da      	ldr	r2, [r3, #28]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	f003 030f 	and.w	r3, r3, #15
 8006e5c:	2101      	movs	r1, #1
 8006e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e62:	041b      	lsls	r3, r3, #16
 8006e64:	68f9      	ldr	r1, [r7, #12]
 8006e66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d119      	bne.n	8006eb8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	791b      	ldrb	r3, [r3, #4]
 8006e9e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006ea0:	430b      	orrs	r3, r1
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	0159      	lsls	r1, r3, #5
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	440b      	add	r3, r1
 8006eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4b05      	ldr	r3, [pc, #20]	@ (8006ec8 <USB_ActivateEndpoint+0x10c>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3714      	adds	r7, #20
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	10008000 	.word	0x10008000

08006ecc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	785b      	ldrb	r3, [r3, #1]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d161      	bne.n	8006fac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006efa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006efe:	d11f      	bne.n	8006f40 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	0151      	lsls	r1, r2, #5
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	440a      	add	r2, r1
 8006f16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f1a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006f1e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	0151      	lsls	r1, r2, #5
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	440a      	add	r2, r1
 8006f36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f3a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	f003 030f 	and.w	r3, r3, #15
 8006f50:	2101      	movs	r1, #1
 8006f52:	fa01 f303 	lsl.w	r3, r1, r3
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	43db      	mvns	r3, r3
 8006f5a:	68f9      	ldr	r1, [r7, #12]
 8006f5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f60:	4013      	ands	r3, r2
 8006f62:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f6a:	69da      	ldr	r2, [r3, #28]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	f003 030f 	and.w	r3, r3, #15
 8006f74:	2101      	movs	r1, #1
 8006f76:	fa01 f303 	lsl.w	r3, r1, r3
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	43db      	mvns	r3, r3
 8006f7e:	68f9      	ldr	r1, [r7, #12]
 8006f80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f84:	4013      	ands	r3, r2
 8006f86:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	0159      	lsls	r1, r3, #5
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	440b      	add	r3, r1
 8006f9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4b35      	ldr	r3, [pc, #212]	@ (800707c <USB_DeactivateEndpoint+0x1b0>)
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	600b      	str	r3, [r1, #0]
 8006faa:	e060      	b.n	800706e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fc2:	d11f      	bne.n	8007004 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	0151      	lsls	r1, r2, #5
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	440a      	add	r2, r1
 8006fda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fde:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006fe2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	0151      	lsls	r1, r2, #5
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	440a      	add	r2, r1
 8006ffa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ffe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007002:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800700a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	f003 030f 	and.w	r3, r3, #15
 8007014:	2101      	movs	r1, #1
 8007016:	fa01 f303 	lsl.w	r3, r1, r3
 800701a:	041b      	lsls	r3, r3, #16
 800701c:	43db      	mvns	r3, r3
 800701e:	68f9      	ldr	r1, [r7, #12]
 8007020:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007024:	4013      	ands	r3, r2
 8007026:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800702e:	69da      	ldr	r2, [r3, #28]
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	f003 030f 	and.w	r3, r3, #15
 8007038:	2101      	movs	r1, #1
 800703a:	fa01 f303 	lsl.w	r3, r1, r3
 800703e:	041b      	lsls	r3, r3, #16
 8007040:	43db      	mvns	r3, r3
 8007042:	68f9      	ldr	r1, [r7, #12]
 8007044:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007048:	4013      	ands	r3, r2
 800704a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	0159      	lsls	r1, r3, #5
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	440b      	add	r3, r1
 8007062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007066:	4619      	mov	r1, r3
 8007068:	4b05      	ldr	r3, [pc, #20]	@ (8007080 <USB_DeactivateEndpoint+0x1b4>)
 800706a:	4013      	ands	r3, r2
 800706c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	ec337800 	.word	0xec337800
 8007080:	eff37800 	.word	0xeff37800

08007084 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08a      	sub	sp, #40	@ 0x28
 8007088:	af02      	add	r7, sp, #8
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	4613      	mov	r3, r2
 8007090:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	785b      	ldrb	r3, [r3, #1]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	f040 8185 	bne.w	80073b0 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d132      	bne.n	8007114 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ba:	691a      	ldr	r2, [r3, #16]
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	0159      	lsls	r1, r3, #5
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	440b      	add	r3, r1
 80070c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070c8:	4619      	mov	r1, r3
 80070ca:	4ba7      	ldr	r3, [pc, #668]	@ (8007368 <USB_EPStartXfer+0x2e4>)
 80070cc:	4013      	ands	r3, r2
 80070ce:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	0151      	lsls	r1, r2, #5
 80070e2:	69fa      	ldr	r2, [r7, #28]
 80070e4:	440a      	add	r2, r1
 80070e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80070ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070fc:	691a      	ldr	r2, [r3, #16]
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	0159      	lsls	r1, r3, #5
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	440b      	add	r3, r1
 8007106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800710a:	4619      	mov	r1, r3
 800710c:	4b97      	ldr	r3, [pc, #604]	@ (800736c <USB_EPStartXfer+0x2e8>)
 800710e:	4013      	ands	r3, r2
 8007110:	610b      	str	r3, [r1, #16]
 8007112:	e097      	b.n	8007244 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	015a      	lsls	r2, r3, #5
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	4413      	add	r3, r2
 800711c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007120:	691a      	ldr	r2, [r3, #16]
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	0159      	lsls	r1, r3, #5
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	440b      	add	r3, r1
 800712a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800712e:	4619      	mov	r1, r3
 8007130:	4b8e      	ldr	r3, [pc, #568]	@ (800736c <USB_EPStartXfer+0x2e8>)
 8007132:	4013      	ands	r3, r2
 8007134:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	4413      	add	r3, r2
 800713e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007142:	691a      	ldr	r2, [r3, #16]
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	0159      	lsls	r1, r3, #5
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	440b      	add	r3, r1
 800714c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007150:	4619      	mov	r1, r3
 8007152:	4b85      	ldr	r3, [pc, #532]	@ (8007368 <USB_EPStartXfer+0x2e4>)
 8007154:	4013      	ands	r3, r2
 8007156:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d11a      	bne.n	8007194 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	691a      	ldr	r2, [r3, #16]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	429a      	cmp	r2, r3
 8007168:	d903      	bls.n	8007172 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	689a      	ldr	r2, [r3, #8]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	69ba      	ldr	r2, [r7, #24]
 8007182:	0151      	lsls	r1, r2, #5
 8007184:	69fa      	ldr	r2, [r7, #28]
 8007186:	440a      	add	r2, r1
 8007188:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800718c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007190:	6113      	str	r3, [r2, #16]
 8007192:	e044      	b.n	800721e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	691a      	ldr	r2, [r3, #16]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	4413      	add	r3, r2
 800719e:	1e5a      	subs	r2, r3, #1
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071b6:	691a      	ldr	r2, [r3, #16]
 80071b8:	8afb      	ldrh	r3, [r7, #22]
 80071ba:	04d9      	lsls	r1, r3, #19
 80071bc:	4b6c      	ldr	r3, [pc, #432]	@ (8007370 <USB_EPStartXfer+0x2ec>)
 80071be:	400b      	ands	r3, r1
 80071c0:	69b9      	ldr	r1, [r7, #24]
 80071c2:	0148      	lsls	r0, r1, #5
 80071c4:	69f9      	ldr	r1, [r7, #28]
 80071c6:	4401      	add	r1, r0
 80071c8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80071cc:	4313      	orrs	r3, r2
 80071ce:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	791b      	ldrb	r3, [r3, #4]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d122      	bne.n	800721e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	0151      	lsls	r1, r2, #5
 80071ea:	69fa      	ldr	r2, [r7, #28]
 80071ec:	440a      	add	r2, r1
 80071ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071f2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80071f6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007204:	691a      	ldr	r2, [r3, #16]
 8007206:	8afb      	ldrh	r3, [r7, #22]
 8007208:	075b      	lsls	r3, r3, #29
 800720a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800720e:	69b9      	ldr	r1, [r7, #24]
 8007210:	0148      	lsls	r0, r1, #5
 8007212:	69f9      	ldr	r1, [r7, #28]
 8007214:	4401      	add	r1, r0
 8007216:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800721a:	4313      	orrs	r3, r2
 800721c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	4413      	add	r3, r2
 8007226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800722a:	691a      	ldr	r2, [r3, #16]
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007234:	69b9      	ldr	r1, [r7, #24]
 8007236:	0148      	lsls	r0, r1, #5
 8007238:	69f9      	ldr	r1, [r7, #28]
 800723a:	4401      	add	r1, r0
 800723c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007240:	4313      	orrs	r3, r2
 8007242:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007244:	79fb      	ldrb	r3, [r7, #7]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d14b      	bne.n	80072e2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d009      	beq.n	8007266 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	015a      	lsls	r2, r3, #5
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	4413      	add	r3, r2
 800725a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800725e:	461a      	mov	r2, r3
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	69db      	ldr	r3, [r3, #28]
 8007264:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	791b      	ldrb	r3, [r3, #4]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d128      	bne.n	80072c0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800727a:	2b00      	cmp	r3, #0
 800727c:	d110      	bne.n	80072a0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	0151      	lsls	r1, r2, #5
 8007290:	69fa      	ldr	r2, [r7, #28]
 8007292:	440a      	add	r2, r1
 8007294:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007298:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	e00f      	b.n	80072c0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	69ba      	ldr	r2, [r7, #24]
 80072b0:	0151      	lsls	r1, r2, #5
 80072b2:	69fa      	ldr	r2, [r7, #28]
 80072b4:	440a      	add	r2, r1
 80072b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072be:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	69ba      	ldr	r2, [r7, #24]
 80072d0:	0151      	lsls	r1, r2, #5
 80072d2:	69fa      	ldr	r2, [r7, #28]
 80072d4:	440a      	add	r2, r1
 80072d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072da:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80072de:	6013      	str	r3, [r2, #0]
 80072e0:	e169      	b.n	80075b6 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	69ba      	ldr	r2, [r7, #24]
 80072f2:	0151      	lsls	r1, r2, #5
 80072f4:	69fa      	ldr	r2, [r7, #28]
 80072f6:	440a      	add	r2, r1
 80072f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072fc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007300:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	791b      	ldrb	r3, [r3, #4]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d015      	beq.n	8007336 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	2b00      	cmp	r3, #0
 8007310:	f000 8151 	beq.w	80075b6 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800731a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	f003 030f 	and.w	r3, r3, #15
 8007324:	2101      	movs	r1, #1
 8007326:	fa01 f303 	lsl.w	r3, r1, r3
 800732a:	69f9      	ldr	r1, [r7, #28]
 800732c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007330:	4313      	orrs	r3, r2
 8007332:	634b      	str	r3, [r1, #52]	@ 0x34
 8007334:	e13f      	b.n	80075b6 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007342:	2b00      	cmp	r3, #0
 8007344:	d116      	bne.n	8007374 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	4413      	add	r3, r2
 800734e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	0151      	lsls	r1, r2, #5
 8007358:	69fa      	ldr	r2, [r7, #28]
 800735a:	440a      	add	r2, r1
 800735c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007360:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007364:	6013      	str	r3, [r2, #0]
 8007366:	e015      	b.n	8007394 <USB_EPStartXfer+0x310>
 8007368:	e007ffff 	.word	0xe007ffff
 800736c:	fff80000 	.word	0xfff80000
 8007370:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	0151      	lsls	r1, r2, #5
 8007386:	69fa      	ldr	r2, [r7, #28]
 8007388:	440a      	add	r2, r1
 800738a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800738e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007392:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	68d9      	ldr	r1, [r3, #12]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	781a      	ldrb	r2, [r3, #0]
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	b298      	uxth	r0, r3
 80073a2:	79fb      	ldrb	r3, [r7, #7]
 80073a4:	9300      	str	r3, [sp, #0]
 80073a6:	4603      	mov	r3, r0
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 f9b9 	bl	8007720 <USB_WritePacket>
 80073ae:	e102      	b.n	80075b6 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	015a      	lsls	r2, r3, #5
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073bc:	691a      	ldr	r2, [r3, #16]
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	0159      	lsls	r1, r3, #5
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	440b      	add	r3, r1
 80073c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ca:	4619      	mov	r1, r3
 80073cc:	4b7c      	ldr	r3, [pc, #496]	@ (80075c0 <USB_EPStartXfer+0x53c>)
 80073ce:	4013      	ands	r3, r2
 80073d0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	4413      	add	r3, r2
 80073da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073de:	691a      	ldr	r2, [r3, #16]
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	0159      	lsls	r1, r3, #5
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	440b      	add	r3, r1
 80073e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ec:	4619      	mov	r1, r3
 80073ee:	4b75      	ldr	r3, [pc, #468]	@ (80075c4 <USB_EPStartXfer+0x540>)
 80073f0:	4013      	ands	r3, r2
 80073f2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d12f      	bne.n	800745a <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	689a      	ldr	r2, [r3, #8]
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	689a      	ldr	r2, [r3, #8]
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	015a      	lsls	r2, r3, #5
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	4413      	add	r3, r2
 800741a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800741e:	691a      	ldr	r2, [r3, #16]
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007428:	69b9      	ldr	r1, [r7, #24]
 800742a:	0148      	lsls	r0, r1, #5
 800742c:	69f9      	ldr	r1, [r7, #28]
 800742e:	4401      	add	r1, r0
 8007430:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007434:	4313      	orrs	r3, r2
 8007436:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	4413      	add	r3, r2
 8007440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	0151      	lsls	r1, r2, #5
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	440a      	add	r2, r1
 800744e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007452:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007456:	6113      	str	r3, [r2, #16]
 8007458:	e05f      	b.n	800751a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d123      	bne.n	80074aa <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	4413      	add	r3, r2
 800746a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800746e:	691a      	ldr	r2, [r3, #16]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007478:	69b9      	ldr	r1, [r7, #24]
 800747a:	0148      	lsls	r0, r1, #5
 800747c:	69f9      	ldr	r1, [r7, #28]
 800747e:	4401      	add	r1, r0
 8007480:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007484:	4313      	orrs	r3, r2
 8007486:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	015a      	lsls	r2, r3, #5
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	4413      	add	r3, r2
 8007490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	0151      	lsls	r1, r2, #5
 800749a:	69fa      	ldr	r2, [r7, #28]
 800749c:	440a      	add	r2, r1
 800749e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074a6:	6113      	str	r3, [r2, #16]
 80074a8:	e037      	b.n	800751a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	691a      	ldr	r2, [r3, #16]
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	4413      	add	r3, r2
 80074b4:	1e5a      	subs	r2, r3, #1
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80074be:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	8afa      	ldrh	r2, [r7, #22]
 80074c6:	fb03 f202 	mul.w	r2, r3, r2
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	015a      	lsls	r2, r3, #5
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	4413      	add	r3, r2
 80074d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074da:	691a      	ldr	r2, [r3, #16]
 80074dc:	8afb      	ldrh	r3, [r7, #22]
 80074de:	04d9      	lsls	r1, r3, #19
 80074e0:	4b39      	ldr	r3, [pc, #228]	@ (80075c8 <USB_EPStartXfer+0x544>)
 80074e2:	400b      	ands	r3, r1
 80074e4:	69b9      	ldr	r1, [r7, #24]
 80074e6:	0148      	lsls	r0, r1, #5
 80074e8:	69f9      	ldr	r1, [r7, #28]
 80074ea:	4401      	add	r1, r0
 80074ec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80074f0:	4313      	orrs	r3, r2
 80074f2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007500:	691a      	ldr	r2, [r3, #16]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800750a:	69b9      	ldr	r1, [r7, #24]
 800750c:	0148      	lsls	r0, r1, #5
 800750e:	69f9      	ldr	r1, [r7, #28]
 8007510:	4401      	add	r1, r0
 8007512:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007516:	4313      	orrs	r3, r2
 8007518:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800751a:	79fb      	ldrb	r3, [r7, #7]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d10d      	bne.n	800753c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d009      	beq.n	800753c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	68d9      	ldr	r1, [r3, #12]
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	4413      	add	r3, r2
 8007534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007538:	460a      	mov	r2, r1
 800753a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	791b      	ldrb	r3, [r3, #4]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d128      	bne.n	8007596 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007550:	2b00      	cmp	r3, #0
 8007552:	d110      	bne.n	8007576 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	4413      	add	r3, r2
 800755c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	69ba      	ldr	r2, [r7, #24]
 8007564:	0151      	lsls	r1, r2, #5
 8007566:	69fa      	ldr	r2, [r7, #28]
 8007568:	440a      	add	r2, r1
 800756a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800756e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007572:	6013      	str	r3, [r2, #0]
 8007574:	e00f      	b.n	8007596 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	015a      	lsls	r2, r3, #5
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	4413      	add	r3, r2
 800757e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	0151      	lsls	r1, r2, #5
 8007588:	69fa      	ldr	r2, [r7, #28]
 800758a:	440a      	add	r2, r1
 800758c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007594:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	69fb      	ldr	r3, [r7, #28]
 800759c:	4413      	add	r3, r2
 800759e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	0151      	lsls	r1, r2, #5
 80075a8:	69fa      	ldr	r2, [r7, #28]
 80075aa:	440a      	add	r2, r1
 80075ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075b0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80075b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3720      	adds	r7, #32
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	fff80000 	.word	0xfff80000
 80075c4:	e007ffff 	.word	0xe007ffff
 80075c8:	1ff80000 	.word	0x1ff80000

080075cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	785b      	ldrb	r3, [r3, #1]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d14a      	bne.n	8007680 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007602:	f040 8086 	bne.w	8007712 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	4413      	add	r3, r2
 8007610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	7812      	ldrb	r2, [r2, #0]
 800761a:	0151      	lsls	r1, r2, #5
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	440a      	add	r2, r1
 8007620:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007624:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007628:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	4413      	add	r3, r2
 8007634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	7812      	ldrb	r2, [r2, #0]
 800763e:	0151      	lsls	r1, r2, #5
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	440a      	add	r2, r1
 8007644:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007648:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800764c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3301      	adds	r3, #1
 8007652:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f242 7210 	movw	r2, #10000	@ 0x2710
 800765a:	4293      	cmp	r3, r2
 800765c:	d902      	bls.n	8007664 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	75fb      	strb	r3, [r7, #23]
          break;
 8007662:	e056      	b.n	8007712 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	015a      	lsls	r2, r3, #5
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	4413      	add	r3, r2
 800766e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007678:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800767c:	d0e7      	beq.n	800764e <USB_EPStopXfer+0x82>
 800767e:	e048      	b.n	8007712 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	015a      	lsls	r2, r3, #5
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	4413      	add	r3, r2
 800768a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007694:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007698:	d13b      	bne.n	8007712 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	7812      	ldrb	r2, [r2, #0]
 80076ae:	0151      	lsls	r1, r2, #5
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	440a      	add	r2, r1
 80076b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80076bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	7812      	ldrb	r2, [r2, #0]
 80076d2:	0151      	lsls	r1, r2, #5
 80076d4:	693a      	ldr	r2, [r7, #16]
 80076d6:	440a      	add	r2, r1
 80076d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80076e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3301      	adds	r3, #1
 80076e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d902      	bls.n	80076f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	75fb      	strb	r3, [r7, #23]
          break;
 80076f6:	e00c      	b.n	8007712 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	4413      	add	r3, r2
 8007702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800770c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007710:	d0e7      	beq.n	80076e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007712:	7dfb      	ldrb	r3, [r7, #23]
}
 8007714:	4618      	mov	r0, r3
 8007716:	371c      	adds	r7, #28
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007720:	b480      	push	{r7}
 8007722:	b089      	sub	sp, #36	@ 0x24
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	4611      	mov	r1, r2
 800772c:	461a      	mov	r2, r3
 800772e:	460b      	mov	r3, r1
 8007730:	71fb      	strb	r3, [r7, #7]
 8007732:	4613      	mov	r3, r2
 8007734:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800773e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007742:	2b00      	cmp	r3, #0
 8007744:	d123      	bne.n	800778e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007746:	88bb      	ldrh	r3, [r7, #4]
 8007748:	3303      	adds	r3, #3
 800774a:	089b      	lsrs	r3, r3, #2
 800774c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800774e:	2300      	movs	r3, #0
 8007750:	61bb      	str	r3, [r7, #24]
 8007752:	e018      	b.n	8007786 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007754:	79fb      	ldrb	r3, [r7, #7]
 8007756:	031a      	lsls	r2, r3, #12
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	4413      	add	r3, r2
 800775c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007760:	461a      	mov	r2, r3
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	3301      	adds	r3, #1
 800776c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	3301      	adds	r3, #1
 8007772:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	3301      	adds	r3, #1
 8007778:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	3301      	adds	r3, #1
 800777e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	3301      	adds	r3, #1
 8007784:	61bb      	str	r3, [r7, #24]
 8007786:	69ba      	ldr	r2, [r7, #24]
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	429a      	cmp	r2, r3
 800778c:	d3e2      	bcc.n	8007754 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3724      	adds	r7, #36	@ 0x24
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800779c:	b480      	push	{r7}
 800779e:	b08b      	sub	sp, #44	@ 0x2c
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	4613      	mov	r3, r2
 80077a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80077b2:	88fb      	ldrh	r3, [r7, #6]
 80077b4:	089b      	lsrs	r3, r3, #2
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80077ba:	88fb      	ldrh	r3, [r7, #6]
 80077bc:	f003 0303 	and.w	r3, r3, #3
 80077c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80077c2:	2300      	movs	r3, #0
 80077c4:	623b      	str	r3, [r7, #32]
 80077c6:	e014      	b.n	80077f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80077d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d6:	3301      	adds	r3, #1
 80077d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80077da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077dc:	3301      	adds	r3, #1
 80077de:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80077e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e2:	3301      	adds	r3, #1
 80077e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80077e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e8:	3301      	adds	r3, #1
 80077ea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	3301      	adds	r3, #1
 80077f0:	623b      	str	r3, [r7, #32]
 80077f2:	6a3a      	ldr	r2, [r7, #32]
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d3e6      	bcc.n	80077c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80077fa:	8bfb      	ldrh	r3, [r7, #30]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d01e      	beq.n	800783e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007800:	2300      	movs	r3, #0
 8007802:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800780a:	461a      	mov	r2, r3
 800780c:	f107 0310 	add.w	r3, r7, #16
 8007810:	6812      	ldr	r2, [r2, #0]
 8007812:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	b2db      	uxtb	r3, r3
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	fa22 f303 	lsr.w	r3, r2, r3
 8007820:	b2da      	uxtb	r2, r3
 8007822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007824:	701a      	strb	r2, [r3, #0]
      i++;
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	3301      	adds	r3, #1
 800782a:	623b      	str	r3, [r7, #32]
      pDest++;
 800782c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782e:	3301      	adds	r3, #1
 8007830:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007832:	8bfb      	ldrh	r3, [r7, #30]
 8007834:	3b01      	subs	r3, #1
 8007836:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007838:	8bfb      	ldrh	r3, [r7, #30]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1ea      	bne.n	8007814 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800783e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007840:	4618      	mov	r0, r3
 8007842:	372c      	adds	r7, #44	@ 0x2c
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
 8007854:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	785b      	ldrb	r3, [r3, #1]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d12c      	bne.n	80078c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	015a      	lsls	r2, r3, #5
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	4413      	add	r3, r2
 8007870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	db12      	blt.n	80078a0 <USB_EPSetStall+0x54>
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00f      	beq.n	80078a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	015a      	lsls	r2, r3, #5
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	4413      	add	r3, r2
 8007888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	0151      	lsls	r1, r2, #5
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	440a      	add	r2, r1
 8007896:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800789a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800789e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	0151      	lsls	r1, r2, #5
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	440a      	add	r2, r1
 80078b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80078be:	6013      	str	r3, [r2, #0]
 80078c0:	e02b      	b.n	800791a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	015a      	lsls	r2, r3, #5
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	db12      	blt.n	80078fa <USB_EPSetStall+0xae>
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00f      	beq.n	80078fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	015a      	lsls	r2, r3, #5
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	4413      	add	r3, r2
 80078e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	0151      	lsls	r1, r2, #5
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	440a      	add	r2, r1
 80078f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80078f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4413      	add	r3, r2
 8007902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	0151      	lsls	r1, r2, #5
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	440a      	add	r2, r1
 8007910:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007914:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007918:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	785b      	ldrb	r3, [r3, #1]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d128      	bne.n	8007996 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	015a      	lsls	r2, r3, #5
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	4413      	add	r3, r2
 800794c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	0151      	lsls	r1, r2, #5
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	440a      	add	r2, r1
 800795a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800795e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007962:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	791b      	ldrb	r3, [r3, #4]
 8007968:	2b03      	cmp	r3, #3
 800796a:	d003      	beq.n	8007974 <USB_EPClearStall+0x4c>
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	791b      	ldrb	r3, [r3, #4]
 8007970:	2b02      	cmp	r3, #2
 8007972:	d138      	bne.n	80079e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4413      	add	r3, r2
 800797c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	0151      	lsls	r1, r2, #5
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	440a      	add	r2, r1
 800798a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800798e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007992:	6013      	str	r3, [r2, #0]
 8007994:	e027      	b.n	80079e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	015a      	lsls	r2, r3, #5
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4413      	add	r3, r2
 800799e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	0151      	lsls	r1, r2, #5
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	440a      	add	r2, r1
 80079ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80079b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	791b      	ldrb	r3, [r3, #4]
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d003      	beq.n	80079c6 <USB_EPClearStall+0x9e>
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	791b      	ldrb	r3, [r3, #4]
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d10f      	bne.n	80079e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	015a      	lsls	r2, r3, #5
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	4413      	add	r3, r2
 80079ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	0151      	lsls	r1, r2, #5
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	440a      	add	r2, r1
 80079dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80079e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3714      	adds	r7, #20
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a12:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007a16:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	78fb      	ldrb	r3, [r7, #3]
 8007a22:	011b      	lsls	r3, r3, #4
 8007a24:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007a28:	68f9      	ldr	r1, [r7, #12]
 8007a2a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007a5a:	f023 0303 	bic.w	r3, r3, #3
 8007a5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a6e:	f023 0302 	bic.w	r3, r3, #2
 8007a72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3714      	adds	r7, #20
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b085      	sub	sp, #20
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007a9c:	f023 0303 	bic.w	r3, r3, #3
 8007aa0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ab0:	f043 0302 	orr.w	r3, r3, #2
 8007ab4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	695b      	ldr	r3, [r3, #20]
 8007ad0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	4013      	ands	r3, r2
 8007ada:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007adc:	68fb      	ldr	r3, [r7, #12]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b085      	sub	sp, #20
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	0c1b      	lsrs	r3, r3, #16
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b085      	sub	sp, #20
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	4013      	ands	r3, r2
 8007b40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	b29b      	uxth	r3, r3
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b085      	sub	sp, #20
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007b62:	78fb      	ldrb	r3, [r7, #3]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b78:	695b      	ldr	r3, [r3, #20]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b80:	68bb      	ldr	r3, [r7, #8]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b087      	sub	sp, #28
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	460b      	mov	r3, r1
 8007b98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bb0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007bb2:	78fb      	ldrb	r3, [r7, #3]
 8007bb4:	f003 030f 	and.w	r3, r3, #15
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	fa22 f303 	lsr.w	r3, r2, r3
 8007bbe:	01db      	lsls	r3, r3, #7
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007bc8:	78fb      	ldrb	r3, [r7, #3]
 8007bca:	015a      	lsls	r2, r3, #5
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	4013      	ands	r3, r2
 8007bda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007bdc:	68bb      	ldr	r3, [r7, #8]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	371c      	adds	r7, #28
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	f003 0301 	and.w	r3, r3, #1
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	370c      	adds	r7, #12
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr
	...

08007c08 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c22:	4619      	mov	r1, r3
 8007c24:	4b09      	ldr	r3, [pc, #36]	@ (8007c4c <USB_ActivateSetup+0x44>)
 8007c26:	4013      	ands	r3, r2
 8007c28:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr
 8007c4c:	fffff800 	.word	0xfffff800

08007c50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b087      	sub	sp, #28
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	607a      	str	r2, [r7, #4]
 8007c5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	333c      	adds	r3, #60	@ 0x3c
 8007c66:	3304      	adds	r3, #4
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	4a26      	ldr	r2, [pc, #152]	@ (8007d08 <USB_EP0_OutStart+0xb8>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d90a      	bls.n	8007c8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c84:	d101      	bne.n	8007c8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	e037      	b.n	8007cfa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c90:	461a      	mov	r2, r3
 8007c92:	2300      	movs	r3, #0
 8007c94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	697a      	ldr	r2, [r7, #20]
 8007ca0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ca4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ca8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cb8:	f043 0318 	orr.w	r3, r3, #24
 8007cbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ccc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007cd0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007cd2:	7afb      	ldrb	r3, [r7, #11]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d10f      	bne.n	8007cf8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cde:	461a      	mov	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cf2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007cf6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	4f54300a 	.word	0x4f54300a

08007d0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d14:	2300      	movs	r3, #0
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d24:	d901      	bls.n	8007d2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e022      	b.n	8007d70 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	daf2      	bge.n	8007d18 <USB_CoreReset+0xc>

  count = 10U;
 8007d32:	230a      	movs	r3, #10
 8007d34:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007d36:	e002      	b.n	8007d3e <USB_CoreReset+0x32>
  {
    count--;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1f9      	bne.n	8007d38 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	f043 0201 	orr.w	r2, r3, #1
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	3301      	adds	r3, #1
 8007d54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d5c:	d901      	bls.n	8007d62 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e006      	b.n	8007d70 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d0f0      	beq.n	8007d50 <USB_CoreReset+0x44>

  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007d7c:	b5b0      	push	{r4, r5, r7, lr}
 8007d7e:	b08c      	sub	sp, #48	@ 0x30
 8007d80:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007d82:	2100      	movs	r1, #0
 8007d84:	2000      	movs	r0, #0
 8007d86:	f005 ff91 	bl	800dcac <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8007d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8007df4 <MX_LWIP_Init+0x78>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8007d90:	4b19      	ldr	r3, [pc, #100]	@ (8007df8 <MX_LWIP_Init+0x7c>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8007d96:	4b19      	ldr	r3, [pc, #100]	@ (8007dfc <MX_LWIP_Init+0x80>)
 8007d98:	2200      	movs	r2, #0
 8007d9a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007d9c:	4b18      	ldr	r3, [pc, #96]	@ (8007e00 <MX_LWIP_Init+0x84>)
 8007d9e:	9302      	str	r3, [sp, #8]
 8007da0:	4b18      	ldr	r3, [pc, #96]	@ (8007e04 <MX_LWIP_Init+0x88>)
 8007da2:	9301      	str	r3, [sp, #4]
 8007da4:	2300      	movs	r3, #0
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	4b14      	ldr	r3, [pc, #80]	@ (8007dfc <MX_LWIP_Init+0x80>)
 8007daa:	4a13      	ldr	r2, [pc, #76]	@ (8007df8 <MX_LWIP_Init+0x7c>)
 8007dac:	4911      	ldr	r1, [pc, #68]	@ (8007df4 <MX_LWIP_Init+0x78>)
 8007dae:	4816      	ldr	r0, [pc, #88]	@ (8007e08 <MX_LWIP_Init+0x8c>)
 8007db0:	f009 fd3c 	bl	801182c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007db4:	4814      	ldr	r0, [pc, #80]	@ (8007e08 <MX_LWIP_Init+0x8c>)
 8007db6:	f009 feff 	bl	8011bb8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8007dba:	4813      	ldr	r0, [pc, #76]	@ (8007e08 <MX_LWIP_Init+0x8c>)
 8007dbc:	f009 ff0c 	bl	8011bd8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007dc0:	4912      	ldr	r1, [pc, #72]	@ (8007e0c <MX_LWIP_Init+0x90>)
 8007dc2:	4811      	ldr	r0, [pc, #68]	@ (8007e08 <MX_LWIP_Init+0x8c>)
 8007dc4:	f00a f818 	bl	8011df8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8007dc8:	4b11      	ldr	r3, [pc, #68]	@ (8007e10 <MX_LWIP_Init+0x94>)
 8007dca:	1d3c      	adds	r4, r7, #4
 8007dcc:	461d      	mov	r5, r3
 8007dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007dd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8007dda:	1d3b      	adds	r3, r7, #4
 8007ddc:	490a      	ldr	r1, [pc, #40]	@ (8007e08 <MX_LWIP_Init+0x8c>)
 8007dde:	4618      	mov	r0, r3
 8007de0:	f002 fde2 	bl	800a9a8 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8007de4:	4808      	ldr	r0, [pc, #32]	@ (8007e08 <MX_LWIP_Init+0x8c>)
 8007de6:	f011 fbbd 	bl	8019564 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007dea:	bf00      	nop
 8007dec:	3720      	adds	r7, #32
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bdb0      	pop	{r4, r5, r7, pc}
 8007df2:	bf00      	nop
 8007df4:	200008dc 	.word	0x200008dc
 8007df8:	200008e0 	.word	0x200008e0
 8007dfc:	200008e4 	.word	0x200008e4
 8007e00:	0800dbe9 	.word	0x0800dbe9
 8007e04:	080083ad 	.word	0x080083ad
 8007e08:	20000894 	.word	0x20000894
 8007e0c:	08007e15 	.word	0x08007e15
 8007e10:	0801fcf4 	.word	0x0801fcf4

08007e14 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8007e3a:	2320      	movs	r3, #32
 8007e3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8007e3e:	f3bf 8f4f 	dsb	sy
}
 8007e42:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8007e44:	e00b      	b.n	8007e5e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8007e46:	4a0d      	ldr	r2, [pc, #52]	@ (8007e7c <SCB_InvalidateDCache_by_Addr+0x54>)
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	4413      	add	r3, r2
 8007e54:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	dcf0      	bgt.n	8007e46 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8007e64:	f3bf 8f4f 	dsb	sy
}
 8007e68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007e6a:	f3bf 8f6f 	isb	sy
}
 8007e6e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8007e70:	bf00      	nop
 8007e72:	371c      	adds	r7, #28
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	e000ed00 	.word	0xe000ed00

08007e80 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8007e88:	4b04      	ldr	r3, [pc, #16]	@ (8007e9c <HAL_ETH_RxCpltCallback+0x1c>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f002 ff13 	bl	800acb8 <osSemaphoreRelease>
}
 8007e92:	bf00      	nop
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	200008ec 	.word	0x200008ec

08007ea0 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8007ea8:	4b04      	ldr	r3, [pc, #16]	@ (8007ebc <HAL_ETH_TxCpltCallback+0x1c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f002 ff03 	bl	800acb8 <osSemaphoreRelease>
}
 8007eb2:	bf00      	nop
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	200008f0 	.word	0x200008f0

08007ec0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7fa f966 	bl	800219a <HAL_ETH_GetDMAError>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ed4:	2b80      	cmp	r3, #128	@ 0x80
 8007ed6:	d104      	bne.n	8007ee2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8007ed8:	4b04      	ldr	r3, [pc, #16]	@ (8007eec <HAL_ETH_ErrorCallback+0x2c>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f002 feeb 	bl	800acb8 <osSemaphoreRelease>
  }
}
 8007ee2:	bf00      	nop
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	200008ec 	.word	0x200008ec

08007ef0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007ef0:	b5b0      	push	{r4, r5, r7, lr}
 8007ef2:	b0b4      	sub	sp, #208	@ 0xd0
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
  uint32_t duplex, speed = 0;
 8007efe:	2300      	movs	r3, #0
 8007f00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  int32_t PHYLinkState = 0;
 8007f04:	2300      	movs	r3, #0
 8007f06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 8007f0a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007f0e:	2264      	movs	r2, #100	@ 0x64
 8007f10:	2100      	movs	r1, #0
 8007f12:	4618      	mov	r0, r3
 8007f14:	f016 ff34 	bl	801ed80 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007f18:	4b9f      	ldr	r3, [pc, #636]	@ (8008198 <low_level_init+0x2a8>)
 8007f1a:	4aa0      	ldr	r2, [pc, #640]	@ (800819c <low_level_init+0x2ac>)
 8007f1c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  MACAddr[1] = 0x80;
 8007f24:	2380      	movs	r3, #128	@ 0x80
 8007f26:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  MACAddr[2] = 0xE1;
 8007f2a:	23e1      	movs	r3, #225	@ 0xe1
 8007f2c:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  MACAddr[3] = 0x00;
 8007f30:	2300      	movs	r3, #0
 8007f32:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
  MACAddr[4] = 0x00;
 8007f36:	2300      	movs	r3, #0
 8007f38:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
  MACAddr[5] = 0x00;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
  heth.Init.MACAddr = &MACAddr[0];
 8007f42:	4a95      	ldr	r2, [pc, #596]	@ (8008198 <low_level_init+0x2a8>)
 8007f44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8007f48:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007f4a:	4b93      	ldr	r3, [pc, #588]	@ (8008198 <low_level_init+0x2a8>)
 8007f4c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007f50:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007f52:	4b91      	ldr	r3, [pc, #580]	@ (8008198 <low_level_init+0x2a8>)
 8007f54:	4a92      	ldr	r2, [pc, #584]	@ (80081a0 <low_level_init+0x2b0>)
 8007f56:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007f58:	4b8f      	ldr	r3, [pc, #572]	@ (8008198 <low_level_init+0x2a8>)
 8007f5a:	4a92      	ldr	r2, [pc, #584]	@ (80081a4 <low_level_init+0x2b4>)
 8007f5c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007f5e:	4b8e      	ldr	r3, [pc, #568]	@ (8008198 <low_level_init+0x2a8>)
 8007f60:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007f64:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007f66:	488c      	ldr	r0, [pc, #560]	@ (8008198 <low_level_init+0x2a8>)
 8007f68:	f7f9 face 	bl	8001508 <HAL_ETH_Init>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007f72:	2238      	movs	r2, #56	@ 0x38
 8007f74:	2100      	movs	r1, #0
 8007f76:	488c      	ldr	r0, [pc, #560]	@ (80081a8 <low_level_init+0x2b8>)
 8007f78:	f016 ff02 	bl	801ed80 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007f7c:	4b8a      	ldr	r3, [pc, #552]	@ (80081a8 <low_level_init+0x2b8>)
 8007f7e:	2221      	movs	r2, #33	@ 0x21
 8007f80:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007f82:	4b89      	ldr	r3, [pc, #548]	@ (80081a8 <low_level_init+0x2b8>)
 8007f84:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8007f88:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007f8a:	4b87      	ldr	r3, [pc, #540]	@ (80081a8 <low_level_init+0x2b8>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007f90:	4886      	ldr	r0, [pc, #536]	@ (80081ac <low_level_init+0x2bc>)
 8007f92:	f009 fb2f 	bl	80115f4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2206      	movs	r2, #6
 8007f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007f9e:	4b7e      	ldr	r3, [pc, #504]	@ (8008198 <low_level_init+0x2a8>)
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	781a      	ldrb	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007faa:	4b7b      	ldr	r3, [pc, #492]	@ (8008198 <low_level_init+0x2a8>)
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	785a      	ldrb	r2, [r3, #1]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007fb6:	4b78      	ldr	r3, [pc, #480]	@ (8008198 <low_level_init+0x2a8>)
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	789a      	ldrb	r2, [r3, #2]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007fc2:	4b75      	ldr	r3, [pc, #468]	@ (8008198 <low_level_init+0x2a8>)
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	78da      	ldrb	r2, [r3, #3]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007fce:	4b72      	ldr	r3, [pc, #456]	@ (8008198 <low_level_init+0x2a8>)
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	791a      	ldrb	r2, [r3, #4]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007fda:	4b6f      	ldr	r3, [pc, #444]	@ (8008198 <low_level_init+0x2a8>)
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	795a      	ldrb	r2, [r3, #5]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8007fec:	869a      	strh	r2, [r3, #52]	@ 0x34

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP | NETIF_FLAG_IGMP;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ff4:	f043 032a 	orr.w	r3, r3, #42	@ 0x2a
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_IGMP;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8008000:	2300      	movs	r3, #0
 8008002:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008004:	2300      	movs	r3, #0
 8008006:	653b      	str	r3, [r7, #80]	@ 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8008008:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800800c:	2101      	movs	r1, #1
 800800e:	4618      	mov	r0, r3
 8008010:	f002 fdd2 	bl	800abb8 <osSemaphoreCreate>
 8008014:	4603      	mov	r3, r0
 8008016:	4a66      	ldr	r2, [pc, #408]	@ (80081b0 <low_level_init+0x2c0>)
 8008018:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 800801a:	2300      	movs	r3, #0
 800801c:	647b      	str	r3, [r7, #68]	@ 0x44
 800801e:	2300      	movs	r3, #0
 8008020:	64bb      	str	r3, [r7, #72]	@ 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8008022:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8008026:	2101      	movs	r1, #1
 8008028:	4618      	mov	r0, r3
 800802a:	f002 fdc5 	bl	800abb8 <osSemaphoreCreate>
 800802e:	4603      	mov	r3, r0
 8008030:	4a60      	ldr	r2, [pc, #384]	@ (80081b4 <low_level_init+0x2c4>)
 8008032:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8008034:	4b5e      	ldr	r3, [pc, #376]	@ (80081b0 <low_level_init+0x2c0>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2100      	movs	r1, #0
 800803a:	4618      	mov	r0, r3
 800803c:	f002 fdee 	bl	800ac1c <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8008040:	4b5c      	ldr	r3, [pc, #368]	@ (80081b4 <low_level_init+0x2c4>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2100      	movs	r1, #0
 8008046:	4618      	mov	r0, r3
 8008048:	f002 fde8 	bl	800ac1c <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800804c:	4b5a      	ldr	r3, [pc, #360]	@ (80081b8 <low_level_init+0x2c8>)
 800804e:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8008052:	461d      	mov	r5, r3
 8008054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008058:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800805c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8008060:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008064:	6879      	ldr	r1, [r7, #4]
 8008066:	4618      	mov	r0, r3
 8008068:	f002 fc9e 	bl	800a9a8 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800806c:	4953      	ldr	r1, [pc, #332]	@ (80081bc <low_level_init+0x2cc>)
 800806e:	4854      	ldr	r0, [pc, #336]	@ (80081c0 <low_level_init+0x2d0>)
 8008070:	f7f9 f805 	bl	800107e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8008074:	4852      	ldr	r0, [pc, #328]	@ (80081c0 <low_level_init+0x2d0>)
 8008076:	f7f9 f834 	bl	80010e2 <LAN8742_Init>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d006      	beq.n	800808e <low_level_init+0x19e>
  {
    netif_set_link_down(netif);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f009 fe89 	bl	8011d98 <netif_set_link_down>
    netif_set_down(netif);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f009 fe1c 	bl	8011cc4 <netif_set_down>
 800808c:	e081      	b.n	8008192 <low_level_init+0x2a2>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800808e:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8008092:	2b00      	cmp	r3, #0
 8008094:	d165      	bne.n	8008162 <low_level_init+0x272>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008096:	484a      	ldr	r0, [pc, #296]	@ (80081c0 <low_level_init+0x2d0>)
 8008098:	f7f9 f870 	bl	800117c <LAN8742_GetLinkState>
 800809c:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80080a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	dc06      	bgt.n	80080b6 <low_level_init+0x1c6>
    {
      netif_set_link_down(netif);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f009 fe75 	bl	8011d98 <netif_set_link_down>
      netif_set_down(netif);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f009 fe08 	bl	8011cc4 <netif_set_down>
 80080b4:	e057      	b.n	8008166 <low_level_init+0x276>
    }
    else
    {
      switch (PHYLinkState)
 80080b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80080ba:	3b02      	subs	r3, #2
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d82b      	bhi.n	8008118 <low_level_init+0x228>
 80080c0:	a201      	add	r2, pc, #4	@ (adr r2, 80080c8 <low_level_init+0x1d8>)
 80080c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c6:	bf00      	nop
 80080c8:	080080d9 	.word	0x080080d9
 80080cc:	080080eb 	.word	0x080080eb
 80080d0:	080080fb 	.word	0x080080fb
 80080d4:	0800810b 	.word	0x0800810b
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80080d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80080dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 80080e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80080e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80080e8:	e01f      	b.n	800812a <low_level_init+0x23a>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80080ea:	2300      	movs	r3, #0
 80080ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 80080f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80080f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 80080f8:	e017      	b.n	800812a <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80080fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80080fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 8008102:	2300      	movs	r3, #0
 8008104:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8008108:	e00f      	b.n	800812a <low_level_init+0x23a>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800810a:	2300      	movs	r3, #0
 800810c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_10M;
 8008110:	2300      	movs	r3, #0
 8008112:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8008116:	e008      	b.n	800812a <low_level_init+0x23a>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8008118:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800811c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
        speed = ETH_SPEED_100M;
 8008120:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008124:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
        break;
 8008128:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800812a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800812e:	4619      	mov	r1, r3
 8008130:	4819      	ldr	r0, [pc, #100]	@ (8008198 <low_level_init+0x2a8>)
 8008132:	f7f9 fed1 	bl	8001ed8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8008136:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800813a:	677b      	str	r3, [r7, #116]	@ 0x74
    MACConf.Speed = speed;
 800813c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008140:	673b      	str	r3, [r7, #112]	@ 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008142:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008146:	4619      	mov	r1, r3
 8008148:	4813      	ldr	r0, [pc, #76]	@ (8008198 <low_level_init+0x2a8>)
 800814a:	f7f9 ffbc 	bl	80020c6 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800814e:	4812      	ldr	r0, [pc, #72]	@ (8008198 <low_level_init+0x2a8>)
 8008150:	f7f9 fa74 	bl	800163c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f009 fd3f 	bl	8011bd8 <netif_set_up>
    netif_set_link_up(netif);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f009 fde4 	bl	8011d28 <netif_set_link_up>
 8008160:	e001      	b.n	8008166 <low_level_init+0x276>
    }

  }
  else
  {
    Error_Handler();
 8008162:	f7f8 fd17 	bl	8000b94 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 8008166:	f7f9 f8e1 	bl	800132c <HAL_GetREVID>
 800816a:	4603      	mov	r3, r0
 800816c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008170:	d10f      	bne.n	8008192 <low_level_init+0x2a2>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 8008172:	4b14      	ldr	r3, [pc, #80]	@ (80081c4 <low_level_init+0x2d4>)
 8008174:	f107 040c 	add.w	r4, r7, #12
 8008178:	461d      	mov	r5, r3
 800817a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800817c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800817e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008182:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 8008186:	f107 030c 	add.w	r3, r7, #12
 800818a:	2100      	movs	r1, #0
 800818c:	4618      	mov	r0, r3
 800818e:	f002 fc0b 	bl	800a9a8 <osThreadCreate>
  }
}
 8008192:	37d0      	adds	r7, #208	@ 0xd0
 8008194:	46bd      	mov	sp, r7
 8008196:	bdb0      	pop	{r4, r5, r7, pc}
 8008198:	200008f4 	.word	0x200008f4
 800819c:	40028000 	.word	0x40028000
 80081a0:	20000238 	.word	0x20000238
 80081a4:	20000198 	.word	0x20000198
 80081a8:	200009a4 	.word	0x200009a4
 80081ac:	080235d0 	.word	0x080235d0
 80081b0:	200008ec 	.word	0x200008ec
 80081b4:	200008f0 	.word	0x200008f0
 80081b8:	0801fd18 	.word	0x0801fd18
 80081bc:	2000000c 	.word	0x2000000c
 80081c0:	200009dc 	.word	0x200009dc
 80081c4:	0801fd44 	.word	0x0801fd44

080081c8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b092      	sub	sp, #72	@ 0x48
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80081d2:	2300      	movs	r3, #0
 80081d4:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 80081d6:	2300      	movs	r3, #0
 80081d8:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80081e0:	f107 030c 	add.w	r3, r7, #12
 80081e4:	2230      	movs	r2, #48	@ 0x30
 80081e6:	2100      	movs	r1, #0
 80081e8:	4618      	mov	r0, r3
 80081ea:	f016 fdc9 	bl	801ed80 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80081ee:	f107 030c 	add.w	r3, r7, #12
 80081f2:	2230      	movs	r2, #48	@ 0x30
 80081f4:	2100      	movs	r1, #0
 80081f6:	4618      	mov	r0, r3
 80081f8:	f016 fdc2 	bl	801ed80 <memset>

  for(q = p; q != NULL; q = q->next)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8008200:	e045      	b.n	800828e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8008202:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008204:	2b03      	cmp	r3, #3
 8008206:	d902      	bls.n	800820e <low_level_output+0x46>
      return ERR_IF;
 8008208:	f06f 030b 	mvn.w	r3, #11
 800820c:	e07f      	b.n	800830e <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800820e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008210:	6859      	ldr	r1, [r3, #4]
 8008212:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008214:	4613      	mov	r3, r2
 8008216:	005b      	lsls	r3, r3, #1
 8008218:	4413      	add	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	3348      	adds	r3, #72	@ 0x48
 800821e:	443b      	add	r3, r7
 8008220:	3b3c      	subs	r3, #60	@ 0x3c
 8008222:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008224:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008226:	895b      	ldrh	r3, [r3, #10]
 8008228:	4619      	mov	r1, r3
 800822a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800822c:	4613      	mov	r3, r2
 800822e:	005b      	lsls	r3, r3, #1
 8008230:	4413      	add	r3, r2
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	3348      	adds	r3, #72	@ 0x48
 8008236:	443b      	add	r3, r7
 8008238:	3b38      	subs	r3, #56	@ 0x38
 800823a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800823c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800823e:	2b00      	cmp	r3, #0
 8008240:	d011      	beq.n	8008266 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008242:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008244:	1e5a      	subs	r2, r3, #1
 8008246:	f107 000c 	add.w	r0, r7, #12
 800824a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800824c:	460b      	mov	r3, r1
 800824e:	005b      	lsls	r3, r3, #1
 8008250:	440b      	add	r3, r1
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	18c1      	adds	r1, r0, r3
 8008256:	4613      	mov	r3, r2
 8008258:	005b      	lsls	r3, r3, #1
 800825a:	4413      	add	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	3348      	adds	r3, #72	@ 0x48
 8008260:	443b      	add	r3, r7
 8008262:	3b34      	subs	r3, #52	@ 0x34
 8008264:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008266:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d109      	bne.n	8008282 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800826e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008270:	4613      	mov	r3, r2
 8008272:	005b      	lsls	r3, r3, #1
 8008274:	4413      	add	r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	3348      	adds	r3, #72	@ 0x48
 800827a:	443b      	add	r3, r7
 800827c:	3b34      	subs	r3, #52	@ 0x34
 800827e:	2200      	movs	r2, #0
 8008280:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008284:	3301      	adds	r3, #1
 8008286:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8008288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	643b      	str	r3, [r7, #64]	@ 0x40
 800828e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1b6      	bne.n	8008202 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	891b      	ldrh	r3, [r3, #8]
 8008298:	461a      	mov	r2, r3
 800829a:	4b1f      	ldr	r3, [pc, #124]	@ (8008318 <low_level_output+0x150>)
 800829c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800829e:	4a1e      	ldr	r2, [pc, #120]	@ (8008318 <low_level_output+0x150>)
 80082a0:	f107 030c 	add.w	r3, r7, #12
 80082a4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80082a6:	4a1c      	ldr	r2, [pc, #112]	@ (8008318 <low_level_output+0x150>)
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 80082ac:	6838      	ldr	r0, [r7, #0]
 80082ae:	f00a fa1d 	bl	80126ec <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 80082b2:	4919      	ldr	r1, [pc, #100]	@ (8008318 <low_level_output+0x150>)
 80082b4:	4819      	ldr	r0, [pc, #100]	@ (800831c <low_level_output+0x154>)
 80082b6:	f7f9 fab1 	bl	800181c <HAL_ETH_Transmit_IT>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d103      	bne.n	80082c8 <low_level_output+0x100>
    {
      errval = ERR_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80082c6:	e01b      	b.n	8008300 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 80082c8:	4814      	ldr	r0, [pc, #80]	@ (800831c <low_level_output+0x154>)
 80082ca:	f7f9 ff59 	bl	8002180 <HAL_ETH_GetError>
 80082ce:	4603      	mov	r3, r0
 80082d0:	f003 0302 	and.w	r3, r3, #2
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00d      	beq.n	80082f4 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreWait(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 80082d8:	4b11      	ldr	r3, [pc, #68]	@ (8008320 <low_level_output+0x158>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80082e0:	4618      	mov	r0, r3
 80082e2:	f002 fc9b 	bl	800ac1c <osSemaphoreWait>
        HAL_ETH_ReleaseTxPacket(&heth);
 80082e6:	480d      	ldr	r0, [pc, #52]	@ (800831c <low_level_output+0x154>)
 80082e8:	f7f9 fc38 	bl	8001b5c <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 80082ec:	23fe      	movs	r3, #254	@ 0xfe
 80082ee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80082f2:	e005      	b.n	8008300 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 80082f4:	6838      	ldr	r0, [r7, #0]
 80082f6:	f00a f953 	bl	80125a0 <pbuf_free>
        errval =  ERR_IF;
 80082fa:	23f4      	movs	r3, #244	@ 0xf4
 80082fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8008300:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008304:	f113 0f02 	cmn.w	r3, #2
 8008308:	d0d3      	beq.n	80082b2 <low_level_output+0xea>

  return errval;
 800830a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800830e:	4618      	mov	r0, r3
 8008310:	3748      	adds	r7, #72	@ 0x48
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	200009a4 	.word	0x200009a4
 800831c:	200008f4 	.word	0x200008f4
 8008320:	200008f0 	.word	0x200008f0

08008324 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800832c:	2300      	movs	r3, #0
 800832e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8008330:	4b07      	ldr	r3, [pc, #28]	@ (8008350 <low_level_input+0x2c>)
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d105      	bne.n	8008344 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8008338:	f107 030c 	add.w	r3, r7, #12
 800833c:	4619      	mov	r1, r3
 800833e:	4805      	ldr	r0, [pc, #20]	@ (8008354 <low_level_input+0x30>)
 8008340:	f7f9 fac8 	bl	80018d4 <HAL_ETH_ReadData>
  }

  return p;
 8008344:	68fb      	ldr	r3, [r7, #12]
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	200008e8 	.word	0x200008e8
 8008354:	200008f4 	.word	0x200008f4

08008358 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008360:	2300      	movs	r3, #0
 8008362:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008368:	4b0f      	ldr	r3, [pc, #60]	@ (80083a8 <ethernetif_input+0x50>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008370:	4618      	mov	r0, r3
 8008372:	f002 fc53 	bl	800ac1c <osSemaphoreWait>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1f5      	bne.n	8008368 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800837c:	68b8      	ldr	r0, [r7, #8]
 800837e:	f7ff ffd1 	bl	8008324 <low_level_input>
 8008382:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	68b9      	ldr	r1, [r7, #8]
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	4798      	blx	r3
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d002      	beq.n	80083a0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f00a f900 	bl	80125a0 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1ea      	bne.n	800837c <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80083a6:	e7df      	b.n	8008368 <ethernetif_input+0x10>
 80083a8:	200008ec 	.word	0x200008ec

080083ac <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d106      	bne.n	80083c8 <ethernetif_init+0x1c>
 80083ba:	4b0e      	ldr	r3, [pc, #56]	@ (80083f4 <ethernetif_init+0x48>)
 80083bc:	f240 2217 	movw	r2, #535	@ 0x217
 80083c0:	490d      	ldr	r1, [pc, #52]	@ (80083f8 <ethernetif_init+0x4c>)
 80083c2:	480e      	ldr	r0, [pc, #56]	@ (80083fc <ethernetif_init+0x50>)
 80083c4:	f016 fb0c 	bl	801e9e0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2273      	movs	r2, #115	@ 0x73
 80083cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  netif->name[1] = IFNAME1;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2274      	movs	r2, #116	@ 0x74
 80083d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a09      	ldr	r2, [pc, #36]	@ (8008400 <ethernetif_init+0x54>)
 80083dc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a08      	ldr	r2, [pc, #32]	@ (8008404 <ethernetif_init+0x58>)
 80083e2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f7ff fd83 	bl	8007ef0 <low_level_init>

  return ERR_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	0801fd60 	.word	0x0801fd60
 80083f8:	0801fd7c 	.word	0x0801fd7c
 80083fc:	0801fd8c 	.word	0x0801fd8c
 8008400:	0801b425 	.word	0x0801b425
 8008404:	080081c9 	.word	0x080081c9

08008408 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008414:	68f9      	ldr	r1, [r7, #12]
 8008416:	4809      	ldr	r0, [pc, #36]	@ (800843c <pbuf_free_custom+0x34>)
 8008418:	f009 f9b2 	bl	8011780 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800841c:	4b08      	ldr	r3, [pc, #32]	@ (8008440 <pbuf_free_custom+0x38>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d107      	bne.n	8008434 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008424:	4b06      	ldr	r3, [pc, #24]	@ (8008440 <pbuf_free_custom+0x38>)
 8008426:	2200      	movs	r2, #0
 8008428:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800842a:	4b06      	ldr	r3, [pc, #24]	@ (8008444 <pbuf_free_custom+0x3c>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4618      	mov	r0, r3
 8008430:	f002 fc42 	bl	800acb8 <osSemaphoreRelease>
  }
}
 8008434:	bf00      	nop
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	080235d0 	.word	0x080235d0
 8008440:	200008e8 	.word	0x200008e8
 8008444:	200008ec 	.word	0x200008ec

08008448 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800844c:	f7f8 ff3e 	bl	80012cc <HAL_GetTick>
 8008450:	4603      	mov	r3, r0
}
 8008452:	4618      	mov	r0, r3
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b08e      	sub	sp, #56	@ 0x38
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008460:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008464:	2200      	movs	r2, #0
 8008466:	601a      	str	r2, [r3, #0]
 8008468:	605a      	str	r2, [r3, #4]
 800846a:	609a      	str	r2, [r3, #8]
 800846c:	60da      	str	r2, [r3, #12]
 800846e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a52      	ldr	r2, [pc, #328]	@ (80085c0 <HAL_ETH_MspInit+0x168>)
 8008476:	4293      	cmp	r3, r2
 8008478:	f040 809e 	bne.w	80085b8 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800847c:	4b51      	ldr	r3, [pc, #324]	@ (80085c4 <HAL_ETH_MspInit+0x16c>)
 800847e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008480:	4a50      	ldr	r2, [pc, #320]	@ (80085c4 <HAL_ETH_MspInit+0x16c>)
 8008482:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008486:	6313      	str	r3, [r2, #48]	@ 0x30
 8008488:	4b4e      	ldr	r3, [pc, #312]	@ (80085c4 <HAL_ETH_MspInit+0x16c>)
 800848a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800848c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008490:	623b      	str	r3, [r7, #32]
 8008492:	6a3b      	ldr	r3, [r7, #32]
 8008494:	4b4b      	ldr	r3, [pc, #300]	@ (80085c4 <HAL_ETH_MspInit+0x16c>)
 8008496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008498:	4a4a      	ldr	r2, [pc, #296]	@ (80085c4 <HAL_ETH_MspInit+0x16c>)
 800849a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800849e:	6313      	str	r3, [r2, #48]	@ 0x30
 80084a0:	4b48      	ldr	r3, [pc, #288]	@ (80085c4 <HAL_ETH_MspInit+0x16c>)
 80084a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80084a8:	61fb      	str	r3, [r7, #28]
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	4b45      	ldr	r3, [pc, #276]	@ (80085c4 <HAL_ETH_MspInit+0x16c>)
 80084ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084b0:	4a44      	ldr	r2, [pc, #272]	@ (80085c4 <HAL_ETH_MspInit+0x16c>)
 80084b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80084b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80084b8:	4b42      	ldr	r3, [pc, #264]	@ (80085c4 <HAL_ETH_MspInit+0x16c>)
 80084ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084c0:	61bb      	str	r3, [r7, #24]
 80084c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80084c4:	4b3f      	ldr	r3, [pc, #252]	@ (80085c4 <HAL_ETH_MspInit+0x16c>)
 80084c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084c8:	4a3e      	ldr	r2, [pc, #248]	@ (80085c4 <HAL_ETH_MspInit+0x16c>)
 80084ca:	f043 0304 	orr.w	r3, r3, #4
 80084ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80084d0:	4b3c      	ldr	r3, [pc, #240]	@ (80085c4 <HAL_ETH_MspInit+0x16c>)
 80084d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084d4:	f003 0304 	and.w	r3, r3, #4
 80084d8:	617b      	str	r3, [r7, #20]
 80084da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084dc:	4b39      	ldr	r3, [pc, #228]	@ (80085c4 <HAL_ETH_MspInit+0x16c>)
 80084de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084e0:	4a38      	ldr	r2, [pc, #224]	@ (80085c4 <HAL_ETH_MspInit+0x16c>)
 80084e2:	f043 0301 	orr.w	r3, r3, #1
 80084e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80084e8:	4b36      	ldr	r3, [pc, #216]	@ (80085c4 <HAL_ETH_MspInit+0x16c>)
 80084ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084ec:	f003 0301 	and.w	r3, r3, #1
 80084f0:	613b      	str	r3, [r7, #16]
 80084f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084f4:	4b33      	ldr	r3, [pc, #204]	@ (80085c4 <HAL_ETH_MspInit+0x16c>)
 80084f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084f8:	4a32      	ldr	r2, [pc, #200]	@ (80085c4 <HAL_ETH_MspInit+0x16c>)
 80084fa:	f043 0302 	orr.w	r3, r3, #2
 80084fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8008500:	4b30      	ldr	r3, [pc, #192]	@ (80085c4 <HAL_ETH_MspInit+0x16c>)
 8008502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008504:	f003 0302 	and.w	r3, r3, #2
 8008508:	60fb      	str	r3, [r7, #12]
 800850a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800850c:	4b2d      	ldr	r3, [pc, #180]	@ (80085c4 <HAL_ETH_MspInit+0x16c>)
 800850e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008510:	4a2c      	ldr	r2, [pc, #176]	@ (80085c4 <HAL_ETH_MspInit+0x16c>)
 8008512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008516:	6313      	str	r3, [r2, #48]	@ 0x30
 8008518:	4b2a      	ldr	r3, [pc, #168]	@ (80085c4 <HAL_ETH_MspInit+0x16c>)
 800851a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800851c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008520:	60bb      	str	r3, [r7, #8]
 8008522:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008524:	2332      	movs	r3, #50	@ 0x32
 8008526:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008528:	2302      	movs	r3, #2
 800852a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800852c:	2300      	movs	r3, #0
 800852e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008530:	2303      	movs	r3, #3
 8008532:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008534:	230b      	movs	r3, #11
 8008536:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008538:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800853c:	4619      	mov	r1, r3
 800853e:	4822      	ldr	r0, [pc, #136]	@ (80085c8 <HAL_ETH_MspInit+0x170>)
 8008540:	f7fa fa58 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008544:	2386      	movs	r3, #134	@ 0x86
 8008546:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008548:	2302      	movs	r3, #2
 800854a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800854c:	2300      	movs	r3, #0
 800854e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008550:	2303      	movs	r3, #3
 8008552:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008554:	230b      	movs	r3, #11
 8008556:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008558:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800855c:	4619      	mov	r1, r3
 800855e:	481b      	ldr	r0, [pc, #108]	@ (80085cc <HAL_ETH_MspInit+0x174>)
 8008560:	f7fa fa48 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8008564:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008568:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800856a:	2302      	movs	r3, #2
 800856c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800856e:	2300      	movs	r3, #0
 8008570:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008572:	2303      	movs	r3, #3
 8008574:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008576:	230b      	movs	r3, #11
 8008578:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800857a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800857e:	4619      	mov	r1, r3
 8008580:	4813      	ldr	r0, [pc, #76]	@ (80085d0 <HAL_ETH_MspInit+0x178>)
 8008582:	f7fa fa37 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8008586:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800858a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800858c:	2302      	movs	r3, #2
 800858e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008590:	2300      	movs	r3, #0
 8008592:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008594:	2303      	movs	r3, #3
 8008596:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008598:	230b      	movs	r3, #11
 800859a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800859c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085a0:	4619      	mov	r1, r3
 80085a2:	480c      	ldr	r0, [pc, #48]	@ (80085d4 <HAL_ETH_MspInit+0x17c>)
 80085a4:	f7fa fa26 	bl	80029f4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80085a8:	2200      	movs	r2, #0
 80085aa:	2105      	movs	r1, #5
 80085ac:	203d      	movs	r0, #61	@ 0x3d
 80085ae:	f7f8 ff81 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80085b2:	203d      	movs	r0, #61	@ 0x3d
 80085b4:	f7f8 ff9a 	bl	80014ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80085b8:	bf00      	nop
 80085ba:	3738      	adds	r7, #56	@ 0x38
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	40028000 	.word	0x40028000
 80085c4:	40023800 	.word	0x40023800
 80085c8:	40020800 	.word	0x40020800
 80085cc:	40020000 	.word	0x40020000
 80085d0:	40020400 	.word	0x40020400
 80085d4:	40021800 	.word	0x40021800

080085d8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80085dc:	4802      	ldr	r0, [pc, #8]	@ (80085e8 <ETH_PHY_IO_Init+0x10>)
 80085de:	f7f9 fd8d 	bl	80020fc <HAL_ETH_SetMDIOClockRange>

  return 0;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	200008f4 	.word	0x200008f4

080085ec <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80085ec:	b480      	push	{r7}
 80085ee:	af00      	add	r7, sp, #0
  return 0;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	68ba      	ldr	r2, [r7, #8]
 800860c:	68f9      	ldr	r1, [r7, #12]
 800860e:	4807      	ldr	r0, [pc, #28]	@ (800862c <ETH_PHY_IO_ReadReg+0x30>)
 8008610:	f7f9 fbce 	bl	8001db0 <HAL_ETH_ReadPHYRegister>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800861a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800861e:	e000      	b.n	8008622 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	200008f4 	.word	0x200008f4

08008630 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	68f9      	ldr	r1, [r7, #12]
 8008642:	4807      	ldr	r0, [pc, #28]	@ (8008660 <ETH_PHY_IO_WriteReg+0x30>)
 8008644:	f7f9 fbff 	bl	8001e46 <HAL_ETH_WritePHYRegister>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d002      	beq.n	8008654 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800864e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008652:	e000      	b.n	8008656 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	200008f4 	.word	0x200008f4

08008664 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008668:	f7f8 fe30 	bl	80012cc <HAL_GetTick>
 800866c:	4603      	mov	r3, r0
}
 800866e:	4618      	mov	r0, r3
 8008670:	bd80      	pop	{r7, pc}
	...

08008674 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b0a0      	sub	sp, #128	@ 0x80
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800867c:	f107 0308 	add.w	r3, r7, #8
 8008680:	2264      	movs	r2, #100	@ 0x64
 8008682:	2100      	movs	r1, #0
 8008684:	4618      	mov	r0, r3
 8008686:	f016 fb7b 	bl	801ed80 <memset>
  int32_t PHYLinkState = 0;
 800868a:	2300      	movs	r3, #0
 800868c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800868e:	2300      	movs	r3, #0
 8008690:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008692:	2300      	movs	r3, #0
 8008694:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008696:	2300      	movs	r3, #0
 8008698:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800869e:	483a      	ldr	r0, [pc, #232]	@ (8008788 <ethernet_link_thread+0x114>)
 80086a0:	f7f8 fd6c 	bl	800117c <LAN8742_GetLinkState>
 80086a4:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80086a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086ac:	089b      	lsrs	r3, r3, #2
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00c      	beq.n	80086d2 <ethernet_link_thread+0x5e>
 80086b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	dc09      	bgt.n	80086d2 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80086be:	4833      	ldr	r0, [pc, #204]	@ (800878c <ethernet_link_thread+0x118>)
 80086c0:	f7f9 f82c 	bl	800171c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80086c4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80086c6:	f009 fafd 	bl	8011cc4 <netif_set_down>
    netif_set_link_down(netif);
 80086ca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80086cc:	f009 fb64 	bl	8011d98 <netif_set_link_down>
 80086d0:	e055      	b.n	800877e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80086d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80086d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086d8:	f003 0304 	and.w	r3, r3, #4
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d14e      	bne.n	800877e <ethernet_link_thread+0x10a>
 80086e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	dd4b      	ble.n	800877e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80086e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80086e8:	3b02      	subs	r3, #2
 80086ea:	2b03      	cmp	r3, #3
 80086ec:	d82a      	bhi.n	8008744 <ethernet_link_thread+0xd0>
 80086ee:	a201      	add	r2, pc, #4	@ (adr r2, 80086f4 <ethernet_link_thread+0x80>)
 80086f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f4:	08008705 	.word	0x08008705
 80086f8:	08008717 	.word	0x08008717
 80086fc:	08008727 	.word	0x08008727
 8008700:	08008737 	.word	0x08008737
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008704:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008708:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800870a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800870e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008710:	2301      	movs	r3, #1
 8008712:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008714:	e017      	b.n	8008746 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008716:	2300      	movs	r3, #0
 8008718:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800871a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800871e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008720:	2301      	movs	r3, #1
 8008722:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008724:	e00f      	b.n	8008746 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8008726:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800872a:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800872c:	2300      	movs	r3, #0
 800872e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008730:	2301      	movs	r3, #1
 8008732:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008734:	e007      	b.n	8008746 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8008736:	2300      	movs	r3, #0
 8008738:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800873a:	2300      	movs	r3, #0
 800873c:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800873e:	2301      	movs	r3, #1
 8008740:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8008742:	e000      	b.n	8008746 <ethernet_link_thread+0xd2>
    default:
      break;
 8008744:	bf00      	nop
    }

    if(linkchanged)
 8008746:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008748:	2b00      	cmp	r3, #0
 800874a:	d018      	beq.n	800877e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800874c:	f107 0308 	add.w	r3, r7, #8
 8008750:	4619      	mov	r1, r3
 8008752:	480e      	ldr	r0, [pc, #56]	@ (800878c <ethernet_link_thread+0x118>)
 8008754:	f7f9 fbc0 	bl	8001ed8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008758:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800875a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800875c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800875e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008760:	f107 0308 	add.w	r3, r7, #8
 8008764:	4619      	mov	r1, r3
 8008766:	4809      	ldr	r0, [pc, #36]	@ (800878c <ethernet_link_thread+0x118>)
 8008768:	f7f9 fcad 	bl	80020c6 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800876c:	4807      	ldr	r0, [pc, #28]	@ (800878c <ethernet_link_thread+0x118>)
 800876e:	f7f8 ff65 	bl	800163c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8008772:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008774:	f009 fa30 	bl	8011bd8 <netif_set_up>
      netif_set_link_up(netif);
 8008778:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800877a:	f009 fad5 	bl	8011d28 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800877e:	2064      	movs	r0, #100	@ 0x64
 8008780:	f002 f96a 	bl	800aa58 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008784:	e78b      	b.n	800869e <ethernet_link_thread+0x2a>
 8008786:	bf00      	nop
 8008788:	200009dc 	.word	0x200009dc
 800878c:	200008f4 	.word	0x200008f4

08008790 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b086      	sub	sp, #24
 8008794:	af02      	add	r7, sp, #8
 8008796:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008798:	4812      	ldr	r0, [pc, #72]	@ (80087e4 <HAL_ETH_RxAllocateCallback+0x54>)
 800879a:	f008 ff83 	bl	80116a4 <memp_malloc_pool>
 800879e:	60f8      	str	r0, [r7, #12]
  if (p)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d014      	beq.n	80087d0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f103 0220 	add.w	r2, r3, #32
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4a0d      	ldr	r2, [pc, #52]	@ (80087e8 <HAL_ETH_RxAllocateCallback+0x58>)
 80087b4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80087be:	9201      	str	r2, [sp, #4]
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2241      	movs	r2, #65	@ 0x41
 80087c6:	2100      	movs	r1, #0
 80087c8:	2000      	movs	r0, #0
 80087ca:	f009 fd2f 	bl	801222c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80087ce:	e005      	b.n	80087dc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80087d0:	4b06      	ldr	r3, [pc, #24]	@ (80087ec <HAL_ETH_RxAllocateCallback+0x5c>)
 80087d2:	2201      	movs	r2, #1
 80087d4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	601a      	str	r2, [r3, #0]
}
 80087dc:	bf00      	nop
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	080235d0 	.word	0x080235d0
 80087e8:	08008409 	.word	0x08008409
 80087ec:	200008e8 	.word	0x200008e8

080087f0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b088      	sub	sp, #32
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
 80087fc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8008806:	2300      	movs	r3, #0
 8008808:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	3b20      	subs	r3, #32
 800880e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	2200      	movs	r2, #0
 8008814:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	2200      	movs	r2, #0
 800881a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	887a      	ldrh	r2, [r7, #2]
 8008820:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d103      	bne.n	8008832 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	69fa      	ldr	r2, [r7, #28]
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	e003      	b.n	800883a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	69fa      	ldr	r2, [r7, #28]
 8008838:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	69fa      	ldr	r2, [r7, #28]
 800883e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	61fb      	str	r3, [r7, #28]
 8008846:	e009      	b.n	800885c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	891a      	ldrh	r2, [r3, #8]
 800884c:	887b      	ldrh	r3, [r7, #2]
 800884e:	4413      	add	r3, r2
 8008850:	b29a      	uxth	r2, r3
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	61fb      	str	r3, [r7, #28]
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1f2      	bne.n	8008848 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8008862:	887b      	ldrh	r3, [r7, #2]
 8008864:	4619      	mov	r1, r3
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7ff fade 	bl	8007e28 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800886c:	bf00      	nop
 800886e:	3720      	adds	r7, #32
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f009 fe8f 	bl	80125a0 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8008882:	bf00      	nop
 8008884:	3708      	adds	r7, #8
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
	...

0800888c <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 8008894:	4b15      	ldr	r3, [pc, #84]	@ (80088ec <RMII_Thread+0x60>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 800889c:	2b00      	cmp	r3, #0
 800889e:	d003      	beq.n	80088a8 <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 80088a0:	2000      	movs	r0, #0
 80088a2:	f002 f8cd 	bl	800aa40 <osThreadTerminate>
 80088a6:	e7f5      	b.n	8008894 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 80088a8:	4b10      	ldr	r3, [pc, #64]	@ (80088ec <RMII_Thread+0x60>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 80088b0:	2b0a      	cmp	r3, #10
 80088b2:	d916      	bls.n	80088e2 <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 80088b4:	4b0e      	ldr	r3, [pc, #56]	@ (80088f0 <RMII_Thread+0x64>)
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	4a0d      	ldr	r2, [pc, #52]	@ (80088f0 <RMII_Thread+0x64>)
 80088ba:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80088be:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 80088c0:	4b0b      	ldr	r3, [pc, #44]	@ (80088f0 <RMII_Thread+0x64>)
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	4a0a      	ldr	r2, [pc, #40]	@ (80088f0 <RMII_Thread+0x64>)
 80088c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80088ca:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 80088cc:	4b07      	ldr	r3, [pc, #28]	@ (80088ec <RMII_Thread+0x60>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80088d4:	4b05      	ldr	r3, [pc, #20]	@ (80088ec <RMII_Thread+0x60>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f042 0201 	orr.w	r2, r2, #1
 80088dc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80088e0:	e7d8      	b.n	8008894 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 80088e2:	20c8      	movs	r0, #200	@ 0xc8
 80088e4:	f002 f8b8 	bl	800aa58 <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 80088e8:	e7d4      	b.n	8008894 <RMII_Thread+0x8>
 80088ea:	bf00      	nop
 80088ec:	200008f4 	.word	0x200008f4
 80088f0:	40013800 	.word	0x40013800

080088f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	460b      	mov	r3, r1
 80088fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008900:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008904:	f015 feae 	bl	801e664 <malloc>
 8008908:	4603      	mov	r3, r0
 800890a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d109      	bne.n	8008926 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	32b0      	adds	r2, #176	@ 0xb0
 800891c:	2100      	movs	r1, #0
 800891e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008922:	2302      	movs	r3, #2
 8008924:	e0d4      	b.n	8008ad0 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008926:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800892a:	2100      	movs	r1, #0
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f016 fa27 	bl	801ed80 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	32b0      	adds	r2, #176	@ 0xb0
 800893c:	68f9      	ldr	r1, [r7, #12]
 800893e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	32b0      	adds	r2, #176	@ 0xb0
 800894c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	7c1b      	ldrb	r3, [r3, #16]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d138      	bne.n	80089d0 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800895e:	4b5e      	ldr	r3, [pc, #376]	@ (8008ad8 <USBD_CDC_Init+0x1e4>)
 8008960:	7819      	ldrb	r1, [r3, #0]
 8008962:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008966:	2202      	movs	r2, #2
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f015 fcd8 	bl	801e31e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800896e:	4b5a      	ldr	r3, [pc, #360]	@ (8008ad8 <USBD_CDC_Init+0x1e4>)
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	f003 020f 	and.w	r2, r3, #15
 8008976:	6879      	ldr	r1, [r7, #4]
 8008978:	4613      	mov	r3, r2
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	4413      	add	r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	440b      	add	r3, r1
 8008982:	3323      	adds	r3, #35	@ 0x23
 8008984:	2201      	movs	r2, #1
 8008986:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008988:	4b54      	ldr	r3, [pc, #336]	@ (8008adc <USBD_CDC_Init+0x1e8>)
 800898a:	7819      	ldrb	r1, [r3, #0]
 800898c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008990:	2202      	movs	r2, #2
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f015 fcc3 	bl	801e31e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008998:	4b50      	ldr	r3, [pc, #320]	@ (8008adc <USBD_CDC_Init+0x1e8>)
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	f003 020f 	and.w	r2, r3, #15
 80089a0:	6879      	ldr	r1, [r7, #4]
 80089a2:	4613      	mov	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	4413      	add	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	440b      	add	r3, r1
 80089ac:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80089b0:	2201      	movs	r2, #1
 80089b2:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80089b4:	4b4a      	ldr	r3, [pc, #296]	@ (8008ae0 <USBD_CDC_Init+0x1ec>)
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	f003 020f 	and.w	r2, r3, #15
 80089bc:	6879      	ldr	r1, [r7, #4]
 80089be:	4613      	mov	r3, r2
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	440b      	add	r3, r1
 80089c8:	331c      	adds	r3, #28
 80089ca:	2210      	movs	r2, #16
 80089cc:	601a      	str	r2, [r3, #0]
 80089ce:	e035      	b.n	8008a3c <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80089d0:	4b41      	ldr	r3, [pc, #260]	@ (8008ad8 <USBD_CDC_Init+0x1e4>)
 80089d2:	7819      	ldrb	r1, [r3, #0]
 80089d4:	2340      	movs	r3, #64	@ 0x40
 80089d6:	2202      	movs	r2, #2
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f015 fca0 	bl	801e31e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80089de:	4b3e      	ldr	r3, [pc, #248]	@ (8008ad8 <USBD_CDC_Init+0x1e4>)
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	f003 020f 	and.w	r2, r3, #15
 80089e6:	6879      	ldr	r1, [r7, #4]
 80089e8:	4613      	mov	r3, r2
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4413      	add	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	440b      	add	r3, r1
 80089f2:	3323      	adds	r3, #35	@ 0x23
 80089f4:	2201      	movs	r2, #1
 80089f6:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80089f8:	4b38      	ldr	r3, [pc, #224]	@ (8008adc <USBD_CDC_Init+0x1e8>)
 80089fa:	7819      	ldrb	r1, [r3, #0]
 80089fc:	2340      	movs	r3, #64	@ 0x40
 80089fe:	2202      	movs	r2, #2
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f015 fc8c 	bl	801e31e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008a06:	4b35      	ldr	r3, [pc, #212]	@ (8008adc <USBD_CDC_Init+0x1e8>)
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	f003 020f 	and.w	r2, r3, #15
 8008a0e:	6879      	ldr	r1, [r7, #4]
 8008a10:	4613      	mov	r3, r2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	440b      	add	r3, r1
 8008a1a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008a1e:	2201      	movs	r2, #1
 8008a20:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008a22:	4b2f      	ldr	r3, [pc, #188]	@ (8008ae0 <USBD_CDC_Init+0x1ec>)
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	f003 020f 	and.w	r2, r3, #15
 8008a2a:	6879      	ldr	r1, [r7, #4]
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4413      	add	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	440b      	add	r3, r1
 8008a36:	331c      	adds	r3, #28
 8008a38:	2210      	movs	r2, #16
 8008a3a:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a3c:	4b28      	ldr	r3, [pc, #160]	@ (8008ae0 <USBD_CDC_Init+0x1ec>)
 8008a3e:	7819      	ldrb	r1, [r3, #0]
 8008a40:	2308      	movs	r3, #8
 8008a42:	2203      	movs	r2, #3
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f015 fc6a 	bl	801e31e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008a4a:	4b25      	ldr	r3, [pc, #148]	@ (8008ae0 <USBD_CDC_Init+0x1ec>)
 8008a4c:	781b      	ldrb	r3, [r3, #0]
 8008a4e:	f003 020f 	and.w	r2, r3, #15
 8008a52:	6879      	ldr	r1, [r7, #4]
 8008a54:	4613      	mov	r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	4413      	add	r3, r2
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	440b      	add	r3, r1
 8008a5e:	3323      	adds	r3, #35	@ 0x23
 8008a60:	2201      	movs	r2, #1
 8008a62:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	33b0      	adds	r3, #176	@ 0xb0
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	4413      	add	r3, r2
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8008a9a:	2302      	movs	r3, #2
 8008a9c:	e018      	b.n	8008ad0 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	7c1b      	ldrb	r3, [r3, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10a      	bne.n	8008abc <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8008adc <USBD_CDC_Init+0x1e8>)
 8008aa8:	7819      	ldrb	r1, [r3, #0]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ab0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f015 fd21 	bl	801e4fc <USBD_LL_PrepareReceive>
 8008aba:	e008      	b.n	8008ace <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008abc:	4b07      	ldr	r3, [pc, #28]	@ (8008adc <USBD_CDC_Init+0x1e8>)
 8008abe:	7819      	ldrb	r1, [r3, #0]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008ac6:	2340      	movs	r3, #64	@ 0x40
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f015 fd17 	bl	801e4fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	200000a7 	.word	0x200000a7
 8008adc:	200000a8 	.word	0x200000a8
 8008ae0:	200000a9 	.word	0x200000a9

08008ae4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	460b      	mov	r3, r1
 8008aee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008af0:	4b3a      	ldr	r3, [pc, #232]	@ (8008bdc <USBD_CDC_DeInit+0xf8>)
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	4619      	mov	r1, r3
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f015 fc37 	bl	801e36a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008afc:	4b37      	ldr	r3, [pc, #220]	@ (8008bdc <USBD_CDC_DeInit+0xf8>)
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	f003 020f 	and.w	r2, r3, #15
 8008b04:	6879      	ldr	r1, [r7, #4]
 8008b06:	4613      	mov	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	440b      	add	r3, r1
 8008b10:	3323      	adds	r3, #35	@ 0x23
 8008b12:	2200      	movs	r2, #0
 8008b14:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008b16:	4b32      	ldr	r3, [pc, #200]	@ (8008be0 <USBD_CDC_DeInit+0xfc>)
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f015 fc24 	bl	801e36a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008b22:	4b2f      	ldr	r3, [pc, #188]	@ (8008be0 <USBD_CDC_DeInit+0xfc>)
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	f003 020f 	and.w	r2, r3, #15
 8008b2a:	6879      	ldr	r1, [r7, #4]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4413      	add	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	440b      	add	r3, r1
 8008b36:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008b3e:	4b29      	ldr	r3, [pc, #164]	@ (8008be4 <USBD_CDC_DeInit+0x100>)
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f015 fc10 	bl	801e36a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008b4a:	4b26      	ldr	r3, [pc, #152]	@ (8008be4 <USBD_CDC_DeInit+0x100>)
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	f003 020f 	and.w	r2, r3, #15
 8008b52:	6879      	ldr	r1, [r7, #4]
 8008b54:	4613      	mov	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	440b      	add	r3, r1
 8008b5e:	3323      	adds	r3, #35	@ 0x23
 8008b60:	2200      	movs	r2, #0
 8008b62:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008b64:	4b1f      	ldr	r3, [pc, #124]	@ (8008be4 <USBD_CDC_DeInit+0x100>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	f003 020f 	and.w	r2, r3, #15
 8008b6c:	6879      	ldr	r1, [r7, #4]
 8008b6e:	4613      	mov	r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4413      	add	r3, r2
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	440b      	add	r3, r1
 8008b78:	331c      	adds	r3, #28
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	32b0      	adds	r2, #176	@ 0xb0
 8008b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d01f      	beq.n	8008bd0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	33b0      	adds	r3, #176	@ 0xb0
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	32b0      	adds	r2, #176	@ 0xb0
 8008bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f015 fd5e 	bl	801e674 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	32b0      	adds	r2, #176	@ 0xb0
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3708      	adds	r7, #8
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	200000a7 	.word	0x200000a7
 8008be0:	200000a8 	.word	0x200000a8
 8008be4:	200000a9 	.word	0x200000a9

08008be8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	32b0      	adds	r2, #176	@ 0xb0
 8008bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c00:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008c02:	2300      	movs	r3, #0
 8008c04:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008c06:	2300      	movs	r3, #0
 8008c08:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d101      	bne.n	8008c18 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e0bf      	b.n	8008d98 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d050      	beq.n	8008cc6 <USBD_CDC_Setup+0xde>
 8008c24:	2b20      	cmp	r3, #32
 8008c26:	f040 80af 	bne.w	8008d88 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	88db      	ldrh	r3, [r3, #6]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d03a      	beq.n	8008ca8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	b25b      	sxtb	r3, r3
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	da1b      	bge.n	8008c74 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	33b0      	adds	r3, #176	@ 0xb0
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	4413      	add	r3, r2
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	683a      	ldr	r2, [r7, #0]
 8008c50:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008c52:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c54:	683a      	ldr	r2, [r7, #0]
 8008c56:	88d2      	ldrh	r2, [r2, #6]
 8008c58:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	88db      	ldrh	r3, [r3, #6]
 8008c5e:	2b07      	cmp	r3, #7
 8008c60:	bf28      	it	cs
 8008c62:	2307      	movcs	r3, #7
 8008c64:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	89fa      	ldrh	r2, [r7, #14]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f001 fdd3 	bl	800a818 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008c72:	e090      	b.n	8008d96 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	785a      	ldrb	r2, [r3, #1]
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	88db      	ldrh	r3, [r3, #6]
 8008c82:	2b3f      	cmp	r3, #63	@ 0x3f
 8008c84:	d803      	bhi.n	8008c8e <USBD_CDC_Setup+0xa6>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	88db      	ldrh	r3, [r3, #6]
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	e000      	b.n	8008c90 <USBD_CDC_Setup+0xa8>
 8008c8e:	2240      	movs	r2, #64	@ 0x40
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008c96:	6939      	ldr	r1, [r7, #16]
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f001 fde8 	bl	800a876 <USBD_CtlPrepareRx>
      break;
 8008ca6:	e076      	b.n	8008d96 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	33b0      	adds	r3, #176	@ 0xb0
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	4413      	add	r3, r2
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	7850      	ldrb	r0, [r2, #1]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	4798      	blx	r3
      break;
 8008cc4:	e067      	b.n	8008d96 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	785b      	ldrb	r3, [r3, #1]
 8008cca:	2b0b      	cmp	r3, #11
 8008ccc:	d851      	bhi.n	8008d72 <USBD_CDC_Setup+0x18a>
 8008cce:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd4 <USBD_CDC_Setup+0xec>)
 8008cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd4:	08008d05 	.word	0x08008d05
 8008cd8:	08008d81 	.word	0x08008d81
 8008cdc:	08008d73 	.word	0x08008d73
 8008ce0:	08008d73 	.word	0x08008d73
 8008ce4:	08008d73 	.word	0x08008d73
 8008ce8:	08008d73 	.word	0x08008d73
 8008cec:	08008d73 	.word	0x08008d73
 8008cf0:	08008d73 	.word	0x08008d73
 8008cf4:	08008d73 	.word	0x08008d73
 8008cf8:	08008d73 	.word	0x08008d73
 8008cfc:	08008d2f 	.word	0x08008d2f
 8008d00:	08008d59 	.word	0x08008d59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	2b03      	cmp	r3, #3
 8008d0e:	d107      	bne.n	8008d20 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008d10:	f107 030a 	add.w	r3, r7, #10
 8008d14:	2202      	movs	r2, #2
 8008d16:	4619      	mov	r1, r3
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f001 fd7d 	bl	800a818 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d1e:	e032      	b.n	8008d86 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f001 fcfb 	bl	800a71e <USBD_CtlError>
            ret = USBD_FAIL;
 8008d28:	2303      	movs	r3, #3
 8008d2a:	75fb      	strb	r3, [r7, #23]
          break;
 8008d2c:	e02b      	b.n	8008d86 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	d107      	bne.n	8008d4a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008d3a:	f107 030d 	add.w	r3, r7, #13
 8008d3e:	2201      	movs	r2, #1
 8008d40:	4619      	mov	r1, r3
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f001 fd68 	bl	800a818 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008d48:	e01d      	b.n	8008d86 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f001 fce6 	bl	800a71e <USBD_CtlError>
            ret = USBD_FAIL;
 8008d52:	2303      	movs	r3, #3
 8008d54:	75fb      	strb	r3, [r7, #23]
          break;
 8008d56:	e016      	b.n	8008d86 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	2b03      	cmp	r3, #3
 8008d62:	d00f      	beq.n	8008d84 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008d64:	6839      	ldr	r1, [r7, #0]
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f001 fcd9 	bl	800a71e <USBD_CtlError>
            ret = USBD_FAIL;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008d70:	e008      	b.n	8008d84 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f001 fcd2 	bl	800a71e <USBD_CtlError>
          ret = USBD_FAIL;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	75fb      	strb	r3, [r7, #23]
          break;
 8008d7e:	e002      	b.n	8008d86 <USBD_CDC_Setup+0x19e>
          break;
 8008d80:	bf00      	nop
 8008d82:	e008      	b.n	8008d96 <USBD_CDC_Setup+0x1ae>
          break;
 8008d84:	bf00      	nop
      }
      break;
 8008d86:	e006      	b.n	8008d96 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f001 fcc7 	bl	800a71e <USBD_CtlError>
      ret = USBD_FAIL;
 8008d90:	2303      	movs	r3, #3
 8008d92:	75fb      	strb	r3, [r7, #23]
      break;
 8008d94:	bf00      	nop
  }

  return (uint8_t)ret;
 8008d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3718      	adds	r7, #24
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	460b      	mov	r3, r1
 8008daa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008db2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	32b0      	adds	r2, #176	@ 0xb0
 8008dbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d101      	bne.n	8008dca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	e065      	b.n	8008e96 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	32b0      	adds	r2, #176	@ 0xb0
 8008dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dd8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008dda:	78fb      	ldrb	r3, [r7, #3]
 8008ddc:	f003 020f 	and.w	r2, r3, #15
 8008de0:	6879      	ldr	r1, [r7, #4]
 8008de2:	4613      	mov	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4413      	add	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	440b      	add	r3, r1
 8008dec:	3314      	adds	r3, #20
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d02f      	beq.n	8008e54 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008df4:	78fb      	ldrb	r3, [r7, #3]
 8008df6:	f003 020f 	and.w	r2, r3, #15
 8008dfa:	6879      	ldr	r1, [r7, #4]
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4413      	add	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	440b      	add	r3, r1
 8008e06:	3314      	adds	r3, #20
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	78fb      	ldrb	r3, [r7, #3]
 8008e0c:	f003 010f 	and.w	r1, r3, #15
 8008e10:	68f8      	ldr	r0, [r7, #12]
 8008e12:	460b      	mov	r3, r1
 8008e14:	00db      	lsls	r3, r3, #3
 8008e16:	440b      	add	r3, r1
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	4403      	add	r3, r0
 8008e1c:	331c      	adds	r3, #28
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	fbb2 f1f3 	udiv	r1, r2, r3
 8008e24:	fb01 f303 	mul.w	r3, r1, r3
 8008e28:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d112      	bne.n	8008e54 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008e2e:	78fb      	ldrb	r3, [r7, #3]
 8008e30:	f003 020f 	and.w	r2, r3, #15
 8008e34:	6879      	ldr	r1, [r7, #4]
 8008e36:	4613      	mov	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4413      	add	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	440b      	add	r3, r1
 8008e40:	3314      	adds	r3, #20
 8008e42:	2200      	movs	r2, #0
 8008e44:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008e46:	78f9      	ldrb	r1, [r7, #3]
 8008e48:	2300      	movs	r3, #0
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f015 fb34 	bl	801e4ba <USBD_LL_Transmit>
 8008e52:	e01f      	b.n	8008e94 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	33b0      	adds	r3, #176	@ 0xb0
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4413      	add	r3, r2
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	691b      	ldr	r3, [r3, #16]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d010      	beq.n	8008e94 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	33b0      	adds	r3, #176	@ 0xb0
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4413      	add	r3, r2
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	691b      	ldr	r3, [r3, #16]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008e90:	78fa      	ldrb	r2, [r7, #3]
 8008e92:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b084      	sub	sp, #16
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	32b0      	adds	r2, #176	@ 0xb0
 8008eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eb8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	32b0      	adds	r2, #176	@ 0xb0
 8008ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d101      	bne.n	8008ed0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e01a      	b.n	8008f06 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008ed0:	78fb      	ldrb	r3, [r7, #3]
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f015 fb32 	bl	801e53e <USBD_LL_GetRxDataSize>
 8008eda:	4602      	mov	r2, r0
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	33b0      	adds	r3, #176	@ 0xb0
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4413      	add	r3, r2
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	68db      	ldr	r3, [r3, #12]
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008f00:	4611      	mov	r1, r2
 8008f02:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b084      	sub	sp, #16
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	32b0      	adds	r2, #176	@ 0xb0
 8008f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e024      	b.n	8008f7a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	33b0      	adds	r3, #176	@ 0xb0
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4413      	add	r3, r2
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d019      	beq.n	8008f78 <USBD_CDC_EP0_RxReady+0x6a>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008f4a:	2bff      	cmp	r3, #255	@ 0xff
 8008f4c:	d014      	beq.n	8008f78 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	33b0      	adds	r3, #176	@ 0xb0
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008f66:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f6e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	22ff      	movs	r2, #255	@ 0xff
 8008f74:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
	...

08008f84 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f8c:	2182      	movs	r1, #130	@ 0x82
 8008f8e:	4818      	ldr	r0, [pc, #96]	@ (8008ff0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f90:	f000 fd62 	bl	8009a58 <USBD_GetEpDesc>
 8008f94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f96:	2101      	movs	r1, #1
 8008f98:	4815      	ldr	r0, [pc, #84]	@ (8008ff0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f9a:	f000 fd5d 	bl	8009a58 <USBD_GetEpDesc>
 8008f9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008fa0:	2181      	movs	r1, #129	@ 0x81
 8008fa2:	4813      	ldr	r0, [pc, #76]	@ (8008ff0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008fa4:	f000 fd58 	bl	8009a58 <USBD_GetEpDesc>
 8008fa8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d002      	beq.n	8008fb6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	2210      	movs	r2, #16
 8008fb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d006      	beq.n	8008fca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008fc4:	711a      	strb	r2, [r3, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d006      	beq.n	8008fde <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008fd8:	711a      	strb	r2, [r3, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2243      	movs	r2, #67	@ 0x43
 8008fe2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008fe4:	4b02      	ldr	r3, [pc, #8]	@ (8008ff0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3718      	adds	r7, #24
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	20000064 	.word	0x20000064

08008ff4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ffc:	2182      	movs	r1, #130	@ 0x82
 8008ffe:	4818      	ldr	r0, [pc, #96]	@ (8009060 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009000:	f000 fd2a 	bl	8009a58 <USBD_GetEpDesc>
 8009004:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009006:	2101      	movs	r1, #1
 8009008:	4815      	ldr	r0, [pc, #84]	@ (8009060 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800900a:	f000 fd25 	bl	8009a58 <USBD_GetEpDesc>
 800900e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009010:	2181      	movs	r1, #129	@ 0x81
 8009012:	4813      	ldr	r0, [pc, #76]	@ (8009060 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009014:	f000 fd20 	bl	8009a58 <USBD_GetEpDesc>
 8009018:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d002      	beq.n	8009026 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	2210      	movs	r2, #16
 8009024:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d006      	beq.n	800903a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	2200      	movs	r2, #0
 8009030:	711a      	strb	r2, [r3, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	f042 0202 	orr.w	r2, r2, #2
 8009038:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d006      	beq.n	800904e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	711a      	strb	r2, [r3, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	f042 0202 	orr.w	r2, r2, #2
 800904c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2243      	movs	r2, #67	@ 0x43
 8009052:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009054:	4b02      	ldr	r3, [pc, #8]	@ (8009060 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009056:	4618      	mov	r0, r3
 8009058:	3718      	adds	r7, #24
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	20000064 	.word	0x20000064

08009064 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800906c:	2182      	movs	r1, #130	@ 0x82
 800906e:	4818      	ldr	r0, [pc, #96]	@ (80090d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009070:	f000 fcf2 	bl	8009a58 <USBD_GetEpDesc>
 8009074:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009076:	2101      	movs	r1, #1
 8009078:	4815      	ldr	r0, [pc, #84]	@ (80090d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800907a:	f000 fced 	bl	8009a58 <USBD_GetEpDesc>
 800907e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009080:	2181      	movs	r1, #129	@ 0x81
 8009082:	4813      	ldr	r0, [pc, #76]	@ (80090d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009084:	f000 fce8 	bl	8009a58 <USBD_GetEpDesc>
 8009088:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d002      	beq.n	8009096 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	2210      	movs	r2, #16
 8009094:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d006      	beq.n	80090aa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	2200      	movs	r2, #0
 80090a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090a4:	711a      	strb	r2, [r3, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d006      	beq.n	80090be <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090b8:	711a      	strb	r2, [r3, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2243      	movs	r2, #67	@ 0x43
 80090c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80090c4:	4b02      	ldr	r3, [pc, #8]	@ (80090d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3718      	adds	r7, #24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	20000064 	.word	0x20000064

080090d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	220a      	movs	r2, #10
 80090e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80090e2:	4b03      	ldr	r3, [pc, #12]	@ (80090f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr
 80090f0:	20000020 	.word	0x20000020

080090f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d101      	bne.n	8009108 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009104:	2303      	movs	r3, #3
 8009106:	e009      	b.n	800911c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	33b0      	adds	r3, #176	@ 0xb0
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4413      	add	r3, r2
 8009116:	683a      	ldr	r2, [r7, #0]
 8009118:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800911a:	2300      	movs	r3, #0
}
 800911c:	4618      	mov	r0, r3
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009128:	b480      	push	{r7}
 800912a:	b087      	sub	sp, #28
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	32b0      	adds	r2, #176	@ 0xb0
 800913e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009142:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d101      	bne.n	800914e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800914a:	2303      	movs	r3, #3
 800914c:	e008      	b.n	8009160 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	68ba      	ldr	r2, [r7, #8]
 8009152:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	371c      	adds	r7, #28
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800916c:	b480      	push	{r7}
 800916e:	b085      	sub	sp, #20
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	32b0      	adds	r2, #176	@ 0xb0
 8009180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009184:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d101      	bne.n	8009190 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800918c:	2303      	movs	r3, #3
 800918e:	e004      	b.n	800919a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3714      	adds	r7, #20
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
	...

080091a8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	32b0      	adds	r2, #176	@ 0xb0
 80091ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091be:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80091c0:	2301      	movs	r3, #1
 80091c2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d101      	bne.n	80091ce <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80091ca:	2303      	movs	r3, #3
 80091cc:	e025      	b.n	800921a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d11f      	bne.n	8009218 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2201      	movs	r2, #1
 80091dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80091e0:	4b10      	ldr	r3, [pc, #64]	@ (8009224 <USBD_CDC_TransmitPacket+0x7c>)
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	f003 020f 	and.w	r2, r3, #15
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	4613      	mov	r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	4413      	add	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	4403      	add	r3, r0
 80091fa:	3314      	adds	r3, #20
 80091fc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80091fe:	4b09      	ldr	r3, [pc, #36]	@ (8009224 <USBD_CDC_TransmitPacket+0x7c>)
 8009200:	7819      	ldrb	r1, [r3, #0]
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f015 f953 	bl	801e4ba <USBD_LL_Transmit>

    ret = USBD_OK;
 8009214:	2300      	movs	r3, #0
 8009216:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009218:	7bfb      	ldrb	r3, [r7, #15]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	200000a7 	.word	0x200000a7

08009228 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	32b0      	adds	r2, #176	@ 0xb0
 800923a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800923e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	32b0      	adds	r2, #176	@ 0xb0
 800924a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009252:	2303      	movs	r3, #3
 8009254:	e018      	b.n	8009288 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	7c1b      	ldrb	r3, [r3, #16]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10a      	bne.n	8009274 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800925e:	4b0c      	ldr	r3, [pc, #48]	@ (8009290 <USBD_CDC_ReceivePacket+0x68>)
 8009260:	7819      	ldrb	r1, [r3, #0]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009268:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f015 f945 	bl	801e4fc <USBD_LL_PrepareReceive>
 8009272:	e008      	b.n	8009286 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009274:	4b06      	ldr	r3, [pc, #24]	@ (8009290 <USBD_CDC_ReceivePacket+0x68>)
 8009276:	7819      	ldrb	r1, [r3, #0]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800927e:	2340      	movs	r3, #64	@ 0x40
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f015 f93b 	bl	801e4fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	200000a8 	.word	0x200000a8

08009294 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b086      	sub	sp, #24
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	4613      	mov	r3, r2
 80092a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d101      	bne.n	80092ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80092a8:	2303      	movs	r3, #3
 80092aa:	e01f      	b.n	80092ec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2200      	movs	r2, #0
 80092c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d003      	beq.n	80092d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	68ba      	ldr	r2, [r7, #8]
 80092ce:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	79fa      	ldrb	r2, [r7, #7]
 80092de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f014 ffb5 	bl	801e250 <USBD_LL_Init>
 80092e6:	4603      	mov	r3, r0
 80092e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80092ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3718      	adds	r7, #24
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80092fe:	2300      	movs	r3, #0
 8009300:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d101      	bne.n	800930c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009308:	2303      	movs	r3, #3
 800930a:	e025      	b.n	8009358 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	683a      	ldr	r2, [r7, #0]
 8009310:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	32ae      	adds	r2, #174	@ 0xae
 800931e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00f      	beq.n	8009348 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	32ae      	adds	r2, #174	@ 0xae
 8009332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009338:	f107 020e 	add.w	r2, r7, #14
 800933c:	4610      	mov	r0, r2
 800933e:	4798      	blx	r3
 8009340:	4602      	mov	r2, r0
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800934e:	1c5a      	adds	r2, r3, #1
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f014 ffbd 	bl	801e2e8 <USBD_LL_Start>
 800936e:	4603      	mov	r3, r0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009380:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009382:	4618      	mov	r0, r3
 8009384:	370c      	adds	r7, #12
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b084      	sub	sp, #16
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	460b      	mov	r3, r1
 8009398:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d009      	beq.n	80093bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	78fa      	ldrb	r2, [r7, #3]
 80093b2:	4611      	mov	r1, r2
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	4798      	blx	r3
 80093b8:	4603      	mov	r3, r0
 80093ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80093bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3710      	adds	r7, #16
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b084      	sub	sp, #16
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
 80093ce:	460b      	mov	r3, r1
 80093d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	78fa      	ldrb	r2, [r7, #3]
 80093e0:	4611      	mov	r1, r2
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	4798      	blx	r3
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80093ec:	2303      	movs	r3, #3
 80093ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b084      	sub	sp, #16
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800940a:	6839      	ldr	r1, [r7, #0]
 800940c:	4618      	mov	r0, r3
 800940e:	f001 f94c 	bl	800a6aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2201      	movs	r2, #1
 8009416:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009420:	461a      	mov	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800942e:	f003 031f 	and.w	r3, r3, #31
 8009432:	2b02      	cmp	r3, #2
 8009434:	d01a      	beq.n	800946c <USBD_LL_SetupStage+0x72>
 8009436:	2b02      	cmp	r3, #2
 8009438:	d822      	bhi.n	8009480 <USBD_LL_SetupStage+0x86>
 800943a:	2b00      	cmp	r3, #0
 800943c:	d002      	beq.n	8009444 <USBD_LL_SetupStage+0x4a>
 800943e:	2b01      	cmp	r3, #1
 8009440:	d00a      	beq.n	8009458 <USBD_LL_SetupStage+0x5e>
 8009442:	e01d      	b.n	8009480 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800944a:	4619      	mov	r1, r3
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fb77 	bl	8009b40 <USBD_StdDevReq>
 8009452:	4603      	mov	r3, r0
 8009454:	73fb      	strb	r3, [r7, #15]
      break;
 8009456:	e020      	b.n	800949a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800945e:	4619      	mov	r1, r3
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fbdf 	bl	8009c24 <USBD_StdItfReq>
 8009466:	4603      	mov	r3, r0
 8009468:	73fb      	strb	r3, [r7, #15]
      break;
 800946a:	e016      	b.n	800949a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009472:	4619      	mov	r1, r3
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fc41 	bl	8009cfc <USBD_StdEPReq>
 800947a:	4603      	mov	r3, r0
 800947c:	73fb      	strb	r3, [r7, #15]
      break;
 800947e:	e00c      	b.n	800949a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009486:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800948a:	b2db      	uxtb	r3, r3
 800948c:	4619      	mov	r1, r3
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f014 ff8a 	bl	801e3a8 <USBD_LL_StallEP>
 8009494:	4603      	mov	r3, r0
 8009496:	73fb      	strb	r3, [r7, #15]
      break;
 8009498:	bf00      	nop
  }

  return ret;
 800949a:	7bfb      	ldrb	r3, [r7, #15]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b086      	sub	sp, #24
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	460b      	mov	r3, r1
 80094ae:	607a      	str	r2, [r7, #4]
 80094b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80094b6:	7afb      	ldrb	r3, [r7, #11]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d177      	bne.n	80095ac <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80094c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80094ca:	2b03      	cmp	r3, #3
 80094cc:	f040 80a1 	bne.w	8009612 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	8992      	ldrh	r2, [r2, #12]
 80094d8:	4293      	cmp	r3, r2
 80094da:	d91c      	bls.n	8009516 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	693a      	ldr	r2, [r7, #16]
 80094e2:	8992      	ldrh	r2, [r2, #12]
 80094e4:	1a9a      	subs	r2, r3, r2
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	8992      	ldrh	r2, [r2, #12]
 80094f2:	441a      	add	r2, r3
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	6919      	ldr	r1, [r3, #16]
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	899b      	ldrh	r3, [r3, #12]
 8009500:	461a      	mov	r2, r3
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	4293      	cmp	r3, r2
 8009508:	bf38      	it	cc
 800950a:	4613      	movcc	r3, r2
 800950c:	461a      	mov	r2, r3
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	f001 f9d2 	bl	800a8b8 <USBD_CtlContinueRx>
 8009514:	e07d      	b.n	8009612 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800951c:	f003 031f 	and.w	r3, r3, #31
 8009520:	2b02      	cmp	r3, #2
 8009522:	d014      	beq.n	800954e <USBD_LL_DataOutStage+0xaa>
 8009524:	2b02      	cmp	r3, #2
 8009526:	d81d      	bhi.n	8009564 <USBD_LL_DataOutStage+0xc0>
 8009528:	2b00      	cmp	r3, #0
 800952a:	d002      	beq.n	8009532 <USBD_LL_DataOutStage+0x8e>
 800952c:	2b01      	cmp	r3, #1
 800952e:	d003      	beq.n	8009538 <USBD_LL_DataOutStage+0x94>
 8009530:	e018      	b.n	8009564 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	75bb      	strb	r3, [r7, #22]
            break;
 8009536:	e018      	b.n	800956a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800953e:	b2db      	uxtb	r3, r3
 8009540:	4619      	mov	r1, r3
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f000 fa6e 	bl	8009a24 <USBD_CoreFindIF>
 8009548:	4603      	mov	r3, r0
 800954a:	75bb      	strb	r3, [r7, #22]
            break;
 800954c:	e00d      	b.n	800956a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009554:	b2db      	uxtb	r3, r3
 8009556:	4619      	mov	r1, r3
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f000 fa70 	bl	8009a3e <USBD_CoreFindEP>
 800955e:	4603      	mov	r3, r0
 8009560:	75bb      	strb	r3, [r7, #22]
            break;
 8009562:	e002      	b.n	800956a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009564:	2300      	movs	r3, #0
 8009566:	75bb      	strb	r3, [r7, #22]
            break;
 8009568:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800956a:	7dbb      	ldrb	r3, [r7, #22]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d119      	bne.n	80095a4 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009576:	b2db      	uxtb	r3, r3
 8009578:	2b03      	cmp	r3, #3
 800957a:	d113      	bne.n	80095a4 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800957c:	7dba      	ldrb	r2, [r7, #22]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	32ae      	adds	r2, #174	@ 0xae
 8009582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009586:	691b      	ldr	r3, [r3, #16]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00b      	beq.n	80095a4 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800958c:	7dba      	ldrb	r2, [r7, #22]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009594:	7dba      	ldrb	r2, [r7, #22]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	32ae      	adds	r2, #174	@ 0xae
 800959a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f001 f998 	bl	800a8da <USBD_CtlSendStatus>
 80095aa:	e032      	b.n	8009612 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80095ac:	7afb      	ldrb	r3, [r7, #11]
 80095ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	4619      	mov	r1, r3
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f000 fa41 	bl	8009a3e <USBD_CoreFindEP>
 80095bc:	4603      	mov	r3, r0
 80095be:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095c0:	7dbb      	ldrb	r3, [r7, #22]
 80095c2:	2bff      	cmp	r3, #255	@ 0xff
 80095c4:	d025      	beq.n	8009612 <USBD_LL_DataOutStage+0x16e>
 80095c6:	7dbb      	ldrb	r3, [r7, #22]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d122      	bne.n	8009612 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2b03      	cmp	r3, #3
 80095d6:	d117      	bne.n	8009608 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80095d8:	7dba      	ldrb	r2, [r7, #22]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	32ae      	adds	r2, #174	@ 0xae
 80095de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00f      	beq.n	8009608 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80095e8:	7dba      	ldrb	r2, [r7, #22]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80095f0:	7dba      	ldrb	r2, [r7, #22]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	32ae      	adds	r2, #174	@ 0xae
 80095f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095fa:	699b      	ldr	r3, [r3, #24]
 80095fc:	7afa      	ldrb	r2, [r7, #11]
 80095fe:	4611      	mov	r1, r2
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	4798      	blx	r3
 8009604:	4603      	mov	r3, r0
 8009606:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009608:	7dfb      	ldrb	r3, [r7, #23]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800960e:	7dfb      	ldrb	r3, [r7, #23]
 8009610:	e000      	b.n	8009614 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3718      	adds	r7, #24
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b086      	sub	sp, #24
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	460b      	mov	r3, r1
 8009626:	607a      	str	r2, [r7, #4]
 8009628:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800962a:	7afb      	ldrb	r3, [r7, #11]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d178      	bne.n	8009722 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	3314      	adds	r3, #20
 8009634:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800963c:	2b02      	cmp	r3, #2
 800963e:	d163      	bne.n	8009708 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	8992      	ldrh	r2, [r2, #12]
 8009648:	4293      	cmp	r3, r2
 800964a:	d91c      	bls.n	8009686 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	693a      	ldr	r2, [r7, #16]
 8009652:	8992      	ldrh	r2, [r2, #12]
 8009654:	1a9a      	subs	r2, r3, r2
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	693a      	ldr	r2, [r7, #16]
 8009660:	8992      	ldrh	r2, [r2, #12]
 8009662:	441a      	add	r2, r3
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	6919      	ldr	r1, [r3, #16]
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	461a      	mov	r2, r3
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f001 f8ee 	bl	800a854 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009678:	2300      	movs	r3, #0
 800967a:	2200      	movs	r2, #0
 800967c:	2100      	movs	r1, #0
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	f014 ff3c 	bl	801e4fc <USBD_LL_PrepareReceive>
 8009684:	e040      	b.n	8009708 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	899b      	ldrh	r3, [r3, #12]
 800968a:	461a      	mov	r2, r3
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	429a      	cmp	r2, r3
 8009692:	d11c      	bne.n	80096ce <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	693a      	ldr	r2, [r7, #16]
 800969a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800969c:	4293      	cmp	r3, r2
 800969e:	d316      	bcc.n	80096ce <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d20f      	bcs.n	80096ce <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80096ae:	2200      	movs	r2, #0
 80096b0:	2100      	movs	r1, #0
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f001 f8ce 	bl	800a854 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096c0:	2300      	movs	r3, #0
 80096c2:	2200      	movs	r2, #0
 80096c4:	2100      	movs	r1, #0
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f014 ff18 	bl	801e4fc <USBD_LL_PrepareReceive>
 80096cc:	e01c      	b.n	8009708 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	d10f      	bne.n	80096fa <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d009      	beq.n	80096fa <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096f4:	68db      	ldr	r3, [r3, #12]
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80096fa:	2180      	movs	r1, #128	@ 0x80
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f014 fe53 	bl	801e3a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f001 f8fc 	bl	800a900 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d03a      	beq.n	8009788 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8009712:	68f8      	ldr	r0, [r7, #12]
 8009714:	f7ff fe30 	bl	8009378 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2200      	movs	r2, #0
 800971c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009720:	e032      	b.n	8009788 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009722:	7afb      	ldrb	r3, [r7, #11]
 8009724:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009728:	b2db      	uxtb	r3, r3
 800972a:	4619      	mov	r1, r3
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 f986 	bl	8009a3e <USBD_CoreFindEP>
 8009732:	4603      	mov	r3, r0
 8009734:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009736:	7dfb      	ldrb	r3, [r7, #23]
 8009738:	2bff      	cmp	r3, #255	@ 0xff
 800973a:	d025      	beq.n	8009788 <USBD_LL_DataInStage+0x16c>
 800973c:	7dfb      	ldrb	r3, [r7, #23]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d122      	bne.n	8009788 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009748:	b2db      	uxtb	r3, r3
 800974a:	2b03      	cmp	r3, #3
 800974c:	d11c      	bne.n	8009788 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800974e:	7dfa      	ldrb	r2, [r7, #23]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	32ae      	adds	r2, #174	@ 0xae
 8009754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d014      	beq.n	8009788 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800975e:	7dfa      	ldrb	r2, [r7, #23]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009766:	7dfa      	ldrb	r2, [r7, #23]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	32ae      	adds	r2, #174	@ 0xae
 800976c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009770:	695b      	ldr	r3, [r3, #20]
 8009772:	7afa      	ldrb	r2, [r7, #11]
 8009774:	4611      	mov	r1, r2
 8009776:	68f8      	ldr	r0, [r7, #12]
 8009778:	4798      	blx	r3
 800977a:	4603      	mov	r3, r0
 800977c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800977e:	7dbb      	ldrb	r3, [r7, #22]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d001      	beq.n	8009788 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8009784:	7dbb      	ldrb	r3, [r7, #22]
 8009786:	e000      	b.n	800978a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3718      	adds	r7, #24
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b084      	sub	sp, #16
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d014      	beq.n	80097f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00e      	beq.n	80097f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	6852      	ldr	r2, [r2, #4]
 80097e6:	b2d2      	uxtb	r2, r2
 80097e8:	4611      	mov	r1, r2
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	4798      	blx	r3
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80097f4:	2303      	movs	r3, #3
 80097f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097f8:	2340      	movs	r3, #64	@ 0x40
 80097fa:	2200      	movs	r2, #0
 80097fc:	2100      	movs	r1, #0
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f014 fd8d 	bl	801e31e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2240      	movs	r2, #64	@ 0x40
 8009810:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009814:	2340      	movs	r3, #64	@ 0x40
 8009816:	2200      	movs	r2, #0
 8009818:	2180      	movs	r1, #128	@ 0x80
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f014 fd7f 	bl	801e31e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2240      	movs	r2, #64	@ 0x40
 800982c:	841a      	strh	r2, [r3, #32]

  return ret;
 800982e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009830:	4618      	mov	r0, r3
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	460b      	mov	r3, r1
 8009842:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	78fa      	ldrb	r2, [r7, #3]
 8009848:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009866:	b2db      	uxtb	r3, r3
 8009868:	2b04      	cmp	r3, #4
 800986a:	d006      	beq.n	800987a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009872:	b2da      	uxtb	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2204      	movs	r2, #4
 800987e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2b04      	cmp	r3, #4
 80098a2:	d106      	bne.n	80098b2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80098aa:	b2da      	uxtb	r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	2b03      	cmp	r3, #3
 80098d2:	d110      	bne.n	80098f6 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00b      	beq.n	80098f6 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098e4:	69db      	ldr	r3, [r3, #28]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d005      	beq.n	80098f6 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098f0:	69db      	ldr	r3, [r3, #28]
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	460b      	mov	r3, r1
 800990a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	32ae      	adds	r2, #174	@ 0xae
 8009916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d101      	bne.n	8009922 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800991e:	2303      	movs	r3, #3
 8009920:	e01c      	b.n	800995c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009928:	b2db      	uxtb	r3, r3
 800992a:	2b03      	cmp	r3, #3
 800992c:	d115      	bne.n	800995a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	32ae      	adds	r2, #174	@ 0xae
 8009938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800993c:	6a1b      	ldr	r3, [r3, #32]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00b      	beq.n	800995a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	32ae      	adds	r2, #174	@ 0xae
 800994c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	78fa      	ldrb	r2, [r7, #3]
 8009954:	4611      	mov	r1, r2
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	460b      	mov	r3, r1
 800996e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	32ae      	adds	r2, #174	@ 0xae
 800997a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d101      	bne.n	8009986 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009982:	2303      	movs	r3, #3
 8009984:	e01c      	b.n	80099c0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800998c:	b2db      	uxtb	r3, r3
 800998e:	2b03      	cmp	r3, #3
 8009990:	d115      	bne.n	80099be <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	32ae      	adds	r2, #174	@ 0xae
 800999c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00b      	beq.n	80099be <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	32ae      	adds	r2, #174	@ 0xae
 80099b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b6:	78fa      	ldrb	r2, [r7, #3]
 80099b8:	4611      	mov	r1, r2
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	370c      	adds	r7, #12
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr

080099de <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b084      	sub	sp, #16
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d00e      	beq.n	8009a1a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	6852      	ldr	r2, [r2, #4]
 8009a08:	b2d2      	uxtb	r2, r2
 8009a0a:	4611      	mov	r1, r2
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	4798      	blx	r3
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009a16:	2303      	movs	r3, #3
 8009a18:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009a30:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	370c      	adds	r7, #12
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr

08009a3e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b083      	sub	sp, #12
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	460b      	mov	r3, r1
 8009a48:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009a4a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b086      	sub	sp, #24
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	460b      	mov	r3, r1
 8009a62:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	885b      	ldrh	r3, [r3, #2]
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	7812      	ldrb	r2, [r2, #0]
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d91f      	bls.n	8009abe <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009a84:	e013      	b.n	8009aae <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009a86:	f107 030a 	add.w	r3, r7, #10
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	6978      	ldr	r0, [r7, #20]
 8009a8e:	f000 f81b 	bl	8009ac8 <USBD_GetNextDesc>
 8009a92:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	785b      	ldrb	r3, [r3, #1]
 8009a98:	2b05      	cmp	r3, #5
 8009a9a:	d108      	bne.n	8009aae <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	789b      	ldrb	r3, [r3, #2]
 8009aa4:	78fa      	ldrb	r2, [r7, #3]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d008      	beq.n	8009abc <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	885b      	ldrh	r3, [r3, #2]
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	897b      	ldrh	r3, [r7, #10]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d8e5      	bhi.n	8009a86 <USBD_GetEpDesc+0x2e>
 8009aba:	e000      	b.n	8009abe <USBD_GetEpDesc+0x66>
          break;
 8009abc:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009abe:	693b      	ldr	r3, [r7, #16]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3718      	adds	r7, #24
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	881b      	ldrh	r3, [r3, #0]
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	7812      	ldrb	r2, [r2, #0]
 8009ade:	4413      	add	r3, r2
 8009ae0:	b29a      	uxth	r2, r3
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	461a      	mov	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4413      	add	r3, r2
 8009af0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009af2:	68fb      	ldr	r3, [r7, #12]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3714      	adds	r7, #20
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b087      	sub	sp, #28
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	3301      	adds	r3, #1
 8009b16:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009b1e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009b22:	021b      	lsls	r3, r3, #8
 8009b24:	b21a      	sxth	r2, r3
 8009b26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	b21b      	sxth	r3, r3
 8009b2e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009b30:	89fb      	ldrh	r3, [r7, #14]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	371c      	adds	r7, #28
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
	...

08009b40 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b56:	2b40      	cmp	r3, #64	@ 0x40
 8009b58:	d005      	beq.n	8009b66 <USBD_StdDevReq+0x26>
 8009b5a:	2b40      	cmp	r3, #64	@ 0x40
 8009b5c:	d857      	bhi.n	8009c0e <USBD_StdDevReq+0xce>
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00f      	beq.n	8009b82 <USBD_StdDevReq+0x42>
 8009b62:	2b20      	cmp	r3, #32
 8009b64:	d153      	bne.n	8009c0e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	32ae      	adds	r2, #174	@ 0xae
 8009b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	6839      	ldr	r1, [r7, #0]
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	4798      	blx	r3
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b80:	e04a      	b.n	8009c18 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	785b      	ldrb	r3, [r3, #1]
 8009b86:	2b09      	cmp	r3, #9
 8009b88:	d83b      	bhi.n	8009c02 <USBD_StdDevReq+0xc2>
 8009b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8009b90 <USBD_StdDevReq+0x50>)
 8009b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b90:	08009be5 	.word	0x08009be5
 8009b94:	08009bf9 	.word	0x08009bf9
 8009b98:	08009c03 	.word	0x08009c03
 8009b9c:	08009bef 	.word	0x08009bef
 8009ba0:	08009c03 	.word	0x08009c03
 8009ba4:	08009bc3 	.word	0x08009bc3
 8009ba8:	08009bb9 	.word	0x08009bb9
 8009bac:	08009c03 	.word	0x08009c03
 8009bb0:	08009bdb 	.word	0x08009bdb
 8009bb4:	08009bcd 	.word	0x08009bcd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009bb8:	6839      	ldr	r1, [r7, #0]
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 fa3e 	bl	800a03c <USBD_GetDescriptor>
          break;
 8009bc0:	e024      	b.n	8009c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f000 fbcd 	bl	800a364 <USBD_SetAddress>
          break;
 8009bca:	e01f      	b.n	8009c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009bcc:	6839      	ldr	r1, [r7, #0]
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fc0c 	bl	800a3ec <USBD_SetConfig>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73fb      	strb	r3, [r7, #15]
          break;
 8009bd8:	e018      	b.n	8009c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fcaf 	bl	800a540 <USBD_GetConfig>
          break;
 8009be2:	e013      	b.n	8009c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009be4:	6839      	ldr	r1, [r7, #0]
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 fce0 	bl	800a5ac <USBD_GetStatus>
          break;
 8009bec:	e00e      	b.n	8009c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fd0f 	bl	800a614 <USBD_SetFeature>
          break;
 8009bf6:	e009      	b.n	8009c0c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009bf8:	6839      	ldr	r1, [r7, #0]
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fd33 	bl	800a666 <USBD_ClrFeature>
          break;
 8009c00:	e004      	b.n	8009c0c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009c02:	6839      	ldr	r1, [r7, #0]
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f000 fd8a 	bl	800a71e <USBD_CtlError>
          break;
 8009c0a:	bf00      	nop
      }
      break;
 8009c0c:	e004      	b.n	8009c18 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009c0e:	6839      	ldr	r1, [r7, #0]
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f000 fd84 	bl	800a71e <USBD_CtlError>
      break;
 8009c16:	bf00      	nop
  }

  return ret;
 8009c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop

08009c24 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c3a:	2b40      	cmp	r3, #64	@ 0x40
 8009c3c:	d005      	beq.n	8009c4a <USBD_StdItfReq+0x26>
 8009c3e:	2b40      	cmp	r3, #64	@ 0x40
 8009c40:	d852      	bhi.n	8009ce8 <USBD_StdItfReq+0xc4>
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <USBD_StdItfReq+0x26>
 8009c46:	2b20      	cmp	r3, #32
 8009c48:	d14e      	bne.n	8009ce8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	3b01      	subs	r3, #1
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d840      	bhi.n	8009cda <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	889b      	ldrh	r3, [r3, #4]
 8009c5c:	b2db      	uxtb	r3, r3
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d836      	bhi.n	8009cd0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	889b      	ldrh	r3, [r3, #4]
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	4619      	mov	r1, r3
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7ff feda 	bl	8009a24 <USBD_CoreFindIF>
 8009c70:	4603      	mov	r3, r0
 8009c72:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c74:	7bbb      	ldrb	r3, [r7, #14]
 8009c76:	2bff      	cmp	r3, #255	@ 0xff
 8009c78:	d01d      	beq.n	8009cb6 <USBD_StdItfReq+0x92>
 8009c7a:	7bbb      	ldrb	r3, [r7, #14]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d11a      	bne.n	8009cb6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009c80:	7bba      	ldrb	r2, [r7, #14]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	32ae      	adds	r2, #174	@ 0xae
 8009c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00f      	beq.n	8009cb0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009c90:	7bba      	ldrb	r2, [r7, #14]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009c98:	7bba      	ldrb	r2, [r7, #14]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	32ae      	adds	r2, #174	@ 0xae
 8009c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	6839      	ldr	r1, [r7, #0]
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	4798      	blx	r3
 8009caa:	4603      	mov	r3, r0
 8009cac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009cae:	e004      	b.n	8009cba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009cb0:	2303      	movs	r3, #3
 8009cb2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009cb4:	e001      	b.n	8009cba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009cb6:	2303      	movs	r3, #3
 8009cb8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	88db      	ldrh	r3, [r3, #6]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d110      	bne.n	8009ce4 <USBD_StdItfReq+0xc0>
 8009cc2:	7bfb      	ldrb	r3, [r7, #15]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d10d      	bne.n	8009ce4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 fe06 	bl	800a8da <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009cce:	e009      	b.n	8009ce4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009cd0:	6839      	ldr	r1, [r7, #0]
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 fd23 	bl	800a71e <USBD_CtlError>
          break;
 8009cd8:	e004      	b.n	8009ce4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fd1e 	bl	800a71e <USBD_CtlError>
          break;
 8009ce2:	e000      	b.n	8009ce6 <USBD_StdItfReq+0xc2>
          break;
 8009ce4:	bf00      	nop
      }
      break;
 8009ce6:	e004      	b.n	8009cf2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fd17 	bl	800a71e <USBD_CtlError>
      break;
 8009cf0:	bf00      	nop
  }

  return ret;
 8009cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	889b      	ldrh	r3, [r3, #4]
 8009d0e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d18:	2b40      	cmp	r3, #64	@ 0x40
 8009d1a:	d007      	beq.n	8009d2c <USBD_StdEPReq+0x30>
 8009d1c:	2b40      	cmp	r3, #64	@ 0x40
 8009d1e:	f200 8181 	bhi.w	800a024 <USBD_StdEPReq+0x328>
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d02a      	beq.n	8009d7c <USBD_StdEPReq+0x80>
 8009d26:	2b20      	cmp	r3, #32
 8009d28:	f040 817c 	bne.w	800a024 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d2c:	7bbb      	ldrb	r3, [r7, #14]
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f7ff fe84 	bl	8009a3e <USBD_CoreFindEP>
 8009d36:	4603      	mov	r3, r0
 8009d38:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d3a:	7b7b      	ldrb	r3, [r7, #13]
 8009d3c:	2bff      	cmp	r3, #255	@ 0xff
 8009d3e:	f000 8176 	beq.w	800a02e <USBD_StdEPReq+0x332>
 8009d42:	7b7b      	ldrb	r3, [r7, #13]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f040 8172 	bne.w	800a02e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8009d4a:	7b7a      	ldrb	r2, [r7, #13]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009d52:	7b7a      	ldrb	r2, [r7, #13]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	32ae      	adds	r2, #174	@ 0xae
 8009d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f000 8165 	beq.w	800a02e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009d64:	7b7a      	ldrb	r2, [r7, #13]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	32ae      	adds	r2, #174	@ 0xae
 8009d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	6839      	ldr	r1, [r7, #0]
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	4798      	blx	r3
 8009d76:	4603      	mov	r3, r0
 8009d78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009d7a:	e158      	b.n	800a02e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	785b      	ldrb	r3, [r3, #1]
 8009d80:	2b03      	cmp	r3, #3
 8009d82:	d008      	beq.n	8009d96 <USBD_StdEPReq+0x9a>
 8009d84:	2b03      	cmp	r3, #3
 8009d86:	f300 8147 	bgt.w	800a018 <USBD_StdEPReq+0x31c>
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f000 809b 	beq.w	8009ec6 <USBD_StdEPReq+0x1ca>
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d03c      	beq.n	8009e0e <USBD_StdEPReq+0x112>
 8009d94:	e140      	b.n	800a018 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	d002      	beq.n	8009da8 <USBD_StdEPReq+0xac>
 8009da2:	2b03      	cmp	r3, #3
 8009da4:	d016      	beq.n	8009dd4 <USBD_StdEPReq+0xd8>
 8009da6:	e02c      	b.n	8009e02 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009da8:	7bbb      	ldrb	r3, [r7, #14]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00d      	beq.n	8009dca <USBD_StdEPReq+0xce>
 8009dae:	7bbb      	ldrb	r3, [r7, #14]
 8009db0:	2b80      	cmp	r3, #128	@ 0x80
 8009db2:	d00a      	beq.n	8009dca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009db4:	7bbb      	ldrb	r3, [r7, #14]
 8009db6:	4619      	mov	r1, r3
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f014 faf5 	bl	801e3a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dbe:	2180      	movs	r1, #128	@ 0x80
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f014 faf1 	bl	801e3a8 <USBD_LL_StallEP>
 8009dc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009dc8:	e020      	b.n	8009e0c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fca6 	bl	800a71e <USBD_CtlError>
              break;
 8009dd2:	e01b      	b.n	8009e0c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	885b      	ldrh	r3, [r3, #2]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d10e      	bne.n	8009dfa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ddc:	7bbb      	ldrb	r3, [r7, #14]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00b      	beq.n	8009dfa <USBD_StdEPReq+0xfe>
 8009de2:	7bbb      	ldrb	r3, [r7, #14]
 8009de4:	2b80      	cmp	r3, #128	@ 0x80
 8009de6:	d008      	beq.n	8009dfa <USBD_StdEPReq+0xfe>
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	88db      	ldrh	r3, [r3, #6]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d104      	bne.n	8009dfa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009df0:	7bbb      	ldrb	r3, [r7, #14]
 8009df2:	4619      	mov	r1, r3
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f014 fad7 	bl	801e3a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 fd6d 	bl	800a8da <USBD_CtlSendStatus>

              break;
 8009e00:	e004      	b.n	8009e0c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009e02:	6839      	ldr	r1, [r7, #0]
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fc8a 	bl	800a71e <USBD_CtlError>
              break;
 8009e0a:	bf00      	nop
          }
          break;
 8009e0c:	e109      	b.n	800a022 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d002      	beq.n	8009e20 <USBD_StdEPReq+0x124>
 8009e1a:	2b03      	cmp	r3, #3
 8009e1c:	d016      	beq.n	8009e4c <USBD_StdEPReq+0x150>
 8009e1e:	e04b      	b.n	8009eb8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e20:	7bbb      	ldrb	r3, [r7, #14]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00d      	beq.n	8009e42 <USBD_StdEPReq+0x146>
 8009e26:	7bbb      	ldrb	r3, [r7, #14]
 8009e28:	2b80      	cmp	r3, #128	@ 0x80
 8009e2a:	d00a      	beq.n	8009e42 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009e2c:	7bbb      	ldrb	r3, [r7, #14]
 8009e2e:	4619      	mov	r1, r3
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f014 fab9 	bl	801e3a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e36:	2180      	movs	r1, #128	@ 0x80
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f014 fab5 	bl	801e3a8 <USBD_LL_StallEP>
 8009e3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e40:	e040      	b.n	8009ec4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009e42:	6839      	ldr	r1, [r7, #0]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 fc6a 	bl	800a71e <USBD_CtlError>
              break;
 8009e4a:	e03b      	b.n	8009ec4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	885b      	ldrh	r3, [r3, #2]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d136      	bne.n	8009ec2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e54:	7bbb      	ldrb	r3, [r7, #14]
 8009e56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d004      	beq.n	8009e68 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e5e:	7bbb      	ldrb	r3, [r7, #14]
 8009e60:	4619      	mov	r1, r3
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f014 fabf 	bl	801e3e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 fd36 	bl	800a8da <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009e6e:	7bbb      	ldrb	r3, [r7, #14]
 8009e70:	4619      	mov	r1, r3
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f7ff fde3 	bl	8009a3e <USBD_CoreFindEP>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e7c:	7b7b      	ldrb	r3, [r7, #13]
 8009e7e:	2bff      	cmp	r3, #255	@ 0xff
 8009e80:	d01f      	beq.n	8009ec2 <USBD_StdEPReq+0x1c6>
 8009e82:	7b7b      	ldrb	r3, [r7, #13]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d11c      	bne.n	8009ec2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009e88:	7b7a      	ldrb	r2, [r7, #13]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009e90:	7b7a      	ldrb	r2, [r7, #13]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	32ae      	adds	r2, #174	@ 0xae
 8009e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d010      	beq.n	8009ec2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009ea0:	7b7a      	ldrb	r2, [r7, #13]
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	32ae      	adds	r2, #174	@ 0xae
 8009ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	4798      	blx	r3
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009eb6:	e004      	b.n	8009ec2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009eb8:	6839      	ldr	r1, [r7, #0]
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fc2f 	bl	800a71e <USBD_CtlError>
              break;
 8009ec0:	e000      	b.n	8009ec4 <USBD_StdEPReq+0x1c8>
              break;
 8009ec2:	bf00      	nop
          }
          break;
 8009ec4:	e0ad      	b.n	800a022 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d002      	beq.n	8009ed8 <USBD_StdEPReq+0x1dc>
 8009ed2:	2b03      	cmp	r3, #3
 8009ed4:	d033      	beq.n	8009f3e <USBD_StdEPReq+0x242>
 8009ed6:	e099      	b.n	800a00c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ed8:	7bbb      	ldrb	r3, [r7, #14]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d007      	beq.n	8009eee <USBD_StdEPReq+0x1f2>
 8009ede:	7bbb      	ldrb	r3, [r7, #14]
 8009ee0:	2b80      	cmp	r3, #128	@ 0x80
 8009ee2:	d004      	beq.n	8009eee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 fc19 	bl	800a71e <USBD_CtlError>
                break;
 8009eec:	e093      	b.n	800a016 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009eee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	da0b      	bge.n	8009f0e <USBD_StdEPReq+0x212>
 8009ef6:	7bbb      	ldrb	r3, [r7, #14]
 8009ef8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009efc:	4613      	mov	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	4413      	add	r3, r2
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	3310      	adds	r3, #16
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	4413      	add	r3, r2
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	e00b      	b.n	8009f26 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f0e:	7bbb      	ldrb	r3, [r7, #14]
 8009f10:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f14:	4613      	mov	r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	4413      	add	r3, r2
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	4413      	add	r3, r2
 8009f24:	3304      	adds	r3, #4
 8009f26:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	330e      	adds	r3, #14
 8009f32:	2202      	movs	r2, #2
 8009f34:	4619      	mov	r1, r3
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 fc6e 	bl	800a818 <USBD_CtlSendData>
              break;
 8009f3c:	e06b      	b.n	800a016 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009f3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	da11      	bge.n	8009f6a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f46:	7bbb      	ldrb	r3, [r7, #14]
 8009f48:	f003 020f 	and.w	r2, r3, #15
 8009f4c:	6879      	ldr	r1, [r7, #4]
 8009f4e:	4613      	mov	r3, r2
 8009f50:	009b      	lsls	r3, r3, #2
 8009f52:	4413      	add	r3, r2
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	440b      	add	r3, r1
 8009f58:	3323      	adds	r3, #35	@ 0x23
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d117      	bne.n	8009f90 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009f60:	6839      	ldr	r1, [r7, #0]
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 fbdb 	bl	800a71e <USBD_CtlError>
                  break;
 8009f68:	e055      	b.n	800a016 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f6a:	7bbb      	ldrb	r3, [r7, #14]
 8009f6c:	f003 020f 	and.w	r2, r3, #15
 8009f70:	6879      	ldr	r1, [r7, #4]
 8009f72:	4613      	mov	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	4413      	add	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	440b      	add	r3, r1
 8009f7c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d104      	bne.n	8009f90 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8009f86:	6839      	ldr	r1, [r7, #0]
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fbc8 	bl	800a71e <USBD_CtlError>
                  break;
 8009f8e:	e042      	b.n	800a016 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	da0b      	bge.n	8009fb0 <USBD_StdEPReq+0x2b4>
 8009f98:	7bbb      	ldrb	r3, [r7, #14]
 8009f9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	4413      	add	r3, r2
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	3310      	adds	r3, #16
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	4413      	add	r3, r2
 8009fac:	3304      	adds	r3, #4
 8009fae:	e00b      	b.n	8009fc8 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009fb0:	7bbb      	ldrb	r3, [r7, #14]
 8009fb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009fca:	7bbb      	ldrb	r3, [r7, #14]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d002      	beq.n	8009fd6 <USBD_StdEPReq+0x2da>
 8009fd0:	7bbb      	ldrb	r3, [r7, #14]
 8009fd2:	2b80      	cmp	r3, #128	@ 0x80
 8009fd4:	d103      	bne.n	8009fde <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	739a      	strb	r2, [r3, #14]
 8009fdc:	e00e      	b.n	8009ffc <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009fde:	7bbb      	ldrb	r3, [r7, #14]
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f014 fa1e 	bl	801e424 <USBD_LL_IsStallEP>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d003      	beq.n	8009ff6 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	739a      	strb	r2, [r3, #14]
 8009ff4:	e002      	b.n	8009ffc <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	330e      	adds	r3, #14
 800a000:	2202      	movs	r2, #2
 800a002:	4619      	mov	r1, r3
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 fc07 	bl	800a818 <USBD_CtlSendData>
              break;
 800a00a:	e004      	b.n	800a016 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800a00c:	6839      	ldr	r1, [r7, #0]
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 fb85 	bl	800a71e <USBD_CtlError>
              break;
 800a014:	bf00      	nop
          }
          break;
 800a016:	e004      	b.n	800a022 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800a018:	6839      	ldr	r1, [r7, #0]
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 fb7f 	bl	800a71e <USBD_CtlError>
          break;
 800a020:	bf00      	nop
      }
      break;
 800a022:	e005      	b.n	800a030 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800a024:	6839      	ldr	r1, [r7, #0]
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 fb79 	bl	800a71e <USBD_CtlError>
      break;
 800a02c:	e000      	b.n	800a030 <USBD_StdEPReq+0x334>
      break;
 800a02e:	bf00      	nop
  }

  return ret;
 800a030:	7bfb      	ldrb	r3, [r7, #15]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
	...

0800a03c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b084      	sub	sp, #16
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a046:	2300      	movs	r3, #0
 800a048:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a04a:	2300      	movs	r3, #0
 800a04c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a04e:	2300      	movs	r3, #0
 800a050:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	885b      	ldrh	r3, [r3, #2]
 800a056:	0a1b      	lsrs	r3, r3, #8
 800a058:	b29b      	uxth	r3, r3
 800a05a:	3b01      	subs	r3, #1
 800a05c:	2b0e      	cmp	r3, #14
 800a05e:	f200 8152 	bhi.w	800a306 <USBD_GetDescriptor+0x2ca>
 800a062:	a201      	add	r2, pc, #4	@ (adr r2, 800a068 <USBD_GetDescriptor+0x2c>)
 800a064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a068:	0800a0d9 	.word	0x0800a0d9
 800a06c:	0800a0f1 	.word	0x0800a0f1
 800a070:	0800a131 	.word	0x0800a131
 800a074:	0800a307 	.word	0x0800a307
 800a078:	0800a307 	.word	0x0800a307
 800a07c:	0800a2a7 	.word	0x0800a2a7
 800a080:	0800a2d3 	.word	0x0800a2d3
 800a084:	0800a307 	.word	0x0800a307
 800a088:	0800a307 	.word	0x0800a307
 800a08c:	0800a307 	.word	0x0800a307
 800a090:	0800a307 	.word	0x0800a307
 800a094:	0800a307 	.word	0x0800a307
 800a098:	0800a307 	.word	0x0800a307
 800a09c:	0800a307 	.word	0x0800a307
 800a0a0:	0800a0a5 	.word	0x0800a0a5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0aa:	69db      	ldr	r3, [r3, #28]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00b      	beq.n	800a0c8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0b6:	69db      	ldr	r3, [r3, #28]
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	7c12      	ldrb	r2, [r2, #16]
 800a0bc:	f107 0108 	add.w	r1, r7, #8
 800a0c0:	4610      	mov	r0, r2
 800a0c2:	4798      	blx	r3
 800a0c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a0c6:	e126      	b.n	800a316 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a0c8:	6839      	ldr	r1, [r7, #0]
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 fb27 	bl	800a71e <USBD_CtlError>
        err++;
 800a0d0:	7afb      	ldrb	r3, [r7, #11]
 800a0d2:	3301      	adds	r3, #1
 800a0d4:	72fb      	strb	r3, [r7, #11]
      break;
 800a0d6:	e11e      	b.n	800a316 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	7c12      	ldrb	r2, [r2, #16]
 800a0e4:	f107 0108 	add.w	r1, r7, #8
 800a0e8:	4610      	mov	r0, r2
 800a0ea:	4798      	blx	r3
 800a0ec:	60f8      	str	r0, [r7, #12]
      break;
 800a0ee:	e112      	b.n	800a316 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	7c1b      	ldrb	r3, [r3, #16]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d10d      	bne.n	800a114 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a100:	f107 0208 	add.w	r2, r7, #8
 800a104:	4610      	mov	r0, r2
 800a106:	4798      	blx	r3
 800a108:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	3301      	adds	r3, #1
 800a10e:	2202      	movs	r2, #2
 800a110:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a112:	e100      	b.n	800a316 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a11a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a11c:	f107 0208 	add.w	r2, r7, #8
 800a120:	4610      	mov	r0, r2
 800a122:	4798      	blx	r3
 800a124:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	3301      	adds	r3, #1
 800a12a:	2202      	movs	r2, #2
 800a12c:	701a      	strb	r2, [r3, #0]
      break;
 800a12e:	e0f2      	b.n	800a316 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	885b      	ldrh	r3, [r3, #2]
 800a134:	b2db      	uxtb	r3, r3
 800a136:	2b05      	cmp	r3, #5
 800a138:	f200 80ac 	bhi.w	800a294 <USBD_GetDescriptor+0x258>
 800a13c:	a201      	add	r2, pc, #4	@ (adr r2, 800a144 <USBD_GetDescriptor+0x108>)
 800a13e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a142:	bf00      	nop
 800a144:	0800a15d 	.word	0x0800a15d
 800a148:	0800a191 	.word	0x0800a191
 800a14c:	0800a1c5 	.word	0x0800a1c5
 800a150:	0800a1f9 	.word	0x0800a1f9
 800a154:	0800a22d 	.word	0x0800a22d
 800a158:	0800a261 	.word	0x0800a261
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d00b      	beq.n	800a180 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	7c12      	ldrb	r2, [r2, #16]
 800a174:	f107 0108 	add.w	r1, r7, #8
 800a178:	4610      	mov	r0, r2
 800a17a:	4798      	blx	r3
 800a17c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a17e:	e091      	b.n	800a2a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a180:	6839      	ldr	r1, [r7, #0]
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 facb 	bl	800a71e <USBD_CtlError>
            err++;
 800a188:	7afb      	ldrb	r3, [r7, #11]
 800a18a:	3301      	adds	r3, #1
 800a18c:	72fb      	strb	r3, [r7, #11]
          break;
 800a18e:	e089      	b.n	800a2a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00b      	beq.n	800a1b4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	687a      	ldr	r2, [r7, #4]
 800a1a6:	7c12      	ldrb	r2, [r2, #16]
 800a1a8:	f107 0108 	add.w	r1, r7, #8
 800a1ac:	4610      	mov	r0, r2
 800a1ae:	4798      	blx	r3
 800a1b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1b2:	e077      	b.n	800a2a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1b4:	6839      	ldr	r1, [r7, #0]
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 fab1 	bl	800a71e <USBD_CtlError>
            err++;
 800a1bc:	7afb      	ldrb	r3, [r7, #11]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a1c2:	e06f      	b.n	800a2a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d00b      	beq.n	800a1e8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	7c12      	ldrb	r2, [r2, #16]
 800a1dc:	f107 0108 	add.w	r1, r7, #8
 800a1e0:	4610      	mov	r0, r2
 800a1e2:	4798      	blx	r3
 800a1e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1e6:	e05d      	b.n	800a2a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a1e8:	6839      	ldr	r1, [r7, #0]
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 fa97 	bl	800a71e <USBD_CtlError>
            err++;
 800a1f0:	7afb      	ldrb	r3, [r7, #11]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1f6:	e055      	b.n	800a2a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d00b      	beq.n	800a21c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a20a:	691b      	ldr	r3, [r3, #16]
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	7c12      	ldrb	r2, [r2, #16]
 800a210:	f107 0108 	add.w	r1, r7, #8
 800a214:	4610      	mov	r0, r2
 800a216:	4798      	blx	r3
 800a218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a21a:	e043      	b.n	800a2a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a21c:	6839      	ldr	r1, [r7, #0]
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fa7d 	bl	800a71e <USBD_CtlError>
            err++;
 800a224:	7afb      	ldrb	r3, [r7, #11]
 800a226:	3301      	adds	r3, #1
 800a228:	72fb      	strb	r3, [r7, #11]
          break;
 800a22a:	e03b      	b.n	800a2a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a232:	695b      	ldr	r3, [r3, #20]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00b      	beq.n	800a250 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a23e:	695b      	ldr	r3, [r3, #20]
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	7c12      	ldrb	r2, [r2, #16]
 800a244:	f107 0108 	add.w	r1, r7, #8
 800a248:	4610      	mov	r0, r2
 800a24a:	4798      	blx	r3
 800a24c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a24e:	e029      	b.n	800a2a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a250:	6839      	ldr	r1, [r7, #0]
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 fa63 	bl	800a71e <USBD_CtlError>
            err++;
 800a258:	7afb      	ldrb	r3, [r7, #11]
 800a25a:	3301      	adds	r3, #1
 800a25c:	72fb      	strb	r3, [r7, #11]
          break;
 800a25e:	e021      	b.n	800a2a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a266:	699b      	ldr	r3, [r3, #24]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00b      	beq.n	800a284 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a272:	699b      	ldr	r3, [r3, #24]
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	7c12      	ldrb	r2, [r2, #16]
 800a278:	f107 0108 	add.w	r1, r7, #8
 800a27c:	4610      	mov	r0, r2
 800a27e:	4798      	blx	r3
 800a280:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a282:	e00f      	b.n	800a2a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a284:	6839      	ldr	r1, [r7, #0]
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 fa49 	bl	800a71e <USBD_CtlError>
            err++;
 800a28c:	7afb      	ldrb	r3, [r7, #11]
 800a28e:	3301      	adds	r3, #1
 800a290:	72fb      	strb	r3, [r7, #11]
          break;
 800a292:	e007      	b.n	800a2a4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a294:	6839      	ldr	r1, [r7, #0]
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 fa41 	bl	800a71e <USBD_CtlError>
          err++;
 800a29c:	7afb      	ldrb	r3, [r7, #11]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a2a2:	bf00      	nop
      }
      break;
 800a2a4:	e037      	b.n	800a316 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	7c1b      	ldrb	r3, [r3, #16]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d109      	bne.n	800a2c2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2b6:	f107 0208 	add.w	r2, r7, #8
 800a2ba:	4610      	mov	r0, r2
 800a2bc:	4798      	blx	r3
 800a2be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2c0:	e029      	b.n	800a316 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a2c2:	6839      	ldr	r1, [r7, #0]
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 fa2a 	bl	800a71e <USBD_CtlError>
        err++;
 800a2ca:	7afb      	ldrb	r3, [r7, #11]
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	72fb      	strb	r3, [r7, #11]
      break;
 800a2d0:	e021      	b.n	800a316 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	7c1b      	ldrb	r3, [r3, #16]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10d      	bne.n	800a2f6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2e2:	f107 0208 	add.w	r2, r7, #8
 800a2e6:	4610      	mov	r0, r2
 800a2e8:	4798      	blx	r3
 800a2ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	2207      	movs	r2, #7
 800a2f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a2f4:	e00f      	b.n	800a316 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a2f6:	6839      	ldr	r1, [r7, #0]
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 fa10 	bl	800a71e <USBD_CtlError>
        err++;
 800a2fe:	7afb      	ldrb	r3, [r7, #11]
 800a300:	3301      	adds	r3, #1
 800a302:	72fb      	strb	r3, [r7, #11]
      break;
 800a304:	e007      	b.n	800a316 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a306:	6839      	ldr	r1, [r7, #0]
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 fa08 	bl	800a71e <USBD_CtlError>
      err++;
 800a30e:	7afb      	ldrb	r3, [r7, #11]
 800a310:	3301      	adds	r3, #1
 800a312:	72fb      	strb	r3, [r7, #11]
      break;
 800a314:	bf00      	nop
  }

  if (err != 0U)
 800a316:	7afb      	ldrb	r3, [r7, #11]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d11e      	bne.n	800a35a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	88db      	ldrh	r3, [r3, #6]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d016      	beq.n	800a352 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a324:	893b      	ldrh	r3, [r7, #8]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00e      	beq.n	800a348 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	88da      	ldrh	r2, [r3, #6]
 800a32e:	893b      	ldrh	r3, [r7, #8]
 800a330:	4293      	cmp	r3, r2
 800a332:	bf28      	it	cs
 800a334:	4613      	movcs	r3, r2
 800a336:	b29b      	uxth	r3, r3
 800a338:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a33a:	893b      	ldrh	r3, [r7, #8]
 800a33c:	461a      	mov	r2, r3
 800a33e:	68f9      	ldr	r1, [r7, #12]
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 fa69 	bl	800a818 <USBD_CtlSendData>
 800a346:	e009      	b.n	800a35c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a348:	6839      	ldr	r1, [r7, #0]
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f9e7 	bl	800a71e <USBD_CtlError>
 800a350:	e004      	b.n	800a35c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 fac1 	bl	800a8da <USBD_CtlSendStatus>
 800a358:	e000      	b.n	800a35c <USBD_GetDescriptor+0x320>
    return;
 800a35a:	bf00      	nop
  }
}
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop

0800a364 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	889b      	ldrh	r3, [r3, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d131      	bne.n	800a3da <USBD_SetAddress+0x76>
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	88db      	ldrh	r3, [r3, #6]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d12d      	bne.n	800a3da <USBD_SetAddress+0x76>
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	885b      	ldrh	r3, [r3, #2]
 800a382:	2b7f      	cmp	r3, #127	@ 0x7f
 800a384:	d829      	bhi.n	800a3da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	885b      	ldrh	r3, [r3, #2]
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a390:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	2b03      	cmp	r3, #3
 800a39c:	d104      	bne.n	800a3a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a39e:	6839      	ldr	r1, [r7, #0]
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 f9bc 	bl	800a71e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3a6:	e01d      	b.n	800a3e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	7bfa      	ldrb	r2, [r7, #15]
 800a3ac:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a3b0:	7bfb      	ldrb	r3, [r7, #15]
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f014 f861 	bl	801e47c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fa8d 	bl	800a8da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d004      	beq.n	800a3d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2202      	movs	r2, #2
 800a3ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3ce:	e009      	b.n	800a3e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3d8:	e004      	b.n	800a3e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a3da:	6839      	ldr	r1, [r7, #0]
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 f99e 	bl	800a71e <USBD_CtlError>
  }
}
 800a3e2:	bf00      	nop
 800a3e4:	bf00      	nop
 800a3e6:	3710      	adds	r7, #16
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	885b      	ldrh	r3, [r3, #2]
 800a3fe:	b2da      	uxtb	r2, r3
 800a400:	4b4e      	ldr	r3, [pc, #312]	@ (800a53c <USBD_SetConfig+0x150>)
 800a402:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a404:	4b4d      	ldr	r3, [pc, #308]	@ (800a53c <USBD_SetConfig+0x150>)
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d905      	bls.n	800a418 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a40c:	6839      	ldr	r1, [r7, #0]
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 f985 	bl	800a71e <USBD_CtlError>
    return USBD_FAIL;
 800a414:	2303      	movs	r3, #3
 800a416:	e08c      	b.n	800a532 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	2b02      	cmp	r3, #2
 800a422:	d002      	beq.n	800a42a <USBD_SetConfig+0x3e>
 800a424:	2b03      	cmp	r3, #3
 800a426:	d029      	beq.n	800a47c <USBD_SetConfig+0x90>
 800a428:	e075      	b.n	800a516 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a42a:	4b44      	ldr	r3, [pc, #272]	@ (800a53c <USBD_SetConfig+0x150>)
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d020      	beq.n	800a474 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a432:	4b42      	ldr	r3, [pc, #264]	@ (800a53c <USBD_SetConfig+0x150>)
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	461a      	mov	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a43c:	4b3f      	ldr	r3, [pc, #252]	@ (800a53c <USBD_SetConfig+0x150>)
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	4619      	mov	r1, r3
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f7fe ffa3 	bl	800938e <USBD_SetClassConfig>
 800a448:	4603      	mov	r3, r0
 800a44a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a44c:	7bfb      	ldrb	r3, [r7, #15]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d008      	beq.n	800a464 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a452:	6839      	ldr	r1, [r7, #0]
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 f962 	bl	800a71e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2202      	movs	r2, #2
 800a45e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a462:	e065      	b.n	800a530 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 fa38 	bl	800a8da <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2203      	movs	r2, #3
 800a46e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a472:	e05d      	b.n	800a530 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 fa30 	bl	800a8da <USBD_CtlSendStatus>
      break;
 800a47a:	e059      	b.n	800a530 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a47c:	4b2f      	ldr	r3, [pc, #188]	@ (800a53c <USBD_SetConfig+0x150>)
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d112      	bne.n	800a4aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2202      	movs	r2, #2
 800a488:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a48c:	4b2b      	ldr	r3, [pc, #172]	@ (800a53c <USBD_SetConfig+0x150>)
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	461a      	mov	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a496:	4b29      	ldr	r3, [pc, #164]	@ (800a53c <USBD_SetConfig+0x150>)
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	4619      	mov	r1, r3
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7fe ff92 	bl	80093c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 fa19 	bl	800a8da <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a4a8:	e042      	b.n	800a530 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a4aa:	4b24      	ldr	r3, [pc, #144]	@ (800a53c <USBD_SetConfig+0x150>)
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d02a      	beq.n	800a50e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	4619      	mov	r1, r3
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f7fe ff80 	bl	80093c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a4c6:	4b1d      	ldr	r3, [pc, #116]	@ (800a53c <USBD_SetConfig+0x150>)
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a4d0:	4b1a      	ldr	r3, [pc, #104]	@ (800a53c <USBD_SetConfig+0x150>)
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f7fe ff59 	bl	800938e <USBD_SetClassConfig>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a4e0:	7bfb      	ldrb	r3, [r7, #15]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d00f      	beq.n	800a506 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a4e6:	6839      	ldr	r1, [r7, #0]
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 f918 	bl	800a71e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f7fe ff65 	bl	80093c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2202      	movs	r2, #2
 800a500:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a504:	e014      	b.n	800a530 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 f9e7 	bl	800a8da <USBD_CtlSendStatus>
      break;
 800a50c:	e010      	b.n	800a530 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 f9e3 	bl	800a8da <USBD_CtlSendStatus>
      break;
 800a514:	e00c      	b.n	800a530 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a516:	6839      	ldr	r1, [r7, #0]
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 f900 	bl	800a71e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a51e:	4b07      	ldr	r3, [pc, #28]	@ (800a53c <USBD_SetConfig+0x150>)
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	4619      	mov	r1, r3
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7fe ff4e 	bl	80093c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a52a:	2303      	movs	r3, #3
 800a52c:	73fb      	strb	r3, [r7, #15]
      break;
 800a52e:	bf00      	nop
  }

  return ret;
 800a530:	7bfb      	ldrb	r3, [r7, #15]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	200009fc 	.word	0x200009fc

0800a540 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	88db      	ldrh	r3, [r3, #6]
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d004      	beq.n	800a55c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a552:	6839      	ldr	r1, [r7, #0]
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 f8e2 	bl	800a71e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a55a:	e023      	b.n	800a5a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a562:	b2db      	uxtb	r3, r3
 800a564:	2b02      	cmp	r3, #2
 800a566:	dc02      	bgt.n	800a56e <USBD_GetConfig+0x2e>
 800a568:	2b00      	cmp	r3, #0
 800a56a:	dc03      	bgt.n	800a574 <USBD_GetConfig+0x34>
 800a56c:	e015      	b.n	800a59a <USBD_GetConfig+0x5a>
 800a56e:	2b03      	cmp	r3, #3
 800a570:	d00b      	beq.n	800a58a <USBD_GetConfig+0x4a>
 800a572:	e012      	b.n	800a59a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	3308      	adds	r3, #8
 800a57e:	2201      	movs	r2, #1
 800a580:	4619      	mov	r1, r3
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 f948 	bl	800a818 <USBD_CtlSendData>
        break;
 800a588:	e00c      	b.n	800a5a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	3304      	adds	r3, #4
 800a58e:	2201      	movs	r2, #1
 800a590:	4619      	mov	r1, r3
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 f940 	bl	800a818 <USBD_CtlSendData>
        break;
 800a598:	e004      	b.n	800a5a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a59a:	6839      	ldr	r1, [r7, #0]
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 f8be 	bl	800a71e <USBD_CtlError>
        break;
 800a5a2:	bf00      	nop
}
 800a5a4:	bf00      	nop
 800a5a6:	3708      	adds	r7, #8
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	3b01      	subs	r3, #1
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	d81e      	bhi.n	800a602 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	88db      	ldrh	r3, [r3, #6]
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	d004      	beq.n	800a5d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a5cc:	6839      	ldr	r1, [r7, #0]
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 f8a5 	bl	800a71e <USBD_CtlError>
        break;
 800a5d4:	e01a      	b.n	800a60c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d005      	beq.n	800a5f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	f043 0202 	orr.w	r2, r3, #2
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	330c      	adds	r3, #12
 800a5f6:	2202      	movs	r2, #2
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f90c 	bl	800a818 <USBD_CtlSendData>
      break;
 800a600:	e004      	b.n	800a60c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a602:	6839      	ldr	r1, [r7, #0]
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 f88a 	bl	800a71e <USBD_CtlError>
      break;
 800a60a:	bf00      	nop
  }
}
 800a60c:	bf00      	nop
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	885b      	ldrh	r3, [r3, #2]
 800a622:	2b01      	cmp	r3, #1
 800a624:	d107      	bne.n	800a636 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2201      	movs	r2, #1
 800a62a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f953 	bl	800a8da <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a634:	e013      	b.n	800a65e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	885b      	ldrh	r3, [r3, #2]
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d10b      	bne.n	800a656 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	889b      	ldrh	r3, [r3, #4]
 800a642:	0a1b      	lsrs	r3, r3, #8
 800a644:	b29b      	uxth	r3, r3
 800a646:	b2da      	uxtb	r2, r3
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 f943 	bl	800a8da <USBD_CtlSendStatus>
}
 800a654:	e003      	b.n	800a65e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a656:	6839      	ldr	r1, [r7, #0]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f860 	bl	800a71e <USBD_CtlError>
}
 800a65e:	bf00      	nop
 800a660:	3708      	adds	r7, #8
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b082      	sub	sp, #8
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
 800a66e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a676:	b2db      	uxtb	r3, r3
 800a678:	3b01      	subs	r3, #1
 800a67a:	2b02      	cmp	r3, #2
 800a67c:	d80b      	bhi.n	800a696 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	885b      	ldrh	r3, [r3, #2]
 800a682:	2b01      	cmp	r3, #1
 800a684:	d10c      	bne.n	800a6a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f923 	bl	800a8da <USBD_CtlSendStatus>
      }
      break;
 800a694:	e004      	b.n	800a6a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a696:	6839      	ldr	r1, [r7, #0]
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 f840 	bl	800a71e <USBD_CtlError>
      break;
 800a69e:	e000      	b.n	800a6a2 <USBD_ClrFeature+0x3c>
      break;
 800a6a0:	bf00      	nop
  }
}
 800a6a2:	bf00      	nop
 800a6a4:	3708      	adds	r7, #8
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b084      	sub	sp, #16
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	781a      	ldrb	r2, [r3, #0]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	781a      	ldrb	r2, [r3, #0]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f7ff fa13 	bl	8009b00 <SWAPBYTE>
 800a6da:	4603      	mov	r3, r0
 800a6dc:	461a      	mov	r2, r3
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f7ff fa06 	bl	8009b00 <SWAPBYTE>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	3301      	adds	r3, #1
 800a700:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	3301      	adds	r3, #1
 800a706:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f7ff f9f9 	bl	8009b00 <SWAPBYTE>
 800a70e:	4603      	mov	r3, r0
 800a710:	461a      	mov	r2, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	80da      	strh	r2, [r3, #6]
}
 800a716:	bf00      	nop
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b082      	sub	sp, #8
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a728:	2180      	movs	r1, #128	@ 0x80
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f013 fe3c 	bl	801e3a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a730:	2100      	movs	r1, #0
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f013 fe38 	bl	801e3a8 <USBD_LL_StallEP>
}
 800a738:	bf00      	nop
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a74c:	2300      	movs	r3, #0
 800a74e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d042      	beq.n	800a7dc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a75a:	6938      	ldr	r0, [r7, #16]
 800a75c:	f000 f842 	bl	800a7e4 <USBD_GetLen>
 800a760:	4603      	mov	r3, r0
 800a762:	3301      	adds	r3, #1
 800a764:	005b      	lsls	r3, r3, #1
 800a766:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a76a:	d808      	bhi.n	800a77e <USBD_GetString+0x3e>
 800a76c:	6938      	ldr	r0, [r7, #16]
 800a76e:	f000 f839 	bl	800a7e4 <USBD_GetLen>
 800a772:	4603      	mov	r3, r0
 800a774:	3301      	adds	r3, #1
 800a776:	b29b      	uxth	r3, r3
 800a778:	005b      	lsls	r3, r3, #1
 800a77a:	b29a      	uxth	r2, r3
 800a77c:	e001      	b.n	800a782 <USBD_GetString+0x42>
 800a77e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a786:	7dfb      	ldrb	r3, [r7, #23]
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	4413      	add	r3, r2
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	7812      	ldrb	r2, [r2, #0]
 800a790:	701a      	strb	r2, [r3, #0]
  idx++;
 800a792:	7dfb      	ldrb	r3, [r7, #23]
 800a794:	3301      	adds	r3, #1
 800a796:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a798:	7dfb      	ldrb	r3, [r7, #23]
 800a79a:	68ba      	ldr	r2, [r7, #8]
 800a79c:	4413      	add	r3, r2
 800a79e:	2203      	movs	r2, #3
 800a7a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a7a2:	7dfb      	ldrb	r3, [r7, #23]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a7a8:	e013      	b.n	800a7d2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a7aa:	7dfb      	ldrb	r3, [r7, #23]
 800a7ac:	68ba      	ldr	r2, [r7, #8]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	693a      	ldr	r2, [r7, #16]
 800a7b2:	7812      	ldrb	r2, [r2, #0]
 800a7b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	3301      	adds	r3, #1
 800a7ba:	613b      	str	r3, [r7, #16]
    idx++;
 800a7bc:	7dfb      	ldrb	r3, [r7, #23]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a7c2:	7dfb      	ldrb	r3, [r7, #23]
 800a7c4:	68ba      	ldr	r2, [r7, #8]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	701a      	strb	r2, [r3, #0]
    idx++;
 800a7cc:	7dfb      	ldrb	r3, [r7, #23]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1e7      	bne.n	800a7aa <USBD_GetString+0x6a>
 800a7da:	e000      	b.n	800a7de <USBD_GetString+0x9e>
    return;
 800a7dc:	bf00      	nop
  }
}
 800a7de:	3718      	adds	r7, #24
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a7f4:	e005      	b.n	800a802 <USBD_GetLen+0x1e>
  {
    len++;
 800a7f6:	7bfb      	ldrb	r3, [r7, #15]
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	3301      	adds	r3, #1
 800a800:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1f5      	bne.n	800a7f6 <USBD_GetLen+0x12>
  }

  return len;
 800a80a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3714      	adds	r7, #20
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	60f8      	str	r0, [r7, #12]
 800a820:	60b9      	str	r1, [r7, #8]
 800a822:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2202      	movs	r2, #2
 800a828:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	68ba      	ldr	r2, [r7, #8]
 800a836:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	68ba      	ldr	r2, [r7, #8]
 800a842:	2100      	movs	r1, #0
 800a844:	68f8      	ldr	r0, [r7, #12]
 800a846:	f013 fe38 	bl	801e4ba <USBD_LL_Transmit>

  return USBD_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	68ba      	ldr	r2, [r7, #8]
 800a864:	2100      	movs	r1, #0
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	f013 fe27 	bl	801e4ba <USBD_LL_Transmit>

  return USBD_OK;
 800a86c:	2300      	movs	r3, #0
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}

0800a876 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a876:	b580      	push	{r7, lr}
 800a878:	b084      	sub	sp, #16
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	60f8      	str	r0, [r7, #12]
 800a87e:	60b9      	str	r1, [r7, #8]
 800a880:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2203      	movs	r2, #3
 800a886:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	68ba      	ldr	r2, [r7, #8]
 800a896:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	68ba      	ldr	r2, [r7, #8]
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	68f8      	ldr	r0, [r7, #12]
 800a8aa:	f013 fe27 	bl	801e4fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3710      	adds	r7, #16
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b084      	sub	sp, #16
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	68ba      	ldr	r2, [r7, #8]
 800a8c8:	2100      	movs	r1, #0
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f013 fe16 	bl	801e4fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b082      	sub	sp, #8
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2204      	movs	r2, #4
 800a8e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	2100      	movs	r1, #0
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f013 fde2 	bl	801e4ba <USBD_LL_Transmit>

  return USBD_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3708      	adds	r7, #8
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2205      	movs	r2, #5
 800a90c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a910:	2300      	movs	r3, #0
 800a912:	2200      	movs	r2, #0
 800a914:	2100      	movs	r1, #0
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f013 fdf0 	bl	801e4fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a91c:	2300      	movs	r3, #0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3708      	adds	r7, #8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a926:	b480      	push	{r7}
 800a928:	b085      	sub	sp, #20
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	4603      	mov	r3, r0
 800a92e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a930:	2300      	movs	r3, #0
 800a932:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a934:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a938:	2b84      	cmp	r3, #132	@ 0x84
 800a93a:	d005      	beq.n	800a948 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a93c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	4413      	add	r3, r2
 800a944:	3303      	adds	r3, #3
 800a946:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a948:	68fb      	ldr	r3, [r7, #12]
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr

0800a956 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a956:	b480      	push	{r7}
 800a958:	b083      	sub	sp, #12
 800a95a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a95c:	f3ef 8305 	mrs	r3, IPSR
 800a960:	607b      	str	r3, [r7, #4]
  return(result);
 800a962:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a964:	2b00      	cmp	r3, #0
 800a966:	bf14      	ite	ne
 800a968:	2301      	movne	r3, #1
 800a96a:	2300      	moveq	r3, #0
 800a96c:	b2db      	uxtb	r3, r3
}
 800a96e:	4618      	mov	r0, r3
 800a970:	370c      	adds	r7, #12
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr

0800a97a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a97e:	f001 fd7b 	bl	800c478 <vTaskStartScheduler>
  
  return osOK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	bd80      	pop	{r7, pc}

0800a988 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a98c:	f7ff ffe3 	bl	800a956 <inHandlerMode>
 800a990:	4603      	mov	r3, r0
 800a992:	2b00      	cmp	r3, #0
 800a994:	d003      	beq.n	800a99e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a996:	f001 fe9b 	bl	800c6d0 <xTaskGetTickCountFromISR>
 800a99a:	4603      	mov	r3, r0
 800a99c:	e002      	b.n	800a9a4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a99e:	f001 fe87 	bl	800c6b0 <xTaskGetTickCount>
 800a9a2:	4603      	mov	r3, r0
  }
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a9a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9aa:	b089      	sub	sp, #36	@ 0x24
 800a9ac:	af04      	add	r7, sp, #16
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	695b      	ldr	r3, [r3, #20]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d020      	beq.n	800a9fc <osThreadCreate+0x54>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d01c      	beq.n	800a9fc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	685c      	ldr	r4, [r3, #4]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	691e      	ldr	r6, [r3, #16]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7ff ffa6 	bl	800a926 <makeFreeRtosPriority>
 800a9da:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	695b      	ldr	r3, [r3, #20]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a9e4:	9202      	str	r2, [sp, #8]
 800a9e6:	9301      	str	r3, [sp, #4]
 800a9e8:	9100      	str	r1, [sp, #0]
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	4632      	mov	r2, r6
 800a9ee:	4629      	mov	r1, r5
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	f001 fabf 	bl	800bf74 <xTaskCreateStatic>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	60fb      	str	r3, [r7, #12]
 800a9fa:	e01c      	b.n	800aa36 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	685c      	ldr	r4, [r3, #4]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa08:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7ff ff88 	bl	800a926 <makeFreeRtosPriority>
 800aa16:	4602      	mov	r2, r0
 800aa18:	f107 030c 	add.w	r3, r7, #12
 800aa1c:	9301      	str	r3, [sp, #4]
 800aa1e:	9200      	str	r2, [sp, #0]
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	4632      	mov	r2, r6
 800aa24:	4629      	mov	r1, r5
 800aa26:	4620      	mov	r0, r4
 800aa28:	f001 fb0a 	bl	800c040 <xTaskCreate>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d001      	beq.n	800aa36 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800aa32:	2300      	movs	r3, #0
 800aa34:	e000      	b.n	800aa38 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800aa36:	68fb      	ldr	r3, [r7, #12]
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3714      	adds	r7, #20
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aa40 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f001 fc4b 	bl	800c2e4 <vTaskDelete>
  return osOK;
 800aa4e:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3708      	adds	r7, #8
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d001      	beq.n	800aa6e <osDelay+0x16>
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	e000      	b.n	800aa70 <osDelay+0x18>
 800aa6e:	2301      	movs	r3, #1
 800aa70:	4618      	mov	r0, r3
 800aa72:	f001 fcc9 	bl	800c408 <vTaskDelay>
  
  return osOK;
 800aa76:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3710      	adds	r7, #16
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d007      	beq.n	800aaa0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	4619      	mov	r1, r3
 800aa96:	2001      	movs	r0, #1
 800aa98:	f000 fc5b 	bl	800b352 <xQueueCreateMutexStatic>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	e003      	b.n	800aaa8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800aaa0:	2001      	movs	r0, #1
 800aaa2:	f000 fc3e 	bl	800b322 <xQueueCreateMutex>
 800aaa6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3708      	adds	r7, #8
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800aaba:	2300      	movs	r3, #0
 800aabc:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d101      	bne.n	800aac8 <osMutexWait+0x18>
    return osErrorParameter;
 800aac4:	2380      	movs	r3, #128	@ 0x80
 800aac6:	e03a      	b.n	800ab3e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800aac8:	2300      	movs	r3, #0
 800aaca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aad2:	d103      	bne.n	800aadc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800aad4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aad8:	60fb      	str	r3, [r7, #12]
 800aada:	e009      	b.n	800aaf0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d006      	beq.n	800aaf0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d101      	bne.n	800aaf0 <osMutexWait+0x40>
      ticks = 1;
 800aaec:	2301      	movs	r3, #1
 800aaee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800aaf0:	f7ff ff31 	bl	800a956 <inHandlerMode>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d017      	beq.n	800ab2a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800aafa:	f107 0308 	add.w	r3, r7, #8
 800aafe:	461a      	mov	r2, r3
 800ab00:	2100      	movs	r1, #0
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f001 f886 	bl	800bc14 <xQueueReceiveFromISR>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d001      	beq.n	800ab12 <osMutexWait+0x62>
      return osErrorOS;
 800ab0e:	23ff      	movs	r3, #255	@ 0xff
 800ab10:	e015      	b.n	800ab3e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d011      	beq.n	800ab3c <osMutexWait+0x8c>
 800ab18:	4b0b      	ldr	r3, [pc, #44]	@ (800ab48 <osMutexWait+0x98>)
 800ab1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab1e:	601a      	str	r2, [r3, #0]
 800ab20:	f3bf 8f4f 	dsb	sy
 800ab24:	f3bf 8f6f 	isb	sy
 800ab28:	e008      	b.n	800ab3c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800ab2a:	68f9      	ldr	r1, [r7, #12]
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 ff59 	bl	800b9e4 <xQueueSemaphoreTake>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d001      	beq.n	800ab3c <osMutexWait+0x8c>
    return osErrorOS;
 800ab38:	23ff      	movs	r3, #255	@ 0xff
 800ab3a:	e000      	b.n	800ab3e <osMutexWait+0x8e>
  }
  
  return osOK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	e000ed04 	.word	0xe000ed04

0800ab4c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ab54:	2300      	movs	r3, #0
 800ab56:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800ab5c:	f7ff fefb 	bl	800a956 <inHandlerMode>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d016      	beq.n	800ab94 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800ab66:	f107 0308 	add.w	r3, r7, #8
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 fdb8 	bl	800b6e2 <xQueueGiveFromISR>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d001      	beq.n	800ab7c <osMutexRelease+0x30>
      return osErrorOS;
 800ab78:	23ff      	movs	r3, #255	@ 0xff
 800ab7a:	e017      	b.n	800abac <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d013      	beq.n	800abaa <osMutexRelease+0x5e>
 800ab82:	4b0c      	ldr	r3, [pc, #48]	@ (800abb4 <osMutexRelease+0x68>)
 800ab84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab88:	601a      	str	r2, [r3, #0]
 800ab8a:	f3bf 8f4f 	dsb	sy
 800ab8e:	f3bf 8f6f 	isb	sy
 800ab92:	e00a      	b.n	800abaa <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800ab94:	2300      	movs	r3, #0
 800ab96:	2200      	movs	r2, #0
 800ab98:	2100      	movs	r1, #0
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 fbf4 	bl	800b388 <xQueueGenericSend>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d001      	beq.n	800abaa <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800aba6:	23ff      	movs	r3, #255	@ 0xff
 800aba8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800abaa:	68fb      	ldr	r3, [r7, #12]
}
 800abac:	4618      	mov	r0, r3
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	e000ed04 	.word	0xe000ed04

0800abb8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800abb8:	b580      	push	{r7, lr}
 800abba:	b086      	sub	sp, #24
 800abbc:	af02      	add	r7, sp, #8
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00f      	beq.n	800abea <osSemaphoreCreate+0x32>
    if (count == 1) {
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d10a      	bne.n	800abe6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	2203      	movs	r2, #3
 800abd6:	9200      	str	r2, [sp, #0]
 800abd8:	2200      	movs	r2, #0
 800abda:	2100      	movs	r1, #0
 800abdc:	2001      	movs	r0, #1
 800abde:	f000 fa9d 	bl	800b11c <xQueueGenericCreateStatic>
 800abe2:	4603      	mov	r3, r0
 800abe4:	e016      	b.n	800ac14 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800abe6:	2300      	movs	r3, #0
 800abe8:	e014      	b.n	800ac14 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	2b01      	cmp	r3, #1
 800abee:	d110      	bne.n	800ac12 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800abf0:	2203      	movs	r2, #3
 800abf2:	2100      	movs	r1, #0
 800abf4:	2001      	movs	r0, #1
 800abf6:	f000 fb18 	bl	800b22a <xQueueGenericCreate>
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d005      	beq.n	800ac0e <osSemaphoreCreate+0x56>
 800ac02:	2300      	movs	r3, #0
 800ac04:	2200      	movs	r2, #0
 800ac06:	2100      	movs	r1, #0
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	f000 fbbd 	bl	800b388 <xQueueGenericSend>
      return sema;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	e000      	b.n	800ac14 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800ac12:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ac26:	2300      	movs	r3, #0
 800ac28:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d101      	bne.n	800ac34 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800ac30:	2380      	movs	r3, #128	@ 0x80
 800ac32:	e03a      	b.n	800acaa <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800ac34:	2300      	movs	r3, #0
 800ac36:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac3e:	d103      	bne.n	800ac48 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800ac40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ac44:	60fb      	str	r3, [r7, #12]
 800ac46:	e009      	b.n	800ac5c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d006      	beq.n	800ac5c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d101      	bne.n	800ac5c <osSemaphoreWait+0x40>
      ticks = 1;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ac5c:	f7ff fe7b 	bl	800a956 <inHandlerMode>
 800ac60:	4603      	mov	r3, r0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d017      	beq.n	800ac96 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ac66:	f107 0308 	add.w	r3, r7, #8
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 ffd0 	bl	800bc14 <xQueueReceiveFromISR>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d001      	beq.n	800ac7e <osSemaphoreWait+0x62>
      return osErrorOS;
 800ac7a:	23ff      	movs	r3, #255	@ 0xff
 800ac7c:	e015      	b.n	800acaa <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d011      	beq.n	800aca8 <osSemaphoreWait+0x8c>
 800ac84:	4b0b      	ldr	r3, [pc, #44]	@ (800acb4 <osSemaphoreWait+0x98>)
 800ac86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac8a:	601a      	str	r2, [r3, #0]
 800ac8c:	f3bf 8f4f 	dsb	sy
 800ac90:	f3bf 8f6f 	isb	sy
 800ac94:	e008      	b.n	800aca8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ac96:	68f9      	ldr	r1, [r7, #12]
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 fea3 	bl	800b9e4 <xQueueSemaphoreTake>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d001      	beq.n	800aca8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800aca4:	23ff      	movs	r3, #255	@ 0xff
 800aca6:	e000      	b.n	800acaa <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800aca8:	2300      	movs	r3, #0
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	e000ed04 	.word	0xe000ed04

0800acb8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800acc0:	2300      	movs	r3, #0
 800acc2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800acc4:	2300      	movs	r3, #0
 800acc6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800acc8:	f7ff fe45 	bl	800a956 <inHandlerMode>
 800accc:	4603      	mov	r3, r0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d016      	beq.n	800ad00 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800acd2:	f107 0308 	add.w	r3, r7, #8
 800acd6:	4619      	mov	r1, r3
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 fd02 	bl	800b6e2 <xQueueGiveFromISR>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d001      	beq.n	800ace8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ace4:	23ff      	movs	r3, #255	@ 0xff
 800ace6:	e017      	b.n	800ad18 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d013      	beq.n	800ad16 <osSemaphoreRelease+0x5e>
 800acee:	4b0c      	ldr	r3, [pc, #48]	@ (800ad20 <osSemaphoreRelease+0x68>)
 800acf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acf4:	601a      	str	r2, [r3, #0]
 800acf6:	f3bf 8f4f 	dsb	sy
 800acfa:	f3bf 8f6f 	isb	sy
 800acfe:	e00a      	b.n	800ad16 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ad00:	2300      	movs	r3, #0
 800ad02:	2200      	movs	r2, #0
 800ad04:	2100      	movs	r1, #0
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fb3e 	bl	800b388 <xQueueGenericSend>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d001      	beq.n	800ad16 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ad12:	23ff      	movs	r3, #255	@ 0xff
 800ad14:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ad16:	68fb      	ldr	r3, [r7, #12]
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3710      	adds	r7, #16
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}
 800ad20:	e000ed04 	.word	0xe000ed04

0800ad24 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ad24:	b590      	push	{r4, r7, lr}
 800ad26:	b085      	sub	sp, #20
 800ad28:	af02      	add	r7, sp, #8
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	689b      	ldr	r3, [r3, #8]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d011      	beq.n	800ad5a <osMessageCreate+0x36>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00d      	beq.n	800ad5a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6818      	ldr	r0, [r3, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6859      	ldr	r1, [r3, #4]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	689a      	ldr	r2, [r3, #8]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	2400      	movs	r4, #0
 800ad50:	9400      	str	r4, [sp, #0]
 800ad52:	f000 f9e3 	bl	800b11c <xQueueGenericCreateStatic>
 800ad56:	4603      	mov	r3, r0
 800ad58:	e008      	b.n	800ad6c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6818      	ldr	r0, [r3, #0]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	4619      	mov	r1, r3
 800ad66:	f000 fa60 	bl	800b22a <xQueueGenericCreate>
 800ad6a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	370c      	adds	r7, #12
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd90      	pop	{r4, r7, pc}

0800ad74 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b086      	sub	sp, #24
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ad80:	2300      	movs	r3, #0
 800ad82:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d101      	bne.n	800ad92 <osMessagePut+0x1e>
    ticks = 1;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ad92:	f7ff fde0 	bl	800a956 <inHandlerMode>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d018      	beq.n	800adce <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ad9c:	f107 0210 	add.w	r2, r7, #16
 800ada0:	f107 0108 	add.w	r1, r7, #8
 800ada4:	2300      	movs	r3, #0
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f000 fbf8 	bl	800b59c <xQueueGenericSendFromISR>
 800adac:	4603      	mov	r3, r0
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d001      	beq.n	800adb6 <osMessagePut+0x42>
      return osErrorOS;
 800adb2:	23ff      	movs	r3, #255	@ 0xff
 800adb4:	e018      	b.n	800ade8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d014      	beq.n	800ade6 <osMessagePut+0x72>
 800adbc:	4b0c      	ldr	r3, [pc, #48]	@ (800adf0 <osMessagePut+0x7c>)
 800adbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adc2:	601a      	str	r2, [r3, #0]
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	f3bf 8f6f 	isb	sy
 800adcc:	e00b      	b.n	800ade6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800adce:	f107 0108 	add.w	r1, r7, #8
 800add2:	2300      	movs	r3, #0
 800add4:	697a      	ldr	r2, [r7, #20]
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f000 fad6 	bl	800b388 <xQueueGenericSend>
 800addc:	4603      	mov	r3, r0
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d001      	beq.n	800ade6 <osMessagePut+0x72>
      return osErrorOS;
 800ade2:	23ff      	movs	r3, #255	@ 0xff
 800ade4:	e000      	b.n	800ade8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3718      	adds	r7, #24
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	e000ed04 	.word	0xe000ed04

0800adf4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800adf4:	b590      	push	{r4, r7, lr}
 800adf6:	b08b      	sub	sp, #44	@ 0x2c
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ae04:	2300      	movs	r3, #0
 800ae06:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d10a      	bne.n	800ae24 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ae0e:	2380      	movs	r3, #128	@ 0x80
 800ae10:	617b      	str	r3, [r7, #20]
    return event;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	461c      	mov	r4, r3
 800ae16:	f107 0314 	add.w	r3, r7, #20
 800ae1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ae1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ae22:	e054      	b.n	800aece <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ae24:	2300      	movs	r3, #0
 800ae26:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae32:	d103      	bne.n	800ae3c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ae34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ae38:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae3a:	e009      	b.n	800ae50 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d006      	beq.n	800ae50 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800ae46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d101      	bne.n	800ae50 <osMessageGet+0x5c>
      ticks = 1;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ae50:	f7ff fd81 	bl	800a956 <inHandlerMode>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d01c      	beq.n	800ae94 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ae5a:	f107 0220 	add.w	r2, r7, #32
 800ae5e:	f107 0314 	add.w	r3, r7, #20
 800ae62:	3304      	adds	r3, #4
 800ae64:	4619      	mov	r1, r3
 800ae66:	68b8      	ldr	r0, [r7, #8]
 800ae68:	f000 fed4 	bl	800bc14 <xQueueReceiveFromISR>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d102      	bne.n	800ae78 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ae72:	2310      	movs	r3, #16
 800ae74:	617b      	str	r3, [r7, #20]
 800ae76:	e001      	b.n	800ae7c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ae7c:	6a3b      	ldr	r3, [r7, #32]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d01d      	beq.n	800aebe <osMessageGet+0xca>
 800ae82:	4b15      	ldr	r3, [pc, #84]	@ (800aed8 <osMessageGet+0xe4>)
 800ae84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae88:	601a      	str	r2, [r3, #0]
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	f3bf 8f6f 	isb	sy
 800ae92:	e014      	b.n	800aebe <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ae94:	f107 0314 	add.w	r3, r7, #20
 800ae98:	3304      	adds	r3, #4
 800ae9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	68b8      	ldr	r0, [r7, #8]
 800aea0:	f000 fcb8 	bl	800b814 <xQueueReceive>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d102      	bne.n	800aeb0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800aeaa:	2310      	movs	r3, #16
 800aeac:	617b      	str	r3, [r7, #20]
 800aeae:	e006      	b.n	800aebe <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800aeb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d101      	bne.n	800aeba <osMessageGet+0xc6>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	e000      	b.n	800aebc <osMessageGet+0xc8>
 800aeba:	2340      	movs	r3, #64	@ 0x40
 800aebc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	461c      	mov	r4, r3
 800aec2:	f107 0314 	add.w	r3, r7, #20
 800aec6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aeca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800aece:	68f8      	ldr	r0, [r7, #12]
 800aed0:	372c      	adds	r7, #44	@ 0x2c
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd90      	pop	{r4, r7, pc}
 800aed6:	bf00      	nop
 800aed8:	e000ed04 	.word	0xe000ed04

0800aedc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f103 0208 	add.w	r2, r3, #8
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aef4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f103 0208 	add.w	r2, r3, #8
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f103 0208 	add.w	r2, r3, #8
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2200      	movs	r2, #0
 800af0e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800af10:	bf00      	nop
 800af12:	370c      	adds	r7, #12
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr

0800af1c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800af2a:	bf00      	nop
 800af2c:	370c      	adds	r7, #12
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr

0800af36 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af36:	b480      	push	{r7}
 800af38:	b085      	sub	sp, #20
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
 800af3e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	689a      	ldr	r2, [r3, #8]
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	683a      	ldr	r2, [r7, #0]
 800af5a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	683a      	ldr	r2, [r7, #0]
 800af60:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	1c5a      	adds	r2, r3, #1
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	601a      	str	r2, [r3, #0]
}
 800af72:	bf00      	nop
 800af74:	3714      	adds	r7, #20
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr

0800af7e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af7e:	b480      	push	{r7}
 800af80:	b085      	sub	sp, #20
 800af82:	af00      	add	r7, sp, #0
 800af84:	6078      	str	r0, [r7, #4]
 800af86:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af94:	d103      	bne.n	800af9e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	691b      	ldr	r3, [r3, #16]
 800af9a:	60fb      	str	r3, [r7, #12]
 800af9c:	e00c      	b.n	800afb8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	3308      	adds	r3, #8
 800afa2:	60fb      	str	r3, [r7, #12]
 800afa4:	e002      	b.n	800afac <vListInsert+0x2e>
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	60fb      	str	r3, [r7, #12]
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	68ba      	ldr	r2, [r7, #8]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d2f6      	bcs.n	800afa6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	685a      	ldr	r2, [r3, #4]
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	683a      	ldr	r2, [r7, #0]
 800afc6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	683a      	ldr	r2, [r7, #0]
 800afd2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	1c5a      	adds	r2, r3, #1
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	601a      	str	r2, [r3, #0]
}
 800afe4:	bf00      	nop
 800afe6:	3714      	adds	r7, #20
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aff0:	b480      	push	{r7}
 800aff2:	b085      	sub	sp, #20
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	691b      	ldr	r3, [r3, #16]
 800affc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	6892      	ldr	r2, [r2, #8]
 800b006:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	6852      	ldr	r2, [r2, #4]
 800b010:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d103      	bne.n	800b024 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	689a      	ldr	r2, [r3, #8]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	1e5a      	subs	r2, r3, #1
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3714      	adds	r7, #20
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10d      	bne.n	800b074 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b05c:	b672      	cpsid	i
 800b05e:	f383 8811 	msr	BASEPRI, r3
 800b062:	f3bf 8f6f 	isb	sy
 800b066:	f3bf 8f4f 	dsb	sy
 800b06a:	b662      	cpsie	i
 800b06c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b06e:	bf00      	nop
 800b070:	bf00      	nop
 800b072:	e7fd      	b.n	800b070 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b074:	f002 f9aa 	bl	800d3cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b080:	68f9      	ldr	r1, [r7, #12]
 800b082:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b084:	fb01 f303 	mul.w	r3, r1, r3
 800b088:	441a      	add	r2, r3
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2200      	movs	r2, #0
 800b092:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0a4:	3b01      	subs	r3, #1
 800b0a6:	68f9      	ldr	r1, [r7, #12]
 800b0a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b0aa:	fb01 f303 	mul.w	r3, r1, r3
 800b0ae:	441a      	add	r2, r3
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	22ff      	movs	r2, #255	@ 0xff
 800b0b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	22ff      	movs	r2, #255	@ 0xff
 800b0c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d114      	bne.n	800b0f4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	691b      	ldr	r3, [r3, #16]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d01a      	beq.n	800b108 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	3310      	adds	r3, #16
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f001 fc56 	bl	800c988 <xTaskRemoveFromEventList>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d012      	beq.n	800b108 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b0e2:	4b0d      	ldr	r3, [pc, #52]	@ (800b118 <xQueueGenericReset+0xd4>)
 800b0e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0e8:	601a      	str	r2, [r3, #0]
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	f3bf 8f6f 	isb	sy
 800b0f2:	e009      	b.n	800b108 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	3310      	adds	r3, #16
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7ff feef 	bl	800aedc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	3324      	adds	r3, #36	@ 0x24
 800b102:	4618      	mov	r0, r3
 800b104:	f7ff feea 	bl	800aedc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b108:	f002 f996 	bl	800d438 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b10c:	2301      	movs	r3, #1
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	e000ed04 	.word	0xe000ed04

0800b11c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b08e      	sub	sp, #56	@ 0x38
 800b120:	af02      	add	r7, sp, #8
 800b122:	60f8      	str	r0, [r7, #12]
 800b124:	60b9      	str	r1, [r7, #8]
 800b126:	607a      	str	r2, [r7, #4]
 800b128:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d10d      	bne.n	800b14c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800b130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b134:	b672      	cpsid	i
 800b136:	f383 8811 	msr	BASEPRI, r3
 800b13a:	f3bf 8f6f 	isb	sy
 800b13e:	f3bf 8f4f 	dsb	sy
 800b142:	b662      	cpsie	i
 800b144:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b146:	bf00      	nop
 800b148:	bf00      	nop
 800b14a:	e7fd      	b.n	800b148 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10d      	bne.n	800b16e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800b152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b156:	b672      	cpsid	i
 800b158:	f383 8811 	msr	BASEPRI, r3
 800b15c:	f3bf 8f6f 	isb	sy
 800b160:	f3bf 8f4f 	dsb	sy
 800b164:	b662      	cpsie	i
 800b166:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b168:	bf00      	nop
 800b16a:	bf00      	nop
 800b16c:	e7fd      	b.n	800b16a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d002      	beq.n	800b17a <xQueueGenericCreateStatic+0x5e>
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d001      	beq.n	800b17e <xQueueGenericCreateStatic+0x62>
 800b17a:	2301      	movs	r3, #1
 800b17c:	e000      	b.n	800b180 <xQueueGenericCreateStatic+0x64>
 800b17e:	2300      	movs	r3, #0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d10d      	bne.n	800b1a0 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800b184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b188:	b672      	cpsid	i
 800b18a:	f383 8811 	msr	BASEPRI, r3
 800b18e:	f3bf 8f6f 	isb	sy
 800b192:	f3bf 8f4f 	dsb	sy
 800b196:	b662      	cpsie	i
 800b198:	623b      	str	r3, [r7, #32]
}
 800b19a:	bf00      	nop
 800b19c:	bf00      	nop
 800b19e:	e7fd      	b.n	800b19c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d102      	bne.n	800b1ac <xQueueGenericCreateStatic+0x90>
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d101      	bne.n	800b1b0 <xQueueGenericCreateStatic+0x94>
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e000      	b.n	800b1b2 <xQueueGenericCreateStatic+0x96>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d10d      	bne.n	800b1d2 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800b1b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ba:	b672      	cpsid	i
 800b1bc:	f383 8811 	msr	BASEPRI, r3
 800b1c0:	f3bf 8f6f 	isb	sy
 800b1c4:	f3bf 8f4f 	dsb	sy
 800b1c8:	b662      	cpsie	i
 800b1ca:	61fb      	str	r3, [r7, #28]
}
 800b1cc:	bf00      	nop
 800b1ce:	bf00      	nop
 800b1d0:	e7fd      	b.n	800b1ce <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b1d2:	2348      	movs	r3, #72	@ 0x48
 800b1d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	2b48      	cmp	r3, #72	@ 0x48
 800b1da:	d00d      	beq.n	800b1f8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800b1dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e0:	b672      	cpsid	i
 800b1e2:	f383 8811 	msr	BASEPRI, r3
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	f3bf 8f4f 	dsb	sy
 800b1ee:	b662      	cpsie	i
 800b1f0:	61bb      	str	r3, [r7, #24]
}
 800b1f2:	bf00      	nop
 800b1f4:	bf00      	nop
 800b1f6:	e7fd      	b.n	800b1f4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b1f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b200:	2b00      	cmp	r3, #0
 800b202:	d00d      	beq.n	800b220 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b206:	2201      	movs	r2, #1
 800b208:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b20c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b212:	9300      	str	r3, [sp, #0]
 800b214:	4613      	mov	r3, r2
 800b216:	687a      	ldr	r2, [r7, #4]
 800b218:	68b9      	ldr	r1, [r7, #8]
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	f000 f848 	bl	800b2b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b222:	4618      	mov	r0, r3
 800b224:	3730      	adds	r7, #48	@ 0x30
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b08a      	sub	sp, #40	@ 0x28
 800b22e:	af02      	add	r7, sp, #8
 800b230:	60f8      	str	r0, [r7, #12]
 800b232:	60b9      	str	r1, [r7, #8]
 800b234:	4613      	mov	r3, r2
 800b236:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d10d      	bne.n	800b25a <xQueueGenericCreate+0x30>
	__asm volatile
 800b23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b242:	b672      	cpsid	i
 800b244:	f383 8811 	msr	BASEPRI, r3
 800b248:	f3bf 8f6f 	isb	sy
 800b24c:	f3bf 8f4f 	dsb	sy
 800b250:	b662      	cpsie	i
 800b252:	613b      	str	r3, [r7, #16]
}
 800b254:	bf00      	nop
 800b256:	bf00      	nop
 800b258:	e7fd      	b.n	800b256 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d102      	bne.n	800b266 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b260:	2300      	movs	r3, #0
 800b262:	61fb      	str	r3, [r7, #28]
 800b264:	e004      	b.n	800b270 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	68ba      	ldr	r2, [r7, #8]
 800b26a:	fb02 f303 	mul.w	r3, r2, r3
 800b26e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	3348      	adds	r3, #72	@ 0x48
 800b274:	4618      	mov	r0, r3
 800b276:	f002 f9d7 	bl	800d628 <pvPortMalloc>
 800b27a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d011      	beq.n	800b2a6 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	3348      	adds	r3, #72	@ 0x48
 800b28a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	2200      	movs	r2, #0
 800b290:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b294:	79fa      	ldrb	r2, [r7, #7]
 800b296:	69bb      	ldr	r3, [r7, #24]
 800b298:	9300      	str	r3, [sp, #0]
 800b29a:	4613      	mov	r3, r2
 800b29c:	697a      	ldr	r2, [r7, #20]
 800b29e:	68b9      	ldr	r1, [r7, #8]
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f000 f805 	bl	800b2b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b2a6:	69bb      	ldr	r3, [r7, #24]
	}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3720      	adds	r7, #32
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	607a      	str	r2, [r7, #4]
 800b2bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d103      	bne.n	800b2cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	69ba      	ldr	r2, [r7, #24]
 800b2c8:	601a      	str	r2, [r3, #0]
 800b2ca:	e002      	b.n	800b2d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	68fa      	ldr	r2, [r7, #12]
 800b2d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	68ba      	ldr	r2, [r7, #8]
 800b2dc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b2de:	2101      	movs	r1, #1
 800b2e0:	69b8      	ldr	r0, [r7, #24]
 800b2e2:	f7ff feaf 	bl	800b044 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b2e6:	bf00      	nop
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b082      	sub	sp, #8
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d00e      	beq.n	800b31a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b30e:	2300      	movs	r3, #0
 800b310:	2200      	movs	r2, #0
 800b312:	2100      	movs	r1, #0
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 f837 	bl	800b388 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b31a:	bf00      	nop
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b322:	b580      	push	{r7, lr}
 800b324:	b086      	sub	sp, #24
 800b326:	af00      	add	r7, sp, #0
 800b328:	4603      	mov	r3, r0
 800b32a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b32c:	2301      	movs	r3, #1
 800b32e:	617b      	str	r3, [r7, #20]
 800b330:	2300      	movs	r3, #0
 800b332:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b334:	79fb      	ldrb	r3, [r7, #7]
 800b336:	461a      	mov	r2, r3
 800b338:	6939      	ldr	r1, [r7, #16]
 800b33a:	6978      	ldr	r0, [r7, #20]
 800b33c:	f7ff ff75 	bl	800b22a <xQueueGenericCreate>
 800b340:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f7ff ffd3 	bl	800b2ee <prvInitialiseMutex>

		return xNewQueue;
 800b348:	68fb      	ldr	r3, [r7, #12]
	}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3718      	adds	r7, #24
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b352:	b580      	push	{r7, lr}
 800b354:	b088      	sub	sp, #32
 800b356:	af02      	add	r7, sp, #8
 800b358:	4603      	mov	r3, r0
 800b35a:	6039      	str	r1, [r7, #0]
 800b35c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b35e:	2301      	movs	r3, #1
 800b360:	617b      	str	r3, [r7, #20]
 800b362:	2300      	movs	r3, #0
 800b364:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b366:	79fb      	ldrb	r3, [r7, #7]
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	2200      	movs	r2, #0
 800b36e:	6939      	ldr	r1, [r7, #16]
 800b370:	6978      	ldr	r0, [r7, #20]
 800b372:	f7ff fed3 	bl	800b11c <xQueueGenericCreateStatic>
 800b376:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f7ff ffb8 	bl	800b2ee <prvInitialiseMutex>

		return xNewQueue;
 800b37e:	68fb      	ldr	r3, [r7, #12]
	}
 800b380:	4618      	mov	r0, r3
 800b382:	3718      	adds	r7, #24
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b08e      	sub	sp, #56	@ 0x38
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
 800b394:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b396:	2300      	movs	r3, #0
 800b398:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d10d      	bne.n	800b3c0 <xQueueGenericSend+0x38>
	__asm volatile
 800b3a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a8:	b672      	cpsid	i
 800b3aa:	f383 8811 	msr	BASEPRI, r3
 800b3ae:	f3bf 8f6f 	isb	sy
 800b3b2:	f3bf 8f4f 	dsb	sy
 800b3b6:	b662      	cpsie	i
 800b3b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b3ba:	bf00      	nop
 800b3bc:	bf00      	nop
 800b3be:	e7fd      	b.n	800b3bc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d103      	bne.n	800b3ce <xQueueGenericSend+0x46>
 800b3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d101      	bne.n	800b3d2 <xQueueGenericSend+0x4a>
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e000      	b.n	800b3d4 <xQueueGenericSend+0x4c>
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d10d      	bne.n	800b3f4 <xQueueGenericSend+0x6c>
	__asm volatile
 800b3d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3dc:	b672      	cpsid	i
 800b3de:	f383 8811 	msr	BASEPRI, r3
 800b3e2:	f3bf 8f6f 	isb	sy
 800b3e6:	f3bf 8f4f 	dsb	sy
 800b3ea:	b662      	cpsie	i
 800b3ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b3ee:	bf00      	nop
 800b3f0:	bf00      	nop
 800b3f2:	e7fd      	b.n	800b3f0 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	2b02      	cmp	r3, #2
 800b3f8:	d103      	bne.n	800b402 <xQueueGenericSend+0x7a>
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d101      	bne.n	800b406 <xQueueGenericSend+0x7e>
 800b402:	2301      	movs	r3, #1
 800b404:	e000      	b.n	800b408 <xQueueGenericSend+0x80>
 800b406:	2300      	movs	r3, #0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d10d      	bne.n	800b428 <xQueueGenericSend+0xa0>
	__asm volatile
 800b40c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b410:	b672      	cpsid	i
 800b412:	f383 8811 	msr	BASEPRI, r3
 800b416:	f3bf 8f6f 	isb	sy
 800b41a:	f3bf 8f4f 	dsb	sy
 800b41e:	b662      	cpsie	i
 800b420:	623b      	str	r3, [r7, #32]
}
 800b422:	bf00      	nop
 800b424:	bf00      	nop
 800b426:	e7fd      	b.n	800b424 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b428:	f001 fc7c 	bl	800cd24 <xTaskGetSchedulerState>
 800b42c:	4603      	mov	r3, r0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d102      	bne.n	800b438 <xQueueGenericSend+0xb0>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d101      	bne.n	800b43c <xQueueGenericSend+0xb4>
 800b438:	2301      	movs	r3, #1
 800b43a:	e000      	b.n	800b43e <xQueueGenericSend+0xb6>
 800b43c:	2300      	movs	r3, #0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d10d      	bne.n	800b45e <xQueueGenericSend+0xd6>
	__asm volatile
 800b442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b446:	b672      	cpsid	i
 800b448:	f383 8811 	msr	BASEPRI, r3
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	f3bf 8f4f 	dsb	sy
 800b454:	b662      	cpsie	i
 800b456:	61fb      	str	r3, [r7, #28]
}
 800b458:	bf00      	nop
 800b45a:	bf00      	nop
 800b45c:	e7fd      	b.n	800b45a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b45e:	f001 ffb5 	bl	800d3cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b464:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d302      	bcc.n	800b474 <xQueueGenericSend+0xec>
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	2b02      	cmp	r3, #2
 800b472:	d129      	bne.n	800b4c8 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b474:	683a      	ldr	r2, [r7, #0]
 800b476:	68b9      	ldr	r1, [r7, #8]
 800b478:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b47a:	f000 fc6b 	bl	800bd54 <prvCopyDataToQueue>
 800b47e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b484:	2b00      	cmp	r3, #0
 800b486:	d010      	beq.n	800b4aa <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b48a:	3324      	adds	r3, #36	@ 0x24
 800b48c:	4618      	mov	r0, r3
 800b48e:	f001 fa7b 	bl	800c988 <xTaskRemoveFromEventList>
 800b492:	4603      	mov	r3, r0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d013      	beq.n	800b4c0 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b498:	4b3f      	ldr	r3, [pc, #252]	@ (800b598 <xQueueGenericSend+0x210>)
 800b49a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b49e:	601a      	str	r2, [r3, #0]
 800b4a0:	f3bf 8f4f 	dsb	sy
 800b4a4:	f3bf 8f6f 	isb	sy
 800b4a8:	e00a      	b.n	800b4c0 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b4aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d007      	beq.n	800b4c0 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b4b0:	4b39      	ldr	r3, [pc, #228]	@ (800b598 <xQueueGenericSend+0x210>)
 800b4b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4b6:	601a      	str	r2, [r3, #0]
 800b4b8:	f3bf 8f4f 	dsb	sy
 800b4bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b4c0:	f001 ffba 	bl	800d438 <vPortExitCritical>
				return pdPASS;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	e063      	b.n	800b590 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d103      	bne.n	800b4d6 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b4ce:	f001 ffb3 	bl	800d438 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	e05c      	b.n	800b590 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b4d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d106      	bne.n	800b4ea <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b4dc:	f107 0314 	add.w	r3, r7, #20
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f001 fab7 	bl	800ca54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b4ea:	f001 ffa5 	bl	800d438 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b4ee:	f001 f831 	bl	800c554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b4f2:	f001 ff6b 	bl	800d3cc <vPortEnterCritical>
 800b4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b4fc:	b25b      	sxtb	r3, r3
 800b4fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b502:	d103      	bne.n	800b50c <xQueueGenericSend+0x184>
 800b504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b506:	2200      	movs	r2, #0
 800b508:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b50c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b50e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b512:	b25b      	sxtb	r3, r3
 800b514:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b518:	d103      	bne.n	800b522 <xQueueGenericSend+0x19a>
 800b51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b51c:	2200      	movs	r2, #0
 800b51e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b522:	f001 ff89 	bl	800d438 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b526:	1d3a      	adds	r2, r7, #4
 800b528:	f107 0314 	add.w	r3, r7, #20
 800b52c:	4611      	mov	r1, r2
 800b52e:	4618      	mov	r0, r3
 800b530:	f001 faa6 	bl	800ca80 <xTaskCheckForTimeOut>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d124      	bne.n	800b584 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b53a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b53c:	f000 fd02 	bl	800bf44 <prvIsQueueFull>
 800b540:	4603      	mov	r3, r0
 800b542:	2b00      	cmp	r3, #0
 800b544:	d018      	beq.n	800b578 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b548:	3310      	adds	r3, #16
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	4611      	mov	r1, r2
 800b54e:	4618      	mov	r0, r3
 800b550:	f001 f9f2 	bl	800c938 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b554:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b556:	f000 fc8d 	bl	800be74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b55a:	f001 f809 	bl	800c570 <xTaskResumeAll>
 800b55e:	4603      	mov	r3, r0
 800b560:	2b00      	cmp	r3, #0
 800b562:	f47f af7c 	bne.w	800b45e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800b566:	4b0c      	ldr	r3, [pc, #48]	@ (800b598 <xQueueGenericSend+0x210>)
 800b568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b56c:	601a      	str	r2, [r3, #0]
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	f3bf 8f6f 	isb	sy
 800b576:	e772      	b.n	800b45e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b578:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b57a:	f000 fc7b 	bl	800be74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b57e:	f000 fff7 	bl	800c570 <xTaskResumeAll>
 800b582:	e76c      	b.n	800b45e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b584:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b586:	f000 fc75 	bl	800be74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b58a:	f000 fff1 	bl	800c570 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b58e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b590:	4618      	mov	r0, r3
 800b592:	3738      	adds	r7, #56	@ 0x38
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	e000ed04 	.word	0xe000ed04

0800b59c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b08e      	sub	sp, #56	@ 0x38
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	607a      	str	r2, [r7, #4]
 800b5a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10d      	bne.n	800b5d0 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800b5b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5b8:	b672      	cpsid	i
 800b5ba:	f383 8811 	msr	BASEPRI, r3
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	b662      	cpsie	i
 800b5c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b5ca:	bf00      	nop
 800b5cc:	bf00      	nop
 800b5ce:	e7fd      	b.n	800b5cc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d103      	bne.n	800b5de <xQueueGenericSendFromISR+0x42>
 800b5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d101      	bne.n	800b5e2 <xQueueGenericSendFromISR+0x46>
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e000      	b.n	800b5e4 <xQueueGenericSendFromISR+0x48>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d10d      	bne.n	800b604 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800b5e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ec:	b672      	cpsid	i
 800b5ee:	f383 8811 	msr	BASEPRI, r3
 800b5f2:	f3bf 8f6f 	isb	sy
 800b5f6:	f3bf 8f4f 	dsb	sy
 800b5fa:	b662      	cpsie	i
 800b5fc:	623b      	str	r3, [r7, #32]
}
 800b5fe:	bf00      	nop
 800b600:	bf00      	nop
 800b602:	e7fd      	b.n	800b600 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	2b02      	cmp	r3, #2
 800b608:	d103      	bne.n	800b612 <xQueueGenericSendFromISR+0x76>
 800b60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b60c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d101      	bne.n	800b616 <xQueueGenericSendFromISR+0x7a>
 800b612:	2301      	movs	r3, #1
 800b614:	e000      	b.n	800b618 <xQueueGenericSendFromISR+0x7c>
 800b616:	2300      	movs	r3, #0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d10d      	bne.n	800b638 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800b61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b620:	b672      	cpsid	i
 800b622:	f383 8811 	msr	BASEPRI, r3
 800b626:	f3bf 8f6f 	isb	sy
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	b662      	cpsie	i
 800b630:	61fb      	str	r3, [r7, #28]
}
 800b632:	bf00      	nop
 800b634:	bf00      	nop
 800b636:	e7fd      	b.n	800b634 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b638:	f001 ffb0 	bl	800d59c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b63c:	f3ef 8211 	mrs	r2, BASEPRI
 800b640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b644:	b672      	cpsid	i
 800b646:	f383 8811 	msr	BASEPRI, r3
 800b64a:	f3bf 8f6f 	isb	sy
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	b662      	cpsie	i
 800b654:	61ba      	str	r2, [r7, #24]
 800b656:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b658:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b65a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b65e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b664:	429a      	cmp	r2, r3
 800b666:	d302      	bcc.n	800b66e <xQueueGenericSendFromISR+0xd2>
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	2b02      	cmp	r3, #2
 800b66c:	d12c      	bne.n	800b6c8 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b670:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b674:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b678:	683a      	ldr	r2, [r7, #0]
 800b67a:	68b9      	ldr	r1, [r7, #8]
 800b67c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b67e:	f000 fb69 	bl	800bd54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b682:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800b686:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b68a:	d112      	bne.n	800b6b2 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b68e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b690:	2b00      	cmp	r3, #0
 800b692:	d016      	beq.n	800b6c2 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b696:	3324      	adds	r3, #36	@ 0x24
 800b698:	4618      	mov	r0, r3
 800b69a:	f001 f975 	bl	800c988 <xTaskRemoveFromEventList>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d00e      	beq.n	800b6c2 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d00b      	beq.n	800b6c2 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	601a      	str	r2, [r3, #0]
 800b6b0:	e007      	b.n	800b6c2 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b6b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	b2db      	uxtb	r3, r3
 800b6ba:	b25a      	sxtb	r2, r3
 800b6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800b6c6:	e001      	b.n	800b6cc <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6ce:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b6d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b6d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3738      	adds	r7, #56	@ 0x38
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b08e      	sub	sp, #56	@ 0x38
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d10d      	bne.n	800b712 <xQueueGiveFromISR+0x30>
	__asm volatile
 800b6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6fa:	b672      	cpsid	i
 800b6fc:	f383 8811 	msr	BASEPRI, r3
 800b700:	f3bf 8f6f 	isb	sy
 800b704:	f3bf 8f4f 	dsb	sy
 800b708:	b662      	cpsie	i
 800b70a:	623b      	str	r3, [r7, #32]
}
 800b70c:	bf00      	nop
 800b70e:	bf00      	nop
 800b710:	e7fd      	b.n	800b70e <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00d      	beq.n	800b736 <xQueueGiveFromISR+0x54>
	__asm volatile
 800b71a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b71e:	b672      	cpsid	i
 800b720:	f383 8811 	msr	BASEPRI, r3
 800b724:	f3bf 8f6f 	isb	sy
 800b728:	f3bf 8f4f 	dsb	sy
 800b72c:	b662      	cpsie	i
 800b72e:	61fb      	str	r3, [r7, #28]
}
 800b730:	bf00      	nop
 800b732:	bf00      	nop
 800b734:	e7fd      	b.n	800b732 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d103      	bne.n	800b746 <xQueueGiveFromISR+0x64>
 800b73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d101      	bne.n	800b74a <xQueueGiveFromISR+0x68>
 800b746:	2301      	movs	r3, #1
 800b748:	e000      	b.n	800b74c <xQueueGiveFromISR+0x6a>
 800b74a:	2300      	movs	r3, #0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d10d      	bne.n	800b76c <xQueueGiveFromISR+0x8a>
	__asm volatile
 800b750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b754:	b672      	cpsid	i
 800b756:	f383 8811 	msr	BASEPRI, r3
 800b75a:	f3bf 8f6f 	isb	sy
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	b662      	cpsie	i
 800b764:	61bb      	str	r3, [r7, #24]
}
 800b766:	bf00      	nop
 800b768:	bf00      	nop
 800b76a:	e7fd      	b.n	800b768 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b76c:	f001 ff16 	bl	800d59c <vPortValidateInterruptPriority>
	__asm volatile
 800b770:	f3ef 8211 	mrs	r2, BASEPRI
 800b774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b778:	b672      	cpsid	i
 800b77a:	f383 8811 	msr	BASEPRI, r3
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	f3bf 8f4f 	dsb	sy
 800b786:	b662      	cpsie	i
 800b788:	617a      	str	r2, [r7, #20]
 800b78a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b78c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b78e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b794:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b79a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d22b      	bcs.n	800b7f8 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b7a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b7aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ac:	1c5a      	adds	r2, r3, #1
 800b7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7b0:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b7b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b7b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b7ba:	d112      	bne.n	800b7e2 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b7bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d016      	beq.n	800b7f2 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c6:	3324      	adds	r3, #36	@ 0x24
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f001 f8dd 	bl	800c988 <xTaskRemoveFromEventList>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d00e      	beq.n	800b7f2 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d00b      	beq.n	800b7f2 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	601a      	str	r2, [r3, #0]
 800b7e0:	e007      	b.n	800b7f2 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b7e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	b25a      	sxtb	r2, r3
 800b7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7f6:	e001      	b.n	800b7fc <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7fe:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f383 8811 	msr	BASEPRI, r3
}
 800b806:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3738      	adds	r7, #56	@ 0x38
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
	...

0800b814 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b08c      	sub	sp, #48	@ 0x30
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b820:	2300      	movs	r3, #0
 800b822:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d10d      	bne.n	800b84a <xQueueReceive+0x36>
	__asm volatile
 800b82e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b832:	b672      	cpsid	i
 800b834:	f383 8811 	msr	BASEPRI, r3
 800b838:	f3bf 8f6f 	isb	sy
 800b83c:	f3bf 8f4f 	dsb	sy
 800b840:	b662      	cpsie	i
 800b842:	623b      	str	r3, [r7, #32]
}
 800b844:	bf00      	nop
 800b846:	bf00      	nop
 800b848:	e7fd      	b.n	800b846 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d103      	bne.n	800b858 <xQueueReceive+0x44>
 800b850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b854:	2b00      	cmp	r3, #0
 800b856:	d101      	bne.n	800b85c <xQueueReceive+0x48>
 800b858:	2301      	movs	r3, #1
 800b85a:	e000      	b.n	800b85e <xQueueReceive+0x4a>
 800b85c:	2300      	movs	r3, #0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d10d      	bne.n	800b87e <xQueueReceive+0x6a>
	__asm volatile
 800b862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b866:	b672      	cpsid	i
 800b868:	f383 8811 	msr	BASEPRI, r3
 800b86c:	f3bf 8f6f 	isb	sy
 800b870:	f3bf 8f4f 	dsb	sy
 800b874:	b662      	cpsie	i
 800b876:	61fb      	str	r3, [r7, #28]
}
 800b878:	bf00      	nop
 800b87a:	bf00      	nop
 800b87c:	e7fd      	b.n	800b87a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b87e:	f001 fa51 	bl	800cd24 <xTaskGetSchedulerState>
 800b882:	4603      	mov	r3, r0
 800b884:	2b00      	cmp	r3, #0
 800b886:	d102      	bne.n	800b88e <xQueueReceive+0x7a>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d101      	bne.n	800b892 <xQueueReceive+0x7e>
 800b88e:	2301      	movs	r3, #1
 800b890:	e000      	b.n	800b894 <xQueueReceive+0x80>
 800b892:	2300      	movs	r3, #0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d10d      	bne.n	800b8b4 <xQueueReceive+0xa0>
	__asm volatile
 800b898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b89c:	b672      	cpsid	i
 800b89e:	f383 8811 	msr	BASEPRI, r3
 800b8a2:	f3bf 8f6f 	isb	sy
 800b8a6:	f3bf 8f4f 	dsb	sy
 800b8aa:	b662      	cpsie	i
 800b8ac:	61bb      	str	r3, [r7, #24]
}
 800b8ae:	bf00      	nop
 800b8b0:	bf00      	nop
 800b8b2:	e7fd      	b.n	800b8b0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b8b4:	f001 fd8a 	bl	800d3cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8bc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d01f      	beq.n	800b904 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b8c4:	68b9      	ldr	r1, [r7, #8]
 800b8c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b8c8:	f000 faae 	bl	800be28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b8cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ce:	1e5a      	subs	r2, r3, #1
 800b8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8d2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8d6:	691b      	ldr	r3, [r3, #16]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d00f      	beq.n	800b8fc <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8de:	3310      	adds	r3, #16
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f001 f851 	bl	800c988 <xTaskRemoveFromEventList>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d007      	beq.n	800b8fc <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b8ec:	4b3c      	ldr	r3, [pc, #240]	@ (800b9e0 <xQueueReceive+0x1cc>)
 800b8ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8f2:	601a      	str	r2, [r3, #0]
 800b8f4:	f3bf 8f4f 	dsb	sy
 800b8f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b8fc:	f001 fd9c 	bl	800d438 <vPortExitCritical>
				return pdPASS;
 800b900:	2301      	movs	r3, #1
 800b902:	e069      	b.n	800b9d8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d103      	bne.n	800b912 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b90a:	f001 fd95 	bl	800d438 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b90e:	2300      	movs	r3, #0
 800b910:	e062      	b.n	800b9d8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b914:	2b00      	cmp	r3, #0
 800b916:	d106      	bne.n	800b926 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b918:	f107 0310 	add.w	r3, r7, #16
 800b91c:	4618      	mov	r0, r3
 800b91e:	f001 f899 	bl	800ca54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b922:	2301      	movs	r3, #1
 800b924:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b926:	f001 fd87 	bl	800d438 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b92a:	f000 fe13 	bl	800c554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b92e:	f001 fd4d 	bl	800d3cc <vPortEnterCritical>
 800b932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b934:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b938:	b25b      	sxtb	r3, r3
 800b93a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b93e:	d103      	bne.n	800b948 <xQueueReceive+0x134>
 800b940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b942:	2200      	movs	r2, #0
 800b944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b94a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b94e:	b25b      	sxtb	r3, r3
 800b950:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b954:	d103      	bne.n	800b95e <xQueueReceive+0x14a>
 800b956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b958:	2200      	movs	r2, #0
 800b95a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b95e:	f001 fd6b 	bl	800d438 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b962:	1d3a      	adds	r2, r7, #4
 800b964:	f107 0310 	add.w	r3, r7, #16
 800b968:	4611      	mov	r1, r2
 800b96a:	4618      	mov	r0, r3
 800b96c:	f001 f888 	bl	800ca80 <xTaskCheckForTimeOut>
 800b970:	4603      	mov	r3, r0
 800b972:	2b00      	cmp	r3, #0
 800b974:	d123      	bne.n	800b9be <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b976:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b978:	f000 face 	bl	800bf18 <prvIsQueueEmpty>
 800b97c:	4603      	mov	r3, r0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d017      	beq.n	800b9b2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b984:	3324      	adds	r3, #36	@ 0x24
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	4611      	mov	r1, r2
 800b98a:	4618      	mov	r0, r3
 800b98c:	f000 ffd4 	bl	800c938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b990:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b992:	f000 fa6f 	bl	800be74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b996:	f000 fdeb 	bl	800c570 <xTaskResumeAll>
 800b99a:	4603      	mov	r3, r0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d189      	bne.n	800b8b4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800b9a0:	4b0f      	ldr	r3, [pc, #60]	@ (800b9e0 <xQueueReceive+0x1cc>)
 800b9a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9a6:	601a      	str	r2, [r3, #0]
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	f3bf 8f6f 	isb	sy
 800b9b0:	e780      	b.n	800b8b4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b9b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9b4:	f000 fa5e 	bl	800be74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b9b8:	f000 fdda 	bl	800c570 <xTaskResumeAll>
 800b9bc:	e77a      	b.n	800b8b4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b9be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9c0:	f000 fa58 	bl	800be74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b9c4:	f000 fdd4 	bl	800c570 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b9c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b9ca:	f000 faa5 	bl	800bf18 <prvIsQueueEmpty>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	f43f af6f 	beq.w	800b8b4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b9d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3730      	adds	r7, #48	@ 0x30
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	e000ed04 	.word	0xe000ed04

0800b9e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b08e      	sub	sp, #56	@ 0x38
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b9fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d10d      	bne.n	800ba1c <xQueueSemaphoreTake+0x38>
	__asm volatile
 800ba00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba04:	b672      	cpsid	i
 800ba06:	f383 8811 	msr	BASEPRI, r3
 800ba0a:	f3bf 8f6f 	isb	sy
 800ba0e:	f3bf 8f4f 	dsb	sy
 800ba12:	b662      	cpsie	i
 800ba14:	623b      	str	r3, [r7, #32]
}
 800ba16:	bf00      	nop
 800ba18:	bf00      	nop
 800ba1a:	e7fd      	b.n	800ba18 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ba1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d00d      	beq.n	800ba40 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800ba24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba28:	b672      	cpsid	i
 800ba2a:	f383 8811 	msr	BASEPRI, r3
 800ba2e:	f3bf 8f6f 	isb	sy
 800ba32:	f3bf 8f4f 	dsb	sy
 800ba36:	b662      	cpsie	i
 800ba38:	61fb      	str	r3, [r7, #28]
}
 800ba3a:	bf00      	nop
 800ba3c:	bf00      	nop
 800ba3e:	e7fd      	b.n	800ba3c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ba40:	f001 f970 	bl	800cd24 <xTaskGetSchedulerState>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d102      	bne.n	800ba50 <xQueueSemaphoreTake+0x6c>
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d101      	bne.n	800ba54 <xQueueSemaphoreTake+0x70>
 800ba50:	2301      	movs	r3, #1
 800ba52:	e000      	b.n	800ba56 <xQueueSemaphoreTake+0x72>
 800ba54:	2300      	movs	r3, #0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d10d      	bne.n	800ba76 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800ba5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba5e:	b672      	cpsid	i
 800ba60:	f383 8811 	msr	BASEPRI, r3
 800ba64:	f3bf 8f6f 	isb	sy
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	b662      	cpsie	i
 800ba6e:	61bb      	str	r3, [r7, #24]
}
 800ba70:	bf00      	nop
 800ba72:	bf00      	nop
 800ba74:	e7fd      	b.n	800ba72 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba76:	f001 fca9 	bl	800d3cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ba7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba7e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ba80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d024      	beq.n	800bad0 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ba86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba88:	1e5a      	subs	r2, r3, #1
 800ba8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba8c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d104      	bne.n	800baa0 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ba96:	f001 fb0f 	bl	800d0b8 <pvTaskIncrementMutexHeldCount>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba9e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800baa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baa2:	691b      	ldr	r3, [r3, #16]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d00f      	beq.n	800bac8 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800baa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800baaa:	3310      	adds	r3, #16
 800baac:	4618      	mov	r0, r3
 800baae:	f000 ff6b 	bl	800c988 <xTaskRemoveFromEventList>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d007      	beq.n	800bac8 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bab8:	4b55      	ldr	r3, [pc, #340]	@ (800bc10 <xQueueSemaphoreTake+0x22c>)
 800baba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800babe:	601a      	str	r2, [r3, #0]
 800bac0:	f3bf 8f4f 	dsb	sy
 800bac4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bac8:	f001 fcb6 	bl	800d438 <vPortExitCritical>
				return pdPASS;
 800bacc:	2301      	movs	r3, #1
 800bace:	e09a      	b.n	800bc06 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d114      	bne.n	800bb00 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d00d      	beq.n	800baf8 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800badc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae0:	b672      	cpsid	i
 800bae2:	f383 8811 	msr	BASEPRI, r3
 800bae6:	f3bf 8f6f 	isb	sy
 800baea:	f3bf 8f4f 	dsb	sy
 800baee:	b662      	cpsie	i
 800baf0:	617b      	str	r3, [r7, #20]
}
 800baf2:	bf00      	nop
 800baf4:	bf00      	nop
 800baf6:	e7fd      	b.n	800baf4 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800baf8:	f001 fc9e 	bl	800d438 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bafc:	2300      	movs	r3, #0
 800bafe:	e082      	b.n	800bc06 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bb00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d106      	bne.n	800bb14 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bb06:	f107 030c 	add.w	r3, r7, #12
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f000 ffa2 	bl	800ca54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bb10:	2301      	movs	r3, #1
 800bb12:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bb14:	f001 fc90 	bl	800d438 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bb18:	f000 fd1c 	bl	800c554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bb1c:	f001 fc56 	bl	800d3cc <vPortEnterCritical>
 800bb20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bb26:	b25b      	sxtb	r3, r3
 800bb28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb2c:	d103      	bne.n	800bb36 <xQueueSemaphoreTake+0x152>
 800bb2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb30:	2200      	movs	r2, #0
 800bb32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bb3c:	b25b      	sxtb	r3, r3
 800bb3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb42:	d103      	bne.n	800bb4c <xQueueSemaphoreTake+0x168>
 800bb44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb46:	2200      	movs	r2, #0
 800bb48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bb4c:	f001 fc74 	bl	800d438 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bb50:	463a      	mov	r2, r7
 800bb52:	f107 030c 	add.w	r3, r7, #12
 800bb56:	4611      	mov	r1, r2
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f000 ff91 	bl	800ca80 <xTaskCheckForTimeOut>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d132      	bne.n	800bbca <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bb66:	f000 f9d7 	bl	800bf18 <prvIsQueueEmpty>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d026      	beq.n	800bbbe <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bb70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d109      	bne.n	800bb8c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800bb78:	f001 fc28 	bl	800d3cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	4618      	mov	r0, r3
 800bb82:	f001 f8ed 	bl	800cd60 <xTaskPriorityInherit>
 800bb86:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800bb88:	f001 fc56 	bl	800d438 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bb8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb8e:	3324      	adds	r3, #36	@ 0x24
 800bb90:	683a      	ldr	r2, [r7, #0]
 800bb92:	4611      	mov	r1, r2
 800bb94:	4618      	mov	r0, r3
 800bb96:	f000 fecf 	bl	800c938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bb9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bb9c:	f000 f96a 	bl	800be74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bba0:	f000 fce6 	bl	800c570 <xTaskResumeAll>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f47f af65 	bne.w	800ba76 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800bbac:	4b18      	ldr	r3, [pc, #96]	@ (800bc10 <xQueueSemaphoreTake+0x22c>)
 800bbae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbb2:	601a      	str	r2, [r3, #0]
 800bbb4:	f3bf 8f4f 	dsb	sy
 800bbb8:	f3bf 8f6f 	isb	sy
 800bbbc:	e75b      	b.n	800ba76 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bbbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bbc0:	f000 f958 	bl	800be74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bbc4:	f000 fcd4 	bl	800c570 <xTaskResumeAll>
 800bbc8:	e755      	b.n	800ba76 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bbca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bbcc:	f000 f952 	bl	800be74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bbd0:	f000 fcce 	bl	800c570 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bbd4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bbd6:	f000 f99f 	bl	800bf18 <prvIsQueueEmpty>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f43f af4a 	beq.w	800ba76 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bbe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d00d      	beq.n	800bc04 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800bbe8:	f001 fbf0 	bl	800d3cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bbec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bbee:	f000 f899 	bl	800bd24 <prvGetDisinheritPriorityAfterTimeout>
 800bbf2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bbf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f001 f9bc 	bl	800cf78 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bc00:	f001 fc1a 	bl	800d438 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bc04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3738      	adds	r7, #56	@ 0x38
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	e000ed04 	.word	0xe000ed04

0800bc14 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b08e      	sub	sp, #56	@ 0x38
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800bc24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10d      	bne.n	800bc46 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800bc2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc2e:	b672      	cpsid	i
 800bc30:	f383 8811 	msr	BASEPRI, r3
 800bc34:	f3bf 8f6f 	isb	sy
 800bc38:	f3bf 8f4f 	dsb	sy
 800bc3c:	b662      	cpsie	i
 800bc3e:	623b      	str	r3, [r7, #32]
}
 800bc40:	bf00      	nop
 800bc42:	bf00      	nop
 800bc44:	e7fd      	b.n	800bc42 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d103      	bne.n	800bc54 <xQueueReceiveFromISR+0x40>
 800bc4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d101      	bne.n	800bc58 <xQueueReceiveFromISR+0x44>
 800bc54:	2301      	movs	r3, #1
 800bc56:	e000      	b.n	800bc5a <xQueueReceiveFromISR+0x46>
 800bc58:	2300      	movs	r3, #0
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d10d      	bne.n	800bc7a <xQueueReceiveFromISR+0x66>
	__asm volatile
 800bc5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc62:	b672      	cpsid	i
 800bc64:	f383 8811 	msr	BASEPRI, r3
 800bc68:	f3bf 8f6f 	isb	sy
 800bc6c:	f3bf 8f4f 	dsb	sy
 800bc70:	b662      	cpsie	i
 800bc72:	61fb      	str	r3, [r7, #28]
}
 800bc74:	bf00      	nop
 800bc76:	bf00      	nop
 800bc78:	e7fd      	b.n	800bc76 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc7a:	f001 fc8f 	bl	800d59c <vPortValidateInterruptPriority>
	__asm volatile
 800bc7e:	f3ef 8211 	mrs	r2, BASEPRI
 800bc82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc86:	b672      	cpsid	i
 800bc88:	f383 8811 	msr	BASEPRI, r3
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	b662      	cpsie	i
 800bc96:	61ba      	str	r2, [r7, #24]
 800bc98:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bc9a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bca2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d02f      	beq.n	800bd0a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bcaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bcb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bcb4:	68b9      	ldr	r1, [r7, #8]
 800bcb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800bcb8:	f000 f8b6 	bl	800be28 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bcbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcbe:	1e5a      	subs	r2, r3, #1
 800bcc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bcc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bcc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bccc:	d112      	bne.n	800bcf4 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd0:	691b      	ldr	r3, [r3, #16]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d016      	beq.n	800bd04 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd8:	3310      	adds	r3, #16
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f000 fe54 	bl	800c988 <xTaskRemoveFromEventList>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d00e      	beq.n	800bd04 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00b      	beq.n	800bd04 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	601a      	str	r2, [r3, #0]
 800bcf2:	e007      	b.n	800bd04 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bcf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	b25a      	sxtb	r2, r3
 800bcfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800bd04:	2301      	movs	r3, #1
 800bd06:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd08:	e001      	b.n	800bd0e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd10:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	f383 8811 	msr	BASEPRI, r3
}
 800bd18:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bd1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3738      	adds	r7, #56	@ 0x38
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bd24:	b480      	push	{r7}
 800bd26:	b085      	sub	sp, #20
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d006      	beq.n	800bd42 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f1c3 0307 	rsb	r3, r3, #7
 800bd3e:	60fb      	str	r3, [r7, #12]
 800bd40:	e001      	b.n	800bd46 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bd42:	2300      	movs	r3, #0
 800bd44:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bd46:	68fb      	ldr	r3, [r7, #12]
	}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3714      	adds	r7, #20
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b086      	sub	sp, #24
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bd60:	2300      	movs	r3, #0
 800bd62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d10d      	bne.n	800bd8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d14d      	bne.n	800be16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	689b      	ldr	r3, [r3, #8]
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f001 f86e 	bl	800ce60 <xTaskPriorityDisinherit>
 800bd84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	609a      	str	r2, [r3, #8]
 800bd8c:	e043      	b.n	800be16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d119      	bne.n	800bdc8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6858      	ldr	r0, [r3, #4]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	68b9      	ldr	r1, [r7, #8]
 800bda0:	f013 f8d1 	bl	801ef46 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	685a      	ldr	r2, [r3, #4]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdac:	441a      	add	r2, r3
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	685a      	ldr	r2, [r3, #4]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	689b      	ldr	r3, [r3, #8]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d32b      	bcc.n	800be16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	605a      	str	r2, [r3, #4]
 800bdc6:	e026      	b.n	800be16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	68d8      	ldr	r0, [r3, #12]
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	68b9      	ldr	r1, [r7, #8]
 800bdd4:	f013 f8b7 	bl	801ef46 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	68da      	ldr	r2, [r3, #12]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bde0:	425b      	negs	r3, r3
 800bde2:	441a      	add	r2, r3
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	68da      	ldr	r2, [r3, #12]
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d207      	bcs.n	800be04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	689a      	ldr	r2, [r3, #8]
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdfc:	425b      	negs	r3, r3
 800bdfe:	441a      	add	r2, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2b02      	cmp	r3, #2
 800be08:	d105      	bne.n	800be16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d002      	beq.n	800be16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	3b01      	subs	r3, #1
 800be14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	1c5a      	adds	r2, r3, #1
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800be1e:	697b      	ldr	r3, [r7, #20]
}
 800be20:	4618      	mov	r0, r3
 800be22:	3718      	adds	r7, #24
 800be24:	46bd      	mov	sp, r7
 800be26:	bd80      	pop	{r7, pc}

0800be28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be36:	2b00      	cmp	r3, #0
 800be38:	d018      	beq.n	800be6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	68da      	ldr	r2, [r3, #12]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be42:	441a      	add	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	68da      	ldr	r2, [r3, #12]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	429a      	cmp	r2, r3
 800be52:	d303      	bcc.n	800be5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	68d9      	ldr	r1, [r3, #12]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be64:	461a      	mov	r2, r3
 800be66:	6838      	ldr	r0, [r7, #0]
 800be68:	f013 f86d 	bl	801ef46 <memcpy>
	}
}
 800be6c:	bf00      	nop
 800be6e:	3708      	adds	r7, #8
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b084      	sub	sp, #16
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800be7c:	f001 faa6 	bl	800d3cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800be86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be88:	e011      	b.n	800beae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d012      	beq.n	800beb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	3324      	adds	r3, #36	@ 0x24
 800be96:	4618      	mov	r0, r3
 800be98:	f000 fd76 	bl	800c988 <xTaskRemoveFromEventList>
 800be9c:	4603      	mov	r3, r0
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d001      	beq.n	800bea6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bea2:	f000 fe55 	bl	800cb50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bea6:	7bfb      	ldrb	r3, [r7, #15]
 800bea8:	3b01      	subs	r3, #1
 800beaa:	b2db      	uxtb	r3, r3
 800beac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800beae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	dce9      	bgt.n	800be8a <prvUnlockQueue+0x16>
 800beb6:	e000      	b.n	800beba <prvUnlockQueue+0x46>
					break;
 800beb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	22ff      	movs	r2, #255	@ 0xff
 800bebe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800bec2:	f001 fab9 	bl	800d438 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bec6:	f001 fa81 	bl	800d3cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bed0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bed2:	e011      	b.n	800bef8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	691b      	ldr	r3, [r3, #16]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d012      	beq.n	800bf02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	3310      	adds	r3, #16
 800bee0:	4618      	mov	r0, r3
 800bee2:	f000 fd51 	bl	800c988 <xTaskRemoveFromEventList>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d001      	beq.n	800bef0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800beec:	f000 fe30 	bl	800cb50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bef0:	7bbb      	ldrb	r3, [r7, #14]
 800bef2:	3b01      	subs	r3, #1
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bef8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800befc:	2b00      	cmp	r3, #0
 800befe:	dce9      	bgt.n	800bed4 <prvUnlockQueue+0x60>
 800bf00:	e000      	b.n	800bf04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bf02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	22ff      	movs	r2, #255	@ 0xff
 800bf08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800bf0c:	f001 fa94 	bl	800d438 <vPortExitCritical>
}
 800bf10:	bf00      	nop
 800bf12:	3710      	adds	r7, #16
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}

0800bf18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bf20:	f001 fa54 	bl	800d3cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d102      	bne.n	800bf32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	60fb      	str	r3, [r7, #12]
 800bf30:	e001      	b.n	800bf36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bf32:	2300      	movs	r3, #0
 800bf34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bf36:	f001 fa7f 	bl	800d438 <vPortExitCritical>

	return xReturn;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bf4c:	f001 fa3e 	bl	800d3cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf58:	429a      	cmp	r2, r3
 800bf5a:	d102      	bne.n	800bf62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	60fb      	str	r3, [r7, #12]
 800bf60:	e001      	b.n	800bf66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bf62:	2300      	movs	r3, #0
 800bf64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bf66:	f001 fa67 	bl	800d438 <vPortExitCritical>

	return xReturn;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3710      	adds	r7, #16
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}

0800bf74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b08e      	sub	sp, #56	@ 0x38
 800bf78:	af04      	add	r7, sp, #16
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	60b9      	str	r1, [r7, #8]
 800bf7e:	607a      	str	r2, [r7, #4]
 800bf80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bf82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d10d      	bne.n	800bfa4 <xTaskCreateStatic+0x30>
	__asm volatile
 800bf88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf8c:	b672      	cpsid	i
 800bf8e:	f383 8811 	msr	BASEPRI, r3
 800bf92:	f3bf 8f6f 	isb	sy
 800bf96:	f3bf 8f4f 	dsb	sy
 800bf9a:	b662      	cpsie	i
 800bf9c:	623b      	str	r3, [r7, #32]
}
 800bf9e:	bf00      	nop
 800bfa0:	bf00      	nop
 800bfa2:	e7fd      	b.n	800bfa0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800bfa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d10d      	bne.n	800bfc6 <xTaskCreateStatic+0x52>
	__asm volatile
 800bfaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfae:	b672      	cpsid	i
 800bfb0:	f383 8811 	msr	BASEPRI, r3
 800bfb4:	f3bf 8f6f 	isb	sy
 800bfb8:	f3bf 8f4f 	dsb	sy
 800bfbc:	b662      	cpsie	i
 800bfbe:	61fb      	str	r3, [r7, #28]
}
 800bfc0:	bf00      	nop
 800bfc2:	bf00      	nop
 800bfc4:	e7fd      	b.n	800bfc2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bfc6:	23a0      	movs	r3, #160	@ 0xa0
 800bfc8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	2ba0      	cmp	r3, #160	@ 0xa0
 800bfce:	d00d      	beq.n	800bfec <xTaskCreateStatic+0x78>
	__asm volatile
 800bfd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfd4:	b672      	cpsid	i
 800bfd6:	f383 8811 	msr	BASEPRI, r3
 800bfda:	f3bf 8f6f 	isb	sy
 800bfde:	f3bf 8f4f 	dsb	sy
 800bfe2:	b662      	cpsie	i
 800bfe4:	61bb      	str	r3, [r7, #24]
}
 800bfe6:	bf00      	nop
 800bfe8:	bf00      	nop
 800bfea:	e7fd      	b.n	800bfe8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bfec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bfee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d01e      	beq.n	800c032 <xTaskCreateStatic+0xbe>
 800bff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d01b      	beq.n	800c032 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bffc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c000:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c002:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c006:	2202      	movs	r2, #2
 800c008:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c00c:	2300      	movs	r3, #0
 800c00e:	9303      	str	r3, [sp, #12]
 800c010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c012:	9302      	str	r3, [sp, #8]
 800c014:	f107 0314 	add.w	r3, r7, #20
 800c018:	9301      	str	r3, [sp, #4]
 800c01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c01c:	9300      	str	r3, [sp, #0]
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	687a      	ldr	r2, [r7, #4]
 800c022:	68b9      	ldr	r1, [r7, #8]
 800c024:	68f8      	ldr	r0, [r7, #12]
 800c026:	f000 f851 	bl	800c0cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c02a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c02c:	f000 f8f0 	bl	800c210 <prvAddNewTaskToReadyList>
 800c030:	e001      	b.n	800c036 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800c032:	2300      	movs	r3, #0
 800c034:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c036:	697b      	ldr	r3, [r7, #20]
	}
 800c038:	4618      	mov	r0, r3
 800c03a:	3728      	adds	r7, #40	@ 0x28
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c040:	b580      	push	{r7, lr}
 800c042:	b08c      	sub	sp, #48	@ 0x30
 800c044:	af04      	add	r7, sp, #16
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	603b      	str	r3, [r7, #0]
 800c04c:	4613      	mov	r3, r2
 800c04e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c050:	88fb      	ldrh	r3, [r7, #6]
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	4618      	mov	r0, r3
 800c056:	f001 fae7 	bl	800d628 <pvPortMalloc>
 800c05a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d00e      	beq.n	800c080 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c062:	20a0      	movs	r0, #160	@ 0xa0
 800c064:	f001 fae0 	bl	800d628 <pvPortMalloc>
 800c068:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c06a:	69fb      	ldr	r3, [r7, #28]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d003      	beq.n	800c078 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c070:	69fb      	ldr	r3, [r7, #28]
 800c072:	697a      	ldr	r2, [r7, #20]
 800c074:	631a      	str	r2, [r3, #48]	@ 0x30
 800c076:	e005      	b.n	800c084 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c078:	6978      	ldr	r0, [r7, #20]
 800c07a:	f001 fba3 	bl	800d7c4 <vPortFree>
 800c07e:	e001      	b.n	800c084 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c080:	2300      	movs	r3, #0
 800c082:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c084:	69fb      	ldr	r3, [r7, #28]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d017      	beq.n	800c0ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c08a:	69fb      	ldr	r3, [r7, #28]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c092:	88fa      	ldrh	r2, [r7, #6]
 800c094:	2300      	movs	r3, #0
 800c096:	9303      	str	r3, [sp, #12]
 800c098:	69fb      	ldr	r3, [r7, #28]
 800c09a:	9302      	str	r3, [sp, #8]
 800c09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c09e:	9301      	str	r3, [sp, #4]
 800c0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a2:	9300      	str	r3, [sp, #0]
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	68b9      	ldr	r1, [r7, #8]
 800c0a8:	68f8      	ldr	r0, [r7, #12]
 800c0aa:	f000 f80f 	bl	800c0cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c0ae:	69f8      	ldr	r0, [r7, #28]
 800c0b0:	f000 f8ae 	bl	800c210 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	61bb      	str	r3, [r7, #24]
 800c0b8:	e002      	b.n	800c0c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c0ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c0be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c0c0:	69bb      	ldr	r3, [r7, #24]
	}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3720      	adds	r7, #32
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
	...

0800c0cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b088      	sub	sp, #32
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	60b9      	str	r1, [r7, #8]
 800c0d6:	607a      	str	r2, [r7, #4]
 800c0d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c0de:	6879      	ldr	r1, [r7, #4]
 800c0e0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c0e4:	440b      	add	r3, r1
 800c0e6:	009b      	lsls	r3, r3, #2
 800c0e8:	4413      	add	r3, r2
 800c0ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c0ec:	69bb      	ldr	r3, [r7, #24]
 800c0ee:	f023 0307 	bic.w	r3, r3, #7
 800c0f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	f003 0307 	and.w	r3, r3, #7
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00d      	beq.n	800c11a <prvInitialiseNewTask+0x4e>
	__asm volatile
 800c0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c102:	b672      	cpsid	i
 800c104:	f383 8811 	msr	BASEPRI, r3
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	b662      	cpsie	i
 800c112:	617b      	str	r3, [r7, #20]
}
 800c114:	bf00      	nop
 800c116:	bf00      	nop
 800c118:	e7fd      	b.n	800c116 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d01f      	beq.n	800c160 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c120:	2300      	movs	r3, #0
 800c122:	61fb      	str	r3, [r7, #28]
 800c124:	e012      	b.n	800c14c <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c126:	68ba      	ldr	r2, [r7, #8]
 800c128:	69fb      	ldr	r3, [r7, #28]
 800c12a:	4413      	add	r3, r2
 800c12c:	7819      	ldrb	r1, [r3, #0]
 800c12e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c130:	69fb      	ldr	r3, [r7, #28]
 800c132:	4413      	add	r3, r2
 800c134:	3334      	adds	r3, #52	@ 0x34
 800c136:	460a      	mov	r2, r1
 800c138:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c13a:	68ba      	ldr	r2, [r7, #8]
 800c13c:	69fb      	ldr	r3, [r7, #28]
 800c13e:	4413      	add	r3, r2
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d006      	beq.n	800c154 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c146:	69fb      	ldr	r3, [r7, #28]
 800c148:	3301      	adds	r3, #1
 800c14a:	61fb      	str	r3, [r7, #28]
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	2b0f      	cmp	r3, #15
 800c150:	d9e9      	bls.n	800c126 <prvInitialiseNewTask+0x5a>
 800c152:	e000      	b.n	800c156 <prvInitialiseNewTask+0x8a>
			{
				break;
 800c154:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c158:	2200      	movs	r2, #0
 800c15a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c15e:	e003      	b.n	800c168 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c162:	2200      	movs	r2, #0
 800c164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c16a:	2b06      	cmp	r3, #6
 800c16c:	d901      	bls.n	800c172 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c16e:	2306      	movs	r3, #6
 800c170:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c174:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c176:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c17a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c17c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c180:	2200      	movs	r2, #0
 800c182:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c186:	3304      	adds	r3, #4
 800c188:	4618      	mov	r0, r3
 800c18a:	f7fe fec7 	bl	800af1c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c190:	3318      	adds	r3, #24
 800c192:	4618      	mov	r0, r3
 800c194:	f7fe fec2 	bl	800af1c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c19a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c19c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a0:	f1c3 0207 	rsb	r2, r3, #7
 800c1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1a6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1ac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1c0:	334c      	adds	r3, #76	@ 0x4c
 800c1c2:	224c      	movs	r2, #76	@ 0x4c
 800c1c4:	2100      	movs	r1, #0
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f012 fdda 	bl	801ed80 <memset>
 800c1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ce:	4a0d      	ldr	r2, [pc, #52]	@ (800c204 <prvInitialiseNewTask+0x138>)
 800c1d0:	651a      	str	r2, [r3, #80]	@ 0x50
 800c1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d4:	4a0c      	ldr	r2, [pc, #48]	@ (800c208 <prvInitialiseNewTask+0x13c>)
 800c1d6:	655a      	str	r2, [r3, #84]	@ 0x54
 800c1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1da:	4a0c      	ldr	r2, [pc, #48]	@ (800c20c <prvInitialiseNewTask+0x140>)
 800c1dc:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c1de:	683a      	ldr	r2, [r7, #0]
 800c1e0:	68f9      	ldr	r1, [r7, #12]
 800c1e2:	69b8      	ldr	r0, [r7, #24]
 800c1e4:	f000 ffe2 	bl	800d1ac <pxPortInitialiseStack>
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c1ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d002      	beq.n	800c1fa <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c1fa:	bf00      	nop
 800c1fc:	3720      	adds	r7, #32
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	20006304 	.word	0x20006304
 800c208:	2000636c 	.word	0x2000636c
 800c20c:	200063d4 	.word	0x200063d4

0800c210 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c218:	f001 f8d8 	bl	800d3cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c21c:	4b2a      	ldr	r3, [pc, #168]	@ (800c2c8 <prvAddNewTaskToReadyList+0xb8>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	3301      	adds	r3, #1
 800c222:	4a29      	ldr	r2, [pc, #164]	@ (800c2c8 <prvAddNewTaskToReadyList+0xb8>)
 800c224:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c226:	4b29      	ldr	r3, [pc, #164]	@ (800c2cc <prvAddNewTaskToReadyList+0xbc>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d109      	bne.n	800c242 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c22e:	4a27      	ldr	r2, [pc, #156]	@ (800c2cc <prvAddNewTaskToReadyList+0xbc>)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c234:	4b24      	ldr	r3, [pc, #144]	@ (800c2c8 <prvAddNewTaskToReadyList+0xb8>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2b01      	cmp	r3, #1
 800c23a:	d110      	bne.n	800c25e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c23c:	f000 fcac 	bl	800cb98 <prvInitialiseTaskLists>
 800c240:	e00d      	b.n	800c25e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c242:	4b23      	ldr	r3, [pc, #140]	@ (800c2d0 <prvAddNewTaskToReadyList+0xc0>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d109      	bne.n	800c25e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c24a:	4b20      	ldr	r3, [pc, #128]	@ (800c2cc <prvAddNewTaskToReadyList+0xbc>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c254:	429a      	cmp	r2, r3
 800c256:	d802      	bhi.n	800c25e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c258:	4a1c      	ldr	r2, [pc, #112]	@ (800c2cc <prvAddNewTaskToReadyList+0xbc>)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c25e:	4b1d      	ldr	r3, [pc, #116]	@ (800c2d4 <prvAddNewTaskToReadyList+0xc4>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	3301      	adds	r3, #1
 800c264:	4a1b      	ldr	r2, [pc, #108]	@ (800c2d4 <prvAddNewTaskToReadyList+0xc4>)
 800c266:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c26c:	2201      	movs	r2, #1
 800c26e:	409a      	lsls	r2, r3
 800c270:	4b19      	ldr	r3, [pc, #100]	@ (800c2d8 <prvAddNewTaskToReadyList+0xc8>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4313      	orrs	r3, r2
 800c276:	4a18      	ldr	r2, [pc, #96]	@ (800c2d8 <prvAddNewTaskToReadyList+0xc8>)
 800c278:	6013      	str	r3, [r2, #0]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c27e:	4613      	mov	r3, r2
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	4413      	add	r3, r2
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	4a15      	ldr	r2, [pc, #84]	@ (800c2dc <prvAddNewTaskToReadyList+0xcc>)
 800c288:	441a      	add	r2, r3
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	3304      	adds	r3, #4
 800c28e:	4619      	mov	r1, r3
 800c290:	4610      	mov	r0, r2
 800c292:	f7fe fe50 	bl	800af36 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c296:	f001 f8cf 	bl	800d438 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c29a:	4b0d      	ldr	r3, [pc, #52]	@ (800c2d0 <prvAddNewTaskToReadyList+0xc0>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00e      	beq.n	800c2c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c2a2:	4b0a      	ldr	r3, [pc, #40]	@ (800c2cc <prvAddNewTaskToReadyList+0xbc>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d207      	bcs.n	800c2c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c2b0:	4b0b      	ldr	r3, [pc, #44]	@ (800c2e0 <prvAddNewTaskToReadyList+0xd0>)
 800c2b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2b6:	601a      	str	r2, [r3, #0]
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c2c0:	bf00      	nop
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	20000b00 	.word	0x20000b00
 800c2cc:	20000a00 	.word	0x20000a00
 800c2d0:	20000b0c 	.word	0x20000b0c
 800c2d4:	20000b1c 	.word	0x20000b1c
 800c2d8:	20000b08 	.word	0x20000b08
 800c2dc:	20000a04 	.word	0x20000a04
 800c2e0:	e000ed04 	.word	0xe000ed04

0800c2e4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b084      	sub	sp, #16
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c2ec:	f001 f86e 	bl	800d3cc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d102      	bne.n	800c2fc <vTaskDelete+0x18>
 800c2f6:	4b3a      	ldr	r3, [pc, #232]	@ (800c3e0 <vTaskDelete+0xfc>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	e000      	b.n	800c2fe <vTaskDelete+0x1a>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	3304      	adds	r3, #4
 800c304:	4618      	mov	r0, r3
 800c306:	f7fe fe73 	bl	800aff0 <uxListRemove>
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d115      	bne.n	800c33c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c314:	4933      	ldr	r1, [pc, #204]	@ (800c3e4 <vTaskDelete+0x100>)
 800c316:	4613      	mov	r3, r2
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	4413      	add	r3, r2
 800c31c:	009b      	lsls	r3, r3, #2
 800c31e:	440b      	add	r3, r1
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d10a      	bne.n	800c33c <vTaskDelete+0x58>
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c32a:	2201      	movs	r2, #1
 800c32c:	fa02 f303 	lsl.w	r3, r2, r3
 800c330:	43da      	mvns	r2, r3
 800c332:	4b2d      	ldr	r3, [pc, #180]	@ (800c3e8 <vTaskDelete+0x104>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4013      	ands	r3, r2
 800c338:	4a2b      	ldr	r2, [pc, #172]	@ (800c3e8 <vTaskDelete+0x104>)
 800c33a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c340:	2b00      	cmp	r3, #0
 800c342:	d004      	beq.n	800c34e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	3318      	adds	r3, #24
 800c348:	4618      	mov	r0, r3
 800c34a:	f7fe fe51 	bl	800aff0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c34e:	4b27      	ldr	r3, [pc, #156]	@ (800c3ec <vTaskDelete+0x108>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	3301      	adds	r3, #1
 800c354:	4a25      	ldr	r2, [pc, #148]	@ (800c3ec <vTaskDelete+0x108>)
 800c356:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c358:	4b21      	ldr	r3, [pc, #132]	@ (800c3e0 <vTaskDelete+0xfc>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	68fa      	ldr	r2, [r7, #12]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d10b      	bne.n	800c37a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	3304      	adds	r3, #4
 800c366:	4619      	mov	r1, r3
 800c368:	4821      	ldr	r0, [pc, #132]	@ (800c3f0 <vTaskDelete+0x10c>)
 800c36a:	f7fe fde4 	bl	800af36 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c36e:	4b21      	ldr	r3, [pc, #132]	@ (800c3f4 <vTaskDelete+0x110>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	3301      	adds	r3, #1
 800c374:	4a1f      	ldr	r2, [pc, #124]	@ (800c3f4 <vTaskDelete+0x110>)
 800c376:	6013      	str	r3, [r2, #0]
 800c378:	e009      	b.n	800c38e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c37a:	4b1f      	ldr	r3, [pc, #124]	@ (800c3f8 <vTaskDelete+0x114>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	3b01      	subs	r3, #1
 800c380:	4a1d      	ldr	r2, [pc, #116]	@ (800c3f8 <vTaskDelete+0x114>)
 800c382:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800c384:	68f8      	ldr	r0, [r7, #12]
 800c386:	f000 fc75 	bl	800cc74 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c38a:	f000 fcab 	bl	800cce4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800c38e:	f001 f853 	bl	800d438 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c392:	4b1a      	ldr	r3, [pc, #104]	@ (800c3fc <vTaskDelete+0x118>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d01e      	beq.n	800c3d8 <vTaskDelete+0xf4>
		{
			if( pxTCB == pxCurrentTCB )
 800c39a:	4b11      	ldr	r3, [pc, #68]	@ (800c3e0 <vTaskDelete+0xfc>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d119      	bne.n	800c3d8 <vTaskDelete+0xf4>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c3a4:	4b16      	ldr	r3, [pc, #88]	@ (800c400 <vTaskDelete+0x11c>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d00d      	beq.n	800c3c8 <vTaskDelete+0xe4>
	__asm volatile
 800c3ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3b0:	b672      	cpsid	i
 800c3b2:	f383 8811 	msr	BASEPRI, r3
 800c3b6:	f3bf 8f6f 	isb	sy
 800c3ba:	f3bf 8f4f 	dsb	sy
 800c3be:	b662      	cpsie	i
 800c3c0:	60bb      	str	r3, [r7, #8]
}
 800c3c2:	bf00      	nop
 800c3c4:	bf00      	nop
 800c3c6:	e7fd      	b.n	800c3c4 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800c3c8:	4b0e      	ldr	r3, [pc, #56]	@ (800c404 <vTaskDelete+0x120>)
 800c3ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3ce:	601a      	str	r2, [r3, #0]
 800c3d0:	f3bf 8f4f 	dsb	sy
 800c3d4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c3d8:	bf00      	nop
 800c3da:	3710      	adds	r7, #16
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	20000a00 	.word	0x20000a00
 800c3e4:	20000a04 	.word	0x20000a04
 800c3e8:	20000b08 	.word	0x20000b08
 800c3ec:	20000b1c 	.word	0x20000b1c
 800c3f0:	20000ad4 	.word	0x20000ad4
 800c3f4:	20000ae8 	.word	0x20000ae8
 800c3f8:	20000b00 	.word	0x20000b00
 800c3fc:	20000b0c 	.word	0x20000b0c
 800c400:	20000b28 	.word	0x20000b28
 800c404:	e000ed04 	.word	0xe000ed04

0800c408 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b084      	sub	sp, #16
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c410:	2300      	movs	r3, #0
 800c412:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d01a      	beq.n	800c450 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c41a:	4b15      	ldr	r3, [pc, #84]	@ (800c470 <vTaskDelay+0x68>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d00d      	beq.n	800c43e <vTaskDelay+0x36>
	__asm volatile
 800c422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c426:	b672      	cpsid	i
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	b662      	cpsie	i
 800c436:	60bb      	str	r3, [r7, #8]
}
 800c438:	bf00      	nop
 800c43a:	bf00      	nop
 800c43c:	e7fd      	b.n	800c43a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c43e:	f000 f889 	bl	800c554 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c442:	2100      	movs	r1, #0
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f000 fe4b 	bl	800d0e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c44a:	f000 f891 	bl	800c570 <xTaskResumeAll>
 800c44e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d107      	bne.n	800c466 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800c456:	4b07      	ldr	r3, [pc, #28]	@ (800c474 <vTaskDelay+0x6c>)
 800c458:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c45c:	601a      	str	r2, [r3, #0]
 800c45e:	f3bf 8f4f 	dsb	sy
 800c462:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c466:	bf00      	nop
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	20000b28 	.word	0x20000b28
 800c474:	e000ed04 	.word	0xe000ed04

0800c478 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b08a      	sub	sp, #40	@ 0x28
 800c47c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c47e:	2300      	movs	r3, #0
 800c480:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c482:	2300      	movs	r3, #0
 800c484:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c486:	463a      	mov	r2, r7
 800c488:	1d39      	adds	r1, r7, #4
 800c48a:	f107 0308 	add.w	r3, r7, #8
 800c48e:	4618      	mov	r0, r3
 800c490:	f7f4 f8c4 	bl	800061c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c494:	6839      	ldr	r1, [r7, #0]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	68ba      	ldr	r2, [r7, #8]
 800c49a:	9202      	str	r2, [sp, #8]
 800c49c:	9301      	str	r3, [sp, #4]
 800c49e:	2300      	movs	r3, #0
 800c4a0:	9300      	str	r3, [sp, #0]
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	460a      	mov	r2, r1
 800c4a6:	4923      	ldr	r1, [pc, #140]	@ (800c534 <vTaskStartScheduler+0xbc>)
 800c4a8:	4823      	ldr	r0, [pc, #140]	@ (800c538 <vTaskStartScheduler+0xc0>)
 800c4aa:	f7ff fd63 	bl	800bf74 <xTaskCreateStatic>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	4a22      	ldr	r2, [pc, #136]	@ (800c53c <vTaskStartScheduler+0xc4>)
 800c4b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c4b4:	4b21      	ldr	r3, [pc, #132]	@ (800c53c <vTaskStartScheduler+0xc4>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d002      	beq.n	800c4c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	617b      	str	r3, [r7, #20]
 800c4c0:	e001      	b.n	800c4c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d11d      	bne.n	800c508 <vTaskStartScheduler+0x90>
	__asm volatile
 800c4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d0:	b672      	cpsid	i
 800c4d2:	f383 8811 	msr	BASEPRI, r3
 800c4d6:	f3bf 8f6f 	isb	sy
 800c4da:	f3bf 8f4f 	dsb	sy
 800c4de:	b662      	cpsie	i
 800c4e0:	613b      	str	r3, [r7, #16]
}
 800c4e2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c4e4:	4b16      	ldr	r3, [pc, #88]	@ (800c540 <vTaskStartScheduler+0xc8>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	334c      	adds	r3, #76	@ 0x4c
 800c4ea:	4a16      	ldr	r2, [pc, #88]	@ (800c544 <vTaskStartScheduler+0xcc>)
 800c4ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c4ee:	4b16      	ldr	r3, [pc, #88]	@ (800c548 <vTaskStartScheduler+0xd0>)
 800c4f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c4f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c4f6:	4b15      	ldr	r3, [pc, #84]	@ (800c54c <vTaskStartScheduler+0xd4>)
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c4fc:	4b14      	ldr	r3, [pc, #80]	@ (800c550 <vTaskStartScheduler+0xd8>)
 800c4fe:	2200      	movs	r2, #0
 800c500:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c502:	f000 fee5 	bl	800d2d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c506:	e011      	b.n	800c52c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c50e:	d10d      	bne.n	800c52c <vTaskStartScheduler+0xb4>
	__asm volatile
 800c510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c514:	b672      	cpsid	i
 800c516:	f383 8811 	msr	BASEPRI, r3
 800c51a:	f3bf 8f6f 	isb	sy
 800c51e:	f3bf 8f4f 	dsb	sy
 800c522:	b662      	cpsie	i
 800c524:	60fb      	str	r3, [r7, #12]
}
 800c526:	bf00      	nop
 800c528:	bf00      	nop
 800c52a:	e7fd      	b.n	800c528 <vTaskStartScheduler+0xb0>
}
 800c52c:	bf00      	nop
 800c52e:	3718      	adds	r7, #24
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}
 800c534:	0801fdb4 	.word	0x0801fdb4
 800c538:	0800cb69 	.word	0x0800cb69
 800c53c:	20000b24 	.word	0x20000b24
 800c540:	20000a00 	.word	0x20000a00
 800c544:	20000148 	.word	0x20000148
 800c548:	20000b20 	.word	0x20000b20
 800c54c:	20000b0c 	.word	0x20000b0c
 800c550:	20000b04 	.word	0x20000b04

0800c554 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c554:	b480      	push	{r7}
 800c556:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c558:	4b04      	ldr	r3, [pc, #16]	@ (800c56c <vTaskSuspendAll+0x18>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	3301      	adds	r3, #1
 800c55e:	4a03      	ldr	r2, [pc, #12]	@ (800c56c <vTaskSuspendAll+0x18>)
 800c560:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c562:	bf00      	nop
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr
 800c56c:	20000b28 	.word	0x20000b28

0800c570 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c576:	2300      	movs	r3, #0
 800c578:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c57a:	2300      	movs	r3, #0
 800c57c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c57e:	4b43      	ldr	r3, [pc, #268]	@ (800c68c <xTaskResumeAll+0x11c>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d10d      	bne.n	800c5a2 <xTaskResumeAll+0x32>
	__asm volatile
 800c586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c58a:	b672      	cpsid	i
 800c58c:	f383 8811 	msr	BASEPRI, r3
 800c590:	f3bf 8f6f 	isb	sy
 800c594:	f3bf 8f4f 	dsb	sy
 800c598:	b662      	cpsie	i
 800c59a:	603b      	str	r3, [r7, #0]
}
 800c59c:	bf00      	nop
 800c59e:	bf00      	nop
 800c5a0:	e7fd      	b.n	800c59e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c5a2:	f000 ff13 	bl	800d3cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c5a6:	4b39      	ldr	r3, [pc, #228]	@ (800c68c <xTaskResumeAll+0x11c>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	3b01      	subs	r3, #1
 800c5ac:	4a37      	ldr	r2, [pc, #220]	@ (800c68c <xTaskResumeAll+0x11c>)
 800c5ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5b0:	4b36      	ldr	r3, [pc, #216]	@ (800c68c <xTaskResumeAll+0x11c>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d161      	bne.n	800c67c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c5b8:	4b35      	ldr	r3, [pc, #212]	@ (800c690 <xTaskResumeAll+0x120>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d05d      	beq.n	800c67c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c5c0:	e02e      	b.n	800c620 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c5c2:	4b34      	ldr	r3, [pc, #208]	@ (800c694 <xTaskResumeAll+0x124>)
 800c5c4:	68db      	ldr	r3, [r3, #12]
 800c5c6:	68db      	ldr	r3, [r3, #12]
 800c5c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	3318      	adds	r3, #24
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7fe fd0e 	bl	800aff0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	3304      	adds	r3, #4
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f7fe fd09 	bl	800aff0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	409a      	lsls	r2, r3
 800c5e6:	4b2c      	ldr	r3, [pc, #176]	@ (800c698 <xTaskResumeAll+0x128>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	4a2a      	ldr	r2, [pc, #168]	@ (800c698 <xTaskResumeAll+0x128>)
 800c5ee:	6013      	str	r3, [r2, #0]
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5f4:	4613      	mov	r3, r2
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	4413      	add	r3, r2
 800c5fa:	009b      	lsls	r3, r3, #2
 800c5fc:	4a27      	ldr	r2, [pc, #156]	@ (800c69c <xTaskResumeAll+0x12c>)
 800c5fe:	441a      	add	r2, r3
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	3304      	adds	r3, #4
 800c604:	4619      	mov	r1, r3
 800c606:	4610      	mov	r0, r2
 800c608:	f7fe fc95 	bl	800af36 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c610:	4b23      	ldr	r3, [pc, #140]	@ (800c6a0 <xTaskResumeAll+0x130>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c616:	429a      	cmp	r2, r3
 800c618:	d302      	bcc.n	800c620 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800c61a:	4b22      	ldr	r3, [pc, #136]	@ (800c6a4 <xTaskResumeAll+0x134>)
 800c61c:	2201      	movs	r2, #1
 800c61e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c620:	4b1c      	ldr	r3, [pc, #112]	@ (800c694 <xTaskResumeAll+0x124>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d1cc      	bne.n	800c5c2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d001      	beq.n	800c632 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c62e:	f000 fb59 	bl	800cce4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c632:	4b1d      	ldr	r3, [pc, #116]	@ (800c6a8 <xTaskResumeAll+0x138>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d010      	beq.n	800c660 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c63e:	f000 f859 	bl	800c6f4 <xTaskIncrementTick>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d002      	beq.n	800c64e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800c648:	4b16      	ldr	r3, [pc, #88]	@ (800c6a4 <xTaskResumeAll+0x134>)
 800c64a:	2201      	movs	r2, #1
 800c64c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	3b01      	subs	r3, #1
 800c652:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d1f1      	bne.n	800c63e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800c65a:	4b13      	ldr	r3, [pc, #76]	@ (800c6a8 <xTaskResumeAll+0x138>)
 800c65c:	2200      	movs	r2, #0
 800c65e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c660:	4b10      	ldr	r3, [pc, #64]	@ (800c6a4 <xTaskResumeAll+0x134>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d009      	beq.n	800c67c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c668:	2301      	movs	r3, #1
 800c66a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c66c:	4b0f      	ldr	r3, [pc, #60]	@ (800c6ac <xTaskResumeAll+0x13c>)
 800c66e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c672:	601a      	str	r2, [r3, #0]
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c67c:	f000 fedc 	bl	800d438 <vPortExitCritical>

	return xAlreadyYielded;
 800c680:	68bb      	ldr	r3, [r7, #8]
}
 800c682:	4618      	mov	r0, r3
 800c684:	3710      	adds	r7, #16
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	20000b28 	.word	0x20000b28
 800c690:	20000b00 	.word	0x20000b00
 800c694:	20000ac0 	.word	0x20000ac0
 800c698:	20000b08 	.word	0x20000b08
 800c69c:	20000a04 	.word	0x20000a04
 800c6a0:	20000a00 	.word	0x20000a00
 800c6a4:	20000b14 	.word	0x20000b14
 800c6a8:	20000b10 	.word	0x20000b10
 800c6ac:	e000ed04 	.word	0xe000ed04

0800c6b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b083      	sub	sp, #12
 800c6b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c6b6:	4b05      	ldr	r3, [pc, #20]	@ (800c6cc <xTaskGetTickCount+0x1c>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c6bc:	687b      	ldr	r3, [r7, #4]
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	370c      	adds	r7, #12
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop
 800c6cc:	20000b04 	.word	0x20000b04

0800c6d0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c6d6:	f000 ff61 	bl	800d59c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c6da:	2300      	movs	r3, #0
 800c6dc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c6de:	4b04      	ldr	r3, [pc, #16]	@ (800c6f0 <xTaskGetTickCountFromISR+0x20>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c6e4:	683b      	ldr	r3, [r7, #0]
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3708      	adds	r7, #8
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	20000b04 	.word	0x20000b04

0800c6f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b086      	sub	sp, #24
 800c6f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6fe:	4b50      	ldr	r3, [pc, #320]	@ (800c840 <xTaskIncrementTick+0x14c>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	f040 808b 	bne.w	800c81e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c708:	4b4e      	ldr	r3, [pc, #312]	@ (800c844 <xTaskIncrementTick+0x150>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	3301      	adds	r3, #1
 800c70e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c710:	4a4c      	ldr	r2, [pc, #304]	@ (800c844 <xTaskIncrementTick+0x150>)
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d123      	bne.n	800c764 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800c71c:	4b4a      	ldr	r3, [pc, #296]	@ (800c848 <xTaskIncrementTick+0x154>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d00d      	beq.n	800c742 <xTaskIncrementTick+0x4e>
	__asm volatile
 800c726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c72a:	b672      	cpsid	i
 800c72c:	f383 8811 	msr	BASEPRI, r3
 800c730:	f3bf 8f6f 	isb	sy
 800c734:	f3bf 8f4f 	dsb	sy
 800c738:	b662      	cpsie	i
 800c73a:	603b      	str	r3, [r7, #0]
}
 800c73c:	bf00      	nop
 800c73e:	bf00      	nop
 800c740:	e7fd      	b.n	800c73e <xTaskIncrementTick+0x4a>
 800c742:	4b41      	ldr	r3, [pc, #260]	@ (800c848 <xTaskIncrementTick+0x154>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	60fb      	str	r3, [r7, #12]
 800c748:	4b40      	ldr	r3, [pc, #256]	@ (800c84c <xTaskIncrementTick+0x158>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4a3e      	ldr	r2, [pc, #248]	@ (800c848 <xTaskIncrementTick+0x154>)
 800c74e:	6013      	str	r3, [r2, #0]
 800c750:	4a3e      	ldr	r2, [pc, #248]	@ (800c84c <xTaskIncrementTick+0x158>)
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	6013      	str	r3, [r2, #0]
 800c756:	4b3e      	ldr	r3, [pc, #248]	@ (800c850 <xTaskIncrementTick+0x15c>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	3301      	adds	r3, #1
 800c75c:	4a3c      	ldr	r2, [pc, #240]	@ (800c850 <xTaskIncrementTick+0x15c>)
 800c75e:	6013      	str	r3, [r2, #0]
 800c760:	f000 fac0 	bl	800cce4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c764:	4b3b      	ldr	r3, [pc, #236]	@ (800c854 <xTaskIncrementTick+0x160>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	693a      	ldr	r2, [r7, #16]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d348      	bcc.n	800c800 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c76e:	4b36      	ldr	r3, [pc, #216]	@ (800c848 <xTaskIncrementTick+0x154>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d104      	bne.n	800c782 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c778:	4b36      	ldr	r3, [pc, #216]	@ (800c854 <xTaskIncrementTick+0x160>)
 800c77a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c77e:	601a      	str	r2, [r3, #0]
					break;
 800c780:	e03e      	b.n	800c800 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c782:	4b31      	ldr	r3, [pc, #196]	@ (800c848 <xTaskIncrementTick+0x154>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	68db      	ldr	r3, [r3, #12]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c792:	693a      	ldr	r2, [r7, #16]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	429a      	cmp	r2, r3
 800c798:	d203      	bcs.n	800c7a2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c79a:	4a2e      	ldr	r2, [pc, #184]	@ (800c854 <xTaskIncrementTick+0x160>)
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c7a0:	e02e      	b.n	800c800 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	3304      	adds	r3, #4
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7fe fc22 	bl	800aff0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d004      	beq.n	800c7be <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	3318      	adds	r3, #24
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7fe fc19 	bl	800aff0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	409a      	lsls	r2, r3
 800c7c6:	4b24      	ldr	r3, [pc, #144]	@ (800c858 <xTaskIncrementTick+0x164>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	4a22      	ldr	r2, [pc, #136]	@ (800c858 <xTaskIncrementTick+0x164>)
 800c7ce:	6013      	str	r3, [r2, #0]
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7d4:	4613      	mov	r3, r2
 800c7d6:	009b      	lsls	r3, r3, #2
 800c7d8:	4413      	add	r3, r2
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	4a1f      	ldr	r2, [pc, #124]	@ (800c85c <xTaskIncrementTick+0x168>)
 800c7de:	441a      	add	r2, r3
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	3304      	adds	r3, #4
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	4610      	mov	r0, r2
 800c7e8:	f7fe fba5 	bl	800af36 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7f0:	4b1b      	ldr	r3, [pc, #108]	@ (800c860 <xTaskIncrementTick+0x16c>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d3b9      	bcc.n	800c76e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7fe:	e7b6      	b.n	800c76e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c800:	4b17      	ldr	r3, [pc, #92]	@ (800c860 <xTaskIncrementTick+0x16c>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c806:	4915      	ldr	r1, [pc, #84]	@ (800c85c <xTaskIncrementTick+0x168>)
 800c808:	4613      	mov	r3, r2
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	4413      	add	r3, r2
 800c80e:	009b      	lsls	r3, r3, #2
 800c810:	440b      	add	r3, r1
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	2b01      	cmp	r3, #1
 800c816:	d907      	bls.n	800c828 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800c818:	2301      	movs	r3, #1
 800c81a:	617b      	str	r3, [r7, #20]
 800c81c:	e004      	b.n	800c828 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c81e:	4b11      	ldr	r3, [pc, #68]	@ (800c864 <xTaskIncrementTick+0x170>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	3301      	adds	r3, #1
 800c824:	4a0f      	ldr	r2, [pc, #60]	@ (800c864 <xTaskIncrementTick+0x170>)
 800c826:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c828:	4b0f      	ldr	r3, [pc, #60]	@ (800c868 <xTaskIncrementTick+0x174>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d001      	beq.n	800c834 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800c830:	2301      	movs	r3, #1
 800c832:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c834:	697b      	ldr	r3, [r7, #20]
}
 800c836:	4618      	mov	r0, r3
 800c838:	3718      	adds	r7, #24
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	20000b28 	.word	0x20000b28
 800c844:	20000b04 	.word	0x20000b04
 800c848:	20000ab8 	.word	0x20000ab8
 800c84c:	20000abc 	.word	0x20000abc
 800c850:	20000b18 	.word	0x20000b18
 800c854:	20000b20 	.word	0x20000b20
 800c858:	20000b08 	.word	0x20000b08
 800c85c:	20000a04 	.word	0x20000a04
 800c860:	20000a00 	.word	0x20000a00
 800c864:	20000b10 	.word	0x20000b10
 800c868:	20000b14 	.word	0x20000b14

0800c86c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c86c:	b480      	push	{r7}
 800c86e:	b087      	sub	sp, #28
 800c870:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c872:	4b2b      	ldr	r3, [pc, #172]	@ (800c920 <vTaskSwitchContext+0xb4>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d003      	beq.n	800c882 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c87a:	4b2a      	ldr	r3, [pc, #168]	@ (800c924 <vTaskSwitchContext+0xb8>)
 800c87c:	2201      	movs	r2, #1
 800c87e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c880:	e047      	b.n	800c912 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800c882:	4b28      	ldr	r3, [pc, #160]	@ (800c924 <vTaskSwitchContext+0xb8>)
 800c884:	2200      	movs	r2, #0
 800c886:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c888:	4b27      	ldr	r3, [pc, #156]	@ (800c928 <vTaskSwitchContext+0xbc>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	fab3 f383 	clz	r3, r3
 800c894:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c896:	7afb      	ldrb	r3, [r7, #11]
 800c898:	f1c3 031f 	rsb	r3, r3, #31
 800c89c:	617b      	str	r3, [r7, #20]
 800c89e:	4923      	ldr	r1, [pc, #140]	@ (800c92c <vTaskSwitchContext+0xc0>)
 800c8a0:	697a      	ldr	r2, [r7, #20]
 800c8a2:	4613      	mov	r3, r2
 800c8a4:	009b      	lsls	r3, r3, #2
 800c8a6:	4413      	add	r3, r2
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	440b      	add	r3, r1
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d10d      	bne.n	800c8ce <vTaskSwitchContext+0x62>
	__asm volatile
 800c8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8b6:	b672      	cpsid	i
 800c8b8:	f383 8811 	msr	BASEPRI, r3
 800c8bc:	f3bf 8f6f 	isb	sy
 800c8c0:	f3bf 8f4f 	dsb	sy
 800c8c4:	b662      	cpsie	i
 800c8c6:	607b      	str	r3, [r7, #4]
}
 800c8c8:	bf00      	nop
 800c8ca:	bf00      	nop
 800c8cc:	e7fd      	b.n	800c8ca <vTaskSwitchContext+0x5e>
 800c8ce:	697a      	ldr	r2, [r7, #20]
 800c8d0:	4613      	mov	r3, r2
 800c8d2:	009b      	lsls	r3, r3, #2
 800c8d4:	4413      	add	r3, r2
 800c8d6:	009b      	lsls	r3, r3, #2
 800c8d8:	4a14      	ldr	r2, [pc, #80]	@ (800c92c <vTaskSwitchContext+0xc0>)
 800c8da:	4413      	add	r3, r2
 800c8dc:	613b      	str	r3, [r7, #16]
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	685a      	ldr	r2, [r3, #4]
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	605a      	str	r2, [r3, #4]
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	685a      	ldr	r2, [r3, #4]
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	3308      	adds	r3, #8
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d104      	bne.n	800c8fe <vTaskSwitchContext+0x92>
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	685a      	ldr	r2, [r3, #4]
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	605a      	str	r2, [r3, #4]
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	68db      	ldr	r3, [r3, #12]
 800c904:	4a0a      	ldr	r2, [pc, #40]	@ (800c930 <vTaskSwitchContext+0xc4>)
 800c906:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c908:	4b09      	ldr	r3, [pc, #36]	@ (800c930 <vTaskSwitchContext+0xc4>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	334c      	adds	r3, #76	@ 0x4c
 800c90e:	4a09      	ldr	r2, [pc, #36]	@ (800c934 <vTaskSwitchContext+0xc8>)
 800c910:	6013      	str	r3, [r2, #0]
}
 800c912:	bf00      	nop
 800c914:	371c      	adds	r7, #28
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	20000b28 	.word	0x20000b28
 800c924:	20000b14 	.word	0x20000b14
 800c928:	20000b08 	.word	0x20000b08
 800c92c:	20000a04 	.word	0x20000a04
 800c930:	20000a00 	.word	0x20000a00
 800c934:	20000148 	.word	0x20000148

0800c938 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
 800c940:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d10d      	bne.n	800c964 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800c948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c94c:	b672      	cpsid	i
 800c94e:	f383 8811 	msr	BASEPRI, r3
 800c952:	f3bf 8f6f 	isb	sy
 800c956:	f3bf 8f4f 	dsb	sy
 800c95a:	b662      	cpsie	i
 800c95c:	60fb      	str	r3, [r7, #12]
}
 800c95e:	bf00      	nop
 800c960:	bf00      	nop
 800c962:	e7fd      	b.n	800c960 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c964:	4b07      	ldr	r3, [pc, #28]	@ (800c984 <vTaskPlaceOnEventList+0x4c>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	3318      	adds	r3, #24
 800c96a:	4619      	mov	r1, r3
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f7fe fb06 	bl	800af7e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c972:	2101      	movs	r1, #1
 800c974:	6838      	ldr	r0, [r7, #0]
 800c976:	f000 fbb3 	bl	800d0e0 <prvAddCurrentTaskToDelayedList>
}
 800c97a:	bf00      	nop
 800c97c:	3710      	adds	r7, #16
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	20000a00 	.word	0x20000a00

0800c988 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b086      	sub	sp, #24
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	68db      	ldr	r3, [r3, #12]
 800c996:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d10d      	bne.n	800c9ba <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800c99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a2:	b672      	cpsid	i
 800c9a4:	f383 8811 	msr	BASEPRI, r3
 800c9a8:	f3bf 8f6f 	isb	sy
 800c9ac:	f3bf 8f4f 	dsb	sy
 800c9b0:	b662      	cpsie	i
 800c9b2:	60fb      	str	r3, [r7, #12]
}
 800c9b4:	bf00      	nop
 800c9b6:	bf00      	nop
 800c9b8:	e7fd      	b.n	800c9b6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	3318      	adds	r3, #24
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7fe fb16 	bl	800aff0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c9c4:	4b1d      	ldr	r3, [pc, #116]	@ (800ca3c <xTaskRemoveFromEventList+0xb4>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d11c      	bne.n	800ca06 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	3304      	adds	r3, #4
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f7fe fb0d 	bl	800aff0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9da:	2201      	movs	r2, #1
 800c9dc:	409a      	lsls	r2, r3
 800c9de:	4b18      	ldr	r3, [pc, #96]	@ (800ca40 <xTaskRemoveFromEventList+0xb8>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	4a16      	ldr	r2, [pc, #88]	@ (800ca40 <xTaskRemoveFromEventList+0xb8>)
 800c9e6:	6013      	str	r3, [r2, #0]
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9ec:	4613      	mov	r3, r2
 800c9ee:	009b      	lsls	r3, r3, #2
 800c9f0:	4413      	add	r3, r2
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	4a13      	ldr	r2, [pc, #76]	@ (800ca44 <xTaskRemoveFromEventList+0xbc>)
 800c9f6:	441a      	add	r2, r3
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	3304      	adds	r3, #4
 800c9fc:	4619      	mov	r1, r3
 800c9fe:	4610      	mov	r0, r2
 800ca00:	f7fe fa99 	bl	800af36 <vListInsertEnd>
 800ca04:	e005      	b.n	800ca12 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	3318      	adds	r3, #24
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	480e      	ldr	r0, [pc, #56]	@ (800ca48 <xTaskRemoveFromEventList+0xc0>)
 800ca0e:	f7fe fa92 	bl	800af36 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca16:	4b0d      	ldr	r3, [pc, #52]	@ (800ca4c <xTaskRemoveFromEventList+0xc4>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d905      	bls.n	800ca2c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ca20:	2301      	movs	r3, #1
 800ca22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ca24:	4b0a      	ldr	r3, [pc, #40]	@ (800ca50 <xTaskRemoveFromEventList+0xc8>)
 800ca26:	2201      	movs	r2, #1
 800ca28:	601a      	str	r2, [r3, #0]
 800ca2a:	e001      	b.n	800ca30 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ca30:	697b      	ldr	r3, [r7, #20]
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3718      	adds	r7, #24
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}
 800ca3a:	bf00      	nop
 800ca3c:	20000b28 	.word	0x20000b28
 800ca40:	20000b08 	.word	0x20000b08
 800ca44:	20000a04 	.word	0x20000a04
 800ca48:	20000ac0 	.word	0x20000ac0
 800ca4c:	20000a00 	.word	0x20000a00
 800ca50:	20000b14 	.word	0x20000b14

0800ca54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ca54:	b480      	push	{r7}
 800ca56:	b083      	sub	sp, #12
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ca5c:	4b06      	ldr	r3, [pc, #24]	@ (800ca78 <vTaskInternalSetTimeOutState+0x24>)
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ca64:	4b05      	ldr	r3, [pc, #20]	@ (800ca7c <vTaskInternalSetTimeOutState+0x28>)
 800ca66:	681a      	ldr	r2, [r3, #0]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	605a      	str	r2, [r3, #4]
}
 800ca6c:	bf00      	nop
 800ca6e:	370c      	adds	r7, #12
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr
 800ca78:	20000b18 	.word	0x20000b18
 800ca7c:	20000b04 	.word	0x20000b04

0800ca80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b088      	sub	sp, #32
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d10d      	bne.n	800caac <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800ca90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca94:	b672      	cpsid	i
 800ca96:	f383 8811 	msr	BASEPRI, r3
 800ca9a:	f3bf 8f6f 	isb	sy
 800ca9e:	f3bf 8f4f 	dsb	sy
 800caa2:	b662      	cpsie	i
 800caa4:	613b      	str	r3, [r7, #16]
}
 800caa6:	bf00      	nop
 800caa8:	bf00      	nop
 800caaa:	e7fd      	b.n	800caa8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d10d      	bne.n	800cace <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800cab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cab6:	b672      	cpsid	i
 800cab8:	f383 8811 	msr	BASEPRI, r3
 800cabc:	f3bf 8f6f 	isb	sy
 800cac0:	f3bf 8f4f 	dsb	sy
 800cac4:	b662      	cpsie	i
 800cac6:	60fb      	str	r3, [r7, #12]
}
 800cac8:	bf00      	nop
 800caca:	bf00      	nop
 800cacc:	e7fd      	b.n	800caca <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800cace:	f000 fc7d 	bl	800d3cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cad2:	4b1d      	ldr	r3, [pc, #116]	@ (800cb48 <xTaskCheckForTimeOut+0xc8>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	69ba      	ldr	r2, [r7, #24]
 800cade:	1ad3      	subs	r3, r2, r3
 800cae0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800caea:	d102      	bne.n	800caf2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800caec:	2300      	movs	r3, #0
 800caee:	61fb      	str	r3, [r7, #28]
 800caf0:	e023      	b.n	800cb3a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681a      	ldr	r2, [r3, #0]
 800caf6:	4b15      	ldr	r3, [pc, #84]	@ (800cb4c <xTaskCheckForTimeOut+0xcc>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d007      	beq.n	800cb0e <xTaskCheckForTimeOut+0x8e>
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	69ba      	ldr	r2, [r7, #24]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d302      	bcc.n	800cb0e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cb08:	2301      	movs	r3, #1
 800cb0a:	61fb      	str	r3, [r7, #28]
 800cb0c:	e015      	b.n	800cb3a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	697a      	ldr	r2, [r7, #20]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d20b      	bcs.n	800cb30 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	1ad2      	subs	r2, r2, r3
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f7ff ff95 	bl	800ca54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	61fb      	str	r3, [r7, #28]
 800cb2e:	e004      	b.n	800cb3a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	2200      	movs	r2, #0
 800cb34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cb36:	2301      	movs	r3, #1
 800cb38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cb3a:	f000 fc7d 	bl	800d438 <vPortExitCritical>

	return xReturn;
 800cb3e:	69fb      	ldr	r3, [r7, #28]
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3720      	adds	r7, #32
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	20000b04 	.word	0x20000b04
 800cb4c:	20000b18 	.word	0x20000b18

0800cb50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cb50:	b480      	push	{r7}
 800cb52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cb54:	4b03      	ldr	r3, [pc, #12]	@ (800cb64 <vTaskMissedYield+0x14>)
 800cb56:	2201      	movs	r2, #1
 800cb58:	601a      	str	r2, [r3, #0]
}
 800cb5a:	bf00      	nop
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr
 800cb64:	20000b14 	.word	0x20000b14

0800cb68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cb70:	f000 f852 	bl	800cc18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cb74:	4b06      	ldr	r3, [pc, #24]	@ (800cb90 <prvIdleTask+0x28>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d9f9      	bls.n	800cb70 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cb7c:	4b05      	ldr	r3, [pc, #20]	@ (800cb94 <prvIdleTask+0x2c>)
 800cb7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb82:	601a      	str	r2, [r3, #0]
 800cb84:	f3bf 8f4f 	dsb	sy
 800cb88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cb8c:	e7f0      	b.n	800cb70 <prvIdleTask+0x8>
 800cb8e:	bf00      	nop
 800cb90:	20000a04 	.word	0x20000a04
 800cb94:	e000ed04 	.word	0xe000ed04

0800cb98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb9e:	2300      	movs	r3, #0
 800cba0:	607b      	str	r3, [r7, #4]
 800cba2:	e00c      	b.n	800cbbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	4613      	mov	r3, r2
 800cba8:	009b      	lsls	r3, r3, #2
 800cbaa:	4413      	add	r3, r2
 800cbac:	009b      	lsls	r3, r3, #2
 800cbae:	4a12      	ldr	r2, [pc, #72]	@ (800cbf8 <prvInitialiseTaskLists+0x60>)
 800cbb0:	4413      	add	r3, r2
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fe f992 	bl	800aedc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	3301      	adds	r3, #1
 800cbbc:	607b      	str	r3, [r7, #4]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2b06      	cmp	r3, #6
 800cbc2:	d9ef      	bls.n	800cba4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cbc4:	480d      	ldr	r0, [pc, #52]	@ (800cbfc <prvInitialiseTaskLists+0x64>)
 800cbc6:	f7fe f989 	bl	800aedc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cbca:	480d      	ldr	r0, [pc, #52]	@ (800cc00 <prvInitialiseTaskLists+0x68>)
 800cbcc:	f7fe f986 	bl	800aedc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cbd0:	480c      	ldr	r0, [pc, #48]	@ (800cc04 <prvInitialiseTaskLists+0x6c>)
 800cbd2:	f7fe f983 	bl	800aedc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cbd6:	480c      	ldr	r0, [pc, #48]	@ (800cc08 <prvInitialiseTaskLists+0x70>)
 800cbd8:	f7fe f980 	bl	800aedc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cbdc:	480b      	ldr	r0, [pc, #44]	@ (800cc0c <prvInitialiseTaskLists+0x74>)
 800cbde:	f7fe f97d 	bl	800aedc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cbe2:	4b0b      	ldr	r3, [pc, #44]	@ (800cc10 <prvInitialiseTaskLists+0x78>)
 800cbe4:	4a05      	ldr	r2, [pc, #20]	@ (800cbfc <prvInitialiseTaskLists+0x64>)
 800cbe6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cbe8:	4b0a      	ldr	r3, [pc, #40]	@ (800cc14 <prvInitialiseTaskLists+0x7c>)
 800cbea:	4a05      	ldr	r2, [pc, #20]	@ (800cc00 <prvInitialiseTaskLists+0x68>)
 800cbec:	601a      	str	r2, [r3, #0]
}
 800cbee:	bf00      	nop
 800cbf0:	3708      	adds	r7, #8
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	20000a04 	.word	0x20000a04
 800cbfc:	20000a90 	.word	0x20000a90
 800cc00:	20000aa4 	.word	0x20000aa4
 800cc04:	20000ac0 	.word	0x20000ac0
 800cc08:	20000ad4 	.word	0x20000ad4
 800cc0c:	20000aec 	.word	0x20000aec
 800cc10:	20000ab8 	.word	0x20000ab8
 800cc14:	20000abc 	.word	0x20000abc

0800cc18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc1e:	e019      	b.n	800cc54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cc20:	f000 fbd4 	bl	800d3cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc24:	4b10      	ldr	r3, [pc, #64]	@ (800cc68 <prvCheckTasksWaitingTermination+0x50>)
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	68db      	ldr	r3, [r3, #12]
 800cc2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	3304      	adds	r3, #4
 800cc30:	4618      	mov	r0, r3
 800cc32:	f7fe f9dd 	bl	800aff0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cc36:	4b0d      	ldr	r3, [pc, #52]	@ (800cc6c <prvCheckTasksWaitingTermination+0x54>)
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	3b01      	subs	r3, #1
 800cc3c:	4a0b      	ldr	r2, [pc, #44]	@ (800cc6c <prvCheckTasksWaitingTermination+0x54>)
 800cc3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cc40:	4b0b      	ldr	r3, [pc, #44]	@ (800cc70 <prvCheckTasksWaitingTermination+0x58>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	3b01      	subs	r3, #1
 800cc46:	4a0a      	ldr	r2, [pc, #40]	@ (800cc70 <prvCheckTasksWaitingTermination+0x58>)
 800cc48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cc4a:	f000 fbf5 	bl	800d438 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 f810 	bl	800cc74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc54:	4b06      	ldr	r3, [pc, #24]	@ (800cc70 <prvCheckTasksWaitingTermination+0x58>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d1e1      	bne.n	800cc20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cc5c:	bf00      	nop
 800cc5e:	bf00      	nop
 800cc60:	3708      	adds	r7, #8
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	20000ad4 	.word	0x20000ad4
 800cc6c:	20000b00 	.word	0x20000b00
 800cc70:	20000ae8 	.word	0x20000ae8

0800cc74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	334c      	adds	r3, #76	@ 0x4c
 800cc80:	4618      	mov	r0, r3
 800cc82:	f012 f895 	bl	801edb0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d108      	bne.n	800cca2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc94:	4618      	mov	r0, r3
 800cc96:	f000 fd95 	bl	800d7c4 <vPortFree>
				vPortFree( pxTCB );
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 fd92 	bl	800d7c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cca0:	e01b      	b.n	800ccda <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d103      	bne.n	800ccb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f000 fd89 	bl	800d7c4 <vPortFree>
	}
 800ccb2:	e012      	b.n	800ccda <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800ccba:	2b02      	cmp	r3, #2
 800ccbc:	d00d      	beq.n	800ccda <prvDeleteTCB+0x66>
	__asm volatile
 800ccbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc2:	b672      	cpsid	i
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	b662      	cpsie	i
 800ccd2:	60fb      	str	r3, [r7, #12]
}
 800ccd4:	bf00      	nop
 800ccd6:	bf00      	nop
 800ccd8:	e7fd      	b.n	800ccd6 <prvDeleteTCB+0x62>
	}
 800ccda:	bf00      	nop
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
	...

0800cce4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ccea:	4b0c      	ldr	r3, [pc, #48]	@ (800cd1c <prvResetNextTaskUnblockTime+0x38>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d104      	bne.n	800ccfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ccf4:	4b0a      	ldr	r3, [pc, #40]	@ (800cd20 <prvResetNextTaskUnblockTime+0x3c>)
 800ccf6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ccfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ccfc:	e008      	b.n	800cd10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccfe:	4b07      	ldr	r3, [pc, #28]	@ (800cd1c <prvResetNextTaskUnblockTime+0x38>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	68db      	ldr	r3, [r3, #12]
 800cd06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	4a04      	ldr	r2, [pc, #16]	@ (800cd20 <prvResetNextTaskUnblockTime+0x3c>)
 800cd0e:	6013      	str	r3, [r2, #0]
}
 800cd10:	bf00      	nop
 800cd12:	370c      	adds	r7, #12
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr
 800cd1c:	20000ab8 	.word	0x20000ab8
 800cd20:	20000b20 	.word	0x20000b20

0800cd24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cd2a:	4b0b      	ldr	r3, [pc, #44]	@ (800cd58 <xTaskGetSchedulerState+0x34>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d102      	bne.n	800cd38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cd32:	2301      	movs	r3, #1
 800cd34:	607b      	str	r3, [r7, #4]
 800cd36:	e008      	b.n	800cd4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd38:	4b08      	ldr	r3, [pc, #32]	@ (800cd5c <xTaskGetSchedulerState+0x38>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d102      	bne.n	800cd46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cd40:	2302      	movs	r3, #2
 800cd42:	607b      	str	r3, [r7, #4]
 800cd44:	e001      	b.n	800cd4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cd46:	2300      	movs	r3, #0
 800cd48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cd4a:	687b      	ldr	r3, [r7, #4]
	}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	370c      	adds	r7, #12
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr
 800cd58:	20000b0c 	.word	0x20000b0c
 800cd5c:	20000b28 	.word	0x20000b28

0800cd60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d069      	beq.n	800ce4a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd7a:	4b36      	ldr	r3, [pc, #216]	@ (800ce54 <xTaskPriorityInherit+0xf4>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d259      	bcs.n	800ce38 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	699b      	ldr	r3, [r3, #24]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	db06      	blt.n	800cd9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd8c:	4b31      	ldr	r3, [pc, #196]	@ (800ce54 <xTaskPriorityInherit+0xf4>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd92:	f1c3 0207 	rsb	r2, r3, #7
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	6959      	ldr	r1, [r3, #20]
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cda2:	4613      	mov	r3, r2
 800cda4:	009b      	lsls	r3, r3, #2
 800cda6:	4413      	add	r3, r2
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	4a2b      	ldr	r2, [pc, #172]	@ (800ce58 <xTaskPriorityInherit+0xf8>)
 800cdac:	4413      	add	r3, r2
 800cdae:	4299      	cmp	r1, r3
 800cdb0:	d13a      	bne.n	800ce28 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cdb2:	68bb      	ldr	r3, [r7, #8]
 800cdb4:	3304      	adds	r3, #4
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7fe f91a 	bl	800aff0 <uxListRemove>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d115      	bne.n	800cdee <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdc6:	4924      	ldr	r1, [pc, #144]	@ (800ce58 <xTaskPriorityInherit+0xf8>)
 800cdc8:	4613      	mov	r3, r2
 800cdca:	009b      	lsls	r3, r3, #2
 800cdcc:	4413      	add	r3, r2
 800cdce:	009b      	lsls	r3, r3, #2
 800cdd0:	440b      	add	r3, r1
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d10a      	bne.n	800cdee <xTaskPriorityInherit+0x8e>
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cddc:	2201      	movs	r2, #1
 800cdde:	fa02 f303 	lsl.w	r3, r2, r3
 800cde2:	43da      	mvns	r2, r3
 800cde4:	4b1d      	ldr	r3, [pc, #116]	@ (800ce5c <xTaskPriorityInherit+0xfc>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4013      	ands	r3, r2
 800cdea:	4a1c      	ldr	r2, [pc, #112]	@ (800ce5c <xTaskPriorityInherit+0xfc>)
 800cdec:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cdee:	4b19      	ldr	r3, [pc, #100]	@ (800ce54 <xTaskPriorityInherit+0xf4>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cdf4:	68bb      	ldr	r3, [r7, #8]
 800cdf6:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdfc:	2201      	movs	r2, #1
 800cdfe:	409a      	lsls	r2, r3
 800ce00:	4b16      	ldr	r3, [pc, #88]	@ (800ce5c <xTaskPriorityInherit+0xfc>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4313      	orrs	r3, r2
 800ce06:	4a15      	ldr	r2, [pc, #84]	@ (800ce5c <xTaskPriorityInherit+0xfc>)
 800ce08:	6013      	str	r3, [r2, #0]
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce0e:	4613      	mov	r3, r2
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	4413      	add	r3, r2
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	4a10      	ldr	r2, [pc, #64]	@ (800ce58 <xTaskPriorityInherit+0xf8>)
 800ce18:	441a      	add	r2, r3
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	3304      	adds	r3, #4
 800ce1e:	4619      	mov	r1, r3
 800ce20:	4610      	mov	r0, r2
 800ce22:	f7fe f888 	bl	800af36 <vListInsertEnd>
 800ce26:	e004      	b.n	800ce32 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ce28:	4b0a      	ldr	r3, [pc, #40]	@ (800ce54 <xTaskPriorityInherit+0xf4>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ce32:	2301      	movs	r3, #1
 800ce34:	60fb      	str	r3, [r7, #12]
 800ce36:	e008      	b.n	800ce4a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ce3c:	4b05      	ldr	r3, [pc, #20]	@ (800ce54 <xTaskPriorityInherit+0xf4>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d201      	bcs.n	800ce4a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ce46:	2301      	movs	r3, #1
 800ce48:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
	}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3710      	adds	r7, #16
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	20000a00 	.word	0x20000a00
 800ce58:	20000a04 	.word	0x20000a04
 800ce5c:	20000b08 	.word	0x20000b08

0800ce60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b086      	sub	sp, #24
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d074      	beq.n	800cf60 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ce76:	4b3d      	ldr	r3, [pc, #244]	@ (800cf6c <xTaskPriorityDisinherit+0x10c>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	693a      	ldr	r2, [r7, #16]
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d00d      	beq.n	800ce9c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800ce80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce84:	b672      	cpsid	i
 800ce86:	f383 8811 	msr	BASEPRI, r3
 800ce8a:	f3bf 8f6f 	isb	sy
 800ce8e:	f3bf 8f4f 	dsb	sy
 800ce92:	b662      	cpsie	i
 800ce94:	60fb      	str	r3, [r7, #12]
}
 800ce96:	bf00      	nop
 800ce98:	bf00      	nop
 800ce9a:	e7fd      	b.n	800ce98 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d10d      	bne.n	800cec0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800cea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cea8:	b672      	cpsid	i
 800ceaa:	f383 8811 	msr	BASEPRI, r3
 800ceae:	f3bf 8f6f 	isb	sy
 800ceb2:	f3bf 8f4f 	dsb	sy
 800ceb6:	b662      	cpsie	i
 800ceb8:	60bb      	str	r3, [r7, #8]
}
 800ceba:	bf00      	nop
 800cebc:	bf00      	nop
 800cebe:	e7fd      	b.n	800cebc <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cec4:	1e5a      	subs	r2, r3, #1
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d044      	beq.n	800cf60 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d140      	bne.n	800cf60 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	3304      	adds	r3, #4
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7fe f884 	bl	800aff0 <uxListRemove>
 800cee8:	4603      	mov	r3, r0
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d115      	bne.n	800cf1a <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cef2:	491f      	ldr	r1, [pc, #124]	@ (800cf70 <xTaskPriorityDisinherit+0x110>)
 800cef4:	4613      	mov	r3, r2
 800cef6:	009b      	lsls	r3, r3, #2
 800cef8:	4413      	add	r3, r2
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	440b      	add	r3, r1
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d10a      	bne.n	800cf1a <xTaskPriorityDisinherit+0xba>
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf08:	2201      	movs	r2, #1
 800cf0a:	fa02 f303 	lsl.w	r3, r2, r3
 800cf0e:	43da      	mvns	r2, r3
 800cf10:	4b18      	ldr	r3, [pc, #96]	@ (800cf74 <xTaskPriorityDisinherit+0x114>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4013      	ands	r3, r2
 800cf16:	4a17      	ldr	r2, [pc, #92]	@ (800cf74 <xTaskPriorityDisinherit+0x114>)
 800cf18:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf26:	f1c3 0207 	rsb	r2, r3, #7
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf32:	2201      	movs	r2, #1
 800cf34:	409a      	lsls	r2, r3
 800cf36:	4b0f      	ldr	r3, [pc, #60]	@ (800cf74 <xTaskPriorityDisinherit+0x114>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4313      	orrs	r3, r2
 800cf3c:	4a0d      	ldr	r2, [pc, #52]	@ (800cf74 <xTaskPriorityDisinherit+0x114>)
 800cf3e:	6013      	str	r3, [r2, #0]
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf44:	4613      	mov	r3, r2
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	4413      	add	r3, r2
 800cf4a:	009b      	lsls	r3, r3, #2
 800cf4c:	4a08      	ldr	r2, [pc, #32]	@ (800cf70 <xTaskPriorityDisinherit+0x110>)
 800cf4e:	441a      	add	r2, r3
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	3304      	adds	r3, #4
 800cf54:	4619      	mov	r1, r3
 800cf56:	4610      	mov	r0, r2
 800cf58:	f7fd ffed 	bl	800af36 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cf60:	697b      	ldr	r3, [r7, #20]
	}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3718      	adds	r7, #24
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
 800cf6a:	bf00      	nop
 800cf6c:	20000a00 	.word	0x20000a00
 800cf70:	20000a04 	.word	0x20000a04
 800cf74:	20000b08 	.word	0x20000b08

0800cf78 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b088      	sub	sp, #32
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cf86:	2301      	movs	r3, #1
 800cf88:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	f000 8089 	beq.w	800d0a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800cf92:	69bb      	ldr	r3, [r7, #24]
 800cf94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d10d      	bne.n	800cfb6 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 800cf9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf9e:	b672      	cpsid	i
 800cfa0:	f383 8811 	msr	BASEPRI, r3
 800cfa4:	f3bf 8f6f 	isb	sy
 800cfa8:	f3bf 8f4f 	dsb	sy
 800cfac:	b662      	cpsie	i
 800cfae:	60fb      	str	r3, [r7, #12]
}
 800cfb0:	bf00      	nop
 800cfb2:	bf00      	nop
 800cfb4:	e7fd      	b.n	800cfb2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cfb6:	69bb      	ldr	r3, [r7, #24]
 800cfb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfba:	683a      	ldr	r2, [r7, #0]
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d902      	bls.n	800cfc6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	61fb      	str	r3, [r7, #28]
 800cfc4:	e002      	b.n	800cfcc <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cfc6:	69bb      	ldr	r3, [r7, #24]
 800cfc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cfcc:	69bb      	ldr	r3, [r7, #24]
 800cfce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfd0:	69fa      	ldr	r2, [r7, #28]
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d066      	beq.n	800d0a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cfd6:	69bb      	ldr	r3, [r7, #24]
 800cfd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cfda:	697a      	ldr	r2, [r7, #20]
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d161      	bne.n	800d0a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cfe0:	4b32      	ldr	r3, [pc, #200]	@ (800d0ac <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	69ba      	ldr	r2, [r7, #24]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d10d      	bne.n	800d006 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 800cfea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfee:	b672      	cpsid	i
 800cff0:	f383 8811 	msr	BASEPRI, r3
 800cff4:	f3bf 8f6f 	isb	sy
 800cff8:	f3bf 8f4f 	dsb	sy
 800cffc:	b662      	cpsie	i
 800cffe:	60bb      	str	r3, [r7, #8]
}
 800d000:	bf00      	nop
 800d002:	bf00      	nop
 800d004:	e7fd      	b.n	800d002 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d006:	69bb      	ldr	r3, [r7, #24]
 800d008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d00a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d00c:	69bb      	ldr	r3, [r7, #24]
 800d00e:	69fa      	ldr	r2, [r7, #28]
 800d010:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d012:	69bb      	ldr	r3, [r7, #24]
 800d014:	699b      	ldr	r3, [r3, #24]
 800d016:	2b00      	cmp	r3, #0
 800d018:	db04      	blt.n	800d024 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d01a:	69fb      	ldr	r3, [r7, #28]
 800d01c:	f1c3 0207 	rsb	r2, r3, #7
 800d020:	69bb      	ldr	r3, [r7, #24]
 800d022:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d024:	69bb      	ldr	r3, [r7, #24]
 800d026:	6959      	ldr	r1, [r3, #20]
 800d028:	693a      	ldr	r2, [r7, #16]
 800d02a:	4613      	mov	r3, r2
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	4413      	add	r3, r2
 800d030:	009b      	lsls	r3, r3, #2
 800d032:	4a1f      	ldr	r2, [pc, #124]	@ (800d0b0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d034:	4413      	add	r3, r2
 800d036:	4299      	cmp	r1, r3
 800d038:	d134      	bne.n	800d0a4 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d03a:	69bb      	ldr	r3, [r7, #24]
 800d03c:	3304      	adds	r3, #4
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fd ffd6 	bl	800aff0 <uxListRemove>
 800d044:	4603      	mov	r3, r0
 800d046:	2b00      	cmp	r3, #0
 800d048:	d115      	bne.n	800d076 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d04a:	69bb      	ldr	r3, [r7, #24]
 800d04c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d04e:	4918      	ldr	r1, [pc, #96]	@ (800d0b0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d050:	4613      	mov	r3, r2
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	4413      	add	r3, r2
 800d056:	009b      	lsls	r3, r3, #2
 800d058:	440b      	add	r3, r1
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d10a      	bne.n	800d076 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 800d060:	69bb      	ldr	r3, [r7, #24]
 800d062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d064:	2201      	movs	r2, #1
 800d066:	fa02 f303 	lsl.w	r3, r2, r3
 800d06a:	43da      	mvns	r2, r3
 800d06c:	4b11      	ldr	r3, [pc, #68]	@ (800d0b4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4013      	ands	r3, r2
 800d072:	4a10      	ldr	r2, [pc, #64]	@ (800d0b4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d074:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d076:	69bb      	ldr	r3, [r7, #24]
 800d078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d07a:	2201      	movs	r2, #1
 800d07c:	409a      	lsls	r2, r3
 800d07e:	4b0d      	ldr	r3, [pc, #52]	@ (800d0b4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	4313      	orrs	r3, r2
 800d084:	4a0b      	ldr	r2, [pc, #44]	@ (800d0b4 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800d086:	6013      	str	r3, [r2, #0]
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d08c:	4613      	mov	r3, r2
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	4413      	add	r3, r2
 800d092:	009b      	lsls	r3, r3, #2
 800d094:	4a06      	ldr	r2, [pc, #24]	@ (800d0b0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d096:	441a      	add	r2, r3
 800d098:	69bb      	ldr	r3, [r7, #24]
 800d09a:	3304      	adds	r3, #4
 800d09c:	4619      	mov	r1, r3
 800d09e:	4610      	mov	r0, r2
 800d0a0:	f7fd ff49 	bl	800af36 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0a4:	bf00      	nop
 800d0a6:	3720      	adds	r7, #32
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}
 800d0ac:	20000a00 	.word	0x20000a00
 800d0b0:	20000a04 	.word	0x20000a04
 800d0b4:	20000b08 	.word	0x20000b08

0800d0b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d0b8:	b480      	push	{r7}
 800d0ba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d0bc:	4b07      	ldr	r3, [pc, #28]	@ (800d0dc <pvTaskIncrementMutexHeldCount+0x24>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d004      	beq.n	800d0ce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d0c4:	4b05      	ldr	r3, [pc, #20]	@ (800d0dc <pvTaskIncrementMutexHeldCount+0x24>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d0ca:	3201      	adds	r2, #1
 800d0cc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800d0ce:	4b03      	ldr	r3, [pc, #12]	@ (800d0dc <pvTaskIncrementMutexHeldCount+0x24>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
	}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr
 800d0dc:	20000a00 	.word	0x20000a00

0800d0e0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d0ea:	4b29      	ldr	r3, [pc, #164]	@ (800d190 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0f0:	4b28      	ldr	r3, [pc, #160]	@ (800d194 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	3304      	adds	r3, #4
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7fd ff7a 	bl	800aff0 <uxListRemove>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d10b      	bne.n	800d11a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d102:	4b24      	ldr	r3, [pc, #144]	@ (800d194 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d108:	2201      	movs	r2, #1
 800d10a:	fa02 f303 	lsl.w	r3, r2, r3
 800d10e:	43da      	mvns	r2, r3
 800d110:	4b21      	ldr	r3, [pc, #132]	@ (800d198 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4013      	ands	r3, r2
 800d116:	4a20      	ldr	r2, [pc, #128]	@ (800d198 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d118:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d120:	d10a      	bne.n	800d138 <prvAddCurrentTaskToDelayedList+0x58>
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d007      	beq.n	800d138 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d128:	4b1a      	ldr	r3, [pc, #104]	@ (800d194 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	3304      	adds	r3, #4
 800d12e:	4619      	mov	r1, r3
 800d130:	481a      	ldr	r0, [pc, #104]	@ (800d19c <prvAddCurrentTaskToDelayedList+0xbc>)
 800d132:	f7fd ff00 	bl	800af36 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d136:	e026      	b.n	800d186 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d138:	68fa      	ldr	r2, [r7, #12]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	4413      	add	r3, r2
 800d13e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d140:	4b14      	ldr	r3, [pc, #80]	@ (800d194 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	68ba      	ldr	r2, [r7, #8]
 800d146:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d148:	68ba      	ldr	r2, [r7, #8]
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d209      	bcs.n	800d164 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d150:	4b13      	ldr	r3, [pc, #76]	@ (800d1a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	4b0f      	ldr	r3, [pc, #60]	@ (800d194 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	3304      	adds	r3, #4
 800d15a:	4619      	mov	r1, r3
 800d15c:	4610      	mov	r0, r2
 800d15e:	f7fd ff0e 	bl	800af7e <vListInsert>
}
 800d162:	e010      	b.n	800d186 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d164:	4b0f      	ldr	r3, [pc, #60]	@ (800d1a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d166:	681a      	ldr	r2, [r3, #0]
 800d168:	4b0a      	ldr	r3, [pc, #40]	@ (800d194 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	3304      	adds	r3, #4
 800d16e:	4619      	mov	r1, r3
 800d170:	4610      	mov	r0, r2
 800d172:	f7fd ff04 	bl	800af7e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d176:	4b0c      	ldr	r3, [pc, #48]	@ (800d1a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	68ba      	ldr	r2, [r7, #8]
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d202      	bcs.n	800d186 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d180:	4a09      	ldr	r2, [pc, #36]	@ (800d1a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	6013      	str	r3, [r2, #0]
}
 800d186:	bf00      	nop
 800d188:	3710      	adds	r7, #16
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	20000b04 	.word	0x20000b04
 800d194:	20000a00 	.word	0x20000a00
 800d198:	20000b08 	.word	0x20000b08
 800d19c:	20000aec 	.word	0x20000aec
 800d1a0:	20000abc 	.word	0x20000abc
 800d1a4:	20000ab8 	.word	0x20000ab8
 800d1a8:	20000b20 	.word	0x20000b20

0800d1ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b085      	sub	sp, #20
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	60f8      	str	r0, [r7, #12]
 800d1b4:	60b9      	str	r1, [r7, #8]
 800d1b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	3b04      	subs	r3, #4
 800d1bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d1c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	3b04      	subs	r3, #4
 800d1ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	f023 0201 	bic.w	r2, r3, #1
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	3b04      	subs	r3, #4
 800d1da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d1dc:	4a0c      	ldr	r2, [pc, #48]	@ (800d210 <pxPortInitialiseStack+0x64>)
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	3b14      	subs	r3, #20
 800d1e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d1e8:	687a      	ldr	r2, [r7, #4]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	3b04      	subs	r3, #4
 800d1f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	f06f 0202 	mvn.w	r2, #2
 800d1fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	3b20      	subs	r3, #32
 800d200:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d202:	68fb      	ldr	r3, [r7, #12]
}
 800d204:	4618      	mov	r0, r3
 800d206:	3714      	adds	r7, #20
 800d208:	46bd      	mov	sp, r7
 800d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20e:	4770      	bx	lr
 800d210:	0800d215 	.word	0x0800d215

0800d214 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d214:	b480      	push	{r7}
 800d216:	b085      	sub	sp, #20
 800d218:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d21a:	2300      	movs	r3, #0
 800d21c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d21e:	4b15      	ldr	r3, [pc, #84]	@ (800d274 <prvTaskExitError+0x60>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d226:	d00d      	beq.n	800d244 <prvTaskExitError+0x30>
	__asm volatile
 800d228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d22c:	b672      	cpsid	i
 800d22e:	f383 8811 	msr	BASEPRI, r3
 800d232:	f3bf 8f6f 	isb	sy
 800d236:	f3bf 8f4f 	dsb	sy
 800d23a:	b662      	cpsie	i
 800d23c:	60fb      	str	r3, [r7, #12]
}
 800d23e:	bf00      	nop
 800d240:	bf00      	nop
 800d242:	e7fd      	b.n	800d240 <prvTaskExitError+0x2c>
	__asm volatile
 800d244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d248:	b672      	cpsid	i
 800d24a:	f383 8811 	msr	BASEPRI, r3
 800d24e:	f3bf 8f6f 	isb	sy
 800d252:	f3bf 8f4f 	dsb	sy
 800d256:	b662      	cpsie	i
 800d258:	60bb      	str	r3, [r7, #8]
}
 800d25a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d25c:	bf00      	nop
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d0fc      	beq.n	800d25e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d264:	bf00      	nop
 800d266:	bf00      	nop
 800d268:	3714      	adds	r7, #20
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr
 800d272:	bf00      	nop
 800d274:	200000ac 	.word	0x200000ac
	...

0800d280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d280:	4b07      	ldr	r3, [pc, #28]	@ (800d2a0 <pxCurrentTCBConst2>)
 800d282:	6819      	ldr	r1, [r3, #0]
 800d284:	6808      	ldr	r0, [r1, #0]
 800d286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d28a:	f380 8809 	msr	PSP, r0
 800d28e:	f3bf 8f6f 	isb	sy
 800d292:	f04f 0000 	mov.w	r0, #0
 800d296:	f380 8811 	msr	BASEPRI, r0
 800d29a:	4770      	bx	lr
 800d29c:	f3af 8000 	nop.w

0800d2a0 <pxCurrentTCBConst2>:
 800d2a0:	20000a00 	.word	0x20000a00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d2a4:	bf00      	nop
 800d2a6:	bf00      	nop

0800d2a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d2a8:	4808      	ldr	r0, [pc, #32]	@ (800d2cc <prvPortStartFirstTask+0x24>)
 800d2aa:	6800      	ldr	r0, [r0, #0]
 800d2ac:	6800      	ldr	r0, [r0, #0]
 800d2ae:	f380 8808 	msr	MSP, r0
 800d2b2:	f04f 0000 	mov.w	r0, #0
 800d2b6:	f380 8814 	msr	CONTROL, r0
 800d2ba:	b662      	cpsie	i
 800d2bc:	b661      	cpsie	f
 800d2be:	f3bf 8f4f 	dsb	sy
 800d2c2:	f3bf 8f6f 	isb	sy
 800d2c6:	df00      	svc	0
 800d2c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d2ca:	bf00      	nop
 800d2cc:	e000ed08 	.word	0xe000ed08

0800d2d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b084      	sub	sp, #16
 800d2d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d2d6:	4b37      	ldr	r3, [pc, #220]	@ (800d3b4 <xPortStartScheduler+0xe4>)
 800d2d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	781b      	ldrb	r3, [r3, #0]
 800d2de:	b2db      	uxtb	r3, r3
 800d2e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	22ff      	movs	r2, #255	@ 0xff
 800d2e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d2f0:	78fb      	ldrb	r3, [r7, #3]
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d2f8:	b2da      	uxtb	r2, r3
 800d2fa:	4b2f      	ldr	r3, [pc, #188]	@ (800d3b8 <xPortStartScheduler+0xe8>)
 800d2fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d2fe:	4b2f      	ldr	r3, [pc, #188]	@ (800d3bc <xPortStartScheduler+0xec>)
 800d300:	2207      	movs	r2, #7
 800d302:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d304:	e009      	b.n	800d31a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d306:	4b2d      	ldr	r3, [pc, #180]	@ (800d3bc <xPortStartScheduler+0xec>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	3b01      	subs	r3, #1
 800d30c:	4a2b      	ldr	r2, [pc, #172]	@ (800d3bc <xPortStartScheduler+0xec>)
 800d30e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d310:	78fb      	ldrb	r3, [r7, #3]
 800d312:	b2db      	uxtb	r3, r3
 800d314:	005b      	lsls	r3, r3, #1
 800d316:	b2db      	uxtb	r3, r3
 800d318:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d31a:	78fb      	ldrb	r3, [r7, #3]
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d322:	2b80      	cmp	r3, #128	@ 0x80
 800d324:	d0ef      	beq.n	800d306 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d326:	4b25      	ldr	r3, [pc, #148]	@ (800d3bc <xPortStartScheduler+0xec>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f1c3 0307 	rsb	r3, r3, #7
 800d32e:	2b04      	cmp	r3, #4
 800d330:	d00d      	beq.n	800d34e <xPortStartScheduler+0x7e>
	__asm volatile
 800d332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d336:	b672      	cpsid	i
 800d338:	f383 8811 	msr	BASEPRI, r3
 800d33c:	f3bf 8f6f 	isb	sy
 800d340:	f3bf 8f4f 	dsb	sy
 800d344:	b662      	cpsie	i
 800d346:	60bb      	str	r3, [r7, #8]
}
 800d348:	bf00      	nop
 800d34a:	bf00      	nop
 800d34c:	e7fd      	b.n	800d34a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d34e:	4b1b      	ldr	r3, [pc, #108]	@ (800d3bc <xPortStartScheduler+0xec>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	021b      	lsls	r3, r3, #8
 800d354:	4a19      	ldr	r2, [pc, #100]	@ (800d3bc <xPortStartScheduler+0xec>)
 800d356:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d358:	4b18      	ldr	r3, [pc, #96]	@ (800d3bc <xPortStartScheduler+0xec>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d360:	4a16      	ldr	r2, [pc, #88]	@ (800d3bc <xPortStartScheduler+0xec>)
 800d362:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	b2da      	uxtb	r2, r3
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d36c:	4b14      	ldr	r3, [pc, #80]	@ (800d3c0 <xPortStartScheduler+0xf0>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4a13      	ldr	r2, [pc, #76]	@ (800d3c0 <xPortStartScheduler+0xf0>)
 800d372:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d376:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d378:	4b11      	ldr	r3, [pc, #68]	@ (800d3c0 <xPortStartScheduler+0xf0>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	4a10      	ldr	r2, [pc, #64]	@ (800d3c0 <xPortStartScheduler+0xf0>)
 800d37e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d382:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d384:	f000 f8dc 	bl	800d540 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d388:	4b0e      	ldr	r3, [pc, #56]	@ (800d3c4 <xPortStartScheduler+0xf4>)
 800d38a:	2200      	movs	r2, #0
 800d38c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d38e:	f000 f8fb 	bl	800d588 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d392:	4b0d      	ldr	r3, [pc, #52]	@ (800d3c8 <xPortStartScheduler+0xf8>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	4a0c      	ldr	r2, [pc, #48]	@ (800d3c8 <xPortStartScheduler+0xf8>)
 800d398:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d39c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d39e:	f7ff ff83 	bl	800d2a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d3a2:	f7ff fa63 	bl	800c86c <vTaskSwitchContext>
	prvTaskExitError();
 800d3a6:	f7ff ff35 	bl	800d214 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d3aa:	2300      	movs	r3, #0
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3710      	adds	r7, #16
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	e000e400 	.word	0xe000e400
 800d3b8:	20000b2c 	.word	0x20000b2c
 800d3bc:	20000b30 	.word	0x20000b30
 800d3c0:	e000ed20 	.word	0xe000ed20
 800d3c4:	200000ac 	.word	0x200000ac
 800d3c8:	e000ef34 	.word	0xe000ef34

0800d3cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b083      	sub	sp, #12
 800d3d0:	af00      	add	r7, sp, #0
	__asm volatile
 800d3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3d6:	b672      	cpsid	i
 800d3d8:	f383 8811 	msr	BASEPRI, r3
 800d3dc:	f3bf 8f6f 	isb	sy
 800d3e0:	f3bf 8f4f 	dsb	sy
 800d3e4:	b662      	cpsie	i
 800d3e6:	607b      	str	r3, [r7, #4]
}
 800d3e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d3ea:	4b11      	ldr	r3, [pc, #68]	@ (800d430 <vPortEnterCritical+0x64>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	3301      	adds	r3, #1
 800d3f0:	4a0f      	ldr	r2, [pc, #60]	@ (800d430 <vPortEnterCritical+0x64>)
 800d3f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d3f4:	4b0e      	ldr	r3, [pc, #56]	@ (800d430 <vPortEnterCritical+0x64>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	d112      	bne.n	800d422 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d3fc:	4b0d      	ldr	r3, [pc, #52]	@ (800d434 <vPortEnterCritical+0x68>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	b2db      	uxtb	r3, r3
 800d402:	2b00      	cmp	r3, #0
 800d404:	d00d      	beq.n	800d422 <vPortEnterCritical+0x56>
	__asm volatile
 800d406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d40a:	b672      	cpsid	i
 800d40c:	f383 8811 	msr	BASEPRI, r3
 800d410:	f3bf 8f6f 	isb	sy
 800d414:	f3bf 8f4f 	dsb	sy
 800d418:	b662      	cpsie	i
 800d41a:	603b      	str	r3, [r7, #0]
}
 800d41c:	bf00      	nop
 800d41e:	bf00      	nop
 800d420:	e7fd      	b.n	800d41e <vPortEnterCritical+0x52>
	}
}
 800d422:	bf00      	nop
 800d424:	370c      	adds	r7, #12
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr
 800d42e:	bf00      	nop
 800d430:	200000ac 	.word	0x200000ac
 800d434:	e000ed04 	.word	0xe000ed04

0800d438 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d438:	b480      	push	{r7}
 800d43a:	b083      	sub	sp, #12
 800d43c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d43e:	4b13      	ldr	r3, [pc, #76]	@ (800d48c <vPortExitCritical+0x54>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d10d      	bne.n	800d462 <vPortExitCritical+0x2a>
	__asm volatile
 800d446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d44a:	b672      	cpsid	i
 800d44c:	f383 8811 	msr	BASEPRI, r3
 800d450:	f3bf 8f6f 	isb	sy
 800d454:	f3bf 8f4f 	dsb	sy
 800d458:	b662      	cpsie	i
 800d45a:	607b      	str	r3, [r7, #4]
}
 800d45c:	bf00      	nop
 800d45e:	bf00      	nop
 800d460:	e7fd      	b.n	800d45e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d462:	4b0a      	ldr	r3, [pc, #40]	@ (800d48c <vPortExitCritical+0x54>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	3b01      	subs	r3, #1
 800d468:	4a08      	ldr	r2, [pc, #32]	@ (800d48c <vPortExitCritical+0x54>)
 800d46a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d46c:	4b07      	ldr	r3, [pc, #28]	@ (800d48c <vPortExitCritical+0x54>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d105      	bne.n	800d480 <vPortExitCritical+0x48>
 800d474:	2300      	movs	r3, #0
 800d476:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	f383 8811 	msr	BASEPRI, r3
}
 800d47e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d480:	bf00      	nop
 800d482:	370c      	adds	r7, #12
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr
 800d48c:	200000ac 	.word	0x200000ac

0800d490 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d490:	f3ef 8009 	mrs	r0, PSP
 800d494:	f3bf 8f6f 	isb	sy
 800d498:	4b15      	ldr	r3, [pc, #84]	@ (800d4f0 <pxCurrentTCBConst>)
 800d49a:	681a      	ldr	r2, [r3, #0]
 800d49c:	f01e 0f10 	tst.w	lr, #16
 800d4a0:	bf08      	it	eq
 800d4a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d4a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4aa:	6010      	str	r0, [r2, #0]
 800d4ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d4b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d4b4:	b672      	cpsid	i
 800d4b6:	f380 8811 	msr	BASEPRI, r0
 800d4ba:	f3bf 8f4f 	dsb	sy
 800d4be:	f3bf 8f6f 	isb	sy
 800d4c2:	b662      	cpsie	i
 800d4c4:	f7ff f9d2 	bl	800c86c <vTaskSwitchContext>
 800d4c8:	f04f 0000 	mov.w	r0, #0
 800d4cc:	f380 8811 	msr	BASEPRI, r0
 800d4d0:	bc09      	pop	{r0, r3}
 800d4d2:	6819      	ldr	r1, [r3, #0]
 800d4d4:	6808      	ldr	r0, [r1, #0]
 800d4d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4da:	f01e 0f10 	tst.w	lr, #16
 800d4de:	bf08      	it	eq
 800d4e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d4e4:	f380 8809 	msr	PSP, r0
 800d4e8:	f3bf 8f6f 	isb	sy
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop

0800d4f0 <pxCurrentTCBConst>:
 800d4f0:	20000a00 	.word	0x20000a00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d4f4:	bf00      	nop
 800d4f6:	bf00      	nop

0800d4f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
	__asm volatile
 800d4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d502:	b672      	cpsid	i
 800d504:	f383 8811 	msr	BASEPRI, r3
 800d508:	f3bf 8f6f 	isb	sy
 800d50c:	f3bf 8f4f 	dsb	sy
 800d510:	b662      	cpsie	i
 800d512:	607b      	str	r3, [r7, #4]
}
 800d514:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d516:	f7ff f8ed 	bl	800c6f4 <xTaskIncrementTick>
 800d51a:	4603      	mov	r3, r0
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d003      	beq.n	800d528 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d520:	4b06      	ldr	r3, [pc, #24]	@ (800d53c <SysTick_Handler+0x44>)
 800d522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d526:	601a      	str	r2, [r3, #0]
 800d528:	2300      	movs	r3, #0
 800d52a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	f383 8811 	msr	BASEPRI, r3
}
 800d532:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d534:	bf00      	nop
 800d536:	3708      	adds	r7, #8
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	e000ed04 	.word	0xe000ed04

0800d540 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d540:	b480      	push	{r7}
 800d542:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d544:	4b0b      	ldr	r3, [pc, #44]	@ (800d574 <vPortSetupTimerInterrupt+0x34>)
 800d546:	2200      	movs	r2, #0
 800d548:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d54a:	4b0b      	ldr	r3, [pc, #44]	@ (800d578 <vPortSetupTimerInterrupt+0x38>)
 800d54c:	2200      	movs	r2, #0
 800d54e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d550:	4b0a      	ldr	r3, [pc, #40]	@ (800d57c <vPortSetupTimerInterrupt+0x3c>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4a0a      	ldr	r2, [pc, #40]	@ (800d580 <vPortSetupTimerInterrupt+0x40>)
 800d556:	fba2 2303 	umull	r2, r3, r2, r3
 800d55a:	099b      	lsrs	r3, r3, #6
 800d55c:	4a09      	ldr	r2, [pc, #36]	@ (800d584 <vPortSetupTimerInterrupt+0x44>)
 800d55e:	3b01      	subs	r3, #1
 800d560:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d562:	4b04      	ldr	r3, [pc, #16]	@ (800d574 <vPortSetupTimerInterrupt+0x34>)
 800d564:	2207      	movs	r2, #7
 800d566:	601a      	str	r2, [r3, #0]
}
 800d568:	bf00      	nop
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr
 800d572:	bf00      	nop
 800d574:	e000e010 	.word	0xe000e010
 800d578:	e000e018 	.word	0xe000e018
 800d57c:	20000000 	.word	0x20000000
 800d580:	10624dd3 	.word	0x10624dd3
 800d584:	e000e014 	.word	0xe000e014

0800d588 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d588:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d598 <vPortEnableVFP+0x10>
 800d58c:	6801      	ldr	r1, [r0, #0]
 800d58e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d592:	6001      	str	r1, [r0, #0]
 800d594:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d596:	bf00      	nop
 800d598:	e000ed88 	.word	0xe000ed88

0800d59c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d59c:	b480      	push	{r7}
 800d59e:	b085      	sub	sp, #20
 800d5a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d5a2:	f3ef 8305 	mrs	r3, IPSR
 800d5a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2b0f      	cmp	r3, #15
 800d5ac:	d917      	bls.n	800d5de <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d5ae:	4a1a      	ldr	r2, [pc, #104]	@ (800d618 <vPortValidateInterruptPriority+0x7c>)
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	4413      	add	r3, r2
 800d5b4:	781b      	ldrb	r3, [r3, #0]
 800d5b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d5b8:	4b18      	ldr	r3, [pc, #96]	@ (800d61c <vPortValidateInterruptPriority+0x80>)
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	7afa      	ldrb	r2, [r7, #11]
 800d5be:	429a      	cmp	r2, r3
 800d5c0:	d20d      	bcs.n	800d5de <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800d5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5c6:	b672      	cpsid	i
 800d5c8:	f383 8811 	msr	BASEPRI, r3
 800d5cc:	f3bf 8f6f 	isb	sy
 800d5d0:	f3bf 8f4f 	dsb	sy
 800d5d4:	b662      	cpsie	i
 800d5d6:	607b      	str	r3, [r7, #4]
}
 800d5d8:	bf00      	nop
 800d5da:	bf00      	nop
 800d5dc:	e7fd      	b.n	800d5da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d5de:	4b10      	ldr	r3, [pc, #64]	@ (800d620 <vPortValidateInterruptPriority+0x84>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d5e6:	4b0f      	ldr	r3, [pc, #60]	@ (800d624 <vPortValidateInterruptPriority+0x88>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d90d      	bls.n	800d60a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800d5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5f2:	b672      	cpsid	i
 800d5f4:	f383 8811 	msr	BASEPRI, r3
 800d5f8:	f3bf 8f6f 	isb	sy
 800d5fc:	f3bf 8f4f 	dsb	sy
 800d600:	b662      	cpsie	i
 800d602:	603b      	str	r3, [r7, #0]
}
 800d604:	bf00      	nop
 800d606:	bf00      	nop
 800d608:	e7fd      	b.n	800d606 <vPortValidateInterruptPriority+0x6a>
	}
 800d60a:	bf00      	nop
 800d60c:	3714      	adds	r7, #20
 800d60e:	46bd      	mov	sp, r7
 800d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d614:	4770      	bx	lr
 800d616:	bf00      	nop
 800d618:	e000e3f0 	.word	0xe000e3f0
 800d61c:	20000b2c 	.word	0x20000b2c
 800d620:	e000ed0c 	.word	0xe000ed0c
 800d624:	20000b30 	.word	0x20000b30

0800d628 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b08a      	sub	sp, #40	@ 0x28
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d630:	2300      	movs	r3, #0
 800d632:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d634:	f7fe ff8e 	bl	800c554 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d638:	4b5d      	ldr	r3, [pc, #372]	@ (800d7b0 <pvPortMalloc+0x188>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d101      	bne.n	800d644 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d640:	f000 f920 	bl	800d884 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d644:	4b5b      	ldr	r3, [pc, #364]	@ (800d7b4 <pvPortMalloc+0x18c>)
 800d646:	681a      	ldr	r2, [r3, #0]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	4013      	ands	r3, r2
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	f040 8094 	bne.w	800d77a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d020      	beq.n	800d69a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800d658:	2208      	movs	r2, #8
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	4413      	add	r3, r2
 800d65e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f003 0307 	and.w	r3, r3, #7
 800d666:	2b00      	cmp	r3, #0
 800d668:	d017      	beq.n	800d69a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f023 0307 	bic.w	r3, r3, #7
 800d670:	3308      	adds	r3, #8
 800d672:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f003 0307 	and.w	r3, r3, #7
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d00d      	beq.n	800d69a <pvPortMalloc+0x72>
	__asm volatile
 800d67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d682:	b672      	cpsid	i
 800d684:	f383 8811 	msr	BASEPRI, r3
 800d688:	f3bf 8f6f 	isb	sy
 800d68c:	f3bf 8f4f 	dsb	sy
 800d690:	b662      	cpsie	i
 800d692:	617b      	str	r3, [r7, #20]
}
 800d694:	bf00      	nop
 800d696:	bf00      	nop
 800d698:	e7fd      	b.n	800d696 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d06c      	beq.n	800d77a <pvPortMalloc+0x152>
 800d6a0:	4b45      	ldr	r3, [pc, #276]	@ (800d7b8 <pvPortMalloc+0x190>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d867      	bhi.n	800d77a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d6aa:	4b44      	ldr	r3, [pc, #272]	@ (800d7bc <pvPortMalloc+0x194>)
 800d6ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d6ae:	4b43      	ldr	r3, [pc, #268]	@ (800d7bc <pvPortMalloc+0x194>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d6b4:	e004      	b.n	800d6c0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800d6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	429a      	cmp	r2, r3
 800d6c8:	d903      	bls.n	800d6d2 <pvPortMalloc+0xaa>
 800d6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d1f1      	bne.n	800d6b6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d6d2:	4b37      	ldr	r3, [pc, #220]	@ (800d7b0 <pvPortMalloc+0x188>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d04e      	beq.n	800d77a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d6dc:	6a3b      	ldr	r3, [r7, #32]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	2208      	movs	r2, #8
 800d6e2:	4413      	add	r3, r2
 800d6e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	6a3b      	ldr	r3, [r7, #32]
 800d6ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f0:	685a      	ldr	r2, [r3, #4]
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	1ad2      	subs	r2, r2, r3
 800d6f6:	2308      	movs	r3, #8
 800d6f8:	005b      	lsls	r3, r3, #1
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d922      	bls.n	800d744 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d6fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	4413      	add	r3, r2
 800d704:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d706:	69bb      	ldr	r3, [r7, #24]
 800d708:	f003 0307 	and.w	r3, r3, #7
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d00d      	beq.n	800d72c <pvPortMalloc+0x104>
	__asm volatile
 800d710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d714:	b672      	cpsid	i
 800d716:	f383 8811 	msr	BASEPRI, r3
 800d71a:	f3bf 8f6f 	isb	sy
 800d71e:	f3bf 8f4f 	dsb	sy
 800d722:	b662      	cpsie	i
 800d724:	613b      	str	r3, [r7, #16]
}
 800d726:	bf00      	nop
 800d728:	bf00      	nop
 800d72a:	e7fd      	b.n	800d728 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d72e:	685a      	ldr	r2, [r3, #4]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	1ad2      	subs	r2, r2, r3
 800d734:	69bb      	ldr	r3, [r7, #24]
 800d736:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d73a:	687a      	ldr	r2, [r7, #4]
 800d73c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d73e:	69b8      	ldr	r0, [r7, #24]
 800d740:	f000 f902 	bl	800d948 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d744:	4b1c      	ldr	r3, [pc, #112]	@ (800d7b8 <pvPortMalloc+0x190>)
 800d746:	681a      	ldr	r2, [r3, #0]
 800d748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	1ad3      	subs	r3, r2, r3
 800d74e:	4a1a      	ldr	r2, [pc, #104]	@ (800d7b8 <pvPortMalloc+0x190>)
 800d750:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d752:	4b19      	ldr	r3, [pc, #100]	@ (800d7b8 <pvPortMalloc+0x190>)
 800d754:	681a      	ldr	r2, [r3, #0]
 800d756:	4b1a      	ldr	r3, [pc, #104]	@ (800d7c0 <pvPortMalloc+0x198>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d203      	bcs.n	800d766 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d75e:	4b16      	ldr	r3, [pc, #88]	@ (800d7b8 <pvPortMalloc+0x190>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4a17      	ldr	r2, [pc, #92]	@ (800d7c0 <pvPortMalloc+0x198>)
 800d764:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d768:	685a      	ldr	r2, [r3, #4]
 800d76a:	4b12      	ldr	r3, [pc, #72]	@ (800d7b4 <pvPortMalloc+0x18c>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	431a      	orrs	r2, r3
 800d770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d772:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d776:	2200      	movs	r2, #0
 800d778:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d77a:	f7fe fef9 	bl	800c570 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d77e:	69fb      	ldr	r3, [r7, #28]
 800d780:	f003 0307 	and.w	r3, r3, #7
 800d784:	2b00      	cmp	r3, #0
 800d786:	d00d      	beq.n	800d7a4 <pvPortMalloc+0x17c>
	__asm volatile
 800d788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d78c:	b672      	cpsid	i
 800d78e:	f383 8811 	msr	BASEPRI, r3
 800d792:	f3bf 8f6f 	isb	sy
 800d796:	f3bf 8f4f 	dsb	sy
 800d79a:	b662      	cpsie	i
 800d79c:	60fb      	str	r3, [r7, #12]
}
 800d79e:	bf00      	nop
 800d7a0:	bf00      	nop
 800d7a2:	e7fd      	b.n	800d7a0 <pvPortMalloc+0x178>
	return pvReturn;
 800d7a4:	69fb      	ldr	r3, [r7, #28]
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3728      	adds	r7, #40	@ 0x28
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	2000473c 	.word	0x2000473c
 800d7b4:	20004748 	.word	0x20004748
 800d7b8:	20004740 	.word	0x20004740
 800d7bc:	20004734 	.word	0x20004734
 800d7c0:	20004744 	.word	0x20004744

0800d7c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b086      	sub	sp, #24
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d04e      	beq.n	800d874 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d7d6:	2308      	movs	r3, #8
 800d7d8:	425b      	negs	r3, r3
 800d7da:	697a      	ldr	r2, [r7, #20]
 800d7dc:	4413      	add	r3, r2
 800d7de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	685a      	ldr	r2, [r3, #4]
 800d7e8:	4b24      	ldr	r3, [pc, #144]	@ (800d87c <vPortFree+0xb8>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4013      	ands	r3, r2
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d10d      	bne.n	800d80e <vPortFree+0x4a>
	__asm volatile
 800d7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7f6:	b672      	cpsid	i
 800d7f8:	f383 8811 	msr	BASEPRI, r3
 800d7fc:	f3bf 8f6f 	isb	sy
 800d800:	f3bf 8f4f 	dsb	sy
 800d804:	b662      	cpsie	i
 800d806:	60fb      	str	r3, [r7, #12]
}
 800d808:	bf00      	nop
 800d80a:	bf00      	nop
 800d80c:	e7fd      	b.n	800d80a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d00d      	beq.n	800d832 <vPortFree+0x6e>
	__asm volatile
 800d816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d81a:	b672      	cpsid	i
 800d81c:	f383 8811 	msr	BASEPRI, r3
 800d820:	f3bf 8f6f 	isb	sy
 800d824:	f3bf 8f4f 	dsb	sy
 800d828:	b662      	cpsie	i
 800d82a:	60bb      	str	r3, [r7, #8]
}
 800d82c:	bf00      	nop
 800d82e:	bf00      	nop
 800d830:	e7fd      	b.n	800d82e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	685a      	ldr	r2, [r3, #4]
 800d836:	4b11      	ldr	r3, [pc, #68]	@ (800d87c <vPortFree+0xb8>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	4013      	ands	r3, r2
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d019      	beq.n	800d874 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d840:	693b      	ldr	r3, [r7, #16]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d115      	bne.n	800d874 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	685a      	ldr	r2, [r3, #4]
 800d84c:	4b0b      	ldr	r3, [pc, #44]	@ (800d87c <vPortFree+0xb8>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	43db      	mvns	r3, r3
 800d852:	401a      	ands	r2, r3
 800d854:	693b      	ldr	r3, [r7, #16]
 800d856:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d858:	f7fe fe7c 	bl	800c554 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d85c:	693b      	ldr	r3, [r7, #16]
 800d85e:	685a      	ldr	r2, [r3, #4]
 800d860:	4b07      	ldr	r3, [pc, #28]	@ (800d880 <vPortFree+0xbc>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4413      	add	r3, r2
 800d866:	4a06      	ldr	r2, [pc, #24]	@ (800d880 <vPortFree+0xbc>)
 800d868:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d86a:	6938      	ldr	r0, [r7, #16]
 800d86c:	f000 f86c 	bl	800d948 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d870:	f7fe fe7e 	bl	800c570 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d874:	bf00      	nop
 800d876:	3718      	adds	r7, #24
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}
 800d87c:	20004748 	.word	0x20004748
 800d880:	20004740 	.word	0x20004740

0800d884 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d88a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d88e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d890:	4b27      	ldr	r3, [pc, #156]	@ (800d930 <prvHeapInit+0xac>)
 800d892:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	f003 0307 	and.w	r3, r3, #7
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d00c      	beq.n	800d8b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	3307      	adds	r3, #7
 800d8a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f023 0307 	bic.w	r3, r3, #7
 800d8aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d8ac:	68ba      	ldr	r2, [r7, #8]
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	1ad3      	subs	r3, r2, r3
 800d8b2:	4a1f      	ldr	r2, [pc, #124]	@ (800d930 <prvHeapInit+0xac>)
 800d8b4:	4413      	add	r3, r2
 800d8b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d8bc:	4a1d      	ldr	r2, [pc, #116]	@ (800d934 <prvHeapInit+0xb0>)
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d8c2:	4b1c      	ldr	r3, [pc, #112]	@ (800d934 <prvHeapInit+0xb0>)
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	68ba      	ldr	r2, [r7, #8]
 800d8cc:	4413      	add	r3, r2
 800d8ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d8d0:	2208      	movs	r2, #8
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	1a9b      	subs	r3, r3, r2
 800d8d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f023 0307 	bic.w	r3, r3, #7
 800d8de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	4a15      	ldr	r2, [pc, #84]	@ (800d938 <prvHeapInit+0xb4>)
 800d8e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d8e6:	4b14      	ldr	r3, [pc, #80]	@ (800d938 <prvHeapInit+0xb4>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d8ee:	4b12      	ldr	r3, [pc, #72]	@ (800d938 <prvHeapInit+0xb4>)
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	68fa      	ldr	r2, [r7, #12]
 800d8fe:	1ad2      	subs	r2, r2, r3
 800d900:	683b      	ldr	r3, [r7, #0]
 800d902:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d904:	4b0c      	ldr	r3, [pc, #48]	@ (800d938 <prvHeapInit+0xb4>)
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	685b      	ldr	r3, [r3, #4]
 800d910:	4a0a      	ldr	r2, [pc, #40]	@ (800d93c <prvHeapInit+0xb8>)
 800d912:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	685b      	ldr	r3, [r3, #4]
 800d918:	4a09      	ldr	r2, [pc, #36]	@ (800d940 <prvHeapInit+0xbc>)
 800d91a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d91c:	4b09      	ldr	r3, [pc, #36]	@ (800d944 <prvHeapInit+0xc0>)
 800d91e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d922:	601a      	str	r2, [r3, #0]
}
 800d924:	bf00      	nop
 800d926:	3714      	adds	r7, #20
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr
 800d930:	20000b34 	.word	0x20000b34
 800d934:	20004734 	.word	0x20004734
 800d938:	2000473c 	.word	0x2000473c
 800d93c:	20004744 	.word	0x20004744
 800d940:	20004740 	.word	0x20004740
 800d944:	20004748 	.word	0x20004748

0800d948 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d948:	b480      	push	{r7}
 800d94a:	b085      	sub	sp, #20
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d950:	4b28      	ldr	r3, [pc, #160]	@ (800d9f4 <prvInsertBlockIntoFreeList+0xac>)
 800d952:	60fb      	str	r3, [r7, #12]
 800d954:	e002      	b.n	800d95c <prvInsertBlockIntoFreeList+0x14>
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	60fb      	str	r3, [r7, #12]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	687a      	ldr	r2, [r7, #4]
 800d962:	429a      	cmp	r2, r3
 800d964:	d8f7      	bhi.n	800d956 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	68ba      	ldr	r2, [r7, #8]
 800d970:	4413      	add	r3, r2
 800d972:	687a      	ldr	r2, [r7, #4]
 800d974:	429a      	cmp	r2, r3
 800d976:	d108      	bne.n	800d98a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	685a      	ldr	r2, [r3, #4]
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	441a      	add	r2, r3
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	68ba      	ldr	r2, [r7, #8]
 800d994:	441a      	add	r2, r3
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d118      	bne.n	800d9d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681a      	ldr	r2, [r3, #0]
 800d9a2:	4b15      	ldr	r3, [pc, #84]	@ (800d9f8 <prvInsertBlockIntoFreeList+0xb0>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d00d      	beq.n	800d9c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	685a      	ldr	r2, [r3, #4]
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	685b      	ldr	r3, [r3, #4]
 800d9b4:	441a      	add	r2, r3
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	681a      	ldr	r2, [r3, #0]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	601a      	str	r2, [r3, #0]
 800d9c4:	e008      	b.n	800d9d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d9c6:	4b0c      	ldr	r3, [pc, #48]	@ (800d9f8 <prvInsertBlockIntoFreeList+0xb0>)
 800d9c8:	681a      	ldr	r2, [r3, #0]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	601a      	str	r2, [r3, #0]
 800d9ce:	e003      	b.n	800d9d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681a      	ldr	r2, [r3, #0]
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d9d8:	68fa      	ldr	r2, [r7, #12]
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d002      	beq.n	800d9e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	687a      	ldr	r2, [r7, #4]
 800d9e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9e6:	bf00      	nop
 800d9e8:	3714      	adds	r7, #20
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr
 800d9f2:	bf00      	nop
 800d9f4:	20004734 	.word	0x20004734
 800d9f8:	2000473c 	.word	0x2000473c

0800d9fc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800da06:	f00a fd0f 	bl	8018428 <sys_timeouts_sleeptime>
 800da0a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da12:	d10b      	bne.n	800da2c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800da14:	4813      	ldr	r0, [pc, #76]	@ (800da64 <tcpip_timeouts_mbox_fetch+0x68>)
 800da16:	f010 f83e 	bl	801da96 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800da1a:	2200      	movs	r2, #0
 800da1c:	6839      	ldr	r1, [r7, #0]
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f00f ffb0 	bl	801d984 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800da24:	480f      	ldr	r0, [pc, #60]	@ (800da64 <tcpip_timeouts_mbox_fetch+0x68>)
 800da26:	f010 f827 	bl	801da78 <sys_mutex_lock>
    return;
 800da2a:	e018      	b.n	800da5e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d102      	bne.n	800da38 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800da32:	f00a fcbf 	bl	80183b4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800da36:	e7e6      	b.n	800da06 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800da38:	480a      	ldr	r0, [pc, #40]	@ (800da64 <tcpip_timeouts_mbox_fetch+0x68>)
 800da3a:	f010 f82c 	bl	801da96 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800da3e:	68fa      	ldr	r2, [r7, #12]
 800da40:	6839      	ldr	r1, [r7, #0]
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f00f ff9e 	bl	801d984 <sys_arch_mbox_fetch>
 800da48:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800da4a:	4806      	ldr	r0, [pc, #24]	@ (800da64 <tcpip_timeouts_mbox_fetch+0x68>)
 800da4c:	f010 f814 	bl	801da78 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da56:	d102      	bne.n	800da5e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800da58:	f00a fcac 	bl	80183b4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800da5c:	e7d3      	b.n	800da06 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800da5e:	3710      	adds	r7, #16
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}
 800da64:	20004758 	.word	0x20004758

0800da68 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800da70:	4810      	ldr	r0, [pc, #64]	@ (800dab4 <tcpip_thread+0x4c>)
 800da72:	f010 f801 	bl	801da78 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800da76:	4b10      	ldr	r3, [pc, #64]	@ (800dab8 <tcpip_thread+0x50>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d005      	beq.n	800da8a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800da7e:	4b0e      	ldr	r3, [pc, #56]	@ (800dab8 <tcpip_thread+0x50>)
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	4a0e      	ldr	r2, [pc, #56]	@ (800dabc <tcpip_thread+0x54>)
 800da84:	6812      	ldr	r2, [r2, #0]
 800da86:	4610      	mov	r0, r2
 800da88:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800da8a:	f107 030c 	add.w	r3, r7, #12
 800da8e:	4619      	mov	r1, r3
 800da90:	480b      	ldr	r0, [pc, #44]	@ (800dac0 <tcpip_thread+0x58>)
 800da92:	f7ff ffb3 	bl	800d9fc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d106      	bne.n	800daaa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800da9c:	4b09      	ldr	r3, [pc, #36]	@ (800dac4 <tcpip_thread+0x5c>)
 800da9e:	2291      	movs	r2, #145	@ 0x91
 800daa0:	4909      	ldr	r1, [pc, #36]	@ (800dac8 <tcpip_thread+0x60>)
 800daa2:	480a      	ldr	r0, [pc, #40]	@ (800dacc <tcpip_thread+0x64>)
 800daa4:	f010 ff9c 	bl	801e9e0 <iprintf>
      continue;
 800daa8:	e003      	b.n	800dab2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	4618      	mov	r0, r3
 800daae:	f000 f80f 	bl	800dad0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800dab2:	e7ea      	b.n	800da8a <tcpip_thread+0x22>
 800dab4:	20004758 	.word	0x20004758
 800dab8:	2000474c 	.word	0x2000474c
 800dabc:	20004750 	.word	0x20004750
 800dac0:	20004754 	.word	0x20004754
 800dac4:	0801fdbc 	.word	0x0801fdbc
 800dac8:	0801fdec 	.word	0x0801fdec
 800dacc:	0801fe0c 	.word	0x0801fe0c

0800dad0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b082      	sub	sp, #8
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	781b      	ldrb	r3, [r3, #0]
 800dadc:	2b02      	cmp	r3, #2
 800dade:	d026      	beq.n	800db2e <tcpip_thread_handle_msg+0x5e>
 800dae0:	2b02      	cmp	r3, #2
 800dae2:	dc2b      	bgt.n	800db3c <tcpip_thread_handle_msg+0x6c>
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d002      	beq.n	800daee <tcpip_thread_handle_msg+0x1e>
 800dae8:	2b01      	cmp	r3, #1
 800daea:	d015      	beq.n	800db18 <tcpip_thread_handle_msg+0x48>
 800daec:	e026      	b.n	800db3c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	687a      	ldr	r2, [r7, #4]
 800daf4:	6850      	ldr	r0, [r2, #4]
 800daf6:	687a      	ldr	r2, [r7, #4]
 800daf8:	6892      	ldr	r2, [r2, #8]
 800dafa:	4611      	mov	r1, r2
 800dafc:	4798      	blx	r3
 800dafe:	4603      	mov	r3, r0
 800db00:	2b00      	cmp	r3, #0
 800db02:	d004      	beq.n	800db0e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	685b      	ldr	r3, [r3, #4]
 800db08:	4618      	mov	r0, r3
 800db0a:	f004 fd49 	bl	80125a0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800db0e:	6879      	ldr	r1, [r7, #4]
 800db10:	2009      	movs	r0, #9
 800db12:	f003 fe59 	bl	80117c8 <memp_free>
      break;
 800db16:	e018      	b.n	800db4a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	685b      	ldr	r3, [r3, #4]
 800db1c:	687a      	ldr	r2, [r7, #4]
 800db1e:	6892      	ldr	r2, [r2, #8]
 800db20:	4610      	mov	r0, r2
 800db22:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800db24:	6879      	ldr	r1, [r7, #4]
 800db26:	2008      	movs	r0, #8
 800db28:	f003 fe4e 	bl	80117c8 <memp_free>
      break;
 800db2c:	e00d      	b.n	800db4a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	687a      	ldr	r2, [r7, #4]
 800db34:	6892      	ldr	r2, [r2, #8]
 800db36:	4610      	mov	r0, r2
 800db38:	4798      	blx	r3
      break;
 800db3a:	e006      	b.n	800db4a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800db3c:	4b05      	ldr	r3, [pc, #20]	@ (800db54 <tcpip_thread_handle_msg+0x84>)
 800db3e:	22cf      	movs	r2, #207	@ 0xcf
 800db40:	4905      	ldr	r1, [pc, #20]	@ (800db58 <tcpip_thread_handle_msg+0x88>)
 800db42:	4806      	ldr	r0, [pc, #24]	@ (800db5c <tcpip_thread_handle_msg+0x8c>)
 800db44:	f010 ff4c 	bl	801e9e0 <iprintf>
      break;
 800db48:	bf00      	nop
  }
}
 800db4a:	bf00      	nop
 800db4c:	3708      	adds	r7, #8
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop
 800db54:	0801fdbc 	.word	0x0801fdbc
 800db58:	0801fdec 	.word	0x0801fdec
 800db5c:	0801fe0c 	.word	0x0801fe0c

0800db60 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b086      	sub	sp, #24
 800db64:	af00      	add	r7, sp, #0
 800db66:	60f8      	str	r0, [r7, #12]
 800db68:	60b9      	str	r1, [r7, #8]
 800db6a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800db6c:	481a      	ldr	r0, [pc, #104]	@ (800dbd8 <tcpip_inpkt+0x78>)
 800db6e:	f00f ff48 	bl	801da02 <sys_mbox_valid>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d105      	bne.n	800db84 <tcpip_inpkt+0x24>
 800db78:	4b18      	ldr	r3, [pc, #96]	@ (800dbdc <tcpip_inpkt+0x7c>)
 800db7a:	22fc      	movs	r2, #252	@ 0xfc
 800db7c:	4918      	ldr	r1, [pc, #96]	@ (800dbe0 <tcpip_inpkt+0x80>)
 800db7e:	4819      	ldr	r0, [pc, #100]	@ (800dbe4 <tcpip_inpkt+0x84>)
 800db80:	f010 ff2e 	bl	801e9e0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800db84:	2009      	movs	r0, #9
 800db86:	f003 fdaf 	bl	80116e8 <memp_malloc>
 800db8a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d102      	bne.n	800db98 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800db92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800db96:	e01a      	b.n	800dbce <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	2200      	movs	r2, #0
 800db9c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	68fa      	ldr	r2, [r7, #12]
 800dba2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	68ba      	ldr	r2, [r7, #8]
 800dba8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	687a      	ldr	r2, [r7, #4]
 800dbae:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800dbb0:	6979      	ldr	r1, [r7, #20]
 800dbb2:	4809      	ldr	r0, [pc, #36]	@ (800dbd8 <tcpip_inpkt+0x78>)
 800dbb4:	f00f fecc 	bl	801d950 <sys_mbox_trypost>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d006      	beq.n	800dbcc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800dbbe:	6979      	ldr	r1, [r7, #20]
 800dbc0:	2009      	movs	r0, #9
 800dbc2:	f003 fe01 	bl	80117c8 <memp_free>
    return ERR_MEM;
 800dbc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dbca:	e000      	b.n	800dbce <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800dbcc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3718      	adds	r7, #24
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	20004754 	.word	0x20004754
 800dbdc:	0801fdbc 	.word	0x0801fdbc
 800dbe0:	0801fe34 	.word	0x0801fe34
 800dbe4:	0801fe0c 	.word	0x0801fe0c

0800dbe8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dbf8:	f003 0318 	and.w	r3, r3, #24
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d006      	beq.n	800dc0e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800dc00:	4a08      	ldr	r2, [pc, #32]	@ (800dc24 <tcpip_input+0x3c>)
 800dc02:	6839      	ldr	r1, [r7, #0]
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f7ff ffab 	bl	800db60 <tcpip_inpkt>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	e005      	b.n	800dc1a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800dc0e:	4a06      	ldr	r2, [pc, #24]	@ (800dc28 <tcpip_input+0x40>)
 800dc10:	6839      	ldr	r1, [r7, #0]
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f7ff ffa4 	bl	800db60 <tcpip_inpkt>
 800dc18:	4603      	mov	r3, r0
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3708      	adds	r7, #8
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}
 800dc22:	bf00      	nop
 800dc24:	0801d761 	.word	0x0801d761
 800dc28:	0801c4d1 	.word	0x0801c4d1

0800dc2c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b084      	sub	sp, #16
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800dc36:	4819      	ldr	r0, [pc, #100]	@ (800dc9c <tcpip_try_callback+0x70>)
 800dc38:	f00f fee3 	bl	801da02 <sys_mbox_valid>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d106      	bne.n	800dc50 <tcpip_try_callback+0x24>
 800dc42:	4b17      	ldr	r3, [pc, #92]	@ (800dca0 <tcpip_try_callback+0x74>)
 800dc44:	f240 125d 	movw	r2, #349	@ 0x15d
 800dc48:	4916      	ldr	r1, [pc, #88]	@ (800dca4 <tcpip_try_callback+0x78>)
 800dc4a:	4817      	ldr	r0, [pc, #92]	@ (800dca8 <tcpip_try_callback+0x7c>)
 800dc4c:	f010 fec8 	bl	801e9e0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800dc50:	2008      	movs	r0, #8
 800dc52:	f003 fd49 	bl	80116e8 <memp_malloc>
 800dc56:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d102      	bne.n	800dc64 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800dc5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dc62:	e017      	b.n	800dc94 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2201      	movs	r2, #1
 800dc68:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	687a      	ldr	r2, [r7, #4]
 800dc6e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	683a      	ldr	r2, [r7, #0]
 800dc74:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800dc76:	68f9      	ldr	r1, [r7, #12]
 800dc78:	4808      	ldr	r0, [pc, #32]	@ (800dc9c <tcpip_try_callback+0x70>)
 800dc7a:	f00f fe69 	bl	801d950 <sys_mbox_trypost>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d006      	beq.n	800dc92 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800dc84:	68f9      	ldr	r1, [r7, #12]
 800dc86:	2008      	movs	r0, #8
 800dc88:	f003 fd9e 	bl	80117c8 <memp_free>
    return ERR_MEM;
 800dc8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dc90:	e000      	b.n	800dc94 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800dc92:	2300      	movs	r3, #0
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3710      	adds	r7, #16
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	20004754 	.word	0x20004754
 800dca0:	0801fdbc 	.word	0x0801fdbc
 800dca4:	0801fe34 	.word	0x0801fe34
 800dca8:	0801fe0c 	.word	0x0801fe0c

0800dcac <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b084      	sub	sp, #16
 800dcb0:	af02      	add	r7, sp, #8
 800dcb2:	6078      	str	r0, [r7, #4]
 800dcb4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800dcb6:	f003 f86c 	bl	8010d92 <lwip_init>

  tcpip_init_done = initfunc;
 800dcba:	4a17      	ldr	r2, [pc, #92]	@ (800dd18 <tcpip_init+0x6c>)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800dcc0:	4a16      	ldr	r2, [pc, #88]	@ (800dd1c <tcpip_init+0x70>)
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800dcc6:	2106      	movs	r1, #6
 800dcc8:	4815      	ldr	r0, [pc, #84]	@ (800dd20 <tcpip_init+0x74>)
 800dcca:	f00f fe1f 	bl	801d90c <sys_mbox_new>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d006      	beq.n	800dce2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800dcd4:	4b13      	ldr	r3, [pc, #76]	@ (800dd24 <tcpip_init+0x78>)
 800dcd6:	f240 2261 	movw	r2, #609	@ 0x261
 800dcda:	4913      	ldr	r1, [pc, #76]	@ (800dd28 <tcpip_init+0x7c>)
 800dcdc:	4813      	ldr	r0, [pc, #76]	@ (800dd2c <tcpip_init+0x80>)
 800dcde:	f010 fe7f 	bl	801e9e0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800dce2:	4813      	ldr	r0, [pc, #76]	@ (800dd30 <tcpip_init+0x84>)
 800dce4:	f00f feac 	bl	801da40 <sys_mutex_new>
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d006      	beq.n	800dcfc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800dcee:	4b0d      	ldr	r3, [pc, #52]	@ (800dd24 <tcpip_init+0x78>)
 800dcf0:	f240 2265 	movw	r2, #613	@ 0x265
 800dcf4:	490f      	ldr	r1, [pc, #60]	@ (800dd34 <tcpip_init+0x88>)
 800dcf6:	480d      	ldr	r0, [pc, #52]	@ (800dd2c <tcpip_init+0x80>)
 800dcf8:	f010 fe72 	bl	801e9e0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	9300      	str	r3, [sp, #0]
 800dd00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dd04:	2200      	movs	r2, #0
 800dd06:	490c      	ldr	r1, [pc, #48]	@ (800dd38 <tcpip_init+0x8c>)
 800dd08:	480c      	ldr	r0, [pc, #48]	@ (800dd3c <tcpip_init+0x90>)
 800dd0a:	f00f fed1 	bl	801dab0 <sys_thread_new>
}
 800dd0e:	bf00      	nop
 800dd10:	3708      	adds	r7, #8
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	2000474c 	.word	0x2000474c
 800dd1c:	20004750 	.word	0x20004750
 800dd20:	20004754 	.word	0x20004754
 800dd24:	0801fdbc 	.word	0x0801fdbc
 800dd28:	0801fe44 	.word	0x0801fe44
 800dd2c:	0801fe0c 	.word	0x0801fe0c
 800dd30:	20004758 	.word	0x20004758
 800dd34:	0801fe68 	.word	0x0801fe68
 800dd38:	0800da69 	.word	0x0800da69
 800dd3c:	0801fe8c 	.word	0x0801fe8c

0800dd40 <mdns_domain_add_label_base>:
};

static err_t mdns_send_outpacket(struct mdns_outpacket *outpkt, u8_t flags);
static void mdns_probe(void *arg);

static err_t mdns_domain_add_label_base(struct mdns_domain *domain, u8_t len) {
 800dd40:	b480      	push	{r7}
 800dd42:	b083      	sub	sp, #12
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	460b      	mov	r3, r1
 800dd4a:	70fb      	strb	r3, [r7, #3]
	if (len > MDNS_LABEL_MAXLEN) {
 800dd4c:	78fb      	ldrb	r3, [r7, #3]
 800dd4e:	2b3f      	cmp	r3, #63	@ 0x3f
 800dd50:	d902      	bls.n	800dd58 <mdns_domain_add_label_base+0x18>
		return ERR_VAL;
 800dd52:	f06f 0305 	mvn.w	r3, #5
 800dd56:	e028      	b.n	800ddaa <mdns_domain_add_label_base+0x6a>
	}
	if (len > 0 && (1 + len + domain->length >= MDNS_DOMAIN_MAXLEN)) {
 800dd58:	78fb      	ldrb	r3, [r7, #3]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d00a      	beq.n	800dd74 <mdns_domain_add_label_base+0x34>
 800dd5e:	78fb      	ldrb	r3, [r7, #3]
 800dd60:	3301      	adds	r3, #1
 800dd62:	687a      	ldr	r2, [r7, #4]
 800dd64:	f8b2 2100 	ldrh.w	r2, [r2, #256]	@ 0x100
 800dd68:	4413      	add	r3, r2
 800dd6a:	2bff      	cmp	r3, #255	@ 0xff
 800dd6c:	dd02      	ble.n	800dd74 <mdns_domain_add_label_base+0x34>
		return ERR_VAL;
 800dd6e:	f06f 0305 	mvn.w	r3, #5
 800dd72:	e01a      	b.n	800ddaa <mdns_domain_add_label_base+0x6a>
	}
	/* Allow only zero marker on last byte */
	if (len == 0 && (1 + domain->length > MDNS_DOMAIN_MAXLEN)) {
 800dd74:	78fb      	ldrb	r3, [r7, #3]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d107      	bne.n	800dd8a <mdns_domain_add_label_base+0x4a>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800dd80:	2bff      	cmp	r3, #255	@ 0xff
 800dd82:	d902      	bls.n	800dd8a <mdns_domain_add_label_base+0x4a>
		return ERR_VAL;
 800dd84:	f06f 0305 	mvn.w	r3, #5
 800dd88:	e00f      	b.n	800ddaa <mdns_domain_add_label_base+0x6a>
	}
	domain->name[domain->length] = len;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800dd90:	4619      	mov	r1, r3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	78fa      	ldrb	r2, [r7, #3]
 800dd96:	545a      	strb	r2, [r3, r1]
	domain->length++;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800dd9e:	3301      	adds	r3, #1
 800dda0:	b29a      	uxth	r2, r3
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	return ERR_OK;
 800dda8:	2300      	movs	r3, #0
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	370c      	adds	r7, #12
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb4:	4770      	bx	lr

0800ddb6 <mdns_domain_add_label>:
 * @param label The label to add, like &lt;hostname&gt;, 'local', 'com' or ''
 * @param len The length of the label
 * @return ERR_OK on success, an err_t otherwise if label too long
 */
err_t mdns_domain_add_label(struct mdns_domain *domain, const char *label,
		u8_t len) {
 800ddb6:	b580      	push	{r7, lr}
 800ddb8:	b086      	sub	sp, #24
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	60f8      	str	r0, [r7, #12]
 800ddbe:	60b9      	str	r1, [r7, #8]
 800ddc0:	4613      	mov	r3, r2
 800ddc2:	71fb      	strb	r3, [r7, #7]
	err_t err = mdns_domain_add_label_base(domain, len);
 800ddc4:	79fb      	ldrb	r3, [r7, #7]
 800ddc6:	4619      	mov	r1, r3
 800ddc8:	68f8      	ldr	r0, [r7, #12]
 800ddca:	f7ff ffb9 	bl	800dd40 <mdns_domain_add_label_base>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	75fb      	strb	r3, [r7, #23]
	if (err != ERR_OK) {
 800ddd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d002      	beq.n	800dde0 <mdns_domain_add_label+0x2a>
		return err;
 800ddda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ddde:	e018      	b.n	800de12 <mdns_domain_add_label+0x5c>
	}
	if (len) {
 800dde0:	79fb      	ldrb	r3, [r7, #7]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d014      	beq.n	800de10 <mdns_domain_add_label+0x5a>
		MEMCPY(&domain->name[domain->length], label, len);
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800ddec:	461a      	mov	r2, r3
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	4413      	add	r3, r2
 800ddf2:	79fa      	ldrb	r2, [r7, #7]
 800ddf4:	68b9      	ldr	r1, [r7, #8]
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f011 f8a5 	bl	801ef46 <memcpy>
		domain->length += len;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f8b3 2100 	ldrh.w	r2, [r3, #256]	@ 0x100
 800de02:	79fb      	ldrb	r3, [r7, #7]
 800de04:	b29b      	uxth	r3, r3
 800de06:	4413      	add	r3, r2
 800de08:	b29a      	uxth	r2, r3
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	}
	return ERR_OK;
 800de10:	2300      	movs	r3, #0
}
 800de12:	4618      	mov	r0, r3
 800de14:	3718      	adds	r7, #24
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}

0800de1a <mdns_domain_add_label_pbuf>:

/**
 * Add a label part to a domain (@see mdns_domain_add_label but copy directly from pbuf)
 */
static err_t mdns_domain_add_label_pbuf(struct mdns_domain *domain,
		const struct pbuf *p, u16_t offset, u8_t len) {
 800de1a:	b580      	push	{r7, lr}
 800de1c:	b086      	sub	sp, #24
 800de1e:	af00      	add	r7, sp, #0
 800de20:	60f8      	str	r0, [r7, #12]
 800de22:	60b9      	str	r1, [r7, #8]
 800de24:	4611      	mov	r1, r2
 800de26:	461a      	mov	r2, r3
 800de28:	460b      	mov	r3, r1
 800de2a:	80fb      	strh	r3, [r7, #6]
 800de2c:	4613      	mov	r3, r2
 800de2e:	717b      	strb	r3, [r7, #5]
	err_t err = mdns_domain_add_label_base(domain, len);
 800de30:	797b      	ldrb	r3, [r7, #5]
 800de32:	4619      	mov	r1, r3
 800de34:	68f8      	ldr	r0, [r7, #12]
 800de36:	f7ff ff83 	bl	800dd40 <mdns_domain_add_label_base>
 800de3a:	4603      	mov	r3, r0
 800de3c:	75fb      	strb	r3, [r7, #23]
	if (err != ERR_OK) {
 800de3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d002      	beq.n	800de4c <mdns_domain_add_label_pbuf+0x32>
		return err;
 800de46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800de4a:	e02a      	b.n	800dea2 <mdns_domain_add_label_pbuf+0x88>
	}
	if (len) {
 800de4c:	797b      	ldrb	r3, [r7, #5]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d026      	beq.n	800dea0 <mdns_domain_add_label_pbuf+0x86>
		if (pbuf_copy_partial(p, &domain->name[domain->length], len, offset)
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800de58:	461a      	mov	r2, r3
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	1899      	adds	r1, r3, r2
 800de5e:	797b      	ldrb	r3, [r7, #5]
 800de60:	b29a      	uxth	r2, r3
 800de62:	88fb      	ldrh	r3, [r7, #6]
 800de64:	68b8      	ldr	r0, [r7, #8]
 800de66:	f004 fda1 	bl	80129ac <pbuf_copy_partial>
 800de6a:	4603      	mov	r3, r0
 800de6c:	461a      	mov	r2, r3
				!= len) {
 800de6e:	797b      	ldrb	r3, [r7, #5]
 800de70:	b29b      	uxth	r3, r3
		if (pbuf_copy_partial(p, &domain->name[domain->length], len, offset)
 800de72:	429a      	cmp	r2, r3
 800de74:	d00a      	beq.n	800de8c <mdns_domain_add_label_pbuf+0x72>
			/* take back the ++ done before */
			domain->length--;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800de7c:	3b01      	subs	r3, #1
 800de7e:	b29a      	uxth	r2, r3
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
			return ERR_ARG;
 800de86:	f06f 030f 	mvn.w	r3, #15
 800de8a:	e00a      	b.n	800dea2 <mdns_domain_add_label_pbuf+0x88>
		}
		domain->length += len;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f8b3 2100 	ldrh.w	r2, [r3, #256]	@ 0x100
 800de92:	797b      	ldrb	r3, [r7, #5]
 800de94:	b29b      	uxth	r3, r3
 800de96:	4413      	add	r3, r2
 800de98:	b29a      	uxth	r2, r3
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	}
	return ERR_OK;
 800dea0:	2300      	movs	r3, #0
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	3718      	adds	r7, #24
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}

0800deaa <mdns_readname_loop>:
/**
 * Internal readname function with max 6 levels of recursion following jumps
 * while decompressing name
 */
static u16_t mdns_readname_loop(struct pbuf *p, u16_t offset,
		struct mdns_domain *domain, unsigned depth) {
 800deaa:	b590      	push	{r4, r7, lr}
 800deac:	b087      	sub	sp, #28
 800deae:	af00      	add	r7, sp, #0
 800deb0:	60f8      	str	r0, [r7, #12]
 800deb2:	607a      	str	r2, [r7, #4]
 800deb4:	603b      	str	r3, [r7, #0]
 800deb6:	460b      	mov	r3, r1
 800deb8:	817b      	strh	r3, [r7, #10]
	u8_t c;

	do {
		if (depth > 5) {
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	2b05      	cmp	r3, #5
 800debe:	d902      	bls.n	800dec6 <mdns_readname_loop+0x1c>
			/* Too many jumps */
			return MDNS_READNAME_ERROR;
 800dec0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dec4:	e070      	b.n	800dfa8 <mdns_readname_loop+0xfe>
		}

		c = pbuf_get_at(p, offset);
 800dec6:	897b      	ldrh	r3, [r7, #10]
 800dec8:	4619      	mov	r1, r3
 800deca:	68f8      	ldr	r0, [r7, #12]
 800decc:	f004 ff4a 	bl	8012d64 <pbuf_get_at>
 800ded0:	4603      	mov	r3, r0
 800ded2:	75fb      	strb	r3, [r7, #23]
		offset++;
 800ded4:	897b      	ldrh	r3, [r7, #10]
 800ded6:	3301      	adds	r3, #1
 800ded8:	817b      	strh	r3, [r7, #10]

		/* is this a compressed label? */
		if ((c & 0xc0) == 0xc0) {
 800deda:	7dfb      	ldrb	r3, [r7, #23]
 800dedc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800dee0:	2bc0      	cmp	r3, #192	@ 0xc0
 800dee2:	d138      	bne.n	800df56 <mdns_readname_loop+0xac>
			u16_t jumpaddr;
			if (offset >= p->tot_len) {
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	891b      	ldrh	r3, [r3, #8]
 800dee8:	897a      	ldrh	r2, [r7, #10]
 800deea:	429a      	cmp	r2, r3
 800deec:	d302      	bcc.n	800def4 <mdns_readname_loop+0x4a>
				/* Make sure both jump bytes fit in the packet */
				return MDNS_READNAME_ERROR;
 800deee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800def2:	e059      	b.n	800dfa8 <mdns_readname_loop+0xfe>
			}
			jumpaddr = (((c & 0x3f) << 8) | (pbuf_get_at(p, offset) & 0xff));
 800def4:	7dfb      	ldrb	r3, [r7, #23]
 800def6:	b21b      	sxth	r3, r3
 800def8:	021b      	lsls	r3, r3, #8
 800defa:	b21b      	sxth	r3, r3
 800defc:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800df00:	b21c      	sxth	r4, r3
 800df02:	897b      	ldrh	r3, [r7, #10]
 800df04:	4619      	mov	r1, r3
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	f004 ff2c 	bl	8012d64 <pbuf_get_at>
 800df0c:	4603      	mov	r3, r0
 800df0e:	b21b      	sxth	r3, r3
 800df10:	4323      	orrs	r3, r4
 800df12:	b21b      	sxth	r3, r3
 800df14:	82bb      	strh	r3, [r7, #20]
			offset++;
 800df16:	897b      	ldrh	r3, [r7, #10]
 800df18:	3301      	adds	r3, #1
 800df1a:	817b      	strh	r3, [r7, #10]
			if (jumpaddr >= SIZEOF_DNS_HDR && jumpaddr < p->tot_len) {
 800df1c:	8abb      	ldrh	r3, [r7, #20]
 800df1e:	2b0b      	cmp	r3, #11
 800df20:	d914      	bls.n	800df4c <mdns_readname_loop+0xa2>
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	891b      	ldrh	r3, [r3, #8]
 800df26:	8aba      	ldrh	r2, [r7, #20]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d20f      	bcs.n	800df4c <mdns_readname_loop+0xa2>
				u16_t res;
				/* Recursive call, maximum depth will be checked */
				res = mdns_readname_loop(p, jumpaddr, domain, depth + 1);
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	3301      	adds	r3, #1
 800df30:	8ab9      	ldrh	r1, [r7, #20]
 800df32:	687a      	ldr	r2, [r7, #4]
 800df34:	68f8      	ldr	r0, [r7, #12]
 800df36:	f7ff ffb8 	bl	800deaa <mdns_readname_loop>
 800df3a:	4603      	mov	r3, r0
 800df3c:	827b      	strh	r3, [r7, #18]
				/* Dont return offset since new bytes were not read (jumped to somewhere in packet) */
				if (res == MDNS_READNAME_ERROR) {
 800df3e:	8a7b      	ldrh	r3, [r7, #18]
 800df40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800df44:	4293      	cmp	r3, r2
 800df46:	d104      	bne.n	800df52 <mdns_readname_loop+0xa8>
					return res;
 800df48:	8a7b      	ldrh	r3, [r7, #18]
 800df4a:	e02d      	b.n	800dfa8 <mdns_readname_loop+0xfe>
				}
			} else {
				return MDNS_READNAME_ERROR;
 800df4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df50:	e02a      	b.n	800dfa8 <mdns_readname_loop+0xfe>
			if (jumpaddr >= SIZEOF_DNS_HDR && jumpaddr < p->tot_len) {
 800df52:	bf00      	nop
			}
			break;
 800df54:	e027      	b.n	800dfa6 <mdns_readname_loop+0xfc>
		}

		/* normal label */
		if (c <= MDNS_LABEL_MAXLEN) {
 800df56:	7dfb      	ldrb	r3, [r7, #23]
 800df58:	2b3f      	cmp	r3, #63	@ 0x3f
 800df5a:	d81e      	bhi.n	800df9a <mdns_readname_loop+0xf0>
			err_t res;

			if (c + domain->length >= MDNS_DOMAIN_MAXLEN) {
 800df5c:	7dfb      	ldrb	r3, [r7, #23]
 800df5e:	687a      	ldr	r2, [r7, #4]
 800df60:	f8b2 2100 	ldrh.w	r2, [r2, #256]	@ 0x100
 800df64:	4413      	add	r3, r2
 800df66:	2bff      	cmp	r3, #255	@ 0xff
 800df68:	dd02      	ble.n	800df70 <mdns_readname_loop+0xc6>
				return MDNS_READNAME_ERROR;
 800df6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df6e:	e01b      	b.n	800dfa8 <mdns_readname_loop+0xfe>
			}
			res = mdns_domain_add_label_pbuf(domain, p, offset, c);
 800df70:	7dfb      	ldrb	r3, [r7, #23]
 800df72:	897a      	ldrh	r2, [r7, #10]
 800df74:	68f9      	ldr	r1, [r7, #12]
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f7ff ff4f 	bl	800de1a <mdns_domain_add_label_pbuf>
 800df7c:	4603      	mov	r3, r0
 800df7e:	75bb      	strb	r3, [r7, #22]
			if (res != ERR_OK) {
 800df80:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d002      	beq.n	800df8e <mdns_readname_loop+0xe4>
				return MDNS_READNAME_ERROR;
 800df88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df8c:	e00c      	b.n	800dfa8 <mdns_readname_loop+0xfe>
			}
			offset += c;
 800df8e:	7dfb      	ldrb	r3, [r7, #23]
 800df90:	b29a      	uxth	r2, r3
 800df92:	897b      	ldrh	r3, [r7, #10]
 800df94:	4413      	add	r3, r2
 800df96:	817b      	strh	r3, [r7, #10]
 800df98:	e002      	b.n	800dfa0 <mdns_readname_loop+0xf6>
		} else {
			/* bad length byte */
			return MDNS_READNAME_ERROR;
 800df9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df9e:	e003      	b.n	800dfa8 <mdns_readname_loop+0xfe>
		}
	} while (c != 0);
 800dfa0:	7dfb      	ldrb	r3, [r7, #23]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d189      	bne.n	800deba <mdns_readname_loop+0x10>

	return offset;
 800dfa6:	897b      	ldrh	r3, [r7, #10]
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	371c      	adds	r7, #28
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd90      	pop	{r4, r7, pc}

0800dfb0 <mdns_readname>:
 * @param offset start position of domain name in packet
 * @param domain The domain name destination
 * @return The new offset after the domain, or MDNS_READNAME_ERROR
 *         if reading failed
 */
u16_t mdns_readname(struct pbuf *p, u16_t offset, struct mdns_domain *domain) {
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b084      	sub	sp, #16
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	60f8      	str	r0, [r7, #12]
 800dfb8:	460b      	mov	r3, r1
 800dfba:	607a      	str	r2, [r7, #4]
 800dfbc:	817b      	strh	r3, [r7, #10]
	memset(domain, 0, sizeof(struct mdns_domain));
 800dfbe:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800dfc2:	2100      	movs	r1, #0
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f010 fedb 	bl	801ed80 <memset>
	return mdns_readname_loop(p, offset, domain, 0);
 800dfca:	8979      	ldrh	r1, [r7, #10]
 800dfcc:	2300      	movs	r3, #0
 800dfce:	687a      	ldr	r2, [r7, #4]
 800dfd0:	68f8      	ldr	r0, [r7, #12]
 800dfd2:	f7ff ff6a 	bl	800deaa <mdns_readname_loop>
 800dfd6:	4603      	mov	r3, r0
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3710      	adds	r7, #16
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <mdns_domain_debug_print>:

/**
 * Print domain name to debug output
 * @param domain The domain name
 */
static void mdns_domain_debug_print(struct mdns_domain *domain) {
 800dfe0:	b480      	push	{r7}
 800dfe2:	b085      	sub	sp, #20
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
	u8_t *src = domain->name;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	60fb      	str	r3, [r7, #12]
	u8_t i;

	while (*src) {
 800dfec:	e013      	b.n	800e016 <mdns_domain_debug_print+0x36>
		u8_t label_len = *src;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	72bb      	strb	r3, [r7, #10]
		src++;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	3301      	adds	r3, #1
 800dff8:	60fb      	str	r3, [r7, #12]
		for (i = 0; i < label_len; i++) {
 800dffa:	2300      	movs	r3, #0
 800dffc:	72fb      	strb	r3, [r7, #11]
 800dffe:	e002      	b.n	800e006 <mdns_domain_debug_print+0x26>
 800e000:	7afb      	ldrb	r3, [r7, #11]
 800e002:	3301      	adds	r3, #1
 800e004:	72fb      	strb	r3, [r7, #11]
 800e006:	7afa      	ldrb	r2, [r7, #11]
 800e008:	7abb      	ldrb	r3, [r7, #10]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d3f8      	bcc.n	800e000 <mdns_domain_debug_print+0x20>
			LWIP_DEBUGF(MDNS_DEBUG, ("%c", src[i]));
		}
		src += label_len;
 800e00e:	7abb      	ldrb	r3, [r7, #10]
 800e010:	68fa      	ldr	r2, [r7, #12]
 800e012:	4413      	add	r3, r2
 800e014:	60fb      	str	r3, [r7, #12]
	while (*src) {
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d1e7      	bne.n	800dfee <mdns_domain_debug_print+0xe>
		LWIP_DEBUGF(MDNS_DEBUG, ("."));
	}
}
 800e01e:	bf00      	nop
 800e020:	bf00      	nop
 800e022:	3714      	adds	r7, #20
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr

0800e02c <mdns_domain_eq>:
 * Return 1 if contents of domains match (case-insensitive)
 * @param a Domain name to compare 1
 * @param b Domain name to compare 2
 * @return 1 if domains are equal ignoring case, 0 otherwise
 */
int mdns_domain_eq(struct mdns_domain *a, struct mdns_domain *b) {
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b086      	sub	sp, #24
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]
	u8_t *ptra, *ptrb;
	u8_t len;
	int res;

	if (a->length != b->length) {
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f8b3 2100 	ldrh.w	r2, [r3, #256]	@ 0x100
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800e042:	429a      	cmp	r2, r3
 800e044:	d001      	beq.n	800e04a <mdns_domain_eq+0x1e>
		return 0;
 800e046:	2300      	movs	r3, #0
 800e048:	e04c      	b.n	800e0e4 <mdns_domain_eq+0xb8>
	}

	ptra = a->name;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	617b      	str	r3, [r7, #20]
	ptrb = b->name;
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	613b      	str	r3, [r7, #16]
	while (*ptra && *ptrb && ptra < &a->name[a->length]) {
 800e052:	e024      	b.n	800e09e <mdns_domain_eq+0x72>
		if (*ptra != *ptrb) {
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	781a      	ldrb	r2, [r3, #0]
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	429a      	cmp	r2, r3
 800e05e:	d001      	beq.n	800e064 <mdns_domain_eq+0x38>
			return 0;
 800e060:	2300      	movs	r3, #0
 800e062:	e03f      	b.n	800e0e4 <mdns_domain_eq+0xb8>
		}
		len = *ptra;
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	73fb      	strb	r3, [r7, #15]
		ptra++;
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	3301      	adds	r3, #1
 800e06e:	617b      	str	r3, [r7, #20]
		ptrb++;
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	3301      	adds	r3, #1
 800e074:	613b      	str	r3, [r7, #16]
		res = lwip_strnicmp((char*) ptra, (char*) ptrb, len);
 800e076:	7bfb      	ldrb	r3, [r7, #15]
 800e078:	461a      	mov	r2, r3
 800e07a:	6939      	ldr	r1, [r7, #16]
 800e07c:	6978      	ldr	r0, [r7, #20]
 800e07e:	f002 fd6a 	bl	8010b56 <lwip_strnicmp>
 800e082:	60b8      	str	r0, [r7, #8]
		if (res != 0) {
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d001      	beq.n	800e08e <mdns_domain_eq+0x62>
			return 0;
 800e08a:	2300      	movs	r3, #0
 800e08c:	e02a      	b.n	800e0e4 <mdns_domain_eq+0xb8>
		}
		ptra += len;
 800e08e:	7bfb      	ldrb	r3, [r7, #15]
 800e090:	697a      	ldr	r2, [r7, #20]
 800e092:	4413      	add	r3, r2
 800e094:	617b      	str	r3, [r7, #20]
		ptrb += len;
 800e096:	7bfb      	ldrb	r3, [r7, #15]
 800e098:	693a      	ldr	r2, [r7, #16]
 800e09a:	4413      	add	r3, r2
 800e09c:	613b      	str	r3, [r7, #16]
	while (*ptra && *ptrb && ptra < &a->name[a->length]) {
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d00c      	beq.n	800e0c0 <mdns_domain_eq+0x94>
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d008      	beq.n	800e0c0 <mdns_domain_eq+0x94>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	697a      	ldr	r2, [r7, #20]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d3c9      	bcc.n	800e054 <mdns_domain_eq+0x28>
	}
	if (*ptra != *ptrb && ptra < &a->name[a->length]) {
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	781a      	ldrb	r2, [r3, #0]
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d00a      	beq.n	800e0e2 <mdns_domain_eq+0xb6>
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800e0d2:	461a      	mov	r2, r3
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	4413      	add	r3, r2
 800e0d8:	697a      	ldr	r2, [r7, #20]
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d201      	bcs.n	800e0e2 <mdns_domain_eq+0xb6>
		return 0;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	e000      	b.n	800e0e4 <mdns_domain_eq+0xb8>
	}
	return 1;
 800e0e2:	2301      	movs	r3, #1
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3718      	adds	r7, #24
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <mdns_prepare_txtdata>:

/**
 * Call user supplied function to setup TXT data
 * @param service The service to build TXT record for
 */
static void mdns_prepare_txtdata(struct mdns_service *service) {
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b082      	sub	sp, #8
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
	memset(&service->txtdata, 0, sizeof(struct mdns_domain));
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800e0fa:	2100      	movs	r1, #0
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f010 fe3f 	bl	801ed80 <memset>
	if (service->txt_fn) {
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d008      	beq.n	800e11e <mdns_prepare_txtdata+0x32>
		service->txt_fn(service, service->txt_userdata);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f8d3 3184 	ldr.w	r3, [r3, #388]	@ 0x184
 800e112:	687a      	ldr	r2, [r7, #4]
 800e114:	f8d2 2188 	ldr.w	r2, [r2, #392]	@ 0x188
 800e118:	4611      	mov	r1, r2
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	4798      	blx	r3
	}
}
 800e11e:	bf00      	nop
 800e120:	3708      	adds	r7, #8
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
	...

0800e128 <mdns_build_reverse_v4_domain>:
 * @param domain Where to write the domain name
 * @param addr Pointer to an IPv4 address to encode
 * @return ERR_OK if domain was written, an err_t otherwise
 */
static err_t mdns_build_reverse_v4_domain(struct mdns_domain *domain,
		const ip4_addr_t *addr) {
 800e128:	b580      	push	{r7, lr}
 800e12a:	b086      	sub	sp, #24
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	6039      	str	r1, [r7, #0]
	int i;
	err_t res;
	const u8_t *ptr;

	LWIP_UNUSED_ARG(res);
	if (!domain || !addr) {
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d002      	beq.n	800e13e <mdns_build_reverse_v4_domain+0x16>
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d102      	bne.n	800e144 <mdns_build_reverse_v4_domain+0x1c>
		return ERR_ARG;
 800e13e:	f06f 030f 	mvn.w	r3, #15
 800e142:	e079      	b.n	800e238 <mdns_build_reverse_v4_domain+0x110>
	}
	memset(domain, 0, sizeof(struct mdns_domain));
 800e144:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800e148:	2100      	movs	r1, #0
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f010 fe18 	bl	801ed80 <memset>
	ptr = (const u8_t*) addr;
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	613b      	str	r3, [r7, #16]
	for (i = sizeof(ip4_addr_t) - 1; i >= 0; i--) {
 800e154:	2303      	movs	r3, #3
 800e156:	617b      	str	r3, [r7, #20]
 800e158:	e02b      	b.n	800e1b2 <mdns_build_reverse_v4_domain+0x8a>
		char buf[4];
		u8_t val = ptr[i];
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	693a      	ldr	r2, [r7, #16]
 800e15e:	4413      	add	r3, r2
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	73bb      	strb	r3, [r7, #14]

		lwip_itoa(buf, sizeof(buf), val);
 800e164:	7bba      	ldrb	r2, [r7, #14]
 800e166:	f107 0308 	add.w	r3, r7, #8
 800e16a:	2104      	movs	r1, #4
 800e16c:	4618      	mov	r0, r3
 800e16e:	f002 fd2d 	bl	8010bcc <lwip_itoa>
		res = mdns_domain_add_label(domain, buf, (u8_t) strlen(buf));
 800e172:	f107 0308 	add.w	r3, r7, #8
 800e176:	4618      	mov	r0, r3
 800e178:	f7f2 f862 	bl	8000240 <strlen>
 800e17c:	4603      	mov	r3, r0
 800e17e:	b2da      	uxtb	r2, r3
 800e180:	f107 0308 	add.w	r3, r7, #8
 800e184:	4619      	mov	r1, r3
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f7ff fe15 	bl	800ddb6 <mdns_domain_add_label>
 800e18c:	4603      	mov	r3, r0
 800e18e:	73fb      	strb	r3, [r7, #15]
		LWIP_ERROR("mdns_build_reverse_v4_domain: Failed to add label",
 800e190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d009      	beq.n	800e1ac <mdns_build_reverse_v4_domain+0x84>
 800e198:	4b29      	ldr	r3, [pc, #164]	@ (800e240 <mdns_build_reverse_v4_domain+0x118>)
 800e19a:	f240 2201 	movw	r2, #513	@ 0x201
 800e19e:	4929      	ldr	r1, [pc, #164]	@ (800e244 <mdns_build_reverse_v4_domain+0x11c>)
 800e1a0:	4829      	ldr	r0, [pc, #164]	@ (800e248 <mdns_build_reverse_v4_domain+0x120>)
 800e1a2:	f010 fc1d 	bl	801e9e0 <iprintf>
 800e1a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1aa:	e045      	b.n	800e238 <mdns_build_reverse_v4_domain+0x110>
	for (i = sizeof(ip4_addr_t) - 1; i >= 0; i--) {
 800e1ac:	697b      	ldr	r3, [r7, #20]
 800e1ae:	3b01      	subs	r3, #1
 800e1b0:	617b      	str	r3, [r7, #20]
 800e1b2:	697b      	ldr	r3, [r7, #20]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	dad0      	bge.n	800e15a <mdns_build_reverse_v4_domain+0x32>
				(res == ERR_OK), return res);
	}
	res = mdns_domain_add_label(domain, REVERSE_PTR_V4_DOMAIN,
 800e1b8:	2207      	movs	r2, #7
 800e1ba:	4924      	ldr	r1, [pc, #144]	@ (800e24c <mdns_build_reverse_v4_domain+0x124>)
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f7ff fdfa 	bl	800ddb6 <mdns_domain_add_label>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	73fb      	strb	r3, [r7, #15]
			(u8_t) (sizeof(REVERSE_PTR_V4_DOMAIN) - 1));
	LWIP_ERROR("mdns_build_reverse_v4_domain: Failed to add label",
 800e1c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d009      	beq.n	800e1e2 <mdns_build_reverse_v4_domain+0xba>
 800e1ce:	4b1c      	ldr	r3, [pc, #112]	@ (800e240 <mdns_build_reverse_v4_domain+0x118>)
 800e1d0:	f240 2206 	movw	r2, #518	@ 0x206
 800e1d4:	491b      	ldr	r1, [pc, #108]	@ (800e244 <mdns_build_reverse_v4_domain+0x11c>)
 800e1d6:	481c      	ldr	r0, [pc, #112]	@ (800e248 <mdns_build_reverse_v4_domain+0x120>)
 800e1d8:	f010 fc02 	bl	801e9e0 <iprintf>
 800e1dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1e0:	e02a      	b.n	800e238 <mdns_build_reverse_v4_domain+0x110>
			(res == ERR_OK), return res);
	res = mdns_domain_add_label(domain, REVERSE_PTR_TOPDOMAIN,
 800e1e2:	2204      	movs	r2, #4
 800e1e4:	491a      	ldr	r1, [pc, #104]	@ (800e250 <mdns_build_reverse_v4_domain+0x128>)
 800e1e6:	6878      	ldr	r0, [r7, #4]
 800e1e8:	f7ff fde5 	bl	800ddb6 <mdns_domain_add_label>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	73fb      	strb	r3, [r7, #15]
			(u8_t) (sizeof(REVERSE_PTR_TOPDOMAIN) - 1));
	LWIP_ERROR("mdns_build_reverse_v4_domain: Failed to add label",
 800e1f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d009      	beq.n	800e20c <mdns_build_reverse_v4_domain+0xe4>
 800e1f8:	4b11      	ldr	r3, [pc, #68]	@ (800e240 <mdns_build_reverse_v4_domain+0x118>)
 800e1fa:	f240 220a 	movw	r2, #522	@ 0x20a
 800e1fe:	4911      	ldr	r1, [pc, #68]	@ (800e244 <mdns_build_reverse_v4_domain+0x11c>)
 800e200:	4811      	ldr	r0, [pc, #68]	@ (800e248 <mdns_build_reverse_v4_domain+0x120>)
 800e202:	f010 fbed 	bl	801e9e0 <iprintf>
 800e206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e20a:	e015      	b.n	800e238 <mdns_build_reverse_v4_domain+0x110>
			(res == ERR_OK), return res);
	res = mdns_domain_add_label(domain, NULL, 0);
 800e20c:	2200      	movs	r2, #0
 800e20e:	2100      	movs	r1, #0
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f7ff fdd0 	bl	800ddb6 <mdns_domain_add_label>
 800e216:	4603      	mov	r3, r0
 800e218:	73fb      	strb	r3, [r7, #15]
	LWIP_ERROR("mdns_build_reverse_v4_domain: Failed to add label",
 800e21a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d009      	beq.n	800e236 <mdns_build_reverse_v4_domain+0x10e>
 800e222:	4b07      	ldr	r3, [pc, #28]	@ (800e240 <mdns_build_reverse_v4_domain+0x118>)
 800e224:	f240 220d 	movw	r2, #525	@ 0x20d
 800e228:	4906      	ldr	r1, [pc, #24]	@ (800e244 <mdns_build_reverse_v4_domain+0x11c>)
 800e22a:	4807      	ldr	r0, [pc, #28]	@ (800e248 <mdns_build_reverse_v4_domain+0x120>)
 800e22c:	f010 fbd8 	bl	801e9e0 <iprintf>
 800e230:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e234:	e000      	b.n	800e238 <mdns_build_reverse_v4_domain+0x110>
			(res == ERR_OK), return res);

	return ERR_OK;
 800e236:	2300      	movs	r3, #0
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3718      	adds	r7, #24
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}
 800e240:	0801feac 	.word	0x0801feac
 800e244:	0801fee4 	.word	0x0801fee4
 800e248:	0801ff18 	.word	0x0801ff18
 800e24c:	0801ff40 	.word	0x0801ff40
 800e250:	0801ff48 	.word	0x0801ff48

0800e254 <mdns_add_dotlocal>:
  return ERR_OK;
}
#endif

/* Add .local. to domain */
static err_t mdns_add_dotlocal(struct mdns_domain *domain) {
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
	err_t res = mdns_domain_add_label(domain, TOPDOMAIN_LOCAL,
 800e25c:	2205      	movs	r2, #5
 800e25e:	490f      	ldr	r1, [pc, #60]	@ (800e29c <mdns_add_dotlocal+0x48>)
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f7ff fda8 	bl	800ddb6 <mdns_domain_add_label>
 800e266:	4603      	mov	r3, r0
 800e268:	73fb      	strb	r3, [r7, #15]
			(u8_t) (sizeof(TOPDOMAIN_LOCAL) - 1));
	LWIP_UNUSED_ARG(res);
	LWIP_ERROR("mdns_add_dotlocal: Failed to add label", (res == ERR_OK),
 800e26a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d009      	beq.n	800e286 <mdns_add_dotlocal+0x32>
 800e272:	4b0b      	ldr	r3, [pc, #44]	@ (800e2a0 <mdns_add_dotlocal+0x4c>)
 800e274:	f240 2247 	movw	r2, #583	@ 0x247
 800e278:	490a      	ldr	r1, [pc, #40]	@ (800e2a4 <mdns_add_dotlocal+0x50>)
 800e27a:	480b      	ldr	r0, [pc, #44]	@ (800e2a8 <mdns_add_dotlocal+0x54>)
 800e27c:	f010 fbb0 	bl	801e9e0 <iprintf>
 800e280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e284:	e005      	b.n	800e292 <mdns_add_dotlocal+0x3e>
			return res);
	return mdns_domain_add_label(domain, NULL, 0);
 800e286:	2200      	movs	r2, #0
 800e288:	2100      	movs	r1, #0
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f7ff fd93 	bl	800ddb6 <mdns_domain_add_label>
 800e290:	4603      	mov	r3, r0
}
 800e292:	4618      	mov	r0, r3
 800e294:	3710      	adds	r7, #16
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop
 800e29c:	0801ff50 	.word	0x0801ff50
 800e2a0:	0801feac 	.word	0x0801feac
 800e2a4:	0801ff58 	.word	0x0801ff58
 800e2a8:	0801ff18 	.word	0x0801ff18

0800e2ac <mdns_build_host_domain>:
 * @param domain Where to write the domain name
 * @param mdns TMDNS netif descriptor.
 * @return ERR_OK if domain <hostname>.local. was written, an err_t otherwise
 */
static err_t mdns_build_host_domain(struct mdns_domain *domain,
		struct mdns_host *mdns) {
 800e2ac:	b590      	push	{r4, r7, lr}
 800e2ae:	b085      	sub	sp, #20
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
	err_t res;
	LWIP_UNUSED_ARG(res);
	memset(domain, 0, sizeof(struct mdns_domain));
 800e2b6:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800e2ba:	2100      	movs	r1, #0
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f010 fd5f 	bl	801ed80 <memset>
	LWIP_ERROR("mdns_build_host_domain: mdns != NULL", (mdns != NULL),
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d109      	bne.n	800e2dc <mdns_build_host_domain+0x30>
 800e2c8:	4b16      	ldr	r3, [pc, #88]	@ (800e324 <mdns_build_host_domain+0x78>)
 800e2ca:	f240 2257 	movw	r2, #599	@ 0x257
 800e2ce:	4916      	ldr	r1, [pc, #88]	@ (800e328 <mdns_build_host_domain+0x7c>)
 800e2d0:	4816      	ldr	r0, [pc, #88]	@ (800e32c <mdns_build_host_domain+0x80>)
 800e2d2:	f010 fb85 	bl	801e9e0 <iprintf>
 800e2d6:	f06f 0305 	mvn.w	r3, #5
 800e2da:	e01f      	b.n	800e31c <mdns_build_host_domain+0x70>
			return ERR_VAL);
	res = mdns_domain_add_label(domain, mdns->name, (u8_t) strlen(mdns->name));
 800e2dc:	683c      	ldr	r4, [r7, #0]
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7f1 ffad 	bl	8000240 <strlen>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	4621      	mov	r1, r4
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f7ff fd61 	bl	800ddb6 <mdns_domain_add_label>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	73fb      	strb	r3, [r7, #15]
	LWIP_ERROR("mdns_build_host_domain: Failed to add label", (res == ERR_OK),
 800e2f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d009      	beq.n	800e314 <mdns_build_host_domain+0x68>
 800e300:	4b08      	ldr	r3, [pc, #32]	@ (800e324 <mdns_build_host_domain+0x78>)
 800e302:	f240 225a 	movw	r2, #602	@ 0x25a
 800e306:	490a      	ldr	r1, [pc, #40]	@ (800e330 <mdns_build_host_domain+0x84>)
 800e308:	4808      	ldr	r0, [pc, #32]	@ (800e32c <mdns_build_host_domain+0x80>)
 800e30a:	f010 fb69 	bl	801e9e0 <iprintf>
 800e30e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e312:	e003      	b.n	800e31c <mdns_build_host_domain+0x70>
			return res);
	return mdns_add_dotlocal(domain);
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f7ff ff9d 	bl	800e254 <mdns_add_dotlocal>
 800e31a:	4603      	mov	r3, r0
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3714      	adds	r7, #20
 800e320:	46bd      	mov	sp, r7
 800e322:	bd90      	pop	{r4, r7, pc}
 800e324:	0801feac 	.word	0x0801feac
 800e328:	0801ff80 	.word	0x0801ff80
 800e32c:	0801ff18 	.word	0x0801ff18
 800e330:	0801ffa8 	.word	0x0801ffa8

0800e334 <mdns_build_dnssd_domain>:
/**
 * Build the lookup-all-services special DNS-SD domain name
 * @param domain Where to write the domain name
 * @return ERR_OK if domain _services._dns-sd._udp.local. was written, an err_t otherwise
 */
static err_t mdns_build_dnssd_domain(struct mdns_domain *domain) {
 800e334:	b590      	push	{r4, r7, lr}
 800e336:	b085      	sub	sp, #20
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
	err_t res;
	LWIP_UNUSED_ARG(res);
	memset(domain, 0, sizeof(struct mdns_domain));
 800e33c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800e340:	2100      	movs	r1, #0
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f010 fd1c 	bl	801ed80 <memset>
	res = mdns_domain_add_label(domain, "_services",
 800e348:	2209      	movs	r2, #9
 800e34a:	4927      	ldr	r1, [pc, #156]	@ (800e3e8 <mdns_build_dnssd_domain+0xb4>)
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f7ff fd32 	bl	800ddb6 <mdns_domain_add_label>
 800e352:	4603      	mov	r3, r0
 800e354:	73fb      	strb	r3, [r7, #15]
			(u8_t) (sizeof("_services") - 1));
	LWIP_ERROR("mdns_build_dnssd_domain: Failed to add label", (res == ERR_OK),
 800e356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d009      	beq.n	800e372 <mdns_build_dnssd_domain+0x3e>
 800e35e:	4b23      	ldr	r3, [pc, #140]	@ (800e3ec <mdns_build_dnssd_domain+0xb8>)
 800e360:	f240 226a 	movw	r2, #618	@ 0x26a
 800e364:	4922      	ldr	r1, [pc, #136]	@ (800e3f0 <mdns_build_dnssd_domain+0xbc>)
 800e366:	4823      	ldr	r0, [pc, #140]	@ (800e3f4 <mdns_build_dnssd_domain+0xc0>)
 800e368:	f010 fb3a 	bl	801e9e0 <iprintf>
 800e36c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e370:	e036      	b.n	800e3e0 <mdns_build_dnssd_domain+0xac>
			return res);
	res = mdns_domain_add_label(domain, "_dns-sd",
 800e372:	2207      	movs	r2, #7
 800e374:	4920      	ldr	r1, [pc, #128]	@ (800e3f8 <mdns_build_dnssd_domain+0xc4>)
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f7ff fd1d 	bl	800ddb6 <mdns_domain_add_label>
 800e37c:	4603      	mov	r3, r0
 800e37e:	73fb      	strb	r3, [r7, #15]
			(u8_t) (sizeof("_dns-sd") - 1));
	LWIP_ERROR("mdns_build_dnssd_domain: Failed to add label", (res == ERR_OK),
 800e380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d009      	beq.n	800e39c <mdns_build_dnssd_domain+0x68>
 800e388:	4b18      	ldr	r3, [pc, #96]	@ (800e3ec <mdns_build_dnssd_domain+0xb8>)
 800e38a:	f240 226e 	movw	r2, #622	@ 0x26e
 800e38e:	4918      	ldr	r1, [pc, #96]	@ (800e3f0 <mdns_build_dnssd_domain+0xbc>)
 800e390:	4818      	ldr	r0, [pc, #96]	@ (800e3f4 <mdns_build_dnssd_domain+0xc0>)
 800e392:	f010 fb25 	bl	801e9e0 <iprintf>
 800e396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e39a:	e021      	b.n	800e3e0 <mdns_build_dnssd_domain+0xac>
			return res);
	res = mdns_domain_add_label(domain, dnssd_protos[DNSSD_PROTO_UDP],
 800e39c:	4b17      	ldr	r3, [pc, #92]	@ (800e3fc <mdns_build_dnssd_domain+0xc8>)
 800e39e:	681c      	ldr	r4, [r3, #0]
			(u8_t) strlen(dnssd_protos[DNSSD_PROTO_UDP]));
 800e3a0:	4b16      	ldr	r3, [pc, #88]	@ (800e3fc <mdns_build_dnssd_domain+0xc8>)
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f7f1 ff4b 	bl	8000240 <strlen>
 800e3aa:	4603      	mov	r3, r0
	res = mdns_domain_add_label(domain, dnssd_protos[DNSSD_PROTO_UDP],
 800e3ac:	b2db      	uxtb	r3, r3
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	4621      	mov	r1, r4
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f7ff fcff 	bl	800ddb6 <mdns_domain_add_label>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	73fb      	strb	r3, [r7, #15]
	LWIP_ERROR("mdns_build_dnssd_domain: Failed to add label", (res == ERR_OK),
 800e3bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d009      	beq.n	800e3d8 <mdns_build_dnssd_domain+0xa4>
 800e3c4:	4b09      	ldr	r3, [pc, #36]	@ (800e3ec <mdns_build_dnssd_domain+0xb8>)
 800e3c6:	f240 2272 	movw	r2, #626	@ 0x272
 800e3ca:	4909      	ldr	r1, [pc, #36]	@ (800e3f0 <mdns_build_dnssd_domain+0xbc>)
 800e3cc:	4809      	ldr	r0, [pc, #36]	@ (800e3f4 <mdns_build_dnssd_domain+0xc0>)
 800e3ce:	f010 fb07 	bl	801e9e0 <iprintf>
 800e3d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3d6:	e003      	b.n	800e3e0 <mdns_build_dnssd_domain+0xac>
			return res);
	return mdns_add_dotlocal(domain);
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f7ff ff3b 	bl	800e254 <mdns_add_dotlocal>
 800e3de:	4603      	mov	r3, r0
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3714      	adds	r7, #20
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd90      	pop	{r4, r7, pc}
 800e3e8:	0801ffd4 	.word	0x0801ffd4
 800e3ec:	0801feac 	.word	0x0801feac
 800e3f0:	0801ffe0 	.word	0x0801ffe0
 800e3f4:	0801ff18 	.word	0x0801ff18
 800e3f8:	08020010 	.word	0x08020010
 800e3fc:	200000b0 	.word	0x200000b0

0800e400 <mdns_build_service_domain>:
 * @return ERR_OK if domain was written. If service name is included,
 *         <name>.<type>.<proto>.local. will be written, otherwise <type>.<proto>.local.
 *         An err_t is returned on error.
 */
static err_t mdns_build_service_domain(struct mdns_domain *domain,
		struct mdns_service *service, int include_name) {
 800e400:	b590      	push	{r4, r7, lr}
 800e402:	b087      	sub	sp, #28
 800e404:	af00      	add	r7, sp, #0
 800e406:	60f8      	str	r0, [r7, #12]
 800e408:	60b9      	str	r1, [r7, #8]
 800e40a:	607a      	str	r2, [r7, #4]
	err_t res;
	LWIP_UNUSED_ARG(res);
	memset(domain, 0, sizeof(struct mdns_domain));
 800e40c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800e410:	2100      	movs	r1, #0
 800e412:	68f8      	ldr	r0, [r7, #12]
 800e414:	f010 fcb4 	bl	801ed80 <memset>
	if (include_name) {
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d01f      	beq.n	800e45e <mdns_build_service_domain+0x5e>
		res = mdns_domain_add_label(domain, service->name,
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	f503 7482 	add.w	r4, r3, #260	@ 0x104
				(u8_t) strlen(service->name));
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7f1 ff08 	bl	8000240 <strlen>
 800e430:	4603      	mov	r3, r0
		res = mdns_domain_add_label(domain, service->name,
 800e432:	b2db      	uxtb	r3, r3
 800e434:	461a      	mov	r2, r3
 800e436:	4621      	mov	r1, r4
 800e438:	68f8      	ldr	r0, [r7, #12]
 800e43a:	f7ff fcbc 	bl	800ddb6 <mdns_domain_add_label>
 800e43e:	4603      	mov	r3, r0
 800e440:	75fb      	strb	r3, [r7, #23]
		LWIP_ERROR("mdns_build_service_domain: Failed to add label",
 800e442:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d009      	beq.n	800e45e <mdns_build_service_domain+0x5e>
 800e44a:	4b2d      	ldr	r3, [pc, #180]	@ (800e500 <mdns_build_service_domain+0x100>)
 800e44c:	f44f 7222 	mov.w	r2, #648	@ 0x288
 800e450:	492c      	ldr	r1, [pc, #176]	@ (800e504 <mdns_build_service_domain+0x104>)
 800e452:	482d      	ldr	r0, [pc, #180]	@ (800e508 <mdns_build_service_domain+0x108>)
 800e454:	f010 fac4 	bl	801e9e0 <iprintf>
 800e458:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e45c:	e04b      	b.n	800e4f6 <mdns_build_service_domain+0xf6>
				(res == ERR_OK), return res);
	}
	res = mdns_domain_add_label(domain, service->service,
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
			(u8_t) strlen(service->service));
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7f1 fee8 	bl	8000240 <strlen>
 800e470:	4603      	mov	r3, r0
	res = mdns_domain_add_label(domain, service->service,
 800e472:	b2db      	uxtb	r3, r3
 800e474:	461a      	mov	r2, r3
 800e476:	4621      	mov	r1, r4
 800e478:	68f8      	ldr	r0, [r7, #12]
 800e47a:	f7ff fc9c 	bl	800ddb6 <mdns_domain_add_label>
 800e47e:	4603      	mov	r3, r0
 800e480:	75fb      	strb	r3, [r7, #23]
	LWIP_ERROR("mdns_build_service_domain: Failed to add label",
 800e482:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d009      	beq.n	800e49e <mdns_build_service_domain+0x9e>
 800e48a:	4b1d      	ldr	r3, [pc, #116]	@ (800e500 <mdns_build_service_domain+0x100>)
 800e48c:	f240 228d 	movw	r2, #653	@ 0x28d
 800e490:	491c      	ldr	r1, [pc, #112]	@ (800e504 <mdns_build_service_domain+0x104>)
 800e492:	481d      	ldr	r0, [pc, #116]	@ (800e508 <mdns_build_service_domain+0x108>)
 800e494:	f010 faa4 	bl	801e9e0 <iprintf>
 800e498:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e49c:	e02b      	b.n	800e4f6 <mdns_build_service_domain+0xf6>
			(res == ERR_OK), return res);
	res = mdns_domain_add_label(domain, dnssd_protos[service->proto],
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	4b19      	ldr	r3, [pc, #100]	@ (800e50c <mdns_build_service_domain+0x10c>)
 800e4a8:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
			(u8_t) strlen(dnssd_protos[service->proto]));
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	f8b3 3190 	ldrh.w	r3, [r3, #400]	@ 0x190
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	4b15      	ldr	r3, [pc, #84]	@ (800e50c <mdns_build_service_domain+0x10c>)
 800e4b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7f1 fec0 	bl	8000240 <strlen>
 800e4c0:	4603      	mov	r3, r0
	res = mdns_domain_add_label(domain, dnssd_protos[service->proto],
 800e4c2:	b2db      	uxtb	r3, r3
 800e4c4:	461a      	mov	r2, r3
 800e4c6:	4621      	mov	r1, r4
 800e4c8:	68f8      	ldr	r0, [r7, #12]
 800e4ca:	f7ff fc74 	bl	800ddb6 <mdns_domain_add_label>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	75fb      	strb	r3, [r7, #23]
	LWIP_ERROR("mdns_build_service_domain: Failed to add label",
 800e4d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d009      	beq.n	800e4ee <mdns_build_service_domain+0xee>
 800e4da:	4b09      	ldr	r3, [pc, #36]	@ (800e500 <mdns_build_service_domain+0x100>)
 800e4dc:	f240 2291 	movw	r2, #657	@ 0x291
 800e4e0:	4908      	ldr	r1, [pc, #32]	@ (800e504 <mdns_build_service_domain+0x104>)
 800e4e2:	4809      	ldr	r0, [pc, #36]	@ (800e508 <mdns_build_service_domain+0x108>)
 800e4e4:	f010 fa7c 	bl	801e9e0 <iprintf>
 800e4e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e4ec:	e003      	b.n	800e4f6 <mdns_build_service_domain+0xf6>
			(res == ERR_OK), return res);
	return mdns_add_dotlocal(domain);
 800e4ee:	68f8      	ldr	r0, [r7, #12]
 800e4f0:	f7ff feb0 	bl	800e254 <mdns_add_dotlocal>
 800e4f4:	4603      	mov	r3, r0
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	371c      	adds	r7, #28
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd90      	pop	{r4, r7, pc}
 800e4fe:	bf00      	nop
 800e500:	0801feac 	.word	0x0801feac
 800e504:	08020018 	.word	0x08020018
 800e508:	0801ff18 	.word	0x0801ff18
 800e50c:	200000b0 	.word	0x200000b0

0800e510 <check_host>:
 * @param reverse_v6_reply Bitmask of which IPv6 addresses to send reverse PTRs for
 *                         if reply bit has REPLY_HOST_PTR_V6 set
 * @return Bitmask of which replies to send
 */
static int check_host(struct netif *netif, struct mdns_rr_info *rr,
		u8_t *reverse_v6_reply) {
 800e510:	b580      	push	{r7, lr}
 800e512:	b0c8      	sub	sp, #288	@ 0x120
 800e514:	af00      	add	r7, sp, #0
 800e516:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e51a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e51e:	6018      	str	r0, [r3, #0]
 800e520:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e524:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e528:	6019      	str	r1, [r3, #0]
 800e52a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e52e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800e532:	601a      	str	r2, [r3, #0]
	err_t res;
	int replies = 0;
 800e534:	2300      	movs	r3, #0
 800e536:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	struct mdns_domain mydomain;

	LWIP_UNUSED_ARG(reverse_v6_reply); /* if ipv6 is disabled */

	if (rr->klass != DNS_RRCLASS_IN && rr->klass != DNS_RRCLASS_ANY) {
 800e53a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e53e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 800e548:	2b01      	cmp	r3, #1
 800e54a:	d00b      	beq.n	800e564 <check_host+0x54>
 800e54c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e550:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 800e55a:	2bff      	cmp	r3, #255	@ 0xff
 800e55c:	d002      	beq.n	800e564 <check_host+0x54>
		/* Invalid class */
		return replies;
 800e55e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e562:	e08c      	b.n	800e67e <check_host+0x16e>
	}

	/* Handle PTR for our addresses */
	if (rr->type == DNS_RRTYPE_PTR || rr->type == DNS_RRTYPE_ANY) {
 800e564:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e568:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800e572:	2b0c      	cmp	r3, #12
 800e574:	d008      	beq.n	800e588 <check_host+0x78>
 800e576:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e57a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800e584:	2bff      	cmp	r3, #255	@ 0xff
 800e586:	d12f      	bne.n	800e5e8 <check_host+0xd8>
        }
      }
    }
#endif
#if LWIP_IPV4
		if (!ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e588:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e58c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	3304      	adds	r3, #4
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d026      	beq.n	800e5e8 <check_host+0xd8>
			res = mdns_build_reverse_v4_domain(&mydomain,
					netif_ip4_addr(netif));
 800e59a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e59e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	1d1a      	adds	r2, r3, #4
			res = mdns_build_reverse_v4_domain(&mydomain,
 800e5a6:	f107 0314 	add.w	r3, r7, #20
 800e5aa:	4611      	mov	r1, r2
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f7ff fdbb 	bl	800e128 <mdns_build_reverse_v4_domain>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
			if (res == ERR_OK && mdns_domain_eq(&rr->domain, &mydomain)) {
 800e5b8:	f997 311b 	ldrsb.w	r3, [r7, #283]	@ 0x11b
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d113      	bne.n	800e5e8 <check_host+0xd8>
 800e5c0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e5c4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	f107 0214 	add.w	r2, r7, #20
 800e5ce:	4611      	mov	r1, r2
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7ff fd2b 	bl	800e02c <mdns_domain_eq>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d005      	beq.n	800e5e8 <check_host+0xd8>
				replies |= REPLY_HOST_PTR_V4;
 800e5dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e5e0:	f043 0302 	orr.w	r3, r3, #2
 800e5e4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
			}
		}
#endif
	}

	res = mdns_build_host_domain(&mydomain, NETIF_TO_HOST(netif));
 800e5e8:	4b27      	ldr	r3, [pc, #156]	@ (800e688 <check_host+0x178>)
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e5f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e5f6:	681a      	ldr	r2, [r3, #0]
 800e5f8:	f101 0308 	add.w	r3, r1, #8
 800e5fc:	009b      	lsls	r3, r3, #2
 800e5fe:	4413      	add	r3, r2
 800e600:	685a      	ldr	r2, [r3, #4]
 800e602:	f107 0314 	add.w	r3, r7, #20
 800e606:	4611      	mov	r1, r2
 800e608:	4618      	mov	r0, r3
 800e60a:	f7ff fe4f 	bl	800e2ac <mdns_build_host_domain>
 800e60e:	4603      	mov	r3, r0
 800e610:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
	/* Handle requests for our hostname */
	if (res == ERR_OK && mdns_domain_eq(&rr->domain, &mydomain)) {
 800e614:	f997 311b 	ldrsb.w	r3, [r7, #283]	@ 0x11b
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d12e      	bne.n	800e67a <check_host+0x16a>
 800e61c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e620:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	f107 0214 	add.w	r2, r7, #20
 800e62a:	4611      	mov	r1, r2
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7ff fcfd 	bl	800e02c <mdns_domain_eq>
 800e632:	4603      	mov	r3, r0
 800e634:	2b00      	cmp	r3, #0
 800e636:	d020      	beq.n	800e67a <check_host+0x16a>
		/* TODO return NSEC if unsupported protocol requested */
#if LWIP_IPV4
		if (!ip4_addr_isany_val(*netif_ip4_addr(netif))
 800e638:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e63c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	3304      	adds	r3, #4
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d017      	beq.n	800e67a <check_host+0x16a>
				&& (rr->type == DNS_RRTYPE_A || rr->type == DNS_RRTYPE_ANY)) {
 800e64a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e64e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800e658:	2b01      	cmp	r3, #1
 800e65a:	d008      	beq.n	800e66e <check_host+0x15e>
 800e65c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800e660:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800e66a:	2bff      	cmp	r3, #255	@ 0xff
 800e66c:	d105      	bne.n	800e67a <check_host+0x16a>
			replies |= REPLY_HOST_A;
 800e66e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e672:	f043 0301 	orr.w	r3, r3, #1
 800e676:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
      replies |= REPLY_HOST_AAAA;
    }
#endif
	}

	return replies;
 800e67a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
}
 800e67e:	4618      	mov	r0, r3
 800e680:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}
 800e688:	2000475c 	.word	0x2000475c

0800e68c <check_service>:
 * Check which replies we should send for a service based on question
 * @param service A registered MDNS service
 * @param rr Domain/type/class from a question
 * @return Bitmask of which replies to send
 */
static int check_service(struct mdns_service *service, struct mdns_rr_info *rr) {
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b0c6      	sub	sp, #280	@ 0x118
 800e690:	af00      	add	r7, sp, #0
 800e692:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800e696:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e69a:	6018      	str	r0, [r3, #0]
 800e69c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800e6a0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e6a4:	6019      	str	r1, [r3, #0]
	err_t res;
	int replies = 0;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	struct mdns_domain mydomain;

	if (rr->klass != DNS_RRCLASS_IN && rr->klass != DNS_RRCLASS_ANY) {
 800e6ac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800e6b0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 800e6ba:	2b01      	cmp	r3, #1
 800e6bc:	d00a      	beq.n	800e6d4 <check_service+0x48>
 800e6be:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800e6c2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 800e6cc:	2bff      	cmp	r3, #255	@ 0xff
 800e6ce:	d001      	beq.n	800e6d4 <check_service+0x48>
		/* Invalid class */
		return 0;
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	e0b9      	b.n	800e848 <check_service+0x1bc>
	}

	res = mdns_build_dnssd_domain(&mydomain);
 800e6d4:	f107 030c 	add.w	r3, r7, #12
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f7ff fe2b 	bl	800e334 <mdns_build_dnssd_domain>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
	if (res == ERR_OK && mdns_domain_eq(&rr->domain, &mydomain)
 800e6e4:	f997 3113 	ldrsb.w	r3, [r7, #275]	@ 0x113
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d125      	bne.n	800e738 <check_service+0xac>
 800e6ec:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800e6f0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	f107 020c 	add.w	r2, r7, #12
 800e6fa:	4611      	mov	r1, r2
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7ff fc95 	bl	800e02c <mdns_domain_eq>
 800e702:	4603      	mov	r3, r0
 800e704:	2b00      	cmp	r3, #0
 800e706:	d017      	beq.n	800e738 <check_service+0xac>
			&& (rr->type == DNS_RRTYPE_PTR || rr->type == DNS_RRTYPE_ANY)) {
 800e708:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800e70c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800e716:	2b0c      	cmp	r3, #12
 800e718:	d008      	beq.n	800e72c <check_service+0xa0>
 800e71a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800e71e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800e728:	2bff      	cmp	r3, #255	@ 0xff
 800e72a:	d105      	bne.n	800e738 <check_service+0xac>
		/* Request for all service types */
		replies |= REPLY_SERVICE_TYPE_PTR;
 800e72c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e730:	f043 0310 	orr.w	r3, r3, #16
 800e734:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	}

	res = mdns_build_service_domain(&mydomain, service, 0);
 800e738:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800e73c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e740:	f107 000c 	add.w	r0, r7, #12
 800e744:	2200      	movs	r2, #0
 800e746:	6819      	ldr	r1, [r3, #0]
 800e748:	f7ff fe5a 	bl	800e400 <mdns_build_service_domain>
 800e74c:	4603      	mov	r3, r0
 800e74e:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
	if (res == ERR_OK && mdns_domain_eq(&rr->domain, &mydomain)
 800e752:	f997 3113 	ldrsb.w	r3, [r7, #275]	@ 0x113
 800e756:	2b00      	cmp	r3, #0
 800e758:	d125      	bne.n	800e7a6 <check_service+0x11a>
 800e75a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800e75e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f107 020c 	add.w	r2, r7, #12
 800e768:	4611      	mov	r1, r2
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7ff fc5e 	bl	800e02c <mdns_domain_eq>
 800e770:	4603      	mov	r3, r0
 800e772:	2b00      	cmp	r3, #0
 800e774:	d017      	beq.n	800e7a6 <check_service+0x11a>
			&& (rr->type == DNS_RRTYPE_PTR || rr->type == DNS_RRTYPE_ANY)) {
 800e776:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800e77a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800e784:	2b0c      	cmp	r3, #12
 800e786:	d008      	beq.n	800e79a <check_service+0x10e>
 800e788:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800e78c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800e796:	2bff      	cmp	r3, #255	@ 0xff
 800e798:	d105      	bne.n	800e7a6 <check_service+0x11a>
		/* Request for the instance of my service */
		replies |= REPLY_SERVICE_NAME_PTR;
 800e79a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e79e:	f043 0320 	orr.w	r3, r3, #32
 800e7a2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	}

	res = mdns_build_service_domain(&mydomain, service, 1);
 800e7a6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800e7aa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e7ae:	f107 000c 	add.w	r0, r7, #12
 800e7b2:	2201      	movs	r2, #1
 800e7b4:	6819      	ldr	r1, [r3, #0]
 800e7b6:	f7ff fe23 	bl	800e400 <mdns_build_service_domain>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
	if (res == ERR_OK && mdns_domain_eq(&rr->domain, &mydomain)) {
 800e7c0:	f997 3113 	ldrsb.w	r3, [r7, #275]	@ 0x113
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d13d      	bne.n	800e844 <check_service+0x1b8>
 800e7c8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800e7cc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	f107 020c 	add.w	r2, r7, #12
 800e7d6:	4611      	mov	r1, r2
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7ff fc27 	bl	800e02c <mdns_domain_eq>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d02f      	beq.n	800e844 <check_service+0x1b8>
		/* Request for info about my service */
		if (rr->type == DNS_RRTYPE_SRV || rr->type == DNS_RRTYPE_ANY) {
 800e7e4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800e7e8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800e7f2:	2b21      	cmp	r3, #33	@ 0x21
 800e7f4:	d008      	beq.n	800e808 <check_service+0x17c>
 800e7f6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800e7fa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800e804:	2bff      	cmp	r3, #255	@ 0xff
 800e806:	d105      	bne.n	800e814 <check_service+0x188>
			replies |= REPLY_SERVICE_SRV;
 800e808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e80c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e810:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
		}
		if (rr->type == DNS_RRTYPE_TXT || rr->type == DNS_RRTYPE_ANY) {
 800e814:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800e818:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800e822:	2b10      	cmp	r3, #16
 800e824:	d008      	beq.n	800e838 <check_service+0x1ac>
 800e826:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800e82a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800e834:	2bff      	cmp	r3, #255	@ 0xff
 800e836:	d105      	bne.n	800e844 <check_service+0x1b8>
			replies |= REPLY_SERVICE_TXT;
 800e838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800e83c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e840:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
		}
	}

	return replies;
 800e844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
}
 800e848:	4618      	mov	r0, r3
 800e84a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}

0800e852 <mdns_compress_domain>:
 * @return Number of bytes to write of the new domain before writing a jump to the offset.
 *         If compression can not be done against this previous domain name, the full new
 *         domain length is returned.
 */
u16_t mdns_compress_domain(struct pbuf *pbuf, u16_t *offset,
		struct mdns_domain *domain) {
 800e852:	b580      	push	{r7, lr}
 800e854:	b0ca      	sub	sp, #296	@ 0x128
 800e856:	af00      	add	r7, sp, #0
 800e858:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800e85c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800e860:	6018      	str	r0, [r3, #0]
 800e862:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800e866:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e86a:	6019      	str	r1, [r3, #0]
 800e86c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800e870:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800e874:	601a      	str	r2, [r3, #0]
	struct mdns_domain target;
	u16_t target_end;
	u8_t target_len;
	u8_t writelen = 0;
 800e876:	2300      	movs	r3, #0
 800e878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
	u8_t *ptr;
	if (pbuf == NULL) {
 800e87c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800e880:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d107      	bne.n	800e89a <mdns_compress_domain+0x48>
		return domain->length;
 800e88a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800e88e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800e898:	e0c5      	b.n	800ea26 <mdns_compress_domain+0x1d4>
	}
	target_end = mdns_readname(pbuf, *offset, &target);
 800e89a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800e89e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	8819      	ldrh	r1, [r3, #0]
 800e8a6:	f107 0214 	add.w	r2, r7, #20
 800e8aa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800e8ae:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800e8b2:	6818      	ldr	r0, [r3, #0]
 800e8b4:	f7ff fb7c 	bl	800dfb0 <mdns_readname>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
	if (target_end == MDNS_READNAME_ERROR) {
 800e8be:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 800e8c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e8c6:	4293      	cmp	r3, r2
 800e8c8:	d107      	bne.n	800e8da <mdns_compress_domain+0x88>
		return domain->length;
 800e8ca:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800e8ce:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800e8d8:	e0a5      	b.n	800ea26 <mdns_compress_domain+0x1d4>
	}
	target_len = (u8_t) (target_end - *offset);
 800e8da:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 800e8de:	b2da      	uxtb	r2, r3
 800e8e0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800e8e4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	881b      	ldrh	r3, [r3, #0]
 800e8ec:	b2db      	uxtb	r3, r3
 800e8ee:	1ad3      	subs	r3, r2, r3
 800e8f0:	f887 311d 	strb.w	r3, [r7, #285]	@ 0x11d
	ptr = domain->name;
 800e8f4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800e8f8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	while (writelen < domain->length) {
 800e902:	e07a      	b.n	800e9fa <mdns_compress_domain+0x1a8>
		u8_t domainlen = (u8_t) (domain->length - writelen);
 800e904:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800e908:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800e912:	b2da      	uxtb	r2, r3
 800e914:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e918:	1ad3      	subs	r3, r2, r3
 800e91a:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
		u8_t labellen;
		if (domainlen <= target.length && domainlen > DOMAIN_JUMP_SIZE) {
 800e91e:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 800e922:	b29a      	uxth	r2, r3
 800e924:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800e928:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e92c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800e930:	429a      	cmp	r2, r3
 800e932:	d84b      	bhi.n	800e9cc <mdns_compress_domain+0x17a>
 800e934:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 800e938:	2b02      	cmp	r3, #2
 800e93a:	d947      	bls.n	800e9cc <mdns_compress_domain+0x17a>
			/* Compare domains if target is long enough, and we have enough left of the domain */
			u8_t targetpos = (u8_t) (target.length - domainlen);
 800e93c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800e940:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e944:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800e948:	b2da      	uxtb	r2, r3
 800e94a:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 800e94e:	1ad3      	subs	r3, r2, r3
 800e950:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
			if ((targetpos + DOMAIN_JUMP_SIZE) >= target_len) {
 800e954:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e958:	1c9a      	adds	r2, r3, #2
 800e95a:	f897 311d 	ldrb.w	r3, [r7, #285]	@ 0x11d
 800e95e:	429a      	cmp	r2, r3
 800e960:	da59      	bge.n	800ea16 <mdns_compress_domain+0x1c4>
				/* We are checking at or beyond a jump in the original, stop looking */
				break;
			}
			if (target.length >= domainlen
 800e962:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800e966:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800e96a:	f8b3 2100 	ldrh.w	r2, [r3, #256]	@ 0x100
 800e96e:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 800e972:	b29b      	uxth	r3, r3
 800e974:	429a      	cmp	r2, r3
 800e976:	d329      	bcc.n	800e9cc <mdns_compress_domain+0x17a>
					&& memcmp(&domain->name[writelen], &target.name[targetpos],
 800e978:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e97c:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 800e980:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 800e984:	6812      	ldr	r2, [r2, #0]
 800e986:	18d0      	adds	r0, r2, r3
 800e988:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e98c:	f107 0214 	add.w	r2, r7, #20
 800e990:	4413      	add	r3, r2
 800e992:	f897 211c 	ldrb.w	r2, [r7, #284]	@ 0x11c
 800e996:	4619      	mov	r1, r3
 800e998:	f010 f9c8 	bl	801ed2c <memcmp>
 800e99c:	4603      	mov	r3, r0
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d114      	bne.n	800e9cc <mdns_compress_domain+0x17a>
							domainlen) == 0) {
				*offset += targetpos;
 800e9a2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800e9a6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	881a      	ldrh	r2, [r3, #0]
 800e9ae:	f897 311b 	ldrb.w	r3, [r7, #283]	@ 0x11b
 800e9b2:	b29b      	uxth	r3, r3
 800e9b4:	4413      	add	r3, r2
 800e9b6:	b29a      	uxth	r2, r3
 800e9b8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800e9bc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	801a      	strh	r2, [r3, #0]
				return writelen;
 800e9c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	e02c      	b.n	800ea26 <mdns_compress_domain+0x1d4>
			}
		}
		/* Skip to next label in domain */
		labellen = *ptr;
 800e9cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e9d0:	781b      	ldrb	r3, [r3, #0]
 800e9d2:	f887 311a 	strb.w	r3, [r7, #282]	@ 0x11a
		writelen += 1 + labellen;
 800e9d6:	f897 211a 	ldrb.w	r2, [r7, #282]	@ 0x11a
 800e9da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e9de:	4413      	add	r3, r2
 800e9e0:	b2db      	uxtb	r3, r3
 800e9e2:	3301      	adds	r3, #1
 800e9e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
		ptr += 1 + labellen;
 800e9e8:	f897 311a 	ldrb.w	r3, [r7, #282]	@ 0x11a
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800e9f4:	4413      	add	r3, r2
 800e9f6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	while (writelen < domain->length) {
 800e9fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800e9fe:	b29a      	uxth	r2, r3
 800ea00:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800ea04:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	f4ff af78 	bcc.w	800e904 <mdns_compress_domain+0xb2>
 800ea14:	e000      	b.n	800ea18 <mdns_compress_domain+0x1c6>
				break;
 800ea16:	bf00      	nop
	}
	/* Nothing found */
	return domain->length;
 800ea18:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800ea1c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <mdns_write_domain>:
 * @param outpkt The outpacket to write to
 * @param domain The domain name to write
 * @return ERR_OK on success, an err_t otherwise
 */
static err_t mdns_write_domain(struct mdns_outpacket *outpkt,
		struct mdns_domain *domain) {
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b086      	sub	sp, #24
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	6039      	str	r1, [r7, #0]
	int i;
	err_t res;
	u16_t writelen = domain->length;
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800ea40:	827b      	strh	r3, [r7, #18]
	u16_t jump_offset = 0;
 800ea42:	2300      	movs	r3, #0
 800ea44:	823b      	strh	r3, [r7, #16]
	u16_t jump;

	if (!domain->skip_compression) {
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d124      	bne.n	800ea9a <mdns_write_domain+0x6a>
		for (i = 0; i < NUM_DOMAIN_OFFSETS; i++) {
 800ea50:	2300      	movs	r3, #0
 800ea52:	617b      	str	r3, [r7, #20]
 800ea54:	e01e      	b.n	800ea94 <mdns_write_domain+0x64>
			u16_t offset = outpkt->domain_offsets[i];
 800ea56:	687a      	ldr	r2, [r7, #4]
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	330c      	adds	r3, #12
 800ea5c:	005b      	lsls	r3, r3, #1
 800ea5e:	4413      	add	r3, r2
 800ea60:	885b      	ldrh	r3, [r3, #2]
 800ea62:	813b      	strh	r3, [r7, #8]
			if (offset) {
 800ea64:	893b      	ldrh	r3, [r7, #8]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d011      	beq.n	800ea8e <mdns_write_domain+0x5e>
				u16_t len = mdns_compress_domain(outpkt->pbuf, &offset, domain);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	f107 0108 	add.w	r1, r7, #8
 800ea72:	683a      	ldr	r2, [r7, #0]
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7ff feec 	bl	800e852 <mdns_compress_domain>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	81fb      	strh	r3, [r7, #14]
				if (len < writelen) {
 800ea7e:	89fa      	ldrh	r2, [r7, #14]
 800ea80:	8a7b      	ldrh	r3, [r7, #18]
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d203      	bcs.n	800ea8e <mdns_write_domain+0x5e>
					writelen = len;
 800ea86:	89fb      	ldrh	r3, [r7, #14]
 800ea88:	827b      	strh	r3, [r7, #18]
					jump_offset = offset;
 800ea8a:	893b      	ldrh	r3, [r7, #8]
 800ea8c:	823b      	strh	r3, [r7, #16]
		for (i = 0; i < NUM_DOMAIN_OFFSETS; i++) {
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	3301      	adds	r3, #1
 800ea92:	617b      	str	r3, [r7, #20]
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	2b09      	cmp	r3, #9
 800ea98:	dddd      	ble.n	800ea56 <mdns_write_domain+0x26>
				}
			}
		}
	}

	if (writelen) {
 800ea9a:	8a7b      	ldrh	r3, [r7, #18]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d032      	beq.n	800eb06 <mdns_write_domain+0xd6>
		/* Write uncompressed part of name */
		res = pbuf_take_at(outpkt->pbuf, domain->name, writelen,
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6858      	ldr	r0, [r3, #4]
 800eaa4:	6839      	ldr	r1, [r7, #0]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	891b      	ldrh	r3, [r3, #8]
 800eaaa:	8a7a      	ldrh	r2, [r7, #18]
 800eaac:	f004 f8be 	bl	8012c2c <pbuf_take_at>
 800eab0:	4603      	mov	r3, r0
 800eab2:	737b      	strb	r3, [r7, #13]
				outpkt->write_offset);
		if (res != ERR_OK) {
 800eab4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d002      	beq.n	800eac2 <mdns_write_domain+0x92>
			return res;
 800eabc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800eac0:	e048      	b.n	800eb54 <mdns_write_domain+0x124>
		}

		/* Store offset of this new domain */
		for (i = 0; i < NUM_DOMAIN_OFFSETS; i++) {
 800eac2:	2300      	movs	r3, #0
 800eac4:	617b      	str	r3, [r7, #20]
 800eac6:	e014      	b.n	800eaf2 <mdns_write_domain+0xc2>
			if (outpkt->domain_offsets[i] == 0) {
 800eac8:	687a      	ldr	r2, [r7, #4]
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	330c      	adds	r3, #12
 800eace:	005b      	lsls	r3, r3, #1
 800ead0:	4413      	add	r3, r2
 800ead2:	885b      	ldrh	r3, [r3, #2]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d109      	bne.n	800eaec <mdns_write_domain+0xbc>
				outpkt->domain_offsets[i] = outpkt->write_offset;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	8919      	ldrh	r1, [r3, #8]
 800eadc:	687a      	ldr	r2, [r7, #4]
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	330c      	adds	r3, #12
 800eae2:	005b      	lsls	r3, r3, #1
 800eae4:	4413      	add	r3, r2
 800eae6:	460a      	mov	r2, r1
 800eae8:	805a      	strh	r2, [r3, #2]
				break;
 800eaea:	e005      	b.n	800eaf8 <mdns_write_domain+0xc8>
		for (i = 0; i < NUM_DOMAIN_OFFSETS; i++) {
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	3301      	adds	r3, #1
 800eaf0:	617b      	str	r3, [r7, #20]
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	2b09      	cmp	r3, #9
 800eaf6:	dde7      	ble.n	800eac8 <mdns_write_domain+0x98>
			}
		}

		outpkt->write_offset += writelen;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	891a      	ldrh	r2, [r3, #8]
 800eafc:	8a7b      	ldrh	r3, [r7, #18]
 800eafe:	4413      	add	r3, r2
 800eb00:	b29a      	uxth	r2, r3
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	811a      	strh	r2, [r3, #8]
	}
	if (jump_offset) {
 800eb06:	8a3b      	ldrh	r3, [r7, #16]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d022      	beq.n	800eb52 <mdns_write_domain+0x122>
		/* Write jump */
		jump = lwip_htons(DOMAIN_JUMP | jump_offset);
 800eb0c:	8a3b      	ldrh	r3, [r7, #16]
 800eb0e:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 800eb12:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 800eb16:	b29b      	uxth	r3, r3
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f001 ffed 	bl	8010af8 <lwip_htons>
 800eb1e:	4603      	mov	r3, r0
 800eb20:	817b      	strh	r3, [r7, #10]
		res = pbuf_take_at(outpkt->pbuf, &jump, DOMAIN_JUMP_SIZE,
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6858      	ldr	r0, [r3, #4]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	891b      	ldrh	r3, [r3, #8]
 800eb2a:	f107 010a 	add.w	r1, r7, #10
 800eb2e:	2202      	movs	r2, #2
 800eb30:	f004 f87c 	bl	8012c2c <pbuf_take_at>
 800eb34:	4603      	mov	r3, r0
 800eb36:	737b      	strb	r3, [r7, #13]
				outpkt->write_offset);
		if (res != ERR_OK) {
 800eb38:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d002      	beq.n	800eb46 <mdns_write_domain+0x116>
			return res;
 800eb40:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800eb44:	e006      	b.n	800eb54 <mdns_write_domain+0x124>
		}
		outpkt->write_offset += DOMAIN_JUMP_SIZE;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	891b      	ldrh	r3, [r3, #8]
 800eb4a:	3302      	adds	r3, #2
 800eb4c:	b29a      	uxth	r2, r3
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	811a      	strh	r2, [r3, #8]
	}
	return ERR_OK;
 800eb52:	2300      	movs	r3, #0
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3718      	adds	r7, #24
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <mdns_add_question>:
 * @param unicast If highest bit in class should be set, to instruct the responder to
 *                reply with a unicast packet
 * @return ERR_OK on success, an err_t otherwise
 */
static err_t mdns_add_question(struct mdns_outpacket *outpkt,
		struct mdns_domain *domain, u16_t type, u16_t klass, u16_t unicast) {
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b086      	sub	sp, #24
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	60b9      	str	r1, [r7, #8]
 800eb66:	4611      	mov	r1, r2
 800eb68:	461a      	mov	r2, r3
 800eb6a:	460b      	mov	r3, r1
 800eb6c:	80fb      	strh	r3, [r7, #6]
 800eb6e:	4613      	mov	r3, r2
 800eb70:	80bb      	strh	r3, [r7, #4]
	u16_t question_len;
	u16_t field16;
	err_t res;

	if (!outpkt->pbuf) {
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	685b      	ldr	r3, [r3, #4]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d113      	bne.n	800eba2 <mdns_add_question+0x46>
		/* If no pbuf is active, allocate one */
		outpkt->pbuf = pbuf_alloc(PBUF_TRANSPORT, OUTPACKET_SIZE, PBUF_RAM);
 800eb7a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800eb7e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800eb82:	2036      	movs	r0, #54	@ 0x36
 800eb84:	f003 fa28 	bl	8011fd8 <pbuf_alloc>
 800eb88:	4602      	mov	r2, r0
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	605a      	str	r2, [r3, #4]
		if (!outpkt->pbuf) {
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	685b      	ldr	r3, [r3, #4]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d102      	bne.n	800eb9c <mdns_add_question+0x40>
			return ERR_MEM;
 800eb96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800eb9a:	e067      	b.n	800ec6c <mdns_add_question+0x110>
		}
		outpkt->write_offset = SIZEOF_DNS_HDR;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	220c      	movs	r2, #12
 800eba0:	811a      	strh	r2, [r3, #8]
	}

	/* Worst case calculation. Domain string might be compressed */
	question_len = domain->length + sizeof(type) + sizeof(klass);
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800eba8:	3304      	adds	r3, #4
 800ebaa:	82fb      	strh	r3, [r7, #22]
	if (outpkt->write_offset + question_len > outpkt->pbuf->tot_len) {
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	891b      	ldrh	r3, [r3, #8]
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	8afb      	ldrh	r3, [r7, #22]
 800ebb4:	4413      	add	r3, r2
 800ebb6:	68fa      	ldr	r2, [r7, #12]
 800ebb8:	6852      	ldr	r2, [r2, #4]
 800ebba:	8912      	ldrh	r2, [r2, #8]
 800ebbc:	4293      	cmp	r3, r2
 800ebbe:	dd02      	ble.n	800ebc6 <mdns_add_question+0x6a>
		/* No space */
		return ERR_MEM;
 800ebc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ebc4:	e052      	b.n	800ec6c <mdns_add_question+0x110>
	}

	/* Write name */
	res = mdns_write_domain(outpkt, domain);
 800ebc6:	68b9      	ldr	r1, [r7, #8]
 800ebc8:	68f8      	ldr	r0, [r7, #12]
 800ebca:	f7ff ff31 	bl	800ea30 <mdns_write_domain>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	757b      	strb	r3, [r7, #21]
	if (res != ERR_OK) {
 800ebd2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d002      	beq.n	800ebe0 <mdns_add_question+0x84>

		return res;
 800ebda:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800ebde:	e045      	b.n	800ec6c <mdns_add_question+0x110>
	}

	/* Write type */
	field16 = lwip_htons(type);
 800ebe0:	88fb      	ldrh	r3, [r7, #6]
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f001 ff88 	bl	8010af8 <lwip_htons>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	827b      	strh	r3, [r7, #18]
	res = pbuf_take_at(outpkt->pbuf, &field16, sizeof(field16),
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	6858      	ldr	r0, [r3, #4]
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	891b      	ldrh	r3, [r3, #8]
 800ebf4:	f107 0112 	add.w	r1, r7, #18
 800ebf8:	2202      	movs	r2, #2
 800ebfa:	f004 f817 	bl	8012c2c <pbuf_take_at>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	757b      	strb	r3, [r7, #21]
			outpkt->write_offset);
	if (res != ERR_OK) {
 800ec02:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d002      	beq.n	800ec10 <mdns_add_question+0xb4>
		return res;
 800ec0a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800ec0e:	e02d      	b.n	800ec6c <mdns_add_question+0x110>
	}
	outpkt->write_offset += sizeof(field16);
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	891b      	ldrh	r3, [r3, #8]
 800ec14:	3302      	adds	r3, #2
 800ec16:	b29a      	uxth	r2, r3
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	811a      	strh	r2, [r3, #8]

	/* Write class */
	if (unicast) {
 800ec1c:	8c3b      	ldrh	r3, [r7, #32]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d005      	beq.n	800ec2e <mdns_add_question+0xd2>
		klass |= 0x8000;
 800ec22:	88bb      	ldrh	r3, [r7, #4]
 800ec24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec2c:	80bb      	strh	r3, [r7, #4]
	}
	field16 = lwip_htons(klass);
 800ec2e:	88bb      	ldrh	r3, [r7, #4]
 800ec30:	4618      	mov	r0, r3
 800ec32:	f001 ff61 	bl	8010af8 <lwip_htons>
 800ec36:	4603      	mov	r3, r0
 800ec38:	827b      	strh	r3, [r7, #18]
	res = pbuf_take_at(outpkt->pbuf, &field16, sizeof(field16),
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	6858      	ldr	r0, [r3, #4]
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	891b      	ldrh	r3, [r3, #8]
 800ec42:	f107 0112 	add.w	r1, r7, #18
 800ec46:	2202      	movs	r2, #2
 800ec48:	f003 fff0 	bl	8012c2c <pbuf_take_at>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	757b      	strb	r3, [r7, #21]
			outpkt->write_offset);
	if (res != ERR_OK) {
 800ec50:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d002      	beq.n	800ec5e <mdns_add_question+0x102>
		return res;
 800ec58:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800ec5c:	e006      	b.n	800ec6c <mdns_add_question+0x110>
	}
	outpkt->write_offset += sizeof(field16);
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	891b      	ldrh	r3, [r3, #8]
 800ec62:	3302      	adds	r3, #2
 800ec64:	b29a      	uxth	r2, r3
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	811a      	strh	r2, [r3, #8]

	return ERR_OK;
 800ec6a:	2300      	movs	r3, #0
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3718      	adds	r7, #24
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}

0800ec74 <mdns_add_answer>:
 * @return ERR_OK on success, an err_t otherwise
 */
static err_t mdns_add_answer(struct mdns_outpacket *reply,
		struct mdns_domain *domain, u16_t type, u16_t klass, u16_t cache_flush,
		u32_t ttl, const u8_t *buf, size_t buf_length,
		struct mdns_domain *answer_domain) {
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b08a      	sub	sp, #40	@ 0x28
 800ec78:	af02      	add	r7, sp, #8
 800ec7a:	60f8      	str	r0, [r7, #12]
 800ec7c:	60b9      	str	r1, [r7, #8]
 800ec7e:	4611      	mov	r1, r2
 800ec80:	461a      	mov	r2, r3
 800ec82:	460b      	mov	r3, r1
 800ec84:	80fb      	strh	r3, [r7, #6]
 800ec86:	4613      	mov	r3, r2
 800ec88:	80bb      	strh	r3, [r7, #4]
	u16_t rdlen_offset;
	u16_t answer_offset;
	u32_t field32;
	err_t res;

	if (!reply->pbuf) {
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d113      	bne.n	800ecba <mdns_add_answer+0x46>
		/* If no pbuf is active, allocate one */
		reply->pbuf = pbuf_alloc(PBUF_TRANSPORT, OUTPACKET_SIZE, PBUF_RAM);
 800ec92:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800ec96:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800ec9a:	2036      	movs	r0, #54	@ 0x36
 800ec9c:	f003 f99c 	bl	8011fd8 <pbuf_alloc>
 800eca0:	4602      	mov	r2, r0
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	605a      	str	r2, [r3, #4]
		if (!reply->pbuf) {
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	685b      	ldr	r3, [r3, #4]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d102      	bne.n	800ecb4 <mdns_add_answer+0x40>
			return ERR_MEM;
 800ecae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ecb2:	e09a      	b.n	800edea <mdns_add_answer+0x176>
		}
		reply->write_offset = SIZEOF_DNS_HDR;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	220c      	movs	r2, #12
 800ecb8:	811a      	strh	r2, [r3, #8]
	}

	/* Worst case calculation. Domain strings might be compressed */
	answer_len = domain->length + sizeof(type) + sizeof(klass) + sizeof(ttl)
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800ecc0:	330a      	adds	r3, #10
 800ecc2:	83fb      	strh	r3, [r7, #30]
			+ sizeof(field16)/*rd_length*/;
	if (buf) {
 800ecc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d004      	beq.n	800ecd4 <mdns_add_answer+0x60>
		answer_len += (u16_t) buf_length;
 800ecca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eccc:	b29a      	uxth	r2, r3
 800ecce:	8bfb      	ldrh	r3, [r7, #30]
 800ecd0:	4413      	add	r3, r2
 800ecd2:	83fb      	strh	r3, [r7, #30]
	}
	if (answer_domain) {
 800ecd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d005      	beq.n	800ece6 <mdns_add_answer+0x72>
		answer_len += answer_domain->length;
 800ecda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecdc:	f8b3 2100 	ldrh.w	r2, [r3, #256]	@ 0x100
 800ece0:	8bfb      	ldrh	r3, [r7, #30]
 800ece2:	4413      	add	r3, r2
 800ece4:	83fb      	strh	r3, [r7, #30]
	}
	if (reply->write_offset + answer_len > reply->pbuf->tot_len) {
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	891b      	ldrh	r3, [r3, #8]
 800ecea:	461a      	mov	r2, r3
 800ecec:	8bfb      	ldrh	r3, [r7, #30]
 800ecee:	4413      	add	r3, r2
 800ecf0:	68fa      	ldr	r2, [r7, #12]
 800ecf2:	6852      	ldr	r2, [r2, #4]
 800ecf4:	8912      	ldrh	r2, [r2, #8]
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	dd02      	ble.n	800ed00 <mdns_add_answer+0x8c>
		/* No space */
		return ERR_MEM;
 800ecfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ecfe:	e074      	b.n	800edea <mdns_add_answer+0x176>
	}

	/* Answer starts with same data as question, then more fields */
	mdns_add_question(reply, domain, type, klass, cache_flush);
 800ed00:	88b9      	ldrh	r1, [r7, #4]
 800ed02:	88fa      	ldrh	r2, [r7, #6]
 800ed04:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ed06:	9300      	str	r3, [sp, #0]
 800ed08:	460b      	mov	r3, r1
 800ed0a:	68b9      	ldr	r1, [r7, #8]
 800ed0c:	68f8      	ldr	r0, [r7, #12]
 800ed0e:	f7ff ff25 	bl	800eb5c <mdns_add_question>

	/* Write TTL */
	field32 = lwip_htonl(ttl);
 800ed12:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ed14:	f001 ff06 	bl	8010b24 <lwip_htonl>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	613b      	str	r3, [r7, #16]
	res = pbuf_take_at(reply->pbuf, &field32, sizeof(field32),
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	6858      	ldr	r0, [r3, #4]
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	891b      	ldrh	r3, [r3, #8]
 800ed24:	f107 0110 	add.w	r1, r7, #16
 800ed28:	2204      	movs	r2, #4
 800ed2a:	f003 ff7f 	bl	8012c2c <pbuf_take_at>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	777b      	strb	r3, [r7, #29]
			reply->write_offset);
	if (res != ERR_OK) {
 800ed32:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d002      	beq.n	800ed40 <mdns_add_answer+0xcc>
		return res;
 800ed3a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ed3e:	e054      	b.n	800edea <mdns_add_answer+0x176>
	}
	reply->write_offset += sizeof(field32);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	891b      	ldrh	r3, [r3, #8]
 800ed44:	3304      	adds	r3, #4
 800ed46:	b29a      	uxth	r2, r3
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	811a      	strh	r2, [r3, #8]

	/* Store offsets and skip forward to the data */
	rdlen_offset = reply->write_offset;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	891b      	ldrh	r3, [r3, #8]
 800ed50:	837b      	strh	r3, [r7, #26]
	reply->write_offset += sizeof(field16);
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	891b      	ldrh	r3, [r3, #8]
 800ed56:	3302      	adds	r3, #2
 800ed58:	b29a      	uxth	r2, r3
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	811a      	strh	r2, [r3, #8]
	answer_offset = reply->write_offset;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	891b      	ldrh	r3, [r3, #8]
 800ed62:	833b      	strh	r3, [r7, #24]

	if (buf) {
 800ed64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d019      	beq.n	800ed9e <mdns_add_answer+0x12a>
		/* Write static data */
		res = pbuf_take_at(reply->pbuf, buf, (u16_t) buf_length,
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	6858      	ldr	r0, [r3, #4]
 800ed6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed70:	b29a      	uxth	r2, r3
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	891b      	ldrh	r3, [r3, #8]
 800ed76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ed78:	f003 ff58 	bl	8012c2c <pbuf_take_at>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	777b      	strb	r3, [r7, #29]
				reply->write_offset);
		if (res != ERR_OK) {
 800ed80:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d002      	beq.n	800ed8e <mdns_add_answer+0x11a>
			return res;
 800ed88:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ed8c:	e02d      	b.n	800edea <mdns_add_answer+0x176>
		}
		reply->write_offset += (u16_t) buf_length;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	891a      	ldrh	r2, [r3, #8]
 800ed92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed94:	b29b      	uxth	r3, r3
 800ed96:	4413      	add	r3, r2
 800ed98:	b29a      	uxth	r2, r3
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	811a      	strh	r2, [r3, #8]
	}

	if (answer_domain) {
 800ed9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d00c      	beq.n	800edbe <mdns_add_answer+0x14a>
		/* Write name answer (compressed if possible) */
		res = mdns_write_domain(reply, answer_domain);
 800eda4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800eda6:	68f8      	ldr	r0, [r7, #12]
 800eda8:	f7ff fe42 	bl	800ea30 <mdns_write_domain>
 800edac:	4603      	mov	r3, r0
 800edae:	777b      	strb	r3, [r7, #29]
		if (res != ERR_OK) {
 800edb0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d002      	beq.n	800edbe <mdns_add_answer+0x14a>
			return res;
 800edb8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800edbc:	e015      	b.n	800edea <mdns_add_answer+0x176>
		}
	}

	/* Write rd_length after when we know the answer size */
	field16 = lwip_htons(reply->write_offset - answer_offset);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	891a      	ldrh	r2, [r3, #8]
 800edc2:	8b3b      	ldrh	r3, [r7, #24]
 800edc4:	1ad3      	subs	r3, r2, r3
 800edc6:	b29b      	uxth	r3, r3
 800edc8:	4618      	mov	r0, r3
 800edca:	f001 fe95 	bl	8010af8 <lwip_htons>
 800edce:	4603      	mov	r3, r0
 800edd0:	82fb      	strh	r3, [r7, #22]
	res = pbuf_take_at(reply->pbuf, &field16, sizeof(field16), rdlen_offset);
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	6858      	ldr	r0, [r3, #4]
 800edd6:	8b7b      	ldrh	r3, [r7, #26]
 800edd8:	f107 0116 	add.w	r1, r7, #22
 800eddc:	2202      	movs	r2, #2
 800edde:	f003 ff25 	bl	8012c2c <pbuf_take_at>
 800ede2:	4603      	mov	r3, r0
 800ede4:	777b      	strb	r3, [r7, #29]

	return res;
 800ede6:	f997 301d 	ldrsb.w	r3, [r7, #29]
}
 800edea:	4618      	mov	r0, r3
 800edec:	3720      	adds	r7, #32
 800edee:	46bd      	mov	sp, r7
 800edf0:	bd80      	pop	{r7, pc}

0800edf2 <mdns_read_rr_info>:
 *            incremented to point to the next unparsed byte.
 * @param info The struct to fill with domain, type and class
 * @return ERR_OK on success, an err_t otherwise
 */
static err_t mdns_read_rr_info(struct mdns_packet *pkt,
		struct mdns_rr_info *info) {
 800edf2:	b580      	push	{r7, lr}
 800edf4:	b084      	sub	sp, #16
 800edf6:	af00      	add	r7, sp, #0
 800edf8:	6078      	str	r0, [r7, #4]
 800edfa:	6039      	str	r1, [r7, #0]
	u16_t field16, copied;
	pkt->parse_offset = mdns_readname(pkt->pbuf, pkt->parse_offset,
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	68d8      	ldr	r0, [r3, #12]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	8a1b      	ldrh	r3, [r3, #16]
 800ee04:	683a      	ldr	r2, [r7, #0]
 800ee06:	4619      	mov	r1, r3
 800ee08:	f7ff f8d2 	bl	800dfb0 <mdns_readname>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	461a      	mov	r2, r3
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	821a      	strh	r2, [r3, #16]
			&info->domain);
	if (pkt->parse_offset == MDNS_READNAME_ERROR) {
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	8a1b      	ldrh	r3, [r3, #16]
 800ee18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ee1c:	4293      	cmp	r3, r2
 800ee1e:	d102      	bne.n	800ee26 <mdns_read_rr_info+0x34>
		return ERR_VAL;
 800ee20:	f06f 0305 	mvn.w	r3, #5
 800ee24:	e042      	b.n	800eeac <mdns_read_rr_info+0xba>
	}

	copied = pbuf_copy_partial(pkt->pbuf, &field16, sizeof(field16),
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	68d8      	ldr	r0, [r3, #12]
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	8a1b      	ldrh	r3, [r3, #16]
 800ee2e:	f107 010c 	add.w	r1, r7, #12
 800ee32:	2202      	movs	r2, #2
 800ee34:	f003 fdba 	bl	80129ac <pbuf_copy_partial>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	81fb      	strh	r3, [r7, #14]
			pkt->parse_offset);
	if (copied != sizeof(field16)) {
 800ee3c:	89fb      	ldrh	r3, [r7, #14]
 800ee3e:	2b02      	cmp	r3, #2
 800ee40:	d002      	beq.n	800ee48 <mdns_read_rr_info+0x56>
		return ERR_VAL;
 800ee42:	f06f 0305 	mvn.w	r3, #5
 800ee46:	e031      	b.n	800eeac <mdns_read_rr_info+0xba>
	}
	pkt->parse_offset += copied;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	8a1a      	ldrh	r2, [r3, #16]
 800ee4c:	89fb      	ldrh	r3, [r7, #14]
 800ee4e:	4413      	add	r3, r2
 800ee50:	b29a      	uxth	r2, r3
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	821a      	strh	r2, [r3, #16]
	info->type = lwip_ntohs(field16);
 800ee56:	89bb      	ldrh	r3, [r7, #12]
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f001 fe4d 	bl	8010af8 <lwip_htons>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	461a      	mov	r2, r3
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104

	copied = pbuf_copy_partial(pkt->pbuf, &field16, sizeof(field16),
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	68d8      	ldr	r0, [r3, #12]
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	8a1b      	ldrh	r3, [r3, #16]
 800ee70:	f107 010c 	add.w	r1, r7, #12
 800ee74:	2202      	movs	r2, #2
 800ee76:	f003 fd99 	bl	80129ac <pbuf_copy_partial>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	81fb      	strh	r3, [r7, #14]
			pkt->parse_offset);
	if (copied != sizeof(field16)) {
 800ee7e:	89fb      	ldrh	r3, [r7, #14]
 800ee80:	2b02      	cmp	r3, #2
 800ee82:	d002      	beq.n	800ee8a <mdns_read_rr_info+0x98>
		return ERR_VAL;
 800ee84:	f06f 0305 	mvn.w	r3, #5
 800ee88:	e010      	b.n	800eeac <mdns_read_rr_info+0xba>
	}
	pkt->parse_offset += copied;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	8a1a      	ldrh	r2, [r3, #16]
 800ee8e:	89fb      	ldrh	r3, [r7, #14]
 800ee90:	4413      	add	r3, r2
 800ee92:	b29a      	uxth	r2, r3
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	821a      	strh	r2, [r3, #16]
	info->klass = lwip_ntohs(field16);
 800ee98:	89bb      	ldrh	r3, [r7, #12]
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f001 fe2c 	bl	8010af8 <lwip_htons>
 800eea0:	4603      	mov	r3, r0
 800eea2:	461a      	mov	r2, r3
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106

	return ERR_OK;
 800eeaa:	2300      	movs	r3, #0
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3710      	adds	r7, #16
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <mdns_read_question>:
 *            and the parse_offset will be updated.
 * @param question The struct to fill with question data
 * @return ERR_OK on success, an err_t otherwise
 */
static err_t mdns_read_question(struct mdns_packet *pkt,
		struct mdns_question *question) {
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b084      	sub	sp, #16
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	6039      	str	r1, [r7, #0]
	/* Safety check */
	if (pkt->pbuf->tot_len < pkt->parse_offset) {
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	68db      	ldr	r3, [r3, #12]
 800eec2:	891a      	ldrh	r2, [r3, #8]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	8a1b      	ldrh	r3, [r3, #16]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d202      	bcs.n	800eed2 <mdns_read_question+0x1e>
		return ERR_VAL;
 800eecc:	f06f 0305 	mvn.w	r3, #5
 800eed0:	e033      	b.n	800ef3a <mdns_read_question+0x86>
	}

	if (pkt->questions_left) {
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	8adb      	ldrh	r3, [r3, #22]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d02d      	beq.n	800ef36 <mdns_read_question+0x82>
		err_t res;
		pkt->questions_left--;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	8adb      	ldrh	r3, [r3, #22]
 800eede:	3b01      	subs	r3, #1
 800eee0:	b29a      	uxth	r2, r3
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	82da      	strh	r2, [r3, #22]

		memset(question, 0, sizeof(struct mdns_question));
 800eee6:	f44f 7285 	mov.w	r2, #266	@ 0x10a
 800eeea:	2100      	movs	r1, #0
 800eeec:	6838      	ldr	r0, [r7, #0]
 800eeee:	f00f ff47 	bl	801ed80 <memset>
		res = mdns_read_rr_info(pkt, &question->info);
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	4619      	mov	r1, r3
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f7ff ff7b 	bl	800edf2 <mdns_read_rr_info>
 800eefc:	4603      	mov	r3, r0
 800eefe:	73fb      	strb	r3, [r7, #15]
		if (res != ERR_OK) {
 800ef00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d002      	beq.n	800ef0e <mdns_read_question+0x5a>
			return res;
 800ef08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef0c:	e015      	b.n	800ef3a <mdns_read_question+0x86>
		}

		/* Extract unicast flag from class field */
		question->unicast = question->info.klass & 0x8000;
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 800ef14:	4b0b      	ldr	r3, [pc, #44]	@ (800ef44 <mdns_read_question+0x90>)
 800ef16:	4013      	ands	r3, r2
 800ef18:	b29a      	uxth	r2, r3
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
		question->info.klass &= 0x7FFF;
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 800ef26:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ef2a:	b29a      	uxth	r2, r3
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106

		return ERR_OK;
 800ef32:	2300      	movs	r3, #0
 800ef34:	e001      	b.n	800ef3a <mdns_read_question+0x86>
	}
	return ERR_VAL;
 800ef36:	f06f 0305 	mvn.w	r3, #5
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	3710      	adds	r7, #16
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	bf00      	nop
 800ef44:	ffff8000 	.word	0xffff8000

0800ef48 <mdns_read_answer>:
 *            the parse_offset will be updated.
 * @param answer The struct to fill with answer data
 * @return ERR_OK on success, an err_t otherwise
 */
static err_t mdns_read_answer(struct mdns_packet *pkt,
		struct mdns_answer *answer) {
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b086      	sub	sp, #24
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	6039      	str	r1, [r7, #0]
	/* Read questions first */
	if (pkt->questions_left) {
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	8adb      	ldrh	r3, [r3, #22]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d002      	beq.n	800ef60 <mdns_read_answer+0x18>
		return ERR_VAL;
 800ef5a:	f06f 0305 	mvn.w	r3, #5
 800ef5e:	e08c      	b.n	800f07a <mdns_read_answer+0x132>
	}

	/* Safety check */
	if (pkt->pbuf->tot_len < pkt->parse_offset) {
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	68db      	ldr	r3, [r3, #12]
 800ef64:	891a      	ldrh	r2, [r3, #8]
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	8a1b      	ldrh	r3, [r3, #16]
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d202      	bcs.n	800ef74 <mdns_read_answer+0x2c>
		return ERR_VAL;
 800ef6e:	f06f 0305 	mvn.w	r3, #5
 800ef72:	e082      	b.n	800f07a <mdns_read_answer+0x132>
	}

	if (pkt->answers_left) {
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	8b5b      	ldrh	r3, [r3, #26]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d07c      	beq.n	800f076 <mdns_read_answer+0x12e>
		u16_t copied, field16;
		u32_t ttl;
		err_t res;
		pkt->answers_left--;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	8b5b      	ldrh	r3, [r3, #26]
 800ef80:	3b01      	subs	r3, #1
 800ef82:	b29a      	uxth	r2, r3
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	835a      	strh	r2, [r3, #26]

		memset(answer, 0, sizeof(struct mdns_answer));
 800ef88:	f44f 728a 	mov.w	r2, #276	@ 0x114
 800ef8c:	2100      	movs	r1, #0
 800ef8e:	6838      	ldr	r0, [r7, #0]
 800ef90:	f00f fef6 	bl	801ed80 <memset>
		res = mdns_read_rr_info(pkt, &answer->info);
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	4619      	mov	r1, r3
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f7ff ff2a 	bl	800edf2 <mdns_read_rr_info>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	75fb      	strb	r3, [r7, #23]
		if (res != ERR_OK) {
 800efa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d002      	beq.n	800efb0 <mdns_read_answer+0x68>
			return res;
 800efaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800efae:	e064      	b.n	800f07a <mdns_read_answer+0x132>
		}

		/* Extract cache_flush flag from class field */
		answer->cache_flush = answer->info.klass & 0x8000;
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 800efb6:	4b33      	ldr	r3, [pc, #204]	@ (800f084 <mdns_read_answer+0x13c>)
 800efb8:	4013      	ands	r3, r2
 800efba:	b29a      	uxth	r2, r3
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
		answer->info.klass &= 0x7FFF;
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 800efc8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800efcc:	b29a      	uxth	r2, r3
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106

		copied = pbuf_copy_partial(pkt->pbuf, &ttl, sizeof(ttl),
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	68d8      	ldr	r0, [r3, #12]
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	8a1b      	ldrh	r3, [r3, #16]
 800efdc:	f107 010c 	add.w	r1, r7, #12
 800efe0:	2204      	movs	r2, #4
 800efe2:	f003 fce3 	bl	80129ac <pbuf_copy_partial>
 800efe6:	4603      	mov	r3, r0
 800efe8:	82bb      	strh	r3, [r7, #20]
				pkt->parse_offset);
		if (copied != sizeof(ttl)) {
 800efea:	8abb      	ldrh	r3, [r7, #20]
 800efec:	2b04      	cmp	r3, #4
 800efee:	d002      	beq.n	800eff6 <mdns_read_answer+0xae>
			return ERR_VAL;
 800eff0:	f06f 0305 	mvn.w	r3, #5
 800eff4:	e041      	b.n	800f07a <mdns_read_answer+0x132>
		}
		pkt->parse_offset += copied;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	8a1a      	ldrh	r2, [r3, #16]
 800effa:	8abb      	ldrh	r3, [r7, #20]
 800effc:	4413      	add	r3, r2
 800effe:	b29a      	uxth	r2, r3
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	821a      	strh	r2, [r3, #16]
		answer->ttl = lwip_ntohl(ttl);
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	4618      	mov	r0, r3
 800f008:	f001 fd8c 	bl	8010b24 <lwip_htonl>
 800f00c:	4602      	mov	r2, r0
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

		copied = pbuf_copy_partial(pkt->pbuf, &field16, sizeof(field16),
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	68d8      	ldr	r0, [r3, #12]
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	8a1b      	ldrh	r3, [r3, #16]
 800f01c:	f107 0112 	add.w	r1, r7, #18
 800f020:	2202      	movs	r2, #2
 800f022:	f003 fcc3 	bl	80129ac <pbuf_copy_partial>
 800f026:	4603      	mov	r3, r0
 800f028:	82bb      	strh	r3, [r7, #20]
				pkt->parse_offset);
		if (copied != sizeof(field16)) {
 800f02a:	8abb      	ldrh	r3, [r7, #20]
 800f02c:	2b02      	cmp	r3, #2
 800f02e:	d002      	beq.n	800f036 <mdns_read_answer+0xee>
			return ERR_VAL;
 800f030:	f06f 0305 	mvn.w	r3, #5
 800f034:	e021      	b.n	800f07a <mdns_read_answer+0x132>
		}
		pkt->parse_offset += copied;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	8a1a      	ldrh	r2, [r3, #16]
 800f03a:	8abb      	ldrh	r3, [r7, #20]
 800f03c:	4413      	add	r3, r2
 800f03e:	b29a      	uxth	r2, r3
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	821a      	strh	r2, [r3, #16]
		answer->rd_length = lwip_ntohs(field16);
 800f044:	8a7b      	ldrh	r3, [r7, #18]
 800f046:	4618      	mov	r0, r3
 800f048:	f001 fd56 	bl	8010af8 <lwip_htons>
 800f04c:	4603      	mov	r3, r0
 800f04e:	461a      	mov	r2, r3
 800f050:	683b      	ldr	r3, [r7, #0]
 800f052:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110

		answer->rd_offset = pkt->parse_offset;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	8a1a      	ldrh	r2, [r3, #16]
 800f05a:	683b      	ldr	r3, [r7, #0]
 800f05c:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112
		pkt->parse_offset += answer->rd_length;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	8a1a      	ldrh	r2, [r3, #16]
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 800f06a:	4413      	add	r3, r2
 800f06c:	b29a      	uxth	r2, r3
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	821a      	strh	r2, [r3, #16]

		return ERR_OK;
 800f072:	2300      	movs	r3, #0
 800f074:	e001      	b.n	800f07a <mdns_read_answer+0x132>
	}
	return ERR_VAL;
 800f076:	f06f 0305 	mvn.w	r3, #5
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3718      	adds	r7, #24
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}
 800f082:	bf00      	nop
 800f084:	ffff8000 	.word	0xffff8000

0800f088 <mdns_add_a_answer>:

#if LWIP_IPV4
/** Write an IPv4 address (A) RR to outpacket */
static err_t mdns_add_a_answer(struct mdns_outpacket *reply, u16_t cache_flush,
		struct netif *netif) {
 800f088:	b590      	push	{r4, r7, lr}
 800f08a:	b0cd      	sub	sp, #308	@ 0x134
 800f08c:	af06      	add	r7, sp, #24
 800f08e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f092:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800f096:	6018      	str	r0, [r3, #0]
 800f098:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f09c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800f0a0:	601a      	str	r2, [r3, #0]
 800f0a2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f0a6:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 800f0aa:	460a      	mov	r2, r1
 800f0ac:	801a      	strh	r2, [r3, #0]
	struct mdns_domain host;
	mdns_build_host_domain(&host, NETIF_TO_HOST(netif));
 800f0ae:	4b22      	ldr	r3, [pc, #136]	@ (800f138 <mdns_add_a_answer+0xb0>)
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	4619      	mov	r1, r3
 800f0b4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f0b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800f0bc:	681a      	ldr	r2, [r3, #0]
 800f0be:	f101 0308 	add.w	r3, r1, #8
 800f0c2:	009b      	lsls	r3, r3, #2
 800f0c4:	4413      	add	r3, r2
 800f0c6:	685a      	ldr	r2, [r3, #4]
 800f0c8:	f107 0314 	add.w	r3, r7, #20
 800f0cc:	4611      	mov	r1, r2
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f7ff f8ec 	bl	800e2ac <mdns_build_host_domain>
	LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Responding with A record\n"));
	return mdns_add_answer(reply, &host, DNS_RRTYPE_A, DNS_RRCLASS_IN,
			cache_flush, (NETIF_TO_HOST(netif))->dns_ttl,
 800f0d4:	4b18      	ldr	r3, [pc, #96]	@ (800f138 <mdns_add_a_answer+0xb0>)
 800f0d6:	781b      	ldrb	r3, [r3, #0]
 800f0d8:	4619      	mov	r1, r3
 800f0da:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f0de:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800f0e2:	681a      	ldr	r2, [r3, #0]
 800f0e4:	f101 0308 	add.w	r3, r1, #8
 800f0e8:	009b      	lsls	r3, r3, #2
 800f0ea:	4413      	add	r3, r2
 800f0ec:	685b      	ldr	r3, [r3, #4]
	return mdns_add_answer(reply, &host, DNS_RRTYPE_A, DNS_RRCLASS_IN,
 800f0ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
			(const u8_t*) netif_ip4_addr(netif), sizeof(ip4_addr_t), NULL);
 800f0f0:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800f0f4:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800f0f8:	6812      	ldr	r2, [r2, #0]
 800f0fa:	3204      	adds	r2, #4
	return mdns_add_answer(reply, &host, DNS_RRTYPE_A, DNS_RRCLASS_IN,
 800f0fc:	f107 0114 	add.w	r1, r7, #20
 800f100:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 800f104:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800f108:	2400      	movs	r4, #0
 800f10a:	9404      	str	r4, [sp, #16]
 800f10c:	2404      	movs	r4, #4
 800f10e:	9403      	str	r4, [sp, #12]
 800f110:	9202      	str	r2, [sp, #8]
 800f112:	9301      	str	r3, [sp, #4]
 800f114:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f118:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 800f11c:	881b      	ldrh	r3, [r3, #0]
 800f11e:	9300      	str	r3, [sp, #0]
 800f120:	2301      	movs	r3, #1
 800f122:	2201      	movs	r2, #1
 800f124:	6800      	ldr	r0, [r0, #0]
 800f126:	f7ff fda5 	bl	800ec74 <mdns_add_answer>
 800f12a:	4603      	mov	r3, r0
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 800f132:	46bd      	mov	sp, r7
 800f134:	bd90      	pop	{r4, r7, pc}
 800f136:	bf00      	nop
 800f138:	2000475c 	.word	0x2000475c

0800f13c <mdns_add_hostv4_ptr_answer>:

/** Write a 4.3.2.1.in-addr.arpa -> hostname.local PTR RR to outpacket */
static err_t mdns_add_hostv4_ptr_answer(struct mdns_outpacket *reply,
		u16_t cache_flush, struct netif *netif) {
 800f13c:	b580      	push	{r7, lr}
 800f13e:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 800f142:	af06      	add	r7, sp, #24
 800f144:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f148:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f14c:	6018      	str	r0, [r3, #0]
 800f14e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f152:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800f156:	601a      	str	r2, [r3, #0]
 800f158:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f15c:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 800f160:	460a      	mov	r2, r1
 800f162:	801a      	strh	r2, [r3, #0]
	struct mdns_domain host, revhost;
	mdns_build_host_domain(&host, NETIF_TO_HOST(netif));
 800f164:	4b25      	ldr	r3, [pc, #148]	@ (800f1fc <mdns_add_hostv4_ptr_answer+0xc0>)
 800f166:	781b      	ldrb	r3, [r3, #0]
 800f168:	4619      	mov	r1, r3
 800f16a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f16e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800f172:	681a      	ldr	r2, [r3, #0]
 800f174:	f101 0308 	add.w	r3, r1, #8
 800f178:	009b      	lsls	r3, r3, #2
 800f17a:	4413      	add	r3, r2
 800f17c:	685a      	ldr	r2, [r3, #4]
 800f17e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800f182:	4611      	mov	r1, r2
 800f184:	4618      	mov	r0, r3
 800f186:	f7ff f891 	bl	800e2ac <mdns_build_host_domain>
	mdns_build_reverse_v4_domain(&revhost, netif_ip4_addr(netif));
 800f18a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f18e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	1d1a      	adds	r2, r3, #4
 800f196:	f107 0310 	add.w	r3, r7, #16
 800f19a:	4611      	mov	r1, r2
 800f19c:	4618      	mov	r0, r3
 800f19e:	f7fe ffc3 	bl	800e128 <mdns_build_reverse_v4_domain>
	LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Responding with v4 PTR record\n"));
	return mdns_add_answer(reply, &revhost, DNS_RRTYPE_PTR, DNS_RRCLASS_IN,
			cache_flush, (NETIF_TO_HOST(netif))->dns_ttl, NULL, 0, &host);
 800f1a2:	4b16      	ldr	r3, [pc, #88]	@ (800f1fc <mdns_add_hostv4_ptr_answer+0xc0>)
 800f1a4:	781b      	ldrb	r3, [r3, #0]
 800f1a6:	4619      	mov	r1, r3
 800f1a8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f1ac:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800f1b0:	681a      	ldr	r2, [r3, #0]
 800f1b2:	f101 0308 	add.w	r3, r1, #8
 800f1b6:	009b      	lsls	r3, r3, #2
 800f1b8:	4413      	add	r3, r2
 800f1ba:	685b      	ldr	r3, [r3, #4]
	return mdns_add_answer(reply, &revhost, DNS_RRTYPE_PTR, DNS_RRCLASS_IN,
 800f1bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f1be:	f107 0110 	add.w	r1, r7, #16
 800f1c2:	f507 7206 	add.w	r2, r7, #536	@ 0x218
 800f1c6:	f5a2 7003 	sub.w	r0, r2, #524	@ 0x20c
 800f1ca:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 800f1ce:	9204      	str	r2, [sp, #16]
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	9203      	str	r2, [sp, #12]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	9202      	str	r2, [sp, #8]
 800f1d8:	9301      	str	r3, [sp, #4]
 800f1da:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f1de:	f2a3 230e 	subw	r3, r3, #526	@ 0x20e
 800f1e2:	881b      	ldrh	r3, [r3, #0]
 800f1e4:	9300      	str	r3, [sp, #0]
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	220c      	movs	r2, #12
 800f1ea:	6800      	ldr	r0, [r0, #0]
 800f1ec:	f7ff fd42 	bl	800ec74 <mdns_add_answer>
 800f1f0:	4603      	mov	r3, r0
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}
 800f1fc:	2000475c 	.word	0x2000475c

0800f200 <mdns_add_servicetype_ptr_answer>:
}
#endif

/** Write an all-services -> servicetype PTR RR to outpacket */
static err_t mdns_add_servicetype_ptr_answer(struct mdns_outpacket *reply,
		struct mdns_service *service) {
 800f200:	b580      	push	{r7, lr}
 800f202:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800f206:	af06      	add	r7, sp, #24
 800f208:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f20c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f210:	6018      	str	r0, [r3, #0]
 800f212:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f216:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800f21a:	6019      	str	r1, [r3, #0]
	struct mdns_domain service_type, service_dnssd;
	mdns_build_service_domain(&service_type, service, 0);
 800f21c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f220:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800f224:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 800f228:	2200      	movs	r2, #0
 800f22a:	6819      	ldr	r1, [r3, #0]
 800f22c:	f7ff f8e8 	bl	800e400 <mdns_build_service_domain>
	mdns_build_dnssd_domain(&service_dnssd);
 800f230:	f107 0308 	add.w	r3, r7, #8
 800f234:	4618      	mov	r0, r3
 800f236:	f7ff f87d 	bl	800e334 <mdns_build_dnssd_domain>
	LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Responding with service type PTR record\n"));
	return mdns_add_answer(reply, &service_dnssd, DNS_RRTYPE_PTR,
 800f23a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f23e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 800f248:	f107 0108 	add.w	r1, r7, #8
 800f24c:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 800f250:	f5a2 7003 	sub.w	r0, r2, #524	@ 0x20c
 800f254:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 800f258:	9204      	str	r2, [sp, #16]
 800f25a:	2200      	movs	r2, #0
 800f25c:	9203      	str	r2, [sp, #12]
 800f25e:	2200      	movs	r2, #0
 800f260:	9202      	str	r2, [sp, #8]
 800f262:	9301      	str	r3, [sp, #4]
 800f264:	2300      	movs	r3, #0
 800f266:	9300      	str	r3, [sp, #0]
 800f268:	2301      	movs	r3, #1
 800f26a:	220c      	movs	r2, #12
 800f26c:	6800      	ldr	r0, [r0, #0]
 800f26e:	f7ff fd01 	bl	800ec74 <mdns_add_answer>
 800f272:	4603      	mov	r3, r0
	DNS_RRCLASS_IN, 0, service->dns_ttl, NULL, 0, &service_type);
}
 800f274:	4618      	mov	r0, r3
 800f276:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}

0800f27e <mdns_add_servicename_ptr_answer>:

/** Write a servicetype -> servicename PTR RR to outpacket */
static err_t mdns_add_servicename_ptr_answer(struct mdns_outpacket *reply,
		struct mdns_service *service) {
 800f27e:	b580      	push	{r7, lr}
 800f280:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 800f284:	af06      	add	r7, sp, #24
 800f286:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f28a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f28e:	6018      	str	r0, [r3, #0]
 800f290:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f294:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800f298:	6019      	str	r1, [r3, #0]
	struct mdns_domain service_type, service_instance;
	mdns_build_service_domain(&service_type, service, 0);
 800f29a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f29e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800f2a2:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	6819      	ldr	r1, [r3, #0]
 800f2aa:	f7ff f8a9 	bl	800e400 <mdns_build_service_domain>
	mdns_build_service_domain(&service_instance, service, 1);
 800f2ae:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f2b2:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800f2b6:	f107 0008 	add.w	r0, r7, #8
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	6819      	ldr	r1, [r3, #0]
 800f2be:	f7ff f89f 	bl	800e400 <mdns_build_service_domain>
	LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Responding with service name PTR record\n"));
	return mdns_add_answer(reply, &service_type, DNS_RRTYPE_PTR, DNS_RRCLASS_IN,
 800f2c2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f2c6:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 800f2d0:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 800f2d4:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 800f2d8:	f5a2 7003 	sub.w	r0, r2, #524	@ 0x20c
 800f2dc:	f107 0208 	add.w	r2, r7, #8
 800f2e0:	9204      	str	r2, [sp, #16]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	9203      	str	r2, [sp, #12]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	9202      	str	r2, [sp, #8]
 800f2ea:	9301      	str	r3, [sp, #4]
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	9300      	str	r3, [sp, #0]
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	220c      	movs	r2, #12
 800f2f4:	6800      	ldr	r0, [r0, #0]
 800f2f6:	f7ff fcbd 	bl	800ec74 <mdns_add_answer>
 800f2fa:	4603      	mov	r3, r0
			0, service->dns_ttl, NULL, 0, &service_instance);
}
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}

0800f306 <mdns_add_srv_answer>:

/** Write a SRV RR to outpacket */
static err_t mdns_add_srv_answer(struct mdns_outpacket *reply,
		u16_t cache_flush, struct mdns_host *mdns, struct mdns_service *service) {
 800f306:	b590      	push	{r4, r7, lr}
 800f308:	f5ad 7d0f 	sub.w	sp, sp, #572	@ 0x23c
 800f30c:	af06      	add	r7, sp, #24
 800f30e:	f507 7408 	add.w	r4, r7, #544	@ 0x220
 800f312:	f5a4 7405 	sub.w	r4, r4, #532	@ 0x214
 800f316:	6020      	str	r0, [r4, #0]
 800f318:	4608      	mov	r0, r1
 800f31a:	f507 7108 	add.w	r1, r7, #544	@ 0x220
 800f31e:	f5a1 7107 	sub.w	r1, r1, #540	@ 0x21c
 800f322:	600a      	str	r2, [r1, #0]
 800f324:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800f328:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 800f32c:	6013      	str	r3, [r2, #0]
 800f32e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800f332:	f2a3 2316 	subw	r3, r3, #534	@ 0x216
 800f336:	4602      	mov	r2, r0
 800f338:	801a      	strh	r2, [r3, #0]
	struct mdns_domain service_instance, srvhost;
	u16_t srvdata[3];
	mdns_build_service_domain(&service_instance, service, 1);
 800f33a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800f33e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800f342:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 800f346:	2201      	movs	r2, #1
 800f348:	6819      	ldr	r1, [r3, #0]
 800f34a:	f7ff f859 	bl	800e400 <mdns_build_service_domain>
	mdns_build_host_domain(&srvhost, mdns);
 800f34e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800f352:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800f356:	f107 0218 	add.w	r2, r7, #24
 800f35a:	6819      	ldr	r1, [r3, #0]
 800f35c:	4610      	mov	r0, r2
 800f35e:	f7fe ffa5 	bl	800e2ac <mdns_build_host_domain>
	if (reply->legacy_query) {
 800f362:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800f366:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f370:	2b00      	cmp	r3, #0
 800f372:	d006      	beq.n	800f382 <mdns_add_srv_answer+0x7c>
		/* RFC 6762 section 18.14:
		 * In legacy unicast responses generated to answer legacy queries,
		 * name compression MUST NOT be performed on SRV records.
		 */
		srvhost.skip_compression = 1;
 800f374:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800f378:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800f37c:	2201      	movs	r2, #1
 800f37e:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
	}
	srvdata[0] = lwip_htons(SRV_PRIORITY);
 800f382:	2000      	movs	r0, #0
 800f384:	f001 fbb8 	bl	8010af8 <lwip_htons>
 800f388:	4603      	mov	r3, r0
 800f38a:	461a      	mov	r2, r3
 800f38c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800f390:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800f394:	801a      	strh	r2, [r3, #0]
	srvdata[1] = lwip_htons(SRV_WEIGHT);
 800f396:	2000      	movs	r0, #0
 800f398:	f001 fbae 	bl	8010af8 <lwip_htons>
 800f39c:	4603      	mov	r3, r0
 800f39e:	461a      	mov	r2, r3
 800f3a0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800f3a4:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800f3a8:	805a      	strh	r2, [r3, #2]
	srvdata[2] = lwip_htons(service->port);
 800f3aa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800f3ae:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f001 fb9d 	bl	8010af8 <lwip_htons>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	461a      	mov	r2, r3
 800f3c2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800f3c6:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800f3ca:	809a      	strh	r2, [r3, #4]
	LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Responding with SRV record\n"));
	return mdns_add_answer(reply, &service_instance, DNS_RRTYPE_SRV,
 800f3cc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800f3d0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 800f3da:	f507 718e 	add.w	r1, r7, #284	@ 0x11c
 800f3de:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800f3e2:	f5a2 7005 	sub.w	r0, r2, #532	@ 0x214
 800f3e6:	f107 0218 	add.w	r2, r7, #24
 800f3ea:	9204      	str	r2, [sp, #16]
 800f3ec:	2206      	movs	r2, #6
 800f3ee:	9203      	str	r2, [sp, #12]
 800f3f0:	f107 0210 	add.w	r2, r7, #16
 800f3f4:	9202      	str	r2, [sp, #8]
 800f3f6:	9301      	str	r3, [sp, #4]
 800f3f8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800f3fc:	f2a3 2316 	subw	r3, r3, #534	@ 0x216
 800f400:	881b      	ldrh	r3, [r3, #0]
 800f402:	9300      	str	r3, [sp, #0]
 800f404:	2301      	movs	r3, #1
 800f406:	2221      	movs	r2, #33	@ 0x21
 800f408:	6800      	ldr	r0, [r0, #0]
 800f40a:	f7ff fc33 	bl	800ec74 <mdns_add_answer>
 800f40e:	4603      	mov	r3, r0
	DNS_RRCLASS_IN, cache_flush, service->dns_ttl, (const u8_t*) &srvdata,
			sizeof(srvdata), &srvhost);
}
 800f410:	4618      	mov	r0, r3
 800f412:	f507 7709 	add.w	r7, r7, #548	@ 0x224
 800f416:	46bd      	mov	sp, r7
 800f418:	bd90      	pop	{r4, r7, pc}

0800f41a <mdns_add_txt_answer>:

/** Write a TXT RR to outpacket */
static err_t mdns_add_txt_answer(struct mdns_outpacket *reply,
		u16_t cache_flush, struct mdns_service *service) {
 800f41a:	b5b0      	push	{r4, r5, r7, lr}
 800f41c:	b0cc      	sub	sp, #304	@ 0x130
 800f41e:	af06      	add	r7, sp, #24
 800f420:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f424:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800f428:	6018      	str	r0, [r3, #0]
 800f42a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f42e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800f432:	601a      	str	r2, [r3, #0]
 800f434:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f438:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 800f43c:	460a      	mov	r2, r1
 800f43e:	801a      	strh	r2, [r3, #0]
	struct mdns_domain service_instance;
	mdns_build_service_domain(&service_instance, service, 1);
 800f440:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f444:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800f448:	f107 0014 	add.w	r0, r7, #20
 800f44c:	2201      	movs	r2, #1
 800f44e:	6819      	ldr	r1, [r3, #0]
 800f450:	f7fe ffd6 	bl	800e400 <mdns_build_service_domain>
	mdns_prepare_txtdata(service);
 800f454:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f458:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800f45c:	6818      	ldr	r0, [r3, #0]
 800f45e:	f7fe fe45 	bl	800e0ec <mdns_prepare_txtdata>
	LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Responding with TXT record\n"));
	return mdns_add_answer(reply, &service_instance, DNS_RRTYPE_TXT,
 800f462:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f466:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
	DNS_RRCLASS_IN, cache_flush, service->dns_ttl,
			(u8_t*) &service->txtdata.name, service->txtdata.length, NULL);
 800f470:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800f474:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800f478:	6812      	ldr	r2, [r2, #0]
 800f47a:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 800f47e:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 800f482:	6809      	ldr	r1, [r1, #0]
 800f484:	f8b1 1100 	ldrh.w	r1, [r1, #256]	@ 0x100
	return mdns_add_answer(reply, &service_instance, DNS_RRTYPE_TXT,
 800f488:	460d      	mov	r5, r1
 800f48a:	f107 0114 	add.w	r1, r7, #20
 800f48e:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 800f492:	f5a0 7086 	sub.w	r0, r0, #268	@ 0x10c
 800f496:	2400      	movs	r4, #0
 800f498:	9404      	str	r4, [sp, #16]
 800f49a:	9503      	str	r5, [sp, #12]
 800f49c:	9202      	str	r2, [sp, #8]
 800f49e:	9301      	str	r3, [sp, #4]
 800f4a0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f4a4:	f5a3 7387 	sub.w	r3, r3, #270	@ 0x10e
 800f4a8:	881b      	ldrh	r3, [r3, #0]
 800f4aa:	9300      	str	r3, [sp, #0]
 800f4ac:	2301      	movs	r3, #1
 800f4ae:	2210      	movs	r2, #16
 800f4b0:	6800      	ldr	r0, [r0, #0]
 800f4b2:	f7ff fbdf 	bl	800ec74 <mdns_add_answer>
 800f4b6:	4603      	mov	r3, r0
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bdb0      	pop	{r4, r5, r7, pc}

0800f4c2 <mdns_init_outpacket>:

/**
 * Setup outpacket as a reply to the incoming packet
 */
static void mdns_init_outpacket(struct mdns_outpacket *out,
		struct mdns_packet *in) {
 800f4c2:	b580      	push	{r7, lr}
 800f4c4:	b082      	sub	sp, #8
 800f4c6:	af00      	add	r7, sp, #0
 800f4c8:	6078      	str	r0, [r7, #4]
 800f4ca:	6039      	str	r1, [r7, #0]
	memset(out, 0, sizeof(struct mdns_outpacket));
 800f4cc:	2234      	movs	r2, #52	@ 0x34
 800f4ce:	2100      	movs	r1, #0
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f00f fc55 	bl	801ed80 <memset>
	out->cache_flush = 1;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2201      	movs	r2, #1
 800f4da:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	out->netif = in->netif;
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	689a      	ldr	r2, [r3, #8]
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	601a      	str	r2, [r3, #0]

	/* Copy source IP/port to use when responding unicast, or to choose
	 * which pcb to use for multicast (IPv4/IPv6)
	 */
	SMEMCPY(&out->dest_addr, &in->source_addr, sizeof(ip_addr_t));
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	330c      	adds	r3, #12
 800f4ea:	683a      	ldr	r2, [r7, #0]
 800f4ec:	6812      	ldr	r2, [r2, #0]
 800f4ee:	601a      	str	r2, [r3, #0]
	out->dest_port = in->source_port;
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	889a      	ldrh	r2, [r3, #4]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	821a      	strh	r2, [r3, #16]

	if (in->source_port != LWIP_IANA_PORT_MDNS) {
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	889b      	ldrh	r3, [r3, #4]
 800f4fc:	f241 42e9 	movw	r2, #5353	@ 0x14e9
 800f500:	4293      	cmp	r3, r2
 800f502:	d013      	beq.n	800f52c <mdns_init_outpacket+0x6a>
		out->unicast_reply = 1;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2201      	movs	r2, #1
 800f508:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		out->cache_flush = 0;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2200      	movs	r2, #0
 800f510:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		if (in->questions == 1) {
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	8a9b      	ldrh	r3, [r3, #20]
 800f518:	2b01      	cmp	r3, #1
 800f51a:	d107      	bne.n	800f52c <mdns_init_outpacket+0x6a>
			out->legacy_query = 1;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2201      	movs	r2, #1
 800f520:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			out->tx_id = in->tx_id;
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	8a5a      	ldrh	r2, [r3, #18]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	815a      	strh	r2, [r3, #10]
		}
	}

	if (in->recv_unicast) {
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	88db      	ldrh	r3, [r3, #6]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d003      	beq.n	800f53c <mdns_init_outpacket+0x7a>
		out->unicast_reply = 1;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2201      	movs	r2, #1
 800f538:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}
}
 800f53c:	bf00      	nop
 800f53e:	3708      	adds	r7, #8
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <mdns_send_outpacket>:
 *
 * Add all selected answers (first write will allocate pbuf)
 * Add additional answers based on the selected answers
 * Send the packet
 */
static err_t mdns_send_outpacket(struct mdns_outpacket *outpkt, u8_t flags) {
 800f544:	b590      	push	{r4, r7, lr}
 800f546:	b08f      	sub	sp, #60	@ 0x3c
 800f548:	af02      	add	r7, sp, #8
 800f54a:	6078      	str	r0, [r7, #4]
 800f54c:	460b      	mov	r3, r1
 800f54e:	70fb      	strb	r3, [r7, #3]
	struct mdns_service *service;
	err_t res = ERR_ARG;
 800f550:	23f0      	movs	r3, #240	@ 0xf0
 800f552:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	int i;
	struct mdns_host *mdns = NETIF_TO_HOST(outpkt->netif);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681a      	ldr	r2, [r3, #0]
 800f55a:	4b69      	ldr	r3, [pc, #420]	@ (800f700 <mdns_send_outpacket+0x1bc>)
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	3308      	adds	r3, #8
 800f560:	009b      	lsls	r3, r3, #2
 800f562:	4413      	add	r3, r2
 800f564:	685b      	ldr	r3, [r3, #4]
 800f566:	623b      	str	r3, [r7, #32]
	u16_t answers = 0;
 800f568:	2300      	movs	r3, #0
 800f56a:	84fb      	strh	r3, [r7, #38]	@ 0x26

	/* Write answers to host questions */
#if LWIP_IPV4
	if (outpkt->host_replies & REPLY_HOST_A) {
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f572:	f003 0301 	and.w	r3, r3, #1
 800f576:	2b00      	cmp	r3, #0
 800f578:	d014      	beq.n	800f5a4 <mdns_send_outpacket+0x60>
		res = mdns_add_a_answer(outpkt, outpkt->cache_flush, outpkt->netif);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800f580:	4619      	mov	r1, r3
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	461a      	mov	r2, r3
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f7ff fd7d 	bl	800f088 <mdns_add_a_answer>
 800f58e:	4603      	mov	r3, r0
 800f590:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res != ERR_OK) {
 800f594:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800f598:	2b00      	cmp	r3, #0
 800f59a:	f040 81ab 	bne.w	800f8f4 <mdns_send_outpacket+0x3b0>
			goto cleanup;
		}
		answers++;
 800f59e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f5a0:	3301      	adds	r3, #1
 800f5a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
	}
	if (outpkt->host_replies & REPLY_HOST_PTR_V4) {
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f5aa:	f003 0302 	and.w	r3, r3, #2
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d014      	beq.n	800f5dc <mdns_send_outpacket+0x98>
		res = mdns_add_hostv4_ptr_answer(outpkt, outpkt->cache_flush,
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800f5b8:	4619      	mov	r1, r3
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	461a      	mov	r2, r3
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f7ff fdbb 	bl	800f13c <mdns_add_hostv4_ptr_answer>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				outpkt->netif);
		if (res != ERR_OK) {
 800f5cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	f040 8191 	bne.w	800f8f8 <mdns_send_outpacket+0x3b4>
			goto cleanup;
		}
		answers++;
 800f5d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f5d8:	3301      	adds	r3, #1
 800f5da:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }
  }
#endif

	/* Write answers to service questions */
	for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 800f5dc:	2300      	movs	r3, #0
 800f5de:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f5e0:	e075      	b.n	800f6ce <mdns_send_outpacket+0x18a>
		service = mdns->services[i];
 800f5e2:	6a3b      	ldr	r3, [r7, #32]
 800f5e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f5e6:	3210      	adds	r2, #16
 800f5e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5ec:	61bb      	str	r3, [r7, #24]
		if (!service) {
 800f5ee:	69bb      	ldr	r3, [r7, #24]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d068      	beq.n	800f6c6 <mdns_send_outpacket+0x182>
			continue;
		}

		if (outpkt->serv_replies[i] & REPLY_SERVICE_TYPE_PTR) {
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5f8:	4413      	add	r3, r2
 800f5fa:	3333      	adds	r3, #51	@ 0x33
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	f003 0310 	and.w	r3, r3, #16
 800f602:	2b00      	cmp	r3, #0
 800f604:	d00e      	beq.n	800f624 <mdns_send_outpacket+0xe0>
			res = mdns_add_servicetype_ptr_answer(outpkt, service);
 800f606:	69b9      	ldr	r1, [r7, #24]
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f7ff fdf9 	bl	800f200 <mdns_add_servicetype_ptr_answer>
 800f60e:	4603      	mov	r3, r0
 800f610:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != ERR_OK) {
 800f614:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800f618:	2b00      	cmp	r3, #0
 800f61a:	f040 816f 	bne.w	800f8fc <mdns_send_outpacket+0x3b8>
				goto cleanup;
			}
			answers++;
 800f61e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f620:	3301      	adds	r3, #1
 800f622:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}

		if (outpkt->serv_replies[i] & REPLY_SERVICE_NAME_PTR) {
 800f624:	687a      	ldr	r2, [r7, #4]
 800f626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f628:	4413      	add	r3, r2
 800f62a:	3333      	adds	r3, #51	@ 0x33
 800f62c:	781b      	ldrb	r3, [r3, #0]
 800f62e:	f003 0320 	and.w	r3, r3, #32
 800f632:	2b00      	cmp	r3, #0
 800f634:	d00e      	beq.n	800f654 <mdns_send_outpacket+0x110>
			res = mdns_add_servicename_ptr_answer(outpkt, service);
 800f636:	69b9      	ldr	r1, [r7, #24]
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f7ff fe20 	bl	800f27e <mdns_add_servicename_ptr_answer>
 800f63e:	4603      	mov	r3, r0
 800f640:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != ERR_OK) {
 800f644:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800f648:	2b00      	cmp	r3, #0
 800f64a:	f040 8159 	bne.w	800f900 <mdns_send_outpacket+0x3bc>
				goto cleanup;
			}
			answers++;
 800f64e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f650:	3301      	adds	r3, #1
 800f652:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}

		if (outpkt->serv_replies[i] & REPLY_SERVICE_SRV) {
 800f654:	687a      	ldr	r2, [r7, #4]
 800f656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f658:	4413      	add	r3, r2
 800f65a:	3333      	adds	r3, #51	@ 0x33
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f662:	2b00      	cmp	r3, #0
 800f664:	d013      	beq.n	800f68e <mdns_send_outpacket+0x14a>
			res = mdns_add_srv_answer(outpkt, outpkt->cache_flush, mdns,
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800f66c:	4619      	mov	r1, r3
 800f66e:	69bb      	ldr	r3, [r7, #24]
 800f670:	6a3a      	ldr	r2, [r7, #32]
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f7ff fe47 	bl	800f306 <mdns_add_srv_answer>
 800f678:	4603      	mov	r3, r0
 800f67a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					service);
			if (res != ERR_OK) {
 800f67e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800f682:	2b00      	cmp	r3, #0
 800f684:	f040 813e 	bne.w	800f904 <mdns_send_outpacket+0x3c0>
				goto cleanup;
			}
			answers++;
 800f688:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f68a:	3301      	adds	r3, #1
 800f68c:	84fb      	strh	r3, [r7, #38]	@ 0x26
		}

		if (outpkt->serv_replies[i] & REPLY_SERVICE_TXT) {
 800f68e:	687a      	ldr	r2, [r7, #4]
 800f690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f692:	4413      	add	r3, r2
 800f694:	3333      	adds	r3, #51	@ 0x33
 800f696:	781b      	ldrb	r3, [r3, #0]
 800f698:	b25b      	sxtb	r3, r3
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	da14      	bge.n	800f6c8 <mdns_send_outpacket+0x184>
			res = mdns_add_txt_answer(outpkt, outpkt->cache_flush, service);
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800f6a4:	69ba      	ldr	r2, [r7, #24]
 800f6a6:	4619      	mov	r1, r3
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f7ff feb6 	bl	800f41a <mdns_add_txt_answer>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != ERR_OK) {
 800f6b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	f040 8125 	bne.w	800f908 <mdns_send_outpacket+0x3c4>
				goto cleanup;
			}
			answers++;
 800f6be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800f6c4:	e000      	b.n	800f6c8 <mdns_send_outpacket+0x184>
			continue;
 800f6c6:	bf00      	nop
	for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 800f6c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ca:	3301      	adds	r3, #1
 800f6cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	dd86      	ble.n	800f5e2 <mdns_send_outpacket+0x9e>
		}
	}

	/* if this is a response, the data above is anwers, else this is a probe and the answers above goes into auth section */
	if (flags & DNS_FLAG1_RESPONSE) {
 800f6d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	da07      	bge.n	800f6ec <mdns_send_outpacket+0x1a8>
		outpkt->answers += answers;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	8a9a      	ldrh	r2, [r3, #20]
 800f6e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f6e2:	4413      	add	r3, r2
 800f6e4:	b29a      	uxth	r2, r3
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	829a      	strh	r2, [r3, #20]
 800f6ea:	e006      	b.n	800f6fa <mdns_send_outpacket+0x1b6>
	} else {
		outpkt->authoritative += answers;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	8ada      	ldrh	r2, [r3, #22]
 800f6f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f6f2:	4413      	add	r3, r2
 800f6f4:	b29a      	uxth	r2, r3
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	82da      	strh	r2, [r3, #22]
	}

	/* All answers written, add additional RRs */
	for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f6fe:	e08b      	b.n	800f818 <mdns_send_outpacket+0x2d4>
 800f700:	2000475c 	.word	0x2000475c
		service = mdns->services[i];
 800f704:	6a3b      	ldr	r3, [r7, #32]
 800f706:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f708:	3210      	adds	r2, #16
 800f70a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f70e:	61bb      	str	r3, [r7, #24]
		if (!service) {
 800f710:	69bb      	ldr	r3, [r7, #24]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d07c      	beq.n	800f810 <mdns_send_outpacket+0x2cc>
			continue;
		}

		if (outpkt->serv_replies[i] & REPLY_SERVICE_NAME_PTR) {
 800f716:	687a      	ldr	r2, [r7, #4]
 800f718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f71a:	4413      	add	r3, r2
 800f71c:	3333      	adds	r3, #51	@ 0x33
 800f71e:	781b      	ldrb	r3, [r3, #0]
 800f720:	f003 0320 	and.w	r3, r3, #32
 800f724:	2b00      	cmp	r3, #0
 800f726:	d03d      	beq.n	800f7a4 <mdns_send_outpacket+0x260>
			/* Our service instance requested, include SRV & TXT
			 * if they are already not requested. */
			if (!(outpkt->serv_replies[i] & REPLY_SERVICE_SRV)) {
 800f728:	687a      	ldr	r2, [r7, #4]
 800f72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f72c:	4413      	add	r3, r2
 800f72e:	3333      	adds	r3, #51	@ 0x33
 800f730:	781b      	ldrb	r3, [r3, #0]
 800f732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f736:	2b00      	cmp	r3, #0
 800f738:	d116      	bne.n	800f768 <mdns_send_outpacket+0x224>
				res = mdns_add_srv_answer(outpkt, outpkt->cache_flush, mdns,
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800f740:	4619      	mov	r1, r3
 800f742:	69bb      	ldr	r3, [r7, #24]
 800f744:	6a3a      	ldr	r2, [r7, #32]
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f7ff fddd 	bl	800f306 <mdns_add_srv_answer>
 800f74c:	4603      	mov	r3, r0
 800f74e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						service);
				if (res != ERR_OK) {
 800f752:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800f756:	2b00      	cmp	r3, #0
 800f758:	f040 80d8 	bne.w	800f90c <mdns_send_outpacket+0x3c8>
					goto cleanup;
				}
				outpkt->additional++;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	8b1b      	ldrh	r3, [r3, #24]
 800f760:	3301      	adds	r3, #1
 800f762:	b29a      	uxth	r2, r3
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	831a      	strh	r2, [r3, #24]
			}

			if (!(outpkt->serv_replies[i] & REPLY_SERVICE_TXT)) {
 800f768:	687a      	ldr	r2, [r7, #4]
 800f76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f76c:	4413      	add	r3, r2
 800f76e:	3333      	adds	r3, #51	@ 0x33
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	b25b      	sxtb	r3, r3
 800f774:	2b00      	cmp	r3, #0
 800f776:	db15      	blt.n	800f7a4 <mdns_send_outpacket+0x260>
				res = mdns_add_txt_answer(outpkt, outpkt->cache_flush, service);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800f77e:	69ba      	ldr	r2, [r7, #24]
 800f780:	4619      	mov	r1, r3
 800f782:	6878      	ldr	r0, [r7, #4]
 800f784:	f7ff fe49 	bl	800f41a <mdns_add_txt_answer>
 800f788:	4603      	mov	r3, r0
 800f78a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != ERR_OK) {
 800f78e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800f792:	2b00      	cmp	r3, #0
 800f794:	f040 80bc 	bne.w	800f910 <mdns_send_outpacket+0x3cc>
					goto cleanup;
				}
				outpkt->additional++;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	8b1b      	ldrh	r3, [r3, #24]
 800f79c:	3301      	adds	r3, #1
 800f79e:	b29a      	uxth	r2, r3
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	831a      	strh	r2, [r3, #24]
		}

		/* If service instance, SRV, record or an IP address is requested,
		 * supply all addresses for the host
		 */
		if ((outpkt->serv_replies[i]
 800f7a4:	687a      	ldr	r2, [r7, #4]
 800f7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7a8:	4413      	add	r3, r2
 800f7aa:	3333      	adds	r3, #51	@ 0x33
 800f7ac:	781b      	ldrb	r3, [r3, #0]
				& (REPLY_SERVICE_NAME_PTR | REPLY_SERVICE_SRV))
 800f7ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
		if ((outpkt->serv_replies[i]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d106      	bne.n	800f7c4 <mdns_send_outpacket+0x280>
				|| (outpkt->host_replies & (REPLY_HOST_A | REPLY_HOST_AAAA))) {
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f7bc:	f003 0305 	and.w	r3, r3, #5
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d026      	beq.n	800f812 <mdns_send_outpacket+0x2ce>
          }
        }
      }
#endif
#if LWIP_IPV4
			if (!(outpkt->host_replies & REPLY_HOST_A)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f7ca:	f003 0301 	and.w	r3, r3, #1
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d11f      	bne.n	800f812 <mdns_send_outpacket+0x2ce>
					&& !ip4_addr_isany_val(*netif_ip4_addr(outpkt->netif))) {
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	3304      	adds	r3, #4
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d019      	beq.n	800f812 <mdns_send_outpacket+0x2ce>
				res = mdns_add_a_answer(outpkt, outpkt->cache_flush,
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	461a      	mov	r2, r3
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f7ff fc4b 	bl	800f088 <mdns_add_a_answer>
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						outpkt->netif);
				if (res != ERR_OK) {
 800f7f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	f040 8089 	bne.w	800f914 <mdns_send_outpacket+0x3d0>
					goto cleanup;
				}
				outpkt->additional++;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	8b1b      	ldrh	r3, [r3, #24]
 800f806:	3301      	adds	r3, #1
 800f808:	b29a      	uxth	r2, r3
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	831a      	strh	r2, [r3, #24]
 800f80e:	e000      	b.n	800f812 <mdns_send_outpacket+0x2ce>
			continue;
 800f810:	bf00      	nop
	for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 800f812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f814:	3301      	adds	r3, #1
 800f816:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	f77f af72 	ble.w	800f704 <mdns_send_outpacket+0x1c0>
			}
#endif
		}
	}

	if (outpkt->pbuf) {
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	685b      	ldr	r3, [r3, #4]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d077      	beq.n	800f918 <mdns_send_outpacket+0x3d4>
		const ip_addr_t *mcast_destaddr;
		struct dns_hdr hdr;

		/* Write header */
		memset(&hdr, 0, sizeof(hdr));
 800f828:	f107 030c 	add.w	r3, r7, #12
 800f82c:	220c      	movs	r2, #12
 800f82e:	2100      	movs	r1, #0
 800f830:	4618      	mov	r0, r3
 800f832:	f00f faa5 	bl	801ed80 <memset>
		hdr.flags1 = flags;
 800f836:	78fb      	ldrb	r3, [r7, #3]
 800f838:	73bb      	strb	r3, [r7, #14]
		hdr.numquestions = lwip_htons(outpkt->questions);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	8a5b      	ldrh	r3, [r3, #18]
 800f83e:	4618      	mov	r0, r3
 800f840:	f001 f95a 	bl	8010af8 <lwip_htons>
 800f844:	4603      	mov	r3, r0
 800f846:	823b      	strh	r3, [r7, #16]
		hdr.numanswers = lwip_htons(outpkt->answers);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	8a9b      	ldrh	r3, [r3, #20]
 800f84c:	4618      	mov	r0, r3
 800f84e:	f001 f953 	bl	8010af8 <lwip_htons>
 800f852:	4603      	mov	r3, r0
 800f854:	827b      	strh	r3, [r7, #18]
		hdr.numauthrr = lwip_htons(outpkt->authoritative);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	8adb      	ldrh	r3, [r3, #22]
 800f85a:	4618      	mov	r0, r3
 800f85c:	f001 f94c 	bl	8010af8 <lwip_htons>
 800f860:	4603      	mov	r3, r0
 800f862:	82bb      	strh	r3, [r7, #20]
		hdr.numextrarr = lwip_htons(outpkt->additional);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	8b1b      	ldrh	r3, [r3, #24]
 800f868:	4618      	mov	r0, r3
 800f86a:	f001 f945 	bl	8010af8 <lwip_htons>
 800f86e:	4603      	mov	r3, r0
 800f870:	82fb      	strh	r3, [r7, #22]
		hdr.id = lwip_htons(outpkt->tx_id);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	895b      	ldrh	r3, [r3, #10]
 800f876:	4618      	mov	r0, r3
 800f878:	f001 f93e 	bl	8010af8 <lwip_htons>
 800f87c:	4603      	mov	r3, r0
 800f87e:	81bb      	strh	r3, [r7, #12]
		pbuf_take(outpkt->pbuf, &hdr, sizeof(hdr));
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	685b      	ldr	r3, [r3, #4]
 800f884:	f107 010c 	add.w	r1, r7, #12
 800f888:	220c      	movs	r2, #12
 800f88a:	4618      	mov	r0, r3
 800f88c:	f003 f93c 	bl	8012b08 <pbuf_take>

		/* Shrink packet */
		pbuf_realloc(outpkt->pbuf, outpkt->write_offset);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	685a      	ldr	r2, [r3, #4]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	891b      	ldrh	r3, [r3, #8]
 800f898:	4619      	mov	r1, r3
 800f89a:	4610      	mov	r0, r2
 800f89c:	f002 fcfa 	bl	8012294 <pbuf_realloc>
#if LWIP_IPV6
      mcast_destaddr = &v6group;
#endif
		} else {
#if LWIP_IPV4
			mcast_destaddr = &v4group;
 800f8a0:	4b27      	ldr	r3, [pc, #156]	@ (800f940 <mdns_send_outpacket+0x3fc>)
 800f8a2:	61fb      	str	r3, [r7, #28]
#endif
		}
		/* Send created packet */
		LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Sending packet, len=%d, unicast=%d\n", outpkt->write_offset, outpkt->unicast_reply));
		if (outpkt->unicast_reply) {
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d012      	beq.n	800f8d4 <mdns_send_outpacket+0x390>
			res = udp_sendto_if(mdns_pcb, outpkt->pbuf, &outpkt->dest_addr,
 800f8ae:	4b25      	ldr	r3, [pc, #148]	@ (800f944 <mdns_send_outpacket+0x400>)
 800f8b0:	6818      	ldr	r0, [r3, #0]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6859      	ldr	r1, [r3, #4]
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f103 020c 	add.w	r2, r3, #12
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	8a1c      	ldrh	r4, [r3, #16]
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	9300      	str	r3, [sp, #0]
 800f8c6:	4623      	mov	r3, r4
 800f8c8:	f008 ffa8 	bl	801881c <udp_sendto_if>
 800f8cc:	4603      	mov	r3, r0
 800f8ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f8d2:	e022      	b.n	800f91a <mdns_send_outpacket+0x3d6>
					outpkt->dest_port, outpkt->netif);
		} else {
			res = udp_sendto_if(mdns_pcb, outpkt->pbuf, mcast_destaddr,
 800f8d4:	4b1b      	ldr	r3, [pc, #108]	@ (800f944 <mdns_send_outpacket+0x400>)
 800f8d6:	6818      	ldr	r0, [r3, #0]
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6859      	ldr	r1, [r3, #4]
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	9300      	str	r3, [sp, #0]
 800f8e2:	f241 43e9 	movw	r3, #5353	@ 0x14e9
 800f8e6:	69fa      	ldr	r2, [r7, #28]
 800f8e8:	f008 ff98 	bl	801881c <udp_sendto_if>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f8f2:	e012      	b.n	800f91a <mdns_send_outpacket+0x3d6>
			goto cleanup;
 800f8f4:	bf00      	nop
 800f8f6:	e010      	b.n	800f91a <mdns_send_outpacket+0x3d6>
			goto cleanup;
 800f8f8:	bf00      	nop
 800f8fa:	e00e      	b.n	800f91a <mdns_send_outpacket+0x3d6>
				goto cleanup;
 800f8fc:	bf00      	nop
 800f8fe:	e00c      	b.n	800f91a <mdns_send_outpacket+0x3d6>
				goto cleanup;
 800f900:	bf00      	nop
 800f902:	e00a      	b.n	800f91a <mdns_send_outpacket+0x3d6>
				goto cleanup;
 800f904:	bf00      	nop
 800f906:	e008      	b.n	800f91a <mdns_send_outpacket+0x3d6>
				goto cleanup;
 800f908:	bf00      	nop
 800f90a:	e006      	b.n	800f91a <mdns_send_outpacket+0x3d6>
					goto cleanup;
 800f90c:	bf00      	nop
 800f90e:	e004      	b.n	800f91a <mdns_send_outpacket+0x3d6>
					goto cleanup;
 800f910:	bf00      	nop
 800f912:	e002      	b.n	800f91a <mdns_send_outpacket+0x3d6>
					goto cleanup;
 800f914:	bf00      	nop
 800f916:	e000      	b.n	800f91a <mdns_send_outpacket+0x3d6>
					LWIP_IANA_PORT_MDNS, outpkt->netif);
		}
	}

	cleanup: if (outpkt->pbuf) {
 800f918:	bf00      	nop
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	685b      	ldr	r3, [r3, #4]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d007      	beq.n	800f932 <mdns_send_outpacket+0x3ee>
		pbuf_free(outpkt->pbuf);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	685b      	ldr	r3, [r3, #4]
 800f926:	4618      	mov	r0, r3
 800f928:	f002 fe3a 	bl	80125a0 <pbuf_free>
		outpkt->pbuf = NULL;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2200      	movs	r2, #0
 800f930:	605a      	str	r2, [r3, #4]
	}
	return res;
 800f932:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800f936:	4618      	mov	r0, r3
 800f938:	3734      	adds	r7, #52	@ 0x34
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd90      	pop	{r4, r7, pc}
 800f93e:	bf00      	nop
 800f940:	080235d4 	.word	0x080235d4
 800f944:	20004760 	.word	0x20004760

0800f948 <mdns_announce>:
/**
 * Send unsolicited answer containing all our known data
 * @param netif The network interface to send on
 * @param destination The target address to send to (usually multicast address)
 */
static void mdns_announce(struct netif *netif, const ip_addr_t *destination) {
 800f948:	b580      	push	{r7, lr}
 800f94a:	b092      	sub	sp, #72	@ 0x48
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	6039      	str	r1, [r7, #0]
	struct mdns_outpacket announce;
	int i;
	struct mdns_host *mdns = NETIF_TO_HOST(netif);
 800f952:	4b22      	ldr	r3, [pc, #136]	@ (800f9dc <mdns_announce+0x94>)
 800f954:	781b      	ldrb	r3, [r3, #0]
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	3308      	adds	r3, #8
 800f95a:	009b      	lsls	r3, r3, #2
 800f95c:	4413      	add	r3, r2
 800f95e:	685b      	ldr	r3, [r3, #4]
 800f960:	643b      	str	r3, [r7, #64]	@ 0x40

	memset(&announce, 0, sizeof(announce));
 800f962:	f107 0308 	add.w	r3, r7, #8
 800f966:	2234      	movs	r2, #52	@ 0x34
 800f968:	2100      	movs	r1, #0
 800f96a:	4618      	mov	r0, r3
 800f96c:	f00f fa08 	bl	801ed80 <memset>
	announce.netif = netif;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	60bb      	str	r3, [r7, #8]
	announce.cache_flush = 1;
 800f974:	2301      	movs	r3, #1
 800f976:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
#if LWIP_IPV4
	if (!ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	3304      	adds	r3, #4
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d002      	beq.n	800f98a <mdns_announce+0x42>
		announce.host_replies = REPLY_HOST_A | REPLY_HOST_PTR_V4;
 800f984:	2303      	movs	r3, #3
 800f986:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
      announce.host_reverse_v6_replies |= (1 << i);
    }
  }
#endif

	for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 800f98a:	2300      	movs	r3, #0
 800f98c:	647b      	str	r3, [r7, #68]	@ 0x44
 800f98e:	e011      	b.n	800f9b4 <mdns_announce+0x6c>
		struct mdns_service *serv = mdns->services[i];
 800f990:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f992:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f994:	3210      	adds	r2, #16
 800f996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f99a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (serv) {
 800f99c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d005      	beq.n	800f9ae <mdns_announce+0x66>
			announce.serv_replies[i] = REPLY_SERVICE_TYPE_PTR
 800f9a2:	f107 023b 	add.w	r2, r7, #59	@ 0x3b
 800f9a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f9a8:	4413      	add	r3, r2
 800f9aa:	22f0      	movs	r2, #240	@ 0xf0
 800f9ac:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 800f9ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f9b0:	3301      	adds	r3, #1
 800f9b2:	647b      	str	r3, [r7, #68]	@ 0x44
 800f9b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	ddea      	ble.n	800f990 <mdns_announce+0x48>
					| REPLY_SERVICE_NAME_PTR |
					REPLY_SERVICE_SRV | REPLY_SERVICE_TXT;
		}
	}

	announce.dest_port = LWIP_IANA_PORT_MDNS;
 800f9ba:	f241 43e9 	movw	r3, #5353	@ 0x14e9
 800f9be:	833b      	strh	r3, [r7, #24]
	SMEMCPY(&announce.dest_addr, destination, sizeof(announce.dest_addr));
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	617b      	str	r3, [r7, #20]
	mdns_send_outpacket(&announce, DNS_FLAG1_RESPONSE | DNS_FLAG1_AUTHORATIVE);
 800f9c6:	f107 0308 	add.w	r3, r7, #8
 800f9ca:	2184      	movs	r1, #132	@ 0x84
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f7ff fdb9 	bl	800f544 <mdns_send_outpacket>
}
 800f9d2:	bf00      	nop
 800f9d4:	3748      	adds	r7, #72	@ 0x48
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bd80      	pop	{r7, pc}
 800f9da:	bf00      	nop
 800f9dc:	2000475c 	.word	0x2000475c

0800f9e0 <mdns_handle_question>:
 * Handle question MDNS packet
 * 1. Parse all questions and set bits what answers to send
 * 2. Clear pending answers if known answers are supplied
 * 3. Put chosen answers in new packet and send as reply
 */
static void mdns_handle_question(struct mdns_packet *pkt) {
 800f9e0:	b590      	push	{r4, r7, lr}
 800f9e2:	f5ad 7d63 	sub.w	sp, sp, #908	@ 0x38c
 800f9e6:	af02      	add	r7, sp, #8
 800f9e8:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800f9ec:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 800f9f0:	6018      	str	r0, [r3, #0]
	struct mdns_service *service;
	struct mdns_outpacket reply;
	int replies = 0;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
	int i;
	err_t res;
	struct mdns_host *mdns = NETIF_TO_HOST(pkt->netif);
 800f9f8:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800f9fc:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	689a      	ldr	r2, [r3, #8]
 800fa04:	4bd0      	ldr	r3, [pc, #832]	@ (800fd48 <mdns_handle_question+0x368>)
 800fa06:	781b      	ldrb	r3, [r3, #0]
 800fa08:	3308      	adds	r3, #8
 800fa0a:	009b      	lsls	r3, r3, #2
 800fa0c:	4413      	add	r3, r2
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374

	if (mdns->probing_state != MDNS_PROBING_COMPLETE) {
 800fa14:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 800fa18:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800fa1c:	2b02      	cmp	r3, #2
 800fa1e:	f040 8378 	bne.w	8010112 <mdns_handle_question+0x732>
		/* Don't answer questions until we've verified our domains via probing */
		/* @todo we should check incoming questions during probing for tiebreaking */
		return;
	}

	mdns_init_outpacket(&reply, pkt);
 800fa22:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fa26:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 800fa2a:	f507 724a 	add.w	r2, r7, #808	@ 0x328
 800fa2e:	6819      	ldr	r1, [r3, #0]
 800fa30:	4610      	mov	r0, r2
 800fa32:	f7ff fd46 	bl	800f4c2 <mdns_init_outpacket>

	while (pkt->questions_left) {
 800fa36:	e0ab      	b.n	800fb90 <mdns_handle_question+0x1b0>
		struct mdns_question q;

		res = mdns_read_question(pkt, &q);
 800fa38:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 800fa3c:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fa40:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 800fa44:	4611      	mov	r1, r2
 800fa46:	6818      	ldr	r0, [r3, #0]
 800fa48:	f7ff fa34 	bl	800eeb4 <mdns_read_question>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	f887 3373 	strb.w	r3, [r7, #883]	@ 0x373
		if (res != ERR_OK) {
 800fa52:	f997 3373 	ldrsb.w	r3, [r7, #883]	@ 0x373
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	f040 835d 	bne.w	8010116 <mdns_handle_question+0x736>
			LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Failed to parse question, skipping query packet\n"));
			return;
		}

		LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Query for domain "));
		mdns_domain_debug_print(&q.info.domain);
 800fa5c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7fe fabd 	bl	800dfe0 <mdns_domain_debug_print>
		LWIP_DEBUGF(MDNS_DEBUG, (" type %d class %d\n", q.info.type, q.info.klass));

		if (q.unicast) {
 800fa66:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fa6a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800fa6e:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d002      	beq.n	800fa7c <mdns_handle_question+0x9c>
			/* Reply unicast if any question is unicast */
			reply.unicast_reply = 1;
 800fa76:	2301      	movs	r3, #1
 800fa78:	f887 3357 	strb.w	r3, [r7, #855]	@ 0x357
		}

		reply.host_replies |= check_host(pkt->netif, &q.info,
 800fa7c:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fa80:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	6898      	ldr	r0, [r3, #8]
 800fa88:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 800fa8c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800fa90:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800fa94:	4619      	mov	r1, r3
 800fa96:	f7fe fd3b 	bl	800e510 <check_host>
 800fa9a:	4601      	mov	r1, r0
 800fa9c:	f897 3359 	ldrb.w	r3, [r7, #857]	@ 0x359
 800faa0:	b25a      	sxtb	r2, r3
 800faa2:	b24b      	sxtb	r3, r1
 800faa4:	4313      	orrs	r3, r2
 800faa6:	b25b      	sxtb	r3, r3
 800faa8:	b2db      	uxtb	r3, r3
 800faaa:	f887 3359 	strb.w	r3, [r7, #857]	@ 0x359
				&reply.host_reverse_v6_replies);
		replies |= reply.host_replies;
 800faae:	f897 3359 	ldrb.w	r3, [r7, #857]	@ 0x359
 800fab2:	461a      	mov	r2, r3
 800fab4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 800fab8:	4313      	orrs	r3, r2
 800faba:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c

		for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 800fabe:	2300      	movs	r3, #0
 800fac0:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 800fac4:	e039      	b.n	800fb3a <mdns_handle_question+0x15a>
			service = mdns->services[i];
 800fac6:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 800faca:	f8d7 2378 	ldr.w	r2, [r7, #888]	@ 0x378
 800face:	3210      	adds	r2, #16
 800fad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fad4:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
			if (!service) {
 800fad8:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d026      	beq.n	800fb2e <mdns_handle_question+0x14e>
				continue;
			}
			reply.serv_replies[i] |= check_service(service, &q.info);
 800fae0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800fae4:	4619      	mov	r1, r3
 800fae6:	f8d7 0364 	ldr.w	r0, [r7, #868]	@ 0x364
 800faea:	f7fe fdcf 	bl	800e68c <check_service>
 800faee:	4601      	mov	r1, r0
 800faf0:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 800faf4:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 800faf8:	4413      	add	r3, r2
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	b25a      	sxtb	r2, r3
 800fafe:	b24b      	sxtb	r3, r1
 800fb00:	4313      	orrs	r3, r2
 800fb02:	b25b      	sxtb	r3, r3
 800fb04:	b2d9      	uxtb	r1, r3
 800fb06:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 800fb0a:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 800fb0e:	4413      	add	r3, r2
 800fb10:	460a      	mov	r2, r1
 800fb12:	701a      	strb	r2, [r3, #0]
			replies |= reply.serv_replies[i];
 800fb14:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 800fb18:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 800fb1c:	4413      	add	r3, r2
 800fb1e:	781b      	ldrb	r3, [r3, #0]
 800fb20:	461a      	mov	r2, r3
 800fb22:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 800fb26:	4313      	orrs	r3, r2
 800fb28:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 800fb2c:	e000      	b.n	800fb30 <mdns_handle_question+0x150>
				continue;
 800fb2e:	bf00      	nop
		for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 800fb30:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 800fb34:	3301      	adds	r3, #1
 800fb36:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 800fb3a:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	ddc1      	ble.n	800fac6 <mdns_handle_question+0xe6>
		}

		if (replies && reply.legacy_query) {
 800fb42:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d022      	beq.n	800fb90 <mdns_handle_question+0x1b0>
 800fb4a:	f897 3358 	ldrb.w	r3, [r7, #856]	@ 0x358
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d01e      	beq.n	800fb90 <mdns_handle_question+0x1b0>
			/* Add question to reply packet (legacy packet only has 1 question) */
			res = mdns_add_question(&reply, &q.info.domain, q.info.type,
 800fb52:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fb56:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800fb5a:	f8b3 2104 	ldrh.w	r2, [r3, #260]	@ 0x104
 800fb5e:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fb62:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800fb66:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 800fb6a:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800fb6e:	f507 704a 	add.w	r0, r7, #808	@ 0x328
 800fb72:	2400      	movs	r4, #0
 800fb74:	9400      	str	r4, [sp, #0]
 800fb76:	f7fe fff1 	bl	800eb5c <mdns_add_question>
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	f887 3373 	strb.w	r3, [r7, #883]	@ 0x373
					q.info.klass, 0);
			reply.questions = 1;
 800fb80:	2301      	movs	r3, #1
 800fb82:	f8a7 333a 	strh.w	r3, [r7, #826]	@ 0x33a
			if (res != ERR_OK) {
 800fb86:	f997 3373 	ldrsb.w	r3, [r7, #883]	@ 0x373
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	f040 82b1 	bne.w	80100f2 <mdns_handle_question+0x712>
	while (pkt->questions_left) {
 800fb90:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fb94:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	8adb      	ldrh	r3, [r3, #22]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	f47f af4b 	bne.w	800fa38 <mdns_handle_question+0x58>
			}
		}
	}

	/* Handle known answers */
	while (pkt->answers_left) {
 800fba2:	e296      	b.n	80100d2 <mdns_handle_question+0x6f2>
		struct mdns_answer ans;
		u8_t rev_v6;
		int match;

		res = mdns_read_answer(pkt, &ans);
 800fba4:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 800fba8:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fbac:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 800fbb0:	4611      	mov	r1, r2
 800fbb2:	6818      	ldr	r0, [r3, #0]
 800fbb4:	f7ff f9c8 	bl	800ef48 <mdns_read_answer>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	f887 3373 	strb.w	r3, [r7, #883]	@ 0x373
		if (res != ERR_OK) {
 800fbbe:	f997 3373 	ldrsb.w	r3, [r7, #883]	@ 0x373
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	f040 8297 	bne.w	80100f6 <mdns_handle_question+0x716>
			LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Failed to parse answer, skipping query packet\n"));
			goto cleanup;
		}

		LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Known answer for domain "));
		mdns_domain_debug_print(&ans.info.domain);
 800fbc8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7fe fa07 	bl	800dfe0 <mdns_domain_debug_print>
		LWIP_DEBUGF(MDNS_DEBUG, (" type %d class %d\n", ans.info.type, ans.info.klass));

		if (ans.info.type == DNS_RRTYPE_ANY || ans.info.klass == DNS_RRCLASS_ANY) {
 800fbd2:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fbd6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800fbda:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800fbde:	2bff      	cmp	r3, #255	@ 0xff
 800fbe0:	f000 8276 	beq.w	80100d0 <mdns_handle_question+0x6f0>
 800fbe4:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fbe8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800fbec:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 800fbf0:	2bff      	cmp	r3, #255	@ 0xff
 800fbf2:	f000 826d 	beq.w	80100d0 <mdns_handle_question+0x6f0>
			/* Skip known answers for ANY type & class */
			continue;
		}

		rev_v6 = 0;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	f887 3327 	strb.w	r3, [r7, #807]	@ 0x327
		match = reply.host_replies & check_host(pkt->netif, &ans.info, &rev_v6);
 800fbfc:	f897 3359 	ldrb.w	r3, [r7, #857]	@ 0x359
 800fc00:	461c      	mov	r4, r3
 800fc02:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fc06:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	689b      	ldr	r3, [r3, #8]
 800fc0e:	f207 3227 	addw	r2, r7, #807	@ 0x327
 800fc12:	f507 7104 	add.w	r1, r7, #528	@ 0x210
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7fe fc7a 	bl	800e510 <check_host>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	4023      	ands	r3, r4
 800fc20:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
		if (match && (ans.ttl > (mdns->dns_ttl / 2))) {
 800fc24:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	f000 8088 	beq.w	800fd3e <mdns_handle_question+0x35e>
 800fc2e:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fc32:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800fc36:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 800fc3a:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 800fc3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc40:	085b      	lsrs	r3, r3, #1
 800fc42:	429a      	cmp	r2, r3
 800fc44:	d97b      	bls.n	800fd3e <mdns_handle_question+0x35e>
			/* The RR in the known answer matches an RR we are planning to send,
			 * and the TTL is less than half gone.
			 * If the payload matches we should not send that answer.
			 */
			if (ans.info.type == DNS_RRTYPE_PTR) {
 800fc46:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fc4a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800fc4e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800fc52:	2b0c      	cmp	r3, #12
 800fc54:	d140      	bne.n	800fcd8 <mdns_handle_question+0x2f8>
				/* Read domain and compare */
				struct mdns_domain known_ans, my_ans;
				u16_t len;
				len = mdns_readname(pkt->pbuf, ans.rd_offset, &known_ans);
 800fc56:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fc5a:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	68d8      	ldr	r0, [r3, #12]
 800fc62:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fc66:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800fc6a:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 800fc6e:	f107 0208 	add.w	r2, r7, #8
 800fc72:	4619      	mov	r1, r3
 800fc74:	f7fe f99c 	bl	800dfb0 <mdns_readname>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	f8a7 336a 	strh.w	r3, [r7, #874]	@ 0x36a
				res = mdns_build_host_domain(&my_ans, mdns);
 800fc7e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800fc82:	f8d7 1374 	ldr.w	r1, [r7, #884]	@ 0x374
 800fc86:	4618      	mov	r0, r3
 800fc88:	f7fe fb10 	bl	800e2ac <mdns_build_host_domain>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	f887 3373 	strb.w	r3, [r7, #883]	@ 0x373
				if (len != MDNS_READNAME_ERROR && res == ERR_OK
 800fc92:	f8b7 336a 	ldrh.w	r3, [r7, #874]	@ 0x36a
 800fc96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fc9a:	4293      	cmp	r3, r2
 800fc9c:	d04f      	beq.n	800fd3e <mdns_handle_question+0x35e>
 800fc9e:	f997 3373 	ldrsb.w	r3, [r7, #883]	@ 0x373
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d14b      	bne.n	800fd3e <mdns_handle_question+0x35e>
						&& mdns_domain_eq(&known_ans, &my_ans)) {
 800fca6:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 800fcaa:	f107 0308 	add.w	r3, r7, #8
 800fcae:	4611      	mov	r1, r2
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7fe f9bb 	bl	800e02c <mdns_domain_eq>
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d040      	beq.n	800fd3e <mdns_handle_question+0x35e>
#if LWIP_IPV4
					if (match & REPLY_HOST_PTR_V4) {
 800fcbc:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 800fcc0:	f003 0302 	and.w	r3, r3, #2
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d03a      	beq.n	800fd3e <mdns_handle_question+0x35e>
						LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Skipping known answer: v4 PTR\n"));
						reply.host_replies &= ~REPLY_HOST_PTR_V4;
 800fcc8:	f897 3359 	ldrb.w	r3, [r7, #857]	@ 0x359
 800fccc:	f023 0302 	bic.w	r3, r3, #2
 800fcd0:	b2db      	uxtb	r3, r3
 800fcd2:	f887 3359 	strb.w	r3, [r7, #857]	@ 0x359
 800fcd6:	e032      	b.n	800fd3e <mdns_handle_question+0x35e>
              reply.host_replies &= ~REPLY_HOST_PTR_V6;
            }
          }
#endif
				}
			} else if (match & REPLY_HOST_A) {
 800fcd8:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 800fcdc:	f003 0301 	and.w	r3, r3, #1
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d02c      	beq.n	800fd3e <mdns_handle_question+0x35e>
#if LWIP_IPV4
				if (ans.rd_length == sizeof(ip4_addr_t)
 800fce4:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fce8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800fcec:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 800fcf0:	2b04      	cmp	r3, #4
 800fcf2:	d124      	bne.n	800fd3e <mdns_handle_question+0x35e>
						&& pbuf_memcmp(pkt->pbuf, ans.rd_offset,
 800fcf4:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fcf8:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	68d8      	ldr	r0, [r3, #12]
 800fd00:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fd04:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800fd08:	f8b3 1112 	ldrh.w	r1, [r3, #274]	@ 0x112
								netif_ip4_addr(pkt->netif), ans.rd_length)
 800fd0c:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fd10:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	689b      	ldr	r3, [r3, #8]
 800fd18:	1d1a      	adds	r2, r3, #4
						&& pbuf_memcmp(pkt->pbuf, ans.rd_offset,
 800fd1a:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fd1e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800fd22:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 800fd26:	f003 f856 	bl	8012dd6 <pbuf_memcmp>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d106      	bne.n	800fd3e <mdns_handle_question+0x35e>
								== 0) {
					LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Skipping known answer: A\n"));
					reply.host_replies &= ~REPLY_HOST_A;
 800fd30:	f897 3359 	ldrb.w	r3, [r7, #857]	@ 0x359
 800fd34:	f023 0301 	bic.w	r3, r3, #1
 800fd38:	b2db      	uxtb	r3, r3
 800fd3a:	f887 3359 	strb.w	r3, [r7, #857]	@ 0x359
        }
#endif
			}
		}

		for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 800fd3e:	2300      	movs	r3, #0
 800fd40:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 800fd44:	e1be      	b.n	80100c4 <mdns_handle_question+0x6e4>
 800fd46:	bf00      	nop
 800fd48:	2000475c 	.word	0x2000475c
			service = mdns->services[i];
 800fd4c:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 800fd50:	f8d7 2378 	ldr.w	r2, [r7, #888]	@ 0x378
 800fd54:	3210      	adds	r2, #16
 800fd56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd5a:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
			if (!service) {
 800fd5e:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	f000 81a8 	beq.w	80100b8 <mdns_handle_question+0x6d8>
				continue;
			}
			match = reply.serv_replies[i] & check_service(service, &ans.info);
 800fd68:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 800fd6c:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 800fd70:	4413      	add	r3, r2
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	461c      	mov	r4, r3
 800fd76:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800fd7a:	4619      	mov	r1, r3
 800fd7c:	f8d7 0364 	ldr.w	r0, [r7, #868]	@ 0x364
 800fd80:	f7fe fc84 	bl	800e68c <check_service>
 800fd84:	4603      	mov	r3, r0
 800fd86:	4023      	ands	r3, r4
 800fd88:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
			if (match && (ans.ttl > (service->dns_ttl / 2))) {
 800fd8c:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	f000 8192 	beq.w	80100ba <mdns_handle_question+0x6da>
 800fd96:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fd9a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800fd9e:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 800fda2:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 800fda6:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 800fdaa:	085b      	lsrs	r3, r3, #1
 800fdac:	429a      	cmp	r2, r3
 800fdae:	f240 8184 	bls.w	80100ba <mdns_handle_question+0x6da>
				/* The RR in the known answer matches an RR we are planning to send,
				 * and the TTL is less than half gone.
				 * If the payload matches we should not send that answer.
				 */
				if (ans.info.type == DNS_RRTYPE_PTR) {
 800fdb2:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fdb6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800fdba:	f8b3 3104 	ldrh.w	r3, [r3, #260]	@ 0x104
 800fdbe:	2b0c      	cmp	r3, #12
 800fdc0:	d17e      	bne.n	800fec0 <mdns_handle_question+0x4e0>
					/* Read domain and compare */
					struct mdns_domain known_ans, my_ans;
					u16_t len;
					len = mdns_readname(pkt->pbuf, ans.rd_offset, &known_ans);
 800fdc2:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fdc6:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	68d8      	ldr	r0, [r3, #12]
 800fdce:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fdd2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800fdd6:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 800fdda:	f107 0208 	add.w	r2, r7, #8
 800fdde:	4619      	mov	r1, r3
 800fde0:	f7fe f8e6 	bl	800dfb0 <mdns_readname>
 800fde4:	4603      	mov	r3, r0
 800fde6:	f8a7 335e 	strh.w	r3, [r7, #862]	@ 0x35e
					if (len != MDNS_READNAME_ERROR) {
 800fdea:	f8b7 335e 	ldrh.w	r3, [r7, #862]	@ 0x35e
 800fdee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fdf2:	4293      	cmp	r3, r2
 800fdf4:	f000 8161 	beq.w	80100ba <mdns_handle_question+0x6da>
						if (match & REPLY_SERVICE_TYPE_PTR) {
 800fdf8:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 800fdfc:	f003 0310 	and.w	r3, r3, #16
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d029      	beq.n	800fe58 <mdns_handle_question+0x478>
							res = mdns_build_service_domain(&my_ans, service,
 800fe04:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800fe08:	2200      	movs	r2, #0
 800fe0a:	f8d7 1364 	ldr.w	r1, [r7, #868]	@ 0x364
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f7fe faf6 	bl	800e400 <mdns_build_service_domain>
 800fe14:	4603      	mov	r3, r0
 800fe16:	f887 3373 	strb.w	r3, [r7, #883]	@ 0x373
									0);
							if (res == ERR_OK
 800fe1a:	f997 3373 	ldrsb.w	r3, [r7, #883]	@ 0x373
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d11a      	bne.n	800fe58 <mdns_handle_question+0x478>
									&& mdns_domain_eq(&known_ans, &my_ans)) {
 800fe22:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 800fe26:	f107 0308 	add.w	r3, r7, #8
 800fe2a:	4611      	mov	r1, r2
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7fe f8fd 	bl	800e02c <mdns_domain_eq>
 800fe32:	4603      	mov	r3, r0
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d00f      	beq.n	800fe58 <mdns_handle_question+0x478>
								LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Skipping known answer: service type PTR\n"));
								reply.serv_replies[i] &=
 800fe38:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 800fe3c:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 800fe40:	4413      	add	r3, r2
 800fe42:	781b      	ldrb	r3, [r3, #0]
 800fe44:	f023 0310 	bic.w	r3, r3, #16
 800fe48:	b2d9      	uxtb	r1, r3
 800fe4a:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 800fe4e:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 800fe52:	4413      	add	r3, r2
 800fe54:	460a      	mov	r2, r1
 800fe56:	701a      	strb	r2, [r3, #0]
										~REPLY_SERVICE_TYPE_PTR;
							}
						}
						if (match & REPLY_SERVICE_NAME_PTR) {
 800fe58:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 800fe5c:	f003 0320 	and.w	r3, r3, #32
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	f000 812a 	beq.w	80100ba <mdns_handle_question+0x6da>
							res = mdns_build_service_domain(&my_ans, service,
 800fe66:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800fe6a:	2201      	movs	r2, #1
 800fe6c:	f8d7 1364 	ldr.w	r1, [r7, #868]	@ 0x364
 800fe70:	4618      	mov	r0, r3
 800fe72:	f7fe fac5 	bl	800e400 <mdns_build_service_domain>
 800fe76:	4603      	mov	r3, r0
 800fe78:	f887 3373 	strb.w	r3, [r7, #883]	@ 0x373
									1);
							if (res == ERR_OK
 800fe7c:	f997 3373 	ldrsb.w	r3, [r7, #883]	@ 0x373
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	f040 811a 	bne.w	80100ba <mdns_handle_question+0x6da>
									&& mdns_domain_eq(&known_ans, &my_ans)) {
 800fe86:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 800fe8a:	f107 0308 	add.w	r3, r7, #8
 800fe8e:	4611      	mov	r1, r2
 800fe90:	4618      	mov	r0, r3
 800fe92:	f7fe f8cb 	bl	800e02c <mdns_domain_eq>
 800fe96:	4603      	mov	r3, r0
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	f000 810e 	beq.w	80100ba <mdns_handle_question+0x6da>
								LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Skipping known answer: service name PTR\n"));
								reply.serv_replies[i] &=
 800fe9e:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 800fea2:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 800fea6:	4413      	add	r3, r2
 800fea8:	781b      	ldrb	r3, [r3, #0]
 800feaa:	f023 0320 	bic.w	r3, r3, #32
 800feae:	b2d9      	uxtb	r1, r3
 800feb0:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 800feb4:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 800feb8:	4413      	add	r3, r2
 800feba:	460a      	mov	r2, r1
 800febc:	701a      	strb	r2, [r3, #0]
 800febe:	e0fc      	b.n	80100ba <mdns_handle_question+0x6da>
										~REPLY_SERVICE_NAME_PTR;
							}
						}
					}
				} else if (match & REPLY_SERVICE_SRV) {
 800fec0:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 800fec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fec8:	2b00      	cmp	r3, #0
 800feca:	f000 80b5 	beq.w	8010038 <mdns_handle_question+0x658>
					/* Read and compare to my SRV record */
					u16_t field16, len, read_pos;
					struct mdns_domain known_ans, my_ans;
					read_pos = ans.rd_offset;
 800fece:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fed2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800fed6:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 800feda:	f8a7 3362 	strh.w	r3, [r7, #866]	@ 0x362
					do {
						/* Check priority field */
						len = pbuf_copy_partial(pkt->pbuf, &field16,
 800fede:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800fee2:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	68d8      	ldr	r0, [r3, #12]
 800feea:	f8b7 3362 	ldrh.w	r3, [r7, #866]	@ 0x362
 800feee:	f507 7149 	add.w	r1, r7, #804	@ 0x324
 800fef2:	2202      	movs	r2, #2
 800fef4:	f002 fd5a 	bl	80129ac <pbuf_copy_partial>
 800fef8:	4603      	mov	r3, r0
 800fefa:	f8a7 3360 	strh.w	r3, [r7, #864]	@ 0x360
								sizeof(field16), read_pos);
						if (len
 800fefe:	f8b7 3360 	ldrh.w	r3, [r7, #864]	@ 0x360
 800ff02:	2b02      	cmp	r3, #2
 800ff04:	f040 80d9 	bne.w	80100ba <mdns_handle_question+0x6da>
								!= sizeof(field16)|| lwip_ntohs(field16) != SRV_PRIORITY) {
 800ff08:	f8b7 3324 	ldrh.w	r3, [r7, #804]	@ 0x324
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f000 fdf3 	bl	8010af8 <lwip_htons>
 800ff12:	4603      	mov	r3, r0
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	f040 80d0 	bne.w	80100ba <mdns_handle_question+0x6da>
							break;
						}
						read_pos += len;
 800ff1a:	f8b7 2362 	ldrh.w	r2, [r7, #866]	@ 0x362
 800ff1e:	f8b7 3360 	ldrh.w	r3, [r7, #864]	@ 0x360
 800ff22:	4413      	add	r3, r2
 800ff24:	f8a7 3362 	strh.w	r3, [r7, #866]	@ 0x362
						/* Check weight field */
						len = pbuf_copy_partial(pkt->pbuf, &field16,
 800ff28:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800ff2c:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	68d8      	ldr	r0, [r3, #12]
 800ff34:	f8b7 3362 	ldrh.w	r3, [r7, #866]	@ 0x362
 800ff38:	f507 7149 	add.w	r1, r7, #804	@ 0x324
 800ff3c:	2202      	movs	r2, #2
 800ff3e:	f002 fd35 	bl	80129ac <pbuf_copy_partial>
 800ff42:	4603      	mov	r3, r0
 800ff44:	f8a7 3360 	strh.w	r3, [r7, #864]	@ 0x360
								sizeof(field16), read_pos);
						if (len
 800ff48:	f8b7 3360 	ldrh.w	r3, [r7, #864]	@ 0x360
 800ff4c:	2b02      	cmp	r3, #2
 800ff4e:	f040 80b4 	bne.w	80100ba <mdns_handle_question+0x6da>
								!= sizeof(field16)|| lwip_ntohs(field16) != SRV_WEIGHT) {
 800ff52:	f8b7 3324 	ldrh.w	r3, [r7, #804]	@ 0x324
 800ff56:	4618      	mov	r0, r3
 800ff58:	f000 fdce 	bl	8010af8 <lwip_htons>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	f040 80ab 	bne.w	80100ba <mdns_handle_question+0x6da>
							break;
						}
						read_pos += len;
 800ff64:	f8b7 2362 	ldrh.w	r2, [r7, #866]	@ 0x362
 800ff68:	f8b7 3360 	ldrh.w	r3, [r7, #864]	@ 0x360
 800ff6c:	4413      	add	r3, r2
 800ff6e:	f8a7 3362 	strh.w	r3, [r7, #866]	@ 0x362
						/* Check port field */
						len = pbuf_copy_partial(pkt->pbuf, &field16,
 800ff72:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800ff76:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	68d8      	ldr	r0, [r3, #12]
 800ff7e:	f8b7 3362 	ldrh.w	r3, [r7, #866]	@ 0x362
 800ff82:	f507 7149 	add.w	r1, r7, #804	@ 0x324
 800ff86:	2202      	movs	r2, #2
 800ff88:	f002 fd10 	bl	80129ac <pbuf_copy_partial>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	f8a7 3360 	strh.w	r3, [r7, #864]	@ 0x360
								sizeof(field16), read_pos);
						if (len != sizeof(field16)
 800ff92:	f8b7 3360 	ldrh.w	r3, [r7, #864]	@ 0x360
 800ff96:	2b02      	cmp	r3, #2
 800ff98:	f040 808f 	bne.w	80100ba <mdns_handle_question+0x6da>
								|| lwip_ntohs(field16) != service->port) {
 800ff9c:	f8b7 3324 	ldrh.w	r3, [r7, #804]	@ 0x324
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f000 fda9 	bl	8010af8 <lwip_htons>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	461a      	mov	r2, r3
 800ffaa:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 800ffae:	f8b3 3192 	ldrh.w	r3, [r3, #402]	@ 0x192
 800ffb2:	429a      	cmp	r2, r3
 800ffb4:	f040 8081 	bne.w	80100ba <mdns_handle_question+0x6da>
							break;
						}
						read_pos += len;
 800ffb8:	f8b7 2362 	ldrh.w	r2, [r7, #866]	@ 0x362
 800ffbc:	f8b7 3360 	ldrh.w	r3, [r7, #864]	@ 0x360
 800ffc0:	4413      	add	r3, r2
 800ffc2:	f8a7 3362 	strh.w	r3, [r7, #866]	@ 0x362
						/* Check host field */
						len = mdns_readname(pkt->pbuf, read_pos, &known_ans);
 800ffc6:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 800ffca:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	68db      	ldr	r3, [r3, #12]
 800ffd2:	f107 0208 	add.w	r2, r7, #8
 800ffd6:	f8b7 1362 	ldrh.w	r1, [r7, #866]	@ 0x362
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f7fd ffe8 	bl	800dfb0 <mdns_readname>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	f8a7 3360 	strh.w	r3, [r7, #864]	@ 0x360
						mdns_build_host_domain(&my_ans, mdns);
 800ffe6:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800ffea:	f8d7 1374 	ldr.w	r1, [r7, #884]	@ 0x374
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7fe f95c 	bl	800e2ac <mdns_build_host_domain>
						if (len == MDNS_READNAME_ERROR
 800fff4:	f8b7 3360 	ldrh.w	r3, [r7, #864]	@ 0x360
 800fff8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fffc:	4293      	cmp	r3, r2
 800fffe:	d05c      	beq.n	80100ba <mdns_handle_question+0x6da>
								|| !mdns_domain_eq(&known_ans, &my_ans)) {
 8010000:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8010004:	f107 0308 	add.w	r3, r7, #8
 8010008:	4611      	mov	r1, r2
 801000a:	4618      	mov	r0, r3
 801000c:	f7fe f80e 	bl	800e02c <mdns_domain_eq>
 8010010:	4603      	mov	r3, r0
 8010012:	2b00      	cmp	r3, #0
 8010014:	d051      	beq.n	80100ba <mdns_handle_question+0x6da>
							break;
						}LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Skipping known answer: SRV\n"));
						reply.serv_replies[i] &= ~REPLY_SERVICE_SRV;
 8010016:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 801001a:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 801001e:	4413      	add	r3, r2
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010026:	b2d9      	uxtb	r1, r3
 8010028:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 801002c:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8010030:	4413      	add	r3, r2
 8010032:	460a      	mov	r2, r1
 8010034:	701a      	strb	r2, [r3, #0]
 8010036:	e040      	b.n	80100ba <mdns_handle_question+0x6da>
					} while (0);
				} else if (match & REPLY_SERVICE_TXT) {
 8010038:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 801003c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010040:	2b00      	cmp	r3, #0
 8010042:	d03a      	beq.n	80100ba <mdns_handle_question+0x6da>
					mdns_prepare_txtdata(service);
 8010044:	f8d7 0364 	ldr.w	r0, [r7, #868]	@ 0x364
 8010048:	f7fe f850 	bl	800e0ec <mdns_prepare_txtdata>
					if (service->txtdata.length == ans.rd_length
 801004c:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8010050:	f8b3 2100 	ldrh.w	r2, [r3, #256]	@ 0x100
 8010054:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8010058:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 801005c:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 8010060:	429a      	cmp	r2, r3
 8010062:	d12a      	bne.n	80100ba <mdns_handle_question+0x6da>
							&& pbuf_memcmp(pkt->pbuf, ans.rd_offset,
 8010064:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8010068:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	68d8      	ldr	r0, [r3, #12]
 8010070:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8010074:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8010078:	f8b3 1112 	ldrh.w	r1, [r3, #274]	@ 0x112
									service->txtdata.name, ans.rd_length)
 801007c:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
							&& pbuf_memcmp(pkt->pbuf, ans.rd_offset,
 8010080:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 8010084:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8010088:	f8b3 3110 	ldrh.w	r3, [r3, #272]	@ 0x110
 801008c:	f002 fea3 	bl	8012dd6 <pbuf_memcmp>
 8010090:	4603      	mov	r3, r0
 8010092:	2b00      	cmp	r3, #0
 8010094:	d111      	bne.n	80100ba <mdns_handle_question+0x6da>
									== 0) {
						LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Skipping known answer: TXT\n"));
						reply.serv_replies[i] &= ~REPLY_SERVICE_TXT;
 8010096:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 801009a:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 801009e:	4413      	add	r3, r2
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80100a6:	b2d9      	uxtb	r1, r3
 80100a8:	f207 325b 	addw	r2, r7, #859	@ 0x35b
 80100ac:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 80100b0:	4413      	add	r3, r2
 80100b2:	460a      	mov	r2, r1
 80100b4:	701a      	strb	r2, [r3, #0]
 80100b6:	e000      	b.n	80100ba <mdns_handle_question+0x6da>
				continue;
 80100b8:	bf00      	nop
		for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 80100ba:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 80100be:	3301      	adds	r3, #1
 80100c0:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 80100c4:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	f77f ae3f 	ble.w	800fd4c <mdns_handle_question+0x36c>
 80100ce:	e000      	b.n	80100d2 <mdns_handle_question+0x6f2>
			continue;
 80100d0:	bf00      	nop
	while (pkt->answers_left) {
 80100d2:	f507 7360 	add.w	r3, r7, #896	@ 0x380
 80100d6:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	8b5b      	ldrh	r3, [r3, #26]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	f47f ad60 	bne.w	800fba4 <mdns_handle_question+0x1c4>
				}
			}
		}
	}

	mdns_send_outpacket(&reply, DNS_FLAG1_RESPONSE | DNS_FLAG1_AUTHORATIVE);
 80100e4:	f507 734a 	add.w	r3, r7, #808	@ 0x328
 80100e8:	2184      	movs	r1, #132	@ 0x84
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7ff fa2a 	bl	800f544 <mdns_send_outpacket>
 80100f0:	e002      	b.n	80100f8 <mdns_handle_question+0x718>
				goto cleanup;
 80100f2:	bf00      	nop
 80100f4:	e000      	b.n	80100f8 <mdns_handle_question+0x718>
			goto cleanup;
 80100f6:	bf00      	nop

	cleanup: if (reply.pbuf) {
 80100f8:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d00b      	beq.n	8010118 <mdns_handle_question+0x738>
		/* This should only happen if we fail to alloc/write question for legacy query */
		pbuf_free(reply.pbuf);
 8010100:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8010104:	4618      	mov	r0, r3
 8010106:	f002 fa4b 	bl	80125a0 <pbuf_free>
		reply.pbuf = NULL;
 801010a:	2300      	movs	r3, #0
 801010c:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 8010110:	e002      	b.n	8010118 <mdns_handle_question+0x738>
		return;
 8010112:	bf00      	nop
 8010114:	e000      	b.n	8010118 <mdns_handle_question+0x738>
			return;
 8010116:	bf00      	nop
	}
}
 8010118:	f507 7761 	add.w	r7, r7, #900	@ 0x384
 801011c:	46bd      	mov	sp, r7
 801011e:	bd90      	pop	{r4, r7, pc}

08010120 <mdns_handle_response>:

/**
 * Handle response MDNS packet
 * Only prints debug for now. Will need more code to do conflict resolution.
 */
static void mdns_handle_response(struct mdns_packet *pkt) {
 8010120:	b580      	push	{r7, lr}
 8010122:	f5ad 7d0e 	sub.w	sp, sp, #568	@ 0x238
 8010126:	af00      	add	r7, sp, #0
 8010128:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 801012c:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8010130:	6018      	str	r0, [r3, #0]
	struct mdns_host *mdns = NETIF_TO_HOST(pkt->netif);
 8010132:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8010136:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	689a      	ldr	r2, [r3, #8]
 801013e:	4b66      	ldr	r3, [pc, #408]	@ (80102d8 <mdns_handle_response+0x1b8>)
 8010140:	781b      	ldrb	r3, [r3, #0]
 8010142:	3308      	adds	r3, #8
 8010144:	009b      	lsls	r3, r3, #2
 8010146:	4413      	add	r3, r2
 8010148:	685b      	ldr	r3, [r3, #4]
 801014a:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230

	/* Ignore all questions */
	while (pkt->questions_left) {
 801014e:	e011      	b.n	8010174 <mdns_handle_response+0x54>
		struct mdns_question q;
		err_t res;

		res = mdns_read_question(pkt, &q);
 8010150:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8010154:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8010158:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 801015c:	4611      	mov	r1, r2
 801015e:	6818      	ldr	r0, [r3, #0]
 8010160:	f7fe fea8 	bl	800eeb4 <mdns_read_question>
 8010164:	4603      	mov	r3, r0
 8010166:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
		if (res != ERR_OK) {
 801016a:	f997 3227 	ldrsb.w	r3, [r7, #551]	@ 0x227
 801016e:	2b00      	cmp	r3, #0
 8010170:	f040 80ab 	bne.w	80102ca <mdns_handle_response+0x1aa>
	while (pkt->questions_left) {
 8010174:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8010178:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	8adb      	ldrh	r3, [r3, #22]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d1e5      	bne.n	8010150 <mdns_handle_response+0x30>
			LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Failed to parse question, skipping response packet\n"));
			return;
		}
	}

	while (pkt->answers_left) {
 8010184:	e097      	b.n	80102b6 <mdns_handle_response+0x196>
		struct mdns_answer ans;
		err_t res;

		res = mdns_read_answer(pkt, &ans);
 8010186:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 801018a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 801018e:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8010192:	4611      	mov	r1, r2
 8010194:	6818      	ldr	r0, [r3, #0]
 8010196:	f7fe fed7 	bl	800ef48 <mdns_read_answer>
 801019a:	4603      	mov	r3, r0
 801019c:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
		if (res != ERR_OK) {
 80101a0:	f997 322f 	ldrsb.w	r3, [r7, #559]	@ 0x22f
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	f040 8092 	bne.w	80102ce <mdns_handle_response+0x1ae>
			LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Failed to parse answer, skipping response packet\n"));
			return;
		}

		LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Answer for domain "));
		mdns_domain_debug_print(&ans.info.domain);
 80101aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7fd ff16 	bl	800dfe0 <mdns_domain_debug_print>
		LWIP_DEBUGF(MDNS_DEBUG, (" type %d class %d\n", ans.info.type, ans.info.klass));

		/*"Apparently conflicting Multicast DNS responses received *before* the first probe packet is sent MUST
		 be silently ignored" so drop answer if we haven't started probing yet*/
		if ((mdns->probing_state == MDNS_PROBING_ONGOING)
 80101b4:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 80101b8:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80101bc:	2b01      	cmp	r3, #1
 80101be:	d17a      	bne.n	80102b6 <mdns_handle_response+0x196>
				&& (mdns->probes_sent > 0)) {
 80101c0:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 80101c4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d074      	beq.n	80102b6 <mdns_handle_response+0x196>
			struct mdns_domain domain;
			u8_t i;
			u8_t conflict = 0;
 80101cc:	2300      	movs	r3, #0
 80101ce:	f887 3236 	strb.w	r3, [r7, #566]	@ 0x236

			res = mdns_build_host_domain(&domain, mdns);
 80101d2:	f107 030c 	add.w	r3, r7, #12
 80101d6:	f8d7 1230 	ldr.w	r1, [r7, #560]	@ 0x230
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fe f866 	bl	800e2ac <mdns_build_host_domain>
 80101e0:	4603      	mov	r3, r0
 80101e2:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
			if (res == ERR_OK && mdns_domain_eq(&ans.info.domain, &domain)) {
 80101e6:	f997 322f 	ldrsb.w	r3, [r7, #559]	@ 0x22f
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d10d      	bne.n	801020a <mdns_handle_response+0xea>
 80101ee:	f107 020c 	add.w	r2, r7, #12
 80101f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80101f6:	4611      	mov	r1, r2
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7fd ff17 	bl	800e02c <mdns_domain_eq>
 80101fe:	4603      	mov	r3, r0
 8010200:	2b00      	cmp	r3, #0
 8010202:	d002      	beq.n	801020a <mdns_handle_response+0xea>
				LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Probe response matches host domain!"));
				conflict = 1;
 8010204:	2301      	movs	r3, #1
 8010206:	f887 3236 	strb.w	r3, [r7, #566]	@ 0x236
			}

			for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 801020a:	2300      	movs	r3, #0
 801020c:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
 8010210:	e030      	b.n	8010274 <mdns_handle_response+0x154>
				struct mdns_service *service = mdns->services[i];
 8010212:	f897 2237 	ldrb.w	r2, [r7, #567]	@ 0x237
 8010216:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 801021a:	3210      	adds	r2, #16
 801021c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010220:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
				if (!service) {
 8010224:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8010228:	2b00      	cmp	r3, #0
 801022a:	d01d      	beq.n	8010268 <mdns_handle_response+0x148>
					continue;
				}
				res = mdns_build_service_domain(&domain, service, 1);
 801022c:	f107 030c 	add.w	r3, r7, #12
 8010230:	2201      	movs	r2, #1
 8010232:	f8d7 1228 	ldr.w	r1, [r7, #552]	@ 0x228
 8010236:	4618      	mov	r0, r3
 8010238:	f7fe f8e2 	bl	800e400 <mdns_build_service_domain>
 801023c:	4603      	mov	r3, r0
 801023e:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
				if ((res == ERR_OK)
 8010242:	f997 322f 	ldrsb.w	r3, [r7, #559]	@ 0x22f
 8010246:	2b00      	cmp	r3, #0
 8010248:	d10f      	bne.n	801026a <mdns_handle_response+0x14a>
						&& mdns_domain_eq(&ans.info.domain, &domain)) {
 801024a:	f107 020c 	add.w	r2, r7, #12
 801024e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010252:	4611      	mov	r1, r2
 8010254:	4618      	mov	r0, r3
 8010256:	f7fd fee9 	bl	800e02c <mdns_domain_eq>
 801025a:	4603      	mov	r3, r0
 801025c:	2b00      	cmp	r3, #0
 801025e:	d004      	beq.n	801026a <mdns_handle_response+0x14a>
					LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Probe response matches service domain!"));
					conflict = 1;
 8010260:	2301      	movs	r3, #1
 8010262:	f887 3236 	strb.w	r3, [r7, #566]	@ 0x236
 8010266:	e000      	b.n	801026a <mdns_handle_response+0x14a>
					continue;
 8010268:	bf00      	nop
			for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 801026a:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
 801026e:	3301      	adds	r3, #1
 8010270:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
 8010274:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
 8010278:	2b00      	cmp	r3, #0
 801027a:	d0ca      	beq.n	8010212 <mdns_handle_response+0xf2>
				}
			}

			if (conflict != 0) {
 801027c:	f897 3236 	ldrb.w	r3, [r7, #566]	@ 0x236
 8010280:	2b00      	cmp	r3, #0
 8010282:	d018      	beq.n	80102b6 <mdns_handle_response+0x196>
				sys_untimeout(mdns_probe, pkt->netif);
 8010284:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8010288:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	689b      	ldr	r3, [r3, #8]
 8010290:	4619      	mov	r1, r3
 8010292:	4812      	ldr	r0, [pc, #72]	@ (80102dc <mdns_handle_response+0x1bc>)
 8010294:	f008 f854 	bl	8018340 <sys_untimeout>
				if (mdns_name_result_cb != NULL) {
 8010298:	4b11      	ldr	r3, [pc, #68]	@ (80102e0 <mdns_handle_response+0x1c0>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d00a      	beq.n	80102b6 <mdns_handle_response+0x196>
					mdns_name_result_cb(pkt->netif, MDNS_PROBING_CONFLICT);
 80102a0:	4b0f      	ldr	r3, [pc, #60]	@ (80102e0 <mdns_handle_response+0x1c0>)
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 80102a8:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 80102ac:	6812      	ldr	r2, [r2, #0]
 80102ae:	6892      	ldr	r2, [r2, #8]
 80102b0:	2100      	movs	r1, #0
 80102b2:	4610      	mov	r0, r2
 80102b4:	4798      	blx	r3
	while (pkt->answers_left) {
 80102b6:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80102ba:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	8b5b      	ldrh	r3, [r3, #26]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	f47f af5f 	bne.w	8010186 <mdns_handle_response+0x66>
 80102c8:	e002      	b.n	80102d0 <mdns_handle_response+0x1b0>
			return;
 80102ca:	bf00      	nop
 80102cc:	e000      	b.n	80102d0 <mdns_handle_response+0x1b0>
			return;
 80102ce:	bf00      	nop
				}
			}
		}
	}
}
 80102d0:	f507 770e 	add.w	r7, r7, #568	@ 0x238
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}
 80102d8:	2000475c 	.word	0x2000475c
 80102dc:	080105c5 	.word	0x080105c5
 80102e0:	20004764 	.word	0x20004764

080102e4 <mdns_recv>:
/**
 * Receive input function for MDNS packets.
 * Handles both IPv4 and IPv6 UDP pcbs.
 */
static void mdns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p,
		const ip_addr_t *addr, u16_t port) {
 80102e4:	b590      	push	{r4, r7, lr}
 80102e6:	b091      	sub	sp, #68	@ 0x44
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	60f8      	str	r0, [r7, #12]
 80102ec:	60b9      	str	r1, [r7, #8]
 80102ee:	607a      	str	r2, [r7, #4]
 80102f0:	603b      	str	r3, [r7, #0]
	struct dns_hdr hdr;
	struct mdns_packet packet;
	struct netif *recv_netif = ip_current_input_netif();
 80102f2:	4b3f      	ldr	r3, [pc, #252]	@ (80103f0 <mdns_recv+0x10c>)
 80102f4:	685b      	ldr	r3, [r3, #4]
 80102f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	u16_t offset = 0;
 80102f8:	2300      	movs	r3, #0
 80102fa:	877b      	strh	r3, [r7, #58]	@ 0x3a
	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(pcb);

	LWIP_DEBUGF(MDNS_DEBUG, ("MDNS: Received IPv%d MDNS packet, len %d\n", IP_IS_V6(addr) ? 6 : 4, p->tot_len));

	if (NETIF_TO_HOST(recv_netif) == NULL) {
 80102fc:	4b3d      	ldr	r3, [pc, #244]	@ (80103f4 <mdns_recv+0x110>)
 80102fe:	781b      	ldrb	r3, [r3, #0]
 8010300:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010302:	3308      	adds	r3, #8
 8010304:	009b      	lsls	r3, r3, #2
 8010306:	4413      	add	r3, r2
 8010308:	685b      	ldr	r3, [r3, #4]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d064      	beq.n	80103d8 <mdns_recv+0xf4>
		/* From netif not configured for MDNS */
		goto dealloc;
	}

	if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, offset) < SIZEOF_DNS_HDR) {
 801030e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010310:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8010314:	220c      	movs	r2, #12
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f002 fb48 	bl	80129ac <pbuf_copy_partial>
 801031c:	4603      	mov	r3, r0
 801031e:	2b0b      	cmp	r3, #11
 8010320:	d95c      	bls.n	80103dc <mdns_recv+0xf8>
		/* Too small */
		goto dealloc;
	}
	offset += SIZEOF_DNS_HDR;
 8010322:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010324:	330c      	adds	r3, #12
 8010326:	877b      	strh	r3, [r7, #58]	@ 0x3a

	if (DNS_HDR_GET_OPCODE(&hdr)) {
 8010328:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801032c:	08db      	lsrs	r3, r3, #3
 801032e:	b2db      	uxtb	r3, r3
 8010330:	f003 030f 	and.w	r3, r3, #15
 8010334:	2b00      	cmp	r3, #0
 8010336:	d153      	bne.n	80103e0 <mdns_recv+0xfc>
		/* Ignore non-standard queries in multicast packets (RFC 6762, section 18.3) */
		goto dealloc;
	}

	memset(&packet, 0, sizeof(packet));
 8010338:	f107 0310 	add.w	r3, r7, #16
 801033c:	221c      	movs	r2, #28
 801033e:	2100      	movs	r1, #0
 8010340:	4618      	mov	r0, r3
 8010342:	f00e fd1d 	bl	801ed80 <memset>
	SMEMCPY(&packet.source_addr, addr, sizeof(packet.source_addr));
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	613b      	str	r3, [r7, #16]
	packet.source_port = port;
 801034c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8010350:	82bb      	strh	r3, [r7, #20]
	packet.netif = recv_netif;
 8010352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010354:	61bb      	str	r3, [r7, #24]
	packet.pbuf = p;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	61fb      	str	r3, [r7, #28]
	packet.parse_offset = offset;
 801035a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801035c:	843b      	strh	r3, [r7, #32]
	packet.tx_id = lwip_ntohs(hdr.id);
 801035e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010360:	4618      	mov	r0, r3
 8010362:	f000 fbc9 	bl	8010af8 <lwip_htons>
 8010366:	4603      	mov	r3, r0
 8010368:	847b      	strh	r3, [r7, #34]	@ 0x22
	packet.questions = packet.questions_left = lwip_ntohs(hdr.numquestions);
 801036a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801036c:	4618      	mov	r0, r3
 801036e:	f000 fbc3 	bl	8010af8 <lwip_htons>
 8010372:	4603      	mov	r3, r0
 8010374:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010376:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010378:	84bb      	strh	r3, [r7, #36]	@ 0x24
	packet.answers =
			packet.answers_left =
					lwip_ntohs(
 801037a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801037c:	4618      	mov	r0, r3
 801037e:	f000 fbbb 	bl	8010af8 <lwip_htons>
 8010382:	4603      	mov	r3, r0
 8010384:	461c      	mov	r4, r3
							hdr.numanswers) + lwip_ntohs(hdr.numauthrr) + lwip_ntohs(hdr.numextrarr);
 8010386:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010388:	4618      	mov	r0, r3
 801038a:	f000 fbb5 	bl	8010af8 <lwip_htons>
 801038e:	4603      	mov	r3, r0
 8010390:	4423      	add	r3, r4
 8010392:	b29c      	uxth	r4, r3
 8010394:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010396:	4618      	mov	r0, r3
 8010398:	f000 fbae 	bl	8010af8 <lwip_htons>
 801039c:	4603      	mov	r3, r0
 801039e:	4423      	add	r3, r4
 80103a0:	b29b      	uxth	r3, r3
			packet.answers_left =
 80103a2:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80103a4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
	packet.answers =
 80103a6:	853b      	strh	r3, [r7, #40]	@ 0x28
    }
  }
#endif
#if LWIP_IPV4
	if (!IP_IS_V6(ip_current_dest_addr())) {
		if (!ip_addr_cmp(ip_current_dest_addr(), &v4group)) {
 80103a8:	4b11      	ldr	r3, [pc, #68]	@ (80103f0 <mdns_recv+0x10c>)
 80103aa:	695b      	ldr	r3, [r3, #20]
 80103ac:	4a12      	ldr	r2, [pc, #72]	@ (80103f8 <mdns_recv+0x114>)
 80103ae:	4293      	cmp	r3, r2
 80103b0:	d001      	beq.n	80103b6 <mdns_recv+0xd2>
			packet.recv_unicast = 1;
 80103b2:	2301      	movs	r3, #1
 80103b4:	82fb      	strh	r3, [r7, #22]
		}
	}
#endif

	if (hdr.flags1 & DNS_FLAG1_RESPONSE) {
 80103b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80103ba:	b25b      	sxtb	r3, r3
 80103bc:	2b00      	cmp	r3, #0
 80103be:	da05      	bge.n	80103cc <mdns_recv+0xe8>
		mdns_handle_response(&packet);
 80103c0:	f107 0310 	add.w	r3, r7, #16
 80103c4:	4618      	mov	r0, r3
 80103c6:	f7ff feab 	bl	8010120 <mdns_handle_response>
 80103ca:	e00a      	b.n	80103e2 <mdns_recv+0xfe>
	} else {
		mdns_handle_question(&packet);
 80103cc:	f107 0310 	add.w	r3, r7, #16
 80103d0:	4618      	mov	r0, r3
 80103d2:	f7ff fb05 	bl	800f9e0 <mdns_handle_question>
 80103d6:	e004      	b.n	80103e2 <mdns_recv+0xfe>
		goto dealloc;
 80103d8:	bf00      	nop
 80103da:	e002      	b.n	80103e2 <mdns_recv+0xfe>
		goto dealloc;
 80103dc:	bf00      	nop
 80103de:	e000      	b.n	80103e2 <mdns_recv+0xfe>
		goto dealloc;
 80103e0:	bf00      	nop
	}

	dealloc: pbuf_free(p);
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f002 f8dc 	bl	80125a0 <pbuf_free>
}
 80103e8:	bf00      	nop
 80103ea:	3744      	adds	r7, #68	@ 0x44
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd90      	pop	{r4, r7, pc}
 80103f0:	20004768 	.word	0x20004768
 80103f4:	2000475c 	.word	0x2000475c
 80103f8:	fb0000e0 	.word	0xfb0000e0

080103fc <mdns_send_probe>:
    mdns_resp_announce(netif);
  }
}
#endif /* LWIP_NETIF_EXT_STATUS_CALLBACK && MDNS_RESP_USENETIF_EXTCALLBACK */

static err_t mdns_send_probe(struct netif *netif, const ip_addr_t *destination) {
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b0d6      	sub	sp, #344	@ 0x158
 8010400:	af02      	add	r7, sp, #8
 8010402:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010406:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801040a:	6018      	str	r0, [r3, #0]
 801040c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010410:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8010414:	6019      	str	r1, [r3, #0]
	struct mdns_outpacket pkt;
	struct mdns_domain domain;
	u8_t i;
	err_t res;

	mdns = NETIF_TO_HOST(netif);
 8010416:	4b6a      	ldr	r3, [pc, #424]	@ (80105c0 <mdns_send_probe+0x1c4>)
 8010418:	781b      	ldrb	r3, [r3, #0]
 801041a:	4619      	mov	r1, r3
 801041c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010420:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8010424:	681a      	ldr	r2, [r3, #0]
 8010426:	f101 0308 	add.w	r3, r1, #8
 801042a:	009b      	lsls	r3, r3, #2
 801042c:	4413      	add	r3, r2
 801042e:	685b      	ldr	r3, [r3, #4]
 8010430:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

	memset(&pkt, 0, sizeof(pkt));
 8010434:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8010438:	2234      	movs	r2, #52	@ 0x34
 801043a:	2100      	movs	r1, #0
 801043c:	4618      	mov	r0, r3
 801043e:	f00e fc9f 	bl	801ed80 <memset>
	pkt.netif = netif;
 8010442:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010446:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	/* Add unicast questions with rtype ANY for all our desired records */
	mdns_build_host_domain(&domain, mdns);
 8010450:	f107 0308 	add.w	r3, r7, #8
 8010454:	f8d7 1148 	ldr.w	r1, [r7, #328]	@ 0x148
 8010458:	4618      	mov	r0, r3
 801045a:	f7fd ff27 	bl	800e2ac <mdns_build_host_domain>
	res = mdns_add_question(&pkt, &domain, DNS_RRTYPE_ANY, DNS_RRCLASS_IN, 1);
 801045e:	f107 0108 	add.w	r1, r7, #8
 8010462:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8010466:	2301      	movs	r3, #1
 8010468:	9300      	str	r3, [sp, #0]
 801046a:	2301      	movs	r3, #1
 801046c:	22ff      	movs	r2, #255	@ 0xff
 801046e:	f7fe fb75 	bl	800eb5c <mdns_add_question>
 8010472:	4603      	mov	r3, r0
 8010474:	f887 314e 	strb.w	r3, [r7, #334]	@ 0x14e
	if (res != ERR_OK) {
 8010478:	f997 314e 	ldrsb.w	r3, [r7, #334]	@ 0x14e
 801047c:	2b00      	cmp	r3, #0
 801047e:	f040 8088 	bne.w	8010592 <mdns_send_probe+0x196>

		goto cleanup;
	}
	pkt.questions++;
 8010482:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8010486:	3301      	adds	r3, #1
 8010488:	b29b      	uxth	r3, r3
 801048a:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
	for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 801048e:	2300      	movs	r3, #0
 8010490:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 8010494:	e032      	b.n	80104fc <mdns_send_probe+0x100>
		struct mdns_service *service = mdns->services[i];
 8010496:	f897 214f 	ldrb.w	r2, [r7, #335]	@ 0x14f
 801049a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801049e:	3210      	adds	r2, #16
 80104a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104a4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
		if (!service) {
 80104a8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d01f      	beq.n	80104f0 <mdns_send_probe+0xf4>
			continue;
		}
		mdns_build_service_domain(&domain, service, 1);
 80104b0:	f107 0308 	add.w	r3, r7, #8
 80104b4:	2201      	movs	r2, #1
 80104b6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80104ba:	4618      	mov	r0, r3
 80104bc:	f7fd ffa0 	bl	800e400 <mdns_build_service_domain>
		res = mdns_add_question(&pkt, &domain, DNS_RRTYPE_ANY, DNS_RRCLASS_IN,
 80104c0:	f107 0108 	add.w	r1, r7, #8
 80104c4:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 80104c8:	2301      	movs	r3, #1
 80104ca:	9300      	str	r3, [sp, #0]
 80104cc:	2301      	movs	r3, #1
 80104ce:	22ff      	movs	r2, #255	@ 0xff
 80104d0:	f7fe fb44 	bl	800eb5c <mdns_add_question>
 80104d4:	4603      	mov	r3, r0
 80104d6:	f887 314e 	strb.w	r3, [r7, #334]	@ 0x14e
				1);
		if (res != ERR_OK) {
 80104da:	f997 314e 	ldrsb.w	r3, [r7, #334]	@ 0x14e
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d159      	bne.n	8010596 <mdns_send_probe+0x19a>

			goto cleanup;
		}
		pkt.questions++;
 80104e2:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 80104e6:	3301      	adds	r3, #1
 80104e8:	b29b      	uxth	r3, r3
 80104ea:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
 80104ee:	e000      	b.n	80104f2 <mdns_send_probe+0xf6>
			continue;
 80104f0:	bf00      	nop
	for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 80104f2:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 80104f6:	3301      	adds	r3, #1
 80104f8:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 80104fc:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8010500:	2b00      	cmp	r3, #0
 8010502:	d0c8      	beq.n	8010496 <mdns_send_probe+0x9a>
	}

	/* Add answers to the questions above into the authority section for tiebreaking */
#if LWIP_IPV4
	if (!ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010504:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010508:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	3304      	adds	r3, #4
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d002      	beq.n	801051c <mdns_send_probe+0x120>
		pkt.host_replies = REPLY_HOST_A;
 8010516:	2301      	movs	r3, #1
 8010518:	f887 313d 	strb.w	r3, [r7, #317]	@ 0x13d
      pkt.host_replies |= REPLY_HOST_AAAA;
    }
  }
#endif

	for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 801051c:	2300      	movs	r3, #0
 801051e:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 8010522:	e019      	b.n	8010558 <mdns_send_probe+0x15c>
		struct mdns_service *serv = mdns->services[i];
 8010524:	f897 214f 	ldrb.w	r2, [r7, #335]	@ 0x14f
 8010528:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 801052c:	3210      	adds	r2, #16
 801052e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010532:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
		if (serv) {
 8010536:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801053a:	2b00      	cmp	r3, #0
 801053c:	d007      	beq.n	801054e <mdns_send_probe+0x152>
			pkt.serv_replies[i] = REPLY_SERVICE_SRV | REPLY_SERVICE_TXT;
 801053e:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8010542:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010546:	443b      	add	r3, r7
 8010548:	22c0      	movs	r2, #192	@ 0xc0
 801054a:	f803 2c11 	strb.w	r2, [r3, #-17]
	for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 801054e:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 8010552:	3301      	adds	r3, #1
 8010554:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 8010558:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 801055c:	2b00      	cmp	r3, #0
 801055e:	d0e1      	beq.n	8010524 <mdns_send_probe+0x128>
		}
	}

	pkt.tx_id = 0;
 8010560:	2300      	movs	r3, #0
 8010562:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
	pkt.dest_port = LWIP_IANA_PORT_MDNS;
 8010566:	f241 43e9 	movw	r3, #5353	@ 0x14e9
 801056a:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
	SMEMCPY(&pkt.dest_addr, destination, sizeof(pkt.dest_addr));
 801056e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8010572:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	res = mdns_send_outpacket(&pkt, 0);
 801057e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8010582:	2100      	movs	r1, #0
 8010584:	4618      	mov	r0, r3
 8010586:	f7fe ffdd 	bl	800f544 <mdns_send_outpacket>
 801058a:	4603      	mov	r3, r0
 801058c:	f887 314e 	strb.w	r3, [r7, #334]	@ 0x14e
 8010590:	e002      	b.n	8010598 <mdns_send_probe+0x19c>
		goto cleanup;
 8010592:	bf00      	nop
 8010594:	e000      	b.n	8010598 <mdns_send_probe+0x19c>
			goto cleanup;
 8010596:	bf00      	nop

	cleanup: if (pkt.pbuf) {
 8010598:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801059c:	2b00      	cmp	r3, #0
 801059e:	d007      	beq.n	80105b0 <mdns_send_probe+0x1b4>
		pbuf_free(pkt.pbuf);
 80105a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80105a4:	4618      	mov	r0, r3
 80105a6:	f001 fffb 	bl	80125a0 <pbuf_free>
		pkt.pbuf = NULL;
 80105aa:	2300      	movs	r3, #0
 80105ac:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	}

	return res;
 80105b0:	f997 314e 	ldrsb.w	r3, [r7, #334]	@ 0x14e
}
 80105b4:	4618      	mov	r0, r3
 80105b6:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}
 80105be:	bf00      	nop
 80105c0:	2000475c 	.word	0x2000475c

080105c4 <mdns_probe>:

/**
 * Timer callback for probing network.
 */
static void mdns_probe(void *arg) {
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b084      	sub	sp, #16
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
	struct netif *netif = (struct netif*) arg;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	60fb      	str	r3, [r7, #12]
	struct mdns_host *mdns = NETIF_TO_HOST(netif);
 80105d0:	4b1d      	ldr	r3, [pc, #116]	@ (8010648 <mdns_probe+0x84>)
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	68fa      	ldr	r2, [r7, #12]
 80105d6:	3308      	adds	r3, #8
 80105d8:	009b      	lsls	r3, r3, #2
 80105da:	4413      	add	r3, r2
 80105dc:	685b      	ldr	r3, [r3, #4]
 80105de:	60bb      	str	r3, [r7, #8]

	if (mdns->probes_sent >= MDNS_PROBE_COUNT) {
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80105e6:	2b02      	cmp	r3, #2
 80105e8:	d910      	bls.n	801060c <mdns_probe+0x48>
		/* probing successful, announce the new name */
		mdns->probing_state = MDNS_PROBING_COMPLETE;
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	2202      	movs	r2, #2
 80105ee:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
		mdns_resp_announce(netif);
 80105f2:	68f8      	ldr	r0, [r7, #12]
 80105f4:	f000 f9be 	bl	8010974 <mdns_resp_announce>
		if (mdns_name_result_cb != NULL) {
 80105f8:	4b14      	ldr	r3, [pc, #80]	@ (801064c <mdns_probe+0x88>)
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d01e      	beq.n	801063e <mdns_probe+0x7a>
			mdns_name_result_cb(netif, MDNS_PROBING_SUCCESSFUL);
 8010600:	4b12      	ldr	r3, [pc, #72]	@ (801064c <mdns_probe+0x88>)
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	2101      	movs	r1, #1
 8010606:	68f8      	ldr	r0, [r7, #12]
 8010608:	4798      	blx	r3
				mdns->probes_sent++;
			}
		}
		sys_timeout(MDNS_PROBE_DELAY_MS, mdns_probe, netif);
	}
}
 801060a:	e018      	b.n	801063e <mdns_probe+0x7a>
		if (!ip4_addr_isany_val(*netif_ip4_addr(netif))
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	3304      	adds	r3, #4
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d00e      	beq.n	8010634 <mdns_probe+0x70>
				&& mdns_send_probe(netif, IP4_ADDR_ANY) == ERR_OK)
 8010616:	490e      	ldr	r1, [pc, #56]	@ (8010650 <mdns_probe+0x8c>)
 8010618:	68f8      	ldr	r0, [r7, #12]
 801061a:	f7ff feef 	bl	80103fc <mdns_send_probe>
 801061e:	4603      	mov	r3, r0
 8010620:	2b00      	cmp	r3, #0
 8010622:	d107      	bne.n	8010634 <mdns_probe+0x70>
				mdns->probes_sent++;
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801062a:	3301      	adds	r3, #1
 801062c:	b2da      	uxtb	r2, r3
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
		sys_timeout(MDNS_PROBE_DELAY_MS, mdns_probe, netif);
 8010634:	68fa      	ldr	r2, [r7, #12]
 8010636:	4907      	ldr	r1, [pc, #28]	@ (8010654 <mdns_probe+0x90>)
 8010638:	20fa      	movs	r0, #250	@ 0xfa
 801063a:	f007 fe5b 	bl	80182f4 <sys_timeout>
}
 801063e:	bf00      	nop
 8010640:	3710      	adds	r7, #16
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}
 8010646:	bf00      	nop
 8010648:	2000475c 	.word	0x2000475c
 801064c:	20004764 	.word	0x20004764
 8010650:	080236a0 	.word	0x080236a0
 8010654:	080105c5 	.word	0x080105c5

08010658 <mdns_resp_add_netif>:
 *                 given pointer can be on the stack.
 * @param dns_ttl Validity time in seconds to send out for IP address data in DNS replies
 * @return ERR_OK if netif was added, an err_t otherwise
 */
err_t mdns_resp_add_netif(struct netif *netif, const char *hostname,
		u32_t dns_ttl) {
 8010658:	b590      	push	{r4, r7, lr}
 801065a:	b087      	sub	sp, #28
 801065c:	af00      	add	r7, sp, #0
 801065e:	60f8      	str	r0, [r7, #12]
 8010660:	60b9      	str	r1, [r7, #8]
 8010662:	607a      	str	r2, [r7, #4]
	err_t res;
	struct mdns_host *mdns;

	LWIP_ASSERT_CORE_LOCKED();
	LWIP_ERROR("mdns_resp_add_netif: netif != NULL", (netif != NULL),
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d109      	bne.n	801067e <mdns_resp_add_netif+0x26>
 801066a:	4b41      	ldr	r3, [pc, #260]	@ (8010770 <mdns_resp_add_netif+0x118>)
 801066c:	f640 022b 	movw	r2, #2091	@ 0x82b
 8010670:	4940      	ldr	r1, [pc, #256]	@ (8010774 <mdns_resp_add_netif+0x11c>)
 8010672:	4841      	ldr	r0, [pc, #260]	@ (8010778 <mdns_resp_add_netif+0x120>)
 8010674:	f00e f9b4 	bl	801e9e0 <iprintf>
 8010678:	f06f 0305 	mvn.w	r3, #5
 801067c:	e073      	b.n	8010766 <mdns_resp_add_netif+0x10e>
			return ERR_VAL);
	LWIP_ERROR("mdns_resp_add_netif: Hostname too long",
 801067e:	68b8      	ldr	r0, [r7, #8]
 8010680:	f7ef fdde 	bl	8000240 <strlen>
 8010684:	4603      	mov	r3, r0
 8010686:	2b3f      	cmp	r3, #63	@ 0x3f
 8010688:	d909      	bls.n	801069e <mdns_resp_add_netif+0x46>
 801068a:	4b39      	ldr	r3, [pc, #228]	@ (8010770 <mdns_resp_add_netif+0x118>)
 801068c:	f640 022d 	movw	r2, #2093	@ 0x82d
 8010690:	493a      	ldr	r1, [pc, #232]	@ (801077c <mdns_resp_add_netif+0x124>)
 8010692:	4839      	ldr	r0, [pc, #228]	@ (8010778 <mdns_resp_add_netif+0x120>)
 8010694:	f00e f9a4 	bl	801e9e0 <iprintf>
 8010698:	f06f 0305 	mvn.w	r3, #5
 801069c:	e063      	b.n	8010766 <mdns_resp_add_netif+0x10e>
			(strlen(hostname) <= MDNS_LABEL_MAXLEN), return ERR_VAL);

	LWIP_ASSERT("mdns_resp_add_netif: Double add",
 801069e:	4b38      	ldr	r3, [pc, #224]	@ (8010780 <mdns_resp_add_netif+0x128>)
 80106a0:	781b      	ldrb	r3, [r3, #0]
 80106a2:	68fa      	ldr	r2, [r7, #12]
 80106a4:	3308      	adds	r3, #8
 80106a6:	009b      	lsls	r3, r3, #2
 80106a8:	4413      	add	r3, r2
 80106aa:	685b      	ldr	r3, [r3, #4]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d006      	beq.n	80106be <mdns_resp_add_netif+0x66>
 80106b0:	4b2f      	ldr	r3, [pc, #188]	@ (8010770 <mdns_resp_add_netif+0x118>)
 80106b2:	f44f 6203 	mov.w	r2, #2096	@ 0x830
 80106b6:	4933      	ldr	r1, [pc, #204]	@ (8010784 <mdns_resp_add_netif+0x12c>)
 80106b8:	482f      	ldr	r0, [pc, #188]	@ (8010778 <mdns_resp_add_netif+0x120>)
 80106ba:	f00e f991 	bl	801e9e0 <iprintf>
			NETIF_TO_HOST(netif) == NULL);
	mdns = (struct mdns_host*) mem_calloc(1, sizeof(struct mdns_host));
 80106be:	214c      	movs	r1, #76	@ 0x4c
 80106c0:	2001      	movs	r0, #1
 80106c2:	f000 ff6f 	bl	80115a4 <mem_calloc>
 80106c6:	6178      	str	r0, [r7, #20]
	LWIP_ERROR("mdns_resp_add_netif: Alloc failed", (mdns != NULL),
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d109      	bne.n	80106e2 <mdns_resp_add_netif+0x8a>
 80106ce:	4b28      	ldr	r3, [pc, #160]	@ (8010770 <mdns_resp_add_netif+0x118>)
 80106d0:	f640 0233 	movw	r2, #2099	@ 0x833
 80106d4:	492c      	ldr	r1, [pc, #176]	@ (8010788 <mdns_resp_add_netif+0x130>)
 80106d6:	4828      	ldr	r0, [pc, #160]	@ (8010778 <mdns_resp_add_netif+0x120>)
 80106d8:	f00e f982 	bl	801e9e0 <iprintf>
 80106dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80106e0:	e041      	b.n	8010766 <mdns_resp_add_netif+0x10e>
			return ERR_MEM);

	netif_set_client_data(netif, mdns_netif_client_id, mdns);
 80106e2:	4b27      	ldr	r3, [pc, #156]	@ (8010780 <mdns_resp_add_netif+0x128>)
 80106e4:	781b      	ldrb	r3, [r3, #0]
 80106e6:	68fa      	ldr	r2, [r7, #12]
 80106e8:	3308      	adds	r3, #8
 80106ea:	009b      	lsls	r3, r3, #2
 80106ec:	4413      	add	r3, r2
 80106ee:	697a      	ldr	r2, [r7, #20]
 80106f0:	605a      	str	r2, [r3, #4]

	MEMCPY(&mdns->name, hostname,
 80106f2:	697c      	ldr	r4, [r7, #20]
 80106f4:	68b8      	ldr	r0, [r7, #8]
 80106f6:	f7ef fda3 	bl	8000240 <strlen>
 80106fa:	4603      	mov	r3, r0
 80106fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80106fe:	d804      	bhi.n	801070a <mdns_resp_add_netif+0xb2>
 8010700:	68b8      	ldr	r0, [r7, #8]
 8010702:	f7ef fd9d 	bl	8000240 <strlen>
 8010706:	4603      	mov	r3, r0
 8010708:	e000      	b.n	801070c <mdns_resp_add_netif+0xb4>
 801070a:	233f      	movs	r3, #63	@ 0x3f
 801070c:	461a      	mov	r2, r3
 801070e:	68b9      	ldr	r1, [r7, #8]
 8010710:	4620      	mov	r0, r4
 8010712:	f00e fc18 	bl	801ef46 <memcpy>
			LWIP_MIN(MDNS_LABEL_MAXLEN, strlen(hostname)));
	mdns->dns_ttl = dns_ttl;
 8010716:	697b      	ldr	r3, [r7, #20]
 8010718:	687a      	ldr	r2, [r7, #4]
 801071a:	645a      	str	r2, [r3, #68]	@ 0x44
	mdns->probes_sent = 0;
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	2200      	movs	r2, #0
 8010720:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	mdns->probing_state = MDNS_PROBING_NOT_STARTED;
 8010724:	697b      	ldr	r3, [r7, #20]
 8010726:	2200      	movs	r2, #0
 8010728:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

	/* Join multicast groups */
#if LWIP_IPV4
	res = igmp_joingroup_netif(netif, ip_2_ip4(&v4group));
 801072c:	4917      	ldr	r1, [pc, #92]	@ (801078c <mdns_resp_add_netif+0x134>)
 801072e:	68f8      	ldr	r0, [r7, #12]
 8010730:	f00b fc84 	bl	801c03c <igmp_joingroup_netif>
 8010734:	4603      	mov	r3, r0
 8010736:	74fb      	strb	r3, [r7, #19]
	if (res != ERR_OK) {
 8010738:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d104      	bne.n	801074a <mdns_resp_add_netif+0xf2>
  if (res != ERR_OK) {
    goto cleanup;
  }
#endif

	mdns_resp_restart(netif);
 8010740:	68f8      	ldr	r0, [r7, #12]
 8010742:	f000 f93d 	bl	80109c0 <mdns_resp_restart>

	return ERR_OK;
 8010746:	2300      	movs	r3, #0
 8010748:	e00d      	b.n	8010766 <mdns_resp_add_netif+0x10e>
		goto cleanup;
 801074a:	bf00      	nop

	cleanup: mem_free(mdns);
 801074c:	6978      	ldr	r0, [r7, #20]
 801074e:	f000 fc89 	bl	8011064 <mem_free>
	netif_set_client_data(netif, mdns_netif_client_id, NULL);
 8010752:	4b0b      	ldr	r3, [pc, #44]	@ (8010780 <mdns_resp_add_netif+0x128>)
 8010754:	781b      	ldrb	r3, [r3, #0]
 8010756:	68fa      	ldr	r2, [r7, #12]
 8010758:	3308      	adds	r3, #8
 801075a:	009b      	lsls	r3, r3, #2
 801075c:	4413      	add	r3, r2
 801075e:	2200      	movs	r2, #0
 8010760:	605a      	str	r2, [r3, #4]
	return res;
 8010762:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8010766:	4618      	mov	r0, r3
 8010768:	371c      	adds	r7, #28
 801076a:	46bd      	mov	sp, r7
 801076c:	bd90      	pop	{r4, r7, pc}
 801076e:	bf00      	nop
 8010770:	0801feac 	.word	0x0801feac
 8010774:	08020048 	.word	0x08020048
 8010778:	0801ff18 	.word	0x0801ff18
 801077c:	0802006c 	.word	0x0802006c
 8010780:	2000475c 	.word	0x2000475c
 8010784:	08020094 	.word	0x08020094
 8010788:	080200b4 	.word	0x080200b4
 801078c:	080235d4 	.word	0x080235d4

08010790 <mdns_resp_add_service>:
 * @param txt_data Userdata pointer for txt_fn
 * @return service_id if the service was added to the netif, an err_t otherwise
 */
s8_t mdns_resp_add_service(struct netif *netif, const char *name,
		const char *service, enum mdns_sd_proto proto, u16_t port,
		u32_t dns_ttl, service_get_txt_fn_t txt_fn, void *txt_data) {
 8010790:	b590      	push	{r4, r7, lr}
 8010792:	b089      	sub	sp, #36	@ 0x24
 8010794:	af00      	add	r7, sp, #0
 8010796:	60f8      	str	r0, [r7, #12]
 8010798:	60b9      	str	r1, [r7, #8]
 801079a:	607a      	str	r2, [r7, #4]
 801079c:	70fb      	strb	r3, [r7, #3]
	s8_t i;
	s8_t slot = -1;
 801079e:	23ff      	movs	r3, #255	@ 0xff
 80107a0:	77bb      	strb	r3, [r7, #30]
	struct mdns_service *srv;
	struct mdns_host *mdns;

	LWIP_ASSERT_CORE_LOCKED();
	LWIP_ASSERT("mdns_resp_add_service: netif != NULL", netif);
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d106      	bne.n	80107b6 <mdns_resp_add_service+0x26>
 80107a8:	4b68      	ldr	r3, [pc, #416]	@ (801094c <mdns_resp_add_service+0x1bc>)
 80107aa:	f640 02b5 	movw	r2, #2229	@ 0x8b5
 80107ae:	4968      	ldr	r1, [pc, #416]	@ (8010950 <mdns_resp_add_service+0x1c0>)
 80107b0:	4868      	ldr	r0, [pc, #416]	@ (8010954 <mdns_resp_add_service+0x1c4>)
 80107b2:	f00e f915 	bl	801e9e0 <iprintf>
	mdns = NETIF_TO_HOST(netif);
 80107b6:	4b68      	ldr	r3, [pc, #416]	@ (8010958 <mdns_resp_add_service+0x1c8>)
 80107b8:	781b      	ldrb	r3, [r3, #0]
 80107ba:	68fa      	ldr	r2, [r7, #12]
 80107bc:	3308      	adds	r3, #8
 80107be:	009b      	lsls	r3, r3, #2
 80107c0:	4413      	add	r3, r2
 80107c2:	685b      	ldr	r3, [r3, #4]
 80107c4:	61bb      	str	r3, [r7, #24]
	LWIP_ERROR("mdns_resp_add_service: Not an mdns netif", (mdns != NULL),
 80107c6:	69bb      	ldr	r3, [r7, #24]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d109      	bne.n	80107e0 <mdns_resp_add_service+0x50>
 80107cc:	4b5f      	ldr	r3, [pc, #380]	@ (801094c <mdns_resp_add_service+0x1bc>)
 80107ce:	f640 02b7 	movw	r2, #2231	@ 0x8b7
 80107d2:	4962      	ldr	r1, [pc, #392]	@ (801095c <mdns_resp_add_service+0x1cc>)
 80107d4:	485f      	ldr	r0, [pc, #380]	@ (8010954 <mdns_resp_add_service+0x1c4>)
 80107d6:	f00e f903 	bl	801e9e0 <iprintf>
 80107da:	f06f 0305 	mvn.w	r3, #5
 80107de:	e0b1      	b.n	8010944 <mdns_resp_add_service+0x1b4>
			return ERR_VAL);

	LWIP_ERROR("mdns_resp_add_service: Name too long",
 80107e0:	68b8      	ldr	r0, [r7, #8]
 80107e2:	f7ef fd2d 	bl	8000240 <strlen>
 80107e6:	4603      	mov	r3, r0
 80107e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80107ea:	d909      	bls.n	8010800 <mdns_resp_add_service+0x70>
 80107ec:	4b57      	ldr	r3, [pc, #348]	@ (801094c <mdns_resp_add_service+0x1bc>)
 80107ee:	f640 02ba 	movw	r2, #2234	@ 0x8ba
 80107f2:	495b      	ldr	r1, [pc, #364]	@ (8010960 <mdns_resp_add_service+0x1d0>)
 80107f4:	4857      	ldr	r0, [pc, #348]	@ (8010954 <mdns_resp_add_service+0x1c4>)
 80107f6:	f00e f8f3 	bl	801e9e0 <iprintf>
 80107fa:	f06f 0305 	mvn.w	r3, #5
 80107fe:	e0a1      	b.n	8010944 <mdns_resp_add_service+0x1b4>
			(strlen(name) <= MDNS_LABEL_MAXLEN), return ERR_VAL);
	LWIP_ERROR("mdns_resp_add_service: Service too long",
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f7ef fd1d 	bl	8000240 <strlen>
 8010806:	4603      	mov	r3, r0
 8010808:	2b3f      	cmp	r3, #63	@ 0x3f
 801080a:	d909      	bls.n	8010820 <mdns_resp_add_service+0x90>
 801080c:	4b4f      	ldr	r3, [pc, #316]	@ (801094c <mdns_resp_add_service+0x1bc>)
 801080e:	f640 02bc 	movw	r2, #2236	@ 0x8bc
 8010812:	4954      	ldr	r1, [pc, #336]	@ (8010964 <mdns_resp_add_service+0x1d4>)
 8010814:	484f      	ldr	r0, [pc, #316]	@ (8010954 <mdns_resp_add_service+0x1c4>)
 8010816:	f00e f8e3 	bl	801e9e0 <iprintf>
 801081a:	f06f 0305 	mvn.w	r3, #5
 801081e:	e091      	b.n	8010944 <mdns_resp_add_service+0x1b4>
			(strlen(service) <= MDNS_LABEL_MAXLEN), return ERR_VAL);
	LWIP_ERROR("mdns_resp_add_service: Bad proto (need TCP or UDP)",
 8010820:	78fb      	ldrb	r3, [r7, #3]
 8010822:	2b01      	cmp	r3, #1
 8010824:	d00c      	beq.n	8010840 <mdns_resp_add_service+0xb0>
 8010826:	78fb      	ldrb	r3, [r7, #3]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d009      	beq.n	8010840 <mdns_resp_add_service+0xb0>
 801082c:	4b47      	ldr	r3, [pc, #284]	@ (801094c <mdns_resp_add_service+0x1bc>)
 801082e:	f640 02be 	movw	r2, #2238	@ 0x8be
 8010832:	494d      	ldr	r1, [pc, #308]	@ (8010968 <mdns_resp_add_service+0x1d8>)
 8010834:	4847      	ldr	r0, [pc, #284]	@ (8010954 <mdns_resp_add_service+0x1c4>)
 8010836:	f00e f8d3 	bl	801e9e0 <iprintf>
 801083a:	f06f 0305 	mvn.w	r3, #5
 801083e:	e081      	b.n	8010944 <mdns_resp_add_service+0x1b4>
			(proto == DNSSD_PROTO_TCP || proto == DNSSD_PROTO_UDP),
			return ERR_VAL);

	for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 8010840:	2300      	movs	r3, #0
 8010842:	77fb      	strb	r3, [r7, #31]
 8010844:	e010      	b.n	8010868 <mdns_resp_add_service+0xd8>
		if (mdns->services[i] == NULL) {
 8010846:	f997 201f 	ldrsb.w	r2, [r7, #31]
 801084a:	69bb      	ldr	r3, [r7, #24]
 801084c:	3210      	adds	r2, #16
 801084e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d102      	bne.n	801085c <mdns_resp_add_service+0xcc>
			slot = i;
 8010856:	7ffb      	ldrb	r3, [r7, #31]
 8010858:	77bb      	strb	r3, [r7, #30]
			break;
 801085a:	e009      	b.n	8010870 <mdns_resp_add_service+0xe0>
	for (i = 0; i < MDNS_MAX_SERVICES; i++) {
 801085c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010860:	b2db      	uxtb	r3, r3
 8010862:	3301      	adds	r3, #1
 8010864:	b2db      	uxtb	r3, r3
 8010866:	77fb      	strb	r3, [r7, #31]
 8010868:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801086c:	2b00      	cmp	r3, #0
 801086e:	ddea      	ble.n	8010846 <mdns_resp_add_service+0xb6>
		}
	}
	LWIP_ERROR(
 8010870:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8010874:	2b00      	cmp	r3, #0
 8010876:	da09      	bge.n	801088c <mdns_resp_add_service+0xfc>
 8010878:	4b34      	ldr	r3, [pc, #208]	@ (801094c <mdns_resp_add_service+0x1bc>)
 801087a:	f640 02c8 	movw	r2, #2248	@ 0x8c8
 801087e:	493b      	ldr	r1, [pc, #236]	@ (801096c <mdns_resp_add_service+0x1dc>)
 8010880:	4834      	ldr	r0, [pc, #208]	@ (8010954 <mdns_resp_add_service+0x1c4>)
 8010882:	f00e f8ad 	bl	801e9e0 <iprintf>
 8010886:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801088a:	e05b      	b.n	8010944 <mdns_resp_add_service+0x1b4>
			"mdns_resp_add_service: Service list full (increase MDNS_MAX_SERVICES)",
			(slot >= 0), return ERR_MEM);

	srv = (struct mdns_service*) mem_calloc(1, sizeof(struct mdns_service));
 801088c:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8010890:	2001      	movs	r0, #1
 8010892:	f000 fe87 	bl	80115a4 <mem_calloc>
 8010896:	6178      	str	r0, [r7, #20]
	LWIP_ERROR("mdns_resp_add_service: Alloc failed", (srv != NULL),
 8010898:	697b      	ldr	r3, [r7, #20]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d109      	bne.n	80108b2 <mdns_resp_add_service+0x122>
 801089e:	4b2b      	ldr	r3, [pc, #172]	@ (801094c <mdns_resp_add_service+0x1bc>)
 80108a0:	f640 02cd 	movw	r2, #2253	@ 0x8cd
 80108a4:	4932      	ldr	r1, [pc, #200]	@ (8010970 <mdns_resp_add_service+0x1e0>)
 80108a6:	482b      	ldr	r0, [pc, #172]	@ (8010954 <mdns_resp_add_service+0x1c4>)
 80108a8:	f00e f89a 	bl	801e9e0 <iprintf>
 80108ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80108b0:	e048      	b.n	8010944 <mdns_resp_add_service+0x1b4>
			return ERR_MEM);

	MEMCPY(&srv->name, name, LWIP_MIN(MDNS_LABEL_MAXLEN, strlen(name)));
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	f503 7482 	add.w	r4, r3, #260	@ 0x104
 80108b8:	68b8      	ldr	r0, [r7, #8]
 80108ba:	f7ef fcc1 	bl	8000240 <strlen>
 80108be:	4603      	mov	r3, r0
 80108c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80108c2:	d804      	bhi.n	80108ce <mdns_resp_add_service+0x13e>
 80108c4:	68b8      	ldr	r0, [r7, #8]
 80108c6:	f7ef fcbb 	bl	8000240 <strlen>
 80108ca:	4603      	mov	r3, r0
 80108cc:	e000      	b.n	80108d0 <mdns_resp_add_service+0x140>
 80108ce:	233f      	movs	r3, #63	@ 0x3f
 80108d0:	461a      	mov	r2, r3
 80108d2:	68b9      	ldr	r1, [r7, #8]
 80108d4:	4620      	mov	r0, r4
 80108d6:	f00e fb36 	bl	801ef46 <memcpy>
	MEMCPY(&srv->service, service,
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	f503 74a2 	add.w	r4, r3, #324	@ 0x144
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f7ef fcad 	bl	8000240 <strlen>
 80108e6:	4603      	mov	r3, r0
 80108e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80108ea:	d804      	bhi.n	80108f6 <mdns_resp_add_service+0x166>
 80108ec:	6878      	ldr	r0, [r7, #4]
 80108ee:	f7ef fca7 	bl	8000240 <strlen>
 80108f2:	4603      	mov	r3, r0
 80108f4:	e000      	b.n	80108f8 <mdns_resp_add_service+0x168>
 80108f6:	233f      	movs	r3, #63	@ 0x3f
 80108f8:	461a      	mov	r2, r3
 80108fa:	6879      	ldr	r1, [r7, #4]
 80108fc:	4620      	mov	r0, r4
 80108fe:	f00e fb22 	bl	801ef46 <memcpy>
			LWIP_MIN(MDNS_LABEL_MAXLEN, strlen(service)));
	srv->txt_fn = txt_fn;
 8010902:	697b      	ldr	r3, [r7, #20]
 8010904:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010906:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
	srv->txt_userdata = txt_data;
 801090a:	697b      	ldr	r3, [r7, #20]
 801090c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801090e:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
	srv->proto = (u16_t) proto;
 8010912:	78fb      	ldrb	r3, [r7, #3]
 8010914:	b29a      	uxth	r2, r3
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190
	srv->port = port;
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8010920:	f8a3 2192 	strh.w	r2, [r3, #402]	@ 0x192
	srv->dns_ttl = dns_ttl;
 8010924:	697b      	ldr	r3, [r7, #20]
 8010926:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010928:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c

	mdns->services[slot] = srv;
 801092c:	f997 201e 	ldrsb.w	r2, [r7, #30]
 8010930:	69bb      	ldr	r3, [r7, #24]
 8010932:	3210      	adds	r2, #16
 8010934:	6979      	ldr	r1, [r7, #20]
 8010936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	mdns_resp_restart(netif);
 801093a:	68f8      	ldr	r0, [r7, #12]
 801093c:	f000 f840 	bl	80109c0 <mdns_resp_restart>

	return slot;
 8010940:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 8010944:	4618      	mov	r0, r3
 8010946:	3724      	adds	r7, #36	@ 0x24
 8010948:	46bd      	mov	sp, r7
 801094a:	bd90      	pop	{r4, r7, pc}
 801094c:	0801feac 	.word	0x0801feac
 8010950:	080201ac 	.word	0x080201ac
 8010954:	0801ff18 	.word	0x0801ff18
 8010958:	2000475c 	.word	0x2000475c
 801095c:	080201d4 	.word	0x080201d4
 8010960:	08020200 	.word	0x08020200
 8010964:	08020228 	.word	0x08020228
 8010968:	08020250 	.word	0x08020250
 801096c:	08020284 	.word	0x08020284
 8010970:	080202cc 	.word	0x080202cc

08010974 <mdns_resp_announce>:
/**
 * @ingroup mdns
 * Send unsolicited answer containing all our known data
 * @param netif The network interface to send on
 */
void mdns_resp_announce(struct netif *netif) {
 8010974:	b580      	push	{r7, lr}
 8010976:	b084      	sub	sp, #16
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
	struct mdns_host *mdns;

	LWIP_ASSERT_CORE_LOCKED();

	mdns = NETIF_TO_HOST(netif);
 801097c:	4b0e      	ldr	r3, [pc, #56]	@ (80109b8 <mdns_resp_announce+0x44>)
 801097e:	781b      	ldrb	r3, [r3, #0]
 8010980:	687a      	ldr	r2, [r7, #4]
 8010982:	3308      	adds	r3, #8
 8010984:	009b      	lsls	r3, r3, #2
 8010986:	4413      	add	r3, r2
 8010988:	685b      	ldr	r3, [r3, #4]
 801098a:	60fb      	str	r3, [r7, #12]
	if (mdns == NULL) {
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d00e      	beq.n	80109b0 <mdns_resp_announce+0x3c>

		return;
	}

	if (mdns->probing_state == MDNS_PROBING_COMPLETE) {
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8010998:	2b02      	cmp	r3, #2
 801099a:	d10a      	bne.n	80109b2 <mdns_resp_announce+0x3e>
		/* Announce on IPv6 and IPv4 */
#if LWIP_IPV6
    mdns_announce(netif, IP6_ADDR_ANY);
#endif
#if LWIP_IPV4
		if (!ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	3304      	adds	r3, #4
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d005      	beq.n	80109b2 <mdns_resp_announce+0x3e>
			mdns_announce(netif, IP4_ADDR_ANY);
 80109a6:	4905      	ldr	r1, [pc, #20]	@ (80109bc <mdns_resp_announce+0x48>)
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f7fe ffcd 	bl	800f948 <mdns_announce>
 80109ae:	e000      	b.n	80109b2 <mdns_resp_announce+0x3e>
		return;
 80109b0:	bf00      	nop
		}
#endif
	} /* else: ip address changed while probing was ongoing? @todo reset counter to restart? */
}
 80109b2:	3710      	adds	r7, #16
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}
 80109b8:	2000475c 	.word	0x2000475c
 80109bc:	080236a0 	.word	0x080236a0

080109c0 <mdns_resp_restart>:
 * @ingroup mdns
 * Restart mdns responder. Call this when cable is connected after being disconnected or
 * administrative interface is set up after being down
 * @param netif The network interface to send on
 */
void mdns_resp_restart(struct netif *netif) {
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b084      	sub	sp, #16
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
	struct mdns_host *mdns;
	LWIP_ASSERT_CORE_LOCKED();
	LWIP_ERROR("mdns_resp_restart: netif != NULL", (netif != NULL), return);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d107      	bne.n	80109de <mdns_resp_restart+0x1e>
 80109ce:	4b1d      	ldr	r3, [pc, #116]	@ (8010a44 <mdns_resp_restart+0x84>)
 80109d0:	f640 125b 	movw	r2, #2395	@ 0x95b
 80109d4:	491c      	ldr	r1, [pc, #112]	@ (8010a48 <mdns_resp_restart+0x88>)
 80109d6:	481d      	ldr	r0, [pc, #116]	@ (8010a4c <mdns_resp_restart+0x8c>)
 80109d8:	f00e f802 	bl	801e9e0 <iprintf>
 80109dc:	e02e      	b.n	8010a3c <mdns_resp_restart+0x7c>

	mdns = NETIF_TO_HOST(netif);
 80109de:	4b1c      	ldr	r3, [pc, #112]	@ (8010a50 <mdns_resp_restart+0x90>)
 80109e0:	781b      	ldrb	r3, [r3, #0]
 80109e2:	687a      	ldr	r2, [r7, #4]
 80109e4:	3308      	adds	r3, #8
 80109e6:	009b      	lsls	r3, r3, #2
 80109e8:	4413      	add	r3, r2
 80109ea:	685b      	ldr	r3, [r3, #4]
 80109ec:	60fb      	str	r3, [r7, #12]
	if (mdns == NULL) {
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d022      	beq.n	8010a3a <mdns_resp_restart+0x7a>
		return;
	}

	if (mdns->probing_state == MDNS_PROBING_ONGOING) {
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80109fa:	2b01      	cmp	r3, #1
 80109fc:	d103      	bne.n	8010a06 <mdns_resp_restart+0x46>
		sys_untimeout(mdns_probe, netif);
 80109fe:	6879      	ldr	r1, [r7, #4]
 8010a00:	4814      	ldr	r0, [pc, #80]	@ (8010a54 <mdns_resp_restart+0x94>)
 8010a02:	f007 fc9d 	bl	8018340 <sys_untimeout>
	}
	/* @todo if we've failed 15 times within a 10 second period we MUST wait 5 seconds (or wait 5 seconds every time except first)*/
	mdns->probes_sent = 0;
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	2200      	movs	r2, #0
 8010a0a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
	mdns->probing_state = MDNS_PROBING_ONGOING;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	2201      	movs	r2, #1
 8010a12:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
	sys_timeout(MDNS_INITIAL_PROBE_DELAY_MS, mdns_probe, netif);
 8010a16:	f00d fee3 	bl	801e7e0 <rand>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8010a58 <mdns_resp_restart+0x98>)
 8010a20:	fba3 1302 	umull	r1, r3, r3, r2
 8010a24:	091b      	lsrs	r3, r3, #4
 8010a26:	21fa      	movs	r1, #250	@ 0xfa
 8010a28:	fb01 f303 	mul.w	r3, r1, r3
 8010a2c:	1ad3      	subs	r3, r2, r3
 8010a2e:	687a      	ldr	r2, [r7, #4]
 8010a30:	4908      	ldr	r1, [pc, #32]	@ (8010a54 <mdns_resp_restart+0x94>)
 8010a32:	4618      	mov	r0, r3
 8010a34:	f007 fc5e 	bl	80182f4 <sys_timeout>
 8010a38:	e000      	b.n	8010a3c <mdns_resp_restart+0x7c>
		return;
 8010a3a:	bf00      	nop
}
 8010a3c:	3710      	adds	r7, #16
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}
 8010a42:	bf00      	nop
 8010a44:	0801feac 	.word	0x0801feac
 8010a48:	0802044c 	.word	0x0802044c
 8010a4c:	0801ff18 	.word	0x0801ff18
 8010a50:	2000475c 	.word	0x2000475c
 8010a54:	080105c5 	.word	0x080105c5
 8010a58:	10624dd3 	.word	0x10624dd3

08010a5c <mdns_resp_init>:

/**
 * @ingroup mdns
 * Initiate MDNS responder. Will open UDP sockets on port 5353
 */
void mdns_resp_init(void) {
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b082      	sub	sp, #8
 8010a60:	af00      	add	r7, sp, #0
	err_t res;

	/* LWIP_ASSERT_CORE_LOCKED(); is checked by udp_new() */

	mdns_pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8010a62:	202e      	movs	r0, #46	@ 0x2e
 8010a64:	f008 f9c2 	bl	8018dec <udp_new_ip_type>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8010ad8 <mdns_resp_init+0x7c>)
 8010a6c:	6013      	str	r3, [r2, #0]
	LWIP_ASSERT("Failed to allocate pcb", mdns_pcb != NULL);
 8010a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8010ad8 <mdns_resp_init+0x7c>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d106      	bne.n	8010a84 <mdns_resp_init+0x28>
 8010a76:	4b19      	ldr	r3, [pc, #100]	@ (8010adc <mdns_resp_init+0x80>)
 8010a78:	f640 1275 	movw	r2, #2421	@ 0x975
 8010a7c:	4918      	ldr	r1, [pc, #96]	@ (8010ae0 <mdns_resp_init+0x84>)
 8010a7e:	4819      	ldr	r0, [pc, #100]	@ (8010ae4 <mdns_resp_init+0x88>)
 8010a80:	f00d ffae 	bl	801e9e0 <iprintf>
#if LWIP_MULTICAST_TX_OPTIONS
	udp_set_multicast_ttl(mdns_pcb, MDNS_TTL);
 8010a84:	4b14      	ldr	r3, [pc, #80]	@ (8010ad8 <mdns_resp_init+0x7c>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	22ff      	movs	r2, #255	@ 0xff
 8010a8a:	775a      	strb	r2, [r3, #29]
#else
  mdns_pcb->ttl = MDNS_TTL;
#endif
	res = udp_bind(mdns_pcb, IP_ANY_TYPE, LWIP_IANA_PORT_MDNS);
 8010a8c:	4b12      	ldr	r3, [pc, #72]	@ (8010ad8 <mdns_resp_init+0x7c>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	f241 42e9 	movw	r2, #5353	@ 0x14e9
 8010a94:	4914      	ldr	r1, [pc, #80]	@ (8010ae8 <mdns_resp_init+0x8c>)
 8010a96:	4618      	mov	r0, r3
 8010a98:	f008 f836 	bl	8018b08 <udp_bind>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	71fb      	strb	r3, [r7, #7]
	LWIP_UNUSED_ARG(res); /* in case of LWIP_NOASSERT */
	LWIP_ASSERT("Failed to bind pcb", res == ERR_OK);
 8010aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d006      	beq.n	8010ab6 <mdns_resp_init+0x5a>
 8010aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8010adc <mdns_resp_init+0x80>)
 8010aaa:	f640 127d 	movw	r2, #2429	@ 0x97d
 8010aae:	490f      	ldr	r1, [pc, #60]	@ (8010aec <mdns_resp_init+0x90>)
 8010ab0:	480c      	ldr	r0, [pc, #48]	@ (8010ae4 <mdns_resp_init+0x88>)
 8010ab2:	f00d ff95 	bl	801e9e0 <iprintf>
	udp_recv(mdns_pcb, mdns_recv, NULL);
 8010ab6:	4b08      	ldr	r3, [pc, #32]	@ (8010ad8 <mdns_resp_init+0x7c>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	2200      	movs	r2, #0
 8010abc:	490c      	ldr	r1, [pc, #48]	@ (8010af0 <mdns_resp_init+0x94>)
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f008 f918 	bl	8018cf4 <udp_recv>

	mdns_netif_client_id = netif_alloc_client_data_id();
 8010ac4:	f001 f9aa 	bl	8011e1c <netif_alloc_client_data_id>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	461a      	mov	r2, r3
 8010acc:	4b09      	ldr	r3, [pc, #36]	@ (8010af4 <mdns_resp_init+0x98>)
 8010ace:	701a      	strb	r2, [r3, #0]

#if MDNS_RESP_USENETIF_EXTCALLBACK
  /* register for netif events when started on first netif */
  netif_add_ext_callback(&netif_callback, mdns_netif_ext_status_callback);
#endif
}
 8010ad0:	bf00      	nop
 8010ad2:	3708      	adds	r7, #8
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd80      	pop	{r7, pc}
 8010ad8:	20004760 	.word	0x20004760
 8010adc:	0801feac 	.word	0x0801feac
 8010ae0:	08020470 	.word	0x08020470
 8010ae4:	0801ff18 	.word	0x0801ff18
 8010ae8:	080236a0 	.word	0x080236a0
 8010aec:	08020488 	.word	0x08020488
 8010af0:	080102e5 	.word	0x080102e5
 8010af4:	2000475c 	.word	0x2000475c

08010af8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8010af8:	b480      	push	{r7}
 8010afa:	b083      	sub	sp, #12
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	4603      	mov	r3, r0
 8010b00:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8010b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010b06:	021b      	lsls	r3, r3, #8
 8010b08:	b21a      	sxth	r2, r3
 8010b0a:	88fb      	ldrh	r3, [r7, #6]
 8010b0c:	0a1b      	lsrs	r3, r3, #8
 8010b0e:	b29b      	uxth	r3, r3
 8010b10:	b21b      	sxth	r3, r3
 8010b12:	4313      	orrs	r3, r2
 8010b14:	b21b      	sxth	r3, r3
 8010b16:	b29b      	uxth	r3, r3
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	370c      	adds	r7, #12
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b22:	4770      	bx	lr

08010b24 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8010b24:	b480      	push	{r7}
 8010b26:	b083      	sub	sp, #12
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	061a      	lsls	r2, r3, #24
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	021b      	lsls	r3, r3, #8
 8010b34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010b38:	431a      	orrs	r2, r3
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	0a1b      	lsrs	r3, r3, #8
 8010b3e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010b42:	431a      	orrs	r2, r3
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	0e1b      	lsrs	r3, r3, #24
 8010b48:	4313      	orrs	r3, r2
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	370c      	adds	r7, #12
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b54:	4770      	bx	lr

08010b56 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 8010b56:	b480      	push	{r7}
 8010b58:	b087      	sub	sp, #28
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	60f8      	str	r0, [r7, #12]
 8010b5e:	60b9      	str	r1, [r7, #8]
 8010b60:	607a      	str	r2, [r7, #4]
  char c1, c2;

  do {
    c1 = *str1++;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	1c5a      	adds	r2, r3, #1
 8010b66:	60fa      	str	r2, [r7, #12]
 8010b68:	781b      	ldrb	r3, [r3, #0]
 8010b6a:	75fb      	strb	r3, [r7, #23]
    c2 = *str2++;
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	1c5a      	adds	r2, r3, #1
 8010b70:	60ba      	str	r2, [r7, #8]
 8010b72:	781b      	ldrb	r3, [r3, #0]
 8010b74:	75bb      	strb	r3, [r7, #22]
    if (c1 != c2) {
 8010b76:	7dfa      	ldrb	r2, [r7, #23]
 8010b78:	7dbb      	ldrb	r3, [r7, #22]
 8010b7a:	429a      	cmp	r2, r3
 8010b7c:	d016      	beq.n	8010bac <lwip_strnicmp+0x56>
      char c1_upc = c1 | 0x20;
 8010b7e:	7dfb      	ldrb	r3, [r7, #23]
 8010b80:	f043 0320 	orr.w	r3, r3, #32
 8010b84:	757b      	strb	r3, [r7, #21]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8010b86:	7d7b      	ldrb	r3, [r7, #21]
 8010b88:	2b60      	cmp	r3, #96	@ 0x60
 8010b8a:	d90c      	bls.n	8010ba6 <lwip_strnicmp+0x50>
 8010b8c:	7d7b      	ldrb	r3, [r7, #21]
 8010b8e:	2b7a      	cmp	r3, #122	@ 0x7a
 8010b90:	d809      	bhi.n	8010ba6 <lwip_strnicmp+0x50>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8010b92:	7dbb      	ldrb	r3, [r7, #22]
 8010b94:	f043 0320 	orr.w	r3, r3, #32
 8010b98:	753b      	strb	r3, [r7, #20]
        if (c1_upc != c2_upc) {
 8010b9a:	7d7a      	ldrb	r2, [r7, #21]
 8010b9c:	7d3b      	ldrb	r3, [r7, #20]
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	d003      	beq.n	8010baa <lwip_strnicmp+0x54>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8010ba2:	2301      	movs	r3, #1
 8010ba4:	e00c      	b.n	8010bc0 <lwip_strnicmp+0x6a>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8010ba6:	2301      	movs	r3, #1
 8010ba8:	e00a      	b.n	8010bc0 <lwip_strnicmp+0x6a>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8010baa:	bf00      	nop
      }
    }
    len--;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	3b01      	subs	r3, #1
 8010bb0:	607b      	str	r3, [r7, #4]
  } while ((len != 0) && (c1 != 0));
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d002      	beq.n	8010bbe <lwip_strnicmp+0x68>
 8010bb8:	7dfb      	ldrb	r3, [r7, #23]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d1d1      	bne.n	8010b62 <lwip_strnicmp+0xc>
  return 0;
 8010bbe:	2300      	movs	r3, #0
}
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	371c      	adds	r7, #28
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bca:	4770      	bx	lr

08010bcc <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char *result, size_t bufsize, int number)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b088      	sub	sp, #32
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	60f8      	str	r0, [r7, #12]
 8010bd4:	60b9      	str	r1, [r7, #8]
 8010bd6:	607a      	str	r2, [r7, #4]
  char *res = result;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	61fb      	str	r3, [r7, #28]
  char *tmp = result + bufsize - 1;
 8010bdc:	68bb      	ldr	r3, [r7, #8]
 8010bde:	3b01      	subs	r3, #1
 8010be0:	68fa      	ldr	r2, [r7, #12]
 8010be2:	4413      	add	r3, r2
 8010be4:	61bb      	str	r3, [r7, #24]
  int n = (number >= 0) ? number : -number;
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	bfb8      	it	lt
 8010bec:	425b      	neglt	r3, r3
 8010bee:	617b      	str	r3, [r7, #20]

  /* handle invalid bufsize */
  if (bufsize < 2) {
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	2b01      	cmp	r3, #1
 8010bf4:	d806      	bhi.n	8010c04 <lwip_itoa+0x38>
    if (bufsize == 1) {
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	2b01      	cmp	r3, #1
 8010bfa:	d154      	bne.n	8010ca6 <lwip_itoa+0xda>
      *result = 0;
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	701a      	strb	r2, [r3, #0]
    }
    return;
 8010c02:	e050      	b.n	8010ca6 <lwip_itoa+0xda>
  }

  /* First, add sign */
  if (number < 0) {
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	da04      	bge.n	8010c14 <lwip_itoa+0x48>
    *res++ = '-';
 8010c0a:	69fb      	ldr	r3, [r7, #28]
 8010c0c:	1c5a      	adds	r2, r3, #1
 8010c0e:	61fa      	str	r2, [r7, #28]
 8010c10:	222d      	movs	r2, #45	@ 0x2d
 8010c12:	701a      	strb	r2, [r3, #0]
  }
  /* Then create the string from the end and stop if buffer full,
     and ensure output string is zero terminated */
  *tmp = 0;
 8010c14:	69bb      	ldr	r3, [r7, #24]
 8010c16:	2200      	movs	r2, #0
 8010c18:	701a      	strb	r2, [r3, #0]
  while ((n != 0) && (tmp > res)) {
 8010c1a:	e01c      	b.n	8010c56 <lwip_itoa+0x8a>
    char val = (char)('0' + (n % 10));
 8010c1c:	697a      	ldr	r2, [r7, #20]
 8010c1e:	4b24      	ldr	r3, [pc, #144]	@ (8010cb0 <lwip_itoa+0xe4>)
 8010c20:	fb83 1302 	smull	r1, r3, r3, r2
 8010c24:	1099      	asrs	r1, r3, #2
 8010c26:	17d3      	asrs	r3, r2, #31
 8010c28:	1ac9      	subs	r1, r1, r3
 8010c2a:	460b      	mov	r3, r1
 8010c2c:	009b      	lsls	r3, r3, #2
 8010c2e:	440b      	add	r3, r1
 8010c30:	005b      	lsls	r3, r3, #1
 8010c32:	1ad1      	subs	r1, r2, r3
 8010c34:	b2cb      	uxtb	r3, r1
 8010c36:	3330      	adds	r3, #48	@ 0x30
 8010c38:	74fb      	strb	r3, [r7, #19]
    tmp--;
 8010c3a:	69bb      	ldr	r3, [r7, #24]
 8010c3c:	3b01      	subs	r3, #1
 8010c3e:	61bb      	str	r3, [r7, #24]
    *tmp = val;
 8010c40:	69bb      	ldr	r3, [r7, #24]
 8010c42:	7cfa      	ldrb	r2, [r7, #19]
 8010c44:	701a      	strb	r2, [r3, #0]
    n = n / 10;
 8010c46:	697b      	ldr	r3, [r7, #20]
 8010c48:	4a19      	ldr	r2, [pc, #100]	@ (8010cb0 <lwip_itoa+0xe4>)
 8010c4a:	fb82 1203 	smull	r1, r2, r2, r3
 8010c4e:	1092      	asrs	r2, r2, #2
 8010c50:	17db      	asrs	r3, r3, #31
 8010c52:	1ad3      	subs	r3, r2, r3
 8010c54:	617b      	str	r3, [r7, #20]
  while ((n != 0) && (tmp > res)) {
 8010c56:	697b      	ldr	r3, [r7, #20]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d003      	beq.n	8010c64 <lwip_itoa+0x98>
 8010c5c:	69ba      	ldr	r2, [r7, #24]
 8010c5e:	69fb      	ldr	r3, [r7, #28]
 8010c60:	429a      	cmp	r2, r3
 8010c62:	d8db      	bhi.n	8010c1c <lwip_itoa+0x50>
  }
  if (n) {
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d003      	beq.n	8010c72 <lwip_itoa+0xa6>
    /* buffer is too small */
    *result = 0;
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	701a      	strb	r2, [r3, #0]
    return;
 8010c70:	e01a      	b.n	8010ca8 <lwip_itoa+0xdc>
  }
  if (*tmp == 0) {
 8010c72:	69bb      	ldr	r3, [r7, #24]
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d10a      	bne.n	8010c90 <lwip_itoa+0xc4>
    /* Nothing added? */
    *res++ = '0';
 8010c7a:	69fb      	ldr	r3, [r7, #28]
 8010c7c:	1c5a      	adds	r2, r3, #1
 8010c7e:	61fa      	str	r2, [r7, #28]
 8010c80:	2230      	movs	r2, #48	@ 0x30
 8010c82:	701a      	strb	r2, [r3, #0]
    *res++ = 0;
 8010c84:	69fb      	ldr	r3, [r7, #28]
 8010c86:	1c5a      	adds	r2, r3, #1
 8010c88:	61fa      	str	r2, [r7, #28]
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	701a      	strb	r2, [r3, #0]
    return;
 8010c8e:	e00b      	b.n	8010ca8 <lwip_itoa+0xdc>
  }
  /* move from temporary buffer to output buffer (sign is not moved) */
  memmove(res, tmp, (size_t)((result + bufsize) - tmp));
 8010c90:	68fa      	ldr	r2, [r7, #12]
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	441a      	add	r2, r3
 8010c96:	69bb      	ldr	r3, [r7, #24]
 8010c98:	1ad3      	subs	r3, r2, r3
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	69b9      	ldr	r1, [r7, #24]
 8010c9e:	69f8      	ldr	r0, [r7, #28]
 8010ca0:	f00e f854 	bl	801ed4c <memmove>
 8010ca4:	e000      	b.n	8010ca8 <lwip_itoa+0xdc>
    return;
 8010ca6:	bf00      	nop
}
 8010ca8:	3720      	adds	r7, #32
 8010caa:	46bd      	mov	sp, r7
 8010cac:	bd80      	pop	{r7, pc}
 8010cae:	bf00      	nop
 8010cb0:	66666667 	.word	0x66666667

08010cb4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8010cb4:	b480      	push	{r7}
 8010cb6:	b089      	sub	sp, #36	@ 0x24
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
 8010cbc:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8010cca:	69fb      	ldr	r3, [r7, #28]
 8010ccc:	f003 0301 	and.w	r3, r3, #1
 8010cd0:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8010cd2:	693b      	ldr	r3, [r7, #16]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d00d      	beq.n	8010cf4 <lwip_standard_chksum+0x40>
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	dd0a      	ble.n	8010cf4 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8010cde:	69fa      	ldr	r2, [r7, #28]
 8010ce0:	1c53      	adds	r3, r2, #1
 8010ce2:	61fb      	str	r3, [r7, #28]
 8010ce4:	f107 030e 	add.w	r3, r7, #14
 8010ce8:	3301      	adds	r3, #1
 8010cea:	7812      	ldrb	r2, [r2, #0]
 8010cec:	701a      	strb	r2, [r3, #0]
    len--;
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	3b01      	subs	r3, #1
 8010cf2:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8010cf4:	69fb      	ldr	r3, [r7, #28]
 8010cf6:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8010cf8:	e00a      	b.n	8010d10 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8010cfa:	69bb      	ldr	r3, [r7, #24]
 8010cfc:	1c9a      	adds	r2, r3, #2
 8010cfe:	61ba      	str	r2, [r7, #24]
 8010d00:	881b      	ldrh	r3, [r3, #0]
 8010d02:	461a      	mov	r2, r3
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	4413      	add	r3, r2
 8010d08:	617b      	str	r3, [r7, #20]
    len -= 2;
 8010d0a:	683b      	ldr	r3, [r7, #0]
 8010d0c:	3b02      	subs	r3, #2
 8010d0e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	2b01      	cmp	r3, #1
 8010d14:	dcf1      	bgt.n	8010cfa <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	dd04      	ble.n	8010d26 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8010d1c:	f107 030e 	add.w	r3, r7, #14
 8010d20:	69ba      	ldr	r2, [r7, #24]
 8010d22:	7812      	ldrb	r2, [r2, #0]
 8010d24:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8010d26:	89fb      	ldrh	r3, [r7, #14]
 8010d28:	461a      	mov	r2, r3
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	4413      	add	r3, r2
 8010d2e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	0c1a      	lsrs	r2, r3, #16
 8010d34:	697b      	ldr	r3, [r7, #20]
 8010d36:	b29b      	uxth	r3, r3
 8010d38:	4413      	add	r3, r2
 8010d3a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	0c1a      	lsrs	r2, r3, #16
 8010d40:	697b      	ldr	r3, [r7, #20]
 8010d42:	b29b      	uxth	r3, r3
 8010d44:	4413      	add	r3, r2
 8010d46:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d007      	beq.n	8010d5e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8010d4e:	697b      	ldr	r3, [r7, #20]
 8010d50:	021b      	lsls	r3, r3, #8
 8010d52:	b29a      	uxth	r2, r3
 8010d54:	697b      	ldr	r3, [r7, #20]
 8010d56:	0a1b      	lsrs	r3, r3, #8
 8010d58:	b2db      	uxtb	r3, r3
 8010d5a:	4313      	orrs	r3, r2
 8010d5c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	b29b      	uxth	r3, r3
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	3724      	adds	r7, #36	@ 0x24
 8010d66:	46bd      	mov	sp, r7
 8010d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6c:	4770      	bx	lr

08010d6e <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8010d6e:	b580      	push	{r7, lr}
 8010d70:	b082      	sub	sp, #8
 8010d72:	af00      	add	r7, sp, #0
 8010d74:	6078      	str	r0, [r7, #4]
 8010d76:	460b      	mov	r3, r1
 8010d78:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8010d7a:	887b      	ldrh	r3, [r7, #2]
 8010d7c:	4619      	mov	r1, r3
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	f7ff ff98 	bl	8010cb4 <lwip_standard_chksum>
 8010d84:	4603      	mov	r3, r0
 8010d86:	43db      	mvns	r3, r3
 8010d88:	b29b      	uxth	r3, r3
}
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	3708      	adds	r7, #8
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}

08010d92 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010d92:	b580      	push	{r7, lr}
 8010d94:	b082      	sub	sp, #8
 8010d96:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010d98:	2300      	movs	r3, #0
 8010d9a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8010d9c:	f00c fe42 	bl	801da24 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8010da0:	f000 f8d6 	bl	8010f50 <mem_init>
  memp_init();
 8010da4:	f000 fc30 	bl	8011608 <memp_init>
  pbuf_init();
  netif_init();
 8010da8:	f000 fd38 	bl	801181c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8010dac:	f007 fb74 	bl	8018498 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010db0:	f002 f866 	bl	8012e80 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
 8010db4:	f00a ffc4 	bl	801bd40 <igmp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010db8:	f007 fa7a 	bl	80182b0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010dbc:	bf00      	nop
 8010dbe:	3708      	adds	r7, #8
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}

08010dc4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b083      	sub	sp, #12
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	4603      	mov	r3, r0
 8010dcc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8010dce:	4b05      	ldr	r3, [pc, #20]	@ (8010de4 <ptr_to_mem+0x20>)
 8010dd0:	681a      	ldr	r2, [r3, #0]
 8010dd2:	88fb      	ldrh	r3, [r7, #6]
 8010dd4:	4413      	add	r3, r2
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	370c      	adds	r7, #12
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de0:	4770      	bx	lr
 8010de2:	bf00      	nop
 8010de4:	20004780 	.word	0x20004780

08010de8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010de8:	b480      	push	{r7}
 8010dea:	b083      	sub	sp, #12
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8010df0:	4b05      	ldr	r3, [pc, #20]	@ (8010e08 <mem_to_ptr+0x20>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	687a      	ldr	r2, [r7, #4]
 8010df6:	1ad3      	subs	r3, r2, r3
 8010df8:	b29b      	uxth	r3, r3
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	370c      	adds	r7, #12
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e04:	4770      	bx	lr
 8010e06:	bf00      	nop
 8010e08:	20004780 	.word	0x20004780

08010e0c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010e0c:	b590      	push	{r4, r7, lr}
 8010e0e:	b085      	sub	sp, #20
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010e14:	4b45      	ldr	r3, [pc, #276]	@ (8010f2c <plug_holes+0x120>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	687a      	ldr	r2, [r7, #4]
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d206      	bcs.n	8010e2c <plug_holes+0x20>
 8010e1e:	4b44      	ldr	r3, [pc, #272]	@ (8010f30 <plug_holes+0x124>)
 8010e20:	f240 12df 	movw	r2, #479	@ 0x1df
 8010e24:	4943      	ldr	r1, [pc, #268]	@ (8010f34 <plug_holes+0x128>)
 8010e26:	4844      	ldr	r0, [pc, #272]	@ (8010f38 <plug_holes+0x12c>)
 8010e28:	f00d fdda 	bl	801e9e0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8010e2c:	4b43      	ldr	r3, [pc, #268]	@ (8010f3c <plug_holes+0x130>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	687a      	ldr	r2, [r7, #4]
 8010e32:	429a      	cmp	r2, r3
 8010e34:	d306      	bcc.n	8010e44 <plug_holes+0x38>
 8010e36:	4b3e      	ldr	r3, [pc, #248]	@ (8010f30 <plug_holes+0x124>)
 8010e38:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8010e3c:	4940      	ldr	r1, [pc, #256]	@ (8010f40 <plug_holes+0x134>)
 8010e3e:	483e      	ldr	r0, [pc, #248]	@ (8010f38 <plug_holes+0x12c>)
 8010e40:	f00d fdce 	bl	801e9e0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	791b      	ldrb	r3, [r3, #4]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d006      	beq.n	8010e5a <plug_holes+0x4e>
 8010e4c:	4b38      	ldr	r3, [pc, #224]	@ (8010f30 <plug_holes+0x124>)
 8010e4e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8010e52:	493c      	ldr	r1, [pc, #240]	@ (8010f44 <plug_holes+0x138>)
 8010e54:	4838      	ldr	r0, [pc, #224]	@ (8010f38 <plug_holes+0x12c>)
 8010e56:	f00d fdc3 	bl	801e9e0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	881b      	ldrh	r3, [r3, #0]
 8010e5e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010e62:	d906      	bls.n	8010e72 <plug_holes+0x66>
 8010e64:	4b32      	ldr	r3, [pc, #200]	@ (8010f30 <plug_holes+0x124>)
 8010e66:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8010e6a:	4937      	ldr	r1, [pc, #220]	@ (8010f48 <plug_holes+0x13c>)
 8010e6c:	4832      	ldr	r0, [pc, #200]	@ (8010f38 <plug_holes+0x12c>)
 8010e6e:	f00d fdb7 	bl	801e9e0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	881b      	ldrh	r3, [r3, #0]
 8010e76:	4618      	mov	r0, r3
 8010e78:	f7ff ffa4 	bl	8010dc4 <ptr_to_mem>
 8010e7c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8010e7e:	687a      	ldr	r2, [r7, #4]
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d024      	beq.n	8010ed0 <plug_holes+0xc4>
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	791b      	ldrb	r3, [r3, #4]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d120      	bne.n	8010ed0 <plug_holes+0xc4>
 8010e8e:	4b2b      	ldr	r3, [pc, #172]	@ (8010f3c <plug_holes+0x130>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	68fa      	ldr	r2, [r7, #12]
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d01b      	beq.n	8010ed0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010e98:	4b2c      	ldr	r3, [pc, #176]	@ (8010f4c <plug_holes+0x140>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	68fa      	ldr	r2, [r7, #12]
 8010e9e:	429a      	cmp	r2, r3
 8010ea0:	d102      	bne.n	8010ea8 <plug_holes+0x9c>
      lfree = mem;
 8010ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8010f4c <plug_holes+0x140>)
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	881a      	ldrh	r2, [r3, #0]
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	881b      	ldrh	r3, [r3, #0]
 8010eb4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010eb8:	d00a      	beq.n	8010ed0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	881b      	ldrh	r3, [r3, #0]
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7ff ff80 	bl	8010dc4 <ptr_to_mem>
 8010ec4:	4604      	mov	r4, r0
 8010ec6:	6878      	ldr	r0, [r7, #4]
 8010ec8:	f7ff ff8e 	bl	8010de8 <mem_to_ptr>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	885b      	ldrh	r3, [r3, #2]
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f7ff ff75 	bl	8010dc4 <ptr_to_mem>
 8010eda:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010edc:	68ba      	ldr	r2, [r7, #8]
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	d01f      	beq.n	8010f24 <plug_holes+0x118>
 8010ee4:	68bb      	ldr	r3, [r7, #8]
 8010ee6:	791b      	ldrb	r3, [r3, #4]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d11b      	bne.n	8010f24 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010eec:	4b17      	ldr	r3, [pc, #92]	@ (8010f4c <plug_holes+0x140>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	687a      	ldr	r2, [r7, #4]
 8010ef2:	429a      	cmp	r2, r3
 8010ef4:	d102      	bne.n	8010efc <plug_holes+0xf0>
      lfree = pmem;
 8010ef6:	4a15      	ldr	r2, [pc, #84]	@ (8010f4c <plug_holes+0x140>)
 8010ef8:	68bb      	ldr	r3, [r7, #8]
 8010efa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	881a      	ldrh	r2, [r3, #0]
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	881b      	ldrh	r3, [r3, #0]
 8010f08:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8010f0c:	d00a      	beq.n	8010f24 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	881b      	ldrh	r3, [r3, #0]
 8010f12:	4618      	mov	r0, r3
 8010f14:	f7ff ff56 	bl	8010dc4 <ptr_to_mem>
 8010f18:	4604      	mov	r4, r0
 8010f1a:	68b8      	ldr	r0, [r7, #8]
 8010f1c:	f7ff ff64 	bl	8010de8 <mem_to_ptr>
 8010f20:	4603      	mov	r3, r0
 8010f22:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8010f24:	bf00      	nop
 8010f26:	3714      	adds	r7, #20
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd90      	pop	{r4, r7, pc}
 8010f2c:	20004780 	.word	0x20004780
 8010f30:	0802049c 	.word	0x0802049c
 8010f34:	080204cc 	.word	0x080204cc
 8010f38:	080204e4 	.word	0x080204e4
 8010f3c:	20004784 	.word	0x20004784
 8010f40:	0802050c 	.word	0x0802050c
 8010f44:	08020528 	.word	0x08020528
 8010f48:	08020544 	.word	0x08020544
 8010f4c:	2000478c 	.word	0x2000478c

08010f50 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b082      	sub	sp, #8
 8010f54:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8010f56:	4b1d      	ldr	r3, [pc, #116]	@ (8010fcc <mem_init+0x7c>)
 8010f58:	4a1d      	ldr	r2, [pc, #116]	@ (8010fd0 <mem_init+0x80>)
 8010f5a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8010fcc <mem_init+0x7c>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8010f68:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2200      	movs	r2, #0
 8010f74:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010f76:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8010f7a:	f7ff ff23 	bl	8010dc4 <ptr_to_mem>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	4a14      	ldr	r2, [pc, #80]	@ (8010fd4 <mem_init+0x84>)
 8010f82:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010f84:	4b13      	ldr	r3, [pc, #76]	@ (8010fd4 <mem_init+0x84>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	2201      	movs	r2, #1
 8010f8a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010f8c:	4b11      	ldr	r3, [pc, #68]	@ (8010fd4 <mem_init+0x84>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8010f94:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010f96:	4b0f      	ldr	r3, [pc, #60]	@ (8010fd4 <mem_init+0x84>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8010f9e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8010fcc <mem_init+0x7c>)
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	4a0c      	ldr	r2, [pc, #48]	@ (8010fd8 <mem_init+0x88>)
 8010fa6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010fa8:	480c      	ldr	r0, [pc, #48]	@ (8010fdc <mem_init+0x8c>)
 8010faa:	f00c fd49 	bl	801da40 <sys_mutex_new>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d006      	beq.n	8010fc2 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8010fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8010fe0 <mem_init+0x90>)
 8010fb6:	f240 221f 	movw	r2, #543	@ 0x21f
 8010fba:	490a      	ldr	r1, [pc, #40]	@ (8010fe4 <mem_init+0x94>)
 8010fbc:	480a      	ldr	r0, [pc, #40]	@ (8010fe8 <mem_init+0x98>)
 8010fbe:	f00d fd0f 	bl	801e9e0 <iprintf>
  }
}
 8010fc2:	bf00      	nop
 8010fc4:	3708      	adds	r7, #8
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}
 8010fca:	bf00      	nop
 8010fcc:	20004780 	.word	0x20004780
 8010fd0:	20048000 	.word	0x20048000
 8010fd4:	20004784 	.word	0x20004784
 8010fd8:	2000478c 	.word	0x2000478c
 8010fdc:	20004788 	.word	0x20004788
 8010fe0:	0802049c 	.word	0x0802049c
 8010fe4:	08020570 	.word	0x08020570
 8010fe8:	080204e4 	.word	0x080204e4

08010fec <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b086      	sub	sp, #24
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f7ff fef7 	bl	8010de8 <mem_to_ptr>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	881b      	ldrh	r3, [r3, #0]
 8011002:	4618      	mov	r0, r3
 8011004:	f7ff fede 	bl	8010dc4 <ptr_to_mem>
 8011008:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	885b      	ldrh	r3, [r3, #2]
 801100e:	4618      	mov	r0, r3
 8011010:	f7ff fed8 	bl	8010dc4 <ptr_to_mem>
 8011014:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	881b      	ldrh	r3, [r3, #0]
 801101a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801101e:	d818      	bhi.n	8011052 <mem_link_valid+0x66>
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	885b      	ldrh	r3, [r3, #2]
 8011024:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011028:	d813      	bhi.n	8011052 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801102e:	8afa      	ldrh	r2, [r7, #22]
 8011030:	429a      	cmp	r2, r3
 8011032:	d004      	beq.n	801103e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	881b      	ldrh	r3, [r3, #0]
 8011038:	8afa      	ldrh	r2, [r7, #22]
 801103a:	429a      	cmp	r2, r3
 801103c:	d109      	bne.n	8011052 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801103e:	4b08      	ldr	r3, [pc, #32]	@ (8011060 <mem_link_valid+0x74>)
 8011040:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011042:	693a      	ldr	r2, [r7, #16]
 8011044:	429a      	cmp	r2, r3
 8011046:	d006      	beq.n	8011056 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011048:	693b      	ldr	r3, [r7, #16]
 801104a:	885b      	ldrh	r3, [r3, #2]
 801104c:	8afa      	ldrh	r2, [r7, #22]
 801104e:	429a      	cmp	r2, r3
 8011050:	d001      	beq.n	8011056 <mem_link_valid+0x6a>
    return 0;
 8011052:	2300      	movs	r3, #0
 8011054:	e000      	b.n	8011058 <mem_link_valid+0x6c>
  }
  return 1;
 8011056:	2301      	movs	r3, #1
}
 8011058:	4618      	mov	r0, r3
 801105a:	3718      	adds	r7, #24
 801105c:	46bd      	mov	sp, r7
 801105e:	bd80      	pop	{r7, pc}
 8011060:	20004784 	.word	0x20004784

08011064 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b088      	sub	sp, #32
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d070      	beq.n	8011154 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f003 0303 	and.w	r3, r3, #3
 8011078:	2b00      	cmp	r3, #0
 801107a:	d00d      	beq.n	8011098 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801107c:	4b37      	ldr	r3, [pc, #220]	@ (801115c <mem_free+0xf8>)
 801107e:	f240 2273 	movw	r2, #627	@ 0x273
 8011082:	4937      	ldr	r1, [pc, #220]	@ (8011160 <mem_free+0xfc>)
 8011084:	4837      	ldr	r0, [pc, #220]	@ (8011164 <mem_free+0x100>)
 8011086:	f00d fcab 	bl	801e9e0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801108a:	f00c fd37 	bl	801dafc <sys_arch_protect>
 801108e:	60f8      	str	r0, [r7, #12]
 8011090:	68f8      	ldr	r0, [r7, #12]
 8011092:	f00c fd41 	bl	801db18 <sys_arch_unprotect>
    return;
 8011096:	e05e      	b.n	8011156 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	3b08      	subs	r3, #8
 801109c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801109e:	4b32      	ldr	r3, [pc, #200]	@ (8011168 <mem_free+0x104>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	69fa      	ldr	r2, [r7, #28]
 80110a4:	429a      	cmp	r2, r3
 80110a6:	d306      	bcc.n	80110b6 <mem_free+0x52>
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f103 020c 	add.w	r2, r3, #12
 80110ae:	4b2f      	ldr	r3, [pc, #188]	@ (801116c <mem_free+0x108>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	429a      	cmp	r2, r3
 80110b4:	d90d      	bls.n	80110d2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80110b6:	4b29      	ldr	r3, [pc, #164]	@ (801115c <mem_free+0xf8>)
 80110b8:	f240 227f 	movw	r2, #639	@ 0x27f
 80110bc:	492c      	ldr	r1, [pc, #176]	@ (8011170 <mem_free+0x10c>)
 80110be:	4829      	ldr	r0, [pc, #164]	@ (8011164 <mem_free+0x100>)
 80110c0:	f00d fc8e 	bl	801e9e0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80110c4:	f00c fd1a 	bl	801dafc <sys_arch_protect>
 80110c8:	6138      	str	r0, [r7, #16]
 80110ca:	6938      	ldr	r0, [r7, #16]
 80110cc:	f00c fd24 	bl	801db18 <sys_arch_unprotect>
    return;
 80110d0:	e041      	b.n	8011156 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80110d2:	4828      	ldr	r0, [pc, #160]	@ (8011174 <mem_free+0x110>)
 80110d4:	f00c fcd0 	bl	801da78 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80110d8:	69fb      	ldr	r3, [r7, #28]
 80110da:	791b      	ldrb	r3, [r3, #4]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d110      	bne.n	8011102 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80110e0:	4b1e      	ldr	r3, [pc, #120]	@ (801115c <mem_free+0xf8>)
 80110e2:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80110e6:	4924      	ldr	r1, [pc, #144]	@ (8011178 <mem_free+0x114>)
 80110e8:	481e      	ldr	r0, [pc, #120]	@ (8011164 <mem_free+0x100>)
 80110ea:	f00d fc79 	bl	801e9e0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80110ee:	4821      	ldr	r0, [pc, #132]	@ (8011174 <mem_free+0x110>)
 80110f0:	f00c fcd1 	bl	801da96 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80110f4:	f00c fd02 	bl	801dafc <sys_arch_protect>
 80110f8:	6178      	str	r0, [r7, #20]
 80110fa:	6978      	ldr	r0, [r7, #20]
 80110fc:	f00c fd0c 	bl	801db18 <sys_arch_unprotect>
    return;
 8011100:	e029      	b.n	8011156 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8011102:	69f8      	ldr	r0, [r7, #28]
 8011104:	f7ff ff72 	bl	8010fec <mem_link_valid>
 8011108:	4603      	mov	r3, r0
 801110a:	2b00      	cmp	r3, #0
 801110c:	d110      	bne.n	8011130 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801110e:	4b13      	ldr	r3, [pc, #76]	@ (801115c <mem_free+0xf8>)
 8011110:	f240 2295 	movw	r2, #661	@ 0x295
 8011114:	4919      	ldr	r1, [pc, #100]	@ (801117c <mem_free+0x118>)
 8011116:	4813      	ldr	r0, [pc, #76]	@ (8011164 <mem_free+0x100>)
 8011118:	f00d fc62 	bl	801e9e0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801111c:	4815      	ldr	r0, [pc, #84]	@ (8011174 <mem_free+0x110>)
 801111e:	f00c fcba 	bl	801da96 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011122:	f00c fceb 	bl	801dafc <sys_arch_protect>
 8011126:	61b8      	str	r0, [r7, #24]
 8011128:	69b8      	ldr	r0, [r7, #24]
 801112a:	f00c fcf5 	bl	801db18 <sys_arch_unprotect>
    return;
 801112e:	e012      	b.n	8011156 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8011130:	69fb      	ldr	r3, [r7, #28]
 8011132:	2200      	movs	r2, #0
 8011134:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8011136:	4b12      	ldr	r3, [pc, #72]	@ (8011180 <mem_free+0x11c>)
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	69fa      	ldr	r2, [r7, #28]
 801113c:	429a      	cmp	r2, r3
 801113e:	d202      	bcs.n	8011146 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8011140:	4a0f      	ldr	r2, [pc, #60]	@ (8011180 <mem_free+0x11c>)
 8011142:	69fb      	ldr	r3, [r7, #28]
 8011144:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8011146:	69f8      	ldr	r0, [r7, #28]
 8011148:	f7ff fe60 	bl	8010e0c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801114c:	4809      	ldr	r0, [pc, #36]	@ (8011174 <mem_free+0x110>)
 801114e:	f00c fca2 	bl	801da96 <sys_mutex_unlock>
 8011152:	e000      	b.n	8011156 <mem_free+0xf2>
    return;
 8011154:	bf00      	nop
}
 8011156:	3720      	adds	r7, #32
 8011158:	46bd      	mov	sp, r7
 801115a:	bd80      	pop	{r7, pc}
 801115c:	0802049c 	.word	0x0802049c
 8011160:	0802058c 	.word	0x0802058c
 8011164:	080204e4 	.word	0x080204e4
 8011168:	20004780 	.word	0x20004780
 801116c:	20004784 	.word	0x20004784
 8011170:	080205b0 	.word	0x080205b0
 8011174:	20004788 	.word	0x20004788
 8011178:	080205cc 	.word	0x080205cc
 801117c:	080205f4 	.word	0x080205f4
 8011180:	2000478c 	.word	0x2000478c

08011184 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b088      	sub	sp, #32
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
 801118c:	460b      	mov	r3, r1
 801118e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8011190:	887b      	ldrh	r3, [r7, #2]
 8011192:	3303      	adds	r3, #3
 8011194:	b29b      	uxth	r3, r3
 8011196:	f023 0303 	bic.w	r3, r3, #3
 801119a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801119c:	8bfb      	ldrh	r3, [r7, #30]
 801119e:	2b0b      	cmp	r3, #11
 80111a0:	d801      	bhi.n	80111a6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80111a2:	230c      	movs	r3, #12
 80111a4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80111a6:	8bfb      	ldrh	r3, [r7, #30]
 80111a8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80111ac:	d803      	bhi.n	80111b6 <mem_trim+0x32>
 80111ae:	8bfa      	ldrh	r2, [r7, #30]
 80111b0:	887b      	ldrh	r3, [r7, #2]
 80111b2:	429a      	cmp	r2, r3
 80111b4:	d201      	bcs.n	80111ba <mem_trim+0x36>
    return NULL;
 80111b6:	2300      	movs	r3, #0
 80111b8:	e0d8      	b.n	801136c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80111ba:	4b6e      	ldr	r3, [pc, #440]	@ (8011374 <mem_trim+0x1f0>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	687a      	ldr	r2, [r7, #4]
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d304      	bcc.n	80111ce <mem_trim+0x4a>
 80111c4:	4b6c      	ldr	r3, [pc, #432]	@ (8011378 <mem_trim+0x1f4>)
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	687a      	ldr	r2, [r7, #4]
 80111ca:	429a      	cmp	r2, r3
 80111cc:	d306      	bcc.n	80111dc <mem_trim+0x58>
 80111ce:	4b6b      	ldr	r3, [pc, #428]	@ (801137c <mem_trim+0x1f8>)
 80111d0:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80111d4:	496a      	ldr	r1, [pc, #424]	@ (8011380 <mem_trim+0x1fc>)
 80111d6:	486b      	ldr	r0, [pc, #428]	@ (8011384 <mem_trim+0x200>)
 80111d8:	f00d fc02 	bl	801e9e0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80111dc:	4b65      	ldr	r3, [pc, #404]	@ (8011374 <mem_trim+0x1f0>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	687a      	ldr	r2, [r7, #4]
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d304      	bcc.n	80111f0 <mem_trim+0x6c>
 80111e6:	4b64      	ldr	r3, [pc, #400]	@ (8011378 <mem_trim+0x1f4>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	687a      	ldr	r2, [r7, #4]
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d307      	bcc.n	8011200 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80111f0:	f00c fc84 	bl	801dafc <sys_arch_protect>
 80111f4:	60b8      	str	r0, [r7, #8]
 80111f6:	68b8      	ldr	r0, [r7, #8]
 80111f8:	f00c fc8e 	bl	801db18 <sys_arch_unprotect>
    return rmem;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	e0b5      	b.n	801136c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	3b08      	subs	r3, #8
 8011204:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8011206:	69b8      	ldr	r0, [r7, #24]
 8011208:	f7ff fdee 	bl	8010de8 <mem_to_ptr>
 801120c:	4603      	mov	r3, r0
 801120e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011210:	69bb      	ldr	r3, [r7, #24]
 8011212:	881a      	ldrh	r2, [r3, #0]
 8011214:	8afb      	ldrh	r3, [r7, #22]
 8011216:	1ad3      	subs	r3, r2, r3
 8011218:	b29b      	uxth	r3, r3
 801121a:	3b08      	subs	r3, #8
 801121c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801121e:	8bfa      	ldrh	r2, [r7, #30]
 8011220:	8abb      	ldrh	r3, [r7, #20]
 8011222:	429a      	cmp	r2, r3
 8011224:	d906      	bls.n	8011234 <mem_trim+0xb0>
 8011226:	4b55      	ldr	r3, [pc, #340]	@ (801137c <mem_trim+0x1f8>)
 8011228:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 801122c:	4956      	ldr	r1, [pc, #344]	@ (8011388 <mem_trim+0x204>)
 801122e:	4855      	ldr	r0, [pc, #340]	@ (8011384 <mem_trim+0x200>)
 8011230:	f00d fbd6 	bl	801e9e0 <iprintf>
  if (newsize > size) {
 8011234:	8bfa      	ldrh	r2, [r7, #30]
 8011236:	8abb      	ldrh	r3, [r7, #20]
 8011238:	429a      	cmp	r2, r3
 801123a:	d901      	bls.n	8011240 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 801123c:	2300      	movs	r3, #0
 801123e:	e095      	b.n	801136c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8011240:	8bfa      	ldrh	r2, [r7, #30]
 8011242:	8abb      	ldrh	r3, [r7, #20]
 8011244:	429a      	cmp	r2, r3
 8011246:	d101      	bne.n	801124c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	e08f      	b.n	801136c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801124c:	484f      	ldr	r0, [pc, #316]	@ (801138c <mem_trim+0x208>)
 801124e:	f00c fc13 	bl	801da78 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8011252:	69bb      	ldr	r3, [r7, #24]
 8011254:	881b      	ldrh	r3, [r3, #0]
 8011256:	4618      	mov	r0, r3
 8011258:	f7ff fdb4 	bl	8010dc4 <ptr_to_mem>
 801125c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801125e:	693b      	ldr	r3, [r7, #16]
 8011260:	791b      	ldrb	r3, [r3, #4]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d13f      	bne.n	80112e6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011266:	69bb      	ldr	r3, [r7, #24]
 8011268:	881b      	ldrh	r3, [r3, #0]
 801126a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801126e:	d106      	bne.n	801127e <mem_trim+0xfa>
 8011270:	4b42      	ldr	r3, [pc, #264]	@ (801137c <mem_trim+0x1f8>)
 8011272:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8011276:	4946      	ldr	r1, [pc, #280]	@ (8011390 <mem_trim+0x20c>)
 8011278:	4842      	ldr	r0, [pc, #264]	@ (8011384 <mem_trim+0x200>)
 801127a:	f00d fbb1 	bl	801e9e0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801127e:	693b      	ldr	r3, [r7, #16]
 8011280:	881b      	ldrh	r3, [r3, #0]
 8011282:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011284:	8afa      	ldrh	r2, [r7, #22]
 8011286:	8bfb      	ldrh	r3, [r7, #30]
 8011288:	4413      	add	r3, r2
 801128a:	b29b      	uxth	r3, r3
 801128c:	3308      	adds	r3, #8
 801128e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8011290:	4b40      	ldr	r3, [pc, #256]	@ (8011394 <mem_trim+0x210>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	693a      	ldr	r2, [r7, #16]
 8011296:	429a      	cmp	r2, r3
 8011298:	d106      	bne.n	80112a8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801129a:	89fb      	ldrh	r3, [r7, #14]
 801129c:	4618      	mov	r0, r3
 801129e:	f7ff fd91 	bl	8010dc4 <ptr_to_mem>
 80112a2:	4603      	mov	r3, r0
 80112a4:	4a3b      	ldr	r2, [pc, #236]	@ (8011394 <mem_trim+0x210>)
 80112a6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80112a8:	89fb      	ldrh	r3, [r7, #14]
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7ff fd8a 	bl	8010dc4 <ptr_to_mem>
 80112b0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80112b2:	693b      	ldr	r3, [r7, #16]
 80112b4:	2200      	movs	r2, #0
 80112b6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80112b8:	693b      	ldr	r3, [r7, #16]
 80112ba:	89ba      	ldrh	r2, [r7, #12]
 80112bc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80112be:	693b      	ldr	r3, [r7, #16]
 80112c0:	8afa      	ldrh	r2, [r7, #22]
 80112c2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80112c4:	69bb      	ldr	r3, [r7, #24]
 80112c6:	89fa      	ldrh	r2, [r7, #14]
 80112c8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80112ca:	693b      	ldr	r3, [r7, #16]
 80112cc:	881b      	ldrh	r3, [r3, #0]
 80112ce:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80112d2:	d047      	beq.n	8011364 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80112d4:	693b      	ldr	r3, [r7, #16]
 80112d6:	881b      	ldrh	r3, [r3, #0]
 80112d8:	4618      	mov	r0, r3
 80112da:	f7ff fd73 	bl	8010dc4 <ptr_to_mem>
 80112de:	4602      	mov	r2, r0
 80112e0:	89fb      	ldrh	r3, [r7, #14]
 80112e2:	8053      	strh	r3, [r2, #2]
 80112e4:	e03e      	b.n	8011364 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80112e6:	8bfb      	ldrh	r3, [r7, #30]
 80112e8:	f103 0214 	add.w	r2, r3, #20
 80112ec:	8abb      	ldrh	r3, [r7, #20]
 80112ee:	429a      	cmp	r2, r3
 80112f0:	d838      	bhi.n	8011364 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80112f2:	8afa      	ldrh	r2, [r7, #22]
 80112f4:	8bfb      	ldrh	r3, [r7, #30]
 80112f6:	4413      	add	r3, r2
 80112f8:	b29b      	uxth	r3, r3
 80112fa:	3308      	adds	r3, #8
 80112fc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80112fe:	69bb      	ldr	r3, [r7, #24]
 8011300:	881b      	ldrh	r3, [r3, #0]
 8011302:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011306:	d106      	bne.n	8011316 <mem_trim+0x192>
 8011308:	4b1c      	ldr	r3, [pc, #112]	@ (801137c <mem_trim+0x1f8>)
 801130a:	f240 3216 	movw	r2, #790	@ 0x316
 801130e:	4920      	ldr	r1, [pc, #128]	@ (8011390 <mem_trim+0x20c>)
 8011310:	481c      	ldr	r0, [pc, #112]	@ (8011384 <mem_trim+0x200>)
 8011312:	f00d fb65 	bl	801e9e0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011316:	89fb      	ldrh	r3, [r7, #14]
 8011318:	4618      	mov	r0, r3
 801131a:	f7ff fd53 	bl	8010dc4 <ptr_to_mem>
 801131e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011320:	4b1c      	ldr	r3, [pc, #112]	@ (8011394 <mem_trim+0x210>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	693a      	ldr	r2, [r7, #16]
 8011326:	429a      	cmp	r2, r3
 8011328:	d202      	bcs.n	8011330 <mem_trim+0x1ac>
      lfree = mem2;
 801132a:	4a1a      	ldr	r2, [pc, #104]	@ (8011394 <mem_trim+0x210>)
 801132c:	693b      	ldr	r3, [r7, #16]
 801132e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011330:	693b      	ldr	r3, [r7, #16]
 8011332:	2200      	movs	r2, #0
 8011334:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011336:	69bb      	ldr	r3, [r7, #24]
 8011338:	881a      	ldrh	r2, [r3, #0]
 801133a:	693b      	ldr	r3, [r7, #16]
 801133c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801133e:	693b      	ldr	r3, [r7, #16]
 8011340:	8afa      	ldrh	r2, [r7, #22]
 8011342:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011344:	69bb      	ldr	r3, [r7, #24]
 8011346:	89fa      	ldrh	r2, [r7, #14]
 8011348:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801134a:	693b      	ldr	r3, [r7, #16]
 801134c:	881b      	ldrh	r3, [r3, #0]
 801134e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011352:	d007      	beq.n	8011364 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011354:	693b      	ldr	r3, [r7, #16]
 8011356:	881b      	ldrh	r3, [r3, #0]
 8011358:	4618      	mov	r0, r3
 801135a:	f7ff fd33 	bl	8010dc4 <ptr_to_mem>
 801135e:	4602      	mov	r2, r0
 8011360:	89fb      	ldrh	r3, [r7, #14]
 8011362:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011364:	4809      	ldr	r0, [pc, #36]	@ (801138c <mem_trim+0x208>)
 8011366:	f00c fb96 	bl	801da96 <sys_mutex_unlock>
  return rmem;
 801136a:	687b      	ldr	r3, [r7, #4]
}
 801136c:	4618      	mov	r0, r3
 801136e:	3720      	adds	r7, #32
 8011370:	46bd      	mov	sp, r7
 8011372:	bd80      	pop	{r7, pc}
 8011374:	20004780 	.word	0x20004780
 8011378:	20004784 	.word	0x20004784
 801137c:	0802049c 	.word	0x0802049c
 8011380:	08020628 	.word	0x08020628
 8011384:	080204e4 	.word	0x080204e4
 8011388:	08020640 	.word	0x08020640
 801138c:	20004788 	.word	0x20004788
 8011390:	08020660 	.word	0x08020660
 8011394:	2000478c 	.word	0x2000478c

08011398 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b088      	sub	sp, #32
 801139c:	af00      	add	r7, sp, #0
 801139e:	4603      	mov	r3, r0
 80113a0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80113a2:	88fb      	ldrh	r3, [r7, #6]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d101      	bne.n	80113ac <mem_malloc+0x14>
    return NULL;
 80113a8:	2300      	movs	r3, #0
 80113aa:	e0e2      	b.n	8011572 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80113ac:	88fb      	ldrh	r3, [r7, #6]
 80113ae:	3303      	adds	r3, #3
 80113b0:	b29b      	uxth	r3, r3
 80113b2:	f023 0303 	bic.w	r3, r3, #3
 80113b6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80113b8:	8bbb      	ldrh	r3, [r7, #28]
 80113ba:	2b0b      	cmp	r3, #11
 80113bc:	d801      	bhi.n	80113c2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80113be:	230c      	movs	r3, #12
 80113c0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80113c2:	8bbb      	ldrh	r3, [r7, #28]
 80113c4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80113c8:	d803      	bhi.n	80113d2 <mem_malloc+0x3a>
 80113ca:	8bba      	ldrh	r2, [r7, #28]
 80113cc:	88fb      	ldrh	r3, [r7, #6]
 80113ce:	429a      	cmp	r2, r3
 80113d0:	d201      	bcs.n	80113d6 <mem_malloc+0x3e>
    return NULL;
 80113d2:	2300      	movs	r3, #0
 80113d4:	e0cd      	b.n	8011572 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80113d6:	4869      	ldr	r0, [pc, #420]	@ (801157c <mem_malloc+0x1e4>)
 80113d8:	f00c fb4e 	bl	801da78 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80113dc:	4b68      	ldr	r3, [pc, #416]	@ (8011580 <mem_malloc+0x1e8>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	4618      	mov	r0, r3
 80113e2:	f7ff fd01 	bl	8010de8 <mem_to_ptr>
 80113e6:	4603      	mov	r3, r0
 80113e8:	83fb      	strh	r3, [r7, #30]
 80113ea:	e0b7      	b.n	801155c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80113ec:	8bfb      	ldrh	r3, [r7, #30]
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7ff fce8 	bl	8010dc4 <ptr_to_mem>
 80113f4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	791b      	ldrb	r3, [r3, #4]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	f040 80a7 	bne.w	801154e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8011400:	697b      	ldr	r3, [r7, #20]
 8011402:	881b      	ldrh	r3, [r3, #0]
 8011404:	461a      	mov	r2, r3
 8011406:	8bfb      	ldrh	r3, [r7, #30]
 8011408:	1ad3      	subs	r3, r2, r3
 801140a:	f1a3 0208 	sub.w	r2, r3, #8
 801140e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011410:	429a      	cmp	r2, r3
 8011412:	f0c0 809c 	bcc.w	801154e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011416:	697b      	ldr	r3, [r7, #20]
 8011418:	881b      	ldrh	r3, [r3, #0]
 801141a:	461a      	mov	r2, r3
 801141c:	8bfb      	ldrh	r3, [r7, #30]
 801141e:	1ad3      	subs	r3, r2, r3
 8011420:	f1a3 0208 	sub.w	r2, r3, #8
 8011424:	8bbb      	ldrh	r3, [r7, #28]
 8011426:	3314      	adds	r3, #20
 8011428:	429a      	cmp	r2, r3
 801142a:	d333      	bcc.n	8011494 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801142c:	8bfa      	ldrh	r2, [r7, #30]
 801142e:	8bbb      	ldrh	r3, [r7, #28]
 8011430:	4413      	add	r3, r2
 8011432:	b29b      	uxth	r3, r3
 8011434:	3308      	adds	r3, #8
 8011436:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011438:	8a7b      	ldrh	r3, [r7, #18]
 801143a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 801143e:	d106      	bne.n	801144e <mem_malloc+0xb6>
 8011440:	4b50      	ldr	r3, [pc, #320]	@ (8011584 <mem_malloc+0x1ec>)
 8011442:	f240 3287 	movw	r2, #903	@ 0x387
 8011446:	4950      	ldr	r1, [pc, #320]	@ (8011588 <mem_malloc+0x1f0>)
 8011448:	4850      	ldr	r0, [pc, #320]	@ (801158c <mem_malloc+0x1f4>)
 801144a:	f00d fac9 	bl	801e9e0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801144e:	8a7b      	ldrh	r3, [r7, #18]
 8011450:	4618      	mov	r0, r3
 8011452:	f7ff fcb7 	bl	8010dc4 <ptr_to_mem>
 8011456:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	2200      	movs	r2, #0
 801145c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	881a      	ldrh	r2, [r3, #0]
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	8bfa      	ldrh	r2, [r7, #30]
 801146a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	8a7a      	ldrh	r2, [r7, #18]
 8011470:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8011472:	697b      	ldr	r3, [r7, #20]
 8011474:	2201      	movs	r2, #1
 8011476:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	881b      	ldrh	r3, [r3, #0]
 801147c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8011480:	d00b      	beq.n	801149a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	881b      	ldrh	r3, [r3, #0]
 8011486:	4618      	mov	r0, r3
 8011488:	f7ff fc9c 	bl	8010dc4 <ptr_to_mem>
 801148c:	4602      	mov	r2, r0
 801148e:	8a7b      	ldrh	r3, [r7, #18]
 8011490:	8053      	strh	r3, [r2, #2]
 8011492:	e002      	b.n	801149a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8011494:	697b      	ldr	r3, [r7, #20]
 8011496:	2201      	movs	r2, #1
 8011498:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801149a:	4b39      	ldr	r3, [pc, #228]	@ (8011580 <mem_malloc+0x1e8>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	697a      	ldr	r2, [r7, #20]
 80114a0:	429a      	cmp	r2, r3
 80114a2:	d127      	bne.n	80114f4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80114a4:	4b36      	ldr	r3, [pc, #216]	@ (8011580 <mem_malloc+0x1e8>)
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80114aa:	e005      	b.n	80114b8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80114ac:	69bb      	ldr	r3, [r7, #24]
 80114ae:	881b      	ldrh	r3, [r3, #0]
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7ff fc87 	bl	8010dc4 <ptr_to_mem>
 80114b6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80114b8:	69bb      	ldr	r3, [r7, #24]
 80114ba:	791b      	ldrb	r3, [r3, #4]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d004      	beq.n	80114ca <mem_malloc+0x132>
 80114c0:	4b33      	ldr	r3, [pc, #204]	@ (8011590 <mem_malloc+0x1f8>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	69ba      	ldr	r2, [r7, #24]
 80114c6:	429a      	cmp	r2, r3
 80114c8:	d1f0      	bne.n	80114ac <mem_malloc+0x114>
          }
          lfree = cur;
 80114ca:	4a2d      	ldr	r2, [pc, #180]	@ (8011580 <mem_malloc+0x1e8>)
 80114cc:	69bb      	ldr	r3, [r7, #24]
 80114ce:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80114d0:	4b2b      	ldr	r3, [pc, #172]	@ (8011580 <mem_malloc+0x1e8>)
 80114d2:	681a      	ldr	r2, [r3, #0]
 80114d4:	4b2e      	ldr	r3, [pc, #184]	@ (8011590 <mem_malloc+0x1f8>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	429a      	cmp	r2, r3
 80114da:	d00b      	beq.n	80114f4 <mem_malloc+0x15c>
 80114dc:	4b28      	ldr	r3, [pc, #160]	@ (8011580 <mem_malloc+0x1e8>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	791b      	ldrb	r3, [r3, #4]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d006      	beq.n	80114f4 <mem_malloc+0x15c>
 80114e6:	4b27      	ldr	r3, [pc, #156]	@ (8011584 <mem_malloc+0x1ec>)
 80114e8:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80114ec:	4929      	ldr	r1, [pc, #164]	@ (8011594 <mem_malloc+0x1fc>)
 80114ee:	4827      	ldr	r0, [pc, #156]	@ (801158c <mem_malloc+0x1f4>)
 80114f0:	f00d fa76 	bl	801e9e0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80114f4:	4821      	ldr	r0, [pc, #132]	@ (801157c <mem_malloc+0x1e4>)
 80114f6:	f00c face 	bl	801da96 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80114fa:	8bba      	ldrh	r2, [r7, #28]
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	4413      	add	r3, r2
 8011500:	3308      	adds	r3, #8
 8011502:	4a23      	ldr	r2, [pc, #140]	@ (8011590 <mem_malloc+0x1f8>)
 8011504:	6812      	ldr	r2, [r2, #0]
 8011506:	4293      	cmp	r3, r2
 8011508:	d906      	bls.n	8011518 <mem_malloc+0x180>
 801150a:	4b1e      	ldr	r3, [pc, #120]	@ (8011584 <mem_malloc+0x1ec>)
 801150c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8011510:	4921      	ldr	r1, [pc, #132]	@ (8011598 <mem_malloc+0x200>)
 8011512:	481e      	ldr	r0, [pc, #120]	@ (801158c <mem_malloc+0x1f4>)
 8011514:	f00d fa64 	bl	801e9e0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011518:	697b      	ldr	r3, [r7, #20]
 801151a:	f003 0303 	and.w	r3, r3, #3
 801151e:	2b00      	cmp	r3, #0
 8011520:	d006      	beq.n	8011530 <mem_malloc+0x198>
 8011522:	4b18      	ldr	r3, [pc, #96]	@ (8011584 <mem_malloc+0x1ec>)
 8011524:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8011528:	491c      	ldr	r1, [pc, #112]	@ (801159c <mem_malloc+0x204>)
 801152a:	4818      	ldr	r0, [pc, #96]	@ (801158c <mem_malloc+0x1f4>)
 801152c:	f00d fa58 	bl	801e9e0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	f003 0303 	and.w	r3, r3, #3
 8011536:	2b00      	cmp	r3, #0
 8011538:	d006      	beq.n	8011548 <mem_malloc+0x1b0>
 801153a:	4b12      	ldr	r3, [pc, #72]	@ (8011584 <mem_malloc+0x1ec>)
 801153c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8011540:	4917      	ldr	r1, [pc, #92]	@ (80115a0 <mem_malloc+0x208>)
 8011542:	4812      	ldr	r0, [pc, #72]	@ (801158c <mem_malloc+0x1f4>)
 8011544:	f00d fa4c 	bl	801e9e0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	3308      	adds	r3, #8
 801154c:	e011      	b.n	8011572 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801154e:	8bfb      	ldrh	r3, [r7, #30]
 8011550:	4618      	mov	r0, r3
 8011552:	f7ff fc37 	bl	8010dc4 <ptr_to_mem>
 8011556:	4603      	mov	r3, r0
 8011558:	881b      	ldrh	r3, [r3, #0]
 801155a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801155c:	8bfa      	ldrh	r2, [r7, #30]
 801155e:	8bbb      	ldrh	r3, [r7, #28]
 8011560:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 8011564:	429a      	cmp	r2, r3
 8011566:	f4ff af41 	bcc.w	80113ec <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801156a:	4804      	ldr	r0, [pc, #16]	@ (801157c <mem_malloc+0x1e4>)
 801156c:	f00c fa93 	bl	801da96 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011570:	2300      	movs	r3, #0
}
 8011572:	4618      	mov	r0, r3
 8011574:	3720      	adds	r7, #32
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}
 801157a:	bf00      	nop
 801157c:	20004788 	.word	0x20004788
 8011580:	2000478c 	.word	0x2000478c
 8011584:	0802049c 	.word	0x0802049c
 8011588:	08020660 	.word	0x08020660
 801158c:	080204e4 	.word	0x080204e4
 8011590:	20004784 	.word	0x20004784
 8011594:	08020674 	.word	0x08020674
 8011598:	08020690 	.word	0x08020690
 801159c:	080206c0 	.word	0x080206c0
 80115a0:	080206f0 	.word	0x080206f0

080115a4 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b084      	sub	sp, #16
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	4603      	mov	r3, r0
 80115ac:	460a      	mov	r2, r1
 80115ae:	80fb      	strh	r3, [r7, #6]
 80115b0:	4613      	mov	r3, r2
 80115b2:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 80115b4:	88fb      	ldrh	r3, [r7, #6]
 80115b6:	88ba      	ldrh	r2, [r7, #4]
 80115b8:	fb02 f303 	mul.w	r3, r2, r3
 80115bc:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	b29b      	uxth	r3, r3
 80115c2:	461a      	mov	r2, r3
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	4293      	cmp	r3, r2
 80115c8:	d001      	beq.n	80115ce <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 80115ca:	2300      	movs	r3, #0
 80115cc:	e00e      	b.n	80115ec <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	b29b      	uxth	r3, r3
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7ff fee0 	bl	8011398 <mem_malloc>
 80115d8:	60b8      	str	r0, [r7, #8]
  if (p) {
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d004      	beq.n	80115ea <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 80115e0:	68fa      	ldr	r2, [r7, #12]
 80115e2:	2100      	movs	r1, #0
 80115e4:	68b8      	ldr	r0, [r7, #8]
 80115e6:	f00d fbcb 	bl	801ed80 <memset>
  }
  return p;
 80115ea:	68bb      	ldr	r3, [r7, #8]
}
 80115ec:	4618      	mov	r0, r3
 80115ee:	3710      	adds	r7, #16
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}

080115f4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80115f4:	b480      	push	{r7}
 80115f6:	b083      	sub	sp, #12
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80115fc:	bf00      	nop
 80115fe:	370c      	adds	r7, #12
 8011600:	46bd      	mov	sp, r7
 8011602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011606:	4770      	bx	lr

08011608 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b082      	sub	sp, #8
 801160c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801160e:	2300      	movs	r3, #0
 8011610:	80fb      	strh	r3, [r7, #6]
 8011612:	e009      	b.n	8011628 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011614:	88fb      	ldrh	r3, [r7, #6]
 8011616:	4a08      	ldr	r2, [pc, #32]	@ (8011638 <memp_init+0x30>)
 8011618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801161c:	4618      	mov	r0, r3
 801161e:	f7ff ffe9 	bl	80115f4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011622:	88fb      	ldrh	r3, [r7, #6]
 8011624:	3301      	adds	r3, #1
 8011626:	80fb      	strh	r3, [r7, #6]
 8011628:	88fb      	ldrh	r3, [r7, #6]
 801162a:	2b0d      	cmp	r3, #13
 801162c:	d9f2      	bls.n	8011614 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801162e:	bf00      	nop
 8011630:	bf00      	nop
 8011632:	3708      	adds	r7, #8
 8011634:	46bd      	mov	sp, r7
 8011636:	bd80      	pop	{r7, pc}
 8011638:	08023610 	.word	0x08023610

0801163c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b084      	sub	sp, #16
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	881b      	ldrh	r3, [r3, #0]
 8011648:	3303      	adds	r3, #3
 801164a:	b29b      	uxth	r3, r3
 801164c:	f023 0303 	bic.w	r3, r3, #3
 8011650:	b29b      	uxth	r3, r3
 8011652:	4618      	mov	r0, r3
 8011654:	f7ff fea0 	bl	8011398 <mem_malloc>
 8011658:	60f8      	str	r0, [r7, #12]
  SYS_ARCH_PROTECT(old_level);
 801165a:	f00c fa4f 	bl	801dafc <sys_arch_protect>
 801165e:	60b8      	str	r0, [r7, #8]
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d010      	beq.n	8011688 <do_memp_malloc_pool+0x4c>
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	f003 0303 	and.w	r3, r3, #3
 801166c:	2b00      	cmp	r3, #0
 801166e:	d006      	beq.n	801167e <do_memp_malloc_pool+0x42>
 8011670:	4b09      	ldr	r3, [pc, #36]	@ (8011698 <do_memp_malloc_pool+0x5c>)
 8011672:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8011676:	4909      	ldr	r1, [pc, #36]	@ (801169c <do_memp_malloc_pool+0x60>)
 8011678:	4809      	ldr	r0, [pc, #36]	@ (80116a0 <do_memp_malloc_pool+0x64>)
 801167a:	f00d f9b1 	bl	801e9e0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801167e:	68b8      	ldr	r0, [r7, #8]
 8011680:	f00c fa4a 	bl	801db18 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	e003      	b.n	8011690 <do_memp_malloc_pool+0x54>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8011688:	68b8      	ldr	r0, [r7, #8]
 801168a:	f00c fa45 	bl	801db18 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801168e:	2300      	movs	r3, #0
}
 8011690:	4618      	mov	r0, r3
 8011692:	3710      	adds	r7, #16
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}
 8011698:	08020714 	.word	0x08020714
 801169c:	08020744 	.word	0x08020744
 80116a0:	08020768 	.word	0x08020768

080116a4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b082      	sub	sp, #8
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d106      	bne.n	80116c0 <memp_malloc_pool+0x1c>
 80116b2:	4b0a      	ldr	r3, [pc, #40]	@ (80116dc <memp_malloc_pool+0x38>)
 80116b4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80116b8:	4909      	ldr	r1, [pc, #36]	@ (80116e0 <memp_malloc_pool+0x3c>)
 80116ba:	480a      	ldr	r0, [pc, #40]	@ (80116e4 <memp_malloc_pool+0x40>)
 80116bc:	f00d f990 	bl	801e9e0 <iprintf>
  if (desc == NULL) {
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d101      	bne.n	80116ca <memp_malloc_pool+0x26>
    return NULL;
 80116c6:	2300      	movs	r3, #0
 80116c8:	e003      	b.n	80116d2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80116ca:	6878      	ldr	r0, [r7, #4]
 80116cc:	f7ff ffb6 	bl	801163c <do_memp_malloc_pool>
 80116d0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3708      	adds	r7, #8
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}
 80116da:	bf00      	nop
 80116dc:	08020714 	.word	0x08020714
 80116e0:	08020790 	.word	0x08020790
 80116e4:	08020768 	.word	0x08020768

080116e8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b084      	sub	sp, #16
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	4603      	mov	r3, r0
 80116f0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80116f2:	79fb      	ldrb	r3, [r7, #7]
 80116f4:	2b0d      	cmp	r3, #13
 80116f6:	d908      	bls.n	801170a <memp_malloc+0x22>
 80116f8:	4b0a      	ldr	r3, [pc, #40]	@ (8011724 <memp_malloc+0x3c>)
 80116fa:	f240 1257 	movw	r2, #343	@ 0x157
 80116fe:	490a      	ldr	r1, [pc, #40]	@ (8011728 <memp_malloc+0x40>)
 8011700:	480a      	ldr	r0, [pc, #40]	@ (801172c <memp_malloc+0x44>)
 8011702:	f00d f96d 	bl	801e9e0 <iprintf>
 8011706:	2300      	movs	r3, #0
 8011708:	e008      	b.n	801171c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801170a:	79fb      	ldrb	r3, [r7, #7]
 801170c:	4a08      	ldr	r2, [pc, #32]	@ (8011730 <memp_malloc+0x48>)
 801170e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011712:	4618      	mov	r0, r3
 8011714:	f7ff ff92 	bl	801163c <do_memp_malloc_pool>
 8011718:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801171a:	68fb      	ldr	r3, [r7, #12]
}
 801171c:	4618      	mov	r0, r3
 801171e:	3710      	adds	r7, #16
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}
 8011724:	08020714 	.word	0x08020714
 8011728:	080207a4 	.word	0x080207a4
 801172c:	08020768 	.word	0x08020768
 8011730:	08023610 	.word	0x08023610

08011734 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b084      	sub	sp, #16
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
 801173c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	f003 0303 	and.w	r3, r3, #3
 8011744:	2b00      	cmp	r3, #0
 8011746:	d006      	beq.n	8011756 <do_memp_free_pool+0x22>
 8011748:	4b0a      	ldr	r3, [pc, #40]	@ (8011774 <do_memp_free_pool+0x40>)
 801174a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801174e:	490a      	ldr	r1, [pc, #40]	@ (8011778 <do_memp_free_pool+0x44>)
 8011750:	480a      	ldr	r0, [pc, #40]	@ (801177c <do_memp_free_pool+0x48>)
 8011752:	f00d f945 	bl	801e9e0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801175a:	f00c f9cf 	bl	801dafc <sys_arch_protect>
 801175e:	60b8      	str	r0, [r7, #8]
  desc->stats->used--;
#endif

#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
 8011760:	68b8      	ldr	r0, [r7, #8]
 8011762:	f00c f9d9 	bl	801db18 <sys_arch_unprotect>
  mem_free(memp);
 8011766:	68f8      	ldr	r0, [r7, #12]
 8011768:	f7ff fc7c 	bl	8011064 <mem_free>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801176c:	bf00      	nop
 801176e:	3710      	adds	r7, #16
 8011770:	46bd      	mov	sp, r7
 8011772:	bd80      	pop	{r7, pc}
 8011774:	08020714 	.word	0x08020714
 8011778:	080207c4 	.word	0x080207c4
 801177c:	08020768 	.word	0x08020768

08011780 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b082      	sub	sp, #8
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
 8011788:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d106      	bne.n	801179e <memp_free_pool+0x1e>
 8011790:	4b0a      	ldr	r3, [pc, #40]	@ (80117bc <memp_free_pool+0x3c>)
 8011792:	f240 1295 	movw	r2, #405	@ 0x195
 8011796:	490a      	ldr	r1, [pc, #40]	@ (80117c0 <memp_free_pool+0x40>)
 8011798:	480a      	ldr	r0, [pc, #40]	@ (80117c4 <memp_free_pool+0x44>)
 801179a:	f00d f921 	bl	801e9e0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d007      	beq.n	80117b4 <memp_free_pool+0x34>
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d004      	beq.n	80117b4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80117aa:	6839      	ldr	r1, [r7, #0]
 80117ac:	6878      	ldr	r0, [r7, #4]
 80117ae:	f7ff ffc1 	bl	8011734 <do_memp_free_pool>
 80117b2:	e000      	b.n	80117b6 <memp_free_pool+0x36>
    return;
 80117b4:	bf00      	nop
}
 80117b6:	3708      	adds	r7, #8
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd80      	pop	{r7, pc}
 80117bc:	08020714 	.word	0x08020714
 80117c0:	08020790 	.word	0x08020790
 80117c4:	08020768 	.word	0x08020768

080117c8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b082      	sub	sp, #8
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	4603      	mov	r3, r0
 80117d0:	6039      	str	r1, [r7, #0]
 80117d2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80117d4:	79fb      	ldrb	r3, [r7, #7]
 80117d6:	2b0d      	cmp	r3, #13
 80117d8:	d907      	bls.n	80117ea <memp_free+0x22>
 80117da:	4b0c      	ldr	r3, [pc, #48]	@ (801180c <memp_free+0x44>)
 80117dc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80117e0:	490b      	ldr	r1, [pc, #44]	@ (8011810 <memp_free+0x48>)
 80117e2:	480c      	ldr	r0, [pc, #48]	@ (8011814 <memp_free+0x4c>)
 80117e4:	f00d f8fc 	bl	801e9e0 <iprintf>
 80117e8:	e00c      	b.n	8011804 <memp_free+0x3c>

  if (mem == NULL) {
 80117ea:	683b      	ldr	r3, [r7, #0]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d008      	beq.n	8011802 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80117f0:	79fb      	ldrb	r3, [r7, #7]
 80117f2:	4a09      	ldr	r2, [pc, #36]	@ (8011818 <memp_free+0x50>)
 80117f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80117f8:	6839      	ldr	r1, [r7, #0]
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7ff ff9a 	bl	8011734 <do_memp_free_pool>
 8011800:	e000      	b.n	8011804 <memp_free+0x3c>
    return;
 8011802:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8011804:	3708      	adds	r7, #8
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}
 801180a:	bf00      	nop
 801180c:	08020714 	.word	0x08020714
 8011810:	080207e4 	.word	0x080207e4
 8011814:	08020768 	.word	0x08020768
 8011818:	08023610 	.word	0x08023610

0801181c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801181c:	b480      	push	{r7}
 801181e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8011820:	bf00      	nop
 8011822:	46bd      	mov	sp, r7
 8011824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011828:	4770      	bx	lr
	...

0801182c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b086      	sub	sp, #24
 8011830:	af00      	add	r7, sp, #0
 8011832:	60f8      	str	r0, [r7, #12]
 8011834:	60b9      	str	r1, [r7, #8]
 8011836:	607a      	str	r2, [r7, #4]
 8011838:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d108      	bne.n	8011852 <netif_add+0x26>
 8011840:	4b61      	ldr	r3, [pc, #388]	@ (80119c8 <netif_add+0x19c>)
 8011842:	f240 1227 	movw	r2, #295	@ 0x127
 8011846:	4961      	ldr	r1, [pc, #388]	@ (80119cc <netif_add+0x1a0>)
 8011848:	4861      	ldr	r0, [pc, #388]	@ (80119d0 <netif_add+0x1a4>)
 801184a:	f00d f8c9 	bl	801e9e0 <iprintf>
 801184e:	2300      	movs	r3, #0
 8011850:	e0b6      	b.n	80119c0 <netif_add+0x194>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8011852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011854:	2b00      	cmp	r3, #0
 8011856:	d108      	bne.n	801186a <netif_add+0x3e>
 8011858:	4b5b      	ldr	r3, [pc, #364]	@ (80119c8 <netif_add+0x19c>)
 801185a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801185e:	495d      	ldr	r1, [pc, #372]	@ (80119d4 <netif_add+0x1a8>)
 8011860:	485b      	ldr	r0, [pc, #364]	@ (80119d0 <netif_add+0x1a4>)
 8011862:	f00d f8bd 	bl	801e9e0 <iprintf>
 8011866:	2300      	movs	r3, #0
 8011868:	e0aa      	b.n	80119c0 <netif_add+0x194>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d101      	bne.n	8011874 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8011870:	4b59      	ldr	r3, [pc, #356]	@ (80119d8 <netif_add+0x1ac>)
 8011872:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d101      	bne.n	801187e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801187a:	4b57      	ldr	r3, [pc, #348]	@ (80119d8 <netif_add+0x1ac>)
 801187c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d101      	bne.n	8011888 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8011884:	4b54      	ldr	r3, [pc, #336]	@ (80119d8 <netif_add+0x1ac>)
 8011886:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	2200      	movs	r2, #0
 801188c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	2200      	movs	r2, #0
 8011892:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	2200      	movs	r2, #0
 8011898:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	4a4f      	ldr	r2, [pc, #316]	@ (80119dc <netif_add+0x1b0>)
 801189e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	2200      	movs	r2, #0
 80118a4:	869a      	strh	r2, [r3, #52]	@ 0x34
  netif->flags = 0;
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	2200      	movs	r2, #0
 80118aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	3324      	adds	r3, #36	@ 0x24
 80118b2:	2210      	movs	r2, #16
 80118b4:	2100      	movs	r1, #0
 80118b6:	4618      	mov	r0, r3
 80118b8:	f00d fa62 	bl	801ed80 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	2200      	movs	r2, #0
 80118c0:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	2200      	movs	r2, #0
 80118c6:	645a      	str	r2, [r3, #68]	@ 0x44
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	6a3a      	ldr	r2, [r7, #32]
 80118cc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80118ce:	4b44      	ldr	r3, [pc, #272]	@ (80119e0 <netif_add+0x1b4>)
 80118d0:	781a      	ldrb	r2, [r3, #0]
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  netif->input = input;
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80118dc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	687a      	ldr	r2, [r7, #4]
 80118e2:	68b9      	ldr	r1, [r7, #8]
 80118e4:	68f8      	ldr	r0, [r7, #12]
 80118e6:	f000 f91d 	bl	8011b24 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80118ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118ec:	68f8      	ldr	r0, [r7, #12]
 80118ee:	4798      	blx	r3
 80118f0:	4603      	mov	r3, r0
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d001      	beq.n	80118fa <netif_add+0xce>
    return NULL;
 80118f6:	2300      	movs	r3, #0
 80118f8:	e062      	b.n	80119c0 <netif_add+0x194>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011900:	2bff      	cmp	r3, #255	@ 0xff
 8011902:	d103      	bne.n	801190c <netif_add+0xe0>
        netif->num = 0;
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	2200      	movs	r2, #0
 8011908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      }
      num_netifs = 0;
 801190c:	2300      	movs	r3, #0
 801190e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011910:	4b34      	ldr	r3, [pc, #208]	@ (80119e4 <netif_add+0x1b8>)
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	617b      	str	r3, [r7, #20]
 8011916:	e02b      	b.n	8011970 <netif_add+0x144>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8011918:	697a      	ldr	r2, [r7, #20]
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	429a      	cmp	r2, r3
 801191e:	d106      	bne.n	801192e <netif_add+0x102>
 8011920:	4b29      	ldr	r3, [pc, #164]	@ (80119c8 <netif_add+0x19c>)
 8011922:	f240 128b 	movw	r2, #395	@ 0x18b
 8011926:	4930      	ldr	r1, [pc, #192]	@ (80119e8 <netif_add+0x1bc>)
 8011928:	4829      	ldr	r0, [pc, #164]	@ (80119d0 <netif_add+0x1a4>)
 801192a:	f00d f859 	bl	801e9e0 <iprintf>
        num_netifs++;
 801192e:	693b      	ldr	r3, [r7, #16]
 8011930:	3301      	adds	r3, #1
 8011932:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8011934:	693b      	ldr	r3, [r7, #16]
 8011936:	2bff      	cmp	r3, #255	@ 0xff
 8011938:	dd06      	ble.n	8011948 <netif_add+0x11c>
 801193a:	4b23      	ldr	r3, [pc, #140]	@ (80119c8 <netif_add+0x19c>)
 801193c:	f240 128d 	movw	r2, #397	@ 0x18d
 8011940:	492a      	ldr	r1, [pc, #168]	@ (80119ec <netif_add+0x1c0>)
 8011942:	4823      	ldr	r0, [pc, #140]	@ (80119d0 <netif_add+0x1a4>)
 8011944:	f00d f84c 	bl	801e9e0 <iprintf>
        if (netif2->num == netif->num) {
 8011948:	697b      	ldr	r3, [r7, #20]
 801194a:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011954:	429a      	cmp	r2, r3
 8011956:	d108      	bne.n	801196a <netif_add+0x13e>
          netif->num++;
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801195e:	3301      	adds	r3, #1
 8011960:	b2da      	uxtb	r2, r3
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          break;
 8011968:	e005      	b.n	8011976 <netif_add+0x14a>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801196a:	697b      	ldr	r3, [r7, #20]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	617b      	str	r3, [r7, #20]
 8011970:	697b      	ldr	r3, [r7, #20]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d1d0      	bne.n	8011918 <netif_add+0xec>
        }
      }
    } while (netif2 != NULL);
 8011976:	697b      	ldr	r3, [r7, #20]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d1be      	bne.n	80118fa <netif_add+0xce>
  }
  if (netif->num == 254) {
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011982:	2bfe      	cmp	r3, #254	@ 0xfe
 8011984:	d103      	bne.n	801198e <netif_add+0x162>
    netif_num = 0;
 8011986:	4b16      	ldr	r3, [pc, #88]	@ (80119e0 <netif_add+0x1b4>)
 8011988:	2200      	movs	r2, #0
 801198a:	701a      	strb	r2, [r3, #0]
 801198c:	e006      	b.n	801199c <netif_add+0x170>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011994:	3301      	adds	r3, #1
 8011996:	b2da      	uxtb	r2, r3
 8011998:	4b11      	ldr	r3, [pc, #68]	@ (80119e0 <netif_add+0x1b4>)
 801199a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801199c:	4b11      	ldr	r3, [pc, #68]	@ (80119e4 <netif_add+0x1b8>)
 801199e:	681a      	ldr	r2, [r3, #0]
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80119a4:	4a0f      	ldr	r2, [pc, #60]	@ (80119e4 <netif_add+0x1b8>)
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	6013      	str	r3, [r2, #0]
#endif /* "LWIP_SINGLE_NETIF */
  mib2_netif_added(netif);

#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80119b0:	f003 0320 	and.w	r3, r3, #32
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d002      	beq.n	80119be <netif_add+0x192>
    igmp_start(netif);
 80119b8:	68f8      	ldr	r0, [r7, #12]
 80119ba:	f00a f9d7 	bl	801bd6c <igmp_start>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80119be:	68fb      	ldr	r3, [r7, #12]
}
 80119c0:	4618      	mov	r0, r3
 80119c2:	3718      	adds	r7, #24
 80119c4:	46bd      	mov	sp, r7
 80119c6:	bd80      	pop	{r7, pc}
 80119c8:	08020800 	.word	0x08020800
 80119cc:	08020894 	.word	0x08020894
 80119d0:	08020850 	.word	0x08020850
 80119d4:	080208b0 	.word	0x080208b0
 80119d8:	080236a0 	.word	0x080236a0
 80119dc:	08011e69 	.word	0x08011e69
 80119e0:	20004798 	.word	0x20004798
 80119e4:	20004790 	.word	0x20004790
 80119e8:	080208d4 	.word	0x080208d4
 80119ec:	080208e8 	.word	0x080208e8

080119f0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b082      	sub	sp, #8
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
 80119f8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80119fa:	6839      	ldr	r1, [r7, #0]
 80119fc:	6878      	ldr	r0, [r7, #4]
 80119fe:	f002 fd89 	bl	8014514 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8011a02:	6839      	ldr	r1, [r7, #0]
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f007 f9ff 	bl	8018e08 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8011a0a:	bf00      	nop
 8011a0c:	3708      	adds	r7, #8
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}
	...

08011a14 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b086      	sub	sp, #24
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	60f8      	str	r0, [r7, #12]
 8011a1c:	60b9      	str	r1, [r7, #8]
 8011a1e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8011a20:	68bb      	ldr	r3, [r7, #8]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d106      	bne.n	8011a34 <netif_do_set_ipaddr+0x20>
 8011a26:	4b1d      	ldr	r3, [pc, #116]	@ (8011a9c <netif_do_set_ipaddr+0x88>)
 8011a28:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8011a2c:	491c      	ldr	r1, [pc, #112]	@ (8011aa0 <netif_do_set_ipaddr+0x8c>)
 8011a2e:	481d      	ldr	r0, [pc, #116]	@ (8011aa4 <netif_do_set_ipaddr+0x90>)
 8011a30:	f00c ffd6 	bl	801e9e0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d106      	bne.n	8011a48 <netif_do_set_ipaddr+0x34>
 8011a3a:	4b18      	ldr	r3, [pc, #96]	@ (8011a9c <netif_do_set_ipaddr+0x88>)
 8011a3c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8011a40:	4917      	ldr	r1, [pc, #92]	@ (8011aa0 <netif_do_set_ipaddr+0x8c>)
 8011a42:	4818      	ldr	r0, [pc, #96]	@ (8011aa4 <netif_do_set_ipaddr+0x90>)
 8011a44:	f00c ffcc 	bl	801e9e0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8011a48:	68bb      	ldr	r3, [r7, #8]
 8011a4a:	681a      	ldr	r2, [r3, #0]
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	3304      	adds	r3, #4
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	429a      	cmp	r2, r3
 8011a54:	d01c      	beq.n	8011a90 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8011a56:	68bb      	ldr	r3, [r7, #8]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	3304      	adds	r3, #4
 8011a60:	681a      	ldr	r2, [r3, #0]
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8011a66:	f107 0314 	add.w	r3, r7, #20
 8011a6a:	4619      	mov	r1, r3
 8011a6c:	6878      	ldr	r0, [r7, #4]
 8011a6e:	f7ff ffbf 	bl	80119f0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d002      	beq.n	8011a7e <netif_do_set_ipaddr+0x6a>
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	e000      	b.n	8011a80 <netif_do_set_ipaddr+0x6c>
 8011a7e:	2300      	movs	r3, #0
 8011a80:	68fa      	ldr	r2, [r7, #12]
 8011a82:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8011a84:	2101      	movs	r1, #1
 8011a86:	68f8      	ldr	r0, [r7, #12]
 8011a88:	f000 f8d2 	bl	8011c30 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	e000      	b.n	8011a92 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8011a90:	2300      	movs	r3, #0
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3718      	adds	r7, #24
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	08020800 	.word	0x08020800
 8011aa0:	08020918 	.word	0x08020918
 8011aa4:	08020850 	.word	0x08020850

08011aa8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b085      	sub	sp, #20
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	60f8      	str	r0, [r7, #12]
 8011ab0:	60b9      	str	r1, [r7, #8]
 8011ab2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	681a      	ldr	r2, [r3, #0]
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	3308      	adds	r3, #8
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	429a      	cmp	r2, r3
 8011ac0:	d00a      	beq.n	8011ad8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8011ac2:	68bb      	ldr	r3, [r7, #8]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d002      	beq.n	8011ace <netif_do_set_netmask+0x26>
 8011ac8:	68bb      	ldr	r3, [r7, #8]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	e000      	b.n	8011ad0 <netif_do_set_netmask+0x28>
 8011ace:	2300      	movs	r3, #0
 8011ad0:	68fa      	ldr	r2, [r7, #12]
 8011ad2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8011ad4:	2301      	movs	r3, #1
 8011ad6:	e000      	b.n	8011ada <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8011ad8:	2300      	movs	r3, #0
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	3714      	adds	r7, #20
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae4:	4770      	bx	lr

08011ae6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8011ae6:	b480      	push	{r7}
 8011ae8:	b085      	sub	sp, #20
 8011aea:	af00      	add	r7, sp, #0
 8011aec:	60f8      	str	r0, [r7, #12]
 8011aee:	60b9      	str	r1, [r7, #8]
 8011af0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8011af2:	68bb      	ldr	r3, [r7, #8]
 8011af4:	681a      	ldr	r2, [r3, #0]
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	330c      	adds	r3, #12
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	429a      	cmp	r2, r3
 8011afe:	d00a      	beq.n	8011b16 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8011b00:	68bb      	ldr	r3, [r7, #8]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d002      	beq.n	8011b0c <netif_do_set_gw+0x26>
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	e000      	b.n	8011b0e <netif_do_set_gw+0x28>
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	68fa      	ldr	r2, [r7, #12]
 8011b10:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8011b12:	2301      	movs	r3, #1
 8011b14:	e000      	b.n	8011b18 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8011b16:	2300      	movs	r3, #0
}
 8011b18:	4618      	mov	r0, r3
 8011b1a:	3714      	adds	r7, #20
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b22:	4770      	bx	lr

08011b24 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b088      	sub	sp, #32
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	60f8      	str	r0, [r7, #12]
 8011b2c:	60b9      	str	r1, [r7, #8]
 8011b2e:	607a      	str	r2, [r7, #4]
 8011b30:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8011b32:	2300      	movs	r3, #0
 8011b34:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8011b36:	2300      	movs	r3, #0
 8011b38:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011b3a:	68bb      	ldr	r3, [r7, #8]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d101      	bne.n	8011b44 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8011b40:	4b1c      	ldr	r3, [pc, #112]	@ (8011bb4 <netif_set_addr+0x90>)
 8011b42:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d101      	bne.n	8011b4e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8011b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8011bb4 <netif_set_addr+0x90>)
 8011b4c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011b4e:	683b      	ldr	r3, [r7, #0]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d101      	bne.n	8011b58 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011b54:	4b17      	ldr	r3, [pc, #92]	@ (8011bb4 <netif_set_addr+0x90>)
 8011b56:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d003      	beq.n	8011b66 <netif_set_addr+0x42>
 8011b5e:	68bb      	ldr	r3, [r7, #8]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d101      	bne.n	8011b6a <netif_set_addr+0x46>
 8011b66:	2301      	movs	r3, #1
 8011b68:	e000      	b.n	8011b6c <netif_set_addr+0x48>
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8011b6e:	697b      	ldr	r3, [r7, #20]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d006      	beq.n	8011b82 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011b74:	f107 0310 	add.w	r3, r7, #16
 8011b78:	461a      	mov	r2, r3
 8011b7a:	68b9      	ldr	r1, [r7, #8]
 8011b7c:	68f8      	ldr	r0, [r7, #12]
 8011b7e:	f7ff ff49 	bl	8011a14 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8011b82:	69fa      	ldr	r2, [r7, #28]
 8011b84:	6879      	ldr	r1, [r7, #4]
 8011b86:	68f8      	ldr	r0, [r7, #12]
 8011b88:	f7ff ff8e 	bl	8011aa8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8011b8c:	69ba      	ldr	r2, [r7, #24]
 8011b8e:	6839      	ldr	r1, [r7, #0]
 8011b90:	68f8      	ldr	r0, [r7, #12]
 8011b92:	f7ff ffa8 	bl	8011ae6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8011b96:	697b      	ldr	r3, [r7, #20]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d106      	bne.n	8011baa <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011b9c:	f107 0310 	add.w	r3, r7, #16
 8011ba0:	461a      	mov	r2, r3
 8011ba2:	68b9      	ldr	r1, [r7, #8]
 8011ba4:	68f8      	ldr	r0, [r7, #12]
 8011ba6:	f7ff ff35 	bl	8011a14 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8011baa:	bf00      	nop
 8011bac:	3720      	adds	r7, #32
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	bd80      	pop	{r7, pc}
 8011bb2:	bf00      	nop
 8011bb4:	080236a0 	.word	0x080236a0

08011bb8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011bb8:	b480      	push	{r7}
 8011bba:	b083      	sub	sp, #12
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8011bc0:	4a04      	ldr	r2, [pc, #16]	@ (8011bd4 <netif_set_default+0x1c>)
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8011bc6:	bf00      	nop
 8011bc8:	370c      	adds	r7, #12
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd0:	4770      	bx	lr
 8011bd2:	bf00      	nop
 8011bd4:	20004794 	.word	0x20004794

08011bd8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b082      	sub	sp, #8
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d107      	bne.n	8011bf6 <netif_set_up+0x1e>
 8011be6:	4b0f      	ldr	r3, [pc, #60]	@ (8011c24 <netif_set_up+0x4c>)
 8011be8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8011bec:	490e      	ldr	r1, [pc, #56]	@ (8011c28 <netif_set_up+0x50>)
 8011bee:	480f      	ldr	r0, [pc, #60]	@ (8011c2c <netif_set_up+0x54>)
 8011bf0:	f00c fef6 	bl	801e9e0 <iprintf>
 8011bf4:	e013      	b.n	8011c1e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011bfc:	f003 0301 	and.w	r3, r3, #1
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d10c      	bne.n	8011c1e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011c0a:	f043 0301 	orr.w	r3, r3, #1
 8011c0e:	b2da      	uxtb	r2, r3
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011c16:	2103      	movs	r1, #3
 8011c18:	6878      	ldr	r0, [r7, #4]
 8011c1a:	f000 f809 	bl	8011c30 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8011c1e:	3708      	adds	r7, #8
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}
 8011c24:	08020800 	.word	0x08020800
 8011c28:	08020988 	.word	0x08020988
 8011c2c:	08020850 	.word	0x08020850

08011c30 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b082      	sub	sp, #8
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
 8011c38:	460b      	mov	r3, r1
 8011c3a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d106      	bne.n	8011c50 <netif_issue_reports+0x20>
 8011c42:	4b1d      	ldr	r3, [pc, #116]	@ (8011cb8 <netif_issue_reports+0x88>)
 8011c44:	f240 326d 	movw	r2, #877	@ 0x36d
 8011c48:	491c      	ldr	r1, [pc, #112]	@ (8011cbc <netif_issue_reports+0x8c>)
 8011c4a:	481d      	ldr	r0, [pc, #116]	@ (8011cc0 <netif_issue_reports+0x90>)
 8011c4c:	f00c fec8 	bl	801e9e0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011c56:	f003 0304 	and.w	r3, r3, #4
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d028      	beq.n	8011cb0 <netif_issue_reports+0x80>
      !(netif->flags & NETIF_FLAG_UP)) {
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011c64:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d021      	beq.n	8011cb0 <netif_issue_reports+0x80>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011c6c:	78fb      	ldrb	r3, [r7, #3]
 8011c6e:	f003 0301 	and.w	r3, r3, #1
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d01d      	beq.n	8011cb2 <netif_issue_reports+0x82>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	3304      	adds	r3, #4
 8011c7a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d018      	beq.n	8011cb2 <netif_issue_reports+0x82>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011c86:	f003 0308 	and.w	r3, r3, #8
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d005      	beq.n	8011c9a <netif_issue_reports+0x6a>
      etharp_gratuitous(netif);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	3304      	adds	r3, #4
 8011c92:	4619      	mov	r1, r3
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f009 feb3 	bl	801ba00 <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011ca0:	f003 0320 	and.w	r3, r3, #32
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d004      	beq.n	8011cb2 <netif_issue_reports+0x82>
      igmp_report_groups(netif);
 8011ca8:	6878      	ldr	r0, [r7, #4]
 8011caa:	f00a f889 	bl	801bdc0 <igmp_report_groups>
 8011cae:	e000      	b.n	8011cb2 <netif_issue_reports+0x82>
    return;
 8011cb0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8011cb2:	3708      	adds	r7, #8
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	bd80      	pop	{r7, pc}
 8011cb8:	08020800 	.word	0x08020800
 8011cbc:	080209a4 	.word	0x080209a4
 8011cc0:	08020850 	.word	0x08020850

08011cc4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b082      	sub	sp, #8
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d107      	bne.n	8011ce2 <netif_set_down+0x1e>
 8011cd2:	4b12      	ldr	r3, [pc, #72]	@ (8011d1c <netif_set_down+0x58>)
 8011cd4:	f240 329b 	movw	r2, #923	@ 0x39b
 8011cd8:	4911      	ldr	r1, [pc, #68]	@ (8011d20 <netif_set_down+0x5c>)
 8011cda:	4812      	ldr	r0, [pc, #72]	@ (8011d24 <netif_set_down+0x60>)
 8011cdc:	f00c fe80 	bl	801e9e0 <iprintf>
 8011ce0:	e019      	b.n	8011d16 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011ce8:	f003 0301 	and.w	r3, r3, #1
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d012      	beq.n	8011d16 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011cf6:	f023 0301 	bic.w	r3, r3, #1
 8011cfa:	b2da      	uxtb	r2, r3
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011d08:	f003 0308 	and.w	r3, r3, #8
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d002      	beq.n	8011d16 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f009 fa2f 	bl	801b174 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8011d16:	3708      	adds	r7, #8
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	08020800 	.word	0x08020800
 8011d20:	080209c8 	.word	0x080209c8
 8011d24:	08020850 	.word	0x08020850

08011d28 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d107      	bne.n	8011d46 <netif_set_link_up+0x1e>
 8011d36:	4b15      	ldr	r3, [pc, #84]	@ (8011d8c <netif_set_link_up+0x64>)
 8011d38:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8011d3c:	4914      	ldr	r1, [pc, #80]	@ (8011d90 <netif_set_link_up+0x68>)
 8011d3e:	4815      	ldr	r0, [pc, #84]	@ (8011d94 <netif_set_link_up+0x6c>)
 8011d40:	f00c fe4e 	bl	801e9e0 <iprintf>
 8011d44:	e01e      	b.n	8011d84 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011d4c:	f003 0304 	and.w	r3, r3, #4
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d117      	bne.n	8011d84 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011d5a:	f043 0304 	orr.w	r3, r3, #4
 8011d5e:	b2da      	uxtb	r2, r3
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8011d66:	6878      	ldr	r0, [r7, #4]
 8011d68:	f007 fc7a 	bl	8019660 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011d6c:	2103      	movs	r1, #3
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f7ff ff5e 	bl	8011c30 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	69db      	ldr	r3, [r3, #28]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d003      	beq.n	8011d84 <netif_set_link_up+0x5c>
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	69db      	ldr	r3, [r3, #28]
 8011d80:	6878      	ldr	r0, [r7, #4]
 8011d82:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011d84:	3708      	adds	r7, #8
 8011d86:	46bd      	mov	sp, r7
 8011d88:	bd80      	pop	{r7, pc}
 8011d8a:	bf00      	nop
 8011d8c:	08020800 	.word	0x08020800
 8011d90:	080209e8 	.word	0x080209e8
 8011d94:	08020850 	.word	0x08020850

08011d98 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b082      	sub	sp, #8
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d107      	bne.n	8011db6 <netif_set_link_down+0x1e>
 8011da6:	4b11      	ldr	r3, [pc, #68]	@ (8011dec <netif_set_link_down+0x54>)
 8011da8:	f240 4206 	movw	r2, #1030	@ 0x406
 8011dac:	4910      	ldr	r1, [pc, #64]	@ (8011df0 <netif_set_link_down+0x58>)
 8011dae:	4811      	ldr	r0, [pc, #68]	@ (8011df4 <netif_set_link_down+0x5c>)
 8011db0:	f00c fe16 	bl	801e9e0 <iprintf>
 8011db4:	e017      	b.n	8011de6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011dbc:	f003 0304 	and.w	r3, r3, #4
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d010      	beq.n	8011de6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011dca:	f023 0304 	bic.w	r3, r3, #4
 8011dce:	b2da      	uxtb	r2, r3
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    NETIF_LINK_CALLBACK(netif);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	69db      	ldr	r3, [r3, #28]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d003      	beq.n	8011de6 <netif_set_link_down+0x4e>
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	69db      	ldr	r3, [r3, #28]
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011de6:	3708      	adds	r7, #8
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}
 8011dec:	08020800 	.word	0x08020800
 8011df0:	08020a0c 	.word	0x08020a0c
 8011df4:	08020850 	.word	0x08020850

08011df8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8011df8:	b480      	push	{r7}
 8011dfa:	b083      	sub	sp, #12
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
 8011e00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d002      	beq.n	8011e0e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	683a      	ldr	r2, [r7, #0]
 8011e0c:	61da      	str	r2, [r3, #28]
  }
}
 8011e0e:	bf00      	nop
 8011e10:	370c      	adds	r7, #12
 8011e12:	46bd      	mov	sp, r7
 8011e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e18:	4770      	bx	lr
	...

08011e1c <netif_alloc_client_data_id>:
 * Returned value is an index in mentioned array.
 * @see LWIP_NUM_NETIF_CLIENT_DATA
 */
u8_t
netif_alloc_client_data_id(void)
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b082      	sub	sp, #8
 8011e20:	af00      	add	r7, sp, #0
  u8_t result = netif_client_id;
 8011e22:	4b0d      	ldr	r3, [pc, #52]	@ (8011e58 <netif_alloc_client_data_id+0x3c>)
 8011e24:	781b      	ldrb	r3, [r3, #0]
 8011e26:	71fb      	strb	r3, [r7, #7]
  netif_client_id++;
 8011e28:	4b0b      	ldr	r3, [pc, #44]	@ (8011e58 <netif_alloc_client_data_id+0x3c>)
 8011e2a:	781b      	ldrb	r3, [r3, #0]
 8011e2c:	3301      	adds	r3, #1
 8011e2e:	b2da      	uxtb	r2, r3
 8011e30:	4b09      	ldr	r3, [pc, #36]	@ (8011e58 <netif_alloc_client_data_id+0x3c>)
 8011e32:	701a      	strb	r2, [r3, #0]
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_NUM_NETIF_CLIENT_DATA > 256
#error LWIP_NUM_NETIF_CLIENT_DATA must be <= 256
#endif
  LWIP_ASSERT("Increase LWIP_NUM_NETIF_CLIENT_DATA in lwipopts.h", result < LWIP_NUM_NETIF_CLIENT_DATA);
 8011e34:	79fb      	ldrb	r3, [r7, #7]
 8011e36:	2b01      	cmp	r3, #1
 8011e38:	d906      	bls.n	8011e48 <netif_alloc_client_data_id+0x2c>
 8011e3a:	4b08      	ldr	r3, [pc, #32]	@ (8011e5c <netif_alloc_client_data_id+0x40>)
 8011e3c:	f240 5211 	movw	r2, #1297	@ 0x511
 8011e40:	4907      	ldr	r1, [pc, #28]	@ (8011e60 <netif_alloc_client_data_id+0x44>)
 8011e42:	4808      	ldr	r0, [pc, #32]	@ (8011e64 <netif_alloc_client_data_id+0x48>)
 8011e44:	f00c fdcc 	bl	801e9e0 <iprintf>
  return (u8_t)(result + LWIP_NETIF_CLIENT_DATA_INDEX_MAX);
 8011e48:	79fb      	ldrb	r3, [r7, #7]
 8011e4a:	3302      	adds	r3, #2
 8011e4c:	b2db      	uxtb	r3, r3
}
 8011e4e:	4618      	mov	r0, r3
 8011e50:	3708      	adds	r7, #8
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}
 8011e56:	bf00      	nop
 8011e58:	20004799 	.word	0x20004799
 8011e5c:	08020800 	.word	0x08020800
 8011e60:	08020a30 	.word	0x08020a30
 8011e64:	08020850 	.word	0x08020850

08011e68 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8011e68:	b480      	push	{r7}
 8011e6a:	b085      	sub	sp, #20
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	60f8      	str	r0, [r7, #12]
 8011e70:	60b9      	str	r1, [r7, #8]
 8011e72:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8011e74:	f06f 030b 	mvn.w	r3, #11
}
 8011e78:	4618      	mov	r0, r3
 8011e7a:	3714      	adds	r7, #20
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e82:	4770      	bx	lr

08011e84 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8011e84:	b480      	push	{r7}
 8011e86:	b085      	sub	sp, #20
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8011e8e:	79fb      	ldrb	r3, [r7, #7]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d013      	beq.n	8011ebc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8011e94:	4b0d      	ldr	r3, [pc, #52]	@ (8011ecc <netif_get_by_index+0x48>)
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	60fb      	str	r3, [r7, #12]
 8011e9a:	e00c      	b.n	8011eb6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011ea2:	3301      	adds	r3, #1
 8011ea4:	b2db      	uxtb	r3, r3
 8011ea6:	79fa      	ldrb	r2, [r7, #7]
 8011ea8:	429a      	cmp	r2, r3
 8011eaa:	d101      	bne.n	8011eb0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	e006      	b.n	8011ebe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	60fb      	str	r3, [r7, #12]
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d1ef      	bne.n	8011e9c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011ebc:	2300      	movs	r3, #0
}
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	3714      	adds	r7, #20
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec8:	4770      	bx	lr
 8011eca:	bf00      	nop
 8011ecc:	20004790 	.word	0x20004790

08011ed0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b082      	sub	sp, #8
 8011ed4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8011ed6:	f00b fe11 	bl	801dafc <sys_arch_protect>
 8011eda:	6038      	str	r0, [r7, #0]
 8011edc:	4b0d      	ldr	r3, [pc, #52]	@ (8011f14 <pbuf_free_ooseq+0x44>)
 8011ede:	2200      	movs	r2, #0
 8011ee0:	701a      	strb	r2, [r3, #0]
 8011ee2:	6838      	ldr	r0, [r7, #0]
 8011ee4:	f00b fe18 	bl	801db18 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8011f18 <pbuf_free_ooseq+0x48>)
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	607b      	str	r3, [r7, #4]
 8011eee:	e00a      	b.n	8011f06 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d003      	beq.n	8011f00 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f002 fb49 	bl	8014590 <tcp_free_ooseq>
      return;
 8011efe:	e005      	b.n	8011f0c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	68db      	ldr	r3, [r3, #12]
 8011f04:	607b      	str	r3, [r7, #4]
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d1f1      	bne.n	8011ef0 <pbuf_free_ooseq+0x20>
    }
  }
}
 8011f0c:	3708      	adds	r7, #8
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd80      	pop	{r7, pc}
 8011f12:	bf00      	nop
 8011f14:	2000479a 	.word	0x2000479a
 8011f18:	200047a8 	.word	0x200047a8

08011f1c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b082      	sub	sp, #8
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8011f24:	f7ff ffd4 	bl	8011ed0 <pbuf_free_ooseq>
}
 8011f28:	bf00      	nop
 8011f2a:	3708      	adds	r7, #8
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bd80      	pop	{r7, pc}

08011f30 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8011f36:	f00b fde1 	bl	801dafc <sys_arch_protect>
 8011f3a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8011f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8011f7c <pbuf_pool_is_empty+0x4c>)
 8011f3e:	781b      	ldrb	r3, [r3, #0]
 8011f40:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8011f42:	4b0e      	ldr	r3, [pc, #56]	@ (8011f7c <pbuf_pool_is_empty+0x4c>)
 8011f44:	2201      	movs	r2, #1
 8011f46:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f00b fde5 	bl	801db18 <sys_arch_unprotect>

  if (!queued) {
 8011f4e:	78fb      	ldrb	r3, [r7, #3]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d10f      	bne.n	8011f74 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8011f54:	2100      	movs	r1, #0
 8011f56:	480a      	ldr	r0, [pc, #40]	@ (8011f80 <pbuf_pool_is_empty+0x50>)
 8011f58:	f7fb fe68 	bl	800dc2c <tcpip_try_callback>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d008      	beq.n	8011f74 <pbuf_pool_is_empty+0x44>
 8011f62:	f00b fdcb 	bl	801dafc <sys_arch_protect>
 8011f66:	6078      	str	r0, [r7, #4]
 8011f68:	4b04      	ldr	r3, [pc, #16]	@ (8011f7c <pbuf_pool_is_empty+0x4c>)
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	701a      	strb	r2, [r3, #0]
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f00b fdd2 	bl	801db18 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8011f74:	bf00      	nop
 8011f76:	3708      	adds	r7, #8
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	bd80      	pop	{r7, pc}
 8011f7c:	2000479a 	.word	0x2000479a
 8011f80:	08011f1d 	.word	0x08011f1d

08011f84 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8011f84:	b480      	push	{r7}
 8011f86:	b085      	sub	sp, #20
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	60f8      	str	r0, [r7, #12]
 8011f8c:	60b9      	str	r1, [r7, #8]
 8011f8e:	4611      	mov	r1, r2
 8011f90:	461a      	mov	r2, r3
 8011f92:	460b      	mov	r3, r1
 8011f94:	80fb      	strh	r3, [r7, #6]
 8011f96:	4613      	mov	r3, r2
 8011f98:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	68ba      	ldr	r2, [r7, #8]
 8011fa4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	88fa      	ldrh	r2, [r7, #6]
 8011faa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	88ba      	ldrh	r2, [r7, #4]
 8011fb0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8011fb2:	8b3b      	ldrh	r3, [r7, #24]
 8011fb4:	b2da      	uxtb	r2, r3
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	7f3a      	ldrb	r2, [r7, #28]
 8011fbe:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	2201      	movs	r2, #1
 8011fc4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	2200      	movs	r2, #0
 8011fca:	73da      	strb	r2, [r3, #15]
}
 8011fcc:	bf00      	nop
 8011fce:	3714      	adds	r7, #20
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd6:	4770      	bx	lr

08011fd8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b08c      	sub	sp, #48	@ 0x30
 8011fdc:	af02      	add	r7, sp, #8
 8011fde:	4603      	mov	r3, r0
 8011fe0:	71fb      	strb	r3, [r7, #7]
 8011fe2:	460b      	mov	r3, r1
 8011fe4:	80bb      	strh	r3, [r7, #4]
 8011fe6:	4613      	mov	r3, r2
 8011fe8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011fea:	79fb      	ldrb	r3, [r7, #7]
 8011fec:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8011fee:	887b      	ldrh	r3, [r7, #2]
 8011ff0:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8011ff4:	d07f      	beq.n	80120f6 <pbuf_alloc+0x11e>
 8011ff6:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8011ffa:	f300 80c8 	bgt.w	801218e <pbuf_alloc+0x1b6>
 8011ffe:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8012002:	d010      	beq.n	8012026 <pbuf_alloc+0x4e>
 8012004:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8012008:	f300 80c1 	bgt.w	801218e <pbuf_alloc+0x1b6>
 801200c:	2b01      	cmp	r3, #1
 801200e:	d002      	beq.n	8012016 <pbuf_alloc+0x3e>
 8012010:	2b41      	cmp	r3, #65	@ 0x41
 8012012:	f040 80bc 	bne.w	801218e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8012016:	887a      	ldrh	r2, [r7, #2]
 8012018:	88bb      	ldrh	r3, [r7, #4]
 801201a:	4619      	mov	r1, r3
 801201c:	2000      	movs	r0, #0
 801201e:	f000 f8d1 	bl	80121c4 <pbuf_alloc_reference>
 8012022:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8012024:	e0bd      	b.n	80121a2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8012026:	2300      	movs	r3, #0
 8012028:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 801202a:	2300      	movs	r3, #0
 801202c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801202e:	88bb      	ldrh	r3, [r7, #4]
 8012030:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8012032:	200d      	movs	r0, #13
 8012034:	f7ff fb58 	bl	80116e8 <memp_malloc>
 8012038:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801203a:	693b      	ldr	r3, [r7, #16]
 801203c:	2b00      	cmp	r3, #0
 801203e:	d109      	bne.n	8012054 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8012040:	f7ff ff76 	bl	8011f30 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8012044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012046:	2b00      	cmp	r3, #0
 8012048:	d002      	beq.n	8012050 <pbuf_alloc+0x78>
            pbuf_free(p);
 801204a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801204c:	f000 faa8 	bl	80125a0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8012050:	2300      	movs	r3, #0
 8012052:	e0a7      	b.n	80121a4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8012054:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012056:	3303      	adds	r3, #3
 8012058:	b29b      	uxth	r3, r3
 801205a:	f023 0303 	bic.w	r3, r3, #3
 801205e:	b29b      	uxth	r3, r3
 8012060:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8012064:	b29b      	uxth	r3, r3
 8012066:	8b7a      	ldrh	r2, [r7, #26]
 8012068:	4293      	cmp	r3, r2
 801206a:	bf28      	it	cs
 801206c:	4613      	movcs	r3, r2
 801206e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8012070:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012072:	3310      	adds	r3, #16
 8012074:	693a      	ldr	r2, [r7, #16]
 8012076:	4413      	add	r3, r2
 8012078:	3303      	adds	r3, #3
 801207a:	f023 0303 	bic.w	r3, r3, #3
 801207e:	4618      	mov	r0, r3
 8012080:	89f9      	ldrh	r1, [r7, #14]
 8012082:	8b7a      	ldrh	r2, [r7, #26]
 8012084:	2300      	movs	r3, #0
 8012086:	9301      	str	r3, [sp, #4]
 8012088:	887b      	ldrh	r3, [r7, #2]
 801208a:	9300      	str	r3, [sp, #0]
 801208c:	460b      	mov	r3, r1
 801208e:	4601      	mov	r1, r0
 8012090:	6938      	ldr	r0, [r7, #16]
 8012092:	f7ff ff77 	bl	8011f84 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8012096:	693b      	ldr	r3, [r7, #16]
 8012098:	685b      	ldr	r3, [r3, #4]
 801209a:	f003 0303 	and.w	r3, r3, #3
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d006      	beq.n	80120b0 <pbuf_alloc+0xd8>
 80120a2:	4b42      	ldr	r3, [pc, #264]	@ (80121ac <pbuf_alloc+0x1d4>)
 80120a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80120a8:	4941      	ldr	r1, [pc, #260]	@ (80121b0 <pbuf_alloc+0x1d8>)
 80120aa:	4842      	ldr	r0, [pc, #264]	@ (80121b4 <pbuf_alloc+0x1dc>)
 80120ac:	f00c fc98 	bl	801e9e0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80120b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80120b2:	3303      	adds	r3, #3
 80120b4:	f023 0303 	bic.w	r3, r3, #3
 80120b8:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80120bc:	d106      	bne.n	80120cc <pbuf_alloc+0xf4>
 80120be:	4b3b      	ldr	r3, [pc, #236]	@ (80121ac <pbuf_alloc+0x1d4>)
 80120c0:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80120c4:	493c      	ldr	r1, [pc, #240]	@ (80121b8 <pbuf_alloc+0x1e0>)
 80120c6:	483b      	ldr	r0, [pc, #236]	@ (80121b4 <pbuf_alloc+0x1dc>)
 80120c8:	f00c fc8a 	bl	801e9e0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80120cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d102      	bne.n	80120d8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80120d2:	693b      	ldr	r3, [r7, #16]
 80120d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80120d6:	e002      	b.n	80120de <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80120d8:	69fb      	ldr	r3, [r7, #28]
 80120da:	693a      	ldr	r2, [r7, #16]
 80120dc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80120de:	693b      	ldr	r3, [r7, #16]
 80120e0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80120e2:	8b7a      	ldrh	r2, [r7, #26]
 80120e4:	89fb      	ldrh	r3, [r7, #14]
 80120e6:	1ad3      	subs	r3, r2, r3
 80120e8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80120ea:	2300      	movs	r3, #0
 80120ec:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80120ee:	8b7b      	ldrh	r3, [r7, #26]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d19e      	bne.n	8012032 <pbuf_alloc+0x5a>
      break;
 80120f4:	e055      	b.n	80121a2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80120f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80120f8:	3303      	adds	r3, #3
 80120fa:	b29b      	uxth	r3, r3
 80120fc:	f023 0303 	bic.w	r3, r3, #3
 8012100:	b29a      	uxth	r2, r3
 8012102:	88bb      	ldrh	r3, [r7, #4]
 8012104:	3303      	adds	r3, #3
 8012106:	b29b      	uxth	r3, r3
 8012108:	f023 0303 	bic.w	r3, r3, #3
 801210c:	b29b      	uxth	r3, r3
 801210e:	4413      	add	r3, r2
 8012110:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8012112:	8b3b      	ldrh	r3, [r7, #24]
 8012114:	3310      	adds	r3, #16
 8012116:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012118:	8b3a      	ldrh	r2, [r7, #24]
 801211a:	88bb      	ldrh	r3, [r7, #4]
 801211c:	3303      	adds	r3, #3
 801211e:	f023 0303 	bic.w	r3, r3, #3
 8012122:	429a      	cmp	r2, r3
 8012124:	d306      	bcc.n	8012134 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8012126:	8afa      	ldrh	r2, [r7, #22]
 8012128:	88bb      	ldrh	r3, [r7, #4]
 801212a:	3303      	adds	r3, #3
 801212c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012130:	429a      	cmp	r2, r3
 8012132:	d201      	bcs.n	8012138 <pbuf_alloc+0x160>
        return NULL;
 8012134:	2300      	movs	r3, #0
 8012136:	e035      	b.n	80121a4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8012138:	8afb      	ldrh	r3, [r7, #22]
 801213a:	4618      	mov	r0, r3
 801213c:	f7ff f92c 	bl	8011398 <mem_malloc>
 8012140:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8012142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012144:	2b00      	cmp	r3, #0
 8012146:	d101      	bne.n	801214c <pbuf_alloc+0x174>
        return NULL;
 8012148:	2300      	movs	r3, #0
 801214a:	e02b      	b.n	80121a4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801214c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801214e:	3310      	adds	r3, #16
 8012150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012152:	4413      	add	r3, r2
 8012154:	3303      	adds	r3, #3
 8012156:	f023 0303 	bic.w	r3, r3, #3
 801215a:	4618      	mov	r0, r3
 801215c:	88b9      	ldrh	r1, [r7, #4]
 801215e:	88ba      	ldrh	r2, [r7, #4]
 8012160:	2300      	movs	r3, #0
 8012162:	9301      	str	r3, [sp, #4]
 8012164:	887b      	ldrh	r3, [r7, #2]
 8012166:	9300      	str	r3, [sp, #0]
 8012168:	460b      	mov	r3, r1
 801216a:	4601      	mov	r1, r0
 801216c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801216e:	f7ff ff09 	bl	8011f84 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8012172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012174:	685b      	ldr	r3, [r3, #4]
 8012176:	f003 0303 	and.w	r3, r3, #3
 801217a:	2b00      	cmp	r3, #0
 801217c:	d010      	beq.n	80121a0 <pbuf_alloc+0x1c8>
 801217e:	4b0b      	ldr	r3, [pc, #44]	@ (80121ac <pbuf_alloc+0x1d4>)
 8012180:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8012184:	490d      	ldr	r1, [pc, #52]	@ (80121bc <pbuf_alloc+0x1e4>)
 8012186:	480b      	ldr	r0, [pc, #44]	@ (80121b4 <pbuf_alloc+0x1dc>)
 8012188:	f00c fc2a 	bl	801e9e0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801218c:	e008      	b.n	80121a0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801218e:	4b07      	ldr	r3, [pc, #28]	@ (80121ac <pbuf_alloc+0x1d4>)
 8012190:	f240 1227 	movw	r2, #295	@ 0x127
 8012194:	490a      	ldr	r1, [pc, #40]	@ (80121c0 <pbuf_alloc+0x1e8>)
 8012196:	4807      	ldr	r0, [pc, #28]	@ (80121b4 <pbuf_alloc+0x1dc>)
 8012198:	f00c fc22 	bl	801e9e0 <iprintf>
      return NULL;
 801219c:	2300      	movs	r3, #0
 801219e:	e001      	b.n	80121a4 <pbuf_alloc+0x1cc>
      break;
 80121a0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80121a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80121a4:	4618      	mov	r0, r3
 80121a6:	3728      	adds	r7, #40	@ 0x28
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd80      	pop	{r7, pc}
 80121ac:	08020a64 	.word	0x08020a64
 80121b0:	08020a94 	.word	0x08020a94
 80121b4:	08020ac4 	.word	0x08020ac4
 80121b8:	08020aec 	.word	0x08020aec
 80121bc:	08020b20 	.word	0x08020b20
 80121c0:	08020b4c 	.word	0x08020b4c

080121c4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b086      	sub	sp, #24
 80121c8:	af02      	add	r7, sp, #8
 80121ca:	6078      	str	r0, [r7, #4]
 80121cc:	460b      	mov	r3, r1
 80121ce:	807b      	strh	r3, [r7, #2]
 80121d0:	4613      	mov	r3, r2
 80121d2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80121d4:	883b      	ldrh	r3, [r7, #0]
 80121d6:	2b41      	cmp	r3, #65	@ 0x41
 80121d8:	d009      	beq.n	80121ee <pbuf_alloc_reference+0x2a>
 80121da:	883b      	ldrh	r3, [r7, #0]
 80121dc:	2b01      	cmp	r3, #1
 80121de:	d006      	beq.n	80121ee <pbuf_alloc_reference+0x2a>
 80121e0:	4b0f      	ldr	r3, [pc, #60]	@ (8012220 <pbuf_alloc_reference+0x5c>)
 80121e2:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80121e6:	490f      	ldr	r1, [pc, #60]	@ (8012224 <pbuf_alloc_reference+0x60>)
 80121e8:	480f      	ldr	r0, [pc, #60]	@ (8012228 <pbuf_alloc_reference+0x64>)
 80121ea:	f00c fbf9 	bl	801e9e0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80121ee:	200c      	movs	r0, #12
 80121f0:	f7ff fa7a 	bl	80116e8 <memp_malloc>
 80121f4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d101      	bne.n	8012200 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80121fc:	2300      	movs	r3, #0
 80121fe:	e00b      	b.n	8012218 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8012200:	8879      	ldrh	r1, [r7, #2]
 8012202:	887a      	ldrh	r2, [r7, #2]
 8012204:	2300      	movs	r3, #0
 8012206:	9301      	str	r3, [sp, #4]
 8012208:	883b      	ldrh	r3, [r7, #0]
 801220a:	9300      	str	r3, [sp, #0]
 801220c:	460b      	mov	r3, r1
 801220e:	6879      	ldr	r1, [r7, #4]
 8012210:	68f8      	ldr	r0, [r7, #12]
 8012212:	f7ff feb7 	bl	8011f84 <pbuf_init_alloced_pbuf>
  return p;
 8012216:	68fb      	ldr	r3, [r7, #12]
}
 8012218:	4618      	mov	r0, r3
 801221a:	3710      	adds	r7, #16
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}
 8012220:	08020a64 	.word	0x08020a64
 8012224:	08020b68 	.word	0x08020b68
 8012228:	08020ac4 	.word	0x08020ac4

0801222c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b088      	sub	sp, #32
 8012230:	af02      	add	r7, sp, #8
 8012232:	607b      	str	r3, [r7, #4]
 8012234:	4603      	mov	r3, r0
 8012236:	73fb      	strb	r3, [r7, #15]
 8012238:	460b      	mov	r3, r1
 801223a:	81bb      	strh	r3, [r7, #12]
 801223c:	4613      	mov	r3, r2
 801223e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8012240:	7bfb      	ldrb	r3, [r7, #15]
 8012242:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8012244:	8a7b      	ldrh	r3, [r7, #18]
 8012246:	3303      	adds	r3, #3
 8012248:	f023 0203 	bic.w	r2, r3, #3
 801224c:	89bb      	ldrh	r3, [r7, #12]
 801224e:	441a      	add	r2, r3
 8012250:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012252:	429a      	cmp	r2, r3
 8012254:	d901      	bls.n	801225a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8012256:	2300      	movs	r3, #0
 8012258:	e018      	b.n	801228c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801225a:	6a3b      	ldr	r3, [r7, #32]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d007      	beq.n	8012270 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012260:	8a7b      	ldrh	r3, [r7, #18]
 8012262:	3303      	adds	r3, #3
 8012264:	f023 0303 	bic.w	r3, r3, #3
 8012268:	6a3a      	ldr	r2, [r7, #32]
 801226a:	4413      	add	r3, r2
 801226c:	617b      	str	r3, [r7, #20]
 801226e:	e001      	b.n	8012274 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8012270:	2300      	movs	r3, #0
 8012272:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8012274:	6878      	ldr	r0, [r7, #4]
 8012276:	89b9      	ldrh	r1, [r7, #12]
 8012278:	89ba      	ldrh	r2, [r7, #12]
 801227a:	2302      	movs	r3, #2
 801227c:	9301      	str	r3, [sp, #4]
 801227e:	897b      	ldrh	r3, [r7, #10]
 8012280:	9300      	str	r3, [sp, #0]
 8012282:	460b      	mov	r3, r1
 8012284:	6979      	ldr	r1, [r7, #20]
 8012286:	f7ff fe7d 	bl	8011f84 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801228a:	687b      	ldr	r3, [r7, #4]
}
 801228c:	4618      	mov	r0, r3
 801228e:	3718      	adds	r7, #24
 8012290:	46bd      	mov	sp, r7
 8012292:	bd80      	pop	{r7, pc}

08012294 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b084      	sub	sp, #16
 8012298:	af00      	add	r7, sp, #0
 801229a:	6078      	str	r0, [r7, #4]
 801229c:	460b      	mov	r3, r1
 801229e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d106      	bne.n	80122b4 <pbuf_realloc+0x20>
 80122a6:	4b3a      	ldr	r3, [pc, #232]	@ (8012390 <pbuf_realloc+0xfc>)
 80122a8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80122ac:	4939      	ldr	r1, [pc, #228]	@ (8012394 <pbuf_realloc+0x100>)
 80122ae:	483a      	ldr	r0, [pc, #232]	@ (8012398 <pbuf_realloc+0x104>)
 80122b0:	f00c fb96 	bl	801e9e0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	891b      	ldrh	r3, [r3, #8]
 80122b8:	887a      	ldrh	r2, [r7, #2]
 80122ba:	429a      	cmp	r2, r3
 80122bc:	d263      	bcs.n	8012386 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	891a      	ldrh	r2, [r3, #8]
 80122c2:	887b      	ldrh	r3, [r7, #2]
 80122c4:	1ad3      	subs	r3, r2, r3
 80122c6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80122c8:	887b      	ldrh	r3, [r7, #2]
 80122ca:	817b      	strh	r3, [r7, #10]
  q = p;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80122d0:	e018      	b.n	8012304 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	895b      	ldrh	r3, [r3, #10]
 80122d6:	897a      	ldrh	r2, [r7, #10]
 80122d8:	1ad3      	subs	r3, r2, r3
 80122da:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	891a      	ldrh	r2, [r3, #8]
 80122e0:	893b      	ldrh	r3, [r7, #8]
 80122e2:	1ad3      	subs	r3, r2, r3
 80122e4:	b29a      	uxth	r2, r3
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d106      	bne.n	8012304 <pbuf_realloc+0x70>
 80122f6:	4b26      	ldr	r3, [pc, #152]	@ (8012390 <pbuf_realloc+0xfc>)
 80122f8:	f240 12af 	movw	r2, #431	@ 0x1af
 80122fc:	4927      	ldr	r1, [pc, #156]	@ (801239c <pbuf_realloc+0x108>)
 80122fe:	4826      	ldr	r0, [pc, #152]	@ (8012398 <pbuf_realloc+0x104>)
 8012300:	f00c fb6e 	bl	801e9e0 <iprintf>
  while (rem_len > q->len) {
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	895b      	ldrh	r3, [r3, #10]
 8012308:	897a      	ldrh	r2, [r7, #10]
 801230a:	429a      	cmp	r2, r3
 801230c:	d8e1      	bhi.n	80122d2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	7b1b      	ldrb	r3, [r3, #12]
 8012312:	f003 030f 	and.w	r3, r3, #15
 8012316:	2b00      	cmp	r3, #0
 8012318:	d121      	bne.n	801235e <pbuf_realloc+0xca>
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	895b      	ldrh	r3, [r3, #10]
 801231e:	897a      	ldrh	r2, [r7, #10]
 8012320:	429a      	cmp	r2, r3
 8012322:	d01c      	beq.n	801235e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	7b5b      	ldrb	r3, [r3, #13]
 8012328:	f003 0302 	and.w	r3, r3, #2
 801232c:	2b00      	cmp	r3, #0
 801232e:	d116      	bne.n	801235e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	685a      	ldr	r2, [r3, #4]
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	1ad3      	subs	r3, r2, r3
 8012338:	b29a      	uxth	r2, r3
 801233a:	897b      	ldrh	r3, [r7, #10]
 801233c:	4413      	add	r3, r2
 801233e:	b29b      	uxth	r3, r3
 8012340:	4619      	mov	r1, r3
 8012342:	68f8      	ldr	r0, [r7, #12]
 8012344:	f7fe ff1e 	bl	8011184 <mem_trim>
 8012348:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d106      	bne.n	801235e <pbuf_realloc+0xca>
 8012350:	4b0f      	ldr	r3, [pc, #60]	@ (8012390 <pbuf_realloc+0xfc>)
 8012352:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8012356:	4912      	ldr	r1, [pc, #72]	@ (80123a0 <pbuf_realloc+0x10c>)
 8012358:	480f      	ldr	r0, [pc, #60]	@ (8012398 <pbuf_realloc+0x104>)
 801235a:	f00c fb41 	bl	801e9e0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	897a      	ldrh	r2, [r7, #10]
 8012362:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	895a      	ldrh	r2, [r3, #10]
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d004      	beq.n	801237e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	4618      	mov	r0, r3
 801237a:	f000 f911 	bl	80125a0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	2200      	movs	r2, #0
 8012382:	601a      	str	r2, [r3, #0]
 8012384:	e000      	b.n	8012388 <pbuf_realloc+0xf4>
    return;
 8012386:	bf00      	nop

}
 8012388:	3710      	adds	r7, #16
 801238a:	46bd      	mov	sp, r7
 801238c:	bd80      	pop	{r7, pc}
 801238e:	bf00      	nop
 8012390:	08020a64 	.word	0x08020a64
 8012394:	08020b7c 	.word	0x08020b7c
 8012398:	08020ac4 	.word	0x08020ac4
 801239c:	08020b94 	.word	0x08020b94
 80123a0:	08020bac 	.word	0x08020bac

080123a4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b086      	sub	sp, #24
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	60f8      	str	r0, [r7, #12]
 80123ac:	60b9      	str	r1, [r7, #8]
 80123ae:	4613      	mov	r3, r2
 80123b0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d106      	bne.n	80123c6 <pbuf_add_header_impl+0x22>
 80123b8:	4b2b      	ldr	r3, [pc, #172]	@ (8012468 <pbuf_add_header_impl+0xc4>)
 80123ba:	f240 12df 	movw	r2, #479	@ 0x1df
 80123be:	492b      	ldr	r1, [pc, #172]	@ (801246c <pbuf_add_header_impl+0xc8>)
 80123c0:	482b      	ldr	r0, [pc, #172]	@ (8012470 <pbuf_add_header_impl+0xcc>)
 80123c2:	f00c fb0d 	bl	801e9e0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d003      	beq.n	80123d4 <pbuf_add_header_impl+0x30>
 80123cc:	68bb      	ldr	r3, [r7, #8]
 80123ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80123d2:	d301      	bcc.n	80123d8 <pbuf_add_header_impl+0x34>
    return 1;
 80123d4:	2301      	movs	r3, #1
 80123d6:	e043      	b.n	8012460 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80123d8:	68bb      	ldr	r3, [r7, #8]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d101      	bne.n	80123e2 <pbuf_add_header_impl+0x3e>
    return 0;
 80123de:	2300      	movs	r3, #0
 80123e0:	e03e      	b.n	8012460 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80123e2:	68bb      	ldr	r3, [r7, #8]
 80123e4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	891a      	ldrh	r2, [r3, #8]
 80123ea:	8a7b      	ldrh	r3, [r7, #18]
 80123ec:	4413      	add	r3, r2
 80123ee:	b29b      	uxth	r3, r3
 80123f0:	8a7a      	ldrh	r2, [r7, #18]
 80123f2:	429a      	cmp	r2, r3
 80123f4:	d901      	bls.n	80123fa <pbuf_add_header_impl+0x56>
    return 1;
 80123f6:	2301      	movs	r3, #1
 80123f8:	e032      	b.n	8012460 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	7b1b      	ldrb	r3, [r3, #12]
 80123fe:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012400:	8a3b      	ldrh	r3, [r7, #16]
 8012402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012406:	2b00      	cmp	r3, #0
 8012408:	d00c      	beq.n	8012424 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	685a      	ldr	r2, [r3, #4]
 801240e:	68bb      	ldr	r3, [r7, #8]
 8012410:	425b      	negs	r3, r3
 8012412:	4413      	add	r3, r2
 8012414:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	3310      	adds	r3, #16
 801241a:	697a      	ldr	r2, [r7, #20]
 801241c:	429a      	cmp	r2, r3
 801241e:	d20d      	bcs.n	801243c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012420:	2301      	movs	r3, #1
 8012422:	e01d      	b.n	8012460 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8012424:	79fb      	ldrb	r3, [r7, #7]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d006      	beq.n	8012438 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	685a      	ldr	r2, [r3, #4]
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	425b      	negs	r3, r3
 8012432:	4413      	add	r3, r2
 8012434:	617b      	str	r3, [r7, #20]
 8012436:	e001      	b.n	801243c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012438:	2301      	movs	r3, #1
 801243a:	e011      	b.n	8012460 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	697a      	ldr	r2, [r7, #20]
 8012440:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	895a      	ldrh	r2, [r3, #10]
 8012446:	8a7b      	ldrh	r3, [r7, #18]
 8012448:	4413      	add	r3, r2
 801244a:	b29a      	uxth	r2, r3
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	891a      	ldrh	r2, [r3, #8]
 8012454:	8a7b      	ldrh	r3, [r7, #18]
 8012456:	4413      	add	r3, r2
 8012458:	b29a      	uxth	r2, r3
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	811a      	strh	r2, [r3, #8]


  return 0;
 801245e:	2300      	movs	r3, #0
}
 8012460:	4618      	mov	r0, r3
 8012462:	3718      	adds	r7, #24
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}
 8012468:	08020a64 	.word	0x08020a64
 801246c:	08020bc8 	.word	0x08020bc8
 8012470:	08020ac4 	.word	0x08020ac4

08012474 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b082      	sub	sp, #8
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
 801247c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801247e:	2200      	movs	r2, #0
 8012480:	6839      	ldr	r1, [r7, #0]
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	f7ff ff8e 	bl	80123a4 <pbuf_add_header_impl>
 8012488:	4603      	mov	r3, r0
}
 801248a:	4618      	mov	r0, r3
 801248c:	3708      	adds	r7, #8
 801248e:	46bd      	mov	sp, r7
 8012490:	bd80      	pop	{r7, pc}
	...

08012494 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b084      	sub	sp, #16
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
 801249c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d106      	bne.n	80124b2 <pbuf_remove_header+0x1e>
 80124a4:	4b20      	ldr	r3, [pc, #128]	@ (8012528 <pbuf_remove_header+0x94>)
 80124a6:	f240 224b 	movw	r2, #587	@ 0x24b
 80124aa:	4920      	ldr	r1, [pc, #128]	@ (801252c <pbuf_remove_header+0x98>)
 80124ac:	4820      	ldr	r0, [pc, #128]	@ (8012530 <pbuf_remove_header+0x9c>)
 80124ae:	f00c fa97 	bl	801e9e0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d003      	beq.n	80124c0 <pbuf_remove_header+0x2c>
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80124be:	d301      	bcc.n	80124c4 <pbuf_remove_header+0x30>
    return 1;
 80124c0:	2301      	movs	r3, #1
 80124c2:	e02c      	b.n	801251e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80124c4:	683b      	ldr	r3, [r7, #0]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d101      	bne.n	80124ce <pbuf_remove_header+0x3a>
    return 0;
 80124ca:	2300      	movs	r3, #0
 80124cc:	e027      	b.n	801251e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	895b      	ldrh	r3, [r3, #10]
 80124d6:	89fa      	ldrh	r2, [r7, #14]
 80124d8:	429a      	cmp	r2, r3
 80124da:	d908      	bls.n	80124ee <pbuf_remove_header+0x5a>
 80124dc:	4b12      	ldr	r3, [pc, #72]	@ (8012528 <pbuf_remove_header+0x94>)
 80124de:	f240 2255 	movw	r2, #597	@ 0x255
 80124e2:	4914      	ldr	r1, [pc, #80]	@ (8012534 <pbuf_remove_header+0xa0>)
 80124e4:	4812      	ldr	r0, [pc, #72]	@ (8012530 <pbuf_remove_header+0x9c>)
 80124e6:	f00c fa7b 	bl	801e9e0 <iprintf>
 80124ea:	2301      	movs	r3, #1
 80124ec:	e017      	b.n	801251e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	685b      	ldr	r3, [r3, #4]
 80124f2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	685a      	ldr	r2, [r3, #4]
 80124f8:	683b      	ldr	r3, [r7, #0]
 80124fa:	441a      	add	r2, r3
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	895a      	ldrh	r2, [r3, #10]
 8012504:	89fb      	ldrh	r3, [r7, #14]
 8012506:	1ad3      	subs	r3, r2, r3
 8012508:	b29a      	uxth	r2, r3
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	891a      	ldrh	r2, [r3, #8]
 8012512:	89fb      	ldrh	r3, [r7, #14]
 8012514:	1ad3      	subs	r3, r2, r3
 8012516:	b29a      	uxth	r2, r3
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801251c:	2300      	movs	r3, #0
}
 801251e:	4618      	mov	r0, r3
 8012520:	3710      	adds	r7, #16
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}
 8012526:	bf00      	nop
 8012528:	08020a64 	.word	0x08020a64
 801252c:	08020bc8 	.word	0x08020bc8
 8012530:	08020ac4 	.word	0x08020ac4
 8012534:	08020bd4 	.word	0x08020bd4

08012538 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b082      	sub	sp, #8
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
 8012540:	460b      	mov	r3, r1
 8012542:	807b      	strh	r3, [r7, #2]
 8012544:	4613      	mov	r3, r2
 8012546:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012548:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801254c:	2b00      	cmp	r3, #0
 801254e:	da08      	bge.n	8012562 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012550:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012554:	425b      	negs	r3, r3
 8012556:	4619      	mov	r1, r3
 8012558:	6878      	ldr	r0, [r7, #4]
 801255a:	f7ff ff9b 	bl	8012494 <pbuf_remove_header>
 801255e:	4603      	mov	r3, r0
 8012560:	e007      	b.n	8012572 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8012562:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012566:	787a      	ldrb	r2, [r7, #1]
 8012568:	4619      	mov	r1, r3
 801256a:	6878      	ldr	r0, [r7, #4]
 801256c:	f7ff ff1a 	bl	80123a4 <pbuf_add_header_impl>
 8012570:	4603      	mov	r3, r0
  }
}
 8012572:	4618      	mov	r0, r3
 8012574:	3708      	adds	r7, #8
 8012576:	46bd      	mov	sp, r7
 8012578:	bd80      	pop	{r7, pc}

0801257a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801257a:	b580      	push	{r7, lr}
 801257c:	b082      	sub	sp, #8
 801257e:	af00      	add	r7, sp, #0
 8012580:	6078      	str	r0, [r7, #4]
 8012582:	460b      	mov	r3, r1
 8012584:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8012586:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801258a:	2201      	movs	r2, #1
 801258c:	4619      	mov	r1, r3
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f7ff ffd2 	bl	8012538 <pbuf_header_impl>
 8012594:	4603      	mov	r3, r0
}
 8012596:	4618      	mov	r0, r3
 8012598:	3708      	adds	r7, #8
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}
	...

080125a0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b088      	sub	sp, #32
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d10b      	bne.n	80125c6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d106      	bne.n	80125c2 <pbuf_free+0x22>
 80125b4:	4b3b      	ldr	r3, [pc, #236]	@ (80126a4 <pbuf_free+0x104>)
 80125b6:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80125ba:	493b      	ldr	r1, [pc, #236]	@ (80126a8 <pbuf_free+0x108>)
 80125bc:	483b      	ldr	r0, [pc, #236]	@ (80126ac <pbuf_free+0x10c>)
 80125be:	f00c fa0f 	bl	801e9e0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80125c2:	2300      	movs	r3, #0
 80125c4:	e069      	b.n	801269a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80125c6:	2300      	movs	r3, #0
 80125c8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80125ca:	e062      	b.n	8012692 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80125cc:	f00b fa96 	bl	801dafc <sys_arch_protect>
 80125d0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	7b9b      	ldrb	r3, [r3, #14]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d106      	bne.n	80125e8 <pbuf_free+0x48>
 80125da:	4b32      	ldr	r3, [pc, #200]	@ (80126a4 <pbuf_free+0x104>)
 80125dc:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80125e0:	4933      	ldr	r1, [pc, #204]	@ (80126b0 <pbuf_free+0x110>)
 80125e2:	4832      	ldr	r0, [pc, #200]	@ (80126ac <pbuf_free+0x10c>)
 80125e4:	f00c f9fc 	bl	801e9e0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	7b9b      	ldrb	r3, [r3, #14]
 80125ec:	3b01      	subs	r3, #1
 80125ee:	b2da      	uxtb	r2, r3
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	739a      	strb	r2, [r3, #14]
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	7b9b      	ldrb	r3, [r3, #14]
 80125f8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80125fa:	69b8      	ldr	r0, [r7, #24]
 80125fc:	f00b fa8c 	bl	801db18 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012600:	7dfb      	ldrb	r3, [r7, #23]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d143      	bne.n	801268e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	7b1b      	ldrb	r3, [r3, #12]
 8012610:	f003 030f 	and.w	r3, r3, #15
 8012614:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	7b5b      	ldrb	r3, [r3, #13]
 801261a:	f003 0302 	and.w	r3, r3, #2
 801261e:	2b00      	cmp	r3, #0
 8012620:	d011      	beq.n	8012646 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8012626:	68bb      	ldr	r3, [r7, #8]
 8012628:	691b      	ldr	r3, [r3, #16]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d106      	bne.n	801263c <pbuf_free+0x9c>
 801262e:	4b1d      	ldr	r3, [pc, #116]	@ (80126a4 <pbuf_free+0x104>)
 8012630:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8012634:	491f      	ldr	r1, [pc, #124]	@ (80126b4 <pbuf_free+0x114>)
 8012636:	481d      	ldr	r0, [pc, #116]	@ (80126ac <pbuf_free+0x10c>)
 8012638:	f00c f9d2 	bl	801e9e0 <iprintf>
        pc->custom_free_function(p);
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	691b      	ldr	r3, [r3, #16]
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	4798      	blx	r3
 8012644:	e01d      	b.n	8012682 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8012646:	7bfb      	ldrb	r3, [r7, #15]
 8012648:	2b02      	cmp	r3, #2
 801264a:	d104      	bne.n	8012656 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801264c:	6879      	ldr	r1, [r7, #4]
 801264e:	200d      	movs	r0, #13
 8012650:	f7ff f8ba 	bl	80117c8 <memp_free>
 8012654:	e015      	b.n	8012682 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8012656:	7bfb      	ldrb	r3, [r7, #15]
 8012658:	2b01      	cmp	r3, #1
 801265a:	d104      	bne.n	8012666 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801265c:	6879      	ldr	r1, [r7, #4]
 801265e:	200c      	movs	r0, #12
 8012660:	f7ff f8b2 	bl	80117c8 <memp_free>
 8012664:	e00d      	b.n	8012682 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8012666:	7bfb      	ldrb	r3, [r7, #15]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d103      	bne.n	8012674 <pbuf_free+0xd4>
          mem_free(p);
 801266c:	6878      	ldr	r0, [r7, #4]
 801266e:	f7fe fcf9 	bl	8011064 <mem_free>
 8012672:	e006      	b.n	8012682 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012674:	4b0b      	ldr	r3, [pc, #44]	@ (80126a4 <pbuf_free+0x104>)
 8012676:	f240 320f 	movw	r2, #783	@ 0x30f
 801267a:	490f      	ldr	r1, [pc, #60]	@ (80126b8 <pbuf_free+0x118>)
 801267c:	480b      	ldr	r0, [pc, #44]	@ (80126ac <pbuf_free+0x10c>)
 801267e:	f00c f9af 	bl	801e9e0 <iprintf>
        }
      }
      count++;
 8012682:	7ffb      	ldrb	r3, [r7, #31]
 8012684:	3301      	adds	r3, #1
 8012686:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8012688:	693b      	ldr	r3, [r7, #16]
 801268a:	607b      	str	r3, [r7, #4]
 801268c:	e001      	b.n	8012692 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801268e:	2300      	movs	r3, #0
 8012690:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d199      	bne.n	80125cc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8012698:	7ffb      	ldrb	r3, [r7, #31]
}
 801269a:	4618      	mov	r0, r3
 801269c:	3720      	adds	r7, #32
 801269e:	46bd      	mov	sp, r7
 80126a0:	bd80      	pop	{r7, pc}
 80126a2:	bf00      	nop
 80126a4:	08020a64 	.word	0x08020a64
 80126a8:	08020bc8 	.word	0x08020bc8
 80126ac:	08020ac4 	.word	0x08020ac4
 80126b0:	08020bf4 	.word	0x08020bf4
 80126b4:	08020c0c 	.word	0x08020c0c
 80126b8:	08020c30 	.word	0x08020c30

080126bc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80126bc:	b480      	push	{r7}
 80126be:	b085      	sub	sp, #20
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80126c4:	2300      	movs	r3, #0
 80126c6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80126c8:	e005      	b.n	80126d6 <pbuf_clen+0x1a>
    ++len;
 80126ca:	89fb      	ldrh	r3, [r7, #14]
 80126cc:	3301      	adds	r3, #1
 80126ce:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d1f6      	bne.n	80126ca <pbuf_clen+0xe>
  }
  return len;
 80126dc:	89fb      	ldrh	r3, [r7, #14]
}
 80126de:	4618      	mov	r0, r3
 80126e0:	3714      	adds	r7, #20
 80126e2:	46bd      	mov	sp, r7
 80126e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e8:	4770      	bx	lr
	...

080126ec <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b084      	sub	sp, #16
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d016      	beq.n	8012728 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80126fa:	f00b f9ff 	bl	801dafc <sys_arch_protect>
 80126fe:	60f8      	str	r0, [r7, #12]
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	7b9b      	ldrb	r3, [r3, #14]
 8012704:	3301      	adds	r3, #1
 8012706:	b2da      	uxtb	r2, r3
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	739a      	strb	r2, [r3, #14]
 801270c:	68f8      	ldr	r0, [r7, #12]
 801270e:	f00b fa03 	bl	801db18 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	7b9b      	ldrb	r3, [r3, #14]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d106      	bne.n	8012728 <pbuf_ref+0x3c>
 801271a:	4b05      	ldr	r3, [pc, #20]	@ (8012730 <pbuf_ref+0x44>)
 801271c:	f240 3242 	movw	r2, #834	@ 0x342
 8012720:	4904      	ldr	r1, [pc, #16]	@ (8012734 <pbuf_ref+0x48>)
 8012722:	4805      	ldr	r0, [pc, #20]	@ (8012738 <pbuf_ref+0x4c>)
 8012724:	f00c f95c 	bl	801e9e0 <iprintf>
  }
}
 8012728:	bf00      	nop
 801272a:	3710      	adds	r7, #16
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}
 8012730:	08020a64 	.word	0x08020a64
 8012734:	08020c44 	.word	0x08020c44
 8012738:	08020ac4 	.word	0x08020ac4

0801273c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	b084      	sub	sp, #16
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
 8012744:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d002      	beq.n	8012752 <pbuf_cat+0x16>
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d107      	bne.n	8012762 <pbuf_cat+0x26>
 8012752:	4b20      	ldr	r3, [pc, #128]	@ (80127d4 <pbuf_cat+0x98>)
 8012754:	f240 3259 	movw	r2, #857	@ 0x359
 8012758:	491f      	ldr	r1, [pc, #124]	@ (80127d8 <pbuf_cat+0x9c>)
 801275a:	4820      	ldr	r0, [pc, #128]	@ (80127dc <pbuf_cat+0xa0>)
 801275c:	f00c f940 	bl	801e9e0 <iprintf>
 8012760:	e034      	b.n	80127cc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	60fb      	str	r3, [r7, #12]
 8012766:	e00a      	b.n	801277e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	891a      	ldrh	r2, [r3, #8]
 801276c:	683b      	ldr	r3, [r7, #0]
 801276e:	891b      	ldrh	r3, [r3, #8]
 8012770:	4413      	add	r3, r2
 8012772:	b29a      	uxth	r2, r3
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	60fb      	str	r3, [r7, #12]
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d1f0      	bne.n	8012768 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	891a      	ldrh	r2, [r3, #8]
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	895b      	ldrh	r3, [r3, #10]
 801278e:	429a      	cmp	r2, r3
 8012790:	d006      	beq.n	80127a0 <pbuf_cat+0x64>
 8012792:	4b10      	ldr	r3, [pc, #64]	@ (80127d4 <pbuf_cat+0x98>)
 8012794:	f240 3262 	movw	r2, #866	@ 0x362
 8012798:	4911      	ldr	r1, [pc, #68]	@ (80127e0 <pbuf_cat+0xa4>)
 801279a:	4810      	ldr	r0, [pc, #64]	@ (80127dc <pbuf_cat+0xa0>)
 801279c:	f00c f920 	bl	801e9e0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d006      	beq.n	80127b6 <pbuf_cat+0x7a>
 80127a8:	4b0a      	ldr	r3, [pc, #40]	@ (80127d4 <pbuf_cat+0x98>)
 80127aa:	f240 3263 	movw	r2, #867	@ 0x363
 80127ae:	490d      	ldr	r1, [pc, #52]	@ (80127e4 <pbuf_cat+0xa8>)
 80127b0:	480a      	ldr	r0, [pc, #40]	@ (80127dc <pbuf_cat+0xa0>)
 80127b2:	f00c f915 	bl	801e9e0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	891a      	ldrh	r2, [r3, #8]
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	891b      	ldrh	r3, [r3, #8]
 80127be:	4413      	add	r3, r2
 80127c0:	b29a      	uxth	r2, r3
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	683a      	ldr	r2, [r7, #0]
 80127ca:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80127cc:	3710      	adds	r7, #16
 80127ce:	46bd      	mov	sp, r7
 80127d0:	bd80      	pop	{r7, pc}
 80127d2:	bf00      	nop
 80127d4:	08020a64 	.word	0x08020a64
 80127d8:	08020c58 	.word	0x08020c58
 80127dc:	08020ac4 	.word	0x08020ac4
 80127e0:	08020c90 	.word	0x08020c90
 80127e4:	08020cc0 	.word	0x08020cc0

080127e8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b082      	sub	sp, #8
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
 80127f0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80127f2:	6839      	ldr	r1, [r7, #0]
 80127f4:	6878      	ldr	r0, [r7, #4]
 80127f6:	f7ff ffa1 	bl	801273c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80127fa:	6838      	ldr	r0, [r7, #0]
 80127fc:	f7ff ff76 	bl	80126ec <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8012800:	bf00      	nop
 8012802:	3708      	adds	r7, #8
 8012804:	46bd      	mov	sp, r7
 8012806:	bd80      	pop	{r7, pc}

08012808 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8012808:	b580      	push	{r7, lr}
 801280a:	b086      	sub	sp, #24
 801280c:	af00      	add	r7, sp, #0
 801280e:	6078      	str	r0, [r7, #4]
 8012810:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8012812:	2300      	movs	r3, #0
 8012814:	617b      	str	r3, [r7, #20]
 8012816:	2300      	movs	r3, #0
 8012818:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d008      	beq.n	8012832 <pbuf_copy+0x2a>
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d005      	beq.n	8012832 <pbuf_copy+0x2a>
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	891a      	ldrh	r2, [r3, #8]
 801282a:	683b      	ldr	r3, [r7, #0]
 801282c:	891b      	ldrh	r3, [r3, #8]
 801282e:	429a      	cmp	r2, r3
 8012830:	d209      	bcs.n	8012846 <pbuf_copy+0x3e>
 8012832:	4b57      	ldr	r3, [pc, #348]	@ (8012990 <pbuf_copy+0x188>)
 8012834:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8012838:	4956      	ldr	r1, [pc, #344]	@ (8012994 <pbuf_copy+0x18c>)
 801283a:	4857      	ldr	r0, [pc, #348]	@ (8012998 <pbuf_copy+0x190>)
 801283c:	f00c f8d0 	bl	801e9e0 <iprintf>
 8012840:	f06f 030f 	mvn.w	r3, #15
 8012844:	e09f      	b.n	8012986 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	895b      	ldrh	r3, [r3, #10]
 801284a:	461a      	mov	r2, r3
 801284c:	697b      	ldr	r3, [r7, #20]
 801284e:	1ad2      	subs	r2, r2, r3
 8012850:	683b      	ldr	r3, [r7, #0]
 8012852:	895b      	ldrh	r3, [r3, #10]
 8012854:	4619      	mov	r1, r3
 8012856:	693b      	ldr	r3, [r7, #16]
 8012858:	1acb      	subs	r3, r1, r3
 801285a:	429a      	cmp	r2, r3
 801285c:	d306      	bcc.n	801286c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801285e:	683b      	ldr	r3, [r7, #0]
 8012860:	895b      	ldrh	r3, [r3, #10]
 8012862:	461a      	mov	r2, r3
 8012864:	693b      	ldr	r3, [r7, #16]
 8012866:	1ad3      	subs	r3, r2, r3
 8012868:	60fb      	str	r3, [r7, #12]
 801286a:	e005      	b.n	8012878 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	895b      	ldrh	r3, [r3, #10]
 8012870:	461a      	mov	r2, r3
 8012872:	697b      	ldr	r3, [r7, #20]
 8012874:	1ad3      	subs	r3, r2, r3
 8012876:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	685a      	ldr	r2, [r3, #4]
 801287c:	697b      	ldr	r3, [r7, #20]
 801287e:	18d0      	adds	r0, r2, r3
 8012880:	683b      	ldr	r3, [r7, #0]
 8012882:	685a      	ldr	r2, [r3, #4]
 8012884:	693b      	ldr	r3, [r7, #16]
 8012886:	4413      	add	r3, r2
 8012888:	68fa      	ldr	r2, [r7, #12]
 801288a:	4619      	mov	r1, r3
 801288c:	f00c fb5b 	bl	801ef46 <memcpy>
    offset_to += len;
 8012890:	697a      	ldr	r2, [r7, #20]
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	4413      	add	r3, r2
 8012896:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8012898:	693a      	ldr	r2, [r7, #16]
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	4413      	add	r3, r2
 801289e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	895b      	ldrh	r3, [r3, #10]
 80128a4:	461a      	mov	r2, r3
 80128a6:	697b      	ldr	r3, [r7, #20]
 80128a8:	4293      	cmp	r3, r2
 80128aa:	d906      	bls.n	80128ba <pbuf_copy+0xb2>
 80128ac:	4b38      	ldr	r3, [pc, #224]	@ (8012990 <pbuf_copy+0x188>)
 80128ae:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80128b2:	493a      	ldr	r1, [pc, #232]	@ (801299c <pbuf_copy+0x194>)
 80128b4:	4838      	ldr	r0, [pc, #224]	@ (8012998 <pbuf_copy+0x190>)
 80128b6:	f00c f893 	bl	801e9e0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	895b      	ldrh	r3, [r3, #10]
 80128be:	461a      	mov	r2, r3
 80128c0:	693b      	ldr	r3, [r7, #16]
 80128c2:	4293      	cmp	r3, r2
 80128c4:	d906      	bls.n	80128d4 <pbuf_copy+0xcc>
 80128c6:	4b32      	ldr	r3, [pc, #200]	@ (8012990 <pbuf_copy+0x188>)
 80128c8:	f240 32da 	movw	r2, #986	@ 0x3da
 80128cc:	4934      	ldr	r1, [pc, #208]	@ (80129a0 <pbuf_copy+0x198>)
 80128ce:	4832      	ldr	r0, [pc, #200]	@ (8012998 <pbuf_copy+0x190>)
 80128d0:	f00c f886 	bl	801e9e0 <iprintf>
    if (offset_from >= p_from->len) {
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	895b      	ldrh	r3, [r3, #10]
 80128d8:	461a      	mov	r2, r3
 80128da:	693b      	ldr	r3, [r7, #16]
 80128dc:	4293      	cmp	r3, r2
 80128de:	d304      	bcc.n	80128ea <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80128e0:	2300      	movs	r3, #0
 80128e2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	895b      	ldrh	r3, [r3, #10]
 80128ee:	461a      	mov	r2, r3
 80128f0:	697b      	ldr	r3, [r7, #20]
 80128f2:	4293      	cmp	r3, r2
 80128f4:	d114      	bne.n	8012920 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80128f6:	2300      	movs	r3, #0
 80128f8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d10c      	bne.n	8012920 <pbuf_copy+0x118>
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d009      	beq.n	8012920 <pbuf_copy+0x118>
 801290c:	4b20      	ldr	r3, [pc, #128]	@ (8012990 <pbuf_copy+0x188>)
 801290e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8012912:	4924      	ldr	r1, [pc, #144]	@ (80129a4 <pbuf_copy+0x19c>)
 8012914:	4820      	ldr	r0, [pc, #128]	@ (8012998 <pbuf_copy+0x190>)
 8012916:	f00c f863 	bl	801e9e0 <iprintf>
 801291a:	f06f 030f 	mvn.w	r3, #15
 801291e:	e032      	b.n	8012986 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d013      	beq.n	801294e <pbuf_copy+0x146>
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	895a      	ldrh	r2, [r3, #10]
 801292a:	683b      	ldr	r3, [r7, #0]
 801292c:	891b      	ldrh	r3, [r3, #8]
 801292e:	429a      	cmp	r2, r3
 8012930:	d10d      	bne.n	801294e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012932:	683b      	ldr	r3, [r7, #0]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d009      	beq.n	801294e <pbuf_copy+0x146>
 801293a:	4b15      	ldr	r3, [pc, #84]	@ (8012990 <pbuf_copy+0x188>)
 801293c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8012940:	4919      	ldr	r1, [pc, #100]	@ (80129a8 <pbuf_copy+0x1a0>)
 8012942:	4815      	ldr	r0, [pc, #84]	@ (8012998 <pbuf_copy+0x190>)
 8012944:	f00c f84c 	bl	801e9e0 <iprintf>
 8012948:	f06f 0305 	mvn.w	r3, #5
 801294c:	e01b      	b.n	8012986 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d013      	beq.n	801297c <pbuf_copy+0x174>
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	895a      	ldrh	r2, [r3, #10]
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	891b      	ldrh	r3, [r3, #8]
 801295c:	429a      	cmp	r2, r3
 801295e:	d10d      	bne.n	801297c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d009      	beq.n	801297c <pbuf_copy+0x174>
 8012968:	4b09      	ldr	r3, [pc, #36]	@ (8012990 <pbuf_copy+0x188>)
 801296a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801296e:	490e      	ldr	r1, [pc, #56]	@ (80129a8 <pbuf_copy+0x1a0>)
 8012970:	4809      	ldr	r0, [pc, #36]	@ (8012998 <pbuf_copy+0x190>)
 8012972:	f00c f835 	bl	801e9e0 <iprintf>
 8012976:	f06f 0305 	mvn.w	r3, #5
 801297a:	e004      	b.n	8012986 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	2b00      	cmp	r3, #0
 8012980:	f47f af61 	bne.w	8012846 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8012984:	2300      	movs	r3, #0
}
 8012986:	4618      	mov	r0, r3
 8012988:	3718      	adds	r7, #24
 801298a:	46bd      	mov	sp, r7
 801298c:	bd80      	pop	{r7, pc}
 801298e:	bf00      	nop
 8012990:	08020a64 	.word	0x08020a64
 8012994:	08020d0c 	.word	0x08020d0c
 8012998:	08020ac4 	.word	0x08020ac4
 801299c:	08020d3c 	.word	0x08020d3c
 80129a0:	08020d54 	.word	0x08020d54
 80129a4:	08020d70 	.word	0x08020d70
 80129a8:	08020d80 	.word	0x08020d80

080129ac <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b088      	sub	sp, #32
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	60f8      	str	r0, [r7, #12]
 80129b4:	60b9      	str	r1, [r7, #8]
 80129b6:	4611      	mov	r1, r2
 80129b8:	461a      	mov	r2, r3
 80129ba:	460b      	mov	r3, r1
 80129bc:	80fb      	strh	r3, [r7, #6]
 80129be:	4613      	mov	r3, r2
 80129c0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80129c2:	2300      	movs	r3, #0
 80129c4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80129c6:	2300      	movs	r3, #0
 80129c8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d108      	bne.n	80129e2 <pbuf_copy_partial+0x36>
 80129d0:	4b2b      	ldr	r3, [pc, #172]	@ (8012a80 <pbuf_copy_partial+0xd4>)
 80129d2:	f240 420a 	movw	r2, #1034	@ 0x40a
 80129d6:	492b      	ldr	r1, [pc, #172]	@ (8012a84 <pbuf_copy_partial+0xd8>)
 80129d8:	482b      	ldr	r0, [pc, #172]	@ (8012a88 <pbuf_copy_partial+0xdc>)
 80129da:	f00c f801 	bl	801e9e0 <iprintf>
 80129de:	2300      	movs	r3, #0
 80129e0:	e04a      	b.n	8012a78 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80129e2:	68bb      	ldr	r3, [r7, #8]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d108      	bne.n	80129fa <pbuf_copy_partial+0x4e>
 80129e8:	4b25      	ldr	r3, [pc, #148]	@ (8012a80 <pbuf_copy_partial+0xd4>)
 80129ea:	f240 420b 	movw	r2, #1035	@ 0x40b
 80129ee:	4927      	ldr	r1, [pc, #156]	@ (8012a8c <pbuf_copy_partial+0xe0>)
 80129f0:	4825      	ldr	r0, [pc, #148]	@ (8012a88 <pbuf_copy_partial+0xdc>)
 80129f2:	f00b fff5 	bl	801e9e0 <iprintf>
 80129f6:	2300      	movs	r3, #0
 80129f8:	e03e      	b.n	8012a78 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	61fb      	str	r3, [r7, #28]
 80129fe:	e034      	b.n	8012a6a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8012a00:	88bb      	ldrh	r3, [r7, #4]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d00a      	beq.n	8012a1c <pbuf_copy_partial+0x70>
 8012a06:	69fb      	ldr	r3, [r7, #28]
 8012a08:	895b      	ldrh	r3, [r3, #10]
 8012a0a:	88ba      	ldrh	r2, [r7, #4]
 8012a0c:	429a      	cmp	r2, r3
 8012a0e:	d305      	bcc.n	8012a1c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8012a10:	69fb      	ldr	r3, [r7, #28]
 8012a12:	895b      	ldrh	r3, [r3, #10]
 8012a14:	88ba      	ldrh	r2, [r7, #4]
 8012a16:	1ad3      	subs	r3, r2, r3
 8012a18:	80bb      	strh	r3, [r7, #4]
 8012a1a:	e023      	b.n	8012a64 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8012a1c:	69fb      	ldr	r3, [r7, #28]
 8012a1e:	895a      	ldrh	r2, [r3, #10]
 8012a20:	88bb      	ldrh	r3, [r7, #4]
 8012a22:	1ad3      	subs	r3, r2, r3
 8012a24:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8012a26:	8b3a      	ldrh	r2, [r7, #24]
 8012a28:	88fb      	ldrh	r3, [r7, #6]
 8012a2a:	429a      	cmp	r2, r3
 8012a2c:	d901      	bls.n	8012a32 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8012a2e:	88fb      	ldrh	r3, [r7, #6]
 8012a30:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8012a32:	8b7b      	ldrh	r3, [r7, #26]
 8012a34:	68ba      	ldr	r2, [r7, #8]
 8012a36:	18d0      	adds	r0, r2, r3
 8012a38:	69fb      	ldr	r3, [r7, #28]
 8012a3a:	685a      	ldr	r2, [r3, #4]
 8012a3c:	88bb      	ldrh	r3, [r7, #4]
 8012a3e:	4413      	add	r3, r2
 8012a40:	8b3a      	ldrh	r2, [r7, #24]
 8012a42:	4619      	mov	r1, r3
 8012a44:	f00c fa7f 	bl	801ef46 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8012a48:	8afa      	ldrh	r2, [r7, #22]
 8012a4a:	8b3b      	ldrh	r3, [r7, #24]
 8012a4c:	4413      	add	r3, r2
 8012a4e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8012a50:	8b7a      	ldrh	r2, [r7, #26]
 8012a52:	8b3b      	ldrh	r3, [r7, #24]
 8012a54:	4413      	add	r3, r2
 8012a56:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8012a58:	88fa      	ldrh	r2, [r7, #6]
 8012a5a:	8b3b      	ldrh	r3, [r7, #24]
 8012a5c:	1ad3      	subs	r3, r2, r3
 8012a5e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8012a60:	2300      	movs	r3, #0
 8012a62:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012a64:	69fb      	ldr	r3, [r7, #28]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	61fb      	str	r3, [r7, #28]
 8012a6a:	88fb      	ldrh	r3, [r7, #6]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d002      	beq.n	8012a76 <pbuf_copy_partial+0xca>
 8012a70:	69fb      	ldr	r3, [r7, #28]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d1c4      	bne.n	8012a00 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8012a76:	8afb      	ldrh	r3, [r7, #22]
}
 8012a78:	4618      	mov	r0, r3
 8012a7a:	3720      	adds	r7, #32
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}
 8012a80:	08020a64 	.word	0x08020a64
 8012a84:	08020dac 	.word	0x08020dac
 8012a88:	08020ac4 	.word	0x08020ac4
 8012a8c:	08020dcc 	.word	0x08020dcc

08012a90 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8012a90:	b480      	push	{r7}
 8012a92:	b087      	sub	sp, #28
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	60f8      	str	r0, [r7, #12]
 8012a98:	460b      	mov	r3, r1
 8012a9a:	607a      	str	r2, [r7, #4]
 8012a9c:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8012a9e:	897b      	ldrh	r3, [r7, #10]
 8012aa0:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8012aa6:	e007      	b.n	8012ab8 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8012aa8:	693b      	ldr	r3, [r7, #16]
 8012aaa:	895b      	ldrh	r3, [r3, #10]
 8012aac:	8afa      	ldrh	r2, [r7, #22]
 8012aae:	1ad3      	subs	r3, r2, r3
 8012ab0:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8012ab2:	693b      	ldr	r3, [r7, #16]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d004      	beq.n	8012ac8 <pbuf_skip_const+0x38>
 8012abe:	693b      	ldr	r3, [r7, #16]
 8012ac0:	895b      	ldrh	r3, [r3, #10]
 8012ac2:	8afa      	ldrh	r2, [r7, #22]
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d2ef      	bcs.n	8012aa8 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d002      	beq.n	8012ad4 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	8afa      	ldrh	r2, [r7, #22]
 8012ad2:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8012ad4:	693b      	ldr	r3, [r7, #16]
}
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	371c      	adds	r7, #28
 8012ada:	46bd      	mov	sp, r7
 8012adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae0:	4770      	bx	lr

08012ae2 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8012ae2:	b580      	push	{r7, lr}
 8012ae4:	b086      	sub	sp, #24
 8012ae6:	af00      	add	r7, sp, #0
 8012ae8:	60f8      	str	r0, [r7, #12]
 8012aea:	460b      	mov	r3, r1
 8012aec:	607a      	str	r2, [r7, #4]
 8012aee:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8012af0:	897b      	ldrh	r3, [r7, #10]
 8012af2:	687a      	ldr	r2, [r7, #4]
 8012af4:	4619      	mov	r1, r3
 8012af6:	68f8      	ldr	r0, [r7, #12]
 8012af8:	f7ff ffca 	bl	8012a90 <pbuf_skip_const>
 8012afc:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8012afe:	697b      	ldr	r3, [r7, #20]
}
 8012b00:	4618      	mov	r0, r3
 8012b02:	3718      	adds	r7, #24
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}

08012b08 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b088      	sub	sp, #32
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	60f8      	str	r0, [r7, #12]
 8012b10:	60b9      	str	r1, [r7, #8]
 8012b12:	4613      	mov	r3, r2
 8012b14:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8012b16:	88fb      	ldrh	r3, [r7, #6]
 8012b18:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d109      	bne.n	8012b38 <pbuf_take+0x30>
 8012b24:	4b3a      	ldr	r3, [pc, #232]	@ (8012c10 <pbuf_take+0x108>)
 8012b26:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8012b2a:	493a      	ldr	r1, [pc, #232]	@ (8012c14 <pbuf_take+0x10c>)
 8012b2c:	483a      	ldr	r0, [pc, #232]	@ (8012c18 <pbuf_take+0x110>)
 8012b2e:	f00b ff57 	bl	801e9e0 <iprintf>
 8012b32:	f06f 030f 	mvn.w	r3, #15
 8012b36:	e067      	b.n	8012c08 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8012b38:	68bb      	ldr	r3, [r7, #8]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d109      	bne.n	8012b52 <pbuf_take+0x4a>
 8012b3e:	4b34      	ldr	r3, [pc, #208]	@ (8012c10 <pbuf_take+0x108>)
 8012b40:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 8012b44:	4935      	ldr	r1, [pc, #212]	@ (8012c1c <pbuf_take+0x114>)
 8012b46:	4834      	ldr	r0, [pc, #208]	@ (8012c18 <pbuf_take+0x110>)
 8012b48:	f00b ff4a 	bl	801e9e0 <iprintf>
 8012b4c:	f06f 030f 	mvn.w	r3, #15
 8012b50:	e05a      	b.n	8012c08 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	891b      	ldrh	r3, [r3, #8]
 8012b56:	88fa      	ldrh	r2, [r7, #6]
 8012b58:	429a      	cmp	r2, r3
 8012b5a:	d909      	bls.n	8012b70 <pbuf_take+0x68>
 8012b5c:	4b2c      	ldr	r3, [pc, #176]	@ (8012c10 <pbuf_take+0x108>)
 8012b5e:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 8012b62:	492f      	ldr	r1, [pc, #188]	@ (8012c20 <pbuf_take+0x118>)
 8012b64:	482c      	ldr	r0, [pc, #176]	@ (8012c18 <pbuf_take+0x110>)
 8012b66:	f00b ff3b 	bl	801e9e0 <iprintf>
 8012b6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012b6e:	e04b      	b.n	8012c08 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d007      	beq.n	8012b86 <pbuf_take+0x7e>
 8012b76:	68bb      	ldr	r3, [r7, #8]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d004      	beq.n	8012b86 <pbuf_take+0x7e>
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	891b      	ldrh	r3, [r3, #8]
 8012b80:	88fa      	ldrh	r2, [r7, #6]
 8012b82:	429a      	cmp	r2, r3
 8012b84:	d902      	bls.n	8012b8c <pbuf_take+0x84>
    return ERR_ARG;
 8012b86:	f06f 030f 	mvn.w	r3, #15
 8012b8a:	e03d      	b.n	8012c08 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	61fb      	str	r3, [r7, #28]
 8012b90:	e028      	b.n	8012be4 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8012b92:	69fb      	ldr	r3, [r7, #28]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d106      	bne.n	8012ba6 <pbuf_take+0x9e>
 8012b98:	4b1d      	ldr	r3, [pc, #116]	@ (8012c10 <pbuf_take+0x108>)
 8012b9a:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8012b9e:	4921      	ldr	r1, [pc, #132]	@ (8012c24 <pbuf_take+0x11c>)
 8012ba0:	481d      	ldr	r0, [pc, #116]	@ (8012c18 <pbuf_take+0x110>)
 8012ba2:	f00b ff1d 	bl	801e9e0 <iprintf>
    buf_copy_len = total_copy_len;
 8012ba6:	697b      	ldr	r3, [r7, #20]
 8012ba8:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8012baa:	69fb      	ldr	r3, [r7, #28]
 8012bac:	895b      	ldrh	r3, [r3, #10]
 8012bae:	461a      	mov	r2, r3
 8012bb0:	69bb      	ldr	r3, [r7, #24]
 8012bb2:	4293      	cmp	r3, r2
 8012bb4:	d902      	bls.n	8012bbc <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8012bb6:	69fb      	ldr	r3, [r7, #28]
 8012bb8:	895b      	ldrh	r3, [r3, #10]
 8012bba:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8012bbc:	69fb      	ldr	r3, [r7, #28]
 8012bbe:	6858      	ldr	r0, [r3, #4]
 8012bc0:	68ba      	ldr	r2, [r7, #8]
 8012bc2:	693b      	ldr	r3, [r7, #16]
 8012bc4:	4413      	add	r3, r2
 8012bc6:	69ba      	ldr	r2, [r7, #24]
 8012bc8:	4619      	mov	r1, r3
 8012bca:	f00c f9bc 	bl	801ef46 <memcpy>
    total_copy_len -= buf_copy_len;
 8012bce:	697a      	ldr	r2, [r7, #20]
 8012bd0:	69bb      	ldr	r3, [r7, #24]
 8012bd2:	1ad3      	subs	r3, r2, r3
 8012bd4:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8012bd6:	693a      	ldr	r2, [r7, #16]
 8012bd8:	69bb      	ldr	r3, [r7, #24]
 8012bda:	4413      	add	r3, r2
 8012bdc:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8012bde:	69fb      	ldr	r3, [r7, #28]
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	61fb      	str	r3, [r7, #28]
 8012be4:	697b      	ldr	r3, [r7, #20]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d1d3      	bne.n	8012b92 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8012bea:	697b      	ldr	r3, [r7, #20]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d103      	bne.n	8012bf8 <pbuf_take+0xf0>
 8012bf0:	88fb      	ldrh	r3, [r7, #6]
 8012bf2:	693a      	ldr	r2, [r7, #16]
 8012bf4:	429a      	cmp	r2, r3
 8012bf6:	d006      	beq.n	8012c06 <pbuf_take+0xfe>
 8012bf8:	4b05      	ldr	r3, [pc, #20]	@ (8012c10 <pbuf_take+0x108>)
 8012bfa:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8012bfe:	490a      	ldr	r1, [pc, #40]	@ (8012c28 <pbuf_take+0x120>)
 8012c00:	4805      	ldr	r0, [pc, #20]	@ (8012c18 <pbuf_take+0x110>)
 8012c02:	f00b feed 	bl	801e9e0 <iprintf>
  return ERR_OK;
 8012c06:	2300      	movs	r3, #0
}
 8012c08:	4618      	mov	r0, r3
 8012c0a:	3720      	adds	r7, #32
 8012c0c:	46bd      	mov	sp, r7
 8012c0e:	bd80      	pop	{r7, pc}
 8012c10:	08020a64 	.word	0x08020a64
 8012c14:	08020e3c 	.word	0x08020e3c
 8012c18:	08020ac4 	.word	0x08020ac4
 8012c1c:	08020e54 	.word	0x08020e54
 8012c20:	08020e70 	.word	0x08020e70
 8012c24:	08020e90 	.word	0x08020e90
 8012c28:	08020ea8 	.word	0x08020ea8

08012c2c <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b088      	sub	sp, #32
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	60f8      	str	r0, [r7, #12]
 8012c34:	60b9      	str	r1, [r7, #8]
 8012c36:	4611      	mov	r1, r2
 8012c38:	461a      	mov	r2, r3
 8012c3a:	460b      	mov	r3, r1
 8012c3c:	80fb      	strh	r3, [r7, #6]
 8012c3e:	4613      	mov	r3, r2
 8012c40:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8012c42:	f107 0210 	add.w	r2, r7, #16
 8012c46:	88bb      	ldrh	r3, [r7, #4]
 8012c48:	4619      	mov	r1, r3
 8012c4a:	68f8      	ldr	r0, [r7, #12]
 8012c4c:	f7ff ff49 	bl	8012ae2 <pbuf_skip>
 8012c50:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8012c52:	69fb      	ldr	r3, [r7, #28]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d047      	beq.n	8012ce8 <pbuf_take_at+0xbc>
 8012c58:	69fb      	ldr	r3, [r7, #28]
 8012c5a:	891b      	ldrh	r3, [r3, #8]
 8012c5c:	461a      	mov	r2, r3
 8012c5e:	8a3b      	ldrh	r3, [r7, #16]
 8012c60:	4619      	mov	r1, r3
 8012c62:	88fb      	ldrh	r3, [r7, #6]
 8012c64:	440b      	add	r3, r1
 8012c66:	429a      	cmp	r2, r3
 8012c68:	db3e      	blt.n	8012ce8 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8012c6a:	88fb      	ldrh	r3, [r7, #6]
 8012c6c:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 8012c6e:	68bb      	ldr	r3, [r7, #8]
 8012c70:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8012c72:	69fb      	ldr	r3, [r7, #28]
 8012c74:	895a      	ldrh	r2, [r3, #10]
 8012c76:	8a3b      	ldrh	r3, [r7, #16]
 8012c78:	429a      	cmp	r2, r3
 8012c7a:	d806      	bhi.n	8012c8a <pbuf_take_at+0x5e>
 8012c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8012cf4 <pbuf_take_at+0xc8>)
 8012c7e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8012c82:	491d      	ldr	r1, [pc, #116]	@ (8012cf8 <pbuf_take_at+0xcc>)
 8012c84:	481d      	ldr	r0, [pc, #116]	@ (8012cfc <pbuf_take_at+0xd0>)
 8012c86:	f00b feab 	bl	801e9e0 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8012c8a:	69fb      	ldr	r3, [r7, #28]
 8012c8c:	895b      	ldrh	r3, [r3, #10]
 8012c8e:	461a      	mov	r2, r3
 8012c90:	8a3b      	ldrh	r3, [r7, #16]
 8012c92:	1ad2      	subs	r2, r2, r3
 8012c94:	88fb      	ldrh	r3, [r7, #6]
 8012c96:	429a      	cmp	r2, r3
 8012c98:	da05      	bge.n	8012ca6 <pbuf_take_at+0x7a>
 8012c9a:	69fb      	ldr	r3, [r7, #28]
 8012c9c:	895a      	ldrh	r2, [r3, #10]
 8012c9e:	8a3b      	ldrh	r3, [r7, #16]
 8012ca0:	1ad3      	subs	r3, r2, r3
 8012ca2:	b29b      	uxth	r3, r3
 8012ca4:	e000      	b.n	8012ca8 <pbuf_take_at+0x7c>
 8012ca6:	88fb      	ldrh	r3, [r7, #6]
 8012ca8:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8012caa:	69fb      	ldr	r3, [r7, #28]
 8012cac:	685b      	ldr	r3, [r3, #4]
 8012cae:	8a3a      	ldrh	r2, [r7, #16]
 8012cb0:	4413      	add	r3, r2
 8012cb2:	8a7a      	ldrh	r2, [r7, #18]
 8012cb4:	68b9      	ldr	r1, [r7, #8]
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f00c f945 	bl	801ef46 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8012cbc:	8b7a      	ldrh	r2, [r7, #26]
 8012cbe:	8a7b      	ldrh	r3, [r7, #18]
 8012cc0:	1ad3      	subs	r3, r2, r3
 8012cc2:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8012cc4:	8a7b      	ldrh	r3, [r7, #18]
 8012cc6:	697a      	ldr	r2, [r7, #20]
 8012cc8:	4413      	add	r3, r2
 8012cca:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8012ccc:	8b7b      	ldrh	r3, [r7, #26]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d008      	beq.n	8012ce4 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8012cd2:	69fb      	ldr	r3, [r7, #28]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	8b7a      	ldrh	r2, [r7, #26]
 8012cd8:	6979      	ldr	r1, [r7, #20]
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f7ff ff14 	bl	8012b08 <pbuf_take>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	e003      	b.n	8012cec <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	e001      	b.n	8012cec <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8012ce8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8012cec:	4618      	mov	r0, r3
 8012cee:	3720      	adds	r7, #32
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	bd80      	pop	{r7, pc}
 8012cf4:	08020a64 	.word	0x08020a64
 8012cf8:	08020ec0 	.word	0x08020ec0
 8012cfc:	08020ac4 	.word	0x08020ac4

08012d00 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b084      	sub	sp, #16
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	4603      	mov	r3, r0
 8012d08:	603a      	str	r2, [r7, #0]
 8012d0a:	71fb      	strb	r3, [r7, #7]
 8012d0c:	460b      	mov	r3, r1
 8012d0e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8012d10:	683b      	ldr	r3, [r7, #0]
 8012d12:	8919      	ldrh	r1, [r3, #8]
 8012d14:	88ba      	ldrh	r2, [r7, #4]
 8012d16:	79fb      	ldrb	r3, [r7, #7]
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f7ff f95d 	bl	8011fd8 <pbuf_alloc>
 8012d1e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d101      	bne.n	8012d2a <pbuf_clone+0x2a>
    return NULL;
 8012d26:	2300      	movs	r3, #0
 8012d28:	e011      	b.n	8012d4e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8012d2a:	6839      	ldr	r1, [r7, #0]
 8012d2c:	68f8      	ldr	r0, [r7, #12]
 8012d2e:	f7ff fd6b 	bl	8012808 <pbuf_copy>
 8012d32:	4603      	mov	r3, r0
 8012d34:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8012d36:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d006      	beq.n	8012d4c <pbuf_clone+0x4c>
 8012d3e:	4b06      	ldr	r3, [pc, #24]	@ (8012d58 <pbuf_clone+0x58>)
 8012d40:	f240 5224 	movw	r2, #1316	@ 0x524
 8012d44:	4905      	ldr	r1, [pc, #20]	@ (8012d5c <pbuf_clone+0x5c>)
 8012d46:	4806      	ldr	r0, [pc, #24]	@ (8012d60 <pbuf_clone+0x60>)
 8012d48:	f00b fe4a 	bl	801e9e0 <iprintf>
  return q;
 8012d4c:	68fb      	ldr	r3, [r7, #12]
}
 8012d4e:	4618      	mov	r0, r3
 8012d50:	3710      	adds	r7, #16
 8012d52:	46bd      	mov	sp, r7
 8012d54:	bd80      	pop	{r7, pc}
 8012d56:	bf00      	nop
 8012d58:	08020a64 	.word	0x08020a64
 8012d5c:	08020ed8 	.word	0x08020ed8
 8012d60:	08020ac4 	.word	0x08020ac4

08012d64 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b084      	sub	sp, #16
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	460b      	mov	r3, r1
 8012d6e:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 8012d70:	887b      	ldrh	r3, [r7, #2]
 8012d72:	4619      	mov	r1, r3
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	f000 f80c 	bl	8012d92 <pbuf_try_get_at>
 8012d7a:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	db02      	blt.n	8012d88 <pbuf_get_at+0x24>
    return (u8_t)ret;
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	b2db      	uxtb	r3, r3
 8012d86:	e000      	b.n	8012d8a <pbuf_get_at+0x26>
  }
  return 0;
 8012d88:	2300      	movs	r3, #0
}
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	3710      	adds	r7, #16
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd80      	pop	{r7, pc}

08012d92 <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8012d92:	b580      	push	{r7, lr}
 8012d94:	b084      	sub	sp, #16
 8012d96:	af00      	add	r7, sp, #0
 8012d98:	6078      	str	r0, [r7, #4]
 8012d9a:	460b      	mov	r3, r1
 8012d9c:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8012d9e:	f107 020a 	add.w	r2, r7, #10
 8012da2:	887b      	ldrh	r3, [r7, #2]
 8012da4:	4619      	mov	r1, r3
 8012da6:	6878      	ldr	r0, [r7, #4]
 8012da8:	f7ff fe72 	bl	8012a90 <pbuf_skip_const>
 8012dac:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d00a      	beq.n	8012dca <pbuf_try_get_at+0x38>
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	895a      	ldrh	r2, [r3, #10]
 8012db8:	897b      	ldrh	r3, [r7, #10]
 8012dba:	429a      	cmp	r2, r3
 8012dbc:	d905      	bls.n	8012dca <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	685b      	ldr	r3, [r3, #4]
 8012dc2:	897a      	ldrh	r2, [r7, #10]
 8012dc4:	4413      	add	r3, r2
 8012dc6:	781b      	ldrb	r3, [r3, #0]
 8012dc8:	e001      	b.n	8012dce <pbuf_try_get_at+0x3c>
  }
  return -1;
 8012dca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8012dce:	4618      	mov	r0, r3
 8012dd0:	3710      	adds	r7, #16
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bd80      	pop	{r7, pc}

08012dd6 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 8012dd6:	b580      	push	{r7, lr}
 8012dd8:	b088      	sub	sp, #32
 8012dda:	af00      	add	r7, sp, #0
 8012ddc:	60f8      	str	r0, [r7, #12]
 8012dde:	607a      	str	r2, [r7, #4]
 8012de0:	461a      	mov	r2, r3
 8012de2:	460b      	mov	r3, r1
 8012de4:	817b      	strh	r3, [r7, #10]
 8012de6:	4613      	mov	r3, r2
 8012de8:	813b      	strh	r3, [r7, #8]
  u16_t start = offset;
 8012dea:	897b      	ldrh	r3, [r7, #10]
 8012dec:	83fb      	strh	r3, [r7, #30]
  const struct pbuf *q = p;
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	61bb      	str	r3, [r7, #24]
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	891b      	ldrh	r3, [r3, #8]
 8012df6:	4619      	mov	r1, r3
 8012df8:	897a      	ldrh	r2, [r7, #10]
 8012dfa:	893b      	ldrh	r3, [r7, #8]
 8012dfc:	4413      	add	r3, r2
 8012dfe:	4299      	cmp	r1, r3
 8012e00:	da0a      	bge.n	8012e18 <pbuf_memcmp+0x42>
    return 0xffff;
 8012e02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012e06:	e037      	b.n	8012e78 <pbuf_memcmp+0xa2>
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
    start = (u16_t)(start - q->len);
 8012e08:	69bb      	ldr	r3, [r7, #24]
 8012e0a:	895b      	ldrh	r3, [r3, #10]
 8012e0c:	8bfa      	ldrh	r2, [r7, #30]
 8012e0e:	1ad3      	subs	r3, r2, r3
 8012e10:	83fb      	strh	r3, [r7, #30]
    q = q->next;
 8012e12:	69bb      	ldr	r3, [r7, #24]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	61bb      	str	r3, [r7, #24]
  while ((q != NULL) && (q->len <= start)) {
 8012e18:	69bb      	ldr	r3, [r7, #24]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d004      	beq.n	8012e28 <pbuf_memcmp+0x52>
 8012e1e:	69bb      	ldr	r3, [r7, #24]
 8012e20:	895b      	ldrh	r3, [r3, #10]
 8012e22:	8bfa      	ldrh	r2, [r7, #30]
 8012e24:	429a      	cmp	r2, r3
 8012e26:	d2ef      	bcs.n	8012e08 <pbuf_memcmp+0x32>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 8012e28:	2300      	movs	r3, #0
 8012e2a:	82fb      	strh	r3, [r7, #22]
 8012e2c:	e01f      	b.n	8012e6e <pbuf_memcmp+0x98>
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 8012e2e:	8bfa      	ldrh	r2, [r7, #30]
 8012e30:	8afb      	ldrh	r3, [r7, #22]
 8012e32:	4413      	add	r3, r2
 8012e34:	b29b      	uxth	r3, r3
 8012e36:	4619      	mov	r1, r3
 8012e38:	69b8      	ldr	r0, [r7, #24]
 8012e3a:	f7ff ff93 	bl	8012d64 <pbuf_get_at>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	757b      	strb	r3, [r7, #21]
    u8_t b = ((const u8_t *)s2)[i];
 8012e42:	8afb      	ldrh	r3, [r7, #22]
 8012e44:	687a      	ldr	r2, [r7, #4]
 8012e46:	4413      	add	r3, r2
 8012e48:	781b      	ldrb	r3, [r3, #0]
 8012e4a:	753b      	strb	r3, [r7, #20]
    if (a != b) {
 8012e4c:	7d7a      	ldrb	r2, [r7, #21]
 8012e4e:	7d3b      	ldrb	r3, [r7, #20]
 8012e50:	429a      	cmp	r2, r3
 8012e52:	d009      	beq.n	8012e68 <pbuf_memcmp+0x92>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 8012e54:	8afb      	ldrh	r3, [r7, #22]
 8012e56:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8012e5a:	4293      	cmp	r3, r2
 8012e5c:	bf28      	it	cs
 8012e5e:	4613      	movcs	r3, r2
 8012e60:	b29b      	uxth	r3, r3
 8012e62:	3301      	adds	r3, #1
 8012e64:	b29b      	uxth	r3, r3
 8012e66:	e007      	b.n	8012e78 <pbuf_memcmp+0xa2>
  for (i = 0; i < n; i++) {
 8012e68:	8afb      	ldrh	r3, [r7, #22]
 8012e6a:	3301      	adds	r3, #1
 8012e6c:	82fb      	strh	r3, [r7, #22]
 8012e6e:	8afa      	ldrh	r2, [r7, #22]
 8012e70:	893b      	ldrh	r3, [r7, #8]
 8012e72:	429a      	cmp	r2, r3
 8012e74:	d3db      	bcc.n	8012e2e <pbuf_memcmp+0x58>
    }
  }
  return 0;
 8012e76:	2300      	movs	r3, #0
}
 8012e78:	4618      	mov	r0, r3
 8012e7a:	3720      	adds	r7, #32
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	bd80      	pop	{r7, pc}

08012e80 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8012e80:	b580      	push	{r7, lr}
 8012e82:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012e84:	f00b fcac 	bl	801e7e0 <rand>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	b29b      	uxth	r3, r3
 8012e8c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012e90:	b29b      	uxth	r3, r3
 8012e92:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8012e96:	b29a      	uxth	r2, r3
 8012e98:	4b01      	ldr	r3, [pc, #4]	@ (8012ea0 <tcp_init+0x20>)
 8012e9a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012e9c:	bf00      	nop
 8012e9e:	bd80      	pop	{r7, pc}
 8012ea0:	200000b8 	.word	0x200000b8

08012ea4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b082      	sub	sp, #8
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	7d1b      	ldrb	r3, [r3, #20]
 8012eb0:	2b01      	cmp	r3, #1
 8012eb2:	d105      	bne.n	8012ec0 <tcp_free+0x1c>
 8012eb4:	4b06      	ldr	r3, [pc, #24]	@ (8012ed0 <tcp_free+0x2c>)
 8012eb6:	22d4      	movs	r2, #212	@ 0xd4
 8012eb8:	4906      	ldr	r1, [pc, #24]	@ (8012ed4 <tcp_free+0x30>)
 8012eba:	4807      	ldr	r0, [pc, #28]	@ (8012ed8 <tcp_free+0x34>)
 8012ebc:	f00b fd90 	bl	801e9e0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8012ec0:	6879      	ldr	r1, [r7, #4]
 8012ec2:	2001      	movs	r0, #1
 8012ec4:	f7fe fc80 	bl	80117c8 <memp_free>
}
 8012ec8:	bf00      	nop
 8012eca:	3708      	adds	r7, #8
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	bd80      	pop	{r7, pc}
 8012ed0:	08020f64 	.word	0x08020f64
 8012ed4:	08020f94 	.word	0x08020f94
 8012ed8:	08020fa8 	.word	0x08020fa8

08012edc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b082      	sub	sp, #8
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	7d1b      	ldrb	r3, [r3, #20]
 8012ee8:	2b01      	cmp	r3, #1
 8012eea:	d105      	bne.n	8012ef8 <tcp_free_listen+0x1c>
 8012eec:	4b06      	ldr	r3, [pc, #24]	@ (8012f08 <tcp_free_listen+0x2c>)
 8012eee:	22df      	movs	r2, #223	@ 0xdf
 8012ef0:	4906      	ldr	r1, [pc, #24]	@ (8012f0c <tcp_free_listen+0x30>)
 8012ef2:	4807      	ldr	r0, [pc, #28]	@ (8012f10 <tcp_free_listen+0x34>)
 8012ef4:	f00b fd74 	bl	801e9e0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8012ef8:	6879      	ldr	r1, [r7, #4]
 8012efa:	2002      	movs	r0, #2
 8012efc:	f7fe fc64 	bl	80117c8 <memp_free>
}
 8012f00:	bf00      	nop
 8012f02:	3708      	adds	r7, #8
 8012f04:	46bd      	mov	sp, r7
 8012f06:	bd80      	pop	{r7, pc}
 8012f08:	08020f64 	.word	0x08020f64
 8012f0c:	08020fd0 	.word	0x08020fd0
 8012f10:	08020fa8 	.word	0x08020fa8

08012f14 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8012f18:	f000 fea4 	bl	8013c64 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012f1c:	4b07      	ldr	r3, [pc, #28]	@ (8012f3c <tcp_tmr+0x28>)
 8012f1e:	781b      	ldrb	r3, [r3, #0]
 8012f20:	3301      	adds	r3, #1
 8012f22:	b2da      	uxtb	r2, r3
 8012f24:	4b05      	ldr	r3, [pc, #20]	@ (8012f3c <tcp_tmr+0x28>)
 8012f26:	701a      	strb	r2, [r3, #0]
 8012f28:	4b04      	ldr	r3, [pc, #16]	@ (8012f3c <tcp_tmr+0x28>)
 8012f2a:	781b      	ldrb	r3, [r3, #0]
 8012f2c:	f003 0301 	and.w	r3, r3, #1
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d001      	beq.n	8012f38 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8012f34:	f000 fb54 	bl	80135e0 <tcp_slowtmr>
  }
}
 8012f38:	bf00      	nop
 8012f3a:	bd80      	pop	{r7, pc}
 8012f3c:	200047b1 	.word	0x200047b1

08012f40 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8012f40:	b580      	push	{r7, lr}
 8012f42:	b084      	sub	sp, #16
 8012f44:	af00      	add	r7, sp, #0
 8012f46:	6078      	str	r0, [r7, #4]
 8012f48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8012f4a:	683b      	ldr	r3, [r7, #0]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d105      	bne.n	8012f5c <tcp_remove_listener+0x1c>
 8012f50:	4b0d      	ldr	r3, [pc, #52]	@ (8012f88 <tcp_remove_listener+0x48>)
 8012f52:	22ff      	movs	r2, #255	@ 0xff
 8012f54:	490d      	ldr	r1, [pc, #52]	@ (8012f8c <tcp_remove_listener+0x4c>)
 8012f56:	480e      	ldr	r0, [pc, #56]	@ (8012f90 <tcp_remove_listener+0x50>)
 8012f58:	f00b fd42 	bl	801e9e0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	60fb      	str	r3, [r7, #12]
 8012f60:	e00a      	b.n	8012f78 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012f66:	683a      	ldr	r2, [r7, #0]
 8012f68:	429a      	cmp	r2, r3
 8012f6a:	d102      	bne.n	8012f72 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	2200      	movs	r2, #0
 8012f70:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	68db      	ldr	r3, [r3, #12]
 8012f76:	60fb      	str	r3, [r7, #12]
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d1f1      	bne.n	8012f62 <tcp_remove_listener+0x22>
    }
  }
}
 8012f7e:	bf00      	nop
 8012f80:	bf00      	nop
 8012f82:	3710      	adds	r7, #16
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}
 8012f88:	08020f64 	.word	0x08020f64
 8012f8c:	08020fec 	.word	0x08020fec
 8012f90:	08020fa8 	.word	0x08020fa8

08012f94 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b084      	sub	sp, #16
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d106      	bne.n	8012fb0 <tcp_listen_closed+0x1c>
 8012fa2:	4b14      	ldr	r3, [pc, #80]	@ (8012ff4 <tcp_listen_closed+0x60>)
 8012fa4:	f240 1211 	movw	r2, #273	@ 0x111
 8012fa8:	4913      	ldr	r1, [pc, #76]	@ (8012ff8 <tcp_listen_closed+0x64>)
 8012faa:	4814      	ldr	r0, [pc, #80]	@ (8012ffc <tcp_listen_closed+0x68>)
 8012fac:	f00b fd18 	bl	801e9e0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	7d1b      	ldrb	r3, [r3, #20]
 8012fb4:	2b01      	cmp	r3, #1
 8012fb6:	d006      	beq.n	8012fc6 <tcp_listen_closed+0x32>
 8012fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8012ff4 <tcp_listen_closed+0x60>)
 8012fba:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8012fbe:	4910      	ldr	r1, [pc, #64]	@ (8013000 <tcp_listen_closed+0x6c>)
 8012fc0:	480e      	ldr	r0, [pc, #56]	@ (8012ffc <tcp_listen_closed+0x68>)
 8012fc2:	f00b fd0d 	bl	801e9e0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	60fb      	str	r3, [r7, #12]
 8012fca:	e00b      	b.n	8012fe4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8012fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8013004 <tcp_listen_closed+0x70>)
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	6879      	ldr	r1, [r7, #4]
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f7ff ffb1 	bl	8012f40 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	3301      	adds	r3, #1
 8012fe2:	60fb      	str	r3, [r7, #12]
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	2b03      	cmp	r3, #3
 8012fe8:	d9f0      	bls.n	8012fcc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8012fea:	bf00      	nop
 8012fec:	bf00      	nop
 8012fee:	3710      	adds	r7, #16
 8012ff0:	46bd      	mov	sp, r7
 8012ff2:	bd80      	pop	{r7, pc}
 8012ff4:	08020f64 	.word	0x08020f64
 8012ff8:	08021014 	.word	0x08021014
 8012ffc:	08020fa8 	.word	0x08020fa8
 8013000:	08021020 	.word	0x08021020
 8013004:	08023660 	.word	0x08023660

08013008 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8013008:	b5b0      	push	{r4, r5, r7, lr}
 801300a:	b088      	sub	sp, #32
 801300c:	af04      	add	r7, sp, #16
 801300e:	6078      	str	r0, [r7, #4]
 8013010:	460b      	mov	r3, r1
 8013012:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d106      	bne.n	8013028 <tcp_close_shutdown+0x20>
 801301a:	4b63      	ldr	r3, [pc, #396]	@ (80131a8 <tcp_close_shutdown+0x1a0>)
 801301c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8013020:	4962      	ldr	r1, [pc, #392]	@ (80131ac <tcp_close_shutdown+0x1a4>)
 8013022:	4863      	ldr	r0, [pc, #396]	@ (80131b0 <tcp_close_shutdown+0x1a8>)
 8013024:	f00b fcdc 	bl	801e9e0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8013028:	78fb      	ldrb	r3, [r7, #3]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d066      	beq.n	80130fc <tcp_close_shutdown+0xf4>
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	7d1b      	ldrb	r3, [r3, #20]
 8013032:	2b04      	cmp	r3, #4
 8013034:	d003      	beq.n	801303e <tcp_close_shutdown+0x36>
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	7d1b      	ldrb	r3, [r3, #20]
 801303a:	2b07      	cmp	r3, #7
 801303c:	d15e      	bne.n	80130fc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013042:	2b00      	cmp	r3, #0
 8013044:	d104      	bne.n	8013050 <tcp_close_shutdown+0x48>
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801304a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801304e:	d055      	beq.n	80130fc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	8b5b      	ldrh	r3, [r3, #26]
 8013054:	f003 0310 	and.w	r3, r3, #16
 8013058:	2b00      	cmp	r3, #0
 801305a:	d106      	bne.n	801306a <tcp_close_shutdown+0x62>
 801305c:	4b52      	ldr	r3, [pc, #328]	@ (80131a8 <tcp_close_shutdown+0x1a0>)
 801305e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8013062:	4954      	ldr	r1, [pc, #336]	@ (80131b4 <tcp_close_shutdown+0x1ac>)
 8013064:	4852      	ldr	r0, [pc, #328]	@ (80131b0 <tcp_close_shutdown+0x1a8>)
 8013066:	f00b fcbb 	bl	801e9e0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013072:	687d      	ldr	r5, [r7, #4]
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	3304      	adds	r3, #4
 8013078:	687a      	ldr	r2, [r7, #4]
 801307a:	8ad2      	ldrh	r2, [r2, #22]
 801307c:	6879      	ldr	r1, [r7, #4]
 801307e:	8b09      	ldrh	r1, [r1, #24]
 8013080:	9102      	str	r1, [sp, #8]
 8013082:	9201      	str	r2, [sp, #4]
 8013084:	9300      	str	r3, [sp, #0]
 8013086:	462b      	mov	r3, r5
 8013088:	4622      	mov	r2, r4
 801308a:	4601      	mov	r1, r0
 801308c:	6878      	ldr	r0, [r7, #4]
 801308e:	f004 fe8d 	bl	8017dac <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8013092:	6878      	ldr	r0, [r7, #4]
 8013094:	f001 f8c8 	bl	8014228 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013098:	4b47      	ldr	r3, [pc, #284]	@ (80131b8 <tcp_close_shutdown+0x1b0>)
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	687a      	ldr	r2, [r7, #4]
 801309e:	429a      	cmp	r2, r3
 80130a0:	d105      	bne.n	80130ae <tcp_close_shutdown+0xa6>
 80130a2:	4b45      	ldr	r3, [pc, #276]	@ (80131b8 <tcp_close_shutdown+0x1b0>)
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	68db      	ldr	r3, [r3, #12]
 80130a8:	4a43      	ldr	r2, [pc, #268]	@ (80131b8 <tcp_close_shutdown+0x1b0>)
 80130aa:	6013      	str	r3, [r2, #0]
 80130ac:	e013      	b.n	80130d6 <tcp_close_shutdown+0xce>
 80130ae:	4b42      	ldr	r3, [pc, #264]	@ (80131b8 <tcp_close_shutdown+0x1b0>)
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	60fb      	str	r3, [r7, #12]
 80130b4:	e00c      	b.n	80130d0 <tcp_close_shutdown+0xc8>
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	68db      	ldr	r3, [r3, #12]
 80130ba:	687a      	ldr	r2, [r7, #4]
 80130bc:	429a      	cmp	r2, r3
 80130be:	d104      	bne.n	80130ca <tcp_close_shutdown+0xc2>
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	68da      	ldr	r2, [r3, #12]
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	60da      	str	r2, [r3, #12]
 80130c8:	e005      	b.n	80130d6 <tcp_close_shutdown+0xce>
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	68db      	ldr	r3, [r3, #12]
 80130ce:	60fb      	str	r3, [r7, #12]
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d1ef      	bne.n	80130b6 <tcp_close_shutdown+0xae>
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	2200      	movs	r2, #0
 80130da:	60da      	str	r2, [r3, #12]
 80130dc:	4b37      	ldr	r3, [pc, #220]	@ (80131bc <tcp_close_shutdown+0x1b4>)
 80130de:	2201      	movs	r2, #1
 80130e0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80130e2:	4b37      	ldr	r3, [pc, #220]	@ (80131c0 <tcp_close_shutdown+0x1b8>)
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	687a      	ldr	r2, [r7, #4]
 80130e8:	429a      	cmp	r2, r3
 80130ea:	d102      	bne.n	80130f2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80130ec:	f003 fd5c 	bl	8016ba8 <tcp_trigger_input_pcb_close>
 80130f0:	e002      	b.n	80130f8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80130f2:	6878      	ldr	r0, [r7, #4]
 80130f4:	f7ff fed6 	bl	8012ea4 <tcp_free>
      }
      return ERR_OK;
 80130f8:	2300      	movs	r3, #0
 80130fa:	e050      	b.n	801319e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	7d1b      	ldrb	r3, [r3, #20]
 8013100:	2b02      	cmp	r3, #2
 8013102:	d03b      	beq.n	801317c <tcp_close_shutdown+0x174>
 8013104:	2b02      	cmp	r3, #2
 8013106:	dc44      	bgt.n	8013192 <tcp_close_shutdown+0x18a>
 8013108:	2b00      	cmp	r3, #0
 801310a:	d002      	beq.n	8013112 <tcp_close_shutdown+0x10a>
 801310c:	2b01      	cmp	r3, #1
 801310e:	d02a      	beq.n	8013166 <tcp_close_shutdown+0x15e>
 8013110:	e03f      	b.n	8013192 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	8adb      	ldrh	r3, [r3, #22]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d021      	beq.n	801315e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801311a:	4b2a      	ldr	r3, [pc, #168]	@ (80131c4 <tcp_close_shutdown+0x1bc>)
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	687a      	ldr	r2, [r7, #4]
 8013120:	429a      	cmp	r2, r3
 8013122:	d105      	bne.n	8013130 <tcp_close_shutdown+0x128>
 8013124:	4b27      	ldr	r3, [pc, #156]	@ (80131c4 <tcp_close_shutdown+0x1bc>)
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	68db      	ldr	r3, [r3, #12]
 801312a:	4a26      	ldr	r2, [pc, #152]	@ (80131c4 <tcp_close_shutdown+0x1bc>)
 801312c:	6013      	str	r3, [r2, #0]
 801312e:	e013      	b.n	8013158 <tcp_close_shutdown+0x150>
 8013130:	4b24      	ldr	r3, [pc, #144]	@ (80131c4 <tcp_close_shutdown+0x1bc>)
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	60bb      	str	r3, [r7, #8]
 8013136:	e00c      	b.n	8013152 <tcp_close_shutdown+0x14a>
 8013138:	68bb      	ldr	r3, [r7, #8]
 801313a:	68db      	ldr	r3, [r3, #12]
 801313c:	687a      	ldr	r2, [r7, #4]
 801313e:	429a      	cmp	r2, r3
 8013140:	d104      	bne.n	801314c <tcp_close_shutdown+0x144>
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	68da      	ldr	r2, [r3, #12]
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	60da      	str	r2, [r3, #12]
 801314a:	e005      	b.n	8013158 <tcp_close_shutdown+0x150>
 801314c:	68bb      	ldr	r3, [r7, #8]
 801314e:	68db      	ldr	r3, [r3, #12]
 8013150:	60bb      	str	r3, [r7, #8]
 8013152:	68bb      	ldr	r3, [r7, #8]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d1ef      	bne.n	8013138 <tcp_close_shutdown+0x130>
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	2200      	movs	r2, #0
 801315c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801315e:	6878      	ldr	r0, [r7, #4]
 8013160:	f7ff fea0 	bl	8012ea4 <tcp_free>
      break;
 8013164:	e01a      	b.n	801319c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8013166:	6878      	ldr	r0, [r7, #4]
 8013168:	f7ff ff14 	bl	8012f94 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801316c:	6879      	ldr	r1, [r7, #4]
 801316e:	4816      	ldr	r0, [pc, #88]	@ (80131c8 <tcp_close_shutdown+0x1c0>)
 8013170:	f001 f8aa 	bl	80142c8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8013174:	6878      	ldr	r0, [r7, #4]
 8013176:	f7ff feb1 	bl	8012edc <tcp_free_listen>
      break;
 801317a:	e00f      	b.n	801319c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801317c:	6879      	ldr	r1, [r7, #4]
 801317e:	480e      	ldr	r0, [pc, #56]	@ (80131b8 <tcp_close_shutdown+0x1b0>)
 8013180:	f001 f8a2 	bl	80142c8 <tcp_pcb_remove>
 8013184:	4b0d      	ldr	r3, [pc, #52]	@ (80131bc <tcp_close_shutdown+0x1b4>)
 8013186:	2201      	movs	r2, #1
 8013188:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801318a:	6878      	ldr	r0, [r7, #4]
 801318c:	f7ff fe8a 	bl	8012ea4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8013190:	e004      	b.n	801319c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8013192:	6878      	ldr	r0, [r7, #4]
 8013194:	f000 f81a 	bl	80131cc <tcp_close_shutdown_fin>
 8013198:	4603      	mov	r3, r0
 801319a:	e000      	b.n	801319e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801319c:	2300      	movs	r3, #0
}
 801319e:	4618      	mov	r0, r3
 80131a0:	3710      	adds	r7, #16
 80131a2:	46bd      	mov	sp, r7
 80131a4:	bdb0      	pop	{r4, r5, r7, pc}
 80131a6:	bf00      	nop
 80131a8:	08020f64 	.word	0x08020f64
 80131ac:	08021038 	.word	0x08021038
 80131b0:	08020fa8 	.word	0x08020fa8
 80131b4:	08021058 	.word	0x08021058
 80131b8:	200047a8 	.word	0x200047a8
 80131bc:	200047b0 	.word	0x200047b0
 80131c0:	200047e8 	.word	0x200047e8
 80131c4:	200047a0 	.word	0x200047a0
 80131c8:	200047a4 	.word	0x200047a4

080131cc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b084      	sub	sp, #16
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d106      	bne.n	80131e8 <tcp_close_shutdown_fin+0x1c>
 80131da:	4b2e      	ldr	r3, [pc, #184]	@ (8013294 <tcp_close_shutdown_fin+0xc8>)
 80131dc:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80131e0:	492d      	ldr	r1, [pc, #180]	@ (8013298 <tcp_close_shutdown_fin+0xcc>)
 80131e2:	482e      	ldr	r0, [pc, #184]	@ (801329c <tcp_close_shutdown_fin+0xd0>)
 80131e4:	f00b fbfc 	bl	801e9e0 <iprintf>

  switch (pcb->state) {
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	7d1b      	ldrb	r3, [r3, #20]
 80131ec:	2b07      	cmp	r3, #7
 80131ee:	d020      	beq.n	8013232 <tcp_close_shutdown_fin+0x66>
 80131f0:	2b07      	cmp	r3, #7
 80131f2:	dc2b      	bgt.n	801324c <tcp_close_shutdown_fin+0x80>
 80131f4:	2b03      	cmp	r3, #3
 80131f6:	d002      	beq.n	80131fe <tcp_close_shutdown_fin+0x32>
 80131f8:	2b04      	cmp	r3, #4
 80131fa:	d00d      	beq.n	8013218 <tcp_close_shutdown_fin+0x4c>
 80131fc:	e026      	b.n	801324c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80131fe:	6878      	ldr	r0, [r7, #4]
 8013200:	f003 fee2 	bl	8016fc8 <tcp_send_fin>
 8013204:	4603      	mov	r3, r0
 8013206:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d11f      	bne.n	8013250 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	2205      	movs	r2, #5
 8013214:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013216:	e01b      	b.n	8013250 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8013218:	6878      	ldr	r0, [r7, #4]
 801321a:	f003 fed5 	bl	8016fc8 <tcp_send_fin>
 801321e:	4603      	mov	r3, r0
 8013220:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d114      	bne.n	8013254 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	2205      	movs	r2, #5
 801322e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013230:	e010      	b.n	8013254 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8013232:	6878      	ldr	r0, [r7, #4]
 8013234:	f003 fec8 	bl	8016fc8 <tcp_send_fin>
 8013238:	4603      	mov	r3, r0
 801323a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801323c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d109      	bne.n	8013258 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	2209      	movs	r2, #9
 8013248:	751a      	strb	r2, [r3, #20]
      }
      break;
 801324a:	e005      	b.n	8013258 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801324c:	2300      	movs	r3, #0
 801324e:	e01c      	b.n	801328a <tcp_close_shutdown_fin+0xbe>
      break;
 8013250:	bf00      	nop
 8013252:	e002      	b.n	801325a <tcp_close_shutdown_fin+0x8e>
      break;
 8013254:	bf00      	nop
 8013256:	e000      	b.n	801325a <tcp_close_shutdown_fin+0x8e>
      break;
 8013258:	bf00      	nop
  }

  if (err == ERR_OK) {
 801325a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d103      	bne.n	801326a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8013262:	6878      	ldr	r0, [r7, #4]
 8013264:	f003 ffee 	bl	8017244 <tcp_output>
 8013268:	e00d      	b.n	8013286 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801326a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801326e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013272:	d108      	bne.n	8013286 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	8b5b      	ldrh	r3, [r3, #26]
 8013278:	f043 0308 	orr.w	r3, r3, #8
 801327c:	b29a      	uxth	r2, r3
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8013282:	2300      	movs	r3, #0
 8013284:	e001      	b.n	801328a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8013286:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801328a:	4618      	mov	r0, r3
 801328c:	3710      	adds	r7, #16
 801328e:	46bd      	mov	sp, r7
 8013290:	bd80      	pop	{r7, pc}
 8013292:	bf00      	nop
 8013294:	08020f64 	.word	0x08020f64
 8013298:	08021014 	.word	0x08021014
 801329c:	08020fa8 	.word	0x08020fa8

080132a0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b082      	sub	sp, #8
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d109      	bne.n	80132c2 <tcp_close+0x22>
 80132ae:	4b0f      	ldr	r3, [pc, #60]	@ (80132ec <tcp_close+0x4c>)
 80132b0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80132b4:	490e      	ldr	r1, [pc, #56]	@ (80132f0 <tcp_close+0x50>)
 80132b6:	480f      	ldr	r0, [pc, #60]	@ (80132f4 <tcp_close+0x54>)
 80132b8:	f00b fb92 	bl	801e9e0 <iprintf>
 80132bc:	f06f 030f 	mvn.w	r3, #15
 80132c0:	e00f      	b.n	80132e2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	7d1b      	ldrb	r3, [r3, #20]
 80132c6:	2b01      	cmp	r3, #1
 80132c8:	d006      	beq.n	80132d8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	8b5b      	ldrh	r3, [r3, #26]
 80132ce:	f043 0310 	orr.w	r3, r3, #16
 80132d2:	b29a      	uxth	r2, r3
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80132d8:	2101      	movs	r1, #1
 80132da:	6878      	ldr	r0, [r7, #4]
 80132dc:	f7ff fe94 	bl	8013008 <tcp_close_shutdown>
 80132e0:	4603      	mov	r3, r0
}
 80132e2:	4618      	mov	r0, r3
 80132e4:	3708      	adds	r7, #8
 80132e6:	46bd      	mov	sp, r7
 80132e8:	bd80      	pop	{r7, pc}
 80132ea:	bf00      	nop
 80132ec:	08020f64 	.word	0x08020f64
 80132f0:	08021074 	.word	0x08021074
 80132f4:	08020fa8 	.word	0x08020fa8

080132f8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b08e      	sub	sp, #56	@ 0x38
 80132fc:	af04      	add	r7, sp, #16
 80132fe:	6078      	str	r0, [r7, #4]
 8013300:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d107      	bne.n	8013318 <tcp_abandon+0x20>
 8013308:	4b52      	ldr	r3, [pc, #328]	@ (8013454 <tcp_abandon+0x15c>)
 801330a:	f240 223d 	movw	r2, #573	@ 0x23d
 801330e:	4952      	ldr	r1, [pc, #328]	@ (8013458 <tcp_abandon+0x160>)
 8013310:	4852      	ldr	r0, [pc, #328]	@ (801345c <tcp_abandon+0x164>)
 8013312:	f00b fb65 	bl	801e9e0 <iprintf>
 8013316:	e099      	b.n	801344c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	7d1b      	ldrb	r3, [r3, #20]
 801331c:	2b01      	cmp	r3, #1
 801331e:	d106      	bne.n	801332e <tcp_abandon+0x36>
 8013320:	4b4c      	ldr	r3, [pc, #304]	@ (8013454 <tcp_abandon+0x15c>)
 8013322:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8013326:	494e      	ldr	r1, [pc, #312]	@ (8013460 <tcp_abandon+0x168>)
 8013328:	484c      	ldr	r0, [pc, #304]	@ (801345c <tcp_abandon+0x164>)
 801332a:	f00b fb59 	bl	801e9e0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	7d1b      	ldrb	r3, [r3, #20]
 8013332:	2b0a      	cmp	r3, #10
 8013334:	d107      	bne.n	8013346 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8013336:	6879      	ldr	r1, [r7, #4]
 8013338:	484a      	ldr	r0, [pc, #296]	@ (8013464 <tcp_abandon+0x16c>)
 801333a:	f000 ffc5 	bl	80142c8 <tcp_pcb_remove>
    tcp_free(pcb);
 801333e:	6878      	ldr	r0, [r7, #4]
 8013340:	f7ff fdb0 	bl	8012ea4 <tcp_free>
 8013344:	e082      	b.n	801344c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8013346:	2300      	movs	r3, #0
 8013348:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801334a:	2300      	movs	r3, #0
 801334c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013352:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013358:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013360:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	691b      	ldr	r3, [r3, #16]
 8013366:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	7d1b      	ldrb	r3, [r3, #20]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d126      	bne.n	80133be <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	8adb      	ldrh	r3, [r3, #22]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d02e      	beq.n	80133d6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013378:	4b3b      	ldr	r3, [pc, #236]	@ (8013468 <tcp_abandon+0x170>)
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	687a      	ldr	r2, [r7, #4]
 801337e:	429a      	cmp	r2, r3
 8013380:	d105      	bne.n	801338e <tcp_abandon+0x96>
 8013382:	4b39      	ldr	r3, [pc, #228]	@ (8013468 <tcp_abandon+0x170>)
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	68db      	ldr	r3, [r3, #12]
 8013388:	4a37      	ldr	r2, [pc, #220]	@ (8013468 <tcp_abandon+0x170>)
 801338a:	6013      	str	r3, [r2, #0]
 801338c:	e013      	b.n	80133b6 <tcp_abandon+0xbe>
 801338e:	4b36      	ldr	r3, [pc, #216]	@ (8013468 <tcp_abandon+0x170>)
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	61fb      	str	r3, [r7, #28]
 8013394:	e00c      	b.n	80133b0 <tcp_abandon+0xb8>
 8013396:	69fb      	ldr	r3, [r7, #28]
 8013398:	68db      	ldr	r3, [r3, #12]
 801339a:	687a      	ldr	r2, [r7, #4]
 801339c:	429a      	cmp	r2, r3
 801339e:	d104      	bne.n	80133aa <tcp_abandon+0xb2>
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	68da      	ldr	r2, [r3, #12]
 80133a4:	69fb      	ldr	r3, [r7, #28]
 80133a6:	60da      	str	r2, [r3, #12]
 80133a8:	e005      	b.n	80133b6 <tcp_abandon+0xbe>
 80133aa:	69fb      	ldr	r3, [r7, #28]
 80133ac:	68db      	ldr	r3, [r3, #12]
 80133ae:	61fb      	str	r3, [r7, #28]
 80133b0:	69fb      	ldr	r3, [r7, #28]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d1ef      	bne.n	8013396 <tcp_abandon+0x9e>
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	2200      	movs	r2, #0
 80133ba:	60da      	str	r2, [r3, #12]
 80133bc:	e00b      	b.n	80133d6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80133be:	683b      	ldr	r3, [r7, #0]
 80133c0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	8adb      	ldrh	r3, [r3, #22]
 80133c6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80133c8:	6879      	ldr	r1, [r7, #4]
 80133ca:	4828      	ldr	r0, [pc, #160]	@ (801346c <tcp_abandon+0x174>)
 80133cc:	f000 ff7c 	bl	80142c8 <tcp_pcb_remove>
 80133d0:	4b27      	ldr	r3, [pc, #156]	@ (8013470 <tcp_abandon+0x178>)
 80133d2:	2201      	movs	r2, #1
 80133d4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d004      	beq.n	80133e8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80133e2:	4618      	mov	r0, r3
 80133e4:	f000 fd1e 	bl	8013e24 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d004      	beq.n	80133fa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80133f4:	4618      	mov	r0, r3
 80133f6:	f000 fd15 	bl	8013e24 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d004      	beq.n	801340c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013406:	4618      	mov	r0, r3
 8013408:	f000 fd0c 	bl	8013e24 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801340c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801340e:	2b00      	cmp	r3, #0
 8013410:	d00e      	beq.n	8013430 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8013412:	6879      	ldr	r1, [r7, #4]
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	3304      	adds	r3, #4
 8013418:	687a      	ldr	r2, [r7, #4]
 801341a:	8b12      	ldrh	r2, [r2, #24]
 801341c:	9202      	str	r2, [sp, #8]
 801341e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013420:	9201      	str	r2, [sp, #4]
 8013422:	9300      	str	r3, [sp, #0]
 8013424:	460b      	mov	r3, r1
 8013426:	697a      	ldr	r2, [r7, #20]
 8013428:	69b9      	ldr	r1, [r7, #24]
 801342a:	6878      	ldr	r0, [r7, #4]
 801342c:	f004 fcbe 	bl	8017dac <tcp_rst>
    }
    last_state = pcb->state;
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	7d1b      	ldrb	r3, [r3, #20]
 8013434:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8013436:	6878      	ldr	r0, [r7, #4]
 8013438:	f7ff fd34 	bl	8012ea4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801343c:	693b      	ldr	r3, [r7, #16]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d004      	beq.n	801344c <tcp_abandon+0x154>
 8013442:	693b      	ldr	r3, [r7, #16]
 8013444:	f06f 010c 	mvn.w	r1, #12
 8013448:	68f8      	ldr	r0, [r7, #12]
 801344a:	4798      	blx	r3
  }
}
 801344c:	3728      	adds	r7, #40	@ 0x28
 801344e:	46bd      	mov	sp, r7
 8013450:	bd80      	pop	{r7, pc}
 8013452:	bf00      	nop
 8013454:	08020f64 	.word	0x08020f64
 8013458:	080210a8 	.word	0x080210a8
 801345c:	08020fa8 	.word	0x08020fa8
 8013460:	080210c4 	.word	0x080210c4
 8013464:	200047ac 	.word	0x200047ac
 8013468:	200047a0 	.word	0x200047a0
 801346c:	200047a8 	.word	0x200047a8
 8013470:	200047b0 	.word	0x200047b0

08013474 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b082      	sub	sp, #8
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801347c:	2101      	movs	r1, #1
 801347e:	6878      	ldr	r0, [r7, #4]
 8013480:	f7ff ff3a 	bl	80132f8 <tcp_abandon>
}
 8013484:	bf00      	nop
 8013486:	3708      	adds	r7, #8
 8013488:	46bd      	mov	sp, r7
 801348a:	bd80      	pop	{r7, pc}

0801348c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b084      	sub	sp, #16
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d106      	bne.n	80134a8 <tcp_update_rcv_ann_wnd+0x1c>
 801349a:	4b25      	ldr	r3, [pc, #148]	@ (8013530 <tcp_update_rcv_ann_wnd+0xa4>)
 801349c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80134a0:	4924      	ldr	r1, [pc, #144]	@ (8013534 <tcp_update_rcv_ann_wnd+0xa8>)
 80134a2:	4825      	ldr	r0, [pc, #148]	@ (8013538 <tcp_update_rcv_ann_wnd+0xac>)
 80134a4:	f00b fa9c 	bl	801e9e0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134ac:	687a      	ldr	r2, [r7, #4]
 80134ae:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80134b0:	4413      	add	r3, r2
 80134b2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134b8:	687a      	ldr	r2, [r7, #4]
 80134ba:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80134bc:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80134c0:	bf28      	it	cs
 80134c2:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80134c6:	b292      	uxth	r2, r2
 80134c8:	4413      	add	r3, r2
 80134ca:	68fa      	ldr	r2, [r7, #12]
 80134cc:	1ad3      	subs	r3, r2, r3
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	db08      	blt.n	80134e4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134de:	68fa      	ldr	r2, [r7, #12]
 80134e0:	1ad3      	subs	r3, r2, r3
 80134e2:	e020      	b.n	8013526 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134ec:	1ad3      	subs	r3, r2, r3
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	dd03      	ble.n	80134fa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	2200      	movs	r2, #0
 80134f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80134f8:	e014      	b.n	8013524 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013502:	1ad3      	subs	r3, r2, r3
 8013504:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8013506:	68bb      	ldr	r3, [r7, #8]
 8013508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801350c:	d306      	bcc.n	801351c <tcp_update_rcv_ann_wnd+0x90>
 801350e:	4b08      	ldr	r3, [pc, #32]	@ (8013530 <tcp_update_rcv_ann_wnd+0xa4>)
 8013510:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8013514:	4909      	ldr	r1, [pc, #36]	@ (801353c <tcp_update_rcv_ann_wnd+0xb0>)
 8013516:	4808      	ldr	r0, [pc, #32]	@ (8013538 <tcp_update_rcv_ann_wnd+0xac>)
 8013518:	f00b fa62 	bl	801e9e0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801351c:	68bb      	ldr	r3, [r7, #8]
 801351e:	b29a      	uxth	r2, r3
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8013524:	2300      	movs	r3, #0
  }
}
 8013526:	4618      	mov	r0, r3
 8013528:	3710      	adds	r7, #16
 801352a:	46bd      	mov	sp, r7
 801352c:	bd80      	pop	{r7, pc}
 801352e:	bf00      	nop
 8013530:	08020f64 	.word	0x08020f64
 8013534:	080211c0 	.word	0x080211c0
 8013538:	08020fa8 	.word	0x08020fa8
 801353c:	080211e4 	.word	0x080211e4

08013540 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8013540:	b580      	push	{r7, lr}
 8013542:	b084      	sub	sp, #16
 8013544:	af00      	add	r7, sp, #0
 8013546:	6078      	str	r0, [r7, #4]
 8013548:	460b      	mov	r3, r1
 801354a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d107      	bne.n	8013562 <tcp_recved+0x22>
 8013552:	4b1f      	ldr	r3, [pc, #124]	@ (80135d0 <tcp_recved+0x90>)
 8013554:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8013558:	491e      	ldr	r1, [pc, #120]	@ (80135d4 <tcp_recved+0x94>)
 801355a:	481f      	ldr	r0, [pc, #124]	@ (80135d8 <tcp_recved+0x98>)
 801355c:	f00b fa40 	bl	801e9e0 <iprintf>
 8013560:	e032      	b.n	80135c8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	7d1b      	ldrb	r3, [r3, #20]
 8013566:	2b01      	cmp	r3, #1
 8013568:	d106      	bne.n	8013578 <tcp_recved+0x38>
 801356a:	4b19      	ldr	r3, [pc, #100]	@ (80135d0 <tcp_recved+0x90>)
 801356c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8013570:	491a      	ldr	r1, [pc, #104]	@ (80135dc <tcp_recved+0x9c>)
 8013572:	4819      	ldr	r0, [pc, #100]	@ (80135d8 <tcp_recved+0x98>)
 8013574:	f00b fa34 	bl	801e9e0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801357c:	887b      	ldrh	r3, [r7, #2]
 801357e:	4413      	add	r3, r2
 8013580:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8013582:	89fb      	ldrh	r3, [r7, #14]
 8013584:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8013588:	d804      	bhi.n	8013594 <tcp_recved+0x54>
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801358e:	89fa      	ldrh	r2, [r7, #14]
 8013590:	429a      	cmp	r2, r3
 8013592:	d204      	bcs.n	801359e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801359a:	851a      	strh	r2, [r3, #40]	@ 0x28
 801359c:	e002      	b.n	80135a4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	89fa      	ldrh	r2, [r7, #14]
 80135a2:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80135a4:	6878      	ldr	r0, [r7, #4]
 80135a6:	f7ff ff71 	bl	801348c <tcp_update_rcv_ann_wnd>
 80135aa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80135ac:	68bb      	ldr	r3, [r7, #8]
 80135ae:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80135b2:	d309      	bcc.n	80135c8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	8b5b      	ldrh	r3, [r3, #26]
 80135b8:	f043 0302 	orr.w	r3, r3, #2
 80135bc:	b29a      	uxth	r2, r3
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80135c2:	6878      	ldr	r0, [r7, #4]
 80135c4:	f003 fe3e 	bl	8017244 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80135c8:	3710      	adds	r7, #16
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}
 80135ce:	bf00      	nop
 80135d0:	08020f64 	.word	0x08020f64
 80135d4:	08021200 	.word	0x08021200
 80135d8:	08020fa8 	.word	0x08020fa8
 80135dc:	08021218 	.word	0x08021218

080135e0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80135e0:	b5b0      	push	{r4, r5, r7, lr}
 80135e2:	b090      	sub	sp, #64	@ 0x40
 80135e4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80135e6:	2300      	movs	r3, #0
 80135e8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80135ec:	4b95      	ldr	r3, [pc, #596]	@ (8013844 <tcp_slowtmr+0x264>)
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	3301      	adds	r3, #1
 80135f2:	4a94      	ldr	r2, [pc, #592]	@ (8013844 <tcp_slowtmr+0x264>)
 80135f4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80135f6:	4b94      	ldr	r3, [pc, #592]	@ (8013848 <tcp_slowtmr+0x268>)
 80135f8:	781b      	ldrb	r3, [r3, #0]
 80135fa:	3301      	adds	r3, #1
 80135fc:	b2da      	uxtb	r2, r3
 80135fe:	4b92      	ldr	r3, [pc, #584]	@ (8013848 <tcp_slowtmr+0x268>)
 8013600:	701a      	strb	r2, [r3, #0]
 8013602:	e000      	b.n	8013606 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8013604:	bf00      	nop
  prev = NULL;
 8013606:	2300      	movs	r3, #0
 8013608:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801360a:	4b90      	ldr	r3, [pc, #576]	@ (801384c <tcp_slowtmr+0x26c>)
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013610:	e29d      	b.n	8013b4e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8013612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013614:	7d1b      	ldrb	r3, [r3, #20]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d106      	bne.n	8013628 <tcp_slowtmr+0x48>
 801361a:	4b8d      	ldr	r3, [pc, #564]	@ (8013850 <tcp_slowtmr+0x270>)
 801361c:	f240 42be 	movw	r2, #1214	@ 0x4be
 8013620:	498c      	ldr	r1, [pc, #560]	@ (8013854 <tcp_slowtmr+0x274>)
 8013622:	488d      	ldr	r0, [pc, #564]	@ (8013858 <tcp_slowtmr+0x278>)
 8013624:	f00b f9dc 	bl	801e9e0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801362a:	7d1b      	ldrb	r3, [r3, #20]
 801362c:	2b01      	cmp	r3, #1
 801362e:	d106      	bne.n	801363e <tcp_slowtmr+0x5e>
 8013630:	4b87      	ldr	r3, [pc, #540]	@ (8013850 <tcp_slowtmr+0x270>)
 8013632:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8013636:	4989      	ldr	r1, [pc, #548]	@ (801385c <tcp_slowtmr+0x27c>)
 8013638:	4887      	ldr	r0, [pc, #540]	@ (8013858 <tcp_slowtmr+0x278>)
 801363a:	f00b f9d1 	bl	801e9e0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801363e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013640:	7d1b      	ldrb	r3, [r3, #20]
 8013642:	2b0a      	cmp	r3, #10
 8013644:	d106      	bne.n	8013654 <tcp_slowtmr+0x74>
 8013646:	4b82      	ldr	r3, [pc, #520]	@ (8013850 <tcp_slowtmr+0x270>)
 8013648:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801364c:	4984      	ldr	r1, [pc, #528]	@ (8013860 <tcp_slowtmr+0x280>)
 801364e:	4882      	ldr	r0, [pc, #520]	@ (8013858 <tcp_slowtmr+0x278>)
 8013650:	f00b f9c6 	bl	801e9e0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013656:	7f9a      	ldrb	r2, [r3, #30]
 8013658:	4b7b      	ldr	r3, [pc, #492]	@ (8013848 <tcp_slowtmr+0x268>)
 801365a:	781b      	ldrb	r3, [r3, #0]
 801365c:	429a      	cmp	r2, r3
 801365e:	d105      	bne.n	801366c <tcp_slowtmr+0x8c>
      prev = pcb;
 8013660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013662:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013666:	68db      	ldr	r3, [r3, #12]
 8013668:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801366a:	e270      	b.n	8013b4e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801366c:	4b76      	ldr	r3, [pc, #472]	@ (8013848 <tcp_slowtmr+0x268>)
 801366e:	781a      	ldrb	r2, [r3, #0]
 8013670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013672:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8013674:	2300      	movs	r3, #0
 8013676:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801367a:	2300      	movs	r3, #0
 801367c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8013680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013682:	7d1b      	ldrb	r3, [r3, #20]
 8013684:	2b02      	cmp	r3, #2
 8013686:	d10a      	bne.n	801369e <tcp_slowtmr+0xbe>
 8013688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801368a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801368e:	2b05      	cmp	r3, #5
 8013690:	d905      	bls.n	801369e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8013692:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013696:	3301      	adds	r3, #1
 8013698:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801369c:	e11e      	b.n	80138dc <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801369e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80136a4:	2b0b      	cmp	r3, #11
 80136a6:	d905      	bls.n	80136b4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80136a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80136ac:	3301      	adds	r3, #1
 80136ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80136b2:	e113      	b.n	80138dc <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80136b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136b6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d075      	beq.n	80137aa <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80136be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d006      	beq.n	80136d4 <tcp_slowtmr+0xf4>
 80136c6:	4b62      	ldr	r3, [pc, #392]	@ (8013850 <tcp_slowtmr+0x270>)
 80136c8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80136cc:	4965      	ldr	r1, [pc, #404]	@ (8013864 <tcp_slowtmr+0x284>)
 80136ce:	4862      	ldr	r0, [pc, #392]	@ (8013858 <tcp_slowtmr+0x278>)
 80136d0:	f00b f986 	bl	801e9e0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80136d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d106      	bne.n	80136ea <tcp_slowtmr+0x10a>
 80136dc:	4b5c      	ldr	r3, [pc, #368]	@ (8013850 <tcp_slowtmr+0x270>)
 80136de:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80136e2:	4961      	ldr	r1, [pc, #388]	@ (8013868 <tcp_slowtmr+0x288>)
 80136e4:	485c      	ldr	r0, [pc, #368]	@ (8013858 <tcp_slowtmr+0x278>)
 80136e6:	f00b f97b 	bl	801e9e0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80136ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136ec:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80136f0:	2b0b      	cmp	r3, #11
 80136f2:	d905      	bls.n	8013700 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80136f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80136f8:	3301      	adds	r3, #1
 80136fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80136fe:	e0ed      	b.n	80138dc <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8013700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013702:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013706:	3b01      	subs	r3, #1
 8013708:	4a58      	ldr	r2, [pc, #352]	@ (801386c <tcp_slowtmr+0x28c>)
 801370a:	5cd3      	ldrb	r3, [r2, r3]
 801370c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801370e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013710:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013714:	7c7a      	ldrb	r2, [r7, #17]
 8013716:	429a      	cmp	r2, r3
 8013718:	d907      	bls.n	801372a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801371a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801371c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013720:	3301      	adds	r3, #1
 8013722:	b2da      	uxtb	r2, r3
 8013724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013726:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801372a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801372c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013730:	7c7a      	ldrb	r2, [r7, #17]
 8013732:	429a      	cmp	r2, r3
 8013734:	f200 80d2 	bhi.w	80138dc <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8013738:	2301      	movs	r3, #1
 801373a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 801373c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801373e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013742:	2b00      	cmp	r3, #0
 8013744:	d108      	bne.n	8013758 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013746:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013748:	f004 fc24 	bl	8017f94 <tcp_zero_window_probe>
 801374c:	4603      	mov	r3, r0
 801374e:	2b00      	cmp	r3, #0
 8013750:	d014      	beq.n	801377c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8013752:	2300      	movs	r3, #0
 8013754:	623b      	str	r3, [r7, #32]
 8013756:	e011      	b.n	801377c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801375a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801375e:	4619      	mov	r1, r3
 8013760:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013762:	f003 fae9 	bl	8016d38 <tcp_split_unsent_seg>
 8013766:	4603      	mov	r3, r0
 8013768:	2b00      	cmp	r3, #0
 801376a:	d107      	bne.n	801377c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801376c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801376e:	f003 fd69 	bl	8017244 <tcp_output>
 8013772:	4603      	mov	r3, r0
 8013774:	2b00      	cmp	r3, #0
 8013776:	d101      	bne.n	801377c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8013778:	2300      	movs	r3, #0
 801377a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801377c:	6a3b      	ldr	r3, [r7, #32]
 801377e:	2b00      	cmp	r3, #0
 8013780:	f000 80ac 	beq.w	80138dc <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8013784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013786:	2200      	movs	r2, #0
 8013788:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801378c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801378e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013792:	2b06      	cmp	r3, #6
 8013794:	f200 80a2 	bhi.w	80138dc <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8013798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801379a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801379e:	3301      	adds	r3, #1
 80137a0:	b2da      	uxtb	r2, r3
 80137a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137a4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80137a8:	e098      	b.n	80138dc <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80137aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	db0f      	blt.n	80137d4 <tcp_slowtmr+0x1f4>
 80137b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80137ba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80137be:	4293      	cmp	r3, r2
 80137c0:	d008      	beq.n	80137d4 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80137c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80137c8:	b29b      	uxth	r3, r3
 80137ca:	3301      	adds	r3, #1
 80137cc:	b29b      	uxth	r3, r3
 80137ce:	b21a      	sxth	r2, r3
 80137d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137d2:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80137d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137d6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80137da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137dc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80137e0:	429a      	cmp	r2, r3
 80137e2:	db7b      	blt.n	80138dc <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80137e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80137e6:	f004 f821 	bl	801782c <tcp_rexmit_rto_prepare>
 80137ea:	4603      	mov	r3, r0
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d007      	beq.n	8013800 <tcp_slowtmr+0x220>
 80137f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d171      	bne.n	80138dc <tcp_slowtmr+0x2fc>
 80137f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d06d      	beq.n	80138dc <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8013800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013802:	7d1b      	ldrb	r3, [r3, #20]
 8013804:	2b02      	cmp	r3, #2
 8013806:	d03a      	beq.n	801387e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8013808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801380a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801380e:	2b0c      	cmp	r3, #12
 8013810:	bf28      	it	cs
 8013812:	230c      	movcs	r3, #12
 8013814:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8013816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013818:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801381c:	10db      	asrs	r3, r3, #3
 801381e:	b21b      	sxth	r3, r3
 8013820:	461a      	mov	r2, r3
 8013822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013824:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013828:	4413      	add	r3, r2
 801382a:	7efa      	ldrb	r2, [r7, #27]
 801382c:	4910      	ldr	r1, [pc, #64]	@ (8013870 <tcp_slowtmr+0x290>)
 801382e:	5c8a      	ldrb	r2, [r1, r2]
 8013830:	4093      	lsls	r3, r2
 8013832:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013834:	697b      	ldr	r3, [r7, #20]
 8013836:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801383a:	4293      	cmp	r3, r2
 801383c:	dc1a      	bgt.n	8013874 <tcp_slowtmr+0x294>
 801383e:	697b      	ldr	r3, [r7, #20]
 8013840:	b21a      	sxth	r2, r3
 8013842:	e019      	b.n	8013878 <tcp_slowtmr+0x298>
 8013844:	2000479c 	.word	0x2000479c
 8013848:	200047b2 	.word	0x200047b2
 801384c:	200047a8 	.word	0x200047a8
 8013850:	08020f64 	.word	0x08020f64
 8013854:	080212a8 	.word	0x080212a8
 8013858:	08020fa8 	.word	0x08020fa8
 801385c:	080212d4 	.word	0x080212d4
 8013860:	08021300 	.word	0x08021300
 8013864:	08021330 	.word	0x08021330
 8013868:	08021364 	.word	0x08021364
 801386c:	08023658 	.word	0x08023658
 8013870:	08023648 	.word	0x08023648
 8013874:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8013878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801387a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801387e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013880:	2200      	movs	r2, #0
 8013882:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8013884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013886:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801388a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801388c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013890:	4293      	cmp	r3, r2
 8013892:	bf28      	it	cs
 8013894:	4613      	movcs	r3, r2
 8013896:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8013898:	8a7b      	ldrh	r3, [r7, #18]
 801389a:	085b      	lsrs	r3, r3, #1
 801389c:	b29a      	uxth	r2, r3
 801389e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138a0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80138a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138a6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80138aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80138ae:	005b      	lsls	r3, r3, #1
 80138b0:	b29b      	uxth	r3, r3
 80138b2:	429a      	cmp	r2, r3
 80138b4:	d206      	bcs.n	80138c4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80138b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80138ba:	005b      	lsls	r3, r3, #1
 80138bc:	b29a      	uxth	r2, r3
 80138be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138c0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80138c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138c6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80138c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138ca:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80138ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138d0:	2200      	movs	r2, #0
 80138d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80138d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80138d8:	f004 f818 	bl	801790c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80138dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138de:	7d1b      	ldrb	r3, [r3, #20]
 80138e0:	2b06      	cmp	r3, #6
 80138e2:	d111      	bne.n	8013908 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80138e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138e6:	8b5b      	ldrh	r3, [r3, #26]
 80138e8:	f003 0310 	and.w	r3, r3, #16
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d00b      	beq.n	8013908 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80138f0:	4b9c      	ldr	r3, [pc, #624]	@ (8013b64 <tcp_slowtmr+0x584>)
 80138f2:	681a      	ldr	r2, [r3, #0]
 80138f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138f6:	6a1b      	ldr	r3, [r3, #32]
 80138f8:	1ad3      	subs	r3, r2, r3
 80138fa:	2b28      	cmp	r3, #40	@ 0x28
 80138fc:	d904      	bls.n	8013908 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80138fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013902:	3301      	adds	r3, #1
 8013904:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801390a:	7a5b      	ldrb	r3, [r3, #9]
 801390c:	f003 0308 	and.w	r3, r3, #8
 8013910:	2b00      	cmp	r3, #0
 8013912:	d04a      	beq.n	80139aa <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8013914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013916:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013918:	2b04      	cmp	r3, #4
 801391a:	d003      	beq.n	8013924 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 801391c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801391e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8013920:	2b07      	cmp	r3, #7
 8013922:	d142      	bne.n	80139aa <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013924:	4b8f      	ldr	r3, [pc, #572]	@ (8013b64 <tcp_slowtmr+0x584>)
 8013926:	681a      	ldr	r2, [r3, #0]
 8013928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801392a:	6a1b      	ldr	r3, [r3, #32]
 801392c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801392e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013930:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8013934:	4b8c      	ldr	r3, [pc, #560]	@ (8013b68 <tcp_slowtmr+0x588>)
 8013936:	440b      	add	r3, r1
 8013938:	498c      	ldr	r1, [pc, #560]	@ (8013b6c <tcp_slowtmr+0x58c>)
 801393a:	fba1 1303 	umull	r1, r3, r1, r3
 801393e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013940:	429a      	cmp	r2, r3
 8013942:	d90a      	bls.n	801395a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8013944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013948:	3301      	adds	r3, #1
 801394a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801394e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013952:	3301      	adds	r3, #1
 8013954:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013958:	e027      	b.n	80139aa <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801395a:	4b82      	ldr	r3, [pc, #520]	@ (8013b64 <tcp_slowtmr+0x584>)
 801395c:	681a      	ldr	r2, [r3, #0]
 801395e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013960:	6a1b      	ldr	r3, [r3, #32]
 8013962:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8013964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013966:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801396a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801396c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8013970:	4618      	mov	r0, r3
 8013972:	4b7f      	ldr	r3, [pc, #508]	@ (8013b70 <tcp_slowtmr+0x590>)
 8013974:	fb00 f303 	mul.w	r3, r0, r3
 8013978:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801397a:	497c      	ldr	r1, [pc, #496]	@ (8013b6c <tcp_slowtmr+0x58c>)
 801397c:	fba1 1303 	umull	r1, r3, r1, r3
 8013980:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013982:	429a      	cmp	r2, r3
 8013984:	d911      	bls.n	80139aa <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8013986:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013988:	f004 fac4 	bl	8017f14 <tcp_keepalive>
 801398c:	4603      	mov	r3, r0
 801398e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8013992:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8013996:	2b00      	cmp	r3, #0
 8013998:	d107      	bne.n	80139aa <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801399a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801399c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80139a0:	3301      	adds	r3, #1
 80139a2:	b2da      	uxtb	r2, r3
 80139a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139a6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80139aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d011      	beq.n	80139d6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80139b2:	4b6c      	ldr	r3, [pc, #432]	@ (8013b64 <tcp_slowtmr+0x584>)
 80139b4:	681a      	ldr	r2, [r3, #0]
 80139b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139b8:	6a1b      	ldr	r3, [r3, #32]
 80139ba:	1ad2      	subs	r2, r2, r3
 80139bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139be:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80139c2:	4619      	mov	r1, r3
 80139c4:	460b      	mov	r3, r1
 80139c6:	005b      	lsls	r3, r3, #1
 80139c8:	440b      	add	r3, r1
 80139ca:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80139cc:	429a      	cmp	r2, r3
 80139ce:	d302      	bcc.n	80139d6 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 80139d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80139d2:	f000 fddd 	bl	8014590 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80139d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139d8:	7d1b      	ldrb	r3, [r3, #20]
 80139da:	2b03      	cmp	r3, #3
 80139dc:	d10b      	bne.n	80139f6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80139de:	4b61      	ldr	r3, [pc, #388]	@ (8013b64 <tcp_slowtmr+0x584>)
 80139e0:	681a      	ldr	r2, [r3, #0]
 80139e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139e4:	6a1b      	ldr	r3, [r3, #32]
 80139e6:	1ad3      	subs	r3, r2, r3
 80139e8:	2b28      	cmp	r3, #40	@ 0x28
 80139ea:	d904      	bls.n	80139f6 <tcp_slowtmr+0x416>
        ++pcb_remove;
 80139ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80139f0:	3301      	adds	r3, #1
 80139f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80139f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139f8:	7d1b      	ldrb	r3, [r3, #20]
 80139fa:	2b09      	cmp	r3, #9
 80139fc:	d10b      	bne.n	8013a16 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80139fe:	4b59      	ldr	r3, [pc, #356]	@ (8013b64 <tcp_slowtmr+0x584>)
 8013a00:	681a      	ldr	r2, [r3, #0]
 8013a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a04:	6a1b      	ldr	r3, [r3, #32]
 8013a06:	1ad3      	subs	r3, r2, r3
 8013a08:	2bf0      	cmp	r3, #240	@ 0xf0
 8013a0a:	d904      	bls.n	8013a16 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8013a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013a10:	3301      	adds	r3, #1
 8013a12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8013a16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d060      	beq.n	8013ae0 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8013a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013a24:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8013a26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013a28:	f000 fbfe 	bl	8014228 <tcp_pcb_purge>
      if (prev != NULL) {
 8013a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d010      	beq.n	8013a54 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8013a32:	4b50      	ldr	r3, [pc, #320]	@ (8013b74 <tcp_slowtmr+0x594>)
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013a38:	429a      	cmp	r2, r3
 8013a3a:	d106      	bne.n	8013a4a <tcp_slowtmr+0x46a>
 8013a3c:	4b4e      	ldr	r3, [pc, #312]	@ (8013b78 <tcp_slowtmr+0x598>)
 8013a3e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8013a42:	494e      	ldr	r1, [pc, #312]	@ (8013b7c <tcp_slowtmr+0x59c>)
 8013a44:	484e      	ldr	r0, [pc, #312]	@ (8013b80 <tcp_slowtmr+0x5a0>)
 8013a46:	f00a ffcb 	bl	801e9e0 <iprintf>
        prev->next = pcb->next;
 8013a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a4c:	68da      	ldr	r2, [r3, #12]
 8013a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a50:	60da      	str	r2, [r3, #12]
 8013a52:	e00f      	b.n	8013a74 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8013a54:	4b47      	ldr	r3, [pc, #284]	@ (8013b74 <tcp_slowtmr+0x594>)
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013a5a:	429a      	cmp	r2, r3
 8013a5c:	d006      	beq.n	8013a6c <tcp_slowtmr+0x48c>
 8013a5e:	4b46      	ldr	r3, [pc, #280]	@ (8013b78 <tcp_slowtmr+0x598>)
 8013a60:	f240 5271 	movw	r2, #1393	@ 0x571
 8013a64:	4947      	ldr	r1, [pc, #284]	@ (8013b84 <tcp_slowtmr+0x5a4>)
 8013a66:	4846      	ldr	r0, [pc, #280]	@ (8013b80 <tcp_slowtmr+0x5a0>)
 8013a68:	f00a ffba 	bl	801e9e0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8013a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a6e:	68db      	ldr	r3, [r3, #12]
 8013a70:	4a40      	ldr	r2, [pc, #256]	@ (8013b74 <tcp_slowtmr+0x594>)
 8013a72:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8013a74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d013      	beq.n	8013aa4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a7e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8013a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a82:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013a84:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8013a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a88:	3304      	adds	r3, #4
 8013a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013a8c:	8ad2      	ldrh	r2, [r2, #22]
 8013a8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013a90:	8b09      	ldrh	r1, [r1, #24]
 8013a92:	9102      	str	r1, [sp, #8]
 8013a94:	9201      	str	r2, [sp, #4]
 8013a96:	9300      	str	r3, [sp, #0]
 8013a98:	462b      	mov	r3, r5
 8013a9a:	4622      	mov	r2, r4
 8013a9c:	4601      	mov	r1, r0
 8013a9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013aa0:	f004 f984 	bl	8017dac <tcp_rst>
      err_arg = pcb->callback_arg;
 8013aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013aa6:	691b      	ldr	r3, [r3, #16]
 8013aa8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8013aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013aac:	7d1b      	ldrb	r3, [r3, #20]
 8013aae:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8013ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ab2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8013ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ab6:	68db      	ldr	r3, [r3, #12]
 8013ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8013aba:	6838      	ldr	r0, [r7, #0]
 8013abc:	f7ff f9f2 	bl	8012ea4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8013ac0:	4b31      	ldr	r3, [pc, #196]	@ (8013b88 <tcp_slowtmr+0x5a8>)
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d004      	beq.n	8013ad6 <tcp_slowtmr+0x4f6>
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	f06f 010c 	mvn.w	r1, #12
 8013ad2:	68b8      	ldr	r0, [r7, #8]
 8013ad4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8013ad6:	4b2c      	ldr	r3, [pc, #176]	@ (8013b88 <tcp_slowtmr+0x5a8>)
 8013ad8:	781b      	ldrb	r3, [r3, #0]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d037      	beq.n	8013b4e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8013ade:	e592      	b.n	8013606 <tcp_slowtmr+0x26>
      prev = pcb;
 8013ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ae6:	68db      	ldr	r3, [r3, #12]
 8013ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8013aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013aec:	7f1b      	ldrb	r3, [r3, #28]
 8013aee:	3301      	adds	r3, #1
 8013af0:	b2da      	uxtb	r2, r3
 8013af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013af4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8013af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013af8:	7f1a      	ldrb	r2, [r3, #28]
 8013afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013afc:	7f5b      	ldrb	r3, [r3, #29]
 8013afe:	429a      	cmp	r2, r3
 8013b00:	d325      	bcc.n	8013b4e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8013b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b04:	2200      	movs	r2, #0
 8013b06:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8013b08:	4b1f      	ldr	r3, [pc, #124]	@ (8013b88 <tcp_slowtmr+0x5a8>)
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8013b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d00b      	beq.n	8013b30 <tcp_slowtmr+0x550>
 8013b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013b1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013b20:	6912      	ldr	r2, [r2, #16]
 8013b22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013b24:	4610      	mov	r0, r2
 8013b26:	4798      	blx	r3
 8013b28:	4603      	mov	r3, r0
 8013b2a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8013b2e:	e002      	b.n	8013b36 <tcp_slowtmr+0x556>
 8013b30:	2300      	movs	r3, #0
 8013b32:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8013b36:	4b14      	ldr	r3, [pc, #80]	@ (8013b88 <tcp_slowtmr+0x5a8>)
 8013b38:	781b      	ldrb	r3, [r3, #0]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	f47f ad62 	bne.w	8013604 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8013b40:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d102      	bne.n	8013b4e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8013b48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013b4a:	f003 fb7b 	bl	8017244 <tcp_output>
  while (pcb != NULL) {
 8013b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	f47f ad5e 	bne.w	8013612 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8013b56:	2300      	movs	r3, #0
 8013b58:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8013b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8013b8c <tcp_slowtmr+0x5ac>)
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013b60:	e069      	b.n	8013c36 <tcp_slowtmr+0x656>
 8013b62:	bf00      	nop
 8013b64:	2000479c 	.word	0x2000479c
 8013b68:	000a4cb8 	.word	0x000a4cb8
 8013b6c:	10624dd3 	.word	0x10624dd3
 8013b70:	000124f8 	.word	0x000124f8
 8013b74:	200047a8 	.word	0x200047a8
 8013b78:	08020f64 	.word	0x08020f64
 8013b7c:	0802139c 	.word	0x0802139c
 8013b80:	08020fa8 	.word	0x08020fa8
 8013b84:	080213c8 	.word	0x080213c8
 8013b88:	200047b0 	.word	0x200047b0
 8013b8c:	200047ac 	.word	0x200047ac
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b92:	7d1b      	ldrb	r3, [r3, #20]
 8013b94:	2b0a      	cmp	r3, #10
 8013b96:	d006      	beq.n	8013ba6 <tcp_slowtmr+0x5c6>
 8013b98:	4b2b      	ldr	r3, [pc, #172]	@ (8013c48 <tcp_slowtmr+0x668>)
 8013b9a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8013b9e:	492b      	ldr	r1, [pc, #172]	@ (8013c4c <tcp_slowtmr+0x66c>)
 8013ba0:	482b      	ldr	r0, [pc, #172]	@ (8013c50 <tcp_slowtmr+0x670>)
 8013ba2:	f00a ff1d 	bl	801e9e0 <iprintf>
    pcb_remove = 0;
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013bac:	4b29      	ldr	r3, [pc, #164]	@ (8013c54 <tcp_slowtmr+0x674>)
 8013bae:	681a      	ldr	r2, [r3, #0]
 8013bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bb2:	6a1b      	ldr	r3, [r3, #32]
 8013bb4:	1ad3      	subs	r3, r2, r3
 8013bb6:	2bf0      	cmp	r3, #240	@ 0xf0
 8013bb8:	d904      	bls.n	8013bc4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8013bba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013bbe:	3301      	adds	r3, #1
 8013bc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d02f      	beq.n	8013c2c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8013bcc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013bce:	f000 fb2b 	bl	8014228 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8013bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d010      	beq.n	8013bfa <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8013bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8013c58 <tcp_slowtmr+0x678>)
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013bde:	429a      	cmp	r2, r3
 8013be0:	d106      	bne.n	8013bf0 <tcp_slowtmr+0x610>
 8013be2:	4b19      	ldr	r3, [pc, #100]	@ (8013c48 <tcp_slowtmr+0x668>)
 8013be4:	f240 52af 	movw	r2, #1455	@ 0x5af
 8013be8:	491c      	ldr	r1, [pc, #112]	@ (8013c5c <tcp_slowtmr+0x67c>)
 8013bea:	4819      	ldr	r0, [pc, #100]	@ (8013c50 <tcp_slowtmr+0x670>)
 8013bec:	f00a fef8 	bl	801e9e0 <iprintf>
        prev->next = pcb->next;
 8013bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bf2:	68da      	ldr	r2, [r3, #12]
 8013bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bf6:	60da      	str	r2, [r3, #12]
 8013bf8:	e00f      	b.n	8013c1a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8013bfa:	4b17      	ldr	r3, [pc, #92]	@ (8013c58 <tcp_slowtmr+0x678>)
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013c00:	429a      	cmp	r2, r3
 8013c02:	d006      	beq.n	8013c12 <tcp_slowtmr+0x632>
 8013c04:	4b10      	ldr	r3, [pc, #64]	@ (8013c48 <tcp_slowtmr+0x668>)
 8013c06:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8013c0a:	4915      	ldr	r1, [pc, #84]	@ (8013c60 <tcp_slowtmr+0x680>)
 8013c0c:	4810      	ldr	r0, [pc, #64]	@ (8013c50 <tcp_slowtmr+0x670>)
 8013c0e:	f00a fee7 	bl	801e9e0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8013c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c14:	68db      	ldr	r3, [r3, #12]
 8013c16:	4a10      	ldr	r2, [pc, #64]	@ (8013c58 <tcp_slowtmr+0x678>)
 8013c18:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8013c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c1c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8013c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c20:	68db      	ldr	r3, [r3, #12]
 8013c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8013c24:	69f8      	ldr	r0, [r7, #28]
 8013c26:	f7ff f93d 	bl	8012ea4 <tcp_free>
 8013c2a:	e004      	b.n	8013c36 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8013c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c32:	68db      	ldr	r3, [r3, #12]
 8013c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d1a9      	bne.n	8013b90 <tcp_slowtmr+0x5b0>
    }
  }
}
 8013c3c:	bf00      	nop
 8013c3e:	bf00      	nop
 8013c40:	3730      	adds	r7, #48	@ 0x30
 8013c42:	46bd      	mov	sp, r7
 8013c44:	bdb0      	pop	{r4, r5, r7, pc}
 8013c46:	bf00      	nop
 8013c48:	08020f64 	.word	0x08020f64
 8013c4c:	080213f4 	.word	0x080213f4
 8013c50:	08020fa8 	.word	0x08020fa8
 8013c54:	2000479c 	.word	0x2000479c
 8013c58:	200047ac 	.word	0x200047ac
 8013c5c:	08021424 	.word	0x08021424
 8013c60:	0802144c 	.word	0x0802144c

08013c64 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8013c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8013d20 <tcp_fasttmr+0xbc>)
 8013c6c:	781b      	ldrb	r3, [r3, #0]
 8013c6e:	3301      	adds	r3, #1
 8013c70:	b2da      	uxtb	r2, r3
 8013c72:	4b2b      	ldr	r3, [pc, #172]	@ (8013d20 <tcp_fasttmr+0xbc>)
 8013c74:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8013c76:	4b2b      	ldr	r3, [pc, #172]	@ (8013d24 <tcp_fasttmr+0xc0>)
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013c7c:	e048      	b.n	8013d10 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	7f9a      	ldrb	r2, [r3, #30]
 8013c82:	4b27      	ldr	r3, [pc, #156]	@ (8013d20 <tcp_fasttmr+0xbc>)
 8013c84:	781b      	ldrb	r3, [r3, #0]
 8013c86:	429a      	cmp	r2, r3
 8013c88:	d03f      	beq.n	8013d0a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8013c8a:	4b25      	ldr	r3, [pc, #148]	@ (8013d20 <tcp_fasttmr+0xbc>)
 8013c8c:	781a      	ldrb	r2, [r3, #0]
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	8b5b      	ldrh	r3, [r3, #26]
 8013c96:	f003 0301 	and.w	r3, r3, #1
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d010      	beq.n	8013cc0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	8b5b      	ldrh	r3, [r3, #26]
 8013ca2:	f043 0302 	orr.w	r3, r3, #2
 8013ca6:	b29a      	uxth	r2, r3
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8013cac:	6878      	ldr	r0, [r7, #4]
 8013cae:	f003 fac9 	bl	8017244 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	8b5b      	ldrh	r3, [r3, #26]
 8013cb6:	f023 0303 	bic.w	r3, r3, #3
 8013cba:	b29a      	uxth	r2, r3
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	8b5b      	ldrh	r3, [r3, #26]
 8013cc4:	f003 0308 	and.w	r3, r3, #8
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d009      	beq.n	8013ce0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	8b5b      	ldrh	r3, [r3, #26]
 8013cd0:	f023 0308 	bic.w	r3, r3, #8
 8013cd4:	b29a      	uxth	r2, r3
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8013cda:	6878      	ldr	r0, [r7, #4]
 8013cdc:	f7ff fa76 	bl	80131cc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	68db      	ldr	r3, [r3, #12]
 8013ce4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d00a      	beq.n	8013d04 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8013cee:	4b0e      	ldr	r3, [pc, #56]	@ (8013d28 <tcp_fasttmr+0xc4>)
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8013cf4:	6878      	ldr	r0, [r7, #4]
 8013cf6:	f000 f819 	bl	8013d2c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8013cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8013d28 <tcp_fasttmr+0xc4>)
 8013cfc:	781b      	ldrb	r3, [r3, #0]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d000      	beq.n	8013d04 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8013d02:	e7b8      	b.n	8013c76 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8013d04:	683b      	ldr	r3, [r7, #0]
 8013d06:	607b      	str	r3, [r7, #4]
 8013d08:	e002      	b.n	8013d10 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	68db      	ldr	r3, [r3, #12]
 8013d0e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d1b3      	bne.n	8013c7e <tcp_fasttmr+0x1a>
    }
  }
}
 8013d16:	bf00      	nop
 8013d18:	bf00      	nop
 8013d1a:	3708      	adds	r7, #8
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}
 8013d20:	200047b2 	.word	0x200047b2
 8013d24:	200047a8 	.word	0x200047a8
 8013d28:	200047b0 	.word	0x200047b0

08013d2c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8013d2c:	b590      	push	{r4, r7, lr}
 8013d2e:	b085      	sub	sp, #20
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d109      	bne.n	8013d4e <tcp_process_refused_data+0x22>
 8013d3a:	4b37      	ldr	r3, [pc, #220]	@ (8013e18 <tcp_process_refused_data+0xec>)
 8013d3c:	f240 6209 	movw	r2, #1545	@ 0x609
 8013d40:	4936      	ldr	r1, [pc, #216]	@ (8013e1c <tcp_process_refused_data+0xf0>)
 8013d42:	4837      	ldr	r0, [pc, #220]	@ (8013e20 <tcp_process_refused_data+0xf4>)
 8013d44:	f00a fe4c 	bl	801e9e0 <iprintf>
 8013d48:	f06f 030f 	mvn.w	r3, #15
 8013d4c:	e060      	b.n	8013e10 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013d52:	7b5b      	ldrb	r3, [r3, #13]
 8013d54:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013d5a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2200      	movs	r2, #0
 8013d60:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d00b      	beq.n	8013d84 <tcp_process_refused_data+0x58>
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	6918      	ldr	r0, [r3, #16]
 8013d76:	2300      	movs	r3, #0
 8013d78:	68ba      	ldr	r2, [r7, #8]
 8013d7a:	6879      	ldr	r1, [r7, #4]
 8013d7c:	47a0      	blx	r4
 8013d7e:	4603      	mov	r3, r0
 8013d80:	73fb      	strb	r3, [r7, #15]
 8013d82:	e007      	b.n	8013d94 <tcp_process_refused_data+0x68>
 8013d84:	2300      	movs	r3, #0
 8013d86:	68ba      	ldr	r2, [r7, #8]
 8013d88:	6879      	ldr	r1, [r7, #4]
 8013d8a:	2000      	movs	r0, #0
 8013d8c:	f000 f8a4 	bl	8013ed8 <tcp_recv_null>
 8013d90:	4603      	mov	r3, r0
 8013d92:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d12a      	bne.n	8013df2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8013d9c:	7bbb      	ldrb	r3, [r7, #14]
 8013d9e:	f003 0320 	and.w	r3, r3, #32
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d033      	beq.n	8013e0e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013daa:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8013dae:	d005      	beq.n	8013dbc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013db4:	3301      	adds	r3, #1
 8013db6:	b29a      	uxth	r2, r3
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d00b      	beq.n	8013dde <tcp_process_refused_data+0xb2>
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	6918      	ldr	r0, [r3, #16]
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	6879      	ldr	r1, [r7, #4]
 8013dd6:	47a0      	blx	r4
 8013dd8:	4603      	mov	r3, r0
 8013dda:	73fb      	strb	r3, [r7, #15]
 8013ddc:	e001      	b.n	8013de2 <tcp_process_refused_data+0xb6>
 8013dde:	2300      	movs	r3, #0
 8013de0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8013de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013de6:	f113 0f0d 	cmn.w	r3, #13
 8013dea:	d110      	bne.n	8013e0e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8013dec:	f06f 030c 	mvn.w	r3, #12
 8013df0:	e00e      	b.n	8013e10 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8013df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013df6:	f113 0f0d 	cmn.w	r3, #13
 8013dfa:	d102      	bne.n	8013e02 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8013dfc:	f06f 030c 	mvn.w	r3, #12
 8013e00:	e006      	b.n	8013e10 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	68ba      	ldr	r2, [r7, #8]
 8013e06:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8013e08:	f06f 0304 	mvn.w	r3, #4
 8013e0c:	e000      	b.n	8013e10 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8013e0e:	2300      	movs	r3, #0
}
 8013e10:	4618      	mov	r0, r3
 8013e12:	3714      	adds	r7, #20
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd90      	pop	{r4, r7, pc}
 8013e18:	08020f64 	.word	0x08020f64
 8013e1c:	08021474 	.word	0x08021474
 8013e20:	08020fa8 	.word	0x08020fa8

08013e24 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b084      	sub	sp, #16
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8013e2c:	e007      	b.n	8013e3e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013e34:	6878      	ldr	r0, [r7, #4]
 8013e36:	f000 f80a 	bl	8013e4e <tcp_seg_free>
    seg = next;
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d1f4      	bne.n	8013e2e <tcp_segs_free+0xa>
  }
}
 8013e44:	bf00      	nop
 8013e46:	bf00      	nop
 8013e48:	3710      	adds	r7, #16
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}

08013e4e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8013e4e:	b580      	push	{r7, lr}
 8013e50:	b082      	sub	sp, #8
 8013e52:	af00      	add	r7, sp, #0
 8013e54:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d00c      	beq.n	8013e76 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	685b      	ldr	r3, [r3, #4]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d004      	beq.n	8013e6e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	685b      	ldr	r3, [r3, #4]
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f7fe fb99 	bl	80125a0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8013e6e:	6879      	ldr	r1, [r7, #4]
 8013e70:	2003      	movs	r0, #3
 8013e72:	f7fd fca9 	bl	80117c8 <memp_free>
  }
}
 8013e76:	bf00      	nop
 8013e78:	3708      	adds	r7, #8
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	bd80      	pop	{r7, pc}
	...

08013e80 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b084      	sub	sp, #16
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d106      	bne.n	8013e9c <tcp_seg_copy+0x1c>
 8013e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8013ecc <tcp_seg_copy+0x4c>)
 8013e90:	f240 6282 	movw	r2, #1666	@ 0x682
 8013e94:	490e      	ldr	r1, [pc, #56]	@ (8013ed0 <tcp_seg_copy+0x50>)
 8013e96:	480f      	ldr	r0, [pc, #60]	@ (8013ed4 <tcp_seg_copy+0x54>)
 8013e98:	f00a fda2 	bl	801e9e0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013e9c:	2003      	movs	r0, #3
 8013e9e:	f7fd fc23 	bl	80116e8 <memp_malloc>
 8013ea2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d101      	bne.n	8013eae <tcp_seg_copy+0x2e>
    return NULL;
 8013eaa:	2300      	movs	r3, #0
 8013eac:	e00a      	b.n	8013ec4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8013eae:	2210      	movs	r2, #16
 8013eb0:	6879      	ldr	r1, [r7, #4]
 8013eb2:	68f8      	ldr	r0, [r7, #12]
 8013eb4:	f00b f847 	bl	801ef46 <memcpy>
  pbuf_ref(cseg->p);
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	685b      	ldr	r3, [r3, #4]
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	f7fe fc15 	bl	80126ec <pbuf_ref>
  return cseg;
 8013ec2:	68fb      	ldr	r3, [r7, #12]
}
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	3710      	adds	r7, #16
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	bd80      	pop	{r7, pc}
 8013ecc:	08020f64 	.word	0x08020f64
 8013ed0:	080214b8 	.word	0x080214b8
 8013ed4:	08020fa8 	.word	0x08020fa8

08013ed8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b084      	sub	sp, #16
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	60f8      	str	r0, [r7, #12]
 8013ee0:	60b9      	str	r1, [r7, #8]
 8013ee2:	607a      	str	r2, [r7, #4]
 8013ee4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8013ee6:	68bb      	ldr	r3, [r7, #8]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d109      	bne.n	8013f00 <tcp_recv_null+0x28>
 8013eec:	4b12      	ldr	r3, [pc, #72]	@ (8013f38 <tcp_recv_null+0x60>)
 8013eee:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8013ef2:	4912      	ldr	r1, [pc, #72]	@ (8013f3c <tcp_recv_null+0x64>)
 8013ef4:	4812      	ldr	r0, [pc, #72]	@ (8013f40 <tcp_recv_null+0x68>)
 8013ef6:	f00a fd73 	bl	801e9e0 <iprintf>
 8013efa:	f06f 030f 	mvn.w	r3, #15
 8013efe:	e016      	b.n	8013f2e <tcp_recv_null+0x56>

  if (p != NULL) {
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d009      	beq.n	8013f1a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	891b      	ldrh	r3, [r3, #8]
 8013f0a:	4619      	mov	r1, r3
 8013f0c:	68b8      	ldr	r0, [r7, #8]
 8013f0e:	f7ff fb17 	bl	8013540 <tcp_recved>
    pbuf_free(p);
 8013f12:	6878      	ldr	r0, [r7, #4]
 8013f14:	f7fe fb44 	bl	80125a0 <pbuf_free>
 8013f18:	e008      	b.n	8013f2c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8013f1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d104      	bne.n	8013f2c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013f22:	68b8      	ldr	r0, [r7, #8]
 8013f24:	f7ff f9bc 	bl	80132a0 <tcp_close>
 8013f28:	4603      	mov	r3, r0
 8013f2a:	e000      	b.n	8013f2e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013f2c:	2300      	movs	r3, #0
}
 8013f2e:	4618      	mov	r0, r3
 8013f30:	3710      	adds	r7, #16
 8013f32:	46bd      	mov	sp, r7
 8013f34:	bd80      	pop	{r7, pc}
 8013f36:	bf00      	nop
 8013f38:	08020f64 	.word	0x08020f64
 8013f3c:	080214d4 	.word	0x080214d4
 8013f40:	08020fa8 	.word	0x08020fa8

08013f44 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b086      	sub	sp, #24
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	db01      	blt.n	8013f5a <tcp_kill_prio+0x16>
 8013f56:	79fb      	ldrb	r3, [r7, #7]
 8013f58:	e000      	b.n	8013f5c <tcp_kill_prio+0x18>
 8013f5a:	237f      	movs	r3, #127	@ 0x7f
 8013f5c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013f5e:	7afb      	ldrb	r3, [r7, #11]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d034      	beq.n	8013fce <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013f64:	7afb      	ldrb	r3, [r7, #11]
 8013f66:	3b01      	subs	r3, #1
 8013f68:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013f6e:	2300      	movs	r3, #0
 8013f70:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013f72:	4b19      	ldr	r3, [pc, #100]	@ (8013fd8 <tcp_kill_prio+0x94>)
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	617b      	str	r3, [r7, #20]
 8013f78:	e01f      	b.n	8013fba <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8013f7a:	697b      	ldr	r3, [r7, #20]
 8013f7c:	7d5b      	ldrb	r3, [r3, #21]
 8013f7e:	7afa      	ldrb	r2, [r7, #11]
 8013f80:	429a      	cmp	r2, r3
 8013f82:	d80c      	bhi.n	8013f9e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013f84:	697b      	ldr	r3, [r7, #20]
 8013f86:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013f88:	7afa      	ldrb	r2, [r7, #11]
 8013f8a:	429a      	cmp	r2, r3
 8013f8c:	d112      	bne.n	8013fb4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013f8e:	4b13      	ldr	r3, [pc, #76]	@ (8013fdc <tcp_kill_prio+0x98>)
 8013f90:	681a      	ldr	r2, [r3, #0]
 8013f92:	697b      	ldr	r3, [r7, #20]
 8013f94:	6a1b      	ldr	r3, [r3, #32]
 8013f96:	1ad3      	subs	r3, r2, r3
 8013f98:	68fa      	ldr	r2, [r7, #12]
 8013f9a:	429a      	cmp	r2, r3
 8013f9c:	d80a      	bhi.n	8013fb4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8013f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8013fdc <tcp_kill_prio+0x98>)
 8013fa0:	681a      	ldr	r2, [r3, #0]
 8013fa2:	697b      	ldr	r3, [r7, #20]
 8013fa4:	6a1b      	ldr	r3, [r3, #32]
 8013fa6:	1ad3      	subs	r3, r2, r3
 8013fa8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8013faa:	697b      	ldr	r3, [r7, #20]
 8013fac:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8013fae:	697b      	ldr	r3, [r7, #20]
 8013fb0:	7d5b      	ldrb	r3, [r3, #21]
 8013fb2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013fb4:	697b      	ldr	r3, [r7, #20]
 8013fb6:	68db      	ldr	r3, [r3, #12]
 8013fb8:	617b      	str	r3, [r7, #20]
 8013fba:	697b      	ldr	r3, [r7, #20]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d1dc      	bne.n	8013f7a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8013fc0:	693b      	ldr	r3, [r7, #16]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d004      	beq.n	8013fd0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013fc6:	6938      	ldr	r0, [r7, #16]
 8013fc8:	f7ff fa54 	bl	8013474 <tcp_abort>
 8013fcc:	e000      	b.n	8013fd0 <tcp_kill_prio+0x8c>
    return;
 8013fce:	bf00      	nop
  }
}
 8013fd0:	3718      	adds	r7, #24
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd80      	pop	{r7, pc}
 8013fd6:	bf00      	nop
 8013fd8:	200047a8 	.word	0x200047a8
 8013fdc:	2000479c 	.word	0x2000479c

08013fe0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b086      	sub	sp, #24
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8013fea:	79fb      	ldrb	r3, [r7, #7]
 8013fec:	2b08      	cmp	r3, #8
 8013fee:	d009      	beq.n	8014004 <tcp_kill_state+0x24>
 8013ff0:	79fb      	ldrb	r3, [r7, #7]
 8013ff2:	2b09      	cmp	r3, #9
 8013ff4:	d006      	beq.n	8014004 <tcp_kill_state+0x24>
 8013ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8014060 <tcp_kill_state+0x80>)
 8013ff8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8013ffc:	4919      	ldr	r1, [pc, #100]	@ (8014064 <tcp_kill_state+0x84>)
 8013ffe:	481a      	ldr	r0, [pc, #104]	@ (8014068 <tcp_kill_state+0x88>)
 8014000:	f00a fcee 	bl	801e9e0 <iprintf>

  inactivity = 0;
 8014004:	2300      	movs	r3, #0
 8014006:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014008:	2300      	movs	r3, #0
 801400a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801400c:	4b17      	ldr	r3, [pc, #92]	@ (801406c <tcp_kill_state+0x8c>)
 801400e:	681b      	ldr	r3, [r3, #0]
 8014010:	617b      	str	r3, [r7, #20]
 8014012:	e017      	b.n	8014044 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8014014:	697b      	ldr	r3, [r7, #20]
 8014016:	7d1b      	ldrb	r3, [r3, #20]
 8014018:	79fa      	ldrb	r2, [r7, #7]
 801401a:	429a      	cmp	r2, r3
 801401c:	d10f      	bne.n	801403e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801401e:	4b14      	ldr	r3, [pc, #80]	@ (8014070 <tcp_kill_state+0x90>)
 8014020:	681a      	ldr	r2, [r3, #0]
 8014022:	697b      	ldr	r3, [r7, #20]
 8014024:	6a1b      	ldr	r3, [r3, #32]
 8014026:	1ad3      	subs	r3, r2, r3
 8014028:	68fa      	ldr	r2, [r7, #12]
 801402a:	429a      	cmp	r2, r3
 801402c:	d807      	bhi.n	801403e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801402e:	4b10      	ldr	r3, [pc, #64]	@ (8014070 <tcp_kill_state+0x90>)
 8014030:	681a      	ldr	r2, [r3, #0]
 8014032:	697b      	ldr	r3, [r7, #20]
 8014034:	6a1b      	ldr	r3, [r3, #32]
 8014036:	1ad3      	subs	r3, r2, r3
 8014038:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801403a:	697b      	ldr	r3, [r7, #20]
 801403c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801403e:	697b      	ldr	r3, [r7, #20]
 8014040:	68db      	ldr	r3, [r3, #12]
 8014042:	617b      	str	r3, [r7, #20]
 8014044:	697b      	ldr	r3, [r7, #20]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d1e4      	bne.n	8014014 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801404a:	693b      	ldr	r3, [r7, #16]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d003      	beq.n	8014058 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8014050:	2100      	movs	r1, #0
 8014052:	6938      	ldr	r0, [r7, #16]
 8014054:	f7ff f950 	bl	80132f8 <tcp_abandon>
  }
}
 8014058:	bf00      	nop
 801405a:	3718      	adds	r7, #24
 801405c:	46bd      	mov	sp, r7
 801405e:	bd80      	pop	{r7, pc}
 8014060:	08020f64 	.word	0x08020f64
 8014064:	080214f0 	.word	0x080214f0
 8014068:	08020fa8 	.word	0x08020fa8
 801406c:	200047a8 	.word	0x200047a8
 8014070:	2000479c 	.word	0x2000479c

08014074 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b084      	sub	sp, #16
 8014078:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801407a:	2300      	movs	r3, #0
 801407c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801407e:	2300      	movs	r3, #0
 8014080:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014082:	4b12      	ldr	r3, [pc, #72]	@ (80140cc <tcp_kill_timewait+0x58>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	60fb      	str	r3, [r7, #12]
 8014088:	e012      	b.n	80140b0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801408a:	4b11      	ldr	r3, [pc, #68]	@ (80140d0 <tcp_kill_timewait+0x5c>)
 801408c:	681a      	ldr	r2, [r3, #0]
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	6a1b      	ldr	r3, [r3, #32]
 8014092:	1ad3      	subs	r3, r2, r3
 8014094:	687a      	ldr	r2, [r7, #4]
 8014096:	429a      	cmp	r2, r3
 8014098:	d807      	bhi.n	80140aa <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801409a:	4b0d      	ldr	r3, [pc, #52]	@ (80140d0 <tcp_kill_timewait+0x5c>)
 801409c:	681a      	ldr	r2, [r3, #0]
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	6a1b      	ldr	r3, [r3, #32]
 80140a2:	1ad3      	subs	r3, r2, r3
 80140a4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	68db      	ldr	r3, [r3, #12]
 80140ae:	60fb      	str	r3, [r7, #12]
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d1e9      	bne.n	801408a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80140b6:	68bb      	ldr	r3, [r7, #8]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d002      	beq.n	80140c2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80140bc:	68b8      	ldr	r0, [r7, #8]
 80140be:	f7ff f9d9 	bl	8013474 <tcp_abort>
  }
}
 80140c2:	bf00      	nop
 80140c4:	3710      	adds	r7, #16
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bd80      	pop	{r7, pc}
 80140ca:	bf00      	nop
 80140cc:	200047ac 	.word	0x200047ac
 80140d0:	2000479c 	.word	0x2000479c

080140d4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b082      	sub	sp, #8
 80140d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80140da:	4b10      	ldr	r3, [pc, #64]	@ (801411c <tcp_handle_closepend+0x48>)
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80140e0:	e014      	b.n	801410c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	68db      	ldr	r3, [r3, #12]
 80140e6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	8b5b      	ldrh	r3, [r3, #26]
 80140ec:	f003 0308 	and.w	r3, r3, #8
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d009      	beq.n	8014108 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	8b5b      	ldrh	r3, [r3, #26]
 80140f8:	f023 0308 	bic.w	r3, r3, #8
 80140fc:	b29a      	uxth	r2, r3
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8014102:	6878      	ldr	r0, [r7, #4]
 8014104:	f7ff f862 	bl	80131cc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8014108:	683b      	ldr	r3, [r7, #0]
 801410a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d1e7      	bne.n	80140e2 <tcp_handle_closepend+0xe>
  }
}
 8014112:	bf00      	nop
 8014114:	bf00      	nop
 8014116:	3708      	adds	r7, #8
 8014118:	46bd      	mov	sp, r7
 801411a:	bd80      	pop	{r7, pc}
 801411c:	200047a8 	.word	0x200047a8

08014120 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8014120:	b580      	push	{r7, lr}
 8014122:	b084      	sub	sp, #16
 8014124:	af00      	add	r7, sp, #0
 8014126:	4603      	mov	r3, r0
 8014128:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801412a:	2001      	movs	r0, #1
 801412c:	f7fd fadc 	bl	80116e8 <memp_malloc>
 8014130:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d126      	bne.n	8014186 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8014138:	f7ff ffcc 	bl	80140d4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801413c:	f7ff ff9a 	bl	8014074 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014140:	2001      	movs	r0, #1
 8014142:	f7fd fad1 	bl	80116e8 <memp_malloc>
 8014146:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d11b      	bne.n	8014186 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801414e:	2009      	movs	r0, #9
 8014150:	f7ff ff46 	bl	8013fe0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014154:	2001      	movs	r0, #1
 8014156:	f7fd fac7 	bl	80116e8 <memp_malloc>
 801415a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d111      	bne.n	8014186 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8014162:	2008      	movs	r0, #8
 8014164:	f7ff ff3c 	bl	8013fe0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014168:	2001      	movs	r0, #1
 801416a:	f7fd fabd 	bl	80116e8 <memp_malloc>
 801416e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d107      	bne.n	8014186 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8014176:	79fb      	ldrb	r3, [r7, #7]
 8014178:	4618      	mov	r0, r3
 801417a:	f7ff fee3 	bl	8013f44 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801417e:	2001      	movs	r0, #1
 8014180:	f7fd fab2 	bl	80116e8 <memp_malloc>
 8014184:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d03f      	beq.n	801420c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801418c:	229c      	movs	r2, #156	@ 0x9c
 801418e:	2100      	movs	r1, #0
 8014190:	68f8      	ldr	r0, [r7, #12]
 8014192:	f00a fdf5 	bl	801ed80 <memset>
    pcb->prio = prio;
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	79fa      	ldrb	r2, [r7, #7]
 801419a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80141a2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80141ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	22ff      	movs	r2, #255	@ 0xff
 80141ba:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80141c2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	2206      	movs	r2, #6
 80141c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	2206      	movs	r2, #6
 80141d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80141d8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	2201      	movs	r2, #1
 80141de:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80141e2:	4b0d      	ldr	r3, [pc, #52]	@ (8014218 <tcp_alloc+0xf8>)
 80141e4:	681a      	ldr	r2, [r3, #0]
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80141ea:	4b0c      	ldr	r3, [pc, #48]	@ (801421c <tcp_alloc+0xfc>)
 80141ec:	781a      	ldrb	r2, [r3, #0]
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80141f8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	4a08      	ldr	r2, [pc, #32]	@ (8014220 <tcp_alloc+0x100>)
 8014200:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	4a07      	ldr	r2, [pc, #28]	@ (8014224 <tcp_alloc+0x104>)
 8014208:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801420c:	68fb      	ldr	r3, [r7, #12]
}
 801420e:	4618      	mov	r0, r3
 8014210:	3710      	adds	r7, #16
 8014212:	46bd      	mov	sp, r7
 8014214:	bd80      	pop	{r7, pc}
 8014216:	bf00      	nop
 8014218:	2000479c 	.word	0x2000479c
 801421c:	200047b2 	.word	0x200047b2
 8014220:	08013ed9 	.word	0x08013ed9
 8014224:	006ddd00 	.word	0x006ddd00

08014228 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b082      	sub	sp, #8
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	2b00      	cmp	r3, #0
 8014234:	d107      	bne.n	8014246 <tcp_pcb_purge+0x1e>
 8014236:	4b21      	ldr	r3, [pc, #132]	@ (80142bc <tcp_pcb_purge+0x94>)
 8014238:	f640 0251 	movw	r2, #2129	@ 0x851
 801423c:	4920      	ldr	r1, [pc, #128]	@ (80142c0 <tcp_pcb_purge+0x98>)
 801423e:	4821      	ldr	r0, [pc, #132]	@ (80142c4 <tcp_pcb_purge+0x9c>)
 8014240:	f00a fbce 	bl	801e9e0 <iprintf>
 8014244:	e037      	b.n	80142b6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	7d1b      	ldrb	r3, [r3, #20]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d033      	beq.n	80142b6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8014252:	2b0a      	cmp	r3, #10
 8014254:	d02f      	beq.n	80142b6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801425a:	2b01      	cmp	r3, #1
 801425c:	d02b      	beq.n	80142b6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014262:	2b00      	cmp	r3, #0
 8014264:	d007      	beq.n	8014276 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801426a:	4618      	mov	r0, r3
 801426c:	f7fe f998 	bl	80125a0 <pbuf_free>
      pcb->refused_data = NULL;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2200      	movs	r2, #0
 8014274:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801427a:	2b00      	cmp	r3, #0
 801427c:	d002      	beq.n	8014284 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801427e:	6878      	ldr	r0, [r7, #4]
 8014280:	f000 f986 	bl	8014590 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801428a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014290:	4618      	mov	r0, r3
 8014292:	f7ff fdc7 	bl	8013e24 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801429a:	4618      	mov	r0, r3
 801429c:	f7ff fdc2 	bl	8013e24 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	2200      	movs	r2, #0
 80142a4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	2200      	movs	r2, #0
 80142b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80142b6:	3708      	adds	r7, #8
 80142b8:	46bd      	mov	sp, r7
 80142ba:	bd80      	pop	{r7, pc}
 80142bc:	08020f64 	.word	0x08020f64
 80142c0:	080215b0 	.word	0x080215b0
 80142c4:	08020fa8 	.word	0x08020fa8

080142c8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b084      	sub	sp, #16
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
 80142d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80142d2:	683b      	ldr	r3, [r7, #0]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d106      	bne.n	80142e6 <tcp_pcb_remove+0x1e>
 80142d8:	4b3e      	ldr	r3, [pc, #248]	@ (80143d4 <tcp_pcb_remove+0x10c>)
 80142da:	f640 0283 	movw	r2, #2179	@ 0x883
 80142de:	493e      	ldr	r1, [pc, #248]	@ (80143d8 <tcp_pcb_remove+0x110>)
 80142e0:	483e      	ldr	r0, [pc, #248]	@ (80143dc <tcp_pcb_remove+0x114>)
 80142e2:	f00a fb7d 	bl	801e9e0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d106      	bne.n	80142fa <tcp_pcb_remove+0x32>
 80142ec:	4b39      	ldr	r3, [pc, #228]	@ (80143d4 <tcp_pcb_remove+0x10c>)
 80142ee:	f640 0284 	movw	r2, #2180	@ 0x884
 80142f2:	493b      	ldr	r1, [pc, #236]	@ (80143e0 <tcp_pcb_remove+0x118>)
 80142f4:	4839      	ldr	r0, [pc, #228]	@ (80143dc <tcp_pcb_remove+0x114>)
 80142f6:	f00a fb73 	bl	801e9e0 <iprintf>

  TCP_RMV(pcblist, pcb);
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	683a      	ldr	r2, [r7, #0]
 8014300:	429a      	cmp	r2, r3
 8014302:	d105      	bne.n	8014310 <tcp_pcb_remove+0x48>
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	68da      	ldr	r2, [r3, #12]
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	601a      	str	r2, [r3, #0]
 801430e:	e013      	b.n	8014338 <tcp_pcb_remove+0x70>
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	60fb      	str	r3, [r7, #12]
 8014316:	e00c      	b.n	8014332 <tcp_pcb_remove+0x6a>
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	68db      	ldr	r3, [r3, #12]
 801431c:	683a      	ldr	r2, [r7, #0]
 801431e:	429a      	cmp	r2, r3
 8014320:	d104      	bne.n	801432c <tcp_pcb_remove+0x64>
 8014322:	683b      	ldr	r3, [r7, #0]
 8014324:	68da      	ldr	r2, [r3, #12]
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	60da      	str	r2, [r3, #12]
 801432a:	e005      	b.n	8014338 <tcp_pcb_remove+0x70>
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	68db      	ldr	r3, [r3, #12]
 8014330:	60fb      	str	r3, [r7, #12]
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	2b00      	cmp	r3, #0
 8014336:	d1ef      	bne.n	8014318 <tcp_pcb_remove+0x50>
 8014338:	683b      	ldr	r3, [r7, #0]
 801433a:	2200      	movs	r2, #0
 801433c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801433e:	6838      	ldr	r0, [r7, #0]
 8014340:	f7ff ff72 	bl	8014228 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8014344:	683b      	ldr	r3, [r7, #0]
 8014346:	7d1b      	ldrb	r3, [r3, #20]
 8014348:	2b0a      	cmp	r3, #10
 801434a:	d013      	beq.n	8014374 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801434c:	683b      	ldr	r3, [r7, #0]
 801434e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8014350:	2b01      	cmp	r3, #1
 8014352:	d00f      	beq.n	8014374 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8014354:	683b      	ldr	r3, [r7, #0]
 8014356:	8b5b      	ldrh	r3, [r3, #26]
 8014358:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801435c:	2b00      	cmp	r3, #0
 801435e:	d009      	beq.n	8014374 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8014360:	683b      	ldr	r3, [r7, #0]
 8014362:	8b5b      	ldrh	r3, [r3, #26]
 8014364:	f043 0302 	orr.w	r3, r3, #2
 8014368:	b29a      	uxth	r2, r3
 801436a:	683b      	ldr	r3, [r7, #0]
 801436c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801436e:	6838      	ldr	r0, [r7, #0]
 8014370:	f002 ff68 	bl	8017244 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8014374:	683b      	ldr	r3, [r7, #0]
 8014376:	7d1b      	ldrb	r3, [r3, #20]
 8014378:	2b01      	cmp	r3, #1
 801437a:	d020      	beq.n	80143be <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801437c:	683b      	ldr	r3, [r7, #0]
 801437e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014380:	2b00      	cmp	r3, #0
 8014382:	d006      	beq.n	8014392 <tcp_pcb_remove+0xca>
 8014384:	4b13      	ldr	r3, [pc, #76]	@ (80143d4 <tcp_pcb_remove+0x10c>)
 8014386:	f640 0293 	movw	r2, #2195	@ 0x893
 801438a:	4916      	ldr	r1, [pc, #88]	@ (80143e4 <tcp_pcb_remove+0x11c>)
 801438c:	4813      	ldr	r0, [pc, #76]	@ (80143dc <tcp_pcb_remove+0x114>)
 801438e:	f00a fb27 	bl	801e9e0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8014392:	683b      	ldr	r3, [r7, #0]
 8014394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014396:	2b00      	cmp	r3, #0
 8014398:	d006      	beq.n	80143a8 <tcp_pcb_remove+0xe0>
 801439a:	4b0e      	ldr	r3, [pc, #56]	@ (80143d4 <tcp_pcb_remove+0x10c>)
 801439c:	f640 0294 	movw	r2, #2196	@ 0x894
 80143a0:	4911      	ldr	r1, [pc, #68]	@ (80143e8 <tcp_pcb_remove+0x120>)
 80143a2:	480e      	ldr	r0, [pc, #56]	@ (80143dc <tcp_pcb_remove+0x114>)
 80143a4:	f00a fb1c 	bl	801e9e0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80143a8:	683b      	ldr	r3, [r7, #0]
 80143aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d006      	beq.n	80143be <tcp_pcb_remove+0xf6>
 80143b0:	4b08      	ldr	r3, [pc, #32]	@ (80143d4 <tcp_pcb_remove+0x10c>)
 80143b2:	f640 0296 	movw	r2, #2198	@ 0x896
 80143b6:	490d      	ldr	r1, [pc, #52]	@ (80143ec <tcp_pcb_remove+0x124>)
 80143b8:	4808      	ldr	r0, [pc, #32]	@ (80143dc <tcp_pcb_remove+0x114>)
 80143ba:	f00a fb11 	bl	801e9e0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80143be:	683b      	ldr	r3, [r7, #0]
 80143c0:	2200      	movs	r2, #0
 80143c2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80143c4:	683b      	ldr	r3, [r7, #0]
 80143c6:	2200      	movs	r2, #0
 80143c8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80143ca:	bf00      	nop
 80143cc:	3710      	adds	r7, #16
 80143ce:	46bd      	mov	sp, r7
 80143d0:	bd80      	pop	{r7, pc}
 80143d2:	bf00      	nop
 80143d4:	08020f64 	.word	0x08020f64
 80143d8:	080215cc 	.word	0x080215cc
 80143dc:	08020fa8 	.word	0x08020fa8
 80143e0:	080215e8 	.word	0x080215e8
 80143e4:	08021608 	.word	0x08021608
 80143e8:	08021620 	.word	0x08021620
 80143ec:	0802163c 	.word	0x0802163c

080143f0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b082      	sub	sp, #8
 80143f4:	af00      	add	r7, sp, #0
 80143f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d106      	bne.n	801440c <tcp_next_iss+0x1c>
 80143fe:	4b0a      	ldr	r3, [pc, #40]	@ (8014428 <tcp_next_iss+0x38>)
 8014400:	f640 02af 	movw	r2, #2223	@ 0x8af
 8014404:	4909      	ldr	r1, [pc, #36]	@ (801442c <tcp_next_iss+0x3c>)
 8014406:	480a      	ldr	r0, [pc, #40]	@ (8014430 <tcp_next_iss+0x40>)
 8014408:	f00a faea 	bl	801e9e0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801440c:	4b09      	ldr	r3, [pc, #36]	@ (8014434 <tcp_next_iss+0x44>)
 801440e:	681a      	ldr	r2, [r3, #0]
 8014410:	4b09      	ldr	r3, [pc, #36]	@ (8014438 <tcp_next_iss+0x48>)
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	4413      	add	r3, r2
 8014416:	4a07      	ldr	r2, [pc, #28]	@ (8014434 <tcp_next_iss+0x44>)
 8014418:	6013      	str	r3, [r2, #0]
  return iss;
 801441a:	4b06      	ldr	r3, [pc, #24]	@ (8014434 <tcp_next_iss+0x44>)
 801441c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801441e:	4618      	mov	r0, r3
 8014420:	3708      	adds	r7, #8
 8014422:	46bd      	mov	sp, r7
 8014424:	bd80      	pop	{r7, pc}
 8014426:	bf00      	nop
 8014428:	08020f64 	.word	0x08020f64
 801442c:	08021654 	.word	0x08021654
 8014430:	08020fa8 	.word	0x08020fa8
 8014434:	200000bc 	.word	0x200000bc
 8014438:	2000479c 	.word	0x2000479c

0801443c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801443c:	b580      	push	{r7, lr}
 801443e:	b086      	sub	sp, #24
 8014440:	af00      	add	r7, sp, #0
 8014442:	4603      	mov	r3, r0
 8014444:	60b9      	str	r1, [r7, #8]
 8014446:	607a      	str	r2, [r7, #4]
 8014448:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d106      	bne.n	801445e <tcp_eff_send_mss_netif+0x22>
 8014450:	4b14      	ldr	r3, [pc, #80]	@ (80144a4 <tcp_eff_send_mss_netif+0x68>)
 8014452:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8014456:	4914      	ldr	r1, [pc, #80]	@ (80144a8 <tcp_eff_send_mss_netif+0x6c>)
 8014458:	4814      	ldr	r0, [pc, #80]	@ (80144ac <tcp_eff_send_mss_netif+0x70>)
 801445a:	f00a fac1 	bl	801e9e0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801445e:	68bb      	ldr	r3, [r7, #8]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d101      	bne.n	8014468 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8014464:	89fb      	ldrh	r3, [r7, #14]
 8014466:	e019      	b.n	801449c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8014468:	68bb      	ldr	r3, [r7, #8]
 801446a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801446c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801446e:	8afb      	ldrh	r3, [r7, #22]
 8014470:	2b00      	cmp	r3, #0
 8014472:	d012      	beq.n	801449a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8014474:	2328      	movs	r3, #40	@ 0x28
 8014476:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8014478:	8afa      	ldrh	r2, [r7, #22]
 801447a:	8abb      	ldrh	r3, [r7, #20]
 801447c:	429a      	cmp	r2, r3
 801447e:	d904      	bls.n	801448a <tcp_eff_send_mss_netif+0x4e>
 8014480:	8afa      	ldrh	r2, [r7, #22]
 8014482:	8abb      	ldrh	r3, [r7, #20]
 8014484:	1ad3      	subs	r3, r2, r3
 8014486:	b29b      	uxth	r3, r3
 8014488:	e000      	b.n	801448c <tcp_eff_send_mss_netif+0x50>
 801448a:	2300      	movs	r3, #0
 801448c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801448e:	8a7a      	ldrh	r2, [r7, #18]
 8014490:	89fb      	ldrh	r3, [r7, #14]
 8014492:	4293      	cmp	r3, r2
 8014494:	bf28      	it	cs
 8014496:	4613      	movcs	r3, r2
 8014498:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801449a:	89fb      	ldrh	r3, [r7, #14]
}
 801449c:	4618      	mov	r0, r3
 801449e:	3718      	adds	r7, #24
 80144a0:	46bd      	mov	sp, r7
 80144a2:	bd80      	pop	{r7, pc}
 80144a4:	08020f64 	.word	0x08020f64
 80144a8:	08021670 	.word	0x08021670
 80144ac:	08020fa8 	.word	0x08020fa8

080144b0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b084      	sub	sp, #16
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
 80144b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80144ba:	683b      	ldr	r3, [r7, #0]
 80144bc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d119      	bne.n	80144f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80144c4:	4b10      	ldr	r3, [pc, #64]	@ (8014508 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80144c6:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80144ca:	4910      	ldr	r1, [pc, #64]	@ (801450c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80144cc:	4810      	ldr	r0, [pc, #64]	@ (8014510 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80144ce:	f00a fa87 	bl	801e9e0 <iprintf>

  while (pcb != NULL) {
 80144d2:	e011      	b.n	80144f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	681a      	ldr	r2, [r3, #0]
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	429a      	cmp	r2, r3
 80144de:	d108      	bne.n	80144f2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	68db      	ldr	r3, [r3, #12]
 80144e4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80144e6:	68f8      	ldr	r0, [r7, #12]
 80144e8:	f7fe ffc4 	bl	8013474 <tcp_abort>
      pcb = next;
 80144ec:	68bb      	ldr	r3, [r7, #8]
 80144ee:	60fb      	str	r3, [r7, #12]
 80144f0:	e002      	b.n	80144f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	68db      	ldr	r3, [r3, #12]
 80144f6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d1ea      	bne.n	80144d4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80144fe:	bf00      	nop
 8014500:	bf00      	nop
 8014502:	3710      	adds	r7, #16
 8014504:	46bd      	mov	sp, r7
 8014506:	bd80      	pop	{r7, pc}
 8014508:	08020f64 	.word	0x08020f64
 801450c:	08021698 	.word	0x08021698
 8014510:	08020fa8 	.word	0x08020fa8

08014514 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b084      	sub	sp, #16
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
 801451c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d02a      	beq.n	801457a <tcp_netif_ip_addr_changed+0x66>
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d026      	beq.n	801457a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801452c:	4b15      	ldr	r3, [pc, #84]	@ (8014584 <tcp_netif_ip_addr_changed+0x70>)
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	4619      	mov	r1, r3
 8014532:	6878      	ldr	r0, [r7, #4]
 8014534:	f7ff ffbc 	bl	80144b0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014538:	4b13      	ldr	r3, [pc, #76]	@ (8014588 <tcp_netif_ip_addr_changed+0x74>)
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	4619      	mov	r1, r3
 801453e:	6878      	ldr	r0, [r7, #4]
 8014540:	f7ff ffb6 	bl	80144b0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8014544:	683b      	ldr	r3, [r7, #0]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d017      	beq.n	801457a <tcp_netif_ip_addr_changed+0x66>
 801454a:	683b      	ldr	r3, [r7, #0]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d013      	beq.n	801457a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014552:	4b0e      	ldr	r3, [pc, #56]	@ (801458c <tcp_netif_ip_addr_changed+0x78>)
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	60fb      	str	r3, [r7, #12]
 8014558:	e00c      	b.n	8014574 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	681a      	ldr	r2, [r3, #0]
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	429a      	cmp	r2, r3
 8014564:	d103      	bne.n	801456e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8014566:	683b      	ldr	r3, [r7, #0]
 8014568:	681a      	ldr	r2, [r3, #0]
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	68db      	ldr	r3, [r3, #12]
 8014572:	60fb      	str	r3, [r7, #12]
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d1ef      	bne.n	801455a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801457a:	bf00      	nop
 801457c:	3710      	adds	r7, #16
 801457e:	46bd      	mov	sp, r7
 8014580:	bd80      	pop	{r7, pc}
 8014582:	bf00      	nop
 8014584:	200047a8 	.word	0x200047a8
 8014588:	200047a0 	.word	0x200047a0
 801458c:	200047a4 	.word	0x200047a4

08014590 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b082      	sub	sp, #8
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801459c:	2b00      	cmp	r3, #0
 801459e:	d007      	beq.n	80145b0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80145a4:	4618      	mov	r0, r3
 80145a6:	f7ff fc3d 	bl	8013e24 <tcp_segs_free>
    pcb->ooseq = NULL;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	2200      	movs	r2, #0
 80145ae:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80145b0:	bf00      	nop
 80145b2:	3708      	adds	r7, #8
 80145b4:	46bd      	mov	sp, r7
 80145b6:	bd80      	pop	{r7, pc}

080145b8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80145b8:	b590      	push	{r4, r7, lr}
 80145ba:	b08d      	sub	sp, #52	@ 0x34
 80145bc:	af04      	add	r7, sp, #16
 80145be:	6078      	str	r0, [r7, #4]
 80145c0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d105      	bne.n	80145d4 <tcp_input+0x1c>
 80145c8:	4b9b      	ldr	r3, [pc, #620]	@ (8014838 <tcp_input+0x280>)
 80145ca:	2283      	movs	r2, #131	@ 0x83
 80145cc:	499b      	ldr	r1, [pc, #620]	@ (801483c <tcp_input+0x284>)
 80145ce:	489c      	ldr	r0, [pc, #624]	@ (8014840 <tcp_input+0x288>)
 80145d0:	f00a fa06 	bl	801e9e0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	685b      	ldr	r3, [r3, #4]
 80145d8:	4a9a      	ldr	r2, [pc, #616]	@ (8014844 <tcp_input+0x28c>)
 80145da:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	895b      	ldrh	r3, [r3, #10]
 80145e0:	2b13      	cmp	r3, #19
 80145e2:	f240 83d1 	bls.w	8014d88 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80145e6:	4b98      	ldr	r3, [pc, #608]	@ (8014848 <tcp_input+0x290>)
 80145e8:	695b      	ldr	r3, [r3, #20]
 80145ea:	4a97      	ldr	r2, [pc, #604]	@ (8014848 <tcp_input+0x290>)
 80145ec:	6812      	ldr	r2, [r2, #0]
 80145ee:	4611      	mov	r1, r2
 80145f0:	4618      	mov	r0, r3
 80145f2:	f008 fa35 	bl	801ca60 <ip4_addr_isbroadcast_u32>
 80145f6:	4603      	mov	r3, r0
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	f040 83c7 	bne.w	8014d8c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80145fe:	4b92      	ldr	r3, [pc, #584]	@ (8014848 <tcp_input+0x290>)
 8014600:	695b      	ldr	r3, [r3, #20]
 8014602:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014606:	2be0      	cmp	r3, #224	@ 0xe0
 8014608:	f000 83c0 	beq.w	8014d8c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801460c:	4b8d      	ldr	r3, [pc, #564]	@ (8014844 <tcp_input+0x28c>)
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	899b      	ldrh	r3, [r3, #12]
 8014612:	b29b      	uxth	r3, r3
 8014614:	4618      	mov	r0, r3
 8014616:	f7fc fa6f 	bl	8010af8 <lwip_htons>
 801461a:	4603      	mov	r3, r0
 801461c:	0b1b      	lsrs	r3, r3, #12
 801461e:	b29b      	uxth	r3, r3
 8014620:	b2db      	uxtb	r3, r3
 8014622:	009b      	lsls	r3, r3, #2
 8014624:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8014626:	7cbb      	ldrb	r3, [r7, #18]
 8014628:	2b13      	cmp	r3, #19
 801462a:	f240 83b1 	bls.w	8014d90 <tcp_input+0x7d8>
 801462e:	7cbb      	ldrb	r3, [r7, #18]
 8014630:	b29a      	uxth	r2, r3
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	891b      	ldrh	r3, [r3, #8]
 8014636:	429a      	cmp	r2, r3
 8014638:	f200 83aa 	bhi.w	8014d90 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801463c:	7cbb      	ldrb	r3, [r7, #18]
 801463e:	b29b      	uxth	r3, r3
 8014640:	3b14      	subs	r3, #20
 8014642:	b29a      	uxth	r2, r3
 8014644:	4b81      	ldr	r3, [pc, #516]	@ (801484c <tcp_input+0x294>)
 8014646:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8014648:	4b81      	ldr	r3, [pc, #516]	@ (8014850 <tcp_input+0x298>)
 801464a:	2200      	movs	r2, #0
 801464c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	895a      	ldrh	r2, [r3, #10]
 8014652:	7cbb      	ldrb	r3, [r7, #18]
 8014654:	b29b      	uxth	r3, r3
 8014656:	429a      	cmp	r2, r3
 8014658:	d309      	bcc.n	801466e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801465a:	4b7c      	ldr	r3, [pc, #496]	@ (801484c <tcp_input+0x294>)
 801465c:	881a      	ldrh	r2, [r3, #0]
 801465e:	4b7d      	ldr	r3, [pc, #500]	@ (8014854 <tcp_input+0x29c>)
 8014660:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8014662:	7cbb      	ldrb	r3, [r7, #18]
 8014664:	4619      	mov	r1, r3
 8014666:	6878      	ldr	r0, [r7, #4]
 8014668:	f7fd ff14 	bl	8012494 <pbuf_remove_header>
 801466c:	e04e      	b.n	801470c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d105      	bne.n	8014682 <tcp_input+0xca>
 8014676:	4b70      	ldr	r3, [pc, #448]	@ (8014838 <tcp_input+0x280>)
 8014678:	22c2      	movs	r2, #194	@ 0xc2
 801467a:	4977      	ldr	r1, [pc, #476]	@ (8014858 <tcp_input+0x2a0>)
 801467c:	4870      	ldr	r0, [pc, #448]	@ (8014840 <tcp_input+0x288>)
 801467e:	f00a f9af 	bl	801e9e0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8014682:	2114      	movs	r1, #20
 8014684:	6878      	ldr	r0, [r7, #4]
 8014686:	f7fd ff05 	bl	8012494 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	895a      	ldrh	r2, [r3, #10]
 801468e:	4b71      	ldr	r3, [pc, #452]	@ (8014854 <tcp_input+0x29c>)
 8014690:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8014692:	4b6e      	ldr	r3, [pc, #440]	@ (801484c <tcp_input+0x294>)
 8014694:	881a      	ldrh	r2, [r3, #0]
 8014696:	4b6f      	ldr	r3, [pc, #444]	@ (8014854 <tcp_input+0x29c>)
 8014698:	881b      	ldrh	r3, [r3, #0]
 801469a:	1ad3      	subs	r3, r2, r3
 801469c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801469e:	4b6d      	ldr	r3, [pc, #436]	@ (8014854 <tcp_input+0x29c>)
 80146a0:	881b      	ldrh	r3, [r3, #0]
 80146a2:	4619      	mov	r1, r3
 80146a4:	6878      	ldr	r0, [r7, #4]
 80146a6:	f7fd fef5 	bl	8012494 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	895b      	ldrh	r3, [r3, #10]
 80146b0:	8a3a      	ldrh	r2, [r7, #16]
 80146b2:	429a      	cmp	r2, r3
 80146b4:	f200 836e 	bhi.w	8014d94 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	685b      	ldr	r3, [r3, #4]
 80146be:	4a64      	ldr	r2, [pc, #400]	@ (8014850 <tcp_input+0x298>)
 80146c0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	8a3a      	ldrh	r2, [r7, #16]
 80146c8:	4611      	mov	r1, r2
 80146ca:	4618      	mov	r0, r3
 80146cc:	f7fd fee2 	bl	8012494 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	891a      	ldrh	r2, [r3, #8]
 80146d4:	8a3b      	ldrh	r3, [r7, #16]
 80146d6:	1ad3      	subs	r3, r2, r3
 80146d8:	b29a      	uxth	r2, r3
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	895b      	ldrh	r3, [r3, #10]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d005      	beq.n	80146f2 <tcp_input+0x13a>
 80146e6:	4b54      	ldr	r3, [pc, #336]	@ (8014838 <tcp_input+0x280>)
 80146e8:	22df      	movs	r2, #223	@ 0xdf
 80146ea:	495c      	ldr	r1, [pc, #368]	@ (801485c <tcp_input+0x2a4>)
 80146ec:	4854      	ldr	r0, [pc, #336]	@ (8014840 <tcp_input+0x288>)
 80146ee:	f00a f977 	bl	801e9e0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	891a      	ldrh	r2, [r3, #8]
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	891b      	ldrh	r3, [r3, #8]
 80146fc:	429a      	cmp	r2, r3
 80146fe:	d005      	beq.n	801470c <tcp_input+0x154>
 8014700:	4b4d      	ldr	r3, [pc, #308]	@ (8014838 <tcp_input+0x280>)
 8014702:	22e0      	movs	r2, #224	@ 0xe0
 8014704:	4956      	ldr	r1, [pc, #344]	@ (8014860 <tcp_input+0x2a8>)
 8014706:	484e      	ldr	r0, [pc, #312]	@ (8014840 <tcp_input+0x288>)
 8014708:	f00a f96a 	bl	801e9e0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801470c:	4b4d      	ldr	r3, [pc, #308]	@ (8014844 <tcp_input+0x28c>)
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	881b      	ldrh	r3, [r3, #0]
 8014712:	b29b      	uxth	r3, r3
 8014714:	4a4b      	ldr	r2, [pc, #300]	@ (8014844 <tcp_input+0x28c>)
 8014716:	6814      	ldr	r4, [r2, #0]
 8014718:	4618      	mov	r0, r3
 801471a:	f7fc f9ed 	bl	8010af8 <lwip_htons>
 801471e:	4603      	mov	r3, r0
 8014720:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8014722:	4b48      	ldr	r3, [pc, #288]	@ (8014844 <tcp_input+0x28c>)
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	885b      	ldrh	r3, [r3, #2]
 8014728:	b29b      	uxth	r3, r3
 801472a:	4a46      	ldr	r2, [pc, #280]	@ (8014844 <tcp_input+0x28c>)
 801472c:	6814      	ldr	r4, [r2, #0]
 801472e:	4618      	mov	r0, r3
 8014730:	f7fc f9e2 	bl	8010af8 <lwip_htons>
 8014734:	4603      	mov	r3, r0
 8014736:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8014738:	4b42      	ldr	r3, [pc, #264]	@ (8014844 <tcp_input+0x28c>)
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	685b      	ldr	r3, [r3, #4]
 801473e:	4a41      	ldr	r2, [pc, #260]	@ (8014844 <tcp_input+0x28c>)
 8014740:	6814      	ldr	r4, [r2, #0]
 8014742:	4618      	mov	r0, r3
 8014744:	f7fc f9ee 	bl	8010b24 <lwip_htonl>
 8014748:	4603      	mov	r3, r0
 801474a:	6063      	str	r3, [r4, #4]
 801474c:	6863      	ldr	r3, [r4, #4]
 801474e:	4a45      	ldr	r2, [pc, #276]	@ (8014864 <tcp_input+0x2ac>)
 8014750:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8014752:	4b3c      	ldr	r3, [pc, #240]	@ (8014844 <tcp_input+0x28c>)
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	689b      	ldr	r3, [r3, #8]
 8014758:	4a3a      	ldr	r2, [pc, #232]	@ (8014844 <tcp_input+0x28c>)
 801475a:	6814      	ldr	r4, [r2, #0]
 801475c:	4618      	mov	r0, r3
 801475e:	f7fc f9e1 	bl	8010b24 <lwip_htonl>
 8014762:	4603      	mov	r3, r0
 8014764:	60a3      	str	r3, [r4, #8]
 8014766:	68a3      	ldr	r3, [r4, #8]
 8014768:	4a3f      	ldr	r2, [pc, #252]	@ (8014868 <tcp_input+0x2b0>)
 801476a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801476c:	4b35      	ldr	r3, [pc, #212]	@ (8014844 <tcp_input+0x28c>)
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	89db      	ldrh	r3, [r3, #14]
 8014772:	b29b      	uxth	r3, r3
 8014774:	4a33      	ldr	r2, [pc, #204]	@ (8014844 <tcp_input+0x28c>)
 8014776:	6814      	ldr	r4, [r2, #0]
 8014778:	4618      	mov	r0, r3
 801477a:	f7fc f9bd 	bl	8010af8 <lwip_htons>
 801477e:	4603      	mov	r3, r0
 8014780:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8014782:	4b30      	ldr	r3, [pc, #192]	@ (8014844 <tcp_input+0x28c>)
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	899b      	ldrh	r3, [r3, #12]
 8014788:	b29b      	uxth	r3, r3
 801478a:	4618      	mov	r0, r3
 801478c:	f7fc f9b4 	bl	8010af8 <lwip_htons>
 8014790:	4603      	mov	r3, r0
 8014792:	b2db      	uxtb	r3, r3
 8014794:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014798:	b2da      	uxtb	r2, r3
 801479a:	4b34      	ldr	r3, [pc, #208]	@ (801486c <tcp_input+0x2b4>)
 801479c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	891a      	ldrh	r2, [r3, #8]
 80147a2:	4b33      	ldr	r3, [pc, #204]	@ (8014870 <tcp_input+0x2b8>)
 80147a4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80147a6:	4b31      	ldr	r3, [pc, #196]	@ (801486c <tcp_input+0x2b4>)
 80147a8:	781b      	ldrb	r3, [r3, #0]
 80147aa:	f003 0303 	and.w	r3, r3, #3
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d00c      	beq.n	80147cc <tcp_input+0x214>
    tcplen++;
 80147b2:	4b2f      	ldr	r3, [pc, #188]	@ (8014870 <tcp_input+0x2b8>)
 80147b4:	881b      	ldrh	r3, [r3, #0]
 80147b6:	3301      	adds	r3, #1
 80147b8:	b29a      	uxth	r2, r3
 80147ba:	4b2d      	ldr	r3, [pc, #180]	@ (8014870 <tcp_input+0x2b8>)
 80147bc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	891a      	ldrh	r2, [r3, #8]
 80147c2:	4b2b      	ldr	r3, [pc, #172]	@ (8014870 <tcp_input+0x2b8>)
 80147c4:	881b      	ldrh	r3, [r3, #0]
 80147c6:	429a      	cmp	r2, r3
 80147c8:	f200 82e6 	bhi.w	8014d98 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80147cc:	2300      	movs	r3, #0
 80147ce:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80147d0:	4b28      	ldr	r3, [pc, #160]	@ (8014874 <tcp_input+0x2bc>)
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	61fb      	str	r3, [r7, #28]
 80147d6:	e09d      	b.n	8014914 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80147d8:	69fb      	ldr	r3, [r7, #28]
 80147da:	7d1b      	ldrb	r3, [r3, #20]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d105      	bne.n	80147ec <tcp_input+0x234>
 80147e0:	4b15      	ldr	r3, [pc, #84]	@ (8014838 <tcp_input+0x280>)
 80147e2:	22fb      	movs	r2, #251	@ 0xfb
 80147e4:	4924      	ldr	r1, [pc, #144]	@ (8014878 <tcp_input+0x2c0>)
 80147e6:	4816      	ldr	r0, [pc, #88]	@ (8014840 <tcp_input+0x288>)
 80147e8:	f00a f8fa 	bl	801e9e0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80147ec:	69fb      	ldr	r3, [r7, #28]
 80147ee:	7d1b      	ldrb	r3, [r3, #20]
 80147f0:	2b0a      	cmp	r3, #10
 80147f2:	d105      	bne.n	8014800 <tcp_input+0x248>
 80147f4:	4b10      	ldr	r3, [pc, #64]	@ (8014838 <tcp_input+0x280>)
 80147f6:	22fc      	movs	r2, #252	@ 0xfc
 80147f8:	4920      	ldr	r1, [pc, #128]	@ (801487c <tcp_input+0x2c4>)
 80147fa:	4811      	ldr	r0, [pc, #68]	@ (8014840 <tcp_input+0x288>)
 80147fc:	f00a f8f0 	bl	801e9e0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8014800:	69fb      	ldr	r3, [r7, #28]
 8014802:	7d1b      	ldrb	r3, [r3, #20]
 8014804:	2b01      	cmp	r3, #1
 8014806:	d105      	bne.n	8014814 <tcp_input+0x25c>
 8014808:	4b0b      	ldr	r3, [pc, #44]	@ (8014838 <tcp_input+0x280>)
 801480a:	22fd      	movs	r2, #253	@ 0xfd
 801480c:	491c      	ldr	r1, [pc, #112]	@ (8014880 <tcp_input+0x2c8>)
 801480e:	480c      	ldr	r0, [pc, #48]	@ (8014840 <tcp_input+0x288>)
 8014810:	f00a f8e6 	bl	801e9e0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014814:	69fb      	ldr	r3, [r7, #28]
 8014816:	7a1b      	ldrb	r3, [r3, #8]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d033      	beq.n	8014884 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801481c:	69fb      	ldr	r3, [r7, #28]
 801481e:	7a1a      	ldrb	r2, [r3, #8]
 8014820:	4b09      	ldr	r3, [pc, #36]	@ (8014848 <tcp_input+0x290>)
 8014822:	685b      	ldr	r3, [r3, #4]
 8014824:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8014828:	3301      	adds	r3, #1
 801482a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801482c:	429a      	cmp	r2, r3
 801482e:	d029      	beq.n	8014884 <tcp_input+0x2cc>
      prev = pcb;
 8014830:	69fb      	ldr	r3, [r7, #28]
 8014832:	61bb      	str	r3, [r7, #24]
      continue;
 8014834:	e06b      	b.n	801490e <tcp_input+0x356>
 8014836:	bf00      	nop
 8014838:	080216cc 	.word	0x080216cc
 801483c:	08021700 	.word	0x08021700
 8014840:	08021718 	.word	0x08021718
 8014844:	200047c4 	.word	0x200047c4
 8014848:	20004768 	.word	0x20004768
 801484c:	200047c8 	.word	0x200047c8
 8014850:	200047cc 	.word	0x200047cc
 8014854:	200047ca 	.word	0x200047ca
 8014858:	08021740 	.word	0x08021740
 801485c:	08021750 	.word	0x08021750
 8014860:	0802175c 	.word	0x0802175c
 8014864:	200047d4 	.word	0x200047d4
 8014868:	200047d8 	.word	0x200047d8
 801486c:	200047e0 	.word	0x200047e0
 8014870:	200047de 	.word	0x200047de
 8014874:	200047a8 	.word	0x200047a8
 8014878:	0802177c 	.word	0x0802177c
 801487c:	080217a4 	.word	0x080217a4
 8014880:	080217d0 	.word	0x080217d0
    }

    if (pcb->remote_port == tcphdr->src &&
 8014884:	69fb      	ldr	r3, [r7, #28]
 8014886:	8b1a      	ldrh	r2, [r3, #24]
 8014888:	4b72      	ldr	r3, [pc, #456]	@ (8014a54 <tcp_input+0x49c>)
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	881b      	ldrh	r3, [r3, #0]
 801488e:	b29b      	uxth	r3, r3
 8014890:	429a      	cmp	r2, r3
 8014892:	d13a      	bne.n	801490a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8014894:	69fb      	ldr	r3, [r7, #28]
 8014896:	8ada      	ldrh	r2, [r3, #22]
 8014898:	4b6e      	ldr	r3, [pc, #440]	@ (8014a54 <tcp_input+0x49c>)
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	885b      	ldrh	r3, [r3, #2]
 801489e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80148a0:	429a      	cmp	r2, r3
 80148a2:	d132      	bne.n	801490a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80148a4:	69fb      	ldr	r3, [r7, #28]
 80148a6:	685a      	ldr	r2, [r3, #4]
 80148a8:	4b6b      	ldr	r3, [pc, #428]	@ (8014a58 <tcp_input+0x4a0>)
 80148aa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80148ac:	429a      	cmp	r2, r3
 80148ae:	d12c      	bne.n	801490a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80148b0:	69fb      	ldr	r3, [r7, #28]
 80148b2:	681a      	ldr	r2, [r3, #0]
 80148b4:	4b68      	ldr	r3, [pc, #416]	@ (8014a58 <tcp_input+0x4a0>)
 80148b6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80148b8:	429a      	cmp	r2, r3
 80148ba:	d126      	bne.n	801490a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80148bc:	69fb      	ldr	r3, [r7, #28]
 80148be:	68db      	ldr	r3, [r3, #12]
 80148c0:	69fa      	ldr	r2, [r7, #28]
 80148c2:	429a      	cmp	r2, r3
 80148c4:	d106      	bne.n	80148d4 <tcp_input+0x31c>
 80148c6:	4b65      	ldr	r3, [pc, #404]	@ (8014a5c <tcp_input+0x4a4>)
 80148c8:	f240 120d 	movw	r2, #269	@ 0x10d
 80148cc:	4964      	ldr	r1, [pc, #400]	@ (8014a60 <tcp_input+0x4a8>)
 80148ce:	4865      	ldr	r0, [pc, #404]	@ (8014a64 <tcp_input+0x4ac>)
 80148d0:	f00a f886 	bl	801e9e0 <iprintf>
      if (prev != NULL) {
 80148d4:	69bb      	ldr	r3, [r7, #24]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d00a      	beq.n	80148f0 <tcp_input+0x338>
        prev->next = pcb->next;
 80148da:	69fb      	ldr	r3, [r7, #28]
 80148dc:	68da      	ldr	r2, [r3, #12]
 80148de:	69bb      	ldr	r3, [r7, #24]
 80148e0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80148e2:	4b61      	ldr	r3, [pc, #388]	@ (8014a68 <tcp_input+0x4b0>)
 80148e4:	681a      	ldr	r2, [r3, #0]
 80148e6:	69fb      	ldr	r3, [r7, #28]
 80148e8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80148ea:	4a5f      	ldr	r2, [pc, #380]	@ (8014a68 <tcp_input+0x4b0>)
 80148ec:	69fb      	ldr	r3, [r7, #28]
 80148ee:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80148f0:	69fb      	ldr	r3, [r7, #28]
 80148f2:	68db      	ldr	r3, [r3, #12]
 80148f4:	69fa      	ldr	r2, [r7, #28]
 80148f6:	429a      	cmp	r2, r3
 80148f8:	d111      	bne.n	801491e <tcp_input+0x366>
 80148fa:	4b58      	ldr	r3, [pc, #352]	@ (8014a5c <tcp_input+0x4a4>)
 80148fc:	f240 1215 	movw	r2, #277	@ 0x115
 8014900:	495a      	ldr	r1, [pc, #360]	@ (8014a6c <tcp_input+0x4b4>)
 8014902:	4858      	ldr	r0, [pc, #352]	@ (8014a64 <tcp_input+0x4ac>)
 8014904:	f00a f86c 	bl	801e9e0 <iprintf>
      break;
 8014908:	e009      	b.n	801491e <tcp_input+0x366>
    }
    prev = pcb;
 801490a:	69fb      	ldr	r3, [r7, #28]
 801490c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801490e:	69fb      	ldr	r3, [r7, #28]
 8014910:	68db      	ldr	r3, [r3, #12]
 8014912:	61fb      	str	r3, [r7, #28]
 8014914:	69fb      	ldr	r3, [r7, #28]
 8014916:	2b00      	cmp	r3, #0
 8014918:	f47f af5e 	bne.w	80147d8 <tcp_input+0x220>
 801491c:	e000      	b.n	8014920 <tcp_input+0x368>
      break;
 801491e:	bf00      	nop
  }

  if (pcb == NULL) {
 8014920:	69fb      	ldr	r3, [r7, #28]
 8014922:	2b00      	cmp	r3, #0
 8014924:	f040 80aa 	bne.w	8014a7c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014928:	4b51      	ldr	r3, [pc, #324]	@ (8014a70 <tcp_input+0x4b8>)
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	61fb      	str	r3, [r7, #28]
 801492e:	e03f      	b.n	80149b0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014930:	69fb      	ldr	r3, [r7, #28]
 8014932:	7d1b      	ldrb	r3, [r3, #20]
 8014934:	2b0a      	cmp	r3, #10
 8014936:	d006      	beq.n	8014946 <tcp_input+0x38e>
 8014938:	4b48      	ldr	r3, [pc, #288]	@ (8014a5c <tcp_input+0x4a4>)
 801493a:	f240 121f 	movw	r2, #287	@ 0x11f
 801493e:	494d      	ldr	r1, [pc, #308]	@ (8014a74 <tcp_input+0x4bc>)
 8014940:	4848      	ldr	r0, [pc, #288]	@ (8014a64 <tcp_input+0x4ac>)
 8014942:	f00a f84d 	bl	801e9e0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014946:	69fb      	ldr	r3, [r7, #28]
 8014948:	7a1b      	ldrb	r3, [r3, #8]
 801494a:	2b00      	cmp	r3, #0
 801494c:	d009      	beq.n	8014962 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801494e:	69fb      	ldr	r3, [r7, #28]
 8014950:	7a1a      	ldrb	r2, [r3, #8]
 8014952:	4b41      	ldr	r3, [pc, #260]	@ (8014a58 <tcp_input+0x4a0>)
 8014954:	685b      	ldr	r3, [r3, #4]
 8014956:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801495a:	3301      	adds	r3, #1
 801495c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801495e:	429a      	cmp	r2, r3
 8014960:	d122      	bne.n	80149a8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8014962:	69fb      	ldr	r3, [r7, #28]
 8014964:	8b1a      	ldrh	r2, [r3, #24]
 8014966:	4b3b      	ldr	r3, [pc, #236]	@ (8014a54 <tcp_input+0x49c>)
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	881b      	ldrh	r3, [r3, #0]
 801496c:	b29b      	uxth	r3, r3
 801496e:	429a      	cmp	r2, r3
 8014970:	d11b      	bne.n	80149aa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8014972:	69fb      	ldr	r3, [r7, #28]
 8014974:	8ada      	ldrh	r2, [r3, #22]
 8014976:	4b37      	ldr	r3, [pc, #220]	@ (8014a54 <tcp_input+0x49c>)
 8014978:	681b      	ldr	r3, [r3, #0]
 801497a:	885b      	ldrh	r3, [r3, #2]
 801497c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801497e:	429a      	cmp	r2, r3
 8014980:	d113      	bne.n	80149aa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014982:	69fb      	ldr	r3, [r7, #28]
 8014984:	685a      	ldr	r2, [r3, #4]
 8014986:	4b34      	ldr	r3, [pc, #208]	@ (8014a58 <tcp_input+0x4a0>)
 8014988:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801498a:	429a      	cmp	r2, r3
 801498c:	d10d      	bne.n	80149aa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801498e:	69fb      	ldr	r3, [r7, #28]
 8014990:	681a      	ldr	r2, [r3, #0]
 8014992:	4b31      	ldr	r3, [pc, #196]	@ (8014a58 <tcp_input+0x4a0>)
 8014994:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014996:	429a      	cmp	r2, r3
 8014998:	d107      	bne.n	80149aa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801499a:	69f8      	ldr	r0, [r7, #28]
 801499c:	f000 fb56 	bl	801504c <tcp_timewait_input>
        }
        pbuf_free(p);
 80149a0:	6878      	ldr	r0, [r7, #4]
 80149a2:	f7fd fdfd 	bl	80125a0 <pbuf_free>
        return;
 80149a6:	e1fd      	b.n	8014da4 <tcp_input+0x7ec>
        continue;
 80149a8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80149aa:	69fb      	ldr	r3, [r7, #28]
 80149ac:	68db      	ldr	r3, [r3, #12]
 80149ae:	61fb      	str	r3, [r7, #28]
 80149b0:	69fb      	ldr	r3, [r7, #28]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d1bc      	bne.n	8014930 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80149b6:	2300      	movs	r3, #0
 80149b8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80149ba:	4b2f      	ldr	r3, [pc, #188]	@ (8014a78 <tcp_input+0x4c0>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	617b      	str	r3, [r7, #20]
 80149c0:	e02a      	b.n	8014a18 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80149c2:	697b      	ldr	r3, [r7, #20]
 80149c4:	7a1b      	ldrb	r3, [r3, #8]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d00c      	beq.n	80149e4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80149ca:	697b      	ldr	r3, [r7, #20]
 80149cc:	7a1a      	ldrb	r2, [r3, #8]
 80149ce:	4b22      	ldr	r3, [pc, #136]	@ (8014a58 <tcp_input+0x4a0>)
 80149d0:	685b      	ldr	r3, [r3, #4]
 80149d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80149d6:	3301      	adds	r3, #1
 80149d8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80149da:	429a      	cmp	r2, r3
 80149dc:	d002      	beq.n	80149e4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80149de:	697b      	ldr	r3, [r7, #20]
 80149e0:	61bb      	str	r3, [r7, #24]
        continue;
 80149e2:	e016      	b.n	8014a12 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80149e4:	697b      	ldr	r3, [r7, #20]
 80149e6:	8ada      	ldrh	r2, [r3, #22]
 80149e8:	4b1a      	ldr	r3, [pc, #104]	@ (8014a54 <tcp_input+0x49c>)
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	885b      	ldrh	r3, [r3, #2]
 80149ee:	b29b      	uxth	r3, r3
 80149f0:	429a      	cmp	r2, r3
 80149f2:	d10c      	bne.n	8014a0e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80149f4:	697b      	ldr	r3, [r7, #20]
 80149f6:	681a      	ldr	r2, [r3, #0]
 80149f8:	4b17      	ldr	r3, [pc, #92]	@ (8014a58 <tcp_input+0x4a0>)
 80149fa:	695b      	ldr	r3, [r3, #20]
 80149fc:	429a      	cmp	r2, r3
 80149fe:	d00f      	beq.n	8014a20 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8014a00:	697b      	ldr	r3, [r7, #20]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d00d      	beq.n	8014a22 <tcp_input+0x46a>
 8014a06:	697b      	ldr	r3, [r7, #20]
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d009      	beq.n	8014a22 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8014a0e:	697b      	ldr	r3, [r7, #20]
 8014a10:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014a12:	697b      	ldr	r3, [r7, #20]
 8014a14:	68db      	ldr	r3, [r3, #12]
 8014a16:	617b      	str	r3, [r7, #20]
 8014a18:	697b      	ldr	r3, [r7, #20]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d1d1      	bne.n	80149c2 <tcp_input+0x40a>
 8014a1e:	e000      	b.n	8014a22 <tcp_input+0x46a>
            break;
 8014a20:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8014a22:	697b      	ldr	r3, [r7, #20]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d029      	beq.n	8014a7c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8014a28:	69bb      	ldr	r3, [r7, #24]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d00a      	beq.n	8014a44 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8014a2e:	697b      	ldr	r3, [r7, #20]
 8014a30:	68da      	ldr	r2, [r3, #12]
 8014a32:	69bb      	ldr	r3, [r7, #24]
 8014a34:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8014a36:	4b10      	ldr	r3, [pc, #64]	@ (8014a78 <tcp_input+0x4c0>)
 8014a38:	681a      	ldr	r2, [r3, #0]
 8014a3a:	697b      	ldr	r3, [r7, #20]
 8014a3c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8014a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8014a78 <tcp_input+0x4c0>)
 8014a40:	697b      	ldr	r3, [r7, #20]
 8014a42:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8014a44:	6978      	ldr	r0, [r7, #20]
 8014a46:	f000 fa03 	bl	8014e50 <tcp_listen_input>
      }
      pbuf_free(p);
 8014a4a:	6878      	ldr	r0, [r7, #4]
 8014a4c:	f7fd fda8 	bl	80125a0 <pbuf_free>
      return;
 8014a50:	e1a8      	b.n	8014da4 <tcp_input+0x7ec>
 8014a52:	bf00      	nop
 8014a54:	200047c4 	.word	0x200047c4
 8014a58:	20004768 	.word	0x20004768
 8014a5c:	080216cc 	.word	0x080216cc
 8014a60:	080217f8 	.word	0x080217f8
 8014a64:	08021718 	.word	0x08021718
 8014a68:	200047a8 	.word	0x200047a8
 8014a6c:	08021824 	.word	0x08021824
 8014a70:	200047ac 	.word	0x200047ac
 8014a74:	08021850 	.word	0x08021850
 8014a78:	200047a4 	.word	0x200047a4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8014a7c:	69fb      	ldr	r3, [r7, #28]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	f000 8158 	beq.w	8014d34 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8014a84:	4b95      	ldr	r3, [pc, #596]	@ (8014cdc <tcp_input+0x724>)
 8014a86:	2200      	movs	r2, #0
 8014a88:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	891a      	ldrh	r2, [r3, #8]
 8014a8e:	4b93      	ldr	r3, [pc, #588]	@ (8014cdc <tcp_input+0x724>)
 8014a90:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8014a92:	4a92      	ldr	r2, [pc, #584]	@ (8014cdc <tcp_input+0x724>)
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8014a98:	4b91      	ldr	r3, [pc, #580]	@ (8014ce0 <tcp_input+0x728>)
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	4a8f      	ldr	r2, [pc, #572]	@ (8014cdc <tcp_input+0x724>)
 8014a9e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8014aa0:	4b90      	ldr	r3, [pc, #576]	@ (8014ce4 <tcp_input+0x72c>)
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8014aa6:	4b90      	ldr	r3, [pc, #576]	@ (8014ce8 <tcp_input+0x730>)
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8014aac:	4b8f      	ldr	r3, [pc, #572]	@ (8014cec <tcp_input+0x734>)
 8014aae:	2200      	movs	r2, #0
 8014ab0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8014ab2:	4b8f      	ldr	r3, [pc, #572]	@ (8014cf0 <tcp_input+0x738>)
 8014ab4:	781b      	ldrb	r3, [r3, #0]
 8014ab6:	f003 0308 	and.w	r3, r3, #8
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d006      	beq.n	8014acc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	7b5b      	ldrb	r3, [r3, #13]
 8014ac2:	f043 0301 	orr.w	r3, r3, #1
 8014ac6:	b2da      	uxtb	r2, r3
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8014acc:	69fb      	ldr	r3, [r7, #28]
 8014ace:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d017      	beq.n	8014b04 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014ad4:	69f8      	ldr	r0, [r7, #28]
 8014ad6:	f7ff f929 	bl	8013d2c <tcp_process_refused_data>
 8014ada:	4603      	mov	r3, r0
 8014adc:	f113 0f0d 	cmn.w	r3, #13
 8014ae0:	d007      	beq.n	8014af2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014ae2:	69fb      	ldr	r3, [r7, #28]
 8014ae4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d00c      	beq.n	8014b04 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014aea:	4b82      	ldr	r3, [pc, #520]	@ (8014cf4 <tcp_input+0x73c>)
 8014aec:	881b      	ldrh	r3, [r3, #0]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d008      	beq.n	8014b04 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8014af2:	69fb      	ldr	r3, [r7, #28]
 8014af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	f040 80e3 	bne.w	8014cc2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8014afc:	69f8      	ldr	r0, [r7, #28]
 8014afe:	f003 f9a7 	bl	8017e50 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8014b02:	e0de      	b.n	8014cc2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8014b04:	4a7c      	ldr	r2, [pc, #496]	@ (8014cf8 <tcp_input+0x740>)
 8014b06:	69fb      	ldr	r3, [r7, #28]
 8014b08:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8014b0a:	69f8      	ldr	r0, [r7, #28]
 8014b0c:	f000 fb18 	bl	8015140 <tcp_process>
 8014b10:	4603      	mov	r3, r0
 8014b12:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8014b14:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014b18:	f113 0f0d 	cmn.w	r3, #13
 8014b1c:	f000 80d3 	beq.w	8014cc6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8014b20:	4b71      	ldr	r3, [pc, #452]	@ (8014ce8 <tcp_input+0x730>)
 8014b22:	781b      	ldrb	r3, [r3, #0]
 8014b24:	f003 0308 	and.w	r3, r3, #8
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d015      	beq.n	8014b58 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8014b2c:	69fb      	ldr	r3, [r7, #28]
 8014b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d008      	beq.n	8014b48 <tcp_input+0x590>
 8014b36:	69fb      	ldr	r3, [r7, #28]
 8014b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014b3c:	69fa      	ldr	r2, [r7, #28]
 8014b3e:	6912      	ldr	r2, [r2, #16]
 8014b40:	f06f 010d 	mvn.w	r1, #13
 8014b44:	4610      	mov	r0, r2
 8014b46:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014b48:	69f9      	ldr	r1, [r7, #28]
 8014b4a:	486c      	ldr	r0, [pc, #432]	@ (8014cfc <tcp_input+0x744>)
 8014b4c:	f7ff fbbc 	bl	80142c8 <tcp_pcb_remove>
        tcp_free(pcb);
 8014b50:	69f8      	ldr	r0, [r7, #28]
 8014b52:	f7fe f9a7 	bl	8012ea4 <tcp_free>
 8014b56:	e0da      	b.n	8014d0e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8014b58:	2300      	movs	r3, #0
 8014b5a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8014b5c:	4b63      	ldr	r3, [pc, #396]	@ (8014cec <tcp_input+0x734>)
 8014b5e:	881b      	ldrh	r3, [r3, #0]
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d01d      	beq.n	8014ba0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8014b64:	4b61      	ldr	r3, [pc, #388]	@ (8014cec <tcp_input+0x734>)
 8014b66:	881b      	ldrh	r3, [r3, #0]
 8014b68:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8014b6a:	69fb      	ldr	r3, [r7, #28]
 8014b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d00a      	beq.n	8014b8a <tcp_input+0x5d2>
 8014b74:	69fb      	ldr	r3, [r7, #28]
 8014b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014b7a:	69fa      	ldr	r2, [r7, #28]
 8014b7c:	6910      	ldr	r0, [r2, #16]
 8014b7e:	89fa      	ldrh	r2, [r7, #14]
 8014b80:	69f9      	ldr	r1, [r7, #28]
 8014b82:	4798      	blx	r3
 8014b84:	4603      	mov	r3, r0
 8014b86:	74fb      	strb	r3, [r7, #19]
 8014b88:	e001      	b.n	8014b8e <tcp_input+0x5d6>
 8014b8a:	2300      	movs	r3, #0
 8014b8c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014b8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014b92:	f113 0f0d 	cmn.w	r3, #13
 8014b96:	f000 8098 	beq.w	8014cca <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8014b9a:	4b54      	ldr	r3, [pc, #336]	@ (8014cec <tcp_input+0x734>)
 8014b9c:	2200      	movs	r2, #0
 8014b9e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8014ba0:	69f8      	ldr	r0, [r7, #28]
 8014ba2:	f000 f915 	bl	8014dd0 <tcp_input_delayed_close>
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	f040 8090 	bne.w	8014cce <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8014bae:	4b4d      	ldr	r3, [pc, #308]	@ (8014ce4 <tcp_input+0x72c>)
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d041      	beq.n	8014c3a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8014bb6:	69fb      	ldr	r3, [r7, #28]
 8014bb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d006      	beq.n	8014bcc <tcp_input+0x614>
 8014bbe:	4b50      	ldr	r3, [pc, #320]	@ (8014d00 <tcp_input+0x748>)
 8014bc0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8014bc4:	494f      	ldr	r1, [pc, #316]	@ (8014d04 <tcp_input+0x74c>)
 8014bc6:	4850      	ldr	r0, [pc, #320]	@ (8014d08 <tcp_input+0x750>)
 8014bc8:	f009 ff0a 	bl	801e9e0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8014bcc:	69fb      	ldr	r3, [r7, #28]
 8014bce:	8b5b      	ldrh	r3, [r3, #26]
 8014bd0:	f003 0310 	and.w	r3, r3, #16
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d008      	beq.n	8014bea <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8014bd8:	4b42      	ldr	r3, [pc, #264]	@ (8014ce4 <tcp_input+0x72c>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f7fd fcdf 	bl	80125a0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8014be2:	69f8      	ldr	r0, [r7, #28]
 8014be4:	f7fe fc46 	bl	8013474 <tcp_abort>
            goto aborted;
 8014be8:	e091      	b.n	8014d0e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8014bea:	69fb      	ldr	r3, [r7, #28]
 8014bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d00c      	beq.n	8014c0e <tcp_input+0x656>
 8014bf4:	69fb      	ldr	r3, [r7, #28]
 8014bf6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014bfa:	69fb      	ldr	r3, [r7, #28]
 8014bfc:	6918      	ldr	r0, [r3, #16]
 8014bfe:	4b39      	ldr	r3, [pc, #228]	@ (8014ce4 <tcp_input+0x72c>)
 8014c00:	681a      	ldr	r2, [r3, #0]
 8014c02:	2300      	movs	r3, #0
 8014c04:	69f9      	ldr	r1, [r7, #28]
 8014c06:	47a0      	blx	r4
 8014c08:	4603      	mov	r3, r0
 8014c0a:	74fb      	strb	r3, [r7, #19]
 8014c0c:	e008      	b.n	8014c20 <tcp_input+0x668>
 8014c0e:	4b35      	ldr	r3, [pc, #212]	@ (8014ce4 <tcp_input+0x72c>)
 8014c10:	681a      	ldr	r2, [r3, #0]
 8014c12:	2300      	movs	r3, #0
 8014c14:	69f9      	ldr	r1, [r7, #28]
 8014c16:	2000      	movs	r0, #0
 8014c18:	f7ff f95e 	bl	8013ed8 <tcp_recv_null>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014c20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014c24:	f113 0f0d 	cmn.w	r3, #13
 8014c28:	d053      	beq.n	8014cd2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8014c2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d003      	beq.n	8014c3a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8014c32:	4b2c      	ldr	r3, [pc, #176]	@ (8014ce4 <tcp_input+0x72c>)
 8014c34:	681a      	ldr	r2, [r3, #0]
 8014c36:	69fb      	ldr	r3, [r7, #28]
 8014c38:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8014c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8014ce8 <tcp_input+0x730>)
 8014c3c:	781b      	ldrb	r3, [r3, #0]
 8014c3e:	f003 0320 	and.w	r3, r3, #32
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d030      	beq.n	8014ca8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8014c46:	69fb      	ldr	r3, [r7, #28]
 8014c48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d009      	beq.n	8014c62 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8014c4e:	69fb      	ldr	r3, [r7, #28]
 8014c50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014c52:	7b5a      	ldrb	r2, [r3, #13]
 8014c54:	69fb      	ldr	r3, [r7, #28]
 8014c56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014c58:	f042 0220 	orr.w	r2, r2, #32
 8014c5c:	b2d2      	uxtb	r2, r2
 8014c5e:	735a      	strb	r2, [r3, #13]
 8014c60:	e022      	b.n	8014ca8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014c62:	69fb      	ldr	r3, [r7, #28]
 8014c64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014c66:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014c6a:	d005      	beq.n	8014c78 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8014c6c:	69fb      	ldr	r3, [r7, #28]
 8014c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014c70:	3301      	adds	r3, #1
 8014c72:	b29a      	uxth	r2, r3
 8014c74:	69fb      	ldr	r3, [r7, #28]
 8014c76:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8014c78:	69fb      	ldr	r3, [r7, #28]
 8014c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d00b      	beq.n	8014c9a <tcp_input+0x6e2>
 8014c82:	69fb      	ldr	r3, [r7, #28]
 8014c84:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014c88:	69fb      	ldr	r3, [r7, #28]
 8014c8a:	6918      	ldr	r0, [r3, #16]
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	2200      	movs	r2, #0
 8014c90:	69f9      	ldr	r1, [r7, #28]
 8014c92:	47a0      	blx	r4
 8014c94:	4603      	mov	r3, r0
 8014c96:	74fb      	strb	r3, [r7, #19]
 8014c98:	e001      	b.n	8014c9e <tcp_input+0x6e6>
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014c9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014ca2:	f113 0f0d 	cmn.w	r3, #13
 8014ca6:	d016      	beq.n	8014cd6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8014ca8:	4b13      	ldr	r3, [pc, #76]	@ (8014cf8 <tcp_input+0x740>)
 8014caa:	2200      	movs	r2, #0
 8014cac:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8014cae:	69f8      	ldr	r0, [r7, #28]
 8014cb0:	f000 f88e 	bl	8014dd0 <tcp_input_delayed_close>
 8014cb4:	4603      	mov	r3, r0
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d128      	bne.n	8014d0c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8014cba:	69f8      	ldr	r0, [r7, #28]
 8014cbc:	f002 fac2 	bl	8017244 <tcp_output>
 8014cc0:	e025      	b.n	8014d0e <tcp_input+0x756>
        goto aborted;
 8014cc2:	bf00      	nop
 8014cc4:	e023      	b.n	8014d0e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8014cc6:	bf00      	nop
 8014cc8:	e021      	b.n	8014d0e <tcp_input+0x756>
              goto aborted;
 8014cca:	bf00      	nop
 8014ccc:	e01f      	b.n	8014d0e <tcp_input+0x756>
          goto aborted;
 8014cce:	bf00      	nop
 8014cd0:	e01d      	b.n	8014d0e <tcp_input+0x756>
            goto aborted;
 8014cd2:	bf00      	nop
 8014cd4:	e01b      	b.n	8014d0e <tcp_input+0x756>
              goto aborted;
 8014cd6:	bf00      	nop
 8014cd8:	e019      	b.n	8014d0e <tcp_input+0x756>
 8014cda:	bf00      	nop
 8014cdc:	200047b4 	.word	0x200047b4
 8014ce0:	200047c4 	.word	0x200047c4
 8014ce4:	200047e4 	.word	0x200047e4
 8014ce8:	200047e1 	.word	0x200047e1
 8014cec:	200047dc 	.word	0x200047dc
 8014cf0:	200047e0 	.word	0x200047e0
 8014cf4:	200047de 	.word	0x200047de
 8014cf8:	200047e8 	.word	0x200047e8
 8014cfc:	200047a8 	.word	0x200047a8
 8014d00:	080216cc 	.word	0x080216cc
 8014d04:	08021880 	.word	0x08021880
 8014d08:	08021718 	.word	0x08021718
          goto aborted;
 8014d0c:	bf00      	nop
    tcp_input_pcb = NULL;
 8014d0e:	4b27      	ldr	r3, [pc, #156]	@ (8014dac <tcp_input+0x7f4>)
 8014d10:	2200      	movs	r2, #0
 8014d12:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8014d14:	4b26      	ldr	r3, [pc, #152]	@ (8014db0 <tcp_input+0x7f8>)
 8014d16:	2200      	movs	r2, #0
 8014d18:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8014d1a:	4b26      	ldr	r3, [pc, #152]	@ (8014db4 <tcp_input+0x7fc>)
 8014d1c:	685b      	ldr	r3, [r3, #4]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d03f      	beq.n	8014da2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8014d22:	4b24      	ldr	r3, [pc, #144]	@ (8014db4 <tcp_input+0x7fc>)
 8014d24:	685b      	ldr	r3, [r3, #4]
 8014d26:	4618      	mov	r0, r3
 8014d28:	f7fd fc3a 	bl	80125a0 <pbuf_free>
      inseg.p = NULL;
 8014d2c:	4b21      	ldr	r3, [pc, #132]	@ (8014db4 <tcp_input+0x7fc>)
 8014d2e:	2200      	movs	r2, #0
 8014d30:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8014d32:	e036      	b.n	8014da2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014d34:	4b20      	ldr	r3, [pc, #128]	@ (8014db8 <tcp_input+0x800>)
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	899b      	ldrh	r3, [r3, #12]
 8014d3a:	b29b      	uxth	r3, r3
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f7fb fedb 	bl	8010af8 <lwip_htons>
 8014d42:	4603      	mov	r3, r0
 8014d44:	b2db      	uxtb	r3, r3
 8014d46:	f003 0304 	and.w	r3, r3, #4
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d118      	bne.n	8014d80 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8014dbc <tcp_input+0x804>)
 8014d50:	6819      	ldr	r1, [r3, #0]
 8014d52:	4b1b      	ldr	r3, [pc, #108]	@ (8014dc0 <tcp_input+0x808>)
 8014d54:	881b      	ldrh	r3, [r3, #0]
 8014d56:	461a      	mov	r2, r3
 8014d58:	4b1a      	ldr	r3, [pc, #104]	@ (8014dc4 <tcp_input+0x80c>)
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014d5e:	4b16      	ldr	r3, [pc, #88]	@ (8014db8 <tcp_input+0x800>)
 8014d60:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014d62:	885b      	ldrh	r3, [r3, #2]
 8014d64:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014d66:	4a14      	ldr	r2, [pc, #80]	@ (8014db8 <tcp_input+0x800>)
 8014d68:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014d6a:	8812      	ldrh	r2, [r2, #0]
 8014d6c:	b292      	uxth	r2, r2
 8014d6e:	9202      	str	r2, [sp, #8]
 8014d70:	9301      	str	r3, [sp, #4]
 8014d72:	4b15      	ldr	r3, [pc, #84]	@ (8014dc8 <tcp_input+0x810>)
 8014d74:	9300      	str	r3, [sp, #0]
 8014d76:	4b15      	ldr	r3, [pc, #84]	@ (8014dcc <tcp_input+0x814>)
 8014d78:	4602      	mov	r2, r0
 8014d7a:	2000      	movs	r0, #0
 8014d7c:	f003 f816 	bl	8017dac <tcp_rst>
    pbuf_free(p);
 8014d80:	6878      	ldr	r0, [r7, #4]
 8014d82:	f7fd fc0d 	bl	80125a0 <pbuf_free>
  return;
 8014d86:	e00c      	b.n	8014da2 <tcp_input+0x7ea>
    goto dropped;
 8014d88:	bf00      	nop
 8014d8a:	e006      	b.n	8014d9a <tcp_input+0x7e2>
    goto dropped;
 8014d8c:	bf00      	nop
 8014d8e:	e004      	b.n	8014d9a <tcp_input+0x7e2>
    goto dropped;
 8014d90:	bf00      	nop
 8014d92:	e002      	b.n	8014d9a <tcp_input+0x7e2>
      goto dropped;
 8014d94:	bf00      	nop
 8014d96:	e000      	b.n	8014d9a <tcp_input+0x7e2>
      goto dropped;
 8014d98:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8014d9a:	6878      	ldr	r0, [r7, #4]
 8014d9c:	f7fd fc00 	bl	80125a0 <pbuf_free>
 8014da0:	e000      	b.n	8014da4 <tcp_input+0x7ec>
  return;
 8014da2:	bf00      	nop
}
 8014da4:	3724      	adds	r7, #36	@ 0x24
 8014da6:	46bd      	mov	sp, r7
 8014da8:	bd90      	pop	{r4, r7, pc}
 8014daa:	bf00      	nop
 8014dac:	200047e8 	.word	0x200047e8
 8014db0:	200047e4 	.word	0x200047e4
 8014db4:	200047b4 	.word	0x200047b4
 8014db8:	200047c4 	.word	0x200047c4
 8014dbc:	200047d8 	.word	0x200047d8
 8014dc0:	200047de 	.word	0x200047de
 8014dc4:	200047d4 	.word	0x200047d4
 8014dc8:	20004778 	.word	0x20004778
 8014dcc:	2000477c 	.word	0x2000477c

08014dd0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b082      	sub	sp, #8
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d106      	bne.n	8014dec <tcp_input_delayed_close+0x1c>
 8014dde:	4b17      	ldr	r3, [pc, #92]	@ (8014e3c <tcp_input_delayed_close+0x6c>)
 8014de0:	f240 225a 	movw	r2, #602	@ 0x25a
 8014de4:	4916      	ldr	r1, [pc, #88]	@ (8014e40 <tcp_input_delayed_close+0x70>)
 8014de6:	4817      	ldr	r0, [pc, #92]	@ (8014e44 <tcp_input_delayed_close+0x74>)
 8014de8:	f009 fdfa 	bl	801e9e0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8014dec:	4b16      	ldr	r3, [pc, #88]	@ (8014e48 <tcp_input_delayed_close+0x78>)
 8014dee:	781b      	ldrb	r3, [r3, #0]
 8014df0:	f003 0310 	and.w	r3, r3, #16
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d01c      	beq.n	8014e32 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	8b5b      	ldrh	r3, [r3, #26]
 8014dfc:	f003 0310 	and.w	r3, r3, #16
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d10d      	bne.n	8014e20 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d008      	beq.n	8014e20 <tcp_input_delayed_close+0x50>
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014e14:	687a      	ldr	r2, [r7, #4]
 8014e16:	6912      	ldr	r2, [r2, #16]
 8014e18:	f06f 010e 	mvn.w	r1, #14
 8014e1c:	4610      	mov	r0, r2
 8014e1e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014e20:	6879      	ldr	r1, [r7, #4]
 8014e22:	480a      	ldr	r0, [pc, #40]	@ (8014e4c <tcp_input_delayed_close+0x7c>)
 8014e24:	f7ff fa50 	bl	80142c8 <tcp_pcb_remove>
    tcp_free(pcb);
 8014e28:	6878      	ldr	r0, [r7, #4]
 8014e2a:	f7fe f83b 	bl	8012ea4 <tcp_free>
    return 1;
 8014e2e:	2301      	movs	r3, #1
 8014e30:	e000      	b.n	8014e34 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8014e32:	2300      	movs	r3, #0
}
 8014e34:	4618      	mov	r0, r3
 8014e36:	3708      	adds	r7, #8
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	bd80      	pop	{r7, pc}
 8014e3c:	080216cc 	.word	0x080216cc
 8014e40:	0802189c 	.word	0x0802189c
 8014e44:	08021718 	.word	0x08021718
 8014e48:	200047e1 	.word	0x200047e1
 8014e4c:	200047a8 	.word	0x200047a8

08014e50 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8014e50:	b590      	push	{r4, r7, lr}
 8014e52:	b08b      	sub	sp, #44	@ 0x2c
 8014e54:	af04      	add	r7, sp, #16
 8014e56:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8014e58:	4b6f      	ldr	r3, [pc, #444]	@ (8015018 <tcp_listen_input+0x1c8>)
 8014e5a:	781b      	ldrb	r3, [r3, #0]
 8014e5c:	f003 0304 	and.w	r3, r3, #4
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	f040 80d2 	bne.w	801500a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d106      	bne.n	8014e7a <tcp_listen_input+0x2a>
 8014e6c:	4b6b      	ldr	r3, [pc, #428]	@ (801501c <tcp_listen_input+0x1cc>)
 8014e6e:	f240 2281 	movw	r2, #641	@ 0x281
 8014e72:	496b      	ldr	r1, [pc, #428]	@ (8015020 <tcp_listen_input+0x1d0>)
 8014e74:	486b      	ldr	r0, [pc, #428]	@ (8015024 <tcp_listen_input+0x1d4>)
 8014e76:	f009 fdb3 	bl	801e9e0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8014e7a:	4b67      	ldr	r3, [pc, #412]	@ (8015018 <tcp_listen_input+0x1c8>)
 8014e7c:	781b      	ldrb	r3, [r3, #0]
 8014e7e:	f003 0310 	and.w	r3, r3, #16
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d019      	beq.n	8014eba <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014e86:	4b68      	ldr	r3, [pc, #416]	@ (8015028 <tcp_listen_input+0x1d8>)
 8014e88:	6819      	ldr	r1, [r3, #0]
 8014e8a:	4b68      	ldr	r3, [pc, #416]	@ (801502c <tcp_listen_input+0x1dc>)
 8014e8c:	881b      	ldrh	r3, [r3, #0]
 8014e8e:	461a      	mov	r2, r3
 8014e90:	4b67      	ldr	r3, [pc, #412]	@ (8015030 <tcp_listen_input+0x1e0>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014e96:	4b67      	ldr	r3, [pc, #412]	@ (8015034 <tcp_listen_input+0x1e4>)
 8014e98:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014e9a:	885b      	ldrh	r3, [r3, #2]
 8014e9c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014e9e:	4a65      	ldr	r2, [pc, #404]	@ (8015034 <tcp_listen_input+0x1e4>)
 8014ea0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014ea2:	8812      	ldrh	r2, [r2, #0]
 8014ea4:	b292      	uxth	r2, r2
 8014ea6:	9202      	str	r2, [sp, #8]
 8014ea8:	9301      	str	r3, [sp, #4]
 8014eaa:	4b63      	ldr	r3, [pc, #396]	@ (8015038 <tcp_listen_input+0x1e8>)
 8014eac:	9300      	str	r3, [sp, #0]
 8014eae:	4b63      	ldr	r3, [pc, #396]	@ (801503c <tcp_listen_input+0x1ec>)
 8014eb0:	4602      	mov	r2, r0
 8014eb2:	6878      	ldr	r0, [r7, #4]
 8014eb4:	f002 ff7a 	bl	8017dac <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014eb8:	e0a9      	b.n	801500e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8014eba:	4b57      	ldr	r3, [pc, #348]	@ (8015018 <tcp_listen_input+0x1c8>)
 8014ebc:	781b      	ldrb	r3, [r3, #0]
 8014ebe:	f003 0302 	and.w	r3, r3, #2
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	f000 80a3 	beq.w	801500e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	7d5b      	ldrb	r3, [r3, #21]
 8014ecc:	4618      	mov	r0, r3
 8014ece:	f7ff f927 	bl	8014120 <tcp_alloc>
 8014ed2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014ed4:	697b      	ldr	r3, [r7, #20]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d111      	bne.n	8014efe <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	699b      	ldr	r3, [r3, #24]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d00a      	beq.n	8014ef8 <tcp_listen_input+0xa8>
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	699b      	ldr	r3, [r3, #24]
 8014ee6:	687a      	ldr	r2, [r7, #4]
 8014ee8:	6910      	ldr	r0, [r2, #16]
 8014eea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014eee:	2100      	movs	r1, #0
 8014ef0:	4798      	blx	r3
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	73bb      	strb	r3, [r7, #14]
      return;
 8014ef6:	e08b      	b.n	8015010 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014ef8:	23f0      	movs	r3, #240	@ 0xf0
 8014efa:	73bb      	strb	r3, [r7, #14]
      return;
 8014efc:	e088      	b.n	8015010 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8014efe:	4b50      	ldr	r3, [pc, #320]	@ (8015040 <tcp_listen_input+0x1f0>)
 8014f00:	695a      	ldr	r2, [r3, #20]
 8014f02:	697b      	ldr	r3, [r7, #20]
 8014f04:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8014f06:	4b4e      	ldr	r3, [pc, #312]	@ (8015040 <tcp_listen_input+0x1f0>)
 8014f08:	691a      	ldr	r2, [r3, #16]
 8014f0a:	697b      	ldr	r3, [r7, #20]
 8014f0c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	8ada      	ldrh	r2, [r3, #22]
 8014f12:	697b      	ldr	r3, [r7, #20]
 8014f14:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014f16:	4b47      	ldr	r3, [pc, #284]	@ (8015034 <tcp_listen_input+0x1e4>)
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	881b      	ldrh	r3, [r3, #0]
 8014f1c:	b29a      	uxth	r2, r3
 8014f1e:	697b      	ldr	r3, [r7, #20]
 8014f20:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8014f22:	697b      	ldr	r3, [r7, #20]
 8014f24:	2203      	movs	r2, #3
 8014f26:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014f28:	4b41      	ldr	r3, [pc, #260]	@ (8015030 <tcp_listen_input+0x1e0>)
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	1c5a      	adds	r2, r3, #1
 8014f2e:	697b      	ldr	r3, [r7, #20]
 8014f30:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8014f32:	697b      	ldr	r3, [r7, #20]
 8014f34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014f36:	697b      	ldr	r3, [r7, #20]
 8014f38:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8014f3a:	6978      	ldr	r0, [r7, #20]
 8014f3c:	f7ff fa58 	bl	80143f0 <tcp_next_iss>
 8014f40:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014f42:	697b      	ldr	r3, [r7, #20]
 8014f44:	693a      	ldr	r2, [r7, #16]
 8014f46:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8014f48:	697b      	ldr	r3, [r7, #20]
 8014f4a:	693a      	ldr	r2, [r7, #16]
 8014f4c:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8014f4e:	697b      	ldr	r3, [r7, #20]
 8014f50:	693a      	ldr	r2, [r7, #16]
 8014f52:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	693a      	ldr	r2, [r7, #16]
 8014f58:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8014f5a:	4b35      	ldr	r3, [pc, #212]	@ (8015030 <tcp_listen_input+0x1e0>)
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	1e5a      	subs	r2, r3, #1
 8014f60:	697b      	ldr	r3, [r7, #20]
 8014f62:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	691a      	ldr	r2, [r3, #16]
 8014f68:	697b      	ldr	r3, [r7, #20]
 8014f6a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014f6c:	697b      	ldr	r3, [r7, #20]
 8014f6e:	687a      	ldr	r2, [r7, #4]
 8014f70:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	7a5b      	ldrb	r3, [r3, #9]
 8014f76:	f003 030c 	and.w	r3, r3, #12
 8014f7a:	b2da      	uxtb	r2, r3
 8014f7c:	697b      	ldr	r3, [r7, #20]
 8014f7e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	7a1a      	ldrb	r2, [r3, #8]
 8014f84:	697b      	ldr	r3, [r7, #20]
 8014f86:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014f88:	4b2e      	ldr	r3, [pc, #184]	@ (8015044 <tcp_listen_input+0x1f4>)
 8014f8a:	681a      	ldr	r2, [r3, #0]
 8014f8c:	697b      	ldr	r3, [r7, #20]
 8014f8e:	60da      	str	r2, [r3, #12]
 8014f90:	4a2c      	ldr	r2, [pc, #176]	@ (8015044 <tcp_listen_input+0x1f4>)
 8014f92:	697b      	ldr	r3, [r7, #20]
 8014f94:	6013      	str	r3, [r2, #0]
 8014f96:	f003 f8cb 	bl	8018130 <tcp_timer_needed>
 8014f9a:	4b2b      	ldr	r3, [pc, #172]	@ (8015048 <tcp_listen_input+0x1f8>)
 8014f9c:	2201      	movs	r2, #1
 8014f9e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014fa0:	6978      	ldr	r0, [r7, #20]
 8014fa2:	f001 fd8b 	bl	8016abc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014fa6:	4b23      	ldr	r3, [pc, #140]	@ (8015034 <tcp_listen_input+0x1e4>)
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	89db      	ldrh	r3, [r3, #14]
 8014fac:	b29a      	uxth	r2, r3
 8014fae:	697b      	ldr	r3, [r7, #20]
 8014fb0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014fb4:	697b      	ldr	r3, [r7, #20]
 8014fb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014fba:	697b      	ldr	r3, [r7, #20]
 8014fbc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014fc0:	697b      	ldr	r3, [r7, #20]
 8014fc2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8014fc4:	697b      	ldr	r3, [r7, #20]
 8014fc6:	3304      	adds	r3, #4
 8014fc8:	4618      	mov	r0, r3
 8014fca:	f007 f9d9 	bl	801c380 <ip4_route>
 8014fce:	4601      	mov	r1, r0
 8014fd0:	697b      	ldr	r3, [r7, #20]
 8014fd2:	3304      	adds	r3, #4
 8014fd4:	461a      	mov	r2, r3
 8014fd6:	4620      	mov	r0, r4
 8014fd8:	f7ff fa30 	bl	801443c <tcp_eff_send_mss_netif>
 8014fdc:	4603      	mov	r3, r0
 8014fde:	461a      	mov	r2, r3
 8014fe0:	697b      	ldr	r3, [r7, #20]
 8014fe2:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014fe4:	2112      	movs	r1, #18
 8014fe6:	6978      	ldr	r0, [r7, #20]
 8014fe8:	f002 f83e 	bl	8017068 <tcp_enqueue_flags>
 8014fec:	4603      	mov	r3, r0
 8014fee:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d004      	beq.n	8015002 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014ff8:	2100      	movs	r1, #0
 8014ffa:	6978      	ldr	r0, [r7, #20]
 8014ffc:	f7fe f97c 	bl	80132f8 <tcp_abandon>
      return;
 8015000:	e006      	b.n	8015010 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8015002:	6978      	ldr	r0, [r7, #20]
 8015004:	f002 f91e 	bl	8017244 <tcp_output>
  return;
 8015008:	e001      	b.n	801500e <tcp_listen_input+0x1be>
    return;
 801500a:	bf00      	nop
 801500c:	e000      	b.n	8015010 <tcp_listen_input+0x1c0>
  return;
 801500e:	bf00      	nop
}
 8015010:	371c      	adds	r7, #28
 8015012:	46bd      	mov	sp, r7
 8015014:	bd90      	pop	{r4, r7, pc}
 8015016:	bf00      	nop
 8015018:	200047e0 	.word	0x200047e0
 801501c:	080216cc 	.word	0x080216cc
 8015020:	080218c4 	.word	0x080218c4
 8015024:	08021718 	.word	0x08021718
 8015028:	200047d8 	.word	0x200047d8
 801502c:	200047de 	.word	0x200047de
 8015030:	200047d4 	.word	0x200047d4
 8015034:	200047c4 	.word	0x200047c4
 8015038:	20004778 	.word	0x20004778
 801503c:	2000477c 	.word	0x2000477c
 8015040:	20004768 	.word	0x20004768
 8015044:	200047a8 	.word	0x200047a8
 8015048:	200047b0 	.word	0x200047b0

0801504c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	b086      	sub	sp, #24
 8015050:	af04      	add	r7, sp, #16
 8015052:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8015054:	4b2f      	ldr	r3, [pc, #188]	@ (8015114 <tcp_timewait_input+0xc8>)
 8015056:	781b      	ldrb	r3, [r3, #0]
 8015058:	f003 0304 	and.w	r3, r3, #4
 801505c:	2b00      	cmp	r3, #0
 801505e:	d153      	bne.n	8015108 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d106      	bne.n	8015074 <tcp_timewait_input+0x28>
 8015066:	4b2c      	ldr	r3, [pc, #176]	@ (8015118 <tcp_timewait_input+0xcc>)
 8015068:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801506c:	492b      	ldr	r1, [pc, #172]	@ (801511c <tcp_timewait_input+0xd0>)
 801506e:	482c      	ldr	r0, [pc, #176]	@ (8015120 <tcp_timewait_input+0xd4>)
 8015070:	f009 fcb6 	bl	801e9e0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8015074:	4b27      	ldr	r3, [pc, #156]	@ (8015114 <tcp_timewait_input+0xc8>)
 8015076:	781b      	ldrb	r3, [r3, #0]
 8015078:	f003 0302 	and.w	r3, r3, #2
 801507c:	2b00      	cmp	r3, #0
 801507e:	d02a      	beq.n	80150d6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015080:	4b28      	ldr	r3, [pc, #160]	@ (8015124 <tcp_timewait_input+0xd8>)
 8015082:	681a      	ldr	r2, [r3, #0]
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015088:	1ad3      	subs	r3, r2, r3
 801508a:	2b00      	cmp	r3, #0
 801508c:	db2d      	blt.n	80150ea <tcp_timewait_input+0x9e>
 801508e:	4b25      	ldr	r3, [pc, #148]	@ (8015124 <tcp_timewait_input+0xd8>)
 8015090:	681a      	ldr	r2, [r3, #0]
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015096:	6879      	ldr	r1, [r7, #4]
 8015098:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801509a:	440b      	add	r3, r1
 801509c:	1ad3      	subs	r3, r2, r3
 801509e:	2b00      	cmp	r3, #0
 80150a0:	dc23      	bgt.n	80150ea <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150a2:	4b21      	ldr	r3, [pc, #132]	@ (8015128 <tcp_timewait_input+0xdc>)
 80150a4:	6819      	ldr	r1, [r3, #0]
 80150a6:	4b21      	ldr	r3, [pc, #132]	@ (801512c <tcp_timewait_input+0xe0>)
 80150a8:	881b      	ldrh	r3, [r3, #0]
 80150aa:	461a      	mov	r2, r3
 80150ac:	4b1d      	ldr	r3, [pc, #116]	@ (8015124 <tcp_timewait_input+0xd8>)
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80150b2:	4b1f      	ldr	r3, [pc, #124]	@ (8015130 <tcp_timewait_input+0xe4>)
 80150b4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150b6:	885b      	ldrh	r3, [r3, #2]
 80150b8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80150ba:	4a1d      	ldr	r2, [pc, #116]	@ (8015130 <tcp_timewait_input+0xe4>)
 80150bc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150be:	8812      	ldrh	r2, [r2, #0]
 80150c0:	b292      	uxth	r2, r2
 80150c2:	9202      	str	r2, [sp, #8]
 80150c4:	9301      	str	r3, [sp, #4]
 80150c6:	4b1b      	ldr	r3, [pc, #108]	@ (8015134 <tcp_timewait_input+0xe8>)
 80150c8:	9300      	str	r3, [sp, #0]
 80150ca:	4b1b      	ldr	r3, [pc, #108]	@ (8015138 <tcp_timewait_input+0xec>)
 80150cc:	4602      	mov	r2, r0
 80150ce:	6878      	ldr	r0, [r7, #4]
 80150d0:	f002 fe6c 	bl	8017dac <tcp_rst>
      return;
 80150d4:	e01b      	b.n	801510e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80150d6:	4b0f      	ldr	r3, [pc, #60]	@ (8015114 <tcp_timewait_input+0xc8>)
 80150d8:	781b      	ldrb	r3, [r3, #0]
 80150da:	f003 0301 	and.w	r3, r3, #1
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d003      	beq.n	80150ea <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80150e2:	4b16      	ldr	r3, [pc, #88]	@ (801513c <tcp_timewait_input+0xf0>)
 80150e4:	681a      	ldr	r2, [r3, #0]
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80150ea:	4b10      	ldr	r3, [pc, #64]	@ (801512c <tcp_timewait_input+0xe0>)
 80150ec:	881b      	ldrh	r3, [r3, #0]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d00c      	beq.n	801510c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	8b5b      	ldrh	r3, [r3, #26]
 80150f6:	f043 0302 	orr.w	r3, r3, #2
 80150fa:	b29a      	uxth	r2, r3
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015100:	6878      	ldr	r0, [r7, #4]
 8015102:	f002 f89f 	bl	8017244 <tcp_output>
  }
  return;
 8015106:	e001      	b.n	801510c <tcp_timewait_input+0xc0>
    return;
 8015108:	bf00      	nop
 801510a:	e000      	b.n	801510e <tcp_timewait_input+0xc2>
  return;
 801510c:	bf00      	nop
}
 801510e:	3708      	adds	r7, #8
 8015110:	46bd      	mov	sp, r7
 8015112:	bd80      	pop	{r7, pc}
 8015114:	200047e0 	.word	0x200047e0
 8015118:	080216cc 	.word	0x080216cc
 801511c:	080218e4 	.word	0x080218e4
 8015120:	08021718 	.word	0x08021718
 8015124:	200047d4 	.word	0x200047d4
 8015128:	200047d8 	.word	0x200047d8
 801512c:	200047de 	.word	0x200047de
 8015130:	200047c4 	.word	0x200047c4
 8015134:	20004778 	.word	0x20004778
 8015138:	2000477c 	.word	0x2000477c
 801513c:	2000479c 	.word	0x2000479c

08015140 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8015140:	b590      	push	{r4, r7, lr}
 8015142:	b08d      	sub	sp, #52	@ 0x34
 8015144:	af04      	add	r7, sp, #16
 8015146:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8015148:	2300      	movs	r3, #0
 801514a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801514c:	2300      	movs	r3, #0
 801514e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	2b00      	cmp	r3, #0
 8015154:	d106      	bne.n	8015164 <tcp_process+0x24>
 8015156:	4b9d      	ldr	r3, [pc, #628]	@ (80153cc <tcp_process+0x28c>)
 8015158:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801515c:	499c      	ldr	r1, [pc, #624]	@ (80153d0 <tcp_process+0x290>)
 801515e:	489d      	ldr	r0, [pc, #628]	@ (80153d4 <tcp_process+0x294>)
 8015160:	f009 fc3e 	bl	801e9e0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015164:	4b9c      	ldr	r3, [pc, #624]	@ (80153d8 <tcp_process+0x298>)
 8015166:	781b      	ldrb	r3, [r3, #0]
 8015168:	f003 0304 	and.w	r3, r3, #4
 801516c:	2b00      	cmp	r3, #0
 801516e:	d04e      	beq.n	801520e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	7d1b      	ldrb	r3, [r3, #20]
 8015174:	2b02      	cmp	r3, #2
 8015176:	d108      	bne.n	801518a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801517c:	4b97      	ldr	r3, [pc, #604]	@ (80153dc <tcp_process+0x29c>)
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	429a      	cmp	r2, r3
 8015182:	d123      	bne.n	80151cc <tcp_process+0x8c>
        acceptable = 1;
 8015184:	2301      	movs	r3, #1
 8015186:	76fb      	strb	r3, [r7, #27]
 8015188:	e020      	b.n	80151cc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801518e:	4b94      	ldr	r3, [pc, #592]	@ (80153e0 <tcp_process+0x2a0>)
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	429a      	cmp	r2, r3
 8015194:	d102      	bne.n	801519c <tcp_process+0x5c>
        acceptable = 1;
 8015196:	2301      	movs	r3, #1
 8015198:	76fb      	strb	r3, [r7, #27]
 801519a:	e017      	b.n	80151cc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801519c:	4b90      	ldr	r3, [pc, #576]	@ (80153e0 <tcp_process+0x2a0>)
 801519e:	681a      	ldr	r2, [r3, #0]
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151a4:	1ad3      	subs	r3, r2, r3
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	db10      	blt.n	80151cc <tcp_process+0x8c>
 80151aa:	4b8d      	ldr	r3, [pc, #564]	@ (80153e0 <tcp_process+0x2a0>)
 80151ac:	681a      	ldr	r2, [r3, #0]
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151b2:	6879      	ldr	r1, [r7, #4]
 80151b4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80151b6:	440b      	add	r3, r1
 80151b8:	1ad3      	subs	r3, r2, r3
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	dc06      	bgt.n	80151cc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	8b5b      	ldrh	r3, [r3, #26]
 80151c2:	f043 0302 	orr.w	r3, r3, #2
 80151c6:	b29a      	uxth	r2, r3
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80151cc:	7efb      	ldrb	r3, [r7, #27]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d01b      	beq.n	801520a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	7d1b      	ldrb	r3, [r3, #20]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d106      	bne.n	80151e8 <tcp_process+0xa8>
 80151da:	4b7c      	ldr	r3, [pc, #496]	@ (80153cc <tcp_process+0x28c>)
 80151dc:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80151e0:	4980      	ldr	r1, [pc, #512]	@ (80153e4 <tcp_process+0x2a4>)
 80151e2:	487c      	ldr	r0, [pc, #496]	@ (80153d4 <tcp_process+0x294>)
 80151e4:	f009 fbfc 	bl	801e9e0 <iprintf>
      recv_flags |= TF_RESET;
 80151e8:	4b7f      	ldr	r3, [pc, #508]	@ (80153e8 <tcp_process+0x2a8>)
 80151ea:	781b      	ldrb	r3, [r3, #0]
 80151ec:	f043 0308 	orr.w	r3, r3, #8
 80151f0:	b2da      	uxtb	r2, r3
 80151f2:	4b7d      	ldr	r3, [pc, #500]	@ (80153e8 <tcp_process+0x2a8>)
 80151f4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	8b5b      	ldrh	r3, [r3, #26]
 80151fa:	f023 0301 	bic.w	r3, r3, #1
 80151fe:	b29a      	uxth	r2, r3
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015204:	f06f 030d 	mvn.w	r3, #13
 8015208:	e37a      	b.n	8015900 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801520a:	2300      	movs	r3, #0
 801520c:	e378      	b.n	8015900 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801520e:	4b72      	ldr	r3, [pc, #456]	@ (80153d8 <tcp_process+0x298>)
 8015210:	781b      	ldrb	r3, [r3, #0]
 8015212:	f003 0302 	and.w	r3, r3, #2
 8015216:	2b00      	cmp	r3, #0
 8015218:	d010      	beq.n	801523c <tcp_process+0xfc>
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	7d1b      	ldrb	r3, [r3, #20]
 801521e:	2b02      	cmp	r3, #2
 8015220:	d00c      	beq.n	801523c <tcp_process+0xfc>
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	7d1b      	ldrb	r3, [r3, #20]
 8015226:	2b03      	cmp	r3, #3
 8015228:	d008      	beq.n	801523c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	8b5b      	ldrh	r3, [r3, #26]
 801522e:	f043 0302 	orr.w	r3, r3, #2
 8015232:	b29a      	uxth	r2, r3
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015238:	2300      	movs	r3, #0
 801523a:	e361      	b.n	8015900 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	8b5b      	ldrh	r3, [r3, #26]
 8015240:	f003 0310 	and.w	r3, r3, #16
 8015244:	2b00      	cmp	r3, #0
 8015246:	d103      	bne.n	8015250 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015248:	4b68      	ldr	r3, [pc, #416]	@ (80153ec <tcp_process+0x2ac>)
 801524a:	681a      	ldr	r2, [r3, #0]
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	2200      	movs	r2, #0
 8015254:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	2200      	movs	r2, #0
 801525c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8015260:	6878      	ldr	r0, [r7, #4]
 8015262:	f001 fc2b 	bl	8016abc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	7d1b      	ldrb	r3, [r3, #20]
 801526a:	3b02      	subs	r3, #2
 801526c:	2b07      	cmp	r3, #7
 801526e:	f200 8337 	bhi.w	80158e0 <tcp_process+0x7a0>
 8015272:	a201      	add	r2, pc, #4	@ (adr r2, 8015278 <tcp_process+0x138>)
 8015274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015278:	08015299 	.word	0x08015299
 801527c:	080154c9 	.word	0x080154c9
 8015280:	08015641 	.word	0x08015641
 8015284:	0801566b 	.word	0x0801566b
 8015288:	0801578f 	.word	0x0801578f
 801528c:	08015641 	.word	0x08015641
 8015290:	0801581b 	.word	0x0801581b
 8015294:	080158ab 	.word	0x080158ab
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015298:	4b4f      	ldr	r3, [pc, #316]	@ (80153d8 <tcp_process+0x298>)
 801529a:	781b      	ldrb	r3, [r3, #0]
 801529c:	f003 0310 	and.w	r3, r3, #16
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	f000 80e4 	beq.w	801546e <tcp_process+0x32e>
 80152a6:	4b4c      	ldr	r3, [pc, #304]	@ (80153d8 <tcp_process+0x298>)
 80152a8:	781b      	ldrb	r3, [r3, #0]
 80152aa:	f003 0302 	and.w	r3, r3, #2
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	f000 80dd 	beq.w	801546e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80152b8:	1c5a      	adds	r2, r3, #1
 80152ba:	4b48      	ldr	r3, [pc, #288]	@ (80153dc <tcp_process+0x29c>)
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	429a      	cmp	r2, r3
 80152c0:	f040 80d5 	bne.w	801546e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80152c4:	4b46      	ldr	r3, [pc, #280]	@ (80153e0 <tcp_process+0x2a0>)
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	1c5a      	adds	r2, r3, #1
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80152d6:	4b41      	ldr	r3, [pc, #260]	@ (80153dc <tcp_process+0x29c>)
 80152d8:	681a      	ldr	r2, [r3, #0]
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80152de:	4b44      	ldr	r3, [pc, #272]	@ (80153f0 <tcp_process+0x2b0>)
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	89db      	ldrh	r3, [r3, #14]
 80152e4:	b29a      	uxth	r2, r3
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80152f8:	4b39      	ldr	r3, [pc, #228]	@ (80153e0 <tcp_process+0x2a0>)
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	1e5a      	subs	r2, r3, #1
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	2204      	movs	r2, #4
 8015306:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	3304      	adds	r3, #4
 8015310:	4618      	mov	r0, r3
 8015312:	f007 f835 	bl	801c380 <ip4_route>
 8015316:	4601      	mov	r1, r0
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	3304      	adds	r3, #4
 801531c:	461a      	mov	r2, r3
 801531e:	4620      	mov	r0, r4
 8015320:	f7ff f88c 	bl	801443c <tcp_eff_send_mss_netif>
 8015324:	4603      	mov	r3, r0
 8015326:	461a      	mov	r2, r3
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015330:	009a      	lsls	r2, r3, #2
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015336:	005b      	lsls	r3, r3, #1
 8015338:	f241 111c 	movw	r1, #4380	@ 0x111c
 801533c:	428b      	cmp	r3, r1
 801533e:	bf38      	it	cc
 8015340:	460b      	movcc	r3, r1
 8015342:	429a      	cmp	r2, r3
 8015344:	d204      	bcs.n	8015350 <tcp_process+0x210>
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801534a:	009b      	lsls	r3, r3, #2
 801534c:	b29b      	uxth	r3, r3
 801534e:	e00d      	b.n	801536c <tcp_process+0x22c>
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015354:	005b      	lsls	r3, r3, #1
 8015356:	f241 121c 	movw	r2, #4380	@ 0x111c
 801535a:	4293      	cmp	r3, r2
 801535c:	d904      	bls.n	8015368 <tcp_process+0x228>
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015362:	005b      	lsls	r3, r3, #1
 8015364:	b29b      	uxth	r3, r3
 8015366:	e001      	b.n	801536c <tcp_process+0x22c>
 8015368:	f241 131c 	movw	r3, #4380	@ 0x111c
 801536c:	687a      	ldr	r2, [r7, #4]
 801536e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015378:	2b00      	cmp	r3, #0
 801537a:	d106      	bne.n	801538a <tcp_process+0x24a>
 801537c:	4b13      	ldr	r3, [pc, #76]	@ (80153cc <tcp_process+0x28c>)
 801537e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8015382:	491c      	ldr	r1, [pc, #112]	@ (80153f4 <tcp_process+0x2b4>)
 8015384:	4813      	ldr	r0, [pc, #76]	@ (80153d4 <tcp_process+0x294>)
 8015386:	f009 fb2b 	bl	801e9e0 <iprintf>
        --pcb->snd_queuelen;
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015390:	3b01      	subs	r3, #1
 8015392:	b29a      	uxth	r2, r3
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801539e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80153a0:	69fb      	ldr	r3, [r7, #28]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d12a      	bne.n	80153fc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153aa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80153ac:	69fb      	ldr	r3, [r7, #28]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d106      	bne.n	80153c0 <tcp_process+0x280>
 80153b2:	4b06      	ldr	r3, [pc, #24]	@ (80153cc <tcp_process+0x28c>)
 80153b4:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80153b8:	490f      	ldr	r1, [pc, #60]	@ (80153f8 <tcp_process+0x2b8>)
 80153ba:	4806      	ldr	r0, [pc, #24]	@ (80153d4 <tcp_process+0x294>)
 80153bc:	f009 fb10 	bl	801e9e0 <iprintf>
          pcb->unsent = rseg->next;
 80153c0:	69fb      	ldr	r3, [r7, #28]
 80153c2:	681a      	ldr	r2, [r3, #0]
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	66da      	str	r2, [r3, #108]	@ 0x6c
 80153c8:	e01c      	b.n	8015404 <tcp_process+0x2c4>
 80153ca:	bf00      	nop
 80153cc:	080216cc 	.word	0x080216cc
 80153d0:	08021904 	.word	0x08021904
 80153d4:	08021718 	.word	0x08021718
 80153d8:	200047e0 	.word	0x200047e0
 80153dc:	200047d8 	.word	0x200047d8
 80153e0:	200047d4 	.word	0x200047d4
 80153e4:	08021920 	.word	0x08021920
 80153e8:	200047e1 	.word	0x200047e1
 80153ec:	2000479c 	.word	0x2000479c
 80153f0:	200047c4 	.word	0x200047c4
 80153f4:	08021940 	.word	0x08021940
 80153f8:	08021958 	.word	0x08021958
        } else {
          pcb->unacked = rseg->next;
 80153fc:	69fb      	ldr	r3, [r7, #28]
 80153fe:	681a      	ldr	r2, [r3, #0]
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8015404:	69f8      	ldr	r0, [r7, #28]
 8015406:	f7fe fd22 	bl	8013e4e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801540e:	2b00      	cmp	r3, #0
 8015410:	d104      	bne.n	801541c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015418:	861a      	strh	r2, [r3, #48]	@ 0x30
 801541a:	e006      	b.n	801542a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	2200      	movs	r2, #0
 8015420:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	2200      	movs	r2, #0
 8015426:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015430:	2b00      	cmp	r3, #0
 8015432:	d00a      	beq.n	801544a <tcp_process+0x30a>
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801543a:	687a      	ldr	r2, [r7, #4]
 801543c:	6910      	ldr	r0, [r2, #16]
 801543e:	2200      	movs	r2, #0
 8015440:	6879      	ldr	r1, [r7, #4]
 8015442:	4798      	blx	r3
 8015444:	4603      	mov	r3, r0
 8015446:	76bb      	strb	r3, [r7, #26]
 8015448:	e001      	b.n	801544e <tcp_process+0x30e>
 801544a:	2300      	movs	r3, #0
 801544c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801544e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015452:	f113 0f0d 	cmn.w	r3, #13
 8015456:	d102      	bne.n	801545e <tcp_process+0x31e>
          return ERR_ABRT;
 8015458:	f06f 030c 	mvn.w	r3, #12
 801545c:	e250      	b.n	8015900 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	8b5b      	ldrh	r3, [r3, #26]
 8015462:	f043 0302 	orr.w	r3, r3, #2
 8015466:	b29a      	uxth	r2, r3
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801546c:	e23a      	b.n	80158e4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801546e:	4b98      	ldr	r3, [pc, #608]	@ (80156d0 <tcp_process+0x590>)
 8015470:	781b      	ldrb	r3, [r3, #0]
 8015472:	f003 0310 	and.w	r3, r3, #16
 8015476:	2b00      	cmp	r3, #0
 8015478:	f000 8234 	beq.w	80158e4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801547c:	4b95      	ldr	r3, [pc, #596]	@ (80156d4 <tcp_process+0x594>)
 801547e:	6819      	ldr	r1, [r3, #0]
 8015480:	4b95      	ldr	r3, [pc, #596]	@ (80156d8 <tcp_process+0x598>)
 8015482:	881b      	ldrh	r3, [r3, #0]
 8015484:	461a      	mov	r2, r3
 8015486:	4b95      	ldr	r3, [pc, #596]	@ (80156dc <tcp_process+0x59c>)
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801548c:	4b94      	ldr	r3, [pc, #592]	@ (80156e0 <tcp_process+0x5a0>)
 801548e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015490:	885b      	ldrh	r3, [r3, #2]
 8015492:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015494:	4a92      	ldr	r2, [pc, #584]	@ (80156e0 <tcp_process+0x5a0>)
 8015496:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015498:	8812      	ldrh	r2, [r2, #0]
 801549a:	b292      	uxth	r2, r2
 801549c:	9202      	str	r2, [sp, #8]
 801549e:	9301      	str	r3, [sp, #4]
 80154a0:	4b90      	ldr	r3, [pc, #576]	@ (80156e4 <tcp_process+0x5a4>)
 80154a2:	9300      	str	r3, [sp, #0]
 80154a4:	4b90      	ldr	r3, [pc, #576]	@ (80156e8 <tcp_process+0x5a8>)
 80154a6:	4602      	mov	r2, r0
 80154a8:	6878      	ldr	r0, [r7, #4]
 80154aa:	f002 fc7f 	bl	8017dac <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80154b4:	2b05      	cmp	r3, #5
 80154b6:	f200 8215 	bhi.w	80158e4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	2200      	movs	r2, #0
 80154be:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80154c0:	6878      	ldr	r0, [r7, #4]
 80154c2:	f002 fa4b 	bl	801795c <tcp_rexmit_rto>
      break;
 80154c6:	e20d      	b.n	80158e4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80154c8:	4b81      	ldr	r3, [pc, #516]	@ (80156d0 <tcp_process+0x590>)
 80154ca:	781b      	ldrb	r3, [r3, #0]
 80154cc:	f003 0310 	and.w	r3, r3, #16
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	f000 80a1 	beq.w	8015618 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80154d6:	4b7f      	ldr	r3, [pc, #508]	@ (80156d4 <tcp_process+0x594>)
 80154d8:	681a      	ldr	r2, [r3, #0]
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80154de:	1ad3      	subs	r3, r2, r3
 80154e0:	3b01      	subs	r3, #1
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	db7e      	blt.n	80155e4 <tcp_process+0x4a4>
 80154e6:	4b7b      	ldr	r3, [pc, #492]	@ (80156d4 <tcp_process+0x594>)
 80154e8:	681a      	ldr	r2, [r3, #0]
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80154ee:	1ad3      	subs	r3, r2, r3
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	dc77      	bgt.n	80155e4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	2204      	movs	r2, #4
 80154f8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d102      	bne.n	8015508 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8015502:	23fa      	movs	r3, #250	@ 0xfa
 8015504:	76bb      	strb	r3, [r7, #26]
 8015506:	e01d      	b.n	8015544 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801550c:	699b      	ldr	r3, [r3, #24]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d106      	bne.n	8015520 <tcp_process+0x3e0>
 8015512:	4b76      	ldr	r3, [pc, #472]	@ (80156ec <tcp_process+0x5ac>)
 8015514:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8015518:	4975      	ldr	r1, [pc, #468]	@ (80156f0 <tcp_process+0x5b0>)
 801551a:	4876      	ldr	r0, [pc, #472]	@ (80156f4 <tcp_process+0x5b4>)
 801551c:	f009 fa60 	bl	801e9e0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015524:	699b      	ldr	r3, [r3, #24]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d00a      	beq.n	8015540 <tcp_process+0x400>
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801552e:	699b      	ldr	r3, [r3, #24]
 8015530:	687a      	ldr	r2, [r7, #4]
 8015532:	6910      	ldr	r0, [r2, #16]
 8015534:	2200      	movs	r2, #0
 8015536:	6879      	ldr	r1, [r7, #4]
 8015538:	4798      	blx	r3
 801553a:	4603      	mov	r3, r0
 801553c:	76bb      	strb	r3, [r7, #26]
 801553e:	e001      	b.n	8015544 <tcp_process+0x404>
 8015540:	23f0      	movs	r3, #240	@ 0xf0
 8015542:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8015544:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d00a      	beq.n	8015562 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801554c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015550:	f113 0f0d 	cmn.w	r3, #13
 8015554:	d002      	beq.n	801555c <tcp_process+0x41c>
              tcp_abort(pcb);
 8015556:	6878      	ldr	r0, [r7, #4]
 8015558:	f7fd ff8c 	bl	8013474 <tcp_abort>
            }
            return ERR_ABRT;
 801555c:	f06f 030c 	mvn.w	r3, #12
 8015560:	e1ce      	b.n	8015900 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8015562:	6878      	ldr	r0, [r7, #4]
 8015564:	f000 fae0 	bl	8015b28 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015568:	4b63      	ldr	r3, [pc, #396]	@ (80156f8 <tcp_process+0x5b8>)
 801556a:	881b      	ldrh	r3, [r3, #0]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d005      	beq.n	801557c <tcp_process+0x43c>
            recv_acked--;
 8015570:	4b61      	ldr	r3, [pc, #388]	@ (80156f8 <tcp_process+0x5b8>)
 8015572:	881b      	ldrh	r3, [r3, #0]
 8015574:	3b01      	subs	r3, #1
 8015576:	b29a      	uxth	r2, r3
 8015578:	4b5f      	ldr	r3, [pc, #380]	@ (80156f8 <tcp_process+0x5b8>)
 801557a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015580:	009a      	lsls	r2, r3, #2
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015586:	005b      	lsls	r3, r3, #1
 8015588:	f241 111c 	movw	r1, #4380	@ 0x111c
 801558c:	428b      	cmp	r3, r1
 801558e:	bf38      	it	cc
 8015590:	460b      	movcc	r3, r1
 8015592:	429a      	cmp	r2, r3
 8015594:	d204      	bcs.n	80155a0 <tcp_process+0x460>
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801559a:	009b      	lsls	r3, r3, #2
 801559c:	b29b      	uxth	r3, r3
 801559e:	e00d      	b.n	80155bc <tcp_process+0x47c>
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80155a4:	005b      	lsls	r3, r3, #1
 80155a6:	f241 121c 	movw	r2, #4380	@ 0x111c
 80155aa:	4293      	cmp	r3, r2
 80155ac:	d904      	bls.n	80155b8 <tcp_process+0x478>
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80155b2:	005b      	lsls	r3, r3, #1
 80155b4:	b29b      	uxth	r3, r3
 80155b6:	e001      	b.n	80155bc <tcp_process+0x47c>
 80155b8:	f241 131c 	movw	r3, #4380	@ 0x111c
 80155bc:	687a      	ldr	r2, [r7, #4]
 80155be:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80155c2:	4b4e      	ldr	r3, [pc, #312]	@ (80156fc <tcp_process+0x5bc>)
 80155c4:	781b      	ldrb	r3, [r3, #0]
 80155c6:	f003 0320 	and.w	r3, r3, #32
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d037      	beq.n	801563e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	8b5b      	ldrh	r3, [r3, #26]
 80155d2:	f043 0302 	orr.w	r3, r3, #2
 80155d6:	b29a      	uxth	r2, r3
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	2207      	movs	r2, #7
 80155e0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80155e2:	e02c      	b.n	801563e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80155e4:	4b3b      	ldr	r3, [pc, #236]	@ (80156d4 <tcp_process+0x594>)
 80155e6:	6819      	ldr	r1, [r3, #0]
 80155e8:	4b3b      	ldr	r3, [pc, #236]	@ (80156d8 <tcp_process+0x598>)
 80155ea:	881b      	ldrh	r3, [r3, #0]
 80155ec:	461a      	mov	r2, r3
 80155ee:	4b3b      	ldr	r3, [pc, #236]	@ (80156dc <tcp_process+0x59c>)
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80155f4:	4b3a      	ldr	r3, [pc, #232]	@ (80156e0 <tcp_process+0x5a0>)
 80155f6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80155f8:	885b      	ldrh	r3, [r3, #2]
 80155fa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80155fc:	4a38      	ldr	r2, [pc, #224]	@ (80156e0 <tcp_process+0x5a0>)
 80155fe:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015600:	8812      	ldrh	r2, [r2, #0]
 8015602:	b292      	uxth	r2, r2
 8015604:	9202      	str	r2, [sp, #8]
 8015606:	9301      	str	r3, [sp, #4]
 8015608:	4b36      	ldr	r3, [pc, #216]	@ (80156e4 <tcp_process+0x5a4>)
 801560a:	9300      	str	r3, [sp, #0]
 801560c:	4b36      	ldr	r3, [pc, #216]	@ (80156e8 <tcp_process+0x5a8>)
 801560e:	4602      	mov	r2, r0
 8015610:	6878      	ldr	r0, [r7, #4]
 8015612:	f002 fbcb 	bl	8017dac <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8015616:	e167      	b.n	80158e8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8015618:	4b2d      	ldr	r3, [pc, #180]	@ (80156d0 <tcp_process+0x590>)
 801561a:	781b      	ldrb	r3, [r3, #0]
 801561c:	f003 0302 	and.w	r3, r3, #2
 8015620:	2b00      	cmp	r3, #0
 8015622:	f000 8161 	beq.w	80158e8 <tcp_process+0x7a8>
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801562a:	1e5a      	subs	r2, r3, #1
 801562c:	4b2b      	ldr	r3, [pc, #172]	@ (80156dc <tcp_process+0x59c>)
 801562e:	681b      	ldr	r3, [r3, #0]
 8015630:	429a      	cmp	r2, r3
 8015632:	f040 8159 	bne.w	80158e8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8015636:	6878      	ldr	r0, [r7, #4]
 8015638:	f002 f9b2 	bl	80179a0 <tcp_rexmit>
      break;
 801563c:	e154      	b.n	80158e8 <tcp_process+0x7a8>
 801563e:	e153      	b.n	80158e8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8015640:	6878      	ldr	r0, [r7, #4]
 8015642:	f000 fa71 	bl	8015b28 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8015646:	4b2d      	ldr	r3, [pc, #180]	@ (80156fc <tcp_process+0x5bc>)
 8015648:	781b      	ldrb	r3, [r3, #0]
 801564a:	f003 0320 	and.w	r3, r3, #32
 801564e:	2b00      	cmp	r3, #0
 8015650:	f000 814c 	beq.w	80158ec <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	8b5b      	ldrh	r3, [r3, #26]
 8015658:	f043 0302 	orr.w	r3, r3, #2
 801565c:	b29a      	uxth	r2, r3
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	2207      	movs	r2, #7
 8015666:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015668:	e140      	b.n	80158ec <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801566a:	6878      	ldr	r0, [r7, #4]
 801566c:	f000 fa5c 	bl	8015b28 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015670:	4b22      	ldr	r3, [pc, #136]	@ (80156fc <tcp_process+0x5bc>)
 8015672:	781b      	ldrb	r3, [r3, #0]
 8015674:	f003 0320 	and.w	r3, r3, #32
 8015678:	2b00      	cmp	r3, #0
 801567a:	d071      	beq.n	8015760 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801567c:	4b14      	ldr	r3, [pc, #80]	@ (80156d0 <tcp_process+0x590>)
 801567e:	781b      	ldrb	r3, [r3, #0]
 8015680:	f003 0310 	and.w	r3, r3, #16
 8015684:	2b00      	cmp	r3, #0
 8015686:	d060      	beq.n	801574a <tcp_process+0x60a>
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801568c:	4b11      	ldr	r3, [pc, #68]	@ (80156d4 <tcp_process+0x594>)
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	429a      	cmp	r2, r3
 8015692:	d15a      	bne.n	801574a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015698:	2b00      	cmp	r3, #0
 801569a:	d156      	bne.n	801574a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	8b5b      	ldrh	r3, [r3, #26]
 80156a0:	f043 0302 	orr.w	r3, r3, #2
 80156a4:	b29a      	uxth	r2, r3
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80156aa:	6878      	ldr	r0, [r7, #4]
 80156ac:	f7fe fdbc 	bl	8014228 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80156b0:	4b13      	ldr	r3, [pc, #76]	@ (8015700 <tcp_process+0x5c0>)
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	687a      	ldr	r2, [r7, #4]
 80156b6:	429a      	cmp	r2, r3
 80156b8:	d105      	bne.n	80156c6 <tcp_process+0x586>
 80156ba:	4b11      	ldr	r3, [pc, #68]	@ (8015700 <tcp_process+0x5c0>)
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	68db      	ldr	r3, [r3, #12]
 80156c0:	4a0f      	ldr	r2, [pc, #60]	@ (8015700 <tcp_process+0x5c0>)
 80156c2:	6013      	str	r3, [r2, #0]
 80156c4:	e02e      	b.n	8015724 <tcp_process+0x5e4>
 80156c6:	4b0e      	ldr	r3, [pc, #56]	@ (8015700 <tcp_process+0x5c0>)
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	617b      	str	r3, [r7, #20]
 80156cc:	e027      	b.n	801571e <tcp_process+0x5de>
 80156ce:	bf00      	nop
 80156d0:	200047e0 	.word	0x200047e0
 80156d4:	200047d8 	.word	0x200047d8
 80156d8:	200047de 	.word	0x200047de
 80156dc:	200047d4 	.word	0x200047d4
 80156e0:	200047c4 	.word	0x200047c4
 80156e4:	20004778 	.word	0x20004778
 80156e8:	2000477c 	.word	0x2000477c
 80156ec:	080216cc 	.word	0x080216cc
 80156f0:	0802196c 	.word	0x0802196c
 80156f4:	08021718 	.word	0x08021718
 80156f8:	200047dc 	.word	0x200047dc
 80156fc:	200047e1 	.word	0x200047e1
 8015700:	200047a8 	.word	0x200047a8
 8015704:	697b      	ldr	r3, [r7, #20]
 8015706:	68db      	ldr	r3, [r3, #12]
 8015708:	687a      	ldr	r2, [r7, #4]
 801570a:	429a      	cmp	r2, r3
 801570c:	d104      	bne.n	8015718 <tcp_process+0x5d8>
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	68da      	ldr	r2, [r3, #12]
 8015712:	697b      	ldr	r3, [r7, #20]
 8015714:	60da      	str	r2, [r3, #12]
 8015716:	e005      	b.n	8015724 <tcp_process+0x5e4>
 8015718:	697b      	ldr	r3, [r7, #20]
 801571a:	68db      	ldr	r3, [r3, #12]
 801571c:	617b      	str	r3, [r7, #20]
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	2b00      	cmp	r3, #0
 8015722:	d1ef      	bne.n	8015704 <tcp_process+0x5c4>
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	2200      	movs	r2, #0
 8015728:	60da      	str	r2, [r3, #12]
 801572a:	4b77      	ldr	r3, [pc, #476]	@ (8015908 <tcp_process+0x7c8>)
 801572c:	2201      	movs	r2, #1
 801572e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	220a      	movs	r2, #10
 8015734:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8015736:	4b75      	ldr	r3, [pc, #468]	@ (801590c <tcp_process+0x7cc>)
 8015738:	681a      	ldr	r2, [r3, #0]
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	60da      	str	r2, [r3, #12]
 801573e:	4a73      	ldr	r2, [pc, #460]	@ (801590c <tcp_process+0x7cc>)
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	6013      	str	r3, [r2, #0]
 8015744:	f002 fcf4 	bl	8018130 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8015748:	e0d2      	b.n	80158f0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	8b5b      	ldrh	r3, [r3, #26]
 801574e:	f043 0302 	orr.w	r3, r3, #2
 8015752:	b29a      	uxth	r2, r3
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	2208      	movs	r2, #8
 801575c:	751a      	strb	r2, [r3, #20]
      break;
 801575e:	e0c7      	b.n	80158f0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015760:	4b6b      	ldr	r3, [pc, #428]	@ (8015910 <tcp_process+0x7d0>)
 8015762:	781b      	ldrb	r3, [r3, #0]
 8015764:	f003 0310 	and.w	r3, r3, #16
 8015768:	2b00      	cmp	r3, #0
 801576a:	f000 80c1 	beq.w	80158f0 <tcp_process+0x7b0>
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015772:	4b68      	ldr	r3, [pc, #416]	@ (8015914 <tcp_process+0x7d4>)
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	429a      	cmp	r2, r3
 8015778:	f040 80ba 	bne.w	80158f0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015780:	2b00      	cmp	r3, #0
 8015782:	f040 80b5 	bne.w	80158f0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	2206      	movs	r2, #6
 801578a:	751a      	strb	r2, [r3, #20]
      break;
 801578c:	e0b0      	b.n	80158f0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801578e:	6878      	ldr	r0, [r7, #4]
 8015790:	f000 f9ca 	bl	8015b28 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015794:	4b60      	ldr	r3, [pc, #384]	@ (8015918 <tcp_process+0x7d8>)
 8015796:	781b      	ldrb	r3, [r3, #0]
 8015798:	f003 0320 	and.w	r3, r3, #32
 801579c:	2b00      	cmp	r3, #0
 801579e:	f000 80a9 	beq.w	80158f4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	8b5b      	ldrh	r3, [r3, #26]
 80157a6:	f043 0302 	orr.w	r3, r3, #2
 80157aa:	b29a      	uxth	r2, r3
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80157b0:	6878      	ldr	r0, [r7, #4]
 80157b2:	f7fe fd39 	bl	8014228 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80157b6:	4b59      	ldr	r3, [pc, #356]	@ (801591c <tcp_process+0x7dc>)
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	687a      	ldr	r2, [r7, #4]
 80157bc:	429a      	cmp	r2, r3
 80157be:	d105      	bne.n	80157cc <tcp_process+0x68c>
 80157c0:	4b56      	ldr	r3, [pc, #344]	@ (801591c <tcp_process+0x7dc>)
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	68db      	ldr	r3, [r3, #12]
 80157c6:	4a55      	ldr	r2, [pc, #340]	@ (801591c <tcp_process+0x7dc>)
 80157c8:	6013      	str	r3, [r2, #0]
 80157ca:	e013      	b.n	80157f4 <tcp_process+0x6b4>
 80157cc:	4b53      	ldr	r3, [pc, #332]	@ (801591c <tcp_process+0x7dc>)
 80157ce:	681b      	ldr	r3, [r3, #0]
 80157d0:	613b      	str	r3, [r7, #16]
 80157d2:	e00c      	b.n	80157ee <tcp_process+0x6ae>
 80157d4:	693b      	ldr	r3, [r7, #16]
 80157d6:	68db      	ldr	r3, [r3, #12]
 80157d8:	687a      	ldr	r2, [r7, #4]
 80157da:	429a      	cmp	r2, r3
 80157dc:	d104      	bne.n	80157e8 <tcp_process+0x6a8>
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	68da      	ldr	r2, [r3, #12]
 80157e2:	693b      	ldr	r3, [r7, #16]
 80157e4:	60da      	str	r2, [r3, #12]
 80157e6:	e005      	b.n	80157f4 <tcp_process+0x6b4>
 80157e8:	693b      	ldr	r3, [r7, #16]
 80157ea:	68db      	ldr	r3, [r3, #12]
 80157ec:	613b      	str	r3, [r7, #16]
 80157ee:	693b      	ldr	r3, [r7, #16]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d1ef      	bne.n	80157d4 <tcp_process+0x694>
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	2200      	movs	r2, #0
 80157f8:	60da      	str	r2, [r3, #12]
 80157fa:	4b43      	ldr	r3, [pc, #268]	@ (8015908 <tcp_process+0x7c8>)
 80157fc:	2201      	movs	r2, #1
 80157fe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	220a      	movs	r2, #10
 8015804:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015806:	4b41      	ldr	r3, [pc, #260]	@ (801590c <tcp_process+0x7cc>)
 8015808:	681a      	ldr	r2, [r3, #0]
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	60da      	str	r2, [r3, #12]
 801580e:	4a3f      	ldr	r2, [pc, #252]	@ (801590c <tcp_process+0x7cc>)
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	6013      	str	r3, [r2, #0]
 8015814:	f002 fc8c 	bl	8018130 <tcp_timer_needed>
      }
      break;
 8015818:	e06c      	b.n	80158f4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801581a:	6878      	ldr	r0, [r7, #4]
 801581c:	f000 f984 	bl	8015b28 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015820:	4b3b      	ldr	r3, [pc, #236]	@ (8015910 <tcp_process+0x7d0>)
 8015822:	781b      	ldrb	r3, [r3, #0]
 8015824:	f003 0310 	and.w	r3, r3, #16
 8015828:	2b00      	cmp	r3, #0
 801582a:	d065      	beq.n	80158f8 <tcp_process+0x7b8>
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015830:	4b38      	ldr	r3, [pc, #224]	@ (8015914 <tcp_process+0x7d4>)
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	429a      	cmp	r2, r3
 8015836:	d15f      	bne.n	80158f8 <tcp_process+0x7b8>
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801583c:	2b00      	cmp	r3, #0
 801583e:	d15b      	bne.n	80158f8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8015840:	6878      	ldr	r0, [r7, #4]
 8015842:	f7fe fcf1 	bl	8014228 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8015846:	4b35      	ldr	r3, [pc, #212]	@ (801591c <tcp_process+0x7dc>)
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	687a      	ldr	r2, [r7, #4]
 801584c:	429a      	cmp	r2, r3
 801584e:	d105      	bne.n	801585c <tcp_process+0x71c>
 8015850:	4b32      	ldr	r3, [pc, #200]	@ (801591c <tcp_process+0x7dc>)
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	68db      	ldr	r3, [r3, #12]
 8015856:	4a31      	ldr	r2, [pc, #196]	@ (801591c <tcp_process+0x7dc>)
 8015858:	6013      	str	r3, [r2, #0]
 801585a:	e013      	b.n	8015884 <tcp_process+0x744>
 801585c:	4b2f      	ldr	r3, [pc, #188]	@ (801591c <tcp_process+0x7dc>)
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	60fb      	str	r3, [r7, #12]
 8015862:	e00c      	b.n	801587e <tcp_process+0x73e>
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	68db      	ldr	r3, [r3, #12]
 8015868:	687a      	ldr	r2, [r7, #4]
 801586a:	429a      	cmp	r2, r3
 801586c:	d104      	bne.n	8015878 <tcp_process+0x738>
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	68da      	ldr	r2, [r3, #12]
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	60da      	str	r2, [r3, #12]
 8015876:	e005      	b.n	8015884 <tcp_process+0x744>
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	68db      	ldr	r3, [r3, #12]
 801587c:	60fb      	str	r3, [r7, #12]
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d1ef      	bne.n	8015864 <tcp_process+0x724>
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	2200      	movs	r2, #0
 8015888:	60da      	str	r2, [r3, #12]
 801588a:	4b1f      	ldr	r3, [pc, #124]	@ (8015908 <tcp_process+0x7c8>)
 801588c:	2201      	movs	r2, #1
 801588e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	220a      	movs	r2, #10
 8015894:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015896:	4b1d      	ldr	r3, [pc, #116]	@ (801590c <tcp_process+0x7cc>)
 8015898:	681a      	ldr	r2, [r3, #0]
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	60da      	str	r2, [r3, #12]
 801589e:	4a1b      	ldr	r2, [pc, #108]	@ (801590c <tcp_process+0x7cc>)
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	6013      	str	r3, [r2, #0]
 80158a4:	f002 fc44 	bl	8018130 <tcp_timer_needed>
      }
      break;
 80158a8:	e026      	b.n	80158f8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80158aa:	6878      	ldr	r0, [r7, #4]
 80158ac:	f000 f93c 	bl	8015b28 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80158b0:	4b17      	ldr	r3, [pc, #92]	@ (8015910 <tcp_process+0x7d0>)
 80158b2:	781b      	ldrb	r3, [r3, #0]
 80158b4:	f003 0310 	and.w	r3, r3, #16
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d01f      	beq.n	80158fc <tcp_process+0x7bc>
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80158c0:	4b14      	ldr	r3, [pc, #80]	@ (8015914 <tcp_process+0x7d4>)
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	429a      	cmp	r2, r3
 80158c6:	d119      	bne.n	80158fc <tcp_process+0x7bc>
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d115      	bne.n	80158fc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80158d0:	4b11      	ldr	r3, [pc, #68]	@ (8015918 <tcp_process+0x7d8>)
 80158d2:	781b      	ldrb	r3, [r3, #0]
 80158d4:	f043 0310 	orr.w	r3, r3, #16
 80158d8:	b2da      	uxtb	r2, r3
 80158da:	4b0f      	ldr	r3, [pc, #60]	@ (8015918 <tcp_process+0x7d8>)
 80158dc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80158de:	e00d      	b.n	80158fc <tcp_process+0x7bc>
    default:
      break;
 80158e0:	bf00      	nop
 80158e2:	e00c      	b.n	80158fe <tcp_process+0x7be>
      break;
 80158e4:	bf00      	nop
 80158e6:	e00a      	b.n	80158fe <tcp_process+0x7be>
      break;
 80158e8:	bf00      	nop
 80158ea:	e008      	b.n	80158fe <tcp_process+0x7be>
      break;
 80158ec:	bf00      	nop
 80158ee:	e006      	b.n	80158fe <tcp_process+0x7be>
      break;
 80158f0:	bf00      	nop
 80158f2:	e004      	b.n	80158fe <tcp_process+0x7be>
      break;
 80158f4:	bf00      	nop
 80158f6:	e002      	b.n	80158fe <tcp_process+0x7be>
      break;
 80158f8:	bf00      	nop
 80158fa:	e000      	b.n	80158fe <tcp_process+0x7be>
      break;
 80158fc:	bf00      	nop
  }
  return ERR_OK;
 80158fe:	2300      	movs	r3, #0
}
 8015900:	4618      	mov	r0, r3
 8015902:	3724      	adds	r7, #36	@ 0x24
 8015904:	46bd      	mov	sp, r7
 8015906:	bd90      	pop	{r4, r7, pc}
 8015908:	200047b0 	.word	0x200047b0
 801590c:	200047ac 	.word	0x200047ac
 8015910:	200047e0 	.word	0x200047e0
 8015914:	200047d8 	.word	0x200047d8
 8015918:	200047e1 	.word	0x200047e1
 801591c:	200047a8 	.word	0x200047a8

08015920 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8015920:	b590      	push	{r4, r7, lr}
 8015922:	b085      	sub	sp, #20
 8015924:	af00      	add	r7, sp, #0
 8015926:	6078      	str	r0, [r7, #4]
 8015928:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d106      	bne.n	801593e <tcp_oos_insert_segment+0x1e>
 8015930:	4b3b      	ldr	r3, [pc, #236]	@ (8015a20 <tcp_oos_insert_segment+0x100>)
 8015932:	f240 421f 	movw	r2, #1055	@ 0x41f
 8015936:	493b      	ldr	r1, [pc, #236]	@ (8015a24 <tcp_oos_insert_segment+0x104>)
 8015938:	483b      	ldr	r0, [pc, #236]	@ (8015a28 <tcp_oos_insert_segment+0x108>)
 801593a:	f009 f851 	bl	801e9e0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	68db      	ldr	r3, [r3, #12]
 8015942:	899b      	ldrh	r3, [r3, #12]
 8015944:	b29b      	uxth	r3, r3
 8015946:	4618      	mov	r0, r3
 8015948:	f7fb f8d6 	bl	8010af8 <lwip_htons>
 801594c:	4603      	mov	r3, r0
 801594e:	b2db      	uxtb	r3, r3
 8015950:	f003 0301 	and.w	r3, r3, #1
 8015954:	2b00      	cmp	r3, #0
 8015956:	d028      	beq.n	80159aa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8015958:	6838      	ldr	r0, [r7, #0]
 801595a:	f7fe fa63 	bl	8013e24 <tcp_segs_free>
    next = NULL;
 801595e:	2300      	movs	r3, #0
 8015960:	603b      	str	r3, [r7, #0]
 8015962:	e056      	b.n	8015a12 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015964:	683b      	ldr	r3, [r7, #0]
 8015966:	68db      	ldr	r3, [r3, #12]
 8015968:	899b      	ldrh	r3, [r3, #12]
 801596a:	b29b      	uxth	r3, r3
 801596c:	4618      	mov	r0, r3
 801596e:	f7fb f8c3 	bl	8010af8 <lwip_htons>
 8015972:	4603      	mov	r3, r0
 8015974:	b2db      	uxtb	r3, r3
 8015976:	f003 0301 	and.w	r3, r3, #1
 801597a:	2b00      	cmp	r3, #0
 801597c:	d00d      	beq.n	801599a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	68db      	ldr	r3, [r3, #12]
 8015982:	899b      	ldrh	r3, [r3, #12]
 8015984:	b29c      	uxth	r4, r3
 8015986:	2001      	movs	r0, #1
 8015988:	f7fb f8b6 	bl	8010af8 <lwip_htons>
 801598c:	4603      	mov	r3, r0
 801598e:	461a      	mov	r2, r3
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	68db      	ldr	r3, [r3, #12]
 8015994:	4322      	orrs	r2, r4
 8015996:	b292      	uxth	r2, r2
 8015998:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801599a:	683b      	ldr	r3, [r7, #0]
 801599c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801599e:	683b      	ldr	r3, [r7, #0]
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80159a4:	68f8      	ldr	r0, [r7, #12]
 80159a6:	f7fe fa52 	bl	8013e4e <tcp_seg_free>
    while (next &&
 80159aa:	683b      	ldr	r3, [r7, #0]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d00e      	beq.n	80159ce <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	891b      	ldrh	r3, [r3, #8]
 80159b4:	461a      	mov	r2, r3
 80159b6:	4b1d      	ldr	r3, [pc, #116]	@ (8015a2c <tcp_oos_insert_segment+0x10c>)
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	441a      	add	r2, r3
 80159bc:	683b      	ldr	r3, [r7, #0]
 80159be:	68db      	ldr	r3, [r3, #12]
 80159c0:	685b      	ldr	r3, [r3, #4]
 80159c2:	6839      	ldr	r1, [r7, #0]
 80159c4:	8909      	ldrh	r1, [r1, #8]
 80159c6:	440b      	add	r3, r1
 80159c8:	1ad3      	subs	r3, r2, r3
    while (next &&
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	daca      	bge.n	8015964 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d01e      	beq.n	8015a12 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	891b      	ldrh	r3, [r3, #8]
 80159d8:	461a      	mov	r2, r3
 80159da:	4b14      	ldr	r3, [pc, #80]	@ (8015a2c <tcp_oos_insert_segment+0x10c>)
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	441a      	add	r2, r3
 80159e0:	683b      	ldr	r3, [r7, #0]
 80159e2:	68db      	ldr	r3, [r3, #12]
 80159e4:	685b      	ldr	r3, [r3, #4]
 80159e6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	dd12      	ble.n	8015a12 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80159ec:	683b      	ldr	r3, [r7, #0]
 80159ee:	68db      	ldr	r3, [r3, #12]
 80159f0:	685b      	ldr	r3, [r3, #4]
 80159f2:	b29a      	uxth	r2, r3
 80159f4:	4b0d      	ldr	r3, [pc, #52]	@ (8015a2c <tcp_oos_insert_segment+0x10c>)
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	b29b      	uxth	r3, r3
 80159fa:	1ad3      	subs	r3, r2, r3
 80159fc:	b29a      	uxth	r2, r3
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	685a      	ldr	r2, [r3, #4]
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	891b      	ldrh	r3, [r3, #8]
 8015a0a:	4619      	mov	r1, r3
 8015a0c:	4610      	mov	r0, r2
 8015a0e:	f7fc fc41 	bl	8012294 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	683a      	ldr	r2, [r7, #0]
 8015a16:	601a      	str	r2, [r3, #0]
}
 8015a18:	bf00      	nop
 8015a1a:	3714      	adds	r7, #20
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	bd90      	pop	{r4, r7, pc}
 8015a20:	080216cc 	.word	0x080216cc
 8015a24:	0802198c 	.word	0x0802198c
 8015a28:	08021718 	.word	0x08021718
 8015a2c:	200047d4 	.word	0x200047d4

08015a30 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8015a30:	b5b0      	push	{r4, r5, r7, lr}
 8015a32:	b086      	sub	sp, #24
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	60f8      	str	r0, [r7, #12]
 8015a38:	60b9      	str	r1, [r7, #8]
 8015a3a:	607a      	str	r2, [r7, #4]
 8015a3c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8015a3e:	e03e      	b.n	8015abe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8015a40:	68bb      	ldr	r3, [r7, #8]
 8015a42:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8015a44:	68bb      	ldr	r3, [r7, #8]
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8015a4a:	697b      	ldr	r3, [r7, #20]
 8015a4c:	685b      	ldr	r3, [r3, #4]
 8015a4e:	4618      	mov	r0, r3
 8015a50:	f7fc fe34 	bl	80126bc <pbuf_clen>
 8015a54:	4603      	mov	r3, r0
 8015a56:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015a5e:	8a7a      	ldrh	r2, [r7, #18]
 8015a60:	429a      	cmp	r2, r3
 8015a62:	d906      	bls.n	8015a72 <tcp_free_acked_segments+0x42>
 8015a64:	4b2a      	ldr	r3, [pc, #168]	@ (8015b10 <tcp_free_acked_segments+0xe0>)
 8015a66:	f240 4257 	movw	r2, #1111	@ 0x457
 8015a6a:	492a      	ldr	r1, [pc, #168]	@ (8015b14 <tcp_free_acked_segments+0xe4>)
 8015a6c:	482a      	ldr	r0, [pc, #168]	@ (8015b18 <tcp_free_acked_segments+0xe8>)
 8015a6e:	f008 ffb7 	bl	801e9e0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8015a78:	8a7b      	ldrh	r3, [r7, #18]
 8015a7a:	1ad3      	subs	r3, r2, r3
 8015a7c:	b29a      	uxth	r2, r3
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8015a84:	697b      	ldr	r3, [r7, #20]
 8015a86:	891a      	ldrh	r2, [r3, #8]
 8015a88:	4b24      	ldr	r3, [pc, #144]	@ (8015b1c <tcp_free_acked_segments+0xec>)
 8015a8a:	881b      	ldrh	r3, [r3, #0]
 8015a8c:	4413      	add	r3, r2
 8015a8e:	b29a      	uxth	r2, r3
 8015a90:	4b22      	ldr	r3, [pc, #136]	@ (8015b1c <tcp_free_acked_segments+0xec>)
 8015a92:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8015a94:	6978      	ldr	r0, [r7, #20]
 8015a96:	f7fe f9da 	bl	8013e4e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d00c      	beq.n	8015abe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8015aa4:	68bb      	ldr	r3, [r7, #8]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d109      	bne.n	8015abe <tcp_free_acked_segments+0x8e>
 8015aaa:	683b      	ldr	r3, [r7, #0]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d106      	bne.n	8015abe <tcp_free_acked_segments+0x8e>
 8015ab0:	4b17      	ldr	r3, [pc, #92]	@ (8015b10 <tcp_free_acked_segments+0xe0>)
 8015ab2:	f240 4261 	movw	r2, #1121	@ 0x461
 8015ab6:	491a      	ldr	r1, [pc, #104]	@ (8015b20 <tcp_free_acked_segments+0xf0>)
 8015ab8:	4817      	ldr	r0, [pc, #92]	@ (8015b18 <tcp_free_acked_segments+0xe8>)
 8015aba:	f008 ff91 	bl	801e9e0 <iprintf>
  while (seg_list != NULL &&
 8015abe:	68bb      	ldr	r3, [r7, #8]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d020      	beq.n	8015b06 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8015ac4:	68bb      	ldr	r3, [r7, #8]
 8015ac6:	68db      	ldr	r3, [r3, #12]
 8015ac8:	685b      	ldr	r3, [r3, #4]
 8015aca:	4618      	mov	r0, r3
 8015acc:	f7fb f82a 	bl	8010b24 <lwip_htonl>
 8015ad0:	4604      	mov	r4, r0
 8015ad2:	68bb      	ldr	r3, [r7, #8]
 8015ad4:	891b      	ldrh	r3, [r3, #8]
 8015ad6:	461d      	mov	r5, r3
 8015ad8:	68bb      	ldr	r3, [r7, #8]
 8015ada:	68db      	ldr	r3, [r3, #12]
 8015adc:	899b      	ldrh	r3, [r3, #12]
 8015ade:	b29b      	uxth	r3, r3
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	f7fb f809 	bl	8010af8 <lwip_htons>
 8015ae6:	4603      	mov	r3, r0
 8015ae8:	b2db      	uxtb	r3, r3
 8015aea:	f003 0303 	and.w	r3, r3, #3
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d001      	beq.n	8015af6 <tcp_free_acked_segments+0xc6>
 8015af2:	2301      	movs	r3, #1
 8015af4:	e000      	b.n	8015af8 <tcp_free_acked_segments+0xc8>
 8015af6:	2300      	movs	r3, #0
 8015af8:	442b      	add	r3, r5
 8015afa:	18e2      	adds	r2, r4, r3
 8015afc:	4b09      	ldr	r3, [pc, #36]	@ (8015b24 <tcp_free_acked_segments+0xf4>)
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	dd9c      	ble.n	8015a40 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8015b06:	68bb      	ldr	r3, [r7, #8]
}
 8015b08:	4618      	mov	r0, r3
 8015b0a:	3718      	adds	r7, #24
 8015b0c:	46bd      	mov	sp, r7
 8015b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8015b10:	080216cc 	.word	0x080216cc
 8015b14:	080219b4 	.word	0x080219b4
 8015b18:	08021718 	.word	0x08021718
 8015b1c:	200047dc 	.word	0x200047dc
 8015b20:	080219dc 	.word	0x080219dc
 8015b24:	200047d8 	.word	0x200047d8

08015b28 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8015b28:	b5b0      	push	{r4, r5, r7, lr}
 8015b2a:	b094      	sub	sp, #80	@ 0x50
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8015b30:	2300      	movs	r3, #0
 8015b32:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d106      	bne.n	8015b48 <tcp_receive+0x20>
 8015b3a:	4b91      	ldr	r3, [pc, #580]	@ (8015d80 <tcp_receive+0x258>)
 8015b3c:	f240 427b 	movw	r2, #1147	@ 0x47b
 8015b40:	4990      	ldr	r1, [pc, #576]	@ (8015d84 <tcp_receive+0x25c>)
 8015b42:	4891      	ldr	r0, [pc, #580]	@ (8015d88 <tcp_receive+0x260>)
 8015b44:	f008 ff4c 	bl	801e9e0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	7d1b      	ldrb	r3, [r3, #20]
 8015b4c:	2b03      	cmp	r3, #3
 8015b4e:	d806      	bhi.n	8015b5e <tcp_receive+0x36>
 8015b50:	4b8b      	ldr	r3, [pc, #556]	@ (8015d80 <tcp_receive+0x258>)
 8015b52:	f240 427c 	movw	r2, #1148	@ 0x47c
 8015b56:	498d      	ldr	r1, [pc, #564]	@ (8015d8c <tcp_receive+0x264>)
 8015b58:	488b      	ldr	r0, [pc, #556]	@ (8015d88 <tcp_receive+0x260>)
 8015b5a:	f008 ff41 	bl	801e9e0 <iprintf>

  if (flags & TCP_ACK) {
 8015b5e:	4b8c      	ldr	r3, [pc, #560]	@ (8015d90 <tcp_receive+0x268>)
 8015b60:	781b      	ldrb	r3, [r3, #0]
 8015b62:	f003 0310 	and.w	r3, r3, #16
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	f000 8264 	beq.w	8016034 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015b72:	461a      	mov	r2, r3
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015b78:	4413      	add	r3, r2
 8015b7a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8015b80:	4b84      	ldr	r3, [pc, #528]	@ (8015d94 <tcp_receive+0x26c>)
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	1ad3      	subs	r3, r2, r3
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	db1b      	blt.n	8015bc2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8015b8e:	4b81      	ldr	r3, [pc, #516]	@ (8015d94 <tcp_receive+0x26c>)
 8015b90:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015b92:	429a      	cmp	r2, r3
 8015b94:	d106      	bne.n	8015ba4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015b9a:	4b7f      	ldr	r3, [pc, #508]	@ (8015d98 <tcp_receive+0x270>)
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	1ad3      	subs	r3, r2, r3
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	db0e      	blt.n	8015bc2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015ba8:	4b7b      	ldr	r3, [pc, #492]	@ (8015d98 <tcp_receive+0x270>)
 8015baa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015bac:	429a      	cmp	r2, r3
 8015bae:	d125      	bne.n	8015bfc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015bb0:	4b7a      	ldr	r3, [pc, #488]	@ (8015d9c <tcp_receive+0x274>)
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	89db      	ldrh	r3, [r3, #14]
 8015bb6:	b29a      	uxth	r2, r3
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015bbe:	429a      	cmp	r2, r3
 8015bc0:	d91c      	bls.n	8015bfc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8015bc2:	4b76      	ldr	r3, [pc, #472]	@ (8015d9c <tcp_receive+0x274>)
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	89db      	ldrh	r3, [r3, #14]
 8015bc8:	b29a      	uxth	r2, r3
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015bdc:	429a      	cmp	r2, r3
 8015bde:	d205      	bcs.n	8015bec <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8015bec:	4b69      	ldr	r3, [pc, #420]	@ (8015d94 <tcp_receive+0x26c>)
 8015bee:	681a      	ldr	r2, [r3, #0]
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8015bf4:	4b68      	ldr	r3, [pc, #416]	@ (8015d98 <tcp_receive+0x270>)
 8015bf6:	681a      	ldr	r2, [r3, #0]
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8015bfc:	4b66      	ldr	r3, [pc, #408]	@ (8015d98 <tcp_receive+0x270>)
 8015bfe:	681a      	ldr	r2, [r3, #0]
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015c04:	1ad3      	subs	r3, r2, r3
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	dc58      	bgt.n	8015cbc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8015c0a:	4b65      	ldr	r3, [pc, #404]	@ (8015da0 <tcp_receive+0x278>)
 8015c0c:	881b      	ldrh	r3, [r3, #0]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d14b      	bne.n	8015caa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015c16:	687a      	ldr	r2, [r7, #4]
 8015c18:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8015c1c:	4413      	add	r3, r2
 8015c1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015c20:	429a      	cmp	r2, r3
 8015c22:	d142      	bne.n	8015caa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	db3d      	blt.n	8015caa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015c32:	4b59      	ldr	r3, [pc, #356]	@ (8015d98 <tcp_receive+0x270>)
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	429a      	cmp	r2, r3
 8015c38:	d137      	bne.n	8015caa <tcp_receive+0x182>
              found_dupack = 1;
 8015c3a:	2301      	movs	r3, #1
 8015c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015c44:	2bff      	cmp	r3, #255	@ 0xff
 8015c46:	d007      	beq.n	8015c58 <tcp_receive+0x130>
                ++pcb->dupacks;
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015c4e:	3301      	adds	r3, #1
 8015c50:	b2da      	uxtb	r2, r3
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015c5e:	2b03      	cmp	r3, #3
 8015c60:	d91b      	bls.n	8015c9a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015c6c:	4413      	add	r3, r2
 8015c6e:	b29a      	uxth	r2, r3
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015c76:	429a      	cmp	r2, r3
 8015c78:	d30a      	bcc.n	8015c90 <tcp_receive+0x168>
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015c84:	4413      	add	r3, r2
 8015c86:	b29a      	uxth	r2, r3
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015c8e:	e004      	b.n	8015c9a <tcp_receive+0x172>
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015c96:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015ca0:	2b02      	cmp	r3, #2
 8015ca2:	d902      	bls.n	8015caa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015ca4:	6878      	ldr	r0, [r7, #4]
 8015ca6:	f001 fee7 	bl	8017a78 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8015caa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	f040 8161 	bne.w	8015f74 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	2200      	movs	r2, #0
 8015cb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015cba:	e15b      	b.n	8015f74 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015cbc:	4b36      	ldr	r3, [pc, #216]	@ (8015d98 <tcp_receive+0x270>)
 8015cbe:	681a      	ldr	r2, [r3, #0]
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015cc4:	1ad3      	subs	r3, r2, r3
 8015cc6:	3b01      	subs	r3, #1
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	f2c0 814e 	blt.w	8015f6a <tcp_receive+0x442>
 8015cce:	4b32      	ldr	r3, [pc, #200]	@ (8015d98 <tcp_receive+0x270>)
 8015cd0:	681a      	ldr	r2, [r3, #0]
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015cd6:	1ad3      	subs	r3, r2, r3
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	f300 8146 	bgt.w	8015f6a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	8b5b      	ldrh	r3, [r3, #26]
 8015ce2:	f003 0304 	and.w	r3, r3, #4
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d010      	beq.n	8015d0c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	8b5b      	ldrh	r3, [r3, #26]
 8015cee:	f023 0304 	bic.w	r3, r3, #4
 8015cf2:	b29a      	uxth	r2, r3
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	2200      	movs	r2, #0
 8015d08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	2200      	movs	r2, #0
 8015d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015d1a:	10db      	asrs	r3, r3, #3
 8015d1c:	b21b      	sxth	r3, r3
 8015d1e:	b29a      	uxth	r2, r3
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015d26:	b29b      	uxth	r3, r3
 8015d28:	4413      	add	r3, r2
 8015d2a:	b29b      	uxth	r3, r3
 8015d2c:	b21a      	sxth	r2, r3
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8015d34:	4b18      	ldr	r3, [pc, #96]	@ (8015d98 <tcp_receive+0x270>)
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	b29a      	uxth	r2, r3
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015d3e:	b29b      	uxth	r3, r3
 8015d40:	1ad3      	subs	r3, r2, r3
 8015d42:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	2200      	movs	r2, #0
 8015d48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8015d4c:	4b12      	ldr	r3, [pc, #72]	@ (8015d98 <tcp_receive+0x270>)
 8015d4e:	681a      	ldr	r2, [r3, #0]
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	7d1b      	ldrb	r3, [r3, #20]
 8015d58:	2b03      	cmp	r3, #3
 8015d5a:	f240 8097 	bls.w	8015e8c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8015d6a:	429a      	cmp	r2, r3
 8015d6c:	d245      	bcs.n	8015dfa <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	8b5b      	ldrh	r3, [r3, #26]
 8015d72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d014      	beq.n	8015da4 <tcp_receive+0x27c>
 8015d7a:	2301      	movs	r3, #1
 8015d7c:	e013      	b.n	8015da6 <tcp_receive+0x27e>
 8015d7e:	bf00      	nop
 8015d80:	080216cc 	.word	0x080216cc
 8015d84:	080219fc 	.word	0x080219fc
 8015d88:	08021718 	.word	0x08021718
 8015d8c:	08021a18 	.word	0x08021a18
 8015d90:	200047e0 	.word	0x200047e0
 8015d94:	200047d4 	.word	0x200047d4
 8015d98:	200047d8 	.word	0x200047d8
 8015d9c:	200047c4 	.word	0x200047c4
 8015da0:	200047de 	.word	0x200047de
 8015da4:	2302      	movs	r3, #2
 8015da6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015daa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015dae:	b29a      	uxth	r2, r3
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015db4:	fb12 f303 	smulbb	r3, r2, r3
 8015db8:	b29b      	uxth	r3, r3
 8015dba:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8015dbc:	4293      	cmp	r3, r2
 8015dbe:	bf28      	it	cs
 8015dc0:	4613      	movcs	r3, r2
 8015dc2:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015dca:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015dcc:	4413      	add	r3, r2
 8015dce:	b29a      	uxth	r2, r3
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015dd6:	429a      	cmp	r2, r3
 8015dd8:	d309      	bcc.n	8015dee <tcp_receive+0x2c6>
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015de0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015de2:	4413      	add	r3, r2
 8015de4:	b29a      	uxth	r2, r3
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015dec:	e04e      	b.n	8015e8c <tcp_receive+0x364>
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015df4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015df8:	e048      	b.n	8015e8c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015e00:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015e02:	4413      	add	r3, r2
 8015e04:	b29a      	uxth	r2, r3
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015e0c:	429a      	cmp	r2, r3
 8015e0e:	d309      	bcc.n	8015e24 <tcp_receive+0x2fc>
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015e16:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015e18:	4413      	add	r3, r2
 8015e1a:	b29a      	uxth	r2, r3
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015e22:	e004      	b.n	8015e2e <tcp_receive+0x306>
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015e2a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015e3a:	429a      	cmp	r2, r3
 8015e3c:	d326      	bcc.n	8015e8c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015e4a:	1ad3      	subs	r3, r2, r3
 8015e4c:	b29a      	uxth	r2, r3
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015e5e:	4413      	add	r3, r2
 8015e60:	b29a      	uxth	r2, r3
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015e68:	429a      	cmp	r2, r3
 8015e6a:	d30a      	bcc.n	8015e82 <tcp_receive+0x35a>
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015e76:	4413      	add	r3, r2
 8015e78:	b29a      	uxth	r2, r3
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015e80:	e004      	b.n	8015e8c <tcp_receive+0x364>
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015e88:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015e94:	4a98      	ldr	r2, [pc, #608]	@ (80160f8 <tcp_receive+0x5d0>)
 8015e96:	6878      	ldr	r0, [r7, #4]
 8015e98:	f7ff fdca 	bl	8015a30 <tcp_free_acked_segments>
 8015e9c:	4602      	mov	r2, r0
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015eaa:	4a94      	ldr	r2, [pc, #592]	@ (80160fc <tcp_receive+0x5d4>)
 8015eac:	6878      	ldr	r0, [r7, #4]
 8015eae:	f7ff fdbf 	bl	8015a30 <tcp_free_acked_segments>
 8015eb2:	4602      	mov	r2, r0
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d104      	bne.n	8015eca <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015ec6:	861a      	strh	r2, [r3, #48]	@ 0x30
 8015ec8:	e002      	b.n	8015ed0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	2200      	movs	r2, #0
 8015ece:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	2200      	movs	r2, #0
 8015ed4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d103      	bne.n	8015ee6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	2200      	movs	r2, #0
 8015ee2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8015eec:	4b84      	ldr	r3, [pc, #528]	@ (8016100 <tcp_receive+0x5d8>)
 8015eee:	881b      	ldrh	r3, [r3, #0]
 8015ef0:	4413      	add	r3, r2
 8015ef2:	b29a      	uxth	r2, r3
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	8b5b      	ldrh	r3, [r3, #26]
 8015efe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d035      	beq.n	8015f72 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d118      	bne.n	8015f40 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d00c      	beq.n	8015f30 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f1e:	68db      	ldr	r3, [r3, #12]
 8015f20:	685b      	ldr	r3, [r3, #4]
 8015f22:	4618      	mov	r0, r3
 8015f24:	f7fa fdfe 	bl	8010b24 <lwip_htonl>
 8015f28:	4603      	mov	r3, r0
 8015f2a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	dc20      	bgt.n	8015f72 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	8b5b      	ldrh	r3, [r3, #26]
 8015f34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015f38:	b29a      	uxth	r2, r3
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015f3e:	e018      	b.n	8015f72 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015f48:	68db      	ldr	r3, [r3, #12]
 8015f4a:	685b      	ldr	r3, [r3, #4]
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	f7fa fde9 	bl	8010b24 <lwip_htonl>
 8015f52:	4603      	mov	r3, r0
 8015f54:	1ae3      	subs	r3, r4, r3
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	dc0b      	bgt.n	8015f72 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	8b5b      	ldrh	r3, [r3, #26]
 8015f5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015f62:	b29a      	uxth	r2, r3
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015f68:	e003      	b.n	8015f72 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015f6a:	6878      	ldr	r0, [r7, #4]
 8015f6c:	f001 ff70 	bl	8017e50 <tcp_send_empty_ack>
 8015f70:	e000      	b.n	8015f74 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015f72:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d05b      	beq.n	8016034 <tcp_receive+0x50c>
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015f80:	4b60      	ldr	r3, [pc, #384]	@ (8016104 <tcp_receive+0x5dc>)
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	1ad3      	subs	r3, r2, r3
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	da54      	bge.n	8016034 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015f8a:	4b5f      	ldr	r3, [pc, #380]	@ (8016108 <tcp_receive+0x5e0>)
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	b29a      	uxth	r2, r3
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015f94:	b29b      	uxth	r3, r3
 8015f96:	1ad3      	subs	r3, r2, r3
 8015f98:	b29b      	uxth	r3, r3
 8015f9a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015f9e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015fa8:	10db      	asrs	r3, r3, #3
 8015faa:	b21b      	sxth	r3, r3
 8015fac:	b29b      	uxth	r3, r3
 8015fae:	1ad3      	subs	r3, r2, r3
 8015fb0:	b29b      	uxth	r3, r3
 8015fb2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015fbc:	b29a      	uxth	r2, r3
 8015fbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015fc2:	4413      	add	r3, r2
 8015fc4:	b29b      	uxth	r3, r3
 8015fc6:	b21a      	sxth	r2, r3
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8015fcc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	da05      	bge.n	8015fe0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8015fd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015fd8:	425b      	negs	r3, r3
 8015fda:	b29b      	uxth	r3, r3
 8015fdc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8015fe0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015fea:	109b      	asrs	r3, r3, #2
 8015fec:	b21b      	sxth	r3, r3
 8015fee:	b29b      	uxth	r3, r3
 8015ff0:	1ad3      	subs	r3, r2, r3
 8015ff2:	b29b      	uxth	r3, r3
 8015ff4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015ffe:	b29a      	uxth	r2, r3
 8016000:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016004:	4413      	add	r3, r2
 8016006:	b29b      	uxth	r3, r3
 8016008:	b21a      	sxth	r2, r3
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016014:	10db      	asrs	r3, r3, #3
 8016016:	b21b      	sxth	r3, r3
 8016018:	b29a      	uxth	r2, r3
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016020:	b29b      	uxth	r3, r3
 8016022:	4413      	add	r3, r2
 8016024:	b29b      	uxth	r3, r3
 8016026:	b21a      	sxth	r2, r3
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	2200      	movs	r2, #0
 8016032:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8016034:	4b35      	ldr	r3, [pc, #212]	@ (801610c <tcp_receive+0x5e4>)
 8016036:	881b      	ldrh	r3, [r3, #0]
 8016038:	2b00      	cmp	r3, #0
 801603a:	f000 84df 	beq.w	80169fc <tcp_receive+0xed4>
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	7d1b      	ldrb	r3, [r3, #20]
 8016042:	2b06      	cmp	r3, #6
 8016044:	f200 84da 	bhi.w	80169fc <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801604c:	4b30      	ldr	r3, [pc, #192]	@ (8016110 <tcp_receive+0x5e8>)
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	1ad3      	subs	r3, r2, r3
 8016052:	3b01      	subs	r3, #1
 8016054:	2b00      	cmp	r3, #0
 8016056:	f2c0 808f 	blt.w	8016178 <tcp_receive+0x650>
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801605e:	4b2b      	ldr	r3, [pc, #172]	@ (801610c <tcp_receive+0x5e4>)
 8016060:	881b      	ldrh	r3, [r3, #0]
 8016062:	4619      	mov	r1, r3
 8016064:	4b2a      	ldr	r3, [pc, #168]	@ (8016110 <tcp_receive+0x5e8>)
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	440b      	add	r3, r1
 801606a:	1ad3      	subs	r3, r2, r3
 801606c:	3301      	adds	r3, #1
 801606e:	2b00      	cmp	r3, #0
 8016070:	f300 8082 	bgt.w	8016178 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8016074:	4b27      	ldr	r3, [pc, #156]	@ (8016114 <tcp_receive+0x5ec>)
 8016076:	685b      	ldr	r3, [r3, #4]
 8016078:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801607e:	4b24      	ldr	r3, [pc, #144]	@ (8016110 <tcp_receive+0x5e8>)
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	1ad3      	subs	r3, r2, r3
 8016084:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8016086:	4b23      	ldr	r3, [pc, #140]	@ (8016114 <tcp_receive+0x5ec>)
 8016088:	685b      	ldr	r3, [r3, #4]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d106      	bne.n	801609c <tcp_receive+0x574>
 801608e:	4b22      	ldr	r3, [pc, #136]	@ (8016118 <tcp_receive+0x5f0>)
 8016090:	f240 5294 	movw	r2, #1428	@ 0x594
 8016094:	4921      	ldr	r1, [pc, #132]	@ (801611c <tcp_receive+0x5f4>)
 8016096:	4822      	ldr	r0, [pc, #136]	@ (8016120 <tcp_receive+0x5f8>)
 8016098:	f008 fca2 	bl	801e9e0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801609c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801609e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80160a2:	4293      	cmp	r3, r2
 80160a4:	d906      	bls.n	80160b4 <tcp_receive+0x58c>
 80160a6:	4b1c      	ldr	r3, [pc, #112]	@ (8016118 <tcp_receive+0x5f0>)
 80160a8:	f240 5295 	movw	r2, #1429	@ 0x595
 80160ac:	491d      	ldr	r1, [pc, #116]	@ (8016124 <tcp_receive+0x5fc>)
 80160ae:	481c      	ldr	r0, [pc, #112]	@ (8016120 <tcp_receive+0x5f8>)
 80160b0:	f008 fc96 	bl	801e9e0 <iprintf>
      off = (u16_t)off32;
 80160b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80160ba:	4b16      	ldr	r3, [pc, #88]	@ (8016114 <tcp_receive+0x5ec>)
 80160bc:	685b      	ldr	r3, [r3, #4]
 80160be:	891b      	ldrh	r3, [r3, #8]
 80160c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80160c4:	429a      	cmp	r2, r3
 80160c6:	d906      	bls.n	80160d6 <tcp_receive+0x5ae>
 80160c8:	4b13      	ldr	r3, [pc, #76]	@ (8016118 <tcp_receive+0x5f0>)
 80160ca:	f240 5297 	movw	r2, #1431	@ 0x597
 80160ce:	4916      	ldr	r1, [pc, #88]	@ (8016128 <tcp_receive+0x600>)
 80160d0:	4813      	ldr	r0, [pc, #76]	@ (8016120 <tcp_receive+0x5f8>)
 80160d2:	f008 fc85 	bl	801e9e0 <iprintf>
      inseg.len -= off;
 80160d6:	4b0f      	ldr	r3, [pc, #60]	@ (8016114 <tcp_receive+0x5ec>)
 80160d8:	891a      	ldrh	r2, [r3, #8]
 80160da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80160de:	1ad3      	subs	r3, r2, r3
 80160e0:	b29a      	uxth	r2, r3
 80160e2:	4b0c      	ldr	r3, [pc, #48]	@ (8016114 <tcp_receive+0x5ec>)
 80160e4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80160e6:	4b0b      	ldr	r3, [pc, #44]	@ (8016114 <tcp_receive+0x5ec>)
 80160e8:	685b      	ldr	r3, [r3, #4]
 80160ea:	891a      	ldrh	r2, [r3, #8]
 80160ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80160f0:	1ad3      	subs	r3, r2, r3
 80160f2:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80160f4:	e02a      	b.n	801614c <tcp_receive+0x624>
 80160f6:	bf00      	nop
 80160f8:	08021a34 	.word	0x08021a34
 80160fc:	08021a3c 	.word	0x08021a3c
 8016100:	200047dc 	.word	0x200047dc
 8016104:	200047d8 	.word	0x200047d8
 8016108:	2000479c 	.word	0x2000479c
 801610c:	200047de 	.word	0x200047de
 8016110:	200047d4 	.word	0x200047d4
 8016114:	200047b4 	.word	0x200047b4
 8016118:	080216cc 	.word	0x080216cc
 801611c:	08021a44 	.word	0x08021a44
 8016120:	08021718 	.word	0x08021718
 8016124:	08021a54 	.word	0x08021a54
 8016128:	08021a64 	.word	0x08021a64
        off -= p->len;
 801612c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801612e:	895b      	ldrh	r3, [r3, #10]
 8016130:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016134:	1ad3      	subs	r3, r2, r3
 8016136:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801613a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801613c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801613e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8016140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016142:	2200      	movs	r2, #0
 8016144:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8016146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 801614c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801614e:	895b      	ldrh	r3, [r3, #10]
 8016150:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016154:	429a      	cmp	r2, r3
 8016156:	d8e9      	bhi.n	801612c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8016158:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801615c:	4619      	mov	r1, r3
 801615e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8016160:	f7fc f998 	bl	8012494 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016168:	4a90      	ldr	r2, [pc, #576]	@ (80163ac <tcp_receive+0x884>)
 801616a:	6013      	str	r3, [r2, #0]
 801616c:	4b90      	ldr	r3, [pc, #576]	@ (80163b0 <tcp_receive+0x888>)
 801616e:	68db      	ldr	r3, [r3, #12]
 8016170:	4a8e      	ldr	r2, [pc, #568]	@ (80163ac <tcp_receive+0x884>)
 8016172:	6812      	ldr	r2, [r2, #0]
 8016174:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016176:	e00d      	b.n	8016194 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016178:	4b8c      	ldr	r3, [pc, #560]	@ (80163ac <tcp_receive+0x884>)
 801617a:	681a      	ldr	r2, [r3, #0]
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016180:	1ad3      	subs	r3, r2, r3
 8016182:	2b00      	cmp	r3, #0
 8016184:	da06      	bge.n	8016194 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	8b5b      	ldrh	r3, [r3, #26]
 801618a:	f043 0302 	orr.w	r3, r3, #2
 801618e:	b29a      	uxth	r2, r3
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016194:	4b85      	ldr	r3, [pc, #532]	@ (80163ac <tcp_receive+0x884>)
 8016196:	681a      	ldr	r2, [r3, #0]
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801619c:	1ad3      	subs	r3, r2, r3
 801619e:	2b00      	cmp	r3, #0
 80161a0:	f2c0 8427 	blt.w	80169f2 <tcp_receive+0xeca>
 80161a4:	4b81      	ldr	r3, [pc, #516]	@ (80163ac <tcp_receive+0x884>)
 80161a6:	681a      	ldr	r2, [r3, #0]
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161ac:	6879      	ldr	r1, [r7, #4]
 80161ae:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80161b0:	440b      	add	r3, r1
 80161b2:	1ad3      	subs	r3, r2, r3
 80161b4:	3301      	adds	r3, #1
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	f300 841b 	bgt.w	80169f2 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80161c0:	4b7a      	ldr	r3, [pc, #488]	@ (80163ac <tcp_receive+0x884>)
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	429a      	cmp	r2, r3
 80161c6:	f040 8298 	bne.w	80166fa <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80161ca:	4b79      	ldr	r3, [pc, #484]	@ (80163b0 <tcp_receive+0x888>)
 80161cc:	891c      	ldrh	r4, [r3, #8]
 80161ce:	4b78      	ldr	r3, [pc, #480]	@ (80163b0 <tcp_receive+0x888>)
 80161d0:	68db      	ldr	r3, [r3, #12]
 80161d2:	899b      	ldrh	r3, [r3, #12]
 80161d4:	b29b      	uxth	r3, r3
 80161d6:	4618      	mov	r0, r3
 80161d8:	f7fa fc8e 	bl	8010af8 <lwip_htons>
 80161dc:	4603      	mov	r3, r0
 80161de:	b2db      	uxtb	r3, r3
 80161e0:	f003 0303 	and.w	r3, r3, #3
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d001      	beq.n	80161ec <tcp_receive+0x6c4>
 80161e8:	2301      	movs	r3, #1
 80161ea:	e000      	b.n	80161ee <tcp_receive+0x6c6>
 80161ec:	2300      	movs	r3, #0
 80161ee:	4423      	add	r3, r4
 80161f0:	b29a      	uxth	r2, r3
 80161f2:	4b70      	ldr	r3, [pc, #448]	@ (80163b4 <tcp_receive+0x88c>)
 80161f4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80161fa:	4b6e      	ldr	r3, [pc, #440]	@ (80163b4 <tcp_receive+0x88c>)
 80161fc:	881b      	ldrh	r3, [r3, #0]
 80161fe:	429a      	cmp	r2, r3
 8016200:	d274      	bcs.n	80162ec <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016202:	4b6b      	ldr	r3, [pc, #428]	@ (80163b0 <tcp_receive+0x888>)
 8016204:	68db      	ldr	r3, [r3, #12]
 8016206:	899b      	ldrh	r3, [r3, #12]
 8016208:	b29b      	uxth	r3, r3
 801620a:	4618      	mov	r0, r3
 801620c:	f7fa fc74 	bl	8010af8 <lwip_htons>
 8016210:	4603      	mov	r3, r0
 8016212:	b2db      	uxtb	r3, r3
 8016214:	f003 0301 	and.w	r3, r3, #1
 8016218:	2b00      	cmp	r3, #0
 801621a:	d01e      	beq.n	801625a <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801621c:	4b64      	ldr	r3, [pc, #400]	@ (80163b0 <tcp_receive+0x888>)
 801621e:	68db      	ldr	r3, [r3, #12]
 8016220:	899b      	ldrh	r3, [r3, #12]
 8016222:	b29b      	uxth	r3, r3
 8016224:	b21b      	sxth	r3, r3
 8016226:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801622a:	b21c      	sxth	r4, r3
 801622c:	4b60      	ldr	r3, [pc, #384]	@ (80163b0 <tcp_receive+0x888>)
 801622e:	68db      	ldr	r3, [r3, #12]
 8016230:	899b      	ldrh	r3, [r3, #12]
 8016232:	b29b      	uxth	r3, r3
 8016234:	4618      	mov	r0, r3
 8016236:	f7fa fc5f 	bl	8010af8 <lwip_htons>
 801623a:	4603      	mov	r3, r0
 801623c:	b2db      	uxtb	r3, r3
 801623e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8016242:	b29b      	uxth	r3, r3
 8016244:	4618      	mov	r0, r3
 8016246:	f7fa fc57 	bl	8010af8 <lwip_htons>
 801624a:	4603      	mov	r3, r0
 801624c:	b21b      	sxth	r3, r3
 801624e:	4323      	orrs	r3, r4
 8016250:	b21a      	sxth	r2, r3
 8016252:	4b57      	ldr	r3, [pc, #348]	@ (80163b0 <tcp_receive+0x888>)
 8016254:	68db      	ldr	r3, [r3, #12]
 8016256:	b292      	uxth	r2, r2
 8016258:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801625e:	4b54      	ldr	r3, [pc, #336]	@ (80163b0 <tcp_receive+0x888>)
 8016260:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016262:	4b53      	ldr	r3, [pc, #332]	@ (80163b0 <tcp_receive+0x888>)
 8016264:	68db      	ldr	r3, [r3, #12]
 8016266:	899b      	ldrh	r3, [r3, #12]
 8016268:	b29b      	uxth	r3, r3
 801626a:	4618      	mov	r0, r3
 801626c:	f7fa fc44 	bl	8010af8 <lwip_htons>
 8016270:	4603      	mov	r3, r0
 8016272:	b2db      	uxtb	r3, r3
 8016274:	f003 0302 	and.w	r3, r3, #2
 8016278:	2b00      	cmp	r3, #0
 801627a:	d005      	beq.n	8016288 <tcp_receive+0x760>
            inseg.len -= 1;
 801627c:	4b4c      	ldr	r3, [pc, #304]	@ (80163b0 <tcp_receive+0x888>)
 801627e:	891b      	ldrh	r3, [r3, #8]
 8016280:	3b01      	subs	r3, #1
 8016282:	b29a      	uxth	r2, r3
 8016284:	4b4a      	ldr	r3, [pc, #296]	@ (80163b0 <tcp_receive+0x888>)
 8016286:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8016288:	4b49      	ldr	r3, [pc, #292]	@ (80163b0 <tcp_receive+0x888>)
 801628a:	685b      	ldr	r3, [r3, #4]
 801628c:	4a48      	ldr	r2, [pc, #288]	@ (80163b0 <tcp_receive+0x888>)
 801628e:	8912      	ldrh	r2, [r2, #8]
 8016290:	4611      	mov	r1, r2
 8016292:	4618      	mov	r0, r3
 8016294:	f7fb fffe 	bl	8012294 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016298:	4b45      	ldr	r3, [pc, #276]	@ (80163b0 <tcp_receive+0x888>)
 801629a:	891c      	ldrh	r4, [r3, #8]
 801629c:	4b44      	ldr	r3, [pc, #272]	@ (80163b0 <tcp_receive+0x888>)
 801629e:	68db      	ldr	r3, [r3, #12]
 80162a0:	899b      	ldrh	r3, [r3, #12]
 80162a2:	b29b      	uxth	r3, r3
 80162a4:	4618      	mov	r0, r3
 80162a6:	f7fa fc27 	bl	8010af8 <lwip_htons>
 80162aa:	4603      	mov	r3, r0
 80162ac:	b2db      	uxtb	r3, r3
 80162ae:	f003 0303 	and.w	r3, r3, #3
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d001      	beq.n	80162ba <tcp_receive+0x792>
 80162b6:	2301      	movs	r3, #1
 80162b8:	e000      	b.n	80162bc <tcp_receive+0x794>
 80162ba:	2300      	movs	r3, #0
 80162bc:	4423      	add	r3, r4
 80162be:	b29a      	uxth	r2, r3
 80162c0:	4b3c      	ldr	r3, [pc, #240]	@ (80163b4 <tcp_receive+0x88c>)
 80162c2:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80162c4:	4b3b      	ldr	r3, [pc, #236]	@ (80163b4 <tcp_receive+0x88c>)
 80162c6:	881b      	ldrh	r3, [r3, #0]
 80162c8:	461a      	mov	r2, r3
 80162ca:	4b38      	ldr	r3, [pc, #224]	@ (80163ac <tcp_receive+0x884>)
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	441a      	add	r2, r3
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162d4:	6879      	ldr	r1, [r7, #4]
 80162d6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80162d8:	440b      	add	r3, r1
 80162da:	429a      	cmp	r2, r3
 80162dc:	d006      	beq.n	80162ec <tcp_receive+0x7c4>
 80162de:	4b36      	ldr	r3, [pc, #216]	@ (80163b8 <tcp_receive+0x890>)
 80162e0:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80162e4:	4935      	ldr	r1, [pc, #212]	@ (80163bc <tcp_receive+0x894>)
 80162e6:	4836      	ldr	r0, [pc, #216]	@ (80163c0 <tcp_receive+0x898>)
 80162e8:	f008 fb7a 	bl	801e9e0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	f000 80e6 	beq.w	80164c2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80162f6:	4b2e      	ldr	r3, [pc, #184]	@ (80163b0 <tcp_receive+0x888>)
 80162f8:	68db      	ldr	r3, [r3, #12]
 80162fa:	899b      	ldrh	r3, [r3, #12]
 80162fc:	b29b      	uxth	r3, r3
 80162fe:	4618      	mov	r0, r3
 8016300:	f7fa fbfa 	bl	8010af8 <lwip_htons>
 8016304:	4603      	mov	r3, r0
 8016306:	b2db      	uxtb	r3, r3
 8016308:	f003 0301 	and.w	r3, r3, #1
 801630c:	2b00      	cmp	r3, #0
 801630e:	d010      	beq.n	8016332 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8016310:	e00a      	b.n	8016328 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016316:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801631c:	681a      	ldr	r2, [r3, #0]
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8016322:	68f8      	ldr	r0, [r7, #12]
 8016324:	f7fd fd93 	bl	8013e4e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801632c:	2b00      	cmp	r3, #0
 801632e:	d1f0      	bne.n	8016312 <tcp_receive+0x7ea>
 8016330:	e0c7      	b.n	80164c2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016336:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016338:	e051      	b.n	80163de <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801633a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801633c:	68db      	ldr	r3, [r3, #12]
 801633e:	899b      	ldrh	r3, [r3, #12]
 8016340:	b29b      	uxth	r3, r3
 8016342:	4618      	mov	r0, r3
 8016344:	f7fa fbd8 	bl	8010af8 <lwip_htons>
 8016348:	4603      	mov	r3, r0
 801634a:	b2db      	uxtb	r3, r3
 801634c:	f003 0301 	and.w	r3, r3, #1
 8016350:	2b00      	cmp	r3, #0
 8016352:	d03c      	beq.n	80163ce <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8016354:	4b16      	ldr	r3, [pc, #88]	@ (80163b0 <tcp_receive+0x888>)
 8016356:	68db      	ldr	r3, [r3, #12]
 8016358:	899b      	ldrh	r3, [r3, #12]
 801635a:	b29b      	uxth	r3, r3
 801635c:	4618      	mov	r0, r3
 801635e:	f7fa fbcb 	bl	8010af8 <lwip_htons>
 8016362:	4603      	mov	r3, r0
 8016364:	b2db      	uxtb	r3, r3
 8016366:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801636a:	2b00      	cmp	r3, #0
 801636c:	d12f      	bne.n	80163ce <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801636e:	4b10      	ldr	r3, [pc, #64]	@ (80163b0 <tcp_receive+0x888>)
 8016370:	68db      	ldr	r3, [r3, #12]
 8016372:	899b      	ldrh	r3, [r3, #12]
 8016374:	b29c      	uxth	r4, r3
 8016376:	2001      	movs	r0, #1
 8016378:	f7fa fbbe 	bl	8010af8 <lwip_htons>
 801637c:	4603      	mov	r3, r0
 801637e:	461a      	mov	r2, r3
 8016380:	4b0b      	ldr	r3, [pc, #44]	@ (80163b0 <tcp_receive+0x888>)
 8016382:	68db      	ldr	r3, [r3, #12]
 8016384:	4322      	orrs	r2, r4
 8016386:	b292      	uxth	r2, r2
 8016388:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801638a:	4b09      	ldr	r3, [pc, #36]	@ (80163b0 <tcp_receive+0x888>)
 801638c:	891c      	ldrh	r4, [r3, #8]
 801638e:	4b08      	ldr	r3, [pc, #32]	@ (80163b0 <tcp_receive+0x888>)
 8016390:	68db      	ldr	r3, [r3, #12]
 8016392:	899b      	ldrh	r3, [r3, #12]
 8016394:	b29b      	uxth	r3, r3
 8016396:	4618      	mov	r0, r3
 8016398:	f7fa fbae 	bl	8010af8 <lwip_htons>
 801639c:	4603      	mov	r3, r0
 801639e:	b2db      	uxtb	r3, r3
 80163a0:	f003 0303 	and.w	r3, r3, #3
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d00d      	beq.n	80163c4 <tcp_receive+0x89c>
 80163a8:	2301      	movs	r3, #1
 80163aa:	e00c      	b.n	80163c6 <tcp_receive+0x89e>
 80163ac:	200047d4 	.word	0x200047d4
 80163b0:	200047b4 	.word	0x200047b4
 80163b4:	200047de 	.word	0x200047de
 80163b8:	080216cc 	.word	0x080216cc
 80163bc:	08021a74 	.word	0x08021a74
 80163c0:	08021718 	.word	0x08021718
 80163c4:	2300      	movs	r3, #0
 80163c6:	4423      	add	r3, r4
 80163c8:	b29a      	uxth	r2, r3
 80163ca:	4b98      	ldr	r3, [pc, #608]	@ (801662c <tcp_receive+0xb04>)
 80163cc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80163ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163d0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80163d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80163d8:	6938      	ldr	r0, [r7, #16]
 80163da:	f7fd fd38 	bl	8013e4e <tcp_seg_free>
            while (next &&
 80163de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d00e      	beq.n	8016402 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80163e4:	4b91      	ldr	r3, [pc, #580]	@ (801662c <tcp_receive+0xb04>)
 80163e6:	881b      	ldrh	r3, [r3, #0]
 80163e8:	461a      	mov	r2, r3
 80163ea:	4b91      	ldr	r3, [pc, #580]	@ (8016630 <tcp_receive+0xb08>)
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	441a      	add	r2, r3
 80163f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163f2:	68db      	ldr	r3, [r3, #12]
 80163f4:	685b      	ldr	r3, [r3, #4]
 80163f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80163f8:	8909      	ldrh	r1, [r1, #8]
 80163fa:	440b      	add	r3, r1
 80163fc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80163fe:	2b00      	cmp	r3, #0
 8016400:	da9b      	bge.n	801633a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8016402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016404:	2b00      	cmp	r3, #0
 8016406:	d059      	beq.n	80164bc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8016408:	4b88      	ldr	r3, [pc, #544]	@ (801662c <tcp_receive+0xb04>)
 801640a:	881b      	ldrh	r3, [r3, #0]
 801640c:	461a      	mov	r2, r3
 801640e:	4b88      	ldr	r3, [pc, #544]	@ (8016630 <tcp_receive+0xb08>)
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	441a      	add	r2, r3
 8016414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016416:	68db      	ldr	r3, [r3, #12]
 8016418:	685b      	ldr	r3, [r3, #4]
 801641a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801641c:	2b00      	cmp	r3, #0
 801641e:	dd4d      	ble.n	80164bc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016422:	68db      	ldr	r3, [r3, #12]
 8016424:	685b      	ldr	r3, [r3, #4]
 8016426:	b29a      	uxth	r2, r3
 8016428:	4b81      	ldr	r3, [pc, #516]	@ (8016630 <tcp_receive+0xb08>)
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	b29b      	uxth	r3, r3
 801642e:	1ad3      	subs	r3, r2, r3
 8016430:	b29a      	uxth	r2, r3
 8016432:	4b80      	ldr	r3, [pc, #512]	@ (8016634 <tcp_receive+0xb0c>)
 8016434:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016436:	4b7f      	ldr	r3, [pc, #508]	@ (8016634 <tcp_receive+0xb0c>)
 8016438:	68db      	ldr	r3, [r3, #12]
 801643a:	899b      	ldrh	r3, [r3, #12]
 801643c:	b29b      	uxth	r3, r3
 801643e:	4618      	mov	r0, r3
 8016440:	f7fa fb5a 	bl	8010af8 <lwip_htons>
 8016444:	4603      	mov	r3, r0
 8016446:	b2db      	uxtb	r3, r3
 8016448:	f003 0302 	and.w	r3, r3, #2
 801644c:	2b00      	cmp	r3, #0
 801644e:	d005      	beq.n	801645c <tcp_receive+0x934>
                inseg.len -= 1;
 8016450:	4b78      	ldr	r3, [pc, #480]	@ (8016634 <tcp_receive+0xb0c>)
 8016452:	891b      	ldrh	r3, [r3, #8]
 8016454:	3b01      	subs	r3, #1
 8016456:	b29a      	uxth	r2, r3
 8016458:	4b76      	ldr	r3, [pc, #472]	@ (8016634 <tcp_receive+0xb0c>)
 801645a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801645c:	4b75      	ldr	r3, [pc, #468]	@ (8016634 <tcp_receive+0xb0c>)
 801645e:	685b      	ldr	r3, [r3, #4]
 8016460:	4a74      	ldr	r2, [pc, #464]	@ (8016634 <tcp_receive+0xb0c>)
 8016462:	8912      	ldrh	r2, [r2, #8]
 8016464:	4611      	mov	r1, r2
 8016466:	4618      	mov	r0, r3
 8016468:	f7fb ff14 	bl	8012294 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801646c:	4b71      	ldr	r3, [pc, #452]	@ (8016634 <tcp_receive+0xb0c>)
 801646e:	891c      	ldrh	r4, [r3, #8]
 8016470:	4b70      	ldr	r3, [pc, #448]	@ (8016634 <tcp_receive+0xb0c>)
 8016472:	68db      	ldr	r3, [r3, #12]
 8016474:	899b      	ldrh	r3, [r3, #12]
 8016476:	b29b      	uxth	r3, r3
 8016478:	4618      	mov	r0, r3
 801647a:	f7fa fb3d 	bl	8010af8 <lwip_htons>
 801647e:	4603      	mov	r3, r0
 8016480:	b2db      	uxtb	r3, r3
 8016482:	f003 0303 	and.w	r3, r3, #3
 8016486:	2b00      	cmp	r3, #0
 8016488:	d001      	beq.n	801648e <tcp_receive+0x966>
 801648a:	2301      	movs	r3, #1
 801648c:	e000      	b.n	8016490 <tcp_receive+0x968>
 801648e:	2300      	movs	r3, #0
 8016490:	4423      	add	r3, r4
 8016492:	b29a      	uxth	r2, r3
 8016494:	4b65      	ldr	r3, [pc, #404]	@ (801662c <tcp_receive+0xb04>)
 8016496:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016498:	4b64      	ldr	r3, [pc, #400]	@ (801662c <tcp_receive+0xb04>)
 801649a:	881b      	ldrh	r3, [r3, #0]
 801649c:	461a      	mov	r2, r3
 801649e:	4b64      	ldr	r3, [pc, #400]	@ (8016630 <tcp_receive+0xb08>)
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	441a      	add	r2, r3
 80164a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80164a6:	68db      	ldr	r3, [r3, #12]
 80164a8:	685b      	ldr	r3, [r3, #4]
 80164aa:	429a      	cmp	r2, r3
 80164ac:	d006      	beq.n	80164bc <tcp_receive+0x994>
 80164ae:	4b62      	ldr	r3, [pc, #392]	@ (8016638 <tcp_receive+0xb10>)
 80164b0:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80164b4:	4961      	ldr	r1, [pc, #388]	@ (801663c <tcp_receive+0xb14>)
 80164b6:	4862      	ldr	r0, [pc, #392]	@ (8016640 <tcp_receive+0xb18>)
 80164b8:	f008 fa92 	bl	801e9e0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80164c0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80164c2:	4b5a      	ldr	r3, [pc, #360]	@ (801662c <tcp_receive+0xb04>)
 80164c4:	881b      	ldrh	r3, [r3, #0]
 80164c6:	461a      	mov	r2, r3
 80164c8:	4b59      	ldr	r3, [pc, #356]	@ (8016630 <tcp_receive+0xb08>)
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	441a      	add	r2, r3
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80164d6:	4b55      	ldr	r3, [pc, #340]	@ (801662c <tcp_receive+0xb04>)
 80164d8:	881b      	ldrh	r3, [r3, #0]
 80164da:	429a      	cmp	r2, r3
 80164dc:	d206      	bcs.n	80164ec <tcp_receive+0x9c4>
 80164de:	4b56      	ldr	r3, [pc, #344]	@ (8016638 <tcp_receive+0xb10>)
 80164e0:	f240 6207 	movw	r2, #1543	@ 0x607
 80164e4:	4957      	ldr	r1, [pc, #348]	@ (8016644 <tcp_receive+0xb1c>)
 80164e6:	4856      	ldr	r0, [pc, #344]	@ (8016640 <tcp_receive+0xb18>)
 80164e8:	f008 fa7a 	bl	801e9e0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80164f0:	4b4e      	ldr	r3, [pc, #312]	@ (801662c <tcp_receive+0xb04>)
 80164f2:	881b      	ldrh	r3, [r3, #0]
 80164f4:	1ad3      	subs	r3, r2, r3
 80164f6:	b29a      	uxth	r2, r3
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80164fc:	6878      	ldr	r0, [r7, #4]
 80164fe:	f7fc ffc5 	bl	801348c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8016502:	4b4c      	ldr	r3, [pc, #304]	@ (8016634 <tcp_receive+0xb0c>)
 8016504:	685b      	ldr	r3, [r3, #4]
 8016506:	891b      	ldrh	r3, [r3, #8]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d006      	beq.n	801651a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801650c:	4b49      	ldr	r3, [pc, #292]	@ (8016634 <tcp_receive+0xb0c>)
 801650e:	685b      	ldr	r3, [r3, #4]
 8016510:	4a4d      	ldr	r2, [pc, #308]	@ (8016648 <tcp_receive+0xb20>)
 8016512:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016514:	4b47      	ldr	r3, [pc, #284]	@ (8016634 <tcp_receive+0xb0c>)
 8016516:	2200      	movs	r2, #0
 8016518:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801651a:	4b46      	ldr	r3, [pc, #280]	@ (8016634 <tcp_receive+0xb0c>)
 801651c:	68db      	ldr	r3, [r3, #12]
 801651e:	899b      	ldrh	r3, [r3, #12]
 8016520:	b29b      	uxth	r3, r3
 8016522:	4618      	mov	r0, r3
 8016524:	f7fa fae8 	bl	8010af8 <lwip_htons>
 8016528:	4603      	mov	r3, r0
 801652a:	b2db      	uxtb	r3, r3
 801652c:	f003 0301 	and.w	r3, r3, #1
 8016530:	2b00      	cmp	r3, #0
 8016532:	f000 80b8 	beq.w	80166a6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8016536:	4b45      	ldr	r3, [pc, #276]	@ (801664c <tcp_receive+0xb24>)
 8016538:	781b      	ldrb	r3, [r3, #0]
 801653a:	f043 0320 	orr.w	r3, r3, #32
 801653e:	b2da      	uxtb	r2, r3
 8016540:	4b42      	ldr	r3, [pc, #264]	@ (801664c <tcp_receive+0xb24>)
 8016542:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016544:	e0af      	b.n	80166a6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801654a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016550:	68db      	ldr	r3, [r3, #12]
 8016552:	685b      	ldr	r3, [r3, #4]
 8016554:	4a36      	ldr	r2, [pc, #216]	@ (8016630 <tcp_receive+0xb08>)
 8016556:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016558:	68bb      	ldr	r3, [r7, #8]
 801655a:	891b      	ldrh	r3, [r3, #8]
 801655c:	461c      	mov	r4, r3
 801655e:	68bb      	ldr	r3, [r7, #8]
 8016560:	68db      	ldr	r3, [r3, #12]
 8016562:	899b      	ldrh	r3, [r3, #12]
 8016564:	b29b      	uxth	r3, r3
 8016566:	4618      	mov	r0, r3
 8016568:	f7fa fac6 	bl	8010af8 <lwip_htons>
 801656c:	4603      	mov	r3, r0
 801656e:	b2db      	uxtb	r3, r3
 8016570:	f003 0303 	and.w	r3, r3, #3
 8016574:	2b00      	cmp	r3, #0
 8016576:	d001      	beq.n	801657c <tcp_receive+0xa54>
 8016578:	2301      	movs	r3, #1
 801657a:	e000      	b.n	801657e <tcp_receive+0xa56>
 801657c:	2300      	movs	r3, #0
 801657e:	191a      	adds	r2, r3, r4
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016584:	441a      	add	r2, r3
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801658e:	461c      	mov	r4, r3
 8016590:	68bb      	ldr	r3, [r7, #8]
 8016592:	891b      	ldrh	r3, [r3, #8]
 8016594:	461d      	mov	r5, r3
 8016596:	68bb      	ldr	r3, [r7, #8]
 8016598:	68db      	ldr	r3, [r3, #12]
 801659a:	899b      	ldrh	r3, [r3, #12]
 801659c:	b29b      	uxth	r3, r3
 801659e:	4618      	mov	r0, r3
 80165a0:	f7fa faaa 	bl	8010af8 <lwip_htons>
 80165a4:	4603      	mov	r3, r0
 80165a6:	b2db      	uxtb	r3, r3
 80165a8:	f003 0303 	and.w	r3, r3, #3
 80165ac:	2b00      	cmp	r3, #0
 80165ae:	d001      	beq.n	80165b4 <tcp_receive+0xa8c>
 80165b0:	2301      	movs	r3, #1
 80165b2:	e000      	b.n	80165b6 <tcp_receive+0xa8e>
 80165b4:	2300      	movs	r3, #0
 80165b6:	442b      	add	r3, r5
 80165b8:	429c      	cmp	r4, r3
 80165ba:	d206      	bcs.n	80165ca <tcp_receive+0xaa2>
 80165bc:	4b1e      	ldr	r3, [pc, #120]	@ (8016638 <tcp_receive+0xb10>)
 80165be:	f240 622b 	movw	r2, #1579	@ 0x62b
 80165c2:	4923      	ldr	r1, [pc, #140]	@ (8016650 <tcp_receive+0xb28>)
 80165c4:	481e      	ldr	r0, [pc, #120]	@ (8016640 <tcp_receive+0xb18>)
 80165c6:	f008 fa0b 	bl	801e9e0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80165ca:	68bb      	ldr	r3, [r7, #8]
 80165cc:	891b      	ldrh	r3, [r3, #8]
 80165ce:	461c      	mov	r4, r3
 80165d0:	68bb      	ldr	r3, [r7, #8]
 80165d2:	68db      	ldr	r3, [r3, #12]
 80165d4:	899b      	ldrh	r3, [r3, #12]
 80165d6:	b29b      	uxth	r3, r3
 80165d8:	4618      	mov	r0, r3
 80165da:	f7fa fa8d 	bl	8010af8 <lwip_htons>
 80165de:	4603      	mov	r3, r0
 80165e0:	b2db      	uxtb	r3, r3
 80165e2:	f003 0303 	and.w	r3, r3, #3
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d001      	beq.n	80165ee <tcp_receive+0xac6>
 80165ea:	2301      	movs	r3, #1
 80165ec:	e000      	b.n	80165f0 <tcp_receive+0xac8>
 80165ee:	2300      	movs	r3, #0
 80165f0:	1919      	adds	r1, r3, r4
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80165f6:	b28b      	uxth	r3, r1
 80165f8:	1ad3      	subs	r3, r2, r3
 80165fa:	b29a      	uxth	r2, r3
 80165fc:	687b      	ldr	r3, [r7, #4]
 80165fe:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8016600:	6878      	ldr	r0, [r7, #4]
 8016602:	f7fc ff43 	bl	801348c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8016606:	68bb      	ldr	r3, [r7, #8]
 8016608:	685b      	ldr	r3, [r3, #4]
 801660a:	891b      	ldrh	r3, [r3, #8]
 801660c:	2b00      	cmp	r3, #0
 801660e:	d028      	beq.n	8016662 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8016610:	4b0d      	ldr	r3, [pc, #52]	@ (8016648 <tcp_receive+0xb20>)
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d01d      	beq.n	8016654 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8016618:	4b0b      	ldr	r3, [pc, #44]	@ (8016648 <tcp_receive+0xb20>)
 801661a:	681a      	ldr	r2, [r3, #0]
 801661c:	68bb      	ldr	r3, [r7, #8]
 801661e:	685b      	ldr	r3, [r3, #4]
 8016620:	4619      	mov	r1, r3
 8016622:	4610      	mov	r0, r2
 8016624:	f7fc f88a 	bl	801273c <pbuf_cat>
 8016628:	e018      	b.n	801665c <tcp_receive+0xb34>
 801662a:	bf00      	nop
 801662c:	200047de 	.word	0x200047de
 8016630:	200047d4 	.word	0x200047d4
 8016634:	200047b4 	.word	0x200047b4
 8016638:	080216cc 	.word	0x080216cc
 801663c:	08021aac 	.word	0x08021aac
 8016640:	08021718 	.word	0x08021718
 8016644:	08021ae8 	.word	0x08021ae8
 8016648:	200047e4 	.word	0x200047e4
 801664c:	200047e1 	.word	0x200047e1
 8016650:	08021b08 	.word	0x08021b08
            } else {
              recv_data = cseg->p;
 8016654:	68bb      	ldr	r3, [r7, #8]
 8016656:	685b      	ldr	r3, [r3, #4]
 8016658:	4a70      	ldr	r2, [pc, #448]	@ (801681c <tcp_receive+0xcf4>)
 801665a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801665c:	68bb      	ldr	r3, [r7, #8]
 801665e:	2200      	movs	r2, #0
 8016660:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016662:	68bb      	ldr	r3, [r7, #8]
 8016664:	68db      	ldr	r3, [r3, #12]
 8016666:	899b      	ldrh	r3, [r3, #12]
 8016668:	b29b      	uxth	r3, r3
 801666a:	4618      	mov	r0, r3
 801666c:	f7fa fa44 	bl	8010af8 <lwip_htons>
 8016670:	4603      	mov	r3, r0
 8016672:	b2db      	uxtb	r3, r3
 8016674:	f003 0301 	and.w	r3, r3, #1
 8016678:	2b00      	cmp	r3, #0
 801667a:	d00d      	beq.n	8016698 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801667c:	4b68      	ldr	r3, [pc, #416]	@ (8016820 <tcp_receive+0xcf8>)
 801667e:	781b      	ldrb	r3, [r3, #0]
 8016680:	f043 0320 	orr.w	r3, r3, #32
 8016684:	b2da      	uxtb	r2, r3
 8016686:	4b66      	ldr	r3, [pc, #408]	@ (8016820 <tcp_receive+0xcf8>)
 8016688:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	7d1b      	ldrb	r3, [r3, #20]
 801668e:	2b04      	cmp	r3, #4
 8016690:	d102      	bne.n	8016698 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	2207      	movs	r2, #7
 8016696:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8016698:	68bb      	ldr	r3, [r7, #8]
 801669a:	681a      	ldr	r2, [r3, #0]
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 80166a0:	68b8      	ldr	r0, [r7, #8]
 80166a2:	f7fd fbd4 	bl	8013e4e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d008      	beq.n	80166c0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80166b2:	68db      	ldr	r3, [r3, #12]
 80166b4:	685a      	ldr	r2, [r3, #4]
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80166ba:	429a      	cmp	r2, r3
 80166bc:	f43f af43 	beq.w	8016546 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	8b5b      	ldrh	r3, [r3, #26]
 80166c4:	f003 0301 	and.w	r3, r3, #1
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d00e      	beq.n	80166ea <tcp_receive+0xbc2>
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	8b5b      	ldrh	r3, [r3, #26]
 80166d0:	f023 0301 	bic.w	r3, r3, #1
 80166d4:	b29a      	uxth	r2, r3
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	835a      	strh	r2, [r3, #26]
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	8b5b      	ldrh	r3, [r3, #26]
 80166de:	f043 0302 	orr.w	r3, r3, #2
 80166e2:	b29a      	uxth	r2, r3
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80166e8:	e187      	b.n	80169fa <tcp_receive+0xed2>
        tcp_ack(pcb);
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	8b5b      	ldrh	r3, [r3, #26]
 80166ee:	f043 0301 	orr.w	r3, r3, #1
 80166f2:	b29a      	uxth	r2, r3
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80166f8:	e17f      	b.n	80169fa <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d106      	bne.n	8016710 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8016702:	4848      	ldr	r0, [pc, #288]	@ (8016824 <tcp_receive+0xcfc>)
 8016704:	f7fd fbbc 	bl	8013e80 <tcp_seg_copy>
 8016708:	4602      	mov	r2, r0
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	675a      	str	r2, [r3, #116]	@ 0x74
 801670e:	e16c      	b.n	80169ea <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8016710:	2300      	movs	r3, #0
 8016712:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016718:	63bb      	str	r3, [r7, #56]	@ 0x38
 801671a:	e156      	b.n	80169ca <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801671c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801671e:	68db      	ldr	r3, [r3, #12]
 8016720:	685a      	ldr	r2, [r3, #4]
 8016722:	4b41      	ldr	r3, [pc, #260]	@ (8016828 <tcp_receive+0xd00>)
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	429a      	cmp	r2, r3
 8016728:	d11d      	bne.n	8016766 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801672a:	4b3e      	ldr	r3, [pc, #248]	@ (8016824 <tcp_receive+0xcfc>)
 801672c:	891a      	ldrh	r2, [r3, #8]
 801672e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016730:	891b      	ldrh	r3, [r3, #8]
 8016732:	429a      	cmp	r2, r3
 8016734:	f240 814e 	bls.w	80169d4 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016738:	483a      	ldr	r0, [pc, #232]	@ (8016824 <tcp_receive+0xcfc>)
 801673a:	f7fd fba1 	bl	8013e80 <tcp_seg_copy>
 801673e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8016740:	697b      	ldr	r3, [r7, #20]
 8016742:	2b00      	cmp	r3, #0
 8016744:	f000 8148 	beq.w	80169d8 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8016748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801674a:	2b00      	cmp	r3, #0
 801674c:	d003      	beq.n	8016756 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801674e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016750:	697a      	ldr	r2, [r7, #20]
 8016752:	601a      	str	r2, [r3, #0]
 8016754:	e002      	b.n	801675c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	697a      	ldr	r2, [r7, #20]
 801675a:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801675c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801675e:	6978      	ldr	r0, [r7, #20]
 8016760:	f7ff f8de 	bl	8015920 <tcp_oos_insert_segment>
                }
                break;
 8016764:	e138      	b.n	80169d8 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8016766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016768:	2b00      	cmp	r3, #0
 801676a:	d117      	bne.n	801679c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801676c:	4b2e      	ldr	r3, [pc, #184]	@ (8016828 <tcp_receive+0xd00>)
 801676e:	681a      	ldr	r2, [r3, #0]
 8016770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016772:	68db      	ldr	r3, [r3, #12]
 8016774:	685b      	ldr	r3, [r3, #4]
 8016776:	1ad3      	subs	r3, r2, r3
 8016778:	2b00      	cmp	r3, #0
 801677a:	da57      	bge.n	801682c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801677c:	4829      	ldr	r0, [pc, #164]	@ (8016824 <tcp_receive+0xcfc>)
 801677e:	f7fd fb7f 	bl	8013e80 <tcp_seg_copy>
 8016782:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8016784:	69bb      	ldr	r3, [r7, #24]
 8016786:	2b00      	cmp	r3, #0
 8016788:	f000 8128 	beq.w	80169dc <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	69ba      	ldr	r2, [r7, #24]
 8016790:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8016792:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016794:	69b8      	ldr	r0, [r7, #24]
 8016796:	f7ff f8c3 	bl	8015920 <tcp_oos_insert_segment>
                  }
                  break;
 801679a:	e11f      	b.n	80169dc <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801679c:	4b22      	ldr	r3, [pc, #136]	@ (8016828 <tcp_receive+0xd00>)
 801679e:	681a      	ldr	r2, [r3, #0]
 80167a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167a2:	68db      	ldr	r3, [r3, #12]
 80167a4:	685b      	ldr	r3, [r3, #4]
 80167a6:	1ad3      	subs	r3, r2, r3
 80167a8:	3b01      	subs	r3, #1
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	db3e      	blt.n	801682c <tcp_receive+0xd04>
 80167ae:	4b1e      	ldr	r3, [pc, #120]	@ (8016828 <tcp_receive+0xd00>)
 80167b0:	681a      	ldr	r2, [r3, #0]
 80167b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80167b4:	68db      	ldr	r3, [r3, #12]
 80167b6:	685b      	ldr	r3, [r3, #4]
 80167b8:	1ad3      	subs	r3, r2, r3
 80167ba:	3301      	adds	r3, #1
 80167bc:	2b00      	cmp	r3, #0
 80167be:	dc35      	bgt.n	801682c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80167c0:	4818      	ldr	r0, [pc, #96]	@ (8016824 <tcp_receive+0xcfc>)
 80167c2:	f7fd fb5d 	bl	8013e80 <tcp_seg_copy>
 80167c6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80167c8:	69fb      	ldr	r3, [r7, #28]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	f000 8108 	beq.w	80169e0 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80167d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167d2:	68db      	ldr	r3, [r3, #12]
 80167d4:	685b      	ldr	r3, [r3, #4]
 80167d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80167d8:	8912      	ldrh	r2, [r2, #8]
 80167da:	441a      	add	r2, r3
 80167dc:	4b12      	ldr	r3, [pc, #72]	@ (8016828 <tcp_receive+0xd00>)
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	1ad3      	subs	r3, r2, r3
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	dd12      	ble.n	801680c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80167e6:	4b10      	ldr	r3, [pc, #64]	@ (8016828 <tcp_receive+0xd00>)
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	b29a      	uxth	r2, r3
 80167ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167ee:	68db      	ldr	r3, [r3, #12]
 80167f0:	685b      	ldr	r3, [r3, #4]
 80167f2:	b29b      	uxth	r3, r3
 80167f4:	1ad3      	subs	r3, r2, r3
 80167f6:	b29a      	uxth	r2, r3
 80167f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167fa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80167fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167fe:	685a      	ldr	r2, [r3, #4]
 8016800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016802:	891b      	ldrh	r3, [r3, #8]
 8016804:	4619      	mov	r1, r3
 8016806:	4610      	mov	r0, r2
 8016808:	f7fb fd44 	bl	8012294 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801680c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801680e:	69fa      	ldr	r2, [r7, #28]
 8016810:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8016812:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016814:	69f8      	ldr	r0, [r7, #28]
 8016816:	f7ff f883 	bl	8015920 <tcp_oos_insert_segment>
                  }
                  break;
 801681a:	e0e1      	b.n	80169e0 <tcp_receive+0xeb8>
 801681c:	200047e4 	.word	0x200047e4
 8016820:	200047e1 	.word	0x200047e1
 8016824:	200047b4 	.word	0x200047b4
 8016828:	200047d4 	.word	0x200047d4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801682c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801682e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8016830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	2b00      	cmp	r3, #0
 8016836:	f040 80c5 	bne.w	80169c4 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801683a:	4b7f      	ldr	r3, [pc, #508]	@ (8016a38 <tcp_receive+0xf10>)
 801683c:	681a      	ldr	r2, [r3, #0]
 801683e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016840:	68db      	ldr	r3, [r3, #12]
 8016842:	685b      	ldr	r3, [r3, #4]
 8016844:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8016846:	2b00      	cmp	r3, #0
 8016848:	f340 80bc 	ble.w	80169c4 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801684c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801684e:	68db      	ldr	r3, [r3, #12]
 8016850:	899b      	ldrh	r3, [r3, #12]
 8016852:	b29b      	uxth	r3, r3
 8016854:	4618      	mov	r0, r3
 8016856:	f7fa f94f 	bl	8010af8 <lwip_htons>
 801685a:	4603      	mov	r3, r0
 801685c:	b2db      	uxtb	r3, r3
 801685e:	f003 0301 	and.w	r3, r3, #1
 8016862:	2b00      	cmp	r3, #0
 8016864:	f040 80be 	bne.w	80169e4 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8016868:	4874      	ldr	r0, [pc, #464]	@ (8016a3c <tcp_receive+0xf14>)
 801686a:	f7fd fb09 	bl	8013e80 <tcp_seg_copy>
 801686e:	4602      	mov	r2, r0
 8016870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016872:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8016874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	2b00      	cmp	r3, #0
 801687a:	f000 80b5 	beq.w	80169e8 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801687e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016880:	68db      	ldr	r3, [r3, #12]
 8016882:	685b      	ldr	r3, [r3, #4]
 8016884:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016886:	8912      	ldrh	r2, [r2, #8]
 8016888:	441a      	add	r2, r3
 801688a:	4b6b      	ldr	r3, [pc, #428]	@ (8016a38 <tcp_receive+0xf10>)
 801688c:	681b      	ldr	r3, [r3, #0]
 801688e:	1ad3      	subs	r3, r2, r3
 8016890:	2b00      	cmp	r3, #0
 8016892:	dd12      	ble.n	80168ba <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8016894:	4b68      	ldr	r3, [pc, #416]	@ (8016a38 <tcp_receive+0xf10>)
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	b29a      	uxth	r2, r3
 801689a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801689c:	68db      	ldr	r3, [r3, #12]
 801689e:	685b      	ldr	r3, [r3, #4]
 80168a0:	b29b      	uxth	r3, r3
 80168a2:	1ad3      	subs	r3, r2, r3
 80168a4:	b29a      	uxth	r2, r3
 80168a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80168a8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80168aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80168ac:	685a      	ldr	r2, [r3, #4]
 80168ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80168b0:	891b      	ldrh	r3, [r3, #8]
 80168b2:	4619      	mov	r1, r3
 80168b4:	4610      	mov	r0, r2
 80168b6:	f7fb fced 	bl	8012294 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80168ba:	4b61      	ldr	r3, [pc, #388]	@ (8016a40 <tcp_receive+0xf18>)
 80168bc:	881b      	ldrh	r3, [r3, #0]
 80168be:	461a      	mov	r2, r3
 80168c0:	4b5d      	ldr	r3, [pc, #372]	@ (8016a38 <tcp_receive+0xf10>)
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	441a      	add	r2, r3
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80168ca:	6879      	ldr	r1, [r7, #4]
 80168cc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80168ce:	440b      	add	r3, r1
 80168d0:	1ad3      	subs	r3, r2, r3
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	f340 8088 	ble.w	80169e8 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80168d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	68db      	ldr	r3, [r3, #12]
 80168de:	899b      	ldrh	r3, [r3, #12]
 80168e0:	b29b      	uxth	r3, r3
 80168e2:	4618      	mov	r0, r3
 80168e4:	f7fa f908 	bl	8010af8 <lwip_htons>
 80168e8:	4603      	mov	r3, r0
 80168ea:	b2db      	uxtb	r3, r3
 80168ec:	f003 0301 	and.w	r3, r3, #1
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d021      	beq.n	8016938 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80168f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	68db      	ldr	r3, [r3, #12]
 80168fa:	899b      	ldrh	r3, [r3, #12]
 80168fc:	b29b      	uxth	r3, r3
 80168fe:	b21b      	sxth	r3, r3
 8016900:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8016904:	b21c      	sxth	r4, r3
 8016906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	68db      	ldr	r3, [r3, #12]
 801690c:	899b      	ldrh	r3, [r3, #12]
 801690e:	b29b      	uxth	r3, r3
 8016910:	4618      	mov	r0, r3
 8016912:	f7fa f8f1 	bl	8010af8 <lwip_htons>
 8016916:	4603      	mov	r3, r0
 8016918:	b2db      	uxtb	r3, r3
 801691a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801691e:	b29b      	uxth	r3, r3
 8016920:	4618      	mov	r0, r3
 8016922:	f7fa f8e9 	bl	8010af8 <lwip_htons>
 8016926:	4603      	mov	r3, r0
 8016928:	b21b      	sxth	r3, r3
 801692a:	4323      	orrs	r3, r4
 801692c:	b21a      	sxth	r2, r3
 801692e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	68db      	ldr	r3, [r3, #12]
 8016934:	b292      	uxth	r2, r2
 8016936:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801693c:	b29a      	uxth	r2, r3
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016942:	4413      	add	r3, r2
 8016944:	b299      	uxth	r1, r3
 8016946:	4b3c      	ldr	r3, [pc, #240]	@ (8016a38 <tcp_receive+0xf10>)
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	b29a      	uxth	r2, r3
 801694c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	1a8a      	subs	r2, r1, r2
 8016952:	b292      	uxth	r2, r2
 8016954:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8016956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	685a      	ldr	r2, [r3, #4]
 801695c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	891b      	ldrh	r3, [r3, #8]
 8016962:	4619      	mov	r1, r3
 8016964:	4610      	mov	r0, r2
 8016966:	f7fb fc95 	bl	8012294 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801696a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	891c      	ldrh	r4, [r3, #8]
 8016970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	68db      	ldr	r3, [r3, #12]
 8016976:	899b      	ldrh	r3, [r3, #12]
 8016978:	b29b      	uxth	r3, r3
 801697a:	4618      	mov	r0, r3
 801697c:	f7fa f8bc 	bl	8010af8 <lwip_htons>
 8016980:	4603      	mov	r3, r0
 8016982:	b2db      	uxtb	r3, r3
 8016984:	f003 0303 	and.w	r3, r3, #3
 8016988:	2b00      	cmp	r3, #0
 801698a:	d001      	beq.n	8016990 <tcp_receive+0xe68>
 801698c:	2301      	movs	r3, #1
 801698e:	e000      	b.n	8016992 <tcp_receive+0xe6a>
 8016990:	2300      	movs	r3, #0
 8016992:	4423      	add	r3, r4
 8016994:	b29a      	uxth	r2, r3
 8016996:	4b2a      	ldr	r3, [pc, #168]	@ (8016a40 <tcp_receive+0xf18>)
 8016998:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801699a:	4b29      	ldr	r3, [pc, #164]	@ (8016a40 <tcp_receive+0xf18>)
 801699c:	881b      	ldrh	r3, [r3, #0]
 801699e:	461a      	mov	r2, r3
 80169a0:	4b25      	ldr	r3, [pc, #148]	@ (8016a38 <tcp_receive+0xf10>)
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	441a      	add	r2, r3
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80169aa:	6879      	ldr	r1, [r7, #4]
 80169ac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80169ae:	440b      	add	r3, r1
 80169b0:	429a      	cmp	r2, r3
 80169b2:	d019      	beq.n	80169e8 <tcp_receive+0xec0>
 80169b4:	4b23      	ldr	r3, [pc, #140]	@ (8016a44 <tcp_receive+0xf1c>)
 80169b6:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80169ba:	4923      	ldr	r1, [pc, #140]	@ (8016a48 <tcp_receive+0xf20>)
 80169bc:	4823      	ldr	r0, [pc, #140]	@ (8016a4c <tcp_receive+0xf24>)
 80169be:	f008 f80f 	bl	801e9e0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80169c2:	e011      	b.n	80169e8 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80169c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80169ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	f47f aea5 	bne.w	801671c <tcp_receive+0xbf4>
 80169d2:	e00a      	b.n	80169ea <tcp_receive+0xec2>
                break;
 80169d4:	bf00      	nop
 80169d6:	e008      	b.n	80169ea <tcp_receive+0xec2>
                break;
 80169d8:	bf00      	nop
 80169da:	e006      	b.n	80169ea <tcp_receive+0xec2>
                  break;
 80169dc:	bf00      	nop
 80169de:	e004      	b.n	80169ea <tcp_receive+0xec2>
                  break;
 80169e0:	bf00      	nop
 80169e2:	e002      	b.n	80169ea <tcp_receive+0xec2>
                  break;
 80169e4:	bf00      	nop
 80169e6:	e000      	b.n	80169ea <tcp_receive+0xec2>
                break;
 80169e8:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80169ea:	6878      	ldr	r0, [r7, #4]
 80169ec:	f001 fa30 	bl	8017e50 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80169f0:	e003      	b.n	80169fa <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80169f2:	6878      	ldr	r0, [r7, #4]
 80169f4:	f001 fa2c 	bl	8017e50 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80169f8:	e01a      	b.n	8016a30 <tcp_receive+0xf08>
 80169fa:	e019      	b.n	8016a30 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80169fc:	4b0e      	ldr	r3, [pc, #56]	@ (8016a38 <tcp_receive+0xf10>)
 80169fe:	681a      	ldr	r2, [r3, #0]
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a04:	1ad3      	subs	r3, r2, r3
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	db0a      	blt.n	8016a20 <tcp_receive+0xef8>
 8016a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8016a38 <tcp_receive+0xf10>)
 8016a0c:	681a      	ldr	r2, [r3, #0]
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a12:	6879      	ldr	r1, [r7, #4]
 8016a14:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016a16:	440b      	add	r3, r1
 8016a18:	1ad3      	subs	r3, r2, r3
 8016a1a:	3301      	adds	r3, #1
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	dd07      	ble.n	8016a30 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	8b5b      	ldrh	r3, [r3, #26]
 8016a24:	f043 0302 	orr.w	r3, r3, #2
 8016a28:	b29a      	uxth	r2, r3
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8016a2e:	e7ff      	b.n	8016a30 <tcp_receive+0xf08>
 8016a30:	bf00      	nop
 8016a32:	3750      	adds	r7, #80	@ 0x50
 8016a34:	46bd      	mov	sp, r7
 8016a36:	bdb0      	pop	{r4, r5, r7, pc}
 8016a38:	200047d4 	.word	0x200047d4
 8016a3c:	200047b4 	.word	0x200047b4
 8016a40:	200047de 	.word	0x200047de
 8016a44:	080216cc 	.word	0x080216cc
 8016a48:	08021a74 	.word	0x08021a74
 8016a4c:	08021718 	.word	0x08021718

08016a50 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8016a50:	b480      	push	{r7}
 8016a52:	b083      	sub	sp, #12
 8016a54:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8016a56:	4b15      	ldr	r3, [pc, #84]	@ (8016aac <tcp_get_next_optbyte+0x5c>)
 8016a58:	881b      	ldrh	r3, [r3, #0]
 8016a5a:	1c5a      	adds	r2, r3, #1
 8016a5c:	b291      	uxth	r1, r2
 8016a5e:	4a13      	ldr	r2, [pc, #76]	@ (8016aac <tcp_get_next_optbyte+0x5c>)
 8016a60:	8011      	strh	r1, [r2, #0]
 8016a62:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8016a64:	4b12      	ldr	r3, [pc, #72]	@ (8016ab0 <tcp_get_next_optbyte+0x60>)
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d004      	beq.n	8016a76 <tcp_get_next_optbyte+0x26>
 8016a6c:	4b11      	ldr	r3, [pc, #68]	@ (8016ab4 <tcp_get_next_optbyte+0x64>)
 8016a6e:	881b      	ldrh	r3, [r3, #0]
 8016a70:	88fa      	ldrh	r2, [r7, #6]
 8016a72:	429a      	cmp	r2, r3
 8016a74:	d208      	bcs.n	8016a88 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8016a76:	4b10      	ldr	r3, [pc, #64]	@ (8016ab8 <tcp_get_next_optbyte+0x68>)
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	3314      	adds	r3, #20
 8016a7c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8016a7e:	88fb      	ldrh	r3, [r7, #6]
 8016a80:	683a      	ldr	r2, [r7, #0]
 8016a82:	4413      	add	r3, r2
 8016a84:	781b      	ldrb	r3, [r3, #0]
 8016a86:	e00b      	b.n	8016aa0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8016a88:	88fb      	ldrh	r3, [r7, #6]
 8016a8a:	b2da      	uxtb	r2, r3
 8016a8c:	4b09      	ldr	r3, [pc, #36]	@ (8016ab4 <tcp_get_next_optbyte+0x64>)
 8016a8e:	881b      	ldrh	r3, [r3, #0]
 8016a90:	b2db      	uxtb	r3, r3
 8016a92:	1ad3      	subs	r3, r2, r3
 8016a94:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8016a96:	4b06      	ldr	r3, [pc, #24]	@ (8016ab0 <tcp_get_next_optbyte+0x60>)
 8016a98:	681a      	ldr	r2, [r3, #0]
 8016a9a:	797b      	ldrb	r3, [r7, #5]
 8016a9c:	4413      	add	r3, r2
 8016a9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	370c      	adds	r7, #12
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aaa:	4770      	bx	lr
 8016aac:	200047d0 	.word	0x200047d0
 8016ab0:	200047cc 	.word	0x200047cc
 8016ab4:	200047ca 	.word	0x200047ca
 8016ab8:	200047c4 	.word	0x200047c4

08016abc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b084      	sub	sp, #16
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d106      	bne.n	8016ad8 <tcp_parseopt+0x1c>
 8016aca:	4b32      	ldr	r3, [pc, #200]	@ (8016b94 <tcp_parseopt+0xd8>)
 8016acc:	f240 727d 	movw	r2, #1917	@ 0x77d
 8016ad0:	4931      	ldr	r1, [pc, #196]	@ (8016b98 <tcp_parseopt+0xdc>)
 8016ad2:	4832      	ldr	r0, [pc, #200]	@ (8016b9c <tcp_parseopt+0xe0>)
 8016ad4:	f007 ff84 	bl	801e9e0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8016ad8:	4b31      	ldr	r3, [pc, #196]	@ (8016ba0 <tcp_parseopt+0xe4>)
 8016ada:	881b      	ldrh	r3, [r3, #0]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d056      	beq.n	8016b8e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016ae0:	4b30      	ldr	r3, [pc, #192]	@ (8016ba4 <tcp_parseopt+0xe8>)
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	801a      	strh	r2, [r3, #0]
 8016ae6:	e046      	b.n	8016b76 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8016ae8:	f7ff ffb2 	bl	8016a50 <tcp_get_next_optbyte>
 8016aec:	4603      	mov	r3, r0
 8016aee:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8016af0:	7bfb      	ldrb	r3, [r7, #15]
 8016af2:	2b02      	cmp	r3, #2
 8016af4:	d006      	beq.n	8016b04 <tcp_parseopt+0x48>
 8016af6:	2b02      	cmp	r3, #2
 8016af8:	dc2a      	bgt.n	8016b50 <tcp_parseopt+0x94>
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d042      	beq.n	8016b84 <tcp_parseopt+0xc8>
 8016afe:	2b01      	cmp	r3, #1
 8016b00:	d038      	beq.n	8016b74 <tcp_parseopt+0xb8>
 8016b02:	e025      	b.n	8016b50 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8016b04:	f7ff ffa4 	bl	8016a50 <tcp_get_next_optbyte>
 8016b08:	4603      	mov	r3, r0
 8016b0a:	2b04      	cmp	r3, #4
 8016b0c:	d13c      	bne.n	8016b88 <tcp_parseopt+0xcc>
 8016b0e:	4b25      	ldr	r3, [pc, #148]	@ (8016ba4 <tcp_parseopt+0xe8>)
 8016b10:	881b      	ldrh	r3, [r3, #0]
 8016b12:	3301      	adds	r3, #1
 8016b14:	4a22      	ldr	r2, [pc, #136]	@ (8016ba0 <tcp_parseopt+0xe4>)
 8016b16:	8812      	ldrh	r2, [r2, #0]
 8016b18:	4293      	cmp	r3, r2
 8016b1a:	da35      	bge.n	8016b88 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8016b1c:	f7ff ff98 	bl	8016a50 <tcp_get_next_optbyte>
 8016b20:	4603      	mov	r3, r0
 8016b22:	021b      	lsls	r3, r3, #8
 8016b24:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8016b26:	f7ff ff93 	bl	8016a50 <tcp_get_next_optbyte>
 8016b2a:	4603      	mov	r3, r0
 8016b2c:	461a      	mov	r2, r3
 8016b2e:	89bb      	ldrh	r3, [r7, #12]
 8016b30:	4313      	orrs	r3, r2
 8016b32:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8016b34:	89bb      	ldrh	r3, [r7, #12]
 8016b36:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8016b3a:	d804      	bhi.n	8016b46 <tcp_parseopt+0x8a>
 8016b3c:	89bb      	ldrh	r3, [r7, #12]
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d001      	beq.n	8016b46 <tcp_parseopt+0x8a>
 8016b42:	89ba      	ldrh	r2, [r7, #12]
 8016b44:	e001      	b.n	8016b4a <tcp_parseopt+0x8e>
 8016b46:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8016b4e:	e012      	b.n	8016b76 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8016b50:	f7ff ff7e 	bl	8016a50 <tcp_get_next_optbyte>
 8016b54:	4603      	mov	r3, r0
 8016b56:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8016b58:	7afb      	ldrb	r3, [r7, #11]
 8016b5a:	2b01      	cmp	r3, #1
 8016b5c:	d916      	bls.n	8016b8c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8016b5e:	7afb      	ldrb	r3, [r7, #11]
 8016b60:	b29a      	uxth	r2, r3
 8016b62:	4b10      	ldr	r3, [pc, #64]	@ (8016ba4 <tcp_parseopt+0xe8>)
 8016b64:	881b      	ldrh	r3, [r3, #0]
 8016b66:	4413      	add	r3, r2
 8016b68:	b29b      	uxth	r3, r3
 8016b6a:	3b02      	subs	r3, #2
 8016b6c:	b29a      	uxth	r2, r3
 8016b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8016ba4 <tcp_parseopt+0xe8>)
 8016b70:	801a      	strh	r2, [r3, #0]
 8016b72:	e000      	b.n	8016b76 <tcp_parseopt+0xba>
          break;
 8016b74:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016b76:	4b0b      	ldr	r3, [pc, #44]	@ (8016ba4 <tcp_parseopt+0xe8>)
 8016b78:	881a      	ldrh	r2, [r3, #0]
 8016b7a:	4b09      	ldr	r3, [pc, #36]	@ (8016ba0 <tcp_parseopt+0xe4>)
 8016b7c:	881b      	ldrh	r3, [r3, #0]
 8016b7e:	429a      	cmp	r2, r3
 8016b80:	d3b2      	bcc.n	8016ae8 <tcp_parseopt+0x2c>
 8016b82:	e004      	b.n	8016b8e <tcp_parseopt+0xd2>
          return;
 8016b84:	bf00      	nop
 8016b86:	e002      	b.n	8016b8e <tcp_parseopt+0xd2>
            return;
 8016b88:	bf00      	nop
 8016b8a:	e000      	b.n	8016b8e <tcp_parseopt+0xd2>
            return;
 8016b8c:	bf00      	nop
      }
    }
  }
}
 8016b8e:	3710      	adds	r7, #16
 8016b90:	46bd      	mov	sp, r7
 8016b92:	bd80      	pop	{r7, pc}
 8016b94:	080216cc 	.word	0x080216cc
 8016b98:	08021b30 	.word	0x08021b30
 8016b9c:	08021718 	.word	0x08021718
 8016ba0:	200047c8 	.word	0x200047c8
 8016ba4:	200047d0 	.word	0x200047d0

08016ba8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016ba8:	b480      	push	{r7}
 8016baa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8016bac:	4b05      	ldr	r3, [pc, #20]	@ (8016bc4 <tcp_trigger_input_pcb_close+0x1c>)
 8016bae:	781b      	ldrb	r3, [r3, #0]
 8016bb0:	f043 0310 	orr.w	r3, r3, #16
 8016bb4:	b2da      	uxtb	r2, r3
 8016bb6:	4b03      	ldr	r3, [pc, #12]	@ (8016bc4 <tcp_trigger_input_pcb_close+0x1c>)
 8016bb8:	701a      	strb	r2, [r3, #0]
}
 8016bba:	bf00      	nop
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc2:	4770      	bx	lr
 8016bc4:	200047e1 	.word	0x200047e1

08016bc8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8016bc8:	b580      	push	{r7, lr}
 8016bca:	b084      	sub	sp, #16
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	60f8      	str	r0, [r7, #12]
 8016bd0:	60b9      	str	r1, [r7, #8]
 8016bd2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d00a      	beq.n	8016bf0 <tcp_route+0x28>
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	7a1b      	ldrb	r3, [r3, #8]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d006      	beq.n	8016bf0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	7a1b      	ldrb	r3, [r3, #8]
 8016be6:	4618      	mov	r0, r3
 8016be8:	f7fb f94c 	bl	8011e84 <netif_get_by_index>
 8016bec:	4603      	mov	r3, r0
 8016bee:	e003      	b.n	8016bf8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8016bf0:	6878      	ldr	r0, [r7, #4]
 8016bf2:	f005 fbc5 	bl	801c380 <ip4_route>
 8016bf6:	4603      	mov	r3, r0
  }
}
 8016bf8:	4618      	mov	r0, r3
 8016bfa:	3710      	adds	r7, #16
 8016bfc:	46bd      	mov	sp, r7
 8016bfe:	bd80      	pop	{r7, pc}

08016c00 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8016c00:	b590      	push	{r4, r7, lr}
 8016c02:	b087      	sub	sp, #28
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	60f8      	str	r0, [r7, #12]
 8016c08:	60b9      	str	r1, [r7, #8]
 8016c0a:	603b      	str	r3, [r7, #0]
 8016c0c:	4613      	mov	r3, r2
 8016c0e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d105      	bne.n	8016c22 <tcp_create_segment+0x22>
 8016c16:	4b43      	ldr	r3, [pc, #268]	@ (8016d24 <tcp_create_segment+0x124>)
 8016c18:	22a3      	movs	r2, #163	@ 0xa3
 8016c1a:	4943      	ldr	r1, [pc, #268]	@ (8016d28 <tcp_create_segment+0x128>)
 8016c1c:	4843      	ldr	r0, [pc, #268]	@ (8016d2c <tcp_create_segment+0x12c>)
 8016c1e:	f007 fedf 	bl	801e9e0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8016c22:	68bb      	ldr	r3, [r7, #8]
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d105      	bne.n	8016c34 <tcp_create_segment+0x34>
 8016c28:	4b3e      	ldr	r3, [pc, #248]	@ (8016d24 <tcp_create_segment+0x124>)
 8016c2a:	22a4      	movs	r2, #164	@ 0xa4
 8016c2c:	4940      	ldr	r1, [pc, #256]	@ (8016d30 <tcp_create_segment+0x130>)
 8016c2e:	483f      	ldr	r0, [pc, #252]	@ (8016d2c <tcp_create_segment+0x12c>)
 8016c30:	f007 fed6 	bl	801e9e0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016c34:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016c38:	009b      	lsls	r3, r3, #2
 8016c3a:	b2db      	uxtb	r3, r3
 8016c3c:	f003 0304 	and.w	r3, r3, #4
 8016c40:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8016c42:	2003      	movs	r0, #3
 8016c44:	f7fa fd50 	bl	80116e8 <memp_malloc>
 8016c48:	6138      	str	r0, [r7, #16]
 8016c4a:	693b      	ldr	r3, [r7, #16]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d104      	bne.n	8016c5a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8016c50:	68b8      	ldr	r0, [r7, #8]
 8016c52:	f7fb fca5 	bl	80125a0 <pbuf_free>
    return NULL;
 8016c56:	2300      	movs	r3, #0
 8016c58:	e060      	b.n	8016d1c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8016c5a:	693b      	ldr	r3, [r7, #16]
 8016c5c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8016c60:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8016c62:	693b      	ldr	r3, [r7, #16]
 8016c64:	2200      	movs	r2, #0
 8016c66:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016c68:	693b      	ldr	r3, [r7, #16]
 8016c6a:	68ba      	ldr	r2, [r7, #8]
 8016c6c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8016c6e:	68bb      	ldr	r3, [r7, #8]
 8016c70:	891a      	ldrh	r2, [r3, #8]
 8016c72:	7dfb      	ldrb	r3, [r7, #23]
 8016c74:	b29b      	uxth	r3, r3
 8016c76:	429a      	cmp	r2, r3
 8016c78:	d205      	bcs.n	8016c86 <tcp_create_segment+0x86>
 8016c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8016d24 <tcp_create_segment+0x124>)
 8016c7c:	22b0      	movs	r2, #176	@ 0xb0
 8016c7e:	492d      	ldr	r1, [pc, #180]	@ (8016d34 <tcp_create_segment+0x134>)
 8016c80:	482a      	ldr	r0, [pc, #168]	@ (8016d2c <tcp_create_segment+0x12c>)
 8016c82:	f007 fead 	bl	801e9e0 <iprintf>
  seg->len = p->tot_len - optlen;
 8016c86:	68bb      	ldr	r3, [r7, #8]
 8016c88:	891a      	ldrh	r2, [r3, #8]
 8016c8a:	7dfb      	ldrb	r3, [r7, #23]
 8016c8c:	b29b      	uxth	r3, r3
 8016c8e:	1ad3      	subs	r3, r2, r3
 8016c90:	b29a      	uxth	r2, r3
 8016c92:	693b      	ldr	r3, [r7, #16]
 8016c94:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8016c96:	2114      	movs	r1, #20
 8016c98:	68b8      	ldr	r0, [r7, #8]
 8016c9a:	f7fb fbeb 	bl	8012474 <pbuf_add_header>
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d004      	beq.n	8016cae <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8016ca4:	6938      	ldr	r0, [r7, #16]
 8016ca6:	f7fd f8d2 	bl	8013e4e <tcp_seg_free>
    return NULL;
 8016caa:	2300      	movs	r3, #0
 8016cac:	e036      	b.n	8016d1c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8016cae:	693b      	ldr	r3, [r7, #16]
 8016cb0:	685b      	ldr	r3, [r3, #4]
 8016cb2:	685a      	ldr	r2, [r3, #4]
 8016cb4:	693b      	ldr	r3, [r7, #16]
 8016cb6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	8ada      	ldrh	r2, [r3, #22]
 8016cbc:	693b      	ldr	r3, [r7, #16]
 8016cbe:	68dc      	ldr	r4, [r3, #12]
 8016cc0:	4610      	mov	r0, r2
 8016cc2:	f7f9 ff19 	bl	8010af8 <lwip_htons>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8016cca:	68fb      	ldr	r3, [r7, #12]
 8016ccc:	8b1a      	ldrh	r2, [r3, #24]
 8016cce:	693b      	ldr	r3, [r7, #16]
 8016cd0:	68dc      	ldr	r4, [r3, #12]
 8016cd2:	4610      	mov	r0, r2
 8016cd4:	f7f9 ff10 	bl	8010af8 <lwip_htons>
 8016cd8:	4603      	mov	r3, r0
 8016cda:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8016cdc:	693b      	ldr	r3, [r7, #16]
 8016cde:	68dc      	ldr	r4, [r3, #12]
 8016ce0:	6838      	ldr	r0, [r7, #0]
 8016ce2:	f7f9 ff1f 	bl	8010b24 <lwip_htonl>
 8016ce6:	4603      	mov	r3, r0
 8016ce8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8016cea:	7dfb      	ldrb	r3, [r7, #23]
 8016cec:	089b      	lsrs	r3, r3, #2
 8016cee:	b2db      	uxtb	r3, r3
 8016cf0:	3305      	adds	r3, #5
 8016cf2:	b29b      	uxth	r3, r3
 8016cf4:	031b      	lsls	r3, r3, #12
 8016cf6:	b29a      	uxth	r2, r3
 8016cf8:	79fb      	ldrb	r3, [r7, #7]
 8016cfa:	b29b      	uxth	r3, r3
 8016cfc:	4313      	orrs	r3, r2
 8016cfe:	b29a      	uxth	r2, r3
 8016d00:	693b      	ldr	r3, [r7, #16]
 8016d02:	68dc      	ldr	r4, [r3, #12]
 8016d04:	4610      	mov	r0, r2
 8016d06:	f7f9 fef7 	bl	8010af8 <lwip_htons>
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8016d0e:	693b      	ldr	r3, [r7, #16]
 8016d10:	68db      	ldr	r3, [r3, #12]
 8016d12:	2200      	movs	r2, #0
 8016d14:	749a      	strb	r2, [r3, #18]
 8016d16:	2200      	movs	r2, #0
 8016d18:	74da      	strb	r2, [r3, #19]
  return seg;
 8016d1a:	693b      	ldr	r3, [r7, #16]
}
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	371c      	adds	r7, #28
 8016d20:	46bd      	mov	sp, r7
 8016d22:	bd90      	pop	{r4, r7, pc}
 8016d24:	08021b4c 	.word	0x08021b4c
 8016d28:	08021b80 	.word	0x08021b80
 8016d2c:	08021ba0 	.word	0x08021ba0
 8016d30:	08021bc8 	.word	0x08021bc8
 8016d34:	08021bec 	.word	0x08021bec

08016d38 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016d38:	b590      	push	{r4, r7, lr}
 8016d3a:	b08b      	sub	sp, #44	@ 0x2c
 8016d3c:	af02      	add	r7, sp, #8
 8016d3e:	6078      	str	r0, [r7, #4]
 8016d40:	460b      	mov	r3, r1
 8016d42:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016d44:	2300      	movs	r3, #0
 8016d46:	61fb      	str	r3, [r7, #28]
 8016d48:	2300      	movs	r3, #0
 8016d4a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8016d4c:	2300      	movs	r3, #0
 8016d4e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d106      	bne.n	8016d64 <tcp_split_unsent_seg+0x2c>
 8016d56:	4b95      	ldr	r3, [pc, #596]	@ (8016fac <tcp_split_unsent_seg+0x274>)
 8016d58:	f240 324b 	movw	r2, #843	@ 0x34b
 8016d5c:	4994      	ldr	r1, [pc, #592]	@ (8016fb0 <tcp_split_unsent_seg+0x278>)
 8016d5e:	4895      	ldr	r0, [pc, #596]	@ (8016fb4 <tcp_split_unsent_seg+0x27c>)
 8016d60:	f007 fe3e 	bl	801e9e0 <iprintf>

  useg = pcb->unsent;
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d68:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016d6a:	697b      	ldr	r3, [r7, #20]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d102      	bne.n	8016d76 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016d70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016d74:	e116      	b.n	8016fa4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8016d76:	887b      	ldrh	r3, [r7, #2]
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d109      	bne.n	8016d90 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016d7c:	4b8b      	ldr	r3, [pc, #556]	@ (8016fac <tcp_split_unsent_seg+0x274>)
 8016d7e:	f240 3253 	movw	r2, #851	@ 0x353
 8016d82:	498d      	ldr	r1, [pc, #564]	@ (8016fb8 <tcp_split_unsent_seg+0x280>)
 8016d84:	488b      	ldr	r0, [pc, #556]	@ (8016fb4 <tcp_split_unsent_seg+0x27c>)
 8016d86:	f007 fe2b 	bl	801e9e0 <iprintf>
    return ERR_VAL;
 8016d8a:	f06f 0305 	mvn.w	r3, #5
 8016d8e:	e109      	b.n	8016fa4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8016d90:	697b      	ldr	r3, [r7, #20]
 8016d92:	891b      	ldrh	r3, [r3, #8]
 8016d94:	887a      	ldrh	r2, [r7, #2]
 8016d96:	429a      	cmp	r2, r3
 8016d98:	d301      	bcc.n	8016d9e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	e102      	b.n	8016fa4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016da2:	887a      	ldrh	r2, [r7, #2]
 8016da4:	429a      	cmp	r2, r3
 8016da6:	d906      	bls.n	8016db6 <tcp_split_unsent_seg+0x7e>
 8016da8:	4b80      	ldr	r3, [pc, #512]	@ (8016fac <tcp_split_unsent_seg+0x274>)
 8016daa:	f240 325b 	movw	r2, #859	@ 0x35b
 8016dae:	4983      	ldr	r1, [pc, #524]	@ (8016fbc <tcp_split_unsent_seg+0x284>)
 8016db0:	4880      	ldr	r0, [pc, #512]	@ (8016fb4 <tcp_split_unsent_seg+0x27c>)
 8016db2:	f007 fe15 	bl	801e9e0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8016db6:	697b      	ldr	r3, [r7, #20]
 8016db8:	891b      	ldrh	r3, [r3, #8]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d106      	bne.n	8016dcc <tcp_split_unsent_seg+0x94>
 8016dbe:	4b7b      	ldr	r3, [pc, #492]	@ (8016fac <tcp_split_unsent_seg+0x274>)
 8016dc0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8016dc4:	497e      	ldr	r1, [pc, #504]	@ (8016fc0 <tcp_split_unsent_seg+0x288>)
 8016dc6:	487b      	ldr	r0, [pc, #492]	@ (8016fb4 <tcp_split_unsent_seg+0x27c>)
 8016dc8:	f007 fe0a 	bl	801e9e0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8016dcc:	697b      	ldr	r3, [r7, #20]
 8016dce:	7a9b      	ldrb	r3, [r3, #10]
 8016dd0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8016dd2:	7bfb      	ldrb	r3, [r7, #15]
 8016dd4:	009b      	lsls	r3, r3, #2
 8016dd6:	b2db      	uxtb	r3, r3
 8016dd8:	f003 0304 	and.w	r3, r3, #4
 8016ddc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8016dde:	697b      	ldr	r3, [r7, #20]
 8016de0:	891a      	ldrh	r2, [r3, #8]
 8016de2:	887b      	ldrh	r3, [r7, #2]
 8016de4:	1ad3      	subs	r3, r2, r3
 8016de6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016de8:	7bbb      	ldrb	r3, [r7, #14]
 8016dea:	b29a      	uxth	r2, r3
 8016dec:	89bb      	ldrh	r3, [r7, #12]
 8016dee:	4413      	add	r3, r2
 8016df0:	b29b      	uxth	r3, r3
 8016df2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016df6:	4619      	mov	r1, r3
 8016df8:	2036      	movs	r0, #54	@ 0x36
 8016dfa:	f7fb f8ed 	bl	8011fd8 <pbuf_alloc>
 8016dfe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016e00:	693b      	ldr	r3, [r7, #16]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	f000 80b7 	beq.w	8016f76 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016e08:	697b      	ldr	r3, [r7, #20]
 8016e0a:	685b      	ldr	r3, [r3, #4]
 8016e0c:	891a      	ldrh	r2, [r3, #8]
 8016e0e:	697b      	ldr	r3, [r7, #20]
 8016e10:	891b      	ldrh	r3, [r3, #8]
 8016e12:	1ad3      	subs	r3, r2, r3
 8016e14:	b29a      	uxth	r2, r3
 8016e16:	887b      	ldrh	r3, [r7, #2]
 8016e18:	4413      	add	r3, r2
 8016e1a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8016e1c:	697b      	ldr	r3, [r7, #20]
 8016e1e:	6858      	ldr	r0, [r3, #4]
 8016e20:	693b      	ldr	r3, [r7, #16]
 8016e22:	685a      	ldr	r2, [r3, #4]
 8016e24:	7bbb      	ldrb	r3, [r7, #14]
 8016e26:	18d1      	adds	r1, r2, r3
 8016e28:	897b      	ldrh	r3, [r7, #10]
 8016e2a:	89ba      	ldrh	r2, [r7, #12]
 8016e2c:	f7fb fdbe 	bl	80129ac <pbuf_copy_partial>
 8016e30:	4603      	mov	r3, r0
 8016e32:	461a      	mov	r2, r3
 8016e34:	89bb      	ldrh	r3, [r7, #12]
 8016e36:	4293      	cmp	r3, r2
 8016e38:	f040 809f 	bne.w	8016f7a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016e3c:	697b      	ldr	r3, [r7, #20]
 8016e3e:	68db      	ldr	r3, [r3, #12]
 8016e40:	899b      	ldrh	r3, [r3, #12]
 8016e42:	b29b      	uxth	r3, r3
 8016e44:	4618      	mov	r0, r3
 8016e46:	f7f9 fe57 	bl	8010af8 <lwip_htons>
 8016e4a:	4603      	mov	r3, r0
 8016e4c:	b2db      	uxtb	r3, r3
 8016e4e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016e52:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016e54:	2300      	movs	r3, #0
 8016e56:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016e58:	7efb      	ldrb	r3, [r7, #27]
 8016e5a:	f003 0308 	and.w	r3, r3, #8
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d007      	beq.n	8016e72 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8016e62:	7efb      	ldrb	r3, [r7, #27]
 8016e64:	f023 0308 	bic.w	r3, r3, #8
 8016e68:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016e6a:	7ebb      	ldrb	r3, [r7, #26]
 8016e6c:	f043 0308 	orr.w	r3, r3, #8
 8016e70:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8016e72:	7efb      	ldrb	r3, [r7, #27]
 8016e74:	f003 0301 	and.w	r3, r3, #1
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	d007      	beq.n	8016e8c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016e7c:	7efb      	ldrb	r3, [r7, #27]
 8016e7e:	f023 0301 	bic.w	r3, r3, #1
 8016e82:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016e84:	7ebb      	ldrb	r3, [r7, #26]
 8016e86:	f043 0301 	orr.w	r3, r3, #1
 8016e8a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016e8c:	697b      	ldr	r3, [r7, #20]
 8016e8e:	68db      	ldr	r3, [r3, #12]
 8016e90:	685b      	ldr	r3, [r3, #4]
 8016e92:	4618      	mov	r0, r3
 8016e94:	f7f9 fe46 	bl	8010b24 <lwip_htonl>
 8016e98:	4602      	mov	r2, r0
 8016e9a:	887b      	ldrh	r3, [r7, #2]
 8016e9c:	18d1      	adds	r1, r2, r3
 8016e9e:	7eba      	ldrb	r2, [r7, #26]
 8016ea0:	7bfb      	ldrb	r3, [r7, #15]
 8016ea2:	9300      	str	r3, [sp, #0]
 8016ea4:	460b      	mov	r3, r1
 8016ea6:	6939      	ldr	r1, [r7, #16]
 8016ea8:	6878      	ldr	r0, [r7, #4]
 8016eaa:	f7ff fea9 	bl	8016c00 <tcp_create_segment>
 8016eae:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016eb0:	69fb      	ldr	r3, [r7, #28]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d063      	beq.n	8016f7e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8016eb6:	697b      	ldr	r3, [r7, #20]
 8016eb8:	685b      	ldr	r3, [r3, #4]
 8016eba:	4618      	mov	r0, r3
 8016ebc:	f7fb fbfe 	bl	80126bc <pbuf_clen>
 8016ec0:	4603      	mov	r3, r0
 8016ec2:	461a      	mov	r2, r3
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016eca:	1a9b      	subs	r3, r3, r2
 8016ecc:	b29a      	uxth	r2, r3
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016ed4:	697b      	ldr	r3, [r7, #20]
 8016ed6:	6858      	ldr	r0, [r3, #4]
 8016ed8:	697b      	ldr	r3, [r7, #20]
 8016eda:	685b      	ldr	r3, [r3, #4]
 8016edc:	891a      	ldrh	r2, [r3, #8]
 8016ede:	89bb      	ldrh	r3, [r7, #12]
 8016ee0:	1ad3      	subs	r3, r2, r3
 8016ee2:	b29b      	uxth	r3, r3
 8016ee4:	4619      	mov	r1, r3
 8016ee6:	f7fb f9d5 	bl	8012294 <pbuf_realloc>
  useg->len -= remainder;
 8016eea:	697b      	ldr	r3, [r7, #20]
 8016eec:	891a      	ldrh	r2, [r3, #8]
 8016eee:	89bb      	ldrh	r3, [r7, #12]
 8016ef0:	1ad3      	subs	r3, r2, r3
 8016ef2:	b29a      	uxth	r2, r3
 8016ef4:	697b      	ldr	r3, [r7, #20]
 8016ef6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016ef8:	697b      	ldr	r3, [r7, #20]
 8016efa:	68db      	ldr	r3, [r3, #12]
 8016efc:	899b      	ldrh	r3, [r3, #12]
 8016efe:	b29c      	uxth	r4, r3
 8016f00:	7efb      	ldrb	r3, [r7, #27]
 8016f02:	b29b      	uxth	r3, r3
 8016f04:	4618      	mov	r0, r3
 8016f06:	f7f9 fdf7 	bl	8010af8 <lwip_htons>
 8016f0a:	4603      	mov	r3, r0
 8016f0c:	461a      	mov	r2, r3
 8016f0e:	697b      	ldr	r3, [r7, #20]
 8016f10:	68db      	ldr	r3, [r3, #12]
 8016f12:	4322      	orrs	r2, r4
 8016f14:	b292      	uxth	r2, r2
 8016f16:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016f18:	697b      	ldr	r3, [r7, #20]
 8016f1a:	685b      	ldr	r3, [r3, #4]
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	f7fb fbcd 	bl	80126bc <pbuf_clen>
 8016f22:	4603      	mov	r3, r0
 8016f24:	461a      	mov	r2, r3
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016f2c:	4413      	add	r3, r2
 8016f2e:	b29a      	uxth	r2, r3
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016f36:	69fb      	ldr	r3, [r7, #28]
 8016f38:	685b      	ldr	r3, [r3, #4]
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	f7fb fbbe 	bl	80126bc <pbuf_clen>
 8016f40:	4603      	mov	r3, r0
 8016f42:	461a      	mov	r2, r3
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016f4a:	4413      	add	r3, r2
 8016f4c:	b29a      	uxth	r2, r3
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016f54:	697b      	ldr	r3, [r7, #20]
 8016f56:	681a      	ldr	r2, [r3, #0]
 8016f58:	69fb      	ldr	r3, [r7, #28]
 8016f5a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016f5c:	697b      	ldr	r3, [r7, #20]
 8016f5e:	69fa      	ldr	r2, [r7, #28]
 8016f60:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8016f62:	69fb      	ldr	r3, [r7, #28]
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d103      	bne.n	8016f72 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8016f72:	2300      	movs	r3, #0
 8016f74:	e016      	b.n	8016fa4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016f76:	bf00      	nop
 8016f78:	e002      	b.n	8016f80 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016f7a:	bf00      	nop
 8016f7c:	e000      	b.n	8016f80 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016f7e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016f80:	69fb      	ldr	r3, [r7, #28]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d006      	beq.n	8016f94 <tcp_split_unsent_seg+0x25c>
 8016f86:	4b09      	ldr	r3, [pc, #36]	@ (8016fac <tcp_split_unsent_seg+0x274>)
 8016f88:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8016f8c:	490d      	ldr	r1, [pc, #52]	@ (8016fc4 <tcp_split_unsent_seg+0x28c>)
 8016f8e:	4809      	ldr	r0, [pc, #36]	@ (8016fb4 <tcp_split_unsent_seg+0x27c>)
 8016f90:	f007 fd26 	bl	801e9e0 <iprintf>
  if (p != NULL) {
 8016f94:	693b      	ldr	r3, [r7, #16]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d002      	beq.n	8016fa0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016f9a:	6938      	ldr	r0, [r7, #16]
 8016f9c:	f7fb fb00 	bl	80125a0 <pbuf_free>
  }

  return ERR_MEM;
 8016fa0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	3724      	adds	r7, #36	@ 0x24
 8016fa8:	46bd      	mov	sp, r7
 8016faa:	bd90      	pop	{r4, r7, pc}
 8016fac:	08021b4c 	.word	0x08021b4c
 8016fb0:	08021ee0 	.word	0x08021ee0
 8016fb4:	08021ba0 	.word	0x08021ba0
 8016fb8:	08021f04 	.word	0x08021f04
 8016fbc:	08021f28 	.word	0x08021f28
 8016fc0:	08021f38 	.word	0x08021f38
 8016fc4:	08021f48 	.word	0x08021f48

08016fc8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016fc8:	b590      	push	{r4, r7, lr}
 8016fca:	b085      	sub	sp, #20
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d106      	bne.n	8016fe4 <tcp_send_fin+0x1c>
 8016fd6:	4b21      	ldr	r3, [pc, #132]	@ (801705c <tcp_send_fin+0x94>)
 8016fd8:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8016fdc:	4920      	ldr	r1, [pc, #128]	@ (8017060 <tcp_send_fin+0x98>)
 8016fde:	4821      	ldr	r0, [pc, #132]	@ (8017064 <tcp_send_fin+0x9c>)
 8016fe0:	f007 fcfe 	bl	801e9e0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d02e      	beq.n	801704a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016ff0:	60fb      	str	r3, [r7, #12]
 8016ff2:	e002      	b.n	8016ffa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	681b      	ldr	r3, [r3, #0]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d1f8      	bne.n	8016ff4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	68db      	ldr	r3, [r3, #12]
 8017006:	899b      	ldrh	r3, [r3, #12]
 8017008:	b29b      	uxth	r3, r3
 801700a:	4618      	mov	r0, r3
 801700c:	f7f9 fd74 	bl	8010af8 <lwip_htons>
 8017010:	4603      	mov	r3, r0
 8017012:	b2db      	uxtb	r3, r3
 8017014:	f003 0307 	and.w	r3, r3, #7
 8017018:	2b00      	cmp	r3, #0
 801701a:	d116      	bne.n	801704a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	68db      	ldr	r3, [r3, #12]
 8017020:	899b      	ldrh	r3, [r3, #12]
 8017022:	b29c      	uxth	r4, r3
 8017024:	2001      	movs	r0, #1
 8017026:	f7f9 fd67 	bl	8010af8 <lwip_htons>
 801702a:	4603      	mov	r3, r0
 801702c:	461a      	mov	r2, r3
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	68db      	ldr	r3, [r3, #12]
 8017032:	4322      	orrs	r2, r4
 8017034:	b292      	uxth	r2, r2
 8017036:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	8b5b      	ldrh	r3, [r3, #26]
 801703c:	f043 0320 	orr.w	r3, r3, #32
 8017040:	b29a      	uxth	r2, r3
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8017046:	2300      	movs	r3, #0
 8017048:	e004      	b.n	8017054 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801704a:	2101      	movs	r1, #1
 801704c:	6878      	ldr	r0, [r7, #4]
 801704e:	f000 f80b 	bl	8017068 <tcp_enqueue_flags>
 8017052:	4603      	mov	r3, r0
}
 8017054:	4618      	mov	r0, r3
 8017056:	3714      	adds	r7, #20
 8017058:	46bd      	mov	sp, r7
 801705a:	bd90      	pop	{r4, r7, pc}
 801705c:	08021b4c 	.word	0x08021b4c
 8017060:	08021f54 	.word	0x08021f54
 8017064:	08021ba0 	.word	0x08021ba0

08017068 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8017068:	b580      	push	{r7, lr}
 801706a:	b08a      	sub	sp, #40	@ 0x28
 801706c:	af02      	add	r7, sp, #8
 801706e:	6078      	str	r0, [r7, #4]
 8017070:	460b      	mov	r3, r1
 8017072:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8017074:	2300      	movs	r3, #0
 8017076:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8017078:	2300      	movs	r3, #0
 801707a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801707c:	78fb      	ldrb	r3, [r7, #3]
 801707e:	f003 0303 	and.w	r3, r3, #3
 8017082:	2b00      	cmp	r3, #0
 8017084:	d106      	bne.n	8017094 <tcp_enqueue_flags+0x2c>
 8017086:	4b67      	ldr	r3, [pc, #412]	@ (8017224 <tcp_enqueue_flags+0x1bc>)
 8017088:	f240 4211 	movw	r2, #1041	@ 0x411
 801708c:	4966      	ldr	r1, [pc, #408]	@ (8017228 <tcp_enqueue_flags+0x1c0>)
 801708e:	4867      	ldr	r0, [pc, #412]	@ (801722c <tcp_enqueue_flags+0x1c4>)
 8017090:	f007 fca6 	bl	801e9e0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	2b00      	cmp	r3, #0
 8017098:	d106      	bne.n	80170a8 <tcp_enqueue_flags+0x40>
 801709a:	4b62      	ldr	r3, [pc, #392]	@ (8017224 <tcp_enqueue_flags+0x1bc>)
 801709c:	f240 4213 	movw	r2, #1043	@ 0x413
 80170a0:	4963      	ldr	r1, [pc, #396]	@ (8017230 <tcp_enqueue_flags+0x1c8>)
 80170a2:	4862      	ldr	r0, [pc, #392]	@ (801722c <tcp_enqueue_flags+0x1c4>)
 80170a4:	f007 fc9c 	bl	801e9e0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80170a8:	78fb      	ldrb	r3, [r7, #3]
 80170aa:	f003 0302 	and.w	r3, r3, #2
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d001      	beq.n	80170b6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80170b2:	2301      	movs	r3, #1
 80170b4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80170b6:	7ffb      	ldrb	r3, [r7, #31]
 80170b8:	009b      	lsls	r3, r3, #2
 80170ba:	b2db      	uxtb	r3, r3
 80170bc:	f003 0304 	and.w	r3, r3, #4
 80170c0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80170c2:	7dfb      	ldrb	r3, [r7, #23]
 80170c4:	b29b      	uxth	r3, r3
 80170c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80170ca:	4619      	mov	r1, r3
 80170cc:	2036      	movs	r0, #54	@ 0x36
 80170ce:	f7fa ff83 	bl	8011fd8 <pbuf_alloc>
 80170d2:	6138      	str	r0, [r7, #16]
 80170d4:	693b      	ldr	r3, [r7, #16]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d109      	bne.n	80170ee <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	8b5b      	ldrh	r3, [r3, #26]
 80170de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80170e2:	b29a      	uxth	r2, r3
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80170e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80170ec:	e095      	b.n	801721a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80170ee:	693b      	ldr	r3, [r7, #16]
 80170f0:	895a      	ldrh	r2, [r3, #10]
 80170f2:	7dfb      	ldrb	r3, [r7, #23]
 80170f4:	b29b      	uxth	r3, r3
 80170f6:	429a      	cmp	r2, r3
 80170f8:	d206      	bcs.n	8017108 <tcp_enqueue_flags+0xa0>
 80170fa:	4b4a      	ldr	r3, [pc, #296]	@ (8017224 <tcp_enqueue_flags+0x1bc>)
 80170fc:	f240 4239 	movw	r2, #1081	@ 0x439
 8017100:	494c      	ldr	r1, [pc, #304]	@ (8017234 <tcp_enqueue_flags+0x1cc>)
 8017102:	484a      	ldr	r0, [pc, #296]	@ (801722c <tcp_enqueue_flags+0x1c4>)
 8017104:	f007 fc6c 	bl	801e9e0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801710c:	78fa      	ldrb	r2, [r7, #3]
 801710e:	7ffb      	ldrb	r3, [r7, #31]
 8017110:	9300      	str	r3, [sp, #0]
 8017112:	460b      	mov	r3, r1
 8017114:	6939      	ldr	r1, [r7, #16]
 8017116:	6878      	ldr	r0, [r7, #4]
 8017118:	f7ff fd72 	bl	8016c00 <tcp_create_segment>
 801711c:	60f8      	str	r0, [r7, #12]
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	2b00      	cmp	r3, #0
 8017122:	d109      	bne.n	8017138 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	8b5b      	ldrh	r3, [r3, #26]
 8017128:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801712c:	b29a      	uxth	r2, r3
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017132:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017136:	e070      	b.n	801721a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	68db      	ldr	r3, [r3, #12]
 801713c:	f003 0303 	and.w	r3, r3, #3
 8017140:	2b00      	cmp	r3, #0
 8017142:	d006      	beq.n	8017152 <tcp_enqueue_flags+0xea>
 8017144:	4b37      	ldr	r3, [pc, #220]	@ (8017224 <tcp_enqueue_flags+0x1bc>)
 8017146:	f240 4242 	movw	r2, #1090	@ 0x442
 801714a:	493b      	ldr	r1, [pc, #236]	@ (8017238 <tcp_enqueue_flags+0x1d0>)
 801714c:	4837      	ldr	r0, [pc, #220]	@ (801722c <tcp_enqueue_flags+0x1c4>)
 801714e:	f007 fc47 	bl	801e9e0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	891b      	ldrh	r3, [r3, #8]
 8017156:	2b00      	cmp	r3, #0
 8017158:	d006      	beq.n	8017168 <tcp_enqueue_flags+0x100>
 801715a:	4b32      	ldr	r3, [pc, #200]	@ (8017224 <tcp_enqueue_flags+0x1bc>)
 801715c:	f240 4243 	movw	r2, #1091	@ 0x443
 8017160:	4936      	ldr	r1, [pc, #216]	@ (801723c <tcp_enqueue_flags+0x1d4>)
 8017162:	4832      	ldr	r0, [pc, #200]	@ (801722c <tcp_enqueue_flags+0x1c4>)
 8017164:	f007 fc3c 	bl	801e9e0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801716c:	2b00      	cmp	r3, #0
 801716e:	d103      	bne.n	8017178 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	68fa      	ldr	r2, [r7, #12]
 8017174:	66da      	str	r2, [r3, #108]	@ 0x6c
 8017176:	e00d      	b.n	8017194 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801717c:	61bb      	str	r3, [r7, #24]
 801717e:	e002      	b.n	8017186 <tcp_enqueue_flags+0x11e>
 8017180:	69bb      	ldr	r3, [r7, #24]
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	61bb      	str	r3, [r7, #24]
 8017186:	69bb      	ldr	r3, [r7, #24]
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	2b00      	cmp	r3, #0
 801718c:	d1f8      	bne.n	8017180 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801718e:	69bb      	ldr	r3, [r7, #24]
 8017190:	68fa      	ldr	r2, [r7, #12]
 8017192:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	2200      	movs	r2, #0
 8017198:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801719c:	78fb      	ldrb	r3, [r7, #3]
 801719e:	f003 0302 	and.w	r3, r3, #2
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d104      	bne.n	80171b0 <tcp_enqueue_flags+0x148>
 80171a6:	78fb      	ldrb	r3, [r7, #3]
 80171a8:	f003 0301 	and.w	r3, r3, #1
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d004      	beq.n	80171ba <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80171b4:	1c5a      	adds	r2, r3, #1
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80171ba:	78fb      	ldrb	r3, [r7, #3]
 80171bc:	f003 0301 	and.w	r3, r3, #1
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d006      	beq.n	80171d2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	8b5b      	ldrh	r3, [r3, #26]
 80171c8:	f043 0320 	orr.w	r3, r3, #32
 80171cc:	b29a      	uxth	r2, r3
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	685b      	ldr	r3, [r3, #4]
 80171d6:	4618      	mov	r0, r3
 80171d8:	f7fb fa70 	bl	80126bc <pbuf_clen>
 80171dc:	4603      	mov	r3, r0
 80171de:	461a      	mov	r2, r3
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80171e6:	4413      	add	r3, r2
 80171e8:	b29a      	uxth	r2, r3
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d00e      	beq.n	8017218 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d10a      	bne.n	8017218 <tcp_enqueue_flags+0x1b0>
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017206:	2b00      	cmp	r3, #0
 8017208:	d106      	bne.n	8017218 <tcp_enqueue_flags+0x1b0>
 801720a:	4b06      	ldr	r3, [pc, #24]	@ (8017224 <tcp_enqueue_flags+0x1bc>)
 801720c:	f240 4265 	movw	r2, #1125	@ 0x465
 8017210:	490b      	ldr	r1, [pc, #44]	@ (8017240 <tcp_enqueue_flags+0x1d8>)
 8017212:	4806      	ldr	r0, [pc, #24]	@ (801722c <tcp_enqueue_flags+0x1c4>)
 8017214:	f007 fbe4 	bl	801e9e0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8017218:	2300      	movs	r3, #0
}
 801721a:	4618      	mov	r0, r3
 801721c:	3720      	adds	r7, #32
 801721e:	46bd      	mov	sp, r7
 8017220:	bd80      	pop	{r7, pc}
 8017222:	bf00      	nop
 8017224:	08021b4c 	.word	0x08021b4c
 8017228:	08021f70 	.word	0x08021f70
 801722c:	08021ba0 	.word	0x08021ba0
 8017230:	08021fc8 	.word	0x08021fc8
 8017234:	08021fe8 	.word	0x08021fe8
 8017238:	08022024 	.word	0x08022024
 801723c:	0802203c 	.word	0x0802203c
 8017240:	08022068 	.word	0x08022068

08017244 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8017244:	b5b0      	push	{r4, r5, r7, lr}
 8017246:	b08a      	sub	sp, #40	@ 0x28
 8017248:	af00      	add	r7, sp, #0
 801724a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d106      	bne.n	8017260 <tcp_output+0x1c>
 8017252:	4b8a      	ldr	r3, [pc, #552]	@ (801747c <tcp_output+0x238>)
 8017254:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8017258:	4989      	ldr	r1, [pc, #548]	@ (8017480 <tcp_output+0x23c>)
 801725a:	488a      	ldr	r0, [pc, #552]	@ (8017484 <tcp_output+0x240>)
 801725c:	f007 fbc0 	bl	801e9e0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	7d1b      	ldrb	r3, [r3, #20]
 8017264:	2b01      	cmp	r3, #1
 8017266:	d106      	bne.n	8017276 <tcp_output+0x32>
 8017268:	4b84      	ldr	r3, [pc, #528]	@ (801747c <tcp_output+0x238>)
 801726a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801726e:	4986      	ldr	r1, [pc, #536]	@ (8017488 <tcp_output+0x244>)
 8017270:	4884      	ldr	r0, [pc, #528]	@ (8017484 <tcp_output+0x240>)
 8017272:	f007 fbb5 	bl	801e9e0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8017276:	4b85      	ldr	r3, [pc, #532]	@ (801748c <tcp_output+0x248>)
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	687a      	ldr	r2, [r7, #4]
 801727c:	429a      	cmp	r2, r3
 801727e:	d101      	bne.n	8017284 <tcp_output+0x40>
    return ERR_OK;
 8017280:	2300      	movs	r3, #0
 8017282:	e1ce      	b.n	8017622 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017290:	4293      	cmp	r3, r2
 8017292:	bf28      	it	cs
 8017294:	4613      	movcs	r3, r2
 8017296:	b29b      	uxth	r3, r3
 8017298:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801729e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80172a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d10b      	bne.n	80172be <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	8b5b      	ldrh	r3, [r3, #26]
 80172aa:	f003 0302 	and.w	r3, r3, #2
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	f000 81aa 	beq.w	8017608 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80172b4:	6878      	ldr	r0, [r7, #4]
 80172b6:	f000 fdcb 	bl	8017e50 <tcp_send_empty_ack>
 80172ba:	4603      	mov	r3, r0
 80172bc:	e1b1      	b.n	8017622 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80172be:	6879      	ldr	r1, [r7, #4]
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	3304      	adds	r3, #4
 80172c4:	461a      	mov	r2, r3
 80172c6:	6878      	ldr	r0, [r7, #4]
 80172c8:	f7ff fc7e 	bl	8016bc8 <tcp_route>
 80172cc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80172ce:	697b      	ldr	r3, [r7, #20]
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d102      	bne.n	80172da <tcp_output+0x96>
    return ERR_RTE;
 80172d4:	f06f 0303 	mvn.w	r3, #3
 80172d8:	e1a3      	b.n	8017622 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d003      	beq.n	80172e8 <tcp_output+0xa4>
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d111      	bne.n	801730c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80172e8:	697b      	ldr	r3, [r7, #20]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d002      	beq.n	80172f4 <tcp_output+0xb0>
 80172ee:	697b      	ldr	r3, [r7, #20]
 80172f0:	3304      	adds	r3, #4
 80172f2:	e000      	b.n	80172f6 <tcp_output+0xb2>
 80172f4:	2300      	movs	r3, #0
 80172f6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80172f8:	693b      	ldr	r3, [r7, #16]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d102      	bne.n	8017304 <tcp_output+0xc0>
      return ERR_RTE;
 80172fe:	f06f 0303 	mvn.w	r3, #3
 8017302:	e18e      	b.n	8017622 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017304:	693b      	ldr	r3, [r7, #16]
 8017306:	681a      	ldr	r2, [r3, #0]
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801730c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801730e:	68db      	ldr	r3, [r3, #12]
 8017310:	685b      	ldr	r3, [r3, #4]
 8017312:	4618      	mov	r0, r3
 8017314:	f7f9 fc06 	bl	8010b24 <lwip_htonl>
 8017318:	4602      	mov	r2, r0
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801731e:	1ad3      	subs	r3, r2, r3
 8017320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017322:	8912      	ldrh	r2, [r2, #8]
 8017324:	4413      	add	r3, r2
 8017326:	69ba      	ldr	r2, [r7, #24]
 8017328:	429a      	cmp	r2, r3
 801732a:	d227      	bcs.n	801737c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017332:	461a      	mov	r2, r3
 8017334:	69bb      	ldr	r3, [r7, #24]
 8017336:	4293      	cmp	r3, r2
 8017338:	d114      	bne.n	8017364 <tcp_output+0x120>
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801733e:	2b00      	cmp	r3, #0
 8017340:	d110      	bne.n	8017364 <tcp_output+0x120>
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8017348:	2b00      	cmp	r3, #0
 801734a:	d10b      	bne.n	8017364 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	2200      	movs	r2, #0
 8017350:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	2201      	movs	r2, #1
 8017358:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	2200      	movs	r2, #0
 8017360:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	8b5b      	ldrh	r3, [r3, #26]
 8017368:	f003 0302 	and.w	r3, r3, #2
 801736c:	2b00      	cmp	r3, #0
 801736e:	f000 814d 	beq.w	801760c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8017372:	6878      	ldr	r0, [r7, #4]
 8017374:	f000 fd6c 	bl	8017e50 <tcp_send_empty_ack>
 8017378:	4603      	mov	r3, r0
 801737a:	e152      	b.n	8017622 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	2200      	movs	r2, #0
 8017380:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017388:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801738a:	6a3b      	ldr	r3, [r7, #32]
 801738c:	2b00      	cmp	r3, #0
 801738e:	f000 811c 	beq.w	80175ca <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8017392:	e002      	b.n	801739a <tcp_output+0x156>
 8017394:	6a3b      	ldr	r3, [r7, #32]
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	623b      	str	r3, [r7, #32]
 801739a:	6a3b      	ldr	r3, [r7, #32]
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d1f8      	bne.n	8017394 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80173a2:	e112      	b.n	80175ca <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80173a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173a6:	68db      	ldr	r3, [r3, #12]
 80173a8:	899b      	ldrh	r3, [r3, #12]
 80173aa:	b29b      	uxth	r3, r3
 80173ac:	4618      	mov	r0, r3
 80173ae:	f7f9 fba3 	bl	8010af8 <lwip_htons>
 80173b2:	4603      	mov	r3, r0
 80173b4:	b2db      	uxtb	r3, r3
 80173b6:	f003 0304 	and.w	r3, r3, #4
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d006      	beq.n	80173cc <tcp_output+0x188>
 80173be:	4b2f      	ldr	r3, [pc, #188]	@ (801747c <tcp_output+0x238>)
 80173c0:	f240 5236 	movw	r2, #1334	@ 0x536
 80173c4:	4932      	ldr	r1, [pc, #200]	@ (8017490 <tcp_output+0x24c>)
 80173c6:	482f      	ldr	r0, [pc, #188]	@ (8017484 <tcp_output+0x240>)
 80173c8:	f007 fb0a 	bl	801e9e0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d01f      	beq.n	8017414 <tcp_output+0x1d0>
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	8b5b      	ldrh	r3, [r3, #26]
 80173d8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d119      	bne.n	8017414 <tcp_output+0x1d0>
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d00b      	beq.n	8017400 <tcp_output+0x1bc>
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d110      	bne.n	8017414 <tcp_output+0x1d0>
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80173f6:	891a      	ldrh	r2, [r3, #8]
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80173fc:	429a      	cmp	r2, r3
 80173fe:	d209      	bcs.n	8017414 <tcp_output+0x1d0>
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017406:	2b00      	cmp	r3, #0
 8017408:	d004      	beq.n	8017414 <tcp_output+0x1d0>
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017410:	2b08      	cmp	r3, #8
 8017412:	d901      	bls.n	8017418 <tcp_output+0x1d4>
 8017414:	2301      	movs	r3, #1
 8017416:	e000      	b.n	801741a <tcp_output+0x1d6>
 8017418:	2300      	movs	r3, #0
 801741a:	2b00      	cmp	r3, #0
 801741c:	d106      	bne.n	801742c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	8b5b      	ldrh	r3, [r3, #26]
 8017422:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017426:	2b00      	cmp	r3, #0
 8017428:	f000 80e4 	beq.w	80175f4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	7d1b      	ldrb	r3, [r3, #20]
 8017430:	2b02      	cmp	r3, #2
 8017432:	d00d      	beq.n	8017450 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8017434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017436:	68db      	ldr	r3, [r3, #12]
 8017438:	899b      	ldrh	r3, [r3, #12]
 801743a:	b29c      	uxth	r4, r3
 801743c:	2010      	movs	r0, #16
 801743e:	f7f9 fb5b 	bl	8010af8 <lwip_htons>
 8017442:	4603      	mov	r3, r0
 8017444:	461a      	mov	r2, r3
 8017446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017448:	68db      	ldr	r3, [r3, #12]
 801744a:	4322      	orrs	r2, r4
 801744c:	b292      	uxth	r2, r2
 801744e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8017450:	697a      	ldr	r2, [r7, #20]
 8017452:	6879      	ldr	r1, [r7, #4]
 8017454:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017456:	f000 f909 	bl	801766c <tcp_output_segment>
 801745a:	4603      	mov	r3, r0
 801745c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801745e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017462:	2b00      	cmp	r3, #0
 8017464:	d016      	beq.n	8017494 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	8b5b      	ldrh	r3, [r3, #26]
 801746a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801746e:	b29a      	uxth	r2, r3
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	835a      	strh	r2, [r3, #26]
      return err;
 8017474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017478:	e0d3      	b.n	8017622 <tcp_output+0x3de>
 801747a:	bf00      	nop
 801747c:	08021b4c 	.word	0x08021b4c
 8017480:	08022090 	.word	0x08022090
 8017484:	08021ba0 	.word	0x08021ba0
 8017488:	080220a8 	.word	0x080220a8
 801748c:	200047e8 	.word	0x200047e8
 8017490:	080220d0 	.word	0x080220d0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8017494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017496:	681a      	ldr	r2, [r3, #0]
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	7d1b      	ldrb	r3, [r3, #20]
 80174a0:	2b02      	cmp	r3, #2
 80174a2:	d006      	beq.n	80174b2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	8b5b      	ldrh	r3, [r3, #26]
 80174a8:	f023 0303 	bic.w	r3, r3, #3
 80174ac:	b29a      	uxth	r2, r3
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80174b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174b4:	68db      	ldr	r3, [r3, #12]
 80174b6:	685b      	ldr	r3, [r3, #4]
 80174b8:	4618      	mov	r0, r3
 80174ba:	f7f9 fb33 	bl	8010b24 <lwip_htonl>
 80174be:	4604      	mov	r4, r0
 80174c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174c2:	891b      	ldrh	r3, [r3, #8]
 80174c4:	461d      	mov	r5, r3
 80174c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174c8:	68db      	ldr	r3, [r3, #12]
 80174ca:	899b      	ldrh	r3, [r3, #12]
 80174cc:	b29b      	uxth	r3, r3
 80174ce:	4618      	mov	r0, r3
 80174d0:	f7f9 fb12 	bl	8010af8 <lwip_htons>
 80174d4:	4603      	mov	r3, r0
 80174d6:	b2db      	uxtb	r3, r3
 80174d8:	f003 0303 	and.w	r3, r3, #3
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d001      	beq.n	80174e4 <tcp_output+0x2a0>
 80174e0:	2301      	movs	r3, #1
 80174e2:	e000      	b.n	80174e6 <tcp_output+0x2a2>
 80174e4:	2300      	movs	r3, #0
 80174e6:	442b      	add	r3, r5
 80174e8:	4423      	add	r3, r4
 80174ea:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80174f0:	68bb      	ldr	r3, [r7, #8]
 80174f2:	1ad3      	subs	r3, r2, r3
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	da02      	bge.n	80174fe <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	68ba      	ldr	r2, [r7, #8]
 80174fc:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80174fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017500:	891b      	ldrh	r3, [r3, #8]
 8017502:	461c      	mov	r4, r3
 8017504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017506:	68db      	ldr	r3, [r3, #12]
 8017508:	899b      	ldrh	r3, [r3, #12]
 801750a:	b29b      	uxth	r3, r3
 801750c:	4618      	mov	r0, r3
 801750e:	f7f9 faf3 	bl	8010af8 <lwip_htons>
 8017512:	4603      	mov	r3, r0
 8017514:	b2db      	uxtb	r3, r3
 8017516:	f003 0303 	and.w	r3, r3, #3
 801751a:	2b00      	cmp	r3, #0
 801751c:	d001      	beq.n	8017522 <tcp_output+0x2de>
 801751e:	2301      	movs	r3, #1
 8017520:	e000      	b.n	8017524 <tcp_output+0x2e0>
 8017522:	2300      	movs	r3, #0
 8017524:	4423      	add	r3, r4
 8017526:	2b00      	cmp	r3, #0
 8017528:	d049      	beq.n	80175be <tcp_output+0x37a>
      seg->next = NULL;
 801752a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801752c:	2200      	movs	r2, #0
 801752e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017534:	2b00      	cmp	r3, #0
 8017536:	d105      	bne.n	8017544 <tcp_output+0x300>
        pcb->unacked = seg;
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801753c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801753e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017540:	623b      	str	r3, [r7, #32]
 8017542:	e03f      	b.n	80175c4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8017544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017546:	68db      	ldr	r3, [r3, #12]
 8017548:	685b      	ldr	r3, [r3, #4]
 801754a:	4618      	mov	r0, r3
 801754c:	f7f9 faea 	bl	8010b24 <lwip_htonl>
 8017550:	4604      	mov	r4, r0
 8017552:	6a3b      	ldr	r3, [r7, #32]
 8017554:	68db      	ldr	r3, [r3, #12]
 8017556:	685b      	ldr	r3, [r3, #4]
 8017558:	4618      	mov	r0, r3
 801755a:	f7f9 fae3 	bl	8010b24 <lwip_htonl>
 801755e:	4603      	mov	r3, r0
 8017560:	1ae3      	subs	r3, r4, r3
 8017562:	2b00      	cmp	r3, #0
 8017564:	da24      	bge.n	80175b0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	3370      	adds	r3, #112	@ 0x70
 801756a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801756c:	e002      	b.n	8017574 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801756e:	69fb      	ldr	r3, [r7, #28]
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017574:	69fb      	ldr	r3, [r7, #28]
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	2b00      	cmp	r3, #0
 801757a:	d011      	beq.n	80175a0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801757c:	69fb      	ldr	r3, [r7, #28]
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	68db      	ldr	r3, [r3, #12]
 8017582:	685b      	ldr	r3, [r3, #4]
 8017584:	4618      	mov	r0, r3
 8017586:	f7f9 facd 	bl	8010b24 <lwip_htonl>
 801758a:	4604      	mov	r4, r0
 801758c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801758e:	68db      	ldr	r3, [r3, #12]
 8017590:	685b      	ldr	r3, [r3, #4]
 8017592:	4618      	mov	r0, r3
 8017594:	f7f9 fac6 	bl	8010b24 <lwip_htonl>
 8017598:	4603      	mov	r3, r0
 801759a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801759c:	2b00      	cmp	r3, #0
 801759e:	dbe6      	blt.n	801756e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80175a0:	69fb      	ldr	r3, [r7, #28]
 80175a2:	681a      	ldr	r2, [r3, #0]
 80175a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175a6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80175a8:	69fb      	ldr	r3, [r7, #28]
 80175aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80175ac:	601a      	str	r2, [r3, #0]
 80175ae:	e009      	b.n	80175c4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80175b0:	6a3b      	ldr	r3, [r7, #32]
 80175b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80175b4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80175b6:	6a3b      	ldr	r3, [r7, #32]
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	623b      	str	r3, [r7, #32]
 80175bc:	e002      	b.n	80175c4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80175be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80175c0:	f7fc fc45 	bl	8013e4e <tcp_seg_free>
    }
    seg = pcb->unsent;
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80175c8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80175ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d012      	beq.n	80175f6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80175d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175d2:	68db      	ldr	r3, [r3, #12]
 80175d4:	685b      	ldr	r3, [r3, #4]
 80175d6:	4618      	mov	r0, r3
 80175d8:	f7f9 faa4 	bl	8010b24 <lwip_htonl>
 80175dc:	4602      	mov	r2, r0
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80175e2:	1ad3      	subs	r3, r2, r3
 80175e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80175e6:	8912      	ldrh	r2, [r2, #8]
 80175e8:	4413      	add	r3, r2
  while (seg != NULL &&
 80175ea:	69ba      	ldr	r2, [r7, #24]
 80175ec:	429a      	cmp	r2, r3
 80175ee:	f4bf aed9 	bcs.w	80173a4 <tcp_output+0x160>
 80175f2:	e000      	b.n	80175f6 <tcp_output+0x3b2>
      break;
 80175f4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d108      	bne.n	8017610 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	2200      	movs	r2, #0
 8017602:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8017606:	e004      	b.n	8017612 <tcp_output+0x3ce>
    goto output_done;
 8017608:	bf00      	nop
 801760a:	e002      	b.n	8017612 <tcp_output+0x3ce>
    goto output_done;
 801760c:	bf00      	nop
 801760e:	e000      	b.n	8017612 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8017610:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	8b5b      	ldrh	r3, [r3, #26]
 8017616:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801761a:	b29a      	uxth	r2, r3
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8017620:	2300      	movs	r3, #0
}
 8017622:	4618      	mov	r0, r3
 8017624:	3728      	adds	r7, #40	@ 0x28
 8017626:	46bd      	mov	sp, r7
 8017628:	bdb0      	pop	{r4, r5, r7, pc}
 801762a:	bf00      	nop

0801762c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801762c:	b580      	push	{r7, lr}
 801762e:	b082      	sub	sp, #8
 8017630:	af00      	add	r7, sp, #0
 8017632:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	2b00      	cmp	r3, #0
 8017638:	d106      	bne.n	8017648 <tcp_output_segment_busy+0x1c>
 801763a:	4b09      	ldr	r3, [pc, #36]	@ (8017660 <tcp_output_segment_busy+0x34>)
 801763c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8017640:	4908      	ldr	r1, [pc, #32]	@ (8017664 <tcp_output_segment_busy+0x38>)
 8017642:	4809      	ldr	r0, [pc, #36]	@ (8017668 <tcp_output_segment_busy+0x3c>)
 8017644:	f007 f9cc 	bl	801e9e0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	685b      	ldr	r3, [r3, #4]
 801764c:	7b9b      	ldrb	r3, [r3, #14]
 801764e:	2b01      	cmp	r3, #1
 8017650:	d001      	beq.n	8017656 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8017652:	2301      	movs	r3, #1
 8017654:	e000      	b.n	8017658 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8017656:	2300      	movs	r3, #0
}
 8017658:	4618      	mov	r0, r3
 801765a:	3708      	adds	r7, #8
 801765c:	46bd      	mov	sp, r7
 801765e:	bd80      	pop	{r7, pc}
 8017660:	08021b4c 	.word	0x08021b4c
 8017664:	080220e8 	.word	0x080220e8
 8017668:	08021ba0 	.word	0x08021ba0

0801766c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801766c:	b5b0      	push	{r4, r5, r7, lr}
 801766e:	b08c      	sub	sp, #48	@ 0x30
 8017670:	af04      	add	r7, sp, #16
 8017672:	60f8      	str	r0, [r7, #12]
 8017674:	60b9      	str	r1, [r7, #8]
 8017676:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	2b00      	cmp	r3, #0
 801767c:	d106      	bne.n	801768c <tcp_output_segment+0x20>
 801767e:	4b64      	ldr	r3, [pc, #400]	@ (8017810 <tcp_output_segment+0x1a4>)
 8017680:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8017684:	4963      	ldr	r1, [pc, #396]	@ (8017814 <tcp_output_segment+0x1a8>)
 8017686:	4864      	ldr	r0, [pc, #400]	@ (8017818 <tcp_output_segment+0x1ac>)
 8017688:	f007 f9aa 	bl	801e9e0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801768c:	68bb      	ldr	r3, [r7, #8]
 801768e:	2b00      	cmp	r3, #0
 8017690:	d106      	bne.n	80176a0 <tcp_output_segment+0x34>
 8017692:	4b5f      	ldr	r3, [pc, #380]	@ (8017810 <tcp_output_segment+0x1a4>)
 8017694:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8017698:	4960      	ldr	r1, [pc, #384]	@ (801781c <tcp_output_segment+0x1b0>)
 801769a:	485f      	ldr	r0, [pc, #380]	@ (8017818 <tcp_output_segment+0x1ac>)
 801769c:	f007 f9a0 	bl	801e9e0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d106      	bne.n	80176b4 <tcp_output_segment+0x48>
 80176a6:	4b5a      	ldr	r3, [pc, #360]	@ (8017810 <tcp_output_segment+0x1a4>)
 80176a8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80176ac:	495c      	ldr	r1, [pc, #368]	@ (8017820 <tcp_output_segment+0x1b4>)
 80176ae:	485a      	ldr	r0, [pc, #360]	@ (8017818 <tcp_output_segment+0x1ac>)
 80176b0:	f007 f996 	bl	801e9e0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80176b4:	68f8      	ldr	r0, [r7, #12]
 80176b6:	f7ff ffb9 	bl	801762c <tcp_output_segment_busy>
 80176ba:	4603      	mov	r3, r0
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d001      	beq.n	80176c4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80176c0:	2300      	movs	r3, #0
 80176c2:	e0a1      	b.n	8017808 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80176c4:	68bb      	ldr	r3, [r7, #8]
 80176c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	68dc      	ldr	r4, [r3, #12]
 80176cc:	4610      	mov	r0, r2
 80176ce:	f7f9 fa29 	bl	8010b24 <lwip_htonl>
 80176d2:	4603      	mov	r3, r0
 80176d4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80176d6:	68bb      	ldr	r3, [r7, #8]
 80176d8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	68dc      	ldr	r4, [r3, #12]
 80176de:	4610      	mov	r0, r2
 80176e0:	f7f9 fa0a 	bl	8010af8 <lwip_htons>
 80176e4:	4603      	mov	r3, r0
 80176e6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80176e8:	68bb      	ldr	r3, [r7, #8]
 80176ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80176ec:	68ba      	ldr	r2, [r7, #8]
 80176ee:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80176f0:	441a      	add	r2, r3
 80176f2:	68bb      	ldr	r3, [r7, #8]
 80176f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	68db      	ldr	r3, [r3, #12]
 80176fa:	3314      	adds	r3, #20
 80176fc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	7a9b      	ldrb	r3, [r3, #10]
 8017702:	f003 0301 	and.w	r3, r3, #1
 8017706:	2b00      	cmp	r3, #0
 8017708:	d015      	beq.n	8017736 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801770a:	68bb      	ldr	r3, [r7, #8]
 801770c:	3304      	adds	r3, #4
 801770e:	461a      	mov	r2, r3
 8017710:	6879      	ldr	r1, [r7, #4]
 8017712:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8017716:	f7fc fe91 	bl	801443c <tcp_eff_send_mss_netif>
 801771a:	4603      	mov	r3, r0
 801771c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801771e:	8b7b      	ldrh	r3, [r7, #26]
 8017720:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8017724:	4618      	mov	r0, r3
 8017726:	f7f9 f9fd 	bl	8010b24 <lwip_htonl>
 801772a:	4602      	mov	r2, r0
 801772c:	69fb      	ldr	r3, [r7, #28]
 801772e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017730:	69fb      	ldr	r3, [r7, #28]
 8017732:	3304      	adds	r3, #4
 8017734:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8017736:	68bb      	ldr	r3, [r7, #8]
 8017738:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801773c:	2b00      	cmp	r3, #0
 801773e:	da02      	bge.n	8017746 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017740:	68bb      	ldr	r3, [r7, #8]
 8017742:	2200      	movs	r2, #0
 8017744:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8017746:	68bb      	ldr	r3, [r7, #8]
 8017748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801774a:	2b00      	cmp	r3, #0
 801774c:	d10c      	bne.n	8017768 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801774e:	4b35      	ldr	r3, [pc, #212]	@ (8017824 <tcp_output_segment+0x1b8>)
 8017750:	681a      	ldr	r2, [r3, #0]
 8017752:	68bb      	ldr	r3, [r7, #8]
 8017754:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	68db      	ldr	r3, [r3, #12]
 801775a:	685b      	ldr	r3, [r3, #4]
 801775c:	4618      	mov	r0, r3
 801775e:	f7f9 f9e1 	bl	8010b24 <lwip_htonl>
 8017762:	4602      	mov	r2, r0
 8017764:	68bb      	ldr	r3, [r7, #8]
 8017766:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	68da      	ldr	r2, [r3, #12]
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	685b      	ldr	r3, [r3, #4]
 8017770:	685b      	ldr	r3, [r3, #4]
 8017772:	1ad3      	subs	r3, r2, r3
 8017774:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	685b      	ldr	r3, [r3, #4]
 801777a:	8959      	ldrh	r1, [r3, #10]
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	685b      	ldr	r3, [r3, #4]
 8017780:	8b3a      	ldrh	r2, [r7, #24]
 8017782:	1a8a      	subs	r2, r1, r2
 8017784:	b292      	uxth	r2, r2
 8017786:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	685b      	ldr	r3, [r3, #4]
 801778c:	8919      	ldrh	r1, [r3, #8]
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	685b      	ldr	r3, [r3, #4]
 8017792:	8b3a      	ldrh	r2, [r7, #24]
 8017794:	1a8a      	subs	r2, r1, r2
 8017796:	b292      	uxth	r2, r2
 8017798:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	685b      	ldr	r3, [r3, #4]
 801779e:	68fa      	ldr	r2, [r7, #12]
 80177a0:	68d2      	ldr	r2, [r2, #12]
 80177a2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	68db      	ldr	r3, [r3, #12]
 80177a8:	2200      	movs	r2, #0
 80177aa:	741a      	strb	r2, [r3, #16]
 80177ac:	2200      	movs	r2, #0
 80177ae:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	68da      	ldr	r2, [r3, #12]
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	7a9b      	ldrb	r3, [r3, #10]
 80177b8:	f003 0301 	and.w	r3, r3, #1
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d001      	beq.n	80177c4 <tcp_output_segment+0x158>
 80177c0:	2318      	movs	r3, #24
 80177c2:	e000      	b.n	80177c6 <tcp_output_segment+0x15a>
 80177c4:	2314      	movs	r3, #20
 80177c6:	4413      	add	r3, r2
 80177c8:	69fa      	ldr	r2, [r7, #28]
 80177ca:	429a      	cmp	r2, r3
 80177cc:	d006      	beq.n	80177dc <tcp_output_segment+0x170>
 80177ce:	4b10      	ldr	r3, [pc, #64]	@ (8017810 <tcp_output_segment+0x1a4>)
 80177d0:	f240 621c 	movw	r2, #1564	@ 0x61c
 80177d4:	4914      	ldr	r1, [pc, #80]	@ (8017828 <tcp_output_segment+0x1bc>)
 80177d6:	4810      	ldr	r0, [pc, #64]	@ (8017818 <tcp_output_segment+0x1ac>)
 80177d8:	f007 f902 	bl	801e9e0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	6858      	ldr	r0, [r3, #4]
 80177e0:	68b9      	ldr	r1, [r7, #8]
 80177e2:	68bb      	ldr	r3, [r7, #8]
 80177e4:	1d1c      	adds	r4, r3, #4
 80177e6:	68bb      	ldr	r3, [r7, #8]
 80177e8:	7add      	ldrb	r5, [r3, #11]
 80177ea:	68bb      	ldr	r3, [r7, #8]
 80177ec:	7a9b      	ldrb	r3, [r3, #10]
 80177ee:	687a      	ldr	r2, [r7, #4]
 80177f0:	9202      	str	r2, [sp, #8]
 80177f2:	2206      	movs	r2, #6
 80177f4:	9201      	str	r2, [sp, #4]
 80177f6:	9300      	str	r3, [sp, #0]
 80177f8:	462b      	mov	r3, r5
 80177fa:	4622      	mov	r2, r4
 80177fc:	f004 ffe2 	bl	801c7c4 <ip4_output_if>
 8017800:	4603      	mov	r3, r0
 8017802:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017804:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017808:	4618      	mov	r0, r3
 801780a:	3720      	adds	r7, #32
 801780c:	46bd      	mov	sp, r7
 801780e:	bdb0      	pop	{r4, r5, r7, pc}
 8017810:	08021b4c 	.word	0x08021b4c
 8017814:	08022110 	.word	0x08022110
 8017818:	08021ba0 	.word	0x08021ba0
 801781c:	08022130 	.word	0x08022130
 8017820:	08022150 	.word	0x08022150
 8017824:	2000479c 	.word	0x2000479c
 8017828:	08022174 	.word	0x08022174

0801782c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801782c:	b5b0      	push	{r4, r5, r7, lr}
 801782e:	b084      	sub	sp, #16
 8017830:	af00      	add	r7, sp, #0
 8017832:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	2b00      	cmp	r3, #0
 8017838:	d106      	bne.n	8017848 <tcp_rexmit_rto_prepare+0x1c>
 801783a:	4b31      	ldr	r3, [pc, #196]	@ (8017900 <tcp_rexmit_rto_prepare+0xd4>)
 801783c:	f240 6263 	movw	r2, #1635	@ 0x663
 8017840:	4930      	ldr	r1, [pc, #192]	@ (8017904 <tcp_rexmit_rto_prepare+0xd8>)
 8017842:	4831      	ldr	r0, [pc, #196]	@ (8017908 <tcp_rexmit_rto_prepare+0xdc>)
 8017844:	f007 f8cc 	bl	801e9e0 <iprintf>

  if (pcb->unacked == NULL) {
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801784c:	2b00      	cmp	r3, #0
 801784e:	d102      	bne.n	8017856 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017850:	f06f 0305 	mvn.w	r3, #5
 8017854:	e050      	b.n	80178f8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801785a:	60fb      	str	r3, [r7, #12]
 801785c:	e00b      	b.n	8017876 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801785e:	68f8      	ldr	r0, [r7, #12]
 8017860:	f7ff fee4 	bl	801762c <tcp_output_segment_busy>
 8017864:	4603      	mov	r3, r0
 8017866:	2b00      	cmp	r3, #0
 8017868:	d002      	beq.n	8017870 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801786a:	f06f 0305 	mvn.w	r3, #5
 801786e:	e043      	b.n	80178f8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	60fb      	str	r3, [r7, #12]
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	2b00      	cmp	r3, #0
 801787c:	d1ef      	bne.n	801785e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801787e:	68f8      	ldr	r0, [r7, #12]
 8017880:	f7ff fed4 	bl	801762c <tcp_output_segment_busy>
 8017884:	4603      	mov	r3, r0
 8017886:	2b00      	cmp	r3, #0
 8017888:	d002      	beq.n	8017890 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801788a:	f06f 0305 	mvn.w	r3, #5
 801788e:	e033      	b.n	80178f8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8017894:	68fb      	ldr	r3, [r7, #12]
 8017896:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	2200      	movs	r2, #0
 80178a4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	8b5b      	ldrh	r3, [r3, #26]
 80178aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80178ae:	b29a      	uxth	r2, r3
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	68db      	ldr	r3, [r3, #12]
 80178b8:	685b      	ldr	r3, [r3, #4]
 80178ba:	4618      	mov	r0, r3
 80178bc:	f7f9 f932 	bl	8010b24 <lwip_htonl>
 80178c0:	4604      	mov	r4, r0
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	891b      	ldrh	r3, [r3, #8]
 80178c6:	461d      	mov	r5, r3
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	68db      	ldr	r3, [r3, #12]
 80178cc:	899b      	ldrh	r3, [r3, #12]
 80178ce:	b29b      	uxth	r3, r3
 80178d0:	4618      	mov	r0, r3
 80178d2:	f7f9 f911 	bl	8010af8 <lwip_htons>
 80178d6:	4603      	mov	r3, r0
 80178d8:	b2db      	uxtb	r3, r3
 80178da:	f003 0303 	and.w	r3, r3, #3
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d001      	beq.n	80178e6 <tcp_rexmit_rto_prepare+0xba>
 80178e2:	2301      	movs	r3, #1
 80178e4:	e000      	b.n	80178e8 <tcp_rexmit_rto_prepare+0xbc>
 80178e6:	2300      	movs	r3, #0
 80178e8:	442b      	add	r3, r5
 80178ea:	18e2      	adds	r2, r4, r3
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	2200      	movs	r2, #0
 80178f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80178f6:	2300      	movs	r3, #0
}
 80178f8:	4618      	mov	r0, r3
 80178fa:	3710      	adds	r7, #16
 80178fc:	46bd      	mov	sp, r7
 80178fe:	bdb0      	pop	{r4, r5, r7, pc}
 8017900:	08021b4c 	.word	0x08021b4c
 8017904:	08022188 	.word	0x08022188
 8017908:	08021ba0 	.word	0x08021ba0

0801790c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801790c:	b580      	push	{r7, lr}
 801790e:	b082      	sub	sp, #8
 8017910:	af00      	add	r7, sp, #0
 8017912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	2b00      	cmp	r3, #0
 8017918:	d106      	bne.n	8017928 <tcp_rexmit_rto_commit+0x1c>
 801791a:	4b0d      	ldr	r3, [pc, #52]	@ (8017950 <tcp_rexmit_rto_commit+0x44>)
 801791c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8017920:	490c      	ldr	r1, [pc, #48]	@ (8017954 <tcp_rexmit_rto_commit+0x48>)
 8017922:	480d      	ldr	r0, [pc, #52]	@ (8017958 <tcp_rexmit_rto_commit+0x4c>)
 8017924:	f007 f85c 	bl	801e9e0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801792e:	2bff      	cmp	r3, #255	@ 0xff
 8017930:	d007      	beq.n	8017942 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017938:	3301      	adds	r3, #1
 801793a:	b2da      	uxtb	r2, r3
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017942:	6878      	ldr	r0, [r7, #4]
 8017944:	f7ff fc7e 	bl	8017244 <tcp_output>
}
 8017948:	bf00      	nop
 801794a:	3708      	adds	r7, #8
 801794c:	46bd      	mov	sp, r7
 801794e:	bd80      	pop	{r7, pc}
 8017950:	08021b4c 	.word	0x08021b4c
 8017954:	080221ac 	.word	0x080221ac
 8017958:	08021ba0 	.word	0x08021ba0

0801795c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801795c:	b580      	push	{r7, lr}
 801795e:	b082      	sub	sp, #8
 8017960:	af00      	add	r7, sp, #0
 8017962:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	2b00      	cmp	r3, #0
 8017968:	d106      	bne.n	8017978 <tcp_rexmit_rto+0x1c>
 801796a:	4b0a      	ldr	r3, [pc, #40]	@ (8017994 <tcp_rexmit_rto+0x38>)
 801796c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8017970:	4909      	ldr	r1, [pc, #36]	@ (8017998 <tcp_rexmit_rto+0x3c>)
 8017972:	480a      	ldr	r0, [pc, #40]	@ (801799c <tcp_rexmit_rto+0x40>)
 8017974:	f007 f834 	bl	801e9e0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017978:	6878      	ldr	r0, [r7, #4]
 801797a:	f7ff ff57 	bl	801782c <tcp_rexmit_rto_prepare>
 801797e:	4603      	mov	r3, r0
 8017980:	2b00      	cmp	r3, #0
 8017982:	d102      	bne.n	801798a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017984:	6878      	ldr	r0, [r7, #4]
 8017986:	f7ff ffc1 	bl	801790c <tcp_rexmit_rto_commit>
  }
}
 801798a:	bf00      	nop
 801798c:	3708      	adds	r7, #8
 801798e:	46bd      	mov	sp, r7
 8017990:	bd80      	pop	{r7, pc}
 8017992:	bf00      	nop
 8017994:	08021b4c 	.word	0x08021b4c
 8017998:	080221d0 	.word	0x080221d0
 801799c:	08021ba0 	.word	0x08021ba0

080179a0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80179a0:	b590      	push	{r4, r7, lr}
 80179a2:	b085      	sub	sp, #20
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d106      	bne.n	80179bc <tcp_rexmit+0x1c>
 80179ae:	4b2f      	ldr	r3, [pc, #188]	@ (8017a6c <tcp_rexmit+0xcc>)
 80179b0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80179b4:	492e      	ldr	r1, [pc, #184]	@ (8017a70 <tcp_rexmit+0xd0>)
 80179b6:	482f      	ldr	r0, [pc, #188]	@ (8017a74 <tcp_rexmit+0xd4>)
 80179b8:	f007 f812 	bl	801e9e0 <iprintf>

  if (pcb->unacked == NULL) {
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d102      	bne.n	80179ca <tcp_rexmit+0x2a>
    return ERR_VAL;
 80179c4:	f06f 0305 	mvn.w	r3, #5
 80179c8:	e04c      	b.n	8017a64 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80179ce:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80179d0:	68b8      	ldr	r0, [r7, #8]
 80179d2:	f7ff fe2b 	bl	801762c <tcp_output_segment_busy>
 80179d6:	4603      	mov	r3, r0
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d002      	beq.n	80179e2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80179dc:	f06f 0305 	mvn.w	r3, #5
 80179e0:	e040      	b.n	8017a64 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80179e2:	68bb      	ldr	r3, [r7, #8]
 80179e4:	681a      	ldr	r2, [r3, #0]
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	336c      	adds	r3, #108	@ 0x6c
 80179ee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80179f0:	e002      	b.n	80179f8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d011      	beq.n	8017a24 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	68db      	ldr	r3, [r3, #12]
 8017a06:	685b      	ldr	r3, [r3, #4]
 8017a08:	4618      	mov	r0, r3
 8017a0a:	f7f9 f88b 	bl	8010b24 <lwip_htonl>
 8017a0e:	4604      	mov	r4, r0
 8017a10:	68bb      	ldr	r3, [r7, #8]
 8017a12:	68db      	ldr	r3, [r3, #12]
 8017a14:	685b      	ldr	r3, [r3, #4]
 8017a16:	4618      	mov	r0, r3
 8017a18:	f7f9 f884 	bl	8010b24 <lwip_htonl>
 8017a1c:	4603      	mov	r3, r0
 8017a1e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	dbe6      	blt.n	80179f2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017a24:	68fb      	ldr	r3, [r7, #12]
 8017a26:	681a      	ldr	r2, [r3, #0]
 8017a28:	68bb      	ldr	r3, [r7, #8]
 8017a2a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	68ba      	ldr	r2, [r7, #8]
 8017a30:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017a32:	68bb      	ldr	r3, [r7, #8]
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d103      	bne.n	8017a42 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	2200      	movs	r2, #0
 8017a3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017a48:	2bff      	cmp	r3, #255	@ 0xff
 8017a4a:	d007      	beq.n	8017a5c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017a52:	3301      	adds	r3, #1
 8017a54:	b2da      	uxtb	r2, r3
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	2200      	movs	r2, #0
 8017a60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017a62:	2300      	movs	r3, #0
}
 8017a64:	4618      	mov	r0, r3
 8017a66:	3714      	adds	r7, #20
 8017a68:	46bd      	mov	sp, r7
 8017a6a:	bd90      	pop	{r4, r7, pc}
 8017a6c:	08021b4c 	.word	0x08021b4c
 8017a70:	080221ec 	.word	0x080221ec
 8017a74:	08021ba0 	.word	0x08021ba0

08017a78 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b082      	sub	sp, #8
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d106      	bne.n	8017a94 <tcp_rexmit_fast+0x1c>
 8017a86:	4b2a      	ldr	r3, [pc, #168]	@ (8017b30 <tcp_rexmit_fast+0xb8>)
 8017a88:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8017a8c:	4929      	ldr	r1, [pc, #164]	@ (8017b34 <tcp_rexmit_fast+0xbc>)
 8017a8e:	482a      	ldr	r0, [pc, #168]	@ (8017b38 <tcp_rexmit_fast+0xc0>)
 8017a90:	f006 ffa6 	bl	801e9e0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d045      	beq.n	8017b28 <tcp_rexmit_fast+0xb0>
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	8b5b      	ldrh	r3, [r3, #26]
 8017aa0:	f003 0304 	and.w	r3, r3, #4
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d13f      	bne.n	8017b28 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017aa8:	6878      	ldr	r0, [r7, #4]
 8017aaa:	f7ff ff79 	bl	80179a0 <tcp_rexmit>
 8017aae:	4603      	mov	r3, r0
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d139      	bne.n	8017b28 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017ac0:	4293      	cmp	r3, r2
 8017ac2:	bf28      	it	cs
 8017ac4:	4613      	movcs	r3, r2
 8017ac6:	b29b      	uxth	r3, r3
 8017ac8:	2b00      	cmp	r3, #0
 8017aca:	da00      	bge.n	8017ace <tcp_rexmit_fast+0x56>
 8017acc:	3301      	adds	r3, #1
 8017ace:	105b      	asrs	r3, r3, #1
 8017ad0:	b29a      	uxth	r2, r3
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8017ade:	461a      	mov	r2, r3
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017ae4:	005b      	lsls	r3, r3, #1
 8017ae6:	429a      	cmp	r2, r3
 8017ae8:	d206      	bcs.n	8017af8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017aee:	005b      	lsls	r3, r3, #1
 8017af0:	b29a      	uxth	r2, r3
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017b02:	4619      	mov	r1, r3
 8017b04:	0049      	lsls	r1, r1, #1
 8017b06:	440b      	add	r3, r1
 8017b08:	b29b      	uxth	r3, r3
 8017b0a:	4413      	add	r3, r2
 8017b0c:	b29a      	uxth	r2, r3
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	8b5b      	ldrh	r3, [r3, #26]
 8017b18:	f043 0304 	orr.w	r3, r3, #4
 8017b1c:	b29a      	uxth	r2, r3
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	2200      	movs	r2, #0
 8017b26:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8017b28:	bf00      	nop
 8017b2a:	3708      	adds	r7, #8
 8017b2c:	46bd      	mov	sp, r7
 8017b2e:	bd80      	pop	{r7, pc}
 8017b30:	08021b4c 	.word	0x08021b4c
 8017b34:	08022204 	.word	0x08022204
 8017b38:	08021ba0 	.word	0x08021ba0

08017b3c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8017b3c:	b580      	push	{r7, lr}
 8017b3e:	b086      	sub	sp, #24
 8017b40:	af00      	add	r7, sp, #0
 8017b42:	60f8      	str	r0, [r7, #12]
 8017b44:	607b      	str	r3, [r7, #4]
 8017b46:	460b      	mov	r3, r1
 8017b48:	817b      	strh	r3, [r7, #10]
 8017b4a:	4613      	mov	r3, r2
 8017b4c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8017b4e:	897a      	ldrh	r2, [r7, #10]
 8017b50:	893b      	ldrh	r3, [r7, #8]
 8017b52:	4413      	add	r3, r2
 8017b54:	b29b      	uxth	r3, r3
 8017b56:	3314      	adds	r3, #20
 8017b58:	b29b      	uxth	r3, r3
 8017b5a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017b5e:	4619      	mov	r1, r3
 8017b60:	2022      	movs	r0, #34	@ 0x22
 8017b62:	f7fa fa39 	bl	8011fd8 <pbuf_alloc>
 8017b66:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017b68:	697b      	ldr	r3, [r7, #20]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d04d      	beq.n	8017c0a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8017b6e:	897b      	ldrh	r3, [r7, #10]
 8017b70:	3313      	adds	r3, #19
 8017b72:	697a      	ldr	r2, [r7, #20]
 8017b74:	8952      	ldrh	r2, [r2, #10]
 8017b76:	4293      	cmp	r3, r2
 8017b78:	db06      	blt.n	8017b88 <tcp_output_alloc_header_common+0x4c>
 8017b7a:	4b26      	ldr	r3, [pc, #152]	@ (8017c14 <tcp_output_alloc_header_common+0xd8>)
 8017b7c:	f240 7223 	movw	r2, #1827	@ 0x723
 8017b80:	4925      	ldr	r1, [pc, #148]	@ (8017c18 <tcp_output_alloc_header_common+0xdc>)
 8017b82:	4826      	ldr	r0, [pc, #152]	@ (8017c1c <tcp_output_alloc_header_common+0xe0>)
 8017b84:	f006 ff2c 	bl	801e9e0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017b88:	697b      	ldr	r3, [r7, #20]
 8017b8a:	685b      	ldr	r3, [r3, #4]
 8017b8c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8017b8e:	8c3b      	ldrh	r3, [r7, #32]
 8017b90:	4618      	mov	r0, r3
 8017b92:	f7f8 ffb1 	bl	8010af8 <lwip_htons>
 8017b96:	4603      	mov	r3, r0
 8017b98:	461a      	mov	r2, r3
 8017b9a:	693b      	ldr	r3, [r7, #16]
 8017b9c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8017b9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017ba0:	4618      	mov	r0, r3
 8017ba2:	f7f8 ffa9 	bl	8010af8 <lwip_htons>
 8017ba6:	4603      	mov	r3, r0
 8017ba8:	461a      	mov	r2, r3
 8017baa:	693b      	ldr	r3, [r7, #16]
 8017bac:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8017bae:	693b      	ldr	r3, [r7, #16]
 8017bb0:	687a      	ldr	r2, [r7, #4]
 8017bb2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017bb4:	68f8      	ldr	r0, [r7, #12]
 8017bb6:	f7f8 ffb5 	bl	8010b24 <lwip_htonl>
 8017bba:	4602      	mov	r2, r0
 8017bbc:	693b      	ldr	r3, [r7, #16]
 8017bbe:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8017bc0:	897b      	ldrh	r3, [r7, #10]
 8017bc2:	089b      	lsrs	r3, r3, #2
 8017bc4:	b29b      	uxth	r3, r3
 8017bc6:	3305      	adds	r3, #5
 8017bc8:	b29b      	uxth	r3, r3
 8017bca:	031b      	lsls	r3, r3, #12
 8017bcc:	b29a      	uxth	r2, r3
 8017bce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017bd2:	b29b      	uxth	r3, r3
 8017bd4:	4313      	orrs	r3, r2
 8017bd6:	b29b      	uxth	r3, r3
 8017bd8:	4618      	mov	r0, r3
 8017bda:	f7f8 ff8d 	bl	8010af8 <lwip_htons>
 8017bde:	4603      	mov	r3, r0
 8017be0:	461a      	mov	r2, r3
 8017be2:	693b      	ldr	r3, [r7, #16]
 8017be4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017be6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017be8:	4618      	mov	r0, r3
 8017bea:	f7f8 ff85 	bl	8010af8 <lwip_htons>
 8017bee:	4603      	mov	r3, r0
 8017bf0:	461a      	mov	r2, r3
 8017bf2:	693b      	ldr	r3, [r7, #16]
 8017bf4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017bf6:	693b      	ldr	r3, [r7, #16]
 8017bf8:	2200      	movs	r2, #0
 8017bfa:	741a      	strb	r2, [r3, #16]
 8017bfc:	2200      	movs	r2, #0
 8017bfe:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017c00:	693b      	ldr	r3, [r7, #16]
 8017c02:	2200      	movs	r2, #0
 8017c04:	749a      	strb	r2, [r3, #18]
 8017c06:	2200      	movs	r2, #0
 8017c08:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8017c0a:	697b      	ldr	r3, [r7, #20]
}
 8017c0c:	4618      	mov	r0, r3
 8017c0e:	3718      	adds	r7, #24
 8017c10:	46bd      	mov	sp, r7
 8017c12:	bd80      	pop	{r7, pc}
 8017c14:	08021b4c 	.word	0x08021b4c
 8017c18:	08022224 	.word	0x08022224
 8017c1c:	08021ba0 	.word	0x08021ba0

08017c20 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017c20:	b5b0      	push	{r4, r5, r7, lr}
 8017c22:	b08a      	sub	sp, #40	@ 0x28
 8017c24:	af04      	add	r7, sp, #16
 8017c26:	60f8      	str	r0, [r7, #12]
 8017c28:	607b      	str	r3, [r7, #4]
 8017c2a:	460b      	mov	r3, r1
 8017c2c:	817b      	strh	r3, [r7, #10]
 8017c2e:	4613      	mov	r3, r2
 8017c30:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d106      	bne.n	8017c46 <tcp_output_alloc_header+0x26>
 8017c38:	4b15      	ldr	r3, [pc, #84]	@ (8017c90 <tcp_output_alloc_header+0x70>)
 8017c3a:	f240 7242 	movw	r2, #1858	@ 0x742
 8017c3e:	4915      	ldr	r1, [pc, #84]	@ (8017c94 <tcp_output_alloc_header+0x74>)
 8017c40:	4815      	ldr	r0, [pc, #84]	@ (8017c98 <tcp_output_alloc_header+0x78>)
 8017c42:	f006 fecd 	bl	801e9e0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8017c4a:	68fb      	ldr	r3, [r7, #12]
 8017c4c:	8adb      	ldrh	r3, [r3, #22]
 8017c4e:	68fa      	ldr	r2, [r7, #12]
 8017c50:	8b12      	ldrh	r2, [r2, #24]
 8017c52:	68f9      	ldr	r1, [r7, #12]
 8017c54:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8017c56:	893d      	ldrh	r5, [r7, #8]
 8017c58:	897c      	ldrh	r4, [r7, #10]
 8017c5a:	9103      	str	r1, [sp, #12]
 8017c5c:	2110      	movs	r1, #16
 8017c5e:	9102      	str	r1, [sp, #8]
 8017c60:	9201      	str	r2, [sp, #4]
 8017c62:	9300      	str	r3, [sp, #0]
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	462a      	mov	r2, r5
 8017c68:	4621      	mov	r1, r4
 8017c6a:	f7ff ff67 	bl	8017b3c <tcp_output_alloc_header_common>
 8017c6e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017c70:	697b      	ldr	r3, [r7, #20]
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d006      	beq.n	8017c84 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017c7a:	68fa      	ldr	r2, [r7, #12]
 8017c7c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8017c7e:	441a      	add	r2, r3
 8017c80:	68fb      	ldr	r3, [r7, #12]
 8017c82:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8017c84:	697b      	ldr	r3, [r7, #20]
}
 8017c86:	4618      	mov	r0, r3
 8017c88:	3718      	adds	r7, #24
 8017c8a:	46bd      	mov	sp, r7
 8017c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8017c8e:	bf00      	nop
 8017c90:	08021b4c 	.word	0x08021b4c
 8017c94:	08022254 	.word	0x08022254
 8017c98:	08021ba0 	.word	0x08021ba0

08017c9c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017c9c:	b580      	push	{r7, lr}
 8017c9e:	b088      	sub	sp, #32
 8017ca0:	af00      	add	r7, sp, #0
 8017ca2:	60f8      	str	r0, [r7, #12]
 8017ca4:	60b9      	str	r1, [r7, #8]
 8017ca6:	4611      	mov	r1, r2
 8017ca8:	461a      	mov	r2, r3
 8017caa:	460b      	mov	r3, r1
 8017cac:	71fb      	strb	r3, [r7, #7]
 8017cae:	4613      	mov	r3, r2
 8017cb0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8017cb6:	68bb      	ldr	r3, [r7, #8]
 8017cb8:	2b00      	cmp	r3, #0
 8017cba:	d106      	bne.n	8017cca <tcp_output_fill_options+0x2e>
 8017cbc:	4b12      	ldr	r3, [pc, #72]	@ (8017d08 <tcp_output_fill_options+0x6c>)
 8017cbe:	f240 7256 	movw	r2, #1878	@ 0x756
 8017cc2:	4912      	ldr	r1, [pc, #72]	@ (8017d0c <tcp_output_fill_options+0x70>)
 8017cc4:	4812      	ldr	r0, [pc, #72]	@ (8017d10 <tcp_output_fill_options+0x74>)
 8017cc6:	f006 fe8b 	bl	801e9e0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8017cca:	68bb      	ldr	r3, [r7, #8]
 8017ccc:	685b      	ldr	r3, [r3, #4]
 8017cce:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8017cd0:	69bb      	ldr	r3, [r7, #24]
 8017cd2:	3314      	adds	r3, #20
 8017cd4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017cd6:	8bfb      	ldrh	r3, [r7, #30]
 8017cd8:	009b      	lsls	r3, r3, #2
 8017cda:	461a      	mov	r2, r3
 8017cdc:	79fb      	ldrb	r3, [r7, #7]
 8017cde:	009b      	lsls	r3, r3, #2
 8017ce0:	f003 0304 	and.w	r3, r3, #4
 8017ce4:	4413      	add	r3, r2
 8017ce6:	3314      	adds	r3, #20
 8017ce8:	69ba      	ldr	r2, [r7, #24]
 8017cea:	4413      	add	r3, r2
 8017cec:	697a      	ldr	r2, [r7, #20]
 8017cee:	429a      	cmp	r2, r3
 8017cf0:	d006      	beq.n	8017d00 <tcp_output_fill_options+0x64>
 8017cf2:	4b05      	ldr	r3, [pc, #20]	@ (8017d08 <tcp_output_fill_options+0x6c>)
 8017cf4:	f240 7275 	movw	r2, #1909	@ 0x775
 8017cf8:	4906      	ldr	r1, [pc, #24]	@ (8017d14 <tcp_output_fill_options+0x78>)
 8017cfa:	4805      	ldr	r0, [pc, #20]	@ (8017d10 <tcp_output_fill_options+0x74>)
 8017cfc:	f006 fe70 	bl	801e9e0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017d00:	bf00      	nop
 8017d02:	3720      	adds	r7, #32
 8017d04:	46bd      	mov	sp, r7
 8017d06:	bd80      	pop	{r7, pc}
 8017d08:	08021b4c 	.word	0x08021b4c
 8017d0c:	0802227c 	.word	0x0802227c
 8017d10:	08021ba0 	.word	0x08021ba0
 8017d14:	08022174 	.word	0x08022174

08017d18 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017d18:	b580      	push	{r7, lr}
 8017d1a:	b08a      	sub	sp, #40	@ 0x28
 8017d1c:	af04      	add	r7, sp, #16
 8017d1e:	60f8      	str	r0, [r7, #12]
 8017d20:	60b9      	str	r1, [r7, #8]
 8017d22:	607a      	str	r2, [r7, #4]
 8017d24:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8017d26:	68bb      	ldr	r3, [r7, #8]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d106      	bne.n	8017d3a <tcp_output_control_segment+0x22>
 8017d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8017da0 <tcp_output_control_segment+0x88>)
 8017d2e:	f240 7287 	movw	r2, #1927	@ 0x787
 8017d32:	491c      	ldr	r1, [pc, #112]	@ (8017da4 <tcp_output_control_segment+0x8c>)
 8017d34:	481c      	ldr	r0, [pc, #112]	@ (8017da8 <tcp_output_control_segment+0x90>)
 8017d36:	f006 fe53 	bl	801e9e0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8017d3a:	683a      	ldr	r2, [r7, #0]
 8017d3c:	6879      	ldr	r1, [r7, #4]
 8017d3e:	68f8      	ldr	r0, [r7, #12]
 8017d40:	f7fe ff42 	bl	8016bc8 <tcp_route>
 8017d44:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017d46:	693b      	ldr	r3, [r7, #16]
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d102      	bne.n	8017d52 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8017d4c:	23fc      	movs	r3, #252	@ 0xfc
 8017d4e:	75fb      	strb	r3, [r7, #23]
 8017d50:	e01c      	b.n	8017d8c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d006      	beq.n	8017d66 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	7adb      	ldrb	r3, [r3, #11]
 8017d5c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	7a9b      	ldrb	r3, [r3, #10]
 8017d62:	757b      	strb	r3, [r7, #21]
 8017d64:	e003      	b.n	8017d6e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017d66:	23ff      	movs	r3, #255	@ 0xff
 8017d68:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8017d6e:	7dba      	ldrb	r2, [r7, #22]
 8017d70:	693b      	ldr	r3, [r7, #16]
 8017d72:	9302      	str	r3, [sp, #8]
 8017d74:	2306      	movs	r3, #6
 8017d76:	9301      	str	r3, [sp, #4]
 8017d78:	7d7b      	ldrb	r3, [r7, #21]
 8017d7a:	9300      	str	r3, [sp, #0]
 8017d7c:	4613      	mov	r3, r2
 8017d7e:	683a      	ldr	r2, [r7, #0]
 8017d80:	6879      	ldr	r1, [r7, #4]
 8017d82:	68b8      	ldr	r0, [r7, #8]
 8017d84:	f004 fd1e 	bl	801c7c4 <ip4_output_if>
 8017d88:	4603      	mov	r3, r0
 8017d8a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017d8c:	68b8      	ldr	r0, [r7, #8]
 8017d8e:	f7fa fc07 	bl	80125a0 <pbuf_free>
  return err;
 8017d92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017d96:	4618      	mov	r0, r3
 8017d98:	3718      	adds	r7, #24
 8017d9a:	46bd      	mov	sp, r7
 8017d9c:	bd80      	pop	{r7, pc}
 8017d9e:	bf00      	nop
 8017da0:	08021b4c 	.word	0x08021b4c
 8017da4:	080222a4 	.word	0x080222a4
 8017da8:	08021ba0 	.word	0x08021ba0

08017dac <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017dac:	b590      	push	{r4, r7, lr}
 8017dae:	b08b      	sub	sp, #44	@ 0x2c
 8017db0:	af04      	add	r7, sp, #16
 8017db2:	60f8      	str	r0, [r7, #12]
 8017db4:	60b9      	str	r1, [r7, #8]
 8017db6:	607a      	str	r2, [r7, #4]
 8017db8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8017dba:	683b      	ldr	r3, [r7, #0]
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d106      	bne.n	8017dce <tcp_rst+0x22>
 8017dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8017e40 <tcp_rst+0x94>)
 8017dc2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8017dc6:	491f      	ldr	r1, [pc, #124]	@ (8017e44 <tcp_rst+0x98>)
 8017dc8:	481f      	ldr	r0, [pc, #124]	@ (8017e48 <tcp_rst+0x9c>)
 8017dca:	f006 fe09 	bl	801e9e0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8017dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d106      	bne.n	8017de2 <tcp_rst+0x36>
 8017dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8017e40 <tcp_rst+0x94>)
 8017dd6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8017dda:	491c      	ldr	r1, [pc, #112]	@ (8017e4c <tcp_rst+0xa0>)
 8017ddc:	481a      	ldr	r0, [pc, #104]	@ (8017e48 <tcp_rst+0x9c>)
 8017dde:	f006 fdff 	bl	801e9e0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017de2:	2300      	movs	r3, #0
 8017de4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8017de6:	f246 0308 	movw	r3, #24584	@ 0x6008
 8017dea:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8017dec:	7dfb      	ldrb	r3, [r7, #23]
 8017dee:	b29c      	uxth	r4, r3
 8017df0:	68b8      	ldr	r0, [r7, #8]
 8017df2:	f7f8 fe97 	bl	8010b24 <lwip_htonl>
 8017df6:	4602      	mov	r2, r0
 8017df8:	8abb      	ldrh	r3, [r7, #20]
 8017dfa:	9303      	str	r3, [sp, #12]
 8017dfc:	2314      	movs	r3, #20
 8017dfe:	9302      	str	r3, [sp, #8]
 8017e00:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017e02:	9301      	str	r3, [sp, #4]
 8017e04:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017e06:	9300      	str	r3, [sp, #0]
 8017e08:	4613      	mov	r3, r2
 8017e0a:	2200      	movs	r2, #0
 8017e0c:	4621      	mov	r1, r4
 8017e0e:	6878      	ldr	r0, [r7, #4]
 8017e10:	f7ff fe94 	bl	8017b3c <tcp_output_alloc_header_common>
 8017e14:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017e16:	693b      	ldr	r3, [r7, #16]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d00c      	beq.n	8017e36 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017e1c:	7dfb      	ldrb	r3, [r7, #23]
 8017e1e:	2200      	movs	r2, #0
 8017e20:	6939      	ldr	r1, [r7, #16]
 8017e22:	68f8      	ldr	r0, [r7, #12]
 8017e24:	f7ff ff3a 	bl	8017c9c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e2a:	683a      	ldr	r2, [r7, #0]
 8017e2c:	6939      	ldr	r1, [r7, #16]
 8017e2e:	68f8      	ldr	r0, [r7, #12]
 8017e30:	f7ff ff72 	bl	8017d18 <tcp_output_control_segment>
 8017e34:	e000      	b.n	8017e38 <tcp_rst+0x8c>
    return;
 8017e36:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017e38:	371c      	adds	r7, #28
 8017e3a:	46bd      	mov	sp, r7
 8017e3c:	bd90      	pop	{r4, r7, pc}
 8017e3e:	bf00      	nop
 8017e40:	08021b4c 	.word	0x08021b4c
 8017e44:	080222d0 	.word	0x080222d0
 8017e48:	08021ba0 	.word	0x08021ba0
 8017e4c:	080222ec 	.word	0x080222ec

08017e50 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017e50:	b590      	push	{r4, r7, lr}
 8017e52:	b087      	sub	sp, #28
 8017e54:	af00      	add	r7, sp, #0
 8017e56:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017e58:	2300      	movs	r3, #0
 8017e5a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d106      	bne.n	8017e74 <tcp_send_empty_ack+0x24>
 8017e66:	4b28      	ldr	r3, [pc, #160]	@ (8017f08 <tcp_send_empty_ack+0xb8>)
 8017e68:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8017e6c:	4927      	ldr	r1, [pc, #156]	@ (8017f0c <tcp_send_empty_ack+0xbc>)
 8017e6e:	4828      	ldr	r0, [pc, #160]	@ (8017f10 <tcp_send_empty_ack+0xc0>)
 8017e70:	f006 fdb6 	bl	801e9e0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017e74:	7dfb      	ldrb	r3, [r7, #23]
 8017e76:	009b      	lsls	r3, r3, #2
 8017e78:	b2db      	uxtb	r3, r3
 8017e7a:	f003 0304 	and.w	r3, r3, #4
 8017e7e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017e80:	7d7b      	ldrb	r3, [r7, #21]
 8017e82:	b29c      	uxth	r4, r3
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017e88:	4618      	mov	r0, r3
 8017e8a:	f7f8 fe4b 	bl	8010b24 <lwip_htonl>
 8017e8e:	4603      	mov	r3, r0
 8017e90:	2200      	movs	r2, #0
 8017e92:	4621      	mov	r1, r4
 8017e94:	6878      	ldr	r0, [r7, #4]
 8017e96:	f7ff fec3 	bl	8017c20 <tcp_output_alloc_header>
 8017e9a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017e9c:	693b      	ldr	r3, [r7, #16]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d109      	bne.n	8017eb6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	8b5b      	ldrh	r3, [r3, #26]
 8017ea6:	f043 0303 	orr.w	r3, r3, #3
 8017eaa:	b29a      	uxth	r2, r3
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017eb0:	f06f 0301 	mvn.w	r3, #1
 8017eb4:	e023      	b.n	8017efe <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8017eb6:	7dbb      	ldrb	r3, [r7, #22]
 8017eb8:	7dfa      	ldrb	r2, [r7, #23]
 8017eba:	6939      	ldr	r1, [r7, #16]
 8017ebc:	6878      	ldr	r0, [r7, #4]
 8017ebe:	f7ff feed 	bl	8017c9c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017ec2:	687a      	ldr	r2, [r7, #4]
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	3304      	adds	r3, #4
 8017ec8:	6939      	ldr	r1, [r7, #16]
 8017eca:	6878      	ldr	r0, [r7, #4]
 8017ecc:	f7ff ff24 	bl	8017d18 <tcp_output_control_segment>
 8017ed0:	4603      	mov	r3, r0
 8017ed2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d007      	beq.n	8017eec <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	8b5b      	ldrh	r3, [r3, #26]
 8017ee0:	f043 0303 	orr.w	r3, r3, #3
 8017ee4:	b29a      	uxth	r2, r3
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	835a      	strh	r2, [r3, #26]
 8017eea:	e006      	b.n	8017efa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	8b5b      	ldrh	r3, [r3, #26]
 8017ef0:	f023 0303 	bic.w	r3, r3, #3
 8017ef4:	b29a      	uxth	r2, r3
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8017efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017efe:	4618      	mov	r0, r3
 8017f00:	371c      	adds	r7, #28
 8017f02:	46bd      	mov	sp, r7
 8017f04:	bd90      	pop	{r4, r7, pc}
 8017f06:	bf00      	nop
 8017f08:	08021b4c 	.word	0x08021b4c
 8017f0c:	08022308 	.word	0x08022308
 8017f10:	08021ba0 	.word	0x08021ba0

08017f14 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017f14:	b590      	push	{r4, r7, lr}
 8017f16:	b087      	sub	sp, #28
 8017f18:	af00      	add	r7, sp, #0
 8017f1a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d106      	bne.n	8017f34 <tcp_keepalive+0x20>
 8017f26:	4b18      	ldr	r3, [pc, #96]	@ (8017f88 <tcp_keepalive+0x74>)
 8017f28:	f640 0224 	movw	r2, #2084	@ 0x824
 8017f2c:	4917      	ldr	r1, [pc, #92]	@ (8017f8c <tcp_keepalive+0x78>)
 8017f2e:	4818      	ldr	r0, [pc, #96]	@ (8017f90 <tcp_keepalive+0x7c>)
 8017f30:	f006 fd56 	bl	801e9e0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017f34:	7dfb      	ldrb	r3, [r7, #23]
 8017f36:	b29c      	uxth	r4, r3
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017f3c:	3b01      	subs	r3, #1
 8017f3e:	4618      	mov	r0, r3
 8017f40:	f7f8 fdf0 	bl	8010b24 <lwip_htonl>
 8017f44:	4603      	mov	r3, r0
 8017f46:	2200      	movs	r2, #0
 8017f48:	4621      	mov	r1, r4
 8017f4a:	6878      	ldr	r0, [r7, #4]
 8017f4c:	f7ff fe68 	bl	8017c20 <tcp_output_alloc_header>
 8017f50:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017f52:	693b      	ldr	r3, [r7, #16]
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d102      	bne.n	8017f5e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017f58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017f5c:	e010      	b.n	8017f80 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017f5e:	7dfb      	ldrb	r3, [r7, #23]
 8017f60:	2200      	movs	r2, #0
 8017f62:	6939      	ldr	r1, [r7, #16]
 8017f64:	6878      	ldr	r0, [r7, #4]
 8017f66:	f7ff fe99 	bl	8017c9c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017f6a:	687a      	ldr	r2, [r7, #4]
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	3304      	adds	r3, #4
 8017f70:	6939      	ldr	r1, [r7, #16]
 8017f72:	6878      	ldr	r0, [r7, #4]
 8017f74:	f7ff fed0 	bl	8017d18 <tcp_output_control_segment>
 8017f78:	4603      	mov	r3, r0
 8017f7a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017f7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017f80:	4618      	mov	r0, r3
 8017f82:	371c      	adds	r7, #28
 8017f84:	46bd      	mov	sp, r7
 8017f86:	bd90      	pop	{r4, r7, pc}
 8017f88:	08021b4c 	.word	0x08021b4c
 8017f8c:	08022328 	.word	0x08022328
 8017f90:	08021ba0 	.word	0x08021ba0

08017f94 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017f94:	b590      	push	{r4, r7, lr}
 8017f96:	b08b      	sub	sp, #44	@ 0x2c
 8017f98:	af00      	add	r7, sp, #0
 8017f9a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017f9c:	2300      	movs	r3, #0
 8017f9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d106      	bne.n	8017fb6 <tcp_zero_window_probe+0x22>
 8017fa8:	4b4c      	ldr	r3, [pc, #304]	@ (80180dc <tcp_zero_window_probe+0x148>)
 8017faa:	f640 024f 	movw	r2, #2127	@ 0x84f
 8017fae:	494c      	ldr	r1, [pc, #304]	@ (80180e0 <tcp_zero_window_probe+0x14c>)
 8017fb0:	484c      	ldr	r0, [pc, #304]	@ (80180e4 <tcp_zero_window_probe+0x150>)
 8017fb2:	f006 fd15 	bl	801e9e0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017fba:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017fbc:	6a3b      	ldr	r3, [r7, #32]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d101      	bne.n	8017fc6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	e086      	b.n	80180d4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017fcc:	2bff      	cmp	r3, #255	@ 0xff
 8017fce:	d007      	beq.n	8017fe0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017fd6:	3301      	adds	r3, #1
 8017fd8:	b2da      	uxtb	r2, r3
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017fe0:	6a3b      	ldr	r3, [r7, #32]
 8017fe2:	68db      	ldr	r3, [r3, #12]
 8017fe4:	899b      	ldrh	r3, [r3, #12]
 8017fe6:	b29b      	uxth	r3, r3
 8017fe8:	4618      	mov	r0, r3
 8017fea:	f7f8 fd85 	bl	8010af8 <lwip_htons>
 8017fee:	4603      	mov	r3, r0
 8017ff0:	b2db      	uxtb	r3, r3
 8017ff2:	f003 0301 	and.w	r3, r3, #1
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d005      	beq.n	8018006 <tcp_zero_window_probe+0x72>
 8017ffa:	6a3b      	ldr	r3, [r7, #32]
 8017ffc:	891b      	ldrh	r3, [r3, #8]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d101      	bne.n	8018006 <tcp_zero_window_probe+0x72>
 8018002:	2301      	movs	r3, #1
 8018004:	e000      	b.n	8018008 <tcp_zero_window_probe+0x74>
 8018006:	2300      	movs	r3, #0
 8018008:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801800a:	7ffb      	ldrb	r3, [r7, #31]
 801800c:	2b00      	cmp	r3, #0
 801800e:	bf0c      	ite	eq
 8018010:	2301      	moveq	r3, #1
 8018012:	2300      	movne	r3, #0
 8018014:	b2db      	uxtb	r3, r3
 8018016:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8018018:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801801c:	b299      	uxth	r1, r3
 801801e:	6a3b      	ldr	r3, [r7, #32]
 8018020:	68db      	ldr	r3, [r3, #12]
 8018022:	685b      	ldr	r3, [r3, #4]
 8018024:	8bba      	ldrh	r2, [r7, #28]
 8018026:	6878      	ldr	r0, [r7, #4]
 8018028:	f7ff fdfa 	bl	8017c20 <tcp_output_alloc_header>
 801802c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801802e:	69bb      	ldr	r3, [r7, #24]
 8018030:	2b00      	cmp	r3, #0
 8018032:	d102      	bne.n	801803a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8018034:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018038:	e04c      	b.n	80180d4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801803a:	69bb      	ldr	r3, [r7, #24]
 801803c:	685b      	ldr	r3, [r3, #4]
 801803e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8018040:	7ffb      	ldrb	r3, [r7, #31]
 8018042:	2b00      	cmp	r3, #0
 8018044:	d011      	beq.n	801806a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8018046:	697b      	ldr	r3, [r7, #20]
 8018048:	899b      	ldrh	r3, [r3, #12]
 801804a:	b29b      	uxth	r3, r3
 801804c:	b21b      	sxth	r3, r3
 801804e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8018052:	b21c      	sxth	r4, r3
 8018054:	2011      	movs	r0, #17
 8018056:	f7f8 fd4f 	bl	8010af8 <lwip_htons>
 801805a:	4603      	mov	r3, r0
 801805c:	b21b      	sxth	r3, r3
 801805e:	4323      	orrs	r3, r4
 8018060:	b21b      	sxth	r3, r3
 8018062:	b29a      	uxth	r2, r3
 8018064:	697b      	ldr	r3, [r7, #20]
 8018066:	819a      	strh	r2, [r3, #12]
 8018068:	e010      	b.n	801808c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801806a:	69bb      	ldr	r3, [r7, #24]
 801806c:	685b      	ldr	r3, [r3, #4]
 801806e:	3314      	adds	r3, #20
 8018070:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8018072:	6a3b      	ldr	r3, [r7, #32]
 8018074:	6858      	ldr	r0, [r3, #4]
 8018076:	6a3b      	ldr	r3, [r7, #32]
 8018078:	685b      	ldr	r3, [r3, #4]
 801807a:	891a      	ldrh	r2, [r3, #8]
 801807c:	6a3b      	ldr	r3, [r7, #32]
 801807e:	891b      	ldrh	r3, [r3, #8]
 8018080:	1ad3      	subs	r3, r2, r3
 8018082:	b29b      	uxth	r3, r3
 8018084:	2201      	movs	r2, #1
 8018086:	6939      	ldr	r1, [r7, #16]
 8018088:	f7fa fc90 	bl	80129ac <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801808c:	6a3b      	ldr	r3, [r7, #32]
 801808e:	68db      	ldr	r3, [r3, #12]
 8018090:	685b      	ldr	r3, [r3, #4]
 8018092:	4618      	mov	r0, r3
 8018094:	f7f8 fd46 	bl	8010b24 <lwip_htonl>
 8018098:	4603      	mov	r3, r0
 801809a:	3301      	adds	r3, #1
 801809c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	1ad3      	subs	r3, r2, r3
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	da02      	bge.n	80180b0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	68fa      	ldr	r2, [r7, #12]
 80180ae:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80180b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80180b4:	2200      	movs	r2, #0
 80180b6:	69b9      	ldr	r1, [r7, #24]
 80180b8:	6878      	ldr	r0, [r7, #4]
 80180ba:	f7ff fdef 	bl	8017c9c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80180be:	687a      	ldr	r2, [r7, #4]
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	3304      	adds	r3, #4
 80180c4:	69b9      	ldr	r1, [r7, #24]
 80180c6:	6878      	ldr	r0, [r7, #4]
 80180c8:	f7ff fe26 	bl	8017d18 <tcp_output_control_segment>
 80180cc:	4603      	mov	r3, r0
 80180ce:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80180d0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80180d4:	4618      	mov	r0, r3
 80180d6:	372c      	adds	r7, #44	@ 0x2c
 80180d8:	46bd      	mov	sp, r7
 80180da:	bd90      	pop	{r4, r7, pc}
 80180dc:	08021b4c 	.word	0x08021b4c
 80180e0:	08022344 	.word	0x08022344
 80180e4:	08021ba0 	.word	0x08021ba0

080180e8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80180e8:	b580      	push	{r7, lr}
 80180ea:	b082      	sub	sp, #8
 80180ec:	af00      	add	r7, sp, #0
 80180ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80180f0:	f7fa ff10 	bl	8012f14 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80180f4:	4b0a      	ldr	r3, [pc, #40]	@ (8018120 <tcpip_tcp_timer+0x38>)
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d103      	bne.n	8018104 <tcpip_tcp_timer+0x1c>
 80180fc:	4b09      	ldr	r3, [pc, #36]	@ (8018124 <tcpip_tcp_timer+0x3c>)
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	2b00      	cmp	r3, #0
 8018102:	d005      	beq.n	8018110 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018104:	2200      	movs	r2, #0
 8018106:	4908      	ldr	r1, [pc, #32]	@ (8018128 <tcpip_tcp_timer+0x40>)
 8018108:	20fa      	movs	r0, #250	@ 0xfa
 801810a:	f000 f8f3 	bl	80182f4 <sys_timeout>
 801810e:	e003      	b.n	8018118 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8018110:	4b06      	ldr	r3, [pc, #24]	@ (801812c <tcpip_tcp_timer+0x44>)
 8018112:	2200      	movs	r2, #0
 8018114:	601a      	str	r2, [r3, #0]
  }
}
 8018116:	bf00      	nop
 8018118:	bf00      	nop
 801811a:	3708      	adds	r7, #8
 801811c:	46bd      	mov	sp, r7
 801811e:	bd80      	pop	{r7, pc}
 8018120:	200047a8 	.word	0x200047a8
 8018124:	200047ac 	.word	0x200047ac
 8018128:	080180e9 	.word	0x080180e9
 801812c:	200047f4 	.word	0x200047f4

08018130 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8018130:	b580      	push	{r7, lr}
 8018132:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8018134:	4b0a      	ldr	r3, [pc, #40]	@ (8018160 <tcp_timer_needed+0x30>)
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	2b00      	cmp	r3, #0
 801813a:	d10f      	bne.n	801815c <tcp_timer_needed+0x2c>
 801813c:	4b09      	ldr	r3, [pc, #36]	@ (8018164 <tcp_timer_needed+0x34>)
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	2b00      	cmp	r3, #0
 8018142:	d103      	bne.n	801814c <tcp_timer_needed+0x1c>
 8018144:	4b08      	ldr	r3, [pc, #32]	@ (8018168 <tcp_timer_needed+0x38>)
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	2b00      	cmp	r3, #0
 801814a:	d007      	beq.n	801815c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801814c:	4b04      	ldr	r3, [pc, #16]	@ (8018160 <tcp_timer_needed+0x30>)
 801814e:	2201      	movs	r2, #1
 8018150:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018152:	2200      	movs	r2, #0
 8018154:	4905      	ldr	r1, [pc, #20]	@ (801816c <tcp_timer_needed+0x3c>)
 8018156:	20fa      	movs	r0, #250	@ 0xfa
 8018158:	f000 f8cc 	bl	80182f4 <sys_timeout>
  }
}
 801815c:	bf00      	nop
 801815e:	bd80      	pop	{r7, pc}
 8018160:	200047f4 	.word	0x200047f4
 8018164:	200047a8 	.word	0x200047a8
 8018168:	200047ac 	.word	0x200047ac
 801816c:	080180e9 	.word	0x080180e9

08018170 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8018170:	b580      	push	{r7, lr}
 8018172:	b086      	sub	sp, #24
 8018174:	af00      	add	r7, sp, #0
 8018176:	60f8      	str	r0, [r7, #12]
 8018178:	60b9      	str	r1, [r7, #8]
 801817a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801817c:	200b      	movs	r0, #11
 801817e:	f7f9 fab3 	bl	80116e8 <memp_malloc>
 8018182:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8018184:	693b      	ldr	r3, [r7, #16]
 8018186:	2b00      	cmp	r3, #0
 8018188:	d109      	bne.n	801819e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801818a:	693b      	ldr	r3, [r7, #16]
 801818c:	2b00      	cmp	r3, #0
 801818e:	d151      	bne.n	8018234 <sys_timeout_abs+0xc4>
 8018190:	4b2a      	ldr	r3, [pc, #168]	@ (801823c <sys_timeout_abs+0xcc>)
 8018192:	22be      	movs	r2, #190	@ 0xbe
 8018194:	492a      	ldr	r1, [pc, #168]	@ (8018240 <sys_timeout_abs+0xd0>)
 8018196:	482b      	ldr	r0, [pc, #172]	@ (8018244 <sys_timeout_abs+0xd4>)
 8018198:	f006 fc22 	bl	801e9e0 <iprintf>
    return;
 801819c:	e04a      	b.n	8018234 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801819e:	693b      	ldr	r3, [r7, #16]
 80181a0:	2200      	movs	r2, #0
 80181a2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80181a4:	693b      	ldr	r3, [r7, #16]
 80181a6:	68ba      	ldr	r2, [r7, #8]
 80181a8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80181aa:	693b      	ldr	r3, [r7, #16]
 80181ac:	687a      	ldr	r2, [r7, #4]
 80181ae:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80181b0:	693b      	ldr	r3, [r7, #16]
 80181b2:	68fa      	ldr	r2, [r7, #12]
 80181b4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80181b6:	4b24      	ldr	r3, [pc, #144]	@ (8018248 <sys_timeout_abs+0xd8>)
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d103      	bne.n	80181c6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80181be:	4a22      	ldr	r2, [pc, #136]	@ (8018248 <sys_timeout_abs+0xd8>)
 80181c0:	693b      	ldr	r3, [r7, #16]
 80181c2:	6013      	str	r3, [r2, #0]
    return;
 80181c4:	e037      	b.n	8018236 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80181c6:	693b      	ldr	r3, [r7, #16]
 80181c8:	685a      	ldr	r2, [r3, #4]
 80181ca:	4b1f      	ldr	r3, [pc, #124]	@ (8018248 <sys_timeout_abs+0xd8>)
 80181cc:	681b      	ldr	r3, [r3, #0]
 80181ce:	685b      	ldr	r3, [r3, #4]
 80181d0:	1ad3      	subs	r3, r2, r3
 80181d2:	0fdb      	lsrs	r3, r3, #31
 80181d4:	f003 0301 	and.w	r3, r3, #1
 80181d8:	b2db      	uxtb	r3, r3
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d007      	beq.n	80181ee <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80181de:	4b1a      	ldr	r3, [pc, #104]	@ (8018248 <sys_timeout_abs+0xd8>)
 80181e0:	681a      	ldr	r2, [r3, #0]
 80181e2:	693b      	ldr	r3, [r7, #16]
 80181e4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80181e6:	4a18      	ldr	r2, [pc, #96]	@ (8018248 <sys_timeout_abs+0xd8>)
 80181e8:	693b      	ldr	r3, [r7, #16]
 80181ea:	6013      	str	r3, [r2, #0]
 80181ec:	e023      	b.n	8018236 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80181ee:	4b16      	ldr	r3, [pc, #88]	@ (8018248 <sys_timeout_abs+0xd8>)
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	617b      	str	r3, [r7, #20]
 80181f4:	e01a      	b.n	801822c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80181f6:	697b      	ldr	r3, [r7, #20]
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d00b      	beq.n	8018216 <sys_timeout_abs+0xa6>
 80181fe:	693b      	ldr	r3, [r7, #16]
 8018200:	685a      	ldr	r2, [r3, #4]
 8018202:	697b      	ldr	r3, [r7, #20]
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	685b      	ldr	r3, [r3, #4]
 8018208:	1ad3      	subs	r3, r2, r3
 801820a:	0fdb      	lsrs	r3, r3, #31
 801820c:	f003 0301 	and.w	r3, r3, #1
 8018210:	b2db      	uxtb	r3, r3
 8018212:	2b00      	cmp	r3, #0
 8018214:	d007      	beq.n	8018226 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8018216:	697b      	ldr	r3, [r7, #20]
 8018218:	681a      	ldr	r2, [r3, #0]
 801821a:	693b      	ldr	r3, [r7, #16]
 801821c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801821e:	697b      	ldr	r3, [r7, #20]
 8018220:	693a      	ldr	r2, [r7, #16]
 8018222:	601a      	str	r2, [r3, #0]
        break;
 8018224:	e007      	b.n	8018236 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8018226:	697b      	ldr	r3, [r7, #20]
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	617b      	str	r3, [r7, #20]
 801822c:	697b      	ldr	r3, [r7, #20]
 801822e:	2b00      	cmp	r3, #0
 8018230:	d1e1      	bne.n	80181f6 <sys_timeout_abs+0x86>
 8018232:	e000      	b.n	8018236 <sys_timeout_abs+0xc6>
    return;
 8018234:	bf00      	nop
      }
    }
  }
}
 8018236:	3718      	adds	r7, #24
 8018238:	46bd      	mov	sp, r7
 801823a:	bd80      	pop	{r7, pc}
 801823c:	08022368 	.word	0x08022368
 8018240:	0802239c 	.word	0x0802239c
 8018244:	080223dc 	.word	0x080223dc
 8018248:	200047ec 	.word	0x200047ec

0801824c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801824c:	b580      	push	{r7, lr}
 801824e:	b086      	sub	sp, #24
 8018250:	af00      	add	r7, sp, #0
 8018252:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8018258:	697b      	ldr	r3, [r7, #20]
 801825a:	685b      	ldr	r3, [r3, #4]
 801825c:	4798      	blx	r3

  now = sys_now();
 801825e:	f7f0 f8f3 	bl	8008448 <sys_now>
 8018262:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8018264:	697b      	ldr	r3, [r7, #20]
 8018266:	681a      	ldr	r2, [r3, #0]
 8018268:	4b0f      	ldr	r3, [pc, #60]	@ (80182a8 <lwip_cyclic_timer+0x5c>)
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	4413      	add	r3, r2
 801826e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8018270:	68fa      	ldr	r2, [r7, #12]
 8018272:	693b      	ldr	r3, [r7, #16]
 8018274:	1ad3      	subs	r3, r2, r3
 8018276:	0fdb      	lsrs	r3, r3, #31
 8018278:	f003 0301 	and.w	r3, r3, #1
 801827c:	b2db      	uxtb	r3, r3
 801827e:	2b00      	cmp	r3, #0
 8018280:	d009      	beq.n	8018296 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8018282:	697b      	ldr	r3, [r7, #20]
 8018284:	681a      	ldr	r2, [r3, #0]
 8018286:	693b      	ldr	r3, [r7, #16]
 8018288:	4413      	add	r3, r2
 801828a:	687a      	ldr	r2, [r7, #4]
 801828c:	4907      	ldr	r1, [pc, #28]	@ (80182ac <lwip_cyclic_timer+0x60>)
 801828e:	4618      	mov	r0, r3
 8018290:	f7ff ff6e 	bl	8018170 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8018294:	e004      	b.n	80182a0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8018296:	687a      	ldr	r2, [r7, #4]
 8018298:	4904      	ldr	r1, [pc, #16]	@ (80182ac <lwip_cyclic_timer+0x60>)
 801829a:	68f8      	ldr	r0, [r7, #12]
 801829c:	f7ff ff68 	bl	8018170 <sys_timeout_abs>
}
 80182a0:	bf00      	nop
 80182a2:	3718      	adds	r7, #24
 80182a4:	46bd      	mov	sp, r7
 80182a6:	bd80      	pop	{r7, pc}
 80182a8:	200047f0 	.word	0x200047f0
 80182ac:	0801824d 	.word	0x0801824d

080182b0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80182b0:	b580      	push	{r7, lr}
 80182b2:	b082      	sub	sp, #8
 80182b4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80182b6:	2301      	movs	r3, #1
 80182b8:	607b      	str	r3, [r7, #4]
 80182ba:	e00e      	b.n	80182da <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80182bc:	4a0b      	ldr	r2, [pc, #44]	@ (80182ec <sys_timeouts_init+0x3c>)
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	00db      	lsls	r3, r3, #3
 80182c8:	4a08      	ldr	r2, [pc, #32]	@ (80182ec <sys_timeouts_init+0x3c>)
 80182ca:	4413      	add	r3, r2
 80182cc:	461a      	mov	r2, r3
 80182ce:	4908      	ldr	r1, [pc, #32]	@ (80182f0 <sys_timeouts_init+0x40>)
 80182d0:	f000 f810 	bl	80182f4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	3301      	adds	r3, #1
 80182d8:	607b      	str	r3, [r7, #4]
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	2b05      	cmp	r3, #5
 80182de:	d9ed      	bls.n	80182bc <sys_timeouts_init+0xc>
  }
}
 80182e0:	bf00      	nop
 80182e2:	bf00      	nop
 80182e4:	3708      	adds	r7, #8
 80182e6:	46bd      	mov	sp, r7
 80182e8:	bd80      	pop	{r7, pc}
 80182ea:	bf00      	nop
 80182ec:	08023670 	.word	0x08023670
 80182f0:	0801824d 	.word	0x0801824d

080182f4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80182f4:	b580      	push	{r7, lr}
 80182f6:	b086      	sub	sp, #24
 80182f8:	af00      	add	r7, sp, #0
 80182fa:	60f8      	str	r0, [r7, #12]
 80182fc:	60b9      	str	r1, [r7, #8]
 80182fe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018306:	d306      	bcc.n	8018316 <sys_timeout+0x22>
 8018308:	4b0a      	ldr	r3, [pc, #40]	@ (8018334 <sys_timeout+0x40>)
 801830a:	f240 1229 	movw	r2, #297	@ 0x129
 801830e:	490a      	ldr	r1, [pc, #40]	@ (8018338 <sys_timeout+0x44>)
 8018310:	480a      	ldr	r0, [pc, #40]	@ (801833c <sys_timeout+0x48>)
 8018312:	f006 fb65 	bl	801e9e0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8018316:	f7f0 f897 	bl	8008448 <sys_now>
 801831a:	4602      	mov	r2, r0
 801831c:	68fb      	ldr	r3, [r7, #12]
 801831e:	4413      	add	r3, r2
 8018320:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8018322:	687a      	ldr	r2, [r7, #4]
 8018324:	68b9      	ldr	r1, [r7, #8]
 8018326:	6978      	ldr	r0, [r7, #20]
 8018328:	f7ff ff22 	bl	8018170 <sys_timeout_abs>
#endif
}
 801832c:	bf00      	nop
 801832e:	3718      	adds	r7, #24
 8018330:	46bd      	mov	sp, r7
 8018332:	bd80      	pop	{r7, pc}
 8018334:	08022368 	.word	0x08022368
 8018338:	08022404 	.word	0x08022404
 801833c:	080223dc 	.word	0x080223dc

08018340 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8018340:	b580      	push	{r7, lr}
 8018342:	b084      	sub	sp, #16
 8018344:	af00      	add	r7, sp, #0
 8018346:	6078      	str	r0, [r7, #4]
 8018348:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801834a:	4b19      	ldr	r3, [pc, #100]	@ (80183b0 <sys_untimeout+0x70>)
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	2b00      	cmp	r3, #0
 8018350:	d029      	beq.n	80183a6 <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8018352:	4b17      	ldr	r3, [pc, #92]	@ (80183b0 <sys_untimeout+0x70>)
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	60bb      	str	r3, [r7, #8]
 8018358:	2300      	movs	r3, #0
 801835a:	60fb      	str	r3, [r7, #12]
 801835c:	e01f      	b.n	801839e <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 801835e:	68bb      	ldr	r3, [r7, #8]
 8018360:	689b      	ldr	r3, [r3, #8]
 8018362:	687a      	ldr	r2, [r7, #4]
 8018364:	429a      	cmp	r2, r3
 8018366:	d115      	bne.n	8018394 <sys_untimeout+0x54>
 8018368:	68bb      	ldr	r3, [r7, #8]
 801836a:	68db      	ldr	r3, [r3, #12]
 801836c:	683a      	ldr	r2, [r7, #0]
 801836e:	429a      	cmp	r2, r3
 8018370:	d110      	bne.n	8018394 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8018372:	68fb      	ldr	r3, [r7, #12]
 8018374:	2b00      	cmp	r3, #0
 8018376:	d104      	bne.n	8018382 <sys_untimeout+0x42>
        next_timeout = t->next;
 8018378:	68bb      	ldr	r3, [r7, #8]
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	4a0c      	ldr	r2, [pc, #48]	@ (80183b0 <sys_untimeout+0x70>)
 801837e:	6013      	str	r3, [r2, #0]
 8018380:	e003      	b.n	801838a <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8018382:	68bb      	ldr	r3, [r7, #8]
 8018384:	681a      	ldr	r2, [r3, #0]
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801838a:	68b9      	ldr	r1, [r7, #8]
 801838c:	200b      	movs	r0, #11
 801838e:	f7f9 fa1b 	bl	80117c8 <memp_free>
      return;
 8018392:	e009      	b.n	80183a8 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8018394:	68bb      	ldr	r3, [r7, #8]
 8018396:	60fb      	str	r3, [r7, #12]
 8018398:	68bb      	ldr	r3, [r7, #8]
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	60bb      	str	r3, [r7, #8]
 801839e:	68bb      	ldr	r3, [r7, #8]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d1dc      	bne.n	801835e <sys_untimeout+0x1e>
    }
  }
  return;
 80183a4:	e000      	b.n	80183a8 <sys_untimeout+0x68>
    return;
 80183a6:	bf00      	nop
}
 80183a8:	3710      	adds	r7, #16
 80183aa:	46bd      	mov	sp, r7
 80183ac:	bd80      	pop	{r7, pc}
 80183ae:	bf00      	nop
 80183b0:	200047ec 	.word	0x200047ec

080183b4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80183b4:	b580      	push	{r7, lr}
 80183b6:	b084      	sub	sp, #16
 80183b8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80183ba:	f7f0 f845 	bl	8008448 <sys_now>
 80183be:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80183c0:	4b17      	ldr	r3, [pc, #92]	@ (8018420 <sys_check_timeouts+0x6c>)
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80183c6:	68bb      	ldr	r3, [r7, #8]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d022      	beq.n	8018412 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80183cc:	68bb      	ldr	r3, [r7, #8]
 80183ce:	685b      	ldr	r3, [r3, #4]
 80183d0:	68fa      	ldr	r2, [r7, #12]
 80183d2:	1ad3      	subs	r3, r2, r3
 80183d4:	0fdb      	lsrs	r3, r3, #31
 80183d6:	f003 0301 	and.w	r3, r3, #1
 80183da:	b2db      	uxtb	r3, r3
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d11a      	bne.n	8018416 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80183e0:	68bb      	ldr	r3, [r7, #8]
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	4a0e      	ldr	r2, [pc, #56]	@ (8018420 <sys_check_timeouts+0x6c>)
 80183e6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80183e8:	68bb      	ldr	r3, [r7, #8]
 80183ea:	689b      	ldr	r3, [r3, #8]
 80183ec:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80183ee:	68bb      	ldr	r3, [r7, #8]
 80183f0:	68db      	ldr	r3, [r3, #12]
 80183f2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80183f4:	68bb      	ldr	r3, [r7, #8]
 80183f6:	685b      	ldr	r3, [r3, #4]
 80183f8:	4a0a      	ldr	r2, [pc, #40]	@ (8018424 <sys_check_timeouts+0x70>)
 80183fa:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80183fc:	68b9      	ldr	r1, [r7, #8]
 80183fe:	200b      	movs	r0, #11
 8018400:	f7f9 f9e2 	bl	80117c8 <memp_free>
    if (handler != NULL) {
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	2b00      	cmp	r3, #0
 8018408:	d0da      	beq.n	80183c0 <sys_check_timeouts+0xc>
      handler(arg);
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	6838      	ldr	r0, [r7, #0]
 801840e:	4798      	blx	r3
  do {
 8018410:	e7d6      	b.n	80183c0 <sys_check_timeouts+0xc>
      return;
 8018412:	bf00      	nop
 8018414:	e000      	b.n	8018418 <sys_check_timeouts+0x64>
      return;
 8018416:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8018418:	3710      	adds	r7, #16
 801841a:	46bd      	mov	sp, r7
 801841c:	bd80      	pop	{r7, pc}
 801841e:	bf00      	nop
 8018420:	200047ec 	.word	0x200047ec
 8018424:	200047f0 	.word	0x200047f0

08018428 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8018428:	b580      	push	{r7, lr}
 801842a:	b082      	sub	sp, #8
 801842c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801842e:	4b16      	ldr	r3, [pc, #88]	@ (8018488 <sys_timeouts_sleeptime+0x60>)
 8018430:	681b      	ldr	r3, [r3, #0]
 8018432:	2b00      	cmp	r3, #0
 8018434:	d102      	bne.n	801843c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8018436:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801843a:	e020      	b.n	801847e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801843c:	f7f0 f804 	bl	8008448 <sys_now>
 8018440:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8018442:	4b11      	ldr	r3, [pc, #68]	@ (8018488 <sys_timeouts_sleeptime+0x60>)
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	685a      	ldr	r2, [r3, #4]
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	1ad3      	subs	r3, r2, r3
 801844c:	0fdb      	lsrs	r3, r3, #31
 801844e:	f003 0301 	and.w	r3, r3, #1
 8018452:	b2db      	uxtb	r3, r3
 8018454:	2b00      	cmp	r3, #0
 8018456:	d001      	beq.n	801845c <sys_timeouts_sleeptime+0x34>
    return 0;
 8018458:	2300      	movs	r3, #0
 801845a:	e010      	b.n	801847e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801845c:	4b0a      	ldr	r3, [pc, #40]	@ (8018488 <sys_timeouts_sleeptime+0x60>)
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	685a      	ldr	r2, [r3, #4]
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	1ad3      	subs	r3, r2, r3
 8018466:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8018468:	683b      	ldr	r3, [r7, #0]
 801846a:	2b00      	cmp	r3, #0
 801846c:	da06      	bge.n	801847c <sys_timeouts_sleeptime+0x54>
 801846e:	4b07      	ldr	r3, [pc, #28]	@ (801848c <sys_timeouts_sleeptime+0x64>)
 8018470:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8018474:	4906      	ldr	r1, [pc, #24]	@ (8018490 <sys_timeouts_sleeptime+0x68>)
 8018476:	4807      	ldr	r0, [pc, #28]	@ (8018494 <sys_timeouts_sleeptime+0x6c>)
 8018478:	f006 fab2 	bl	801e9e0 <iprintf>
    return ret;
 801847c:	683b      	ldr	r3, [r7, #0]
  }
}
 801847e:	4618      	mov	r0, r3
 8018480:	3708      	adds	r7, #8
 8018482:	46bd      	mov	sp, r7
 8018484:	bd80      	pop	{r7, pc}
 8018486:	bf00      	nop
 8018488:	200047ec 	.word	0x200047ec
 801848c:	08022368 	.word	0x08022368
 8018490:	0802243c 	.word	0x0802243c
 8018494:	080223dc 	.word	0x080223dc

08018498 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8018498:	b580      	push	{r7, lr}
 801849a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801849c:	f006 f9a0 	bl	801e7e0 <rand>
 80184a0:	4603      	mov	r3, r0
 80184a2:	b29b      	uxth	r3, r3
 80184a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80184a8:	b29b      	uxth	r3, r3
 80184aa:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80184ae:	b29a      	uxth	r2, r3
 80184b0:	4b01      	ldr	r3, [pc, #4]	@ (80184b8 <udp_init+0x20>)
 80184b2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80184b4:	bf00      	nop
 80184b6:	bd80      	pop	{r7, pc}
 80184b8:	200000c0 	.word	0x200000c0

080184bc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80184bc:	b480      	push	{r7}
 80184be:	b083      	sub	sp, #12
 80184c0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80184c2:	2300      	movs	r3, #0
 80184c4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80184c6:	4b17      	ldr	r3, [pc, #92]	@ (8018524 <udp_new_port+0x68>)
 80184c8:	881b      	ldrh	r3, [r3, #0]
 80184ca:	1c5a      	adds	r2, r3, #1
 80184cc:	b291      	uxth	r1, r2
 80184ce:	4a15      	ldr	r2, [pc, #84]	@ (8018524 <udp_new_port+0x68>)
 80184d0:	8011      	strh	r1, [r2, #0]
 80184d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80184d6:	4293      	cmp	r3, r2
 80184d8:	d103      	bne.n	80184e2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80184da:	4b12      	ldr	r3, [pc, #72]	@ (8018524 <udp_new_port+0x68>)
 80184dc:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80184e0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80184e2:	4b11      	ldr	r3, [pc, #68]	@ (8018528 <udp_new_port+0x6c>)
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	603b      	str	r3, [r7, #0]
 80184e8:	e011      	b.n	801850e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80184ea:	683b      	ldr	r3, [r7, #0]
 80184ec:	8a5a      	ldrh	r2, [r3, #18]
 80184ee:	4b0d      	ldr	r3, [pc, #52]	@ (8018524 <udp_new_port+0x68>)
 80184f0:	881b      	ldrh	r3, [r3, #0]
 80184f2:	429a      	cmp	r2, r3
 80184f4:	d108      	bne.n	8018508 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80184f6:	88fb      	ldrh	r3, [r7, #6]
 80184f8:	3301      	adds	r3, #1
 80184fa:	80fb      	strh	r3, [r7, #6]
 80184fc:	88fb      	ldrh	r3, [r7, #6]
 80184fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8018502:	d3e0      	bcc.n	80184c6 <udp_new_port+0xa>
        return 0;
 8018504:	2300      	movs	r3, #0
 8018506:	e007      	b.n	8018518 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018508:	683b      	ldr	r3, [r7, #0]
 801850a:	68db      	ldr	r3, [r3, #12]
 801850c:	603b      	str	r3, [r7, #0]
 801850e:	683b      	ldr	r3, [r7, #0]
 8018510:	2b00      	cmp	r3, #0
 8018512:	d1ea      	bne.n	80184ea <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8018514:	4b03      	ldr	r3, [pc, #12]	@ (8018524 <udp_new_port+0x68>)
 8018516:	881b      	ldrh	r3, [r3, #0]
}
 8018518:	4618      	mov	r0, r3
 801851a:	370c      	adds	r7, #12
 801851c:	46bd      	mov	sp, r7
 801851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018522:	4770      	bx	lr
 8018524:	200000c0 	.word	0x200000c0
 8018528:	200047f8 	.word	0x200047f8

0801852c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801852c:	b580      	push	{r7, lr}
 801852e:	b084      	sub	sp, #16
 8018530:	af00      	add	r7, sp, #0
 8018532:	60f8      	str	r0, [r7, #12]
 8018534:	60b9      	str	r1, [r7, #8]
 8018536:	4613      	mov	r3, r2
 8018538:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801853a:	68fb      	ldr	r3, [r7, #12]
 801853c:	2b00      	cmp	r3, #0
 801853e:	d105      	bne.n	801854c <udp_input_local_match+0x20>
 8018540:	4b27      	ldr	r3, [pc, #156]	@ (80185e0 <udp_input_local_match+0xb4>)
 8018542:	2287      	movs	r2, #135	@ 0x87
 8018544:	4927      	ldr	r1, [pc, #156]	@ (80185e4 <udp_input_local_match+0xb8>)
 8018546:	4828      	ldr	r0, [pc, #160]	@ (80185e8 <udp_input_local_match+0xbc>)
 8018548:	f006 fa4a 	bl	801e9e0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801854c:	68bb      	ldr	r3, [r7, #8]
 801854e:	2b00      	cmp	r3, #0
 8018550:	d105      	bne.n	801855e <udp_input_local_match+0x32>
 8018552:	4b23      	ldr	r3, [pc, #140]	@ (80185e0 <udp_input_local_match+0xb4>)
 8018554:	2288      	movs	r2, #136	@ 0x88
 8018556:	4925      	ldr	r1, [pc, #148]	@ (80185ec <udp_input_local_match+0xc0>)
 8018558:	4823      	ldr	r0, [pc, #140]	@ (80185e8 <udp_input_local_match+0xbc>)
 801855a:	f006 fa41 	bl	801e9e0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801855e:	68fb      	ldr	r3, [r7, #12]
 8018560:	7a1b      	ldrb	r3, [r3, #8]
 8018562:	2b00      	cmp	r3, #0
 8018564:	d00b      	beq.n	801857e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8018566:	68fb      	ldr	r3, [r7, #12]
 8018568:	7a1a      	ldrb	r2, [r3, #8]
 801856a:	4b21      	ldr	r3, [pc, #132]	@ (80185f0 <udp_input_local_match+0xc4>)
 801856c:	685b      	ldr	r3, [r3, #4]
 801856e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8018572:	3301      	adds	r3, #1
 8018574:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8018576:	429a      	cmp	r2, r3
 8018578:	d001      	beq.n	801857e <udp_input_local_match+0x52>
    return 0;
 801857a:	2300      	movs	r3, #0
 801857c:	e02b      	b.n	80185d6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801857e:	79fb      	ldrb	r3, [r7, #7]
 8018580:	2b00      	cmp	r3, #0
 8018582:	d018      	beq.n	80185b6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	2b00      	cmp	r3, #0
 8018588:	d013      	beq.n	80185b2 <udp_input_local_match+0x86>
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	2b00      	cmp	r3, #0
 8018590:	d00f      	beq.n	80185b2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018592:	4b17      	ldr	r3, [pc, #92]	@ (80185f0 <udp_input_local_match+0xc4>)
 8018594:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018596:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801859a:	d00a      	beq.n	80185b2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	681a      	ldr	r2, [r3, #0]
 80185a0:	4b13      	ldr	r3, [pc, #76]	@ (80185f0 <udp_input_local_match+0xc4>)
 80185a2:	695b      	ldr	r3, [r3, #20]
 80185a4:	405a      	eors	r2, r3
 80185a6:	68bb      	ldr	r3, [r7, #8]
 80185a8:	3308      	adds	r3, #8
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d110      	bne.n	80185d4 <udp_input_local_match+0xa8>
          return 1;
 80185b2:	2301      	movs	r3, #1
 80185b4:	e00f      	b.n	80185d6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d009      	beq.n	80185d0 <udp_input_local_match+0xa4>
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d005      	beq.n	80185d0 <udp_input_local_match+0xa4>
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	681a      	ldr	r2, [r3, #0]
 80185c8:	4b09      	ldr	r3, [pc, #36]	@ (80185f0 <udp_input_local_match+0xc4>)
 80185ca:	695b      	ldr	r3, [r3, #20]
 80185cc:	429a      	cmp	r2, r3
 80185ce:	d101      	bne.n	80185d4 <udp_input_local_match+0xa8>
        return 1;
 80185d0:	2301      	movs	r3, #1
 80185d2:	e000      	b.n	80185d6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80185d4:	2300      	movs	r3, #0
}
 80185d6:	4618      	mov	r0, r3
 80185d8:	3710      	adds	r7, #16
 80185da:	46bd      	mov	sp, r7
 80185dc:	bd80      	pop	{r7, pc}
 80185de:	bf00      	nop
 80185e0:	08022450 	.word	0x08022450
 80185e4:	08022480 	.word	0x08022480
 80185e8:	080224a4 	.word	0x080224a4
 80185ec:	080224cc 	.word	0x080224cc
 80185f0:	20004768 	.word	0x20004768

080185f4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80185f4:	b590      	push	{r4, r7, lr}
 80185f6:	b08d      	sub	sp, #52	@ 0x34
 80185f8:	af02      	add	r7, sp, #8
 80185fa:	6078      	str	r0, [r7, #4]
 80185fc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80185fe:	2300      	movs	r3, #0
 8018600:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	2b00      	cmp	r3, #0
 8018606:	d105      	bne.n	8018614 <udp_input+0x20>
 8018608:	4b7c      	ldr	r3, [pc, #496]	@ (80187fc <udp_input+0x208>)
 801860a:	22cf      	movs	r2, #207	@ 0xcf
 801860c:	497c      	ldr	r1, [pc, #496]	@ (8018800 <udp_input+0x20c>)
 801860e:	487d      	ldr	r0, [pc, #500]	@ (8018804 <udp_input+0x210>)
 8018610:	f006 f9e6 	bl	801e9e0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8018614:	683b      	ldr	r3, [r7, #0]
 8018616:	2b00      	cmp	r3, #0
 8018618:	d105      	bne.n	8018626 <udp_input+0x32>
 801861a:	4b78      	ldr	r3, [pc, #480]	@ (80187fc <udp_input+0x208>)
 801861c:	22d0      	movs	r2, #208	@ 0xd0
 801861e:	497a      	ldr	r1, [pc, #488]	@ (8018808 <udp_input+0x214>)
 8018620:	4878      	ldr	r0, [pc, #480]	@ (8018804 <udp_input+0x210>)
 8018622:	f006 f9dd 	bl	801e9e0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	895b      	ldrh	r3, [r3, #10]
 801862a:	2b07      	cmp	r3, #7
 801862c:	d803      	bhi.n	8018636 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801862e:	6878      	ldr	r0, [r7, #4]
 8018630:	f7f9 ffb6 	bl	80125a0 <pbuf_free>
    goto end;
 8018634:	e0de      	b.n	80187f4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	685b      	ldr	r3, [r3, #4]
 801863a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801863c:	4b73      	ldr	r3, [pc, #460]	@ (801880c <udp_input+0x218>)
 801863e:	695b      	ldr	r3, [r3, #20]
 8018640:	4a72      	ldr	r2, [pc, #456]	@ (801880c <udp_input+0x218>)
 8018642:	6812      	ldr	r2, [r2, #0]
 8018644:	4611      	mov	r1, r2
 8018646:	4618      	mov	r0, r3
 8018648:	f004 fa0a 	bl	801ca60 <ip4_addr_isbroadcast_u32>
 801864c:	4603      	mov	r3, r0
 801864e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8018650:	697b      	ldr	r3, [r7, #20]
 8018652:	881b      	ldrh	r3, [r3, #0]
 8018654:	b29b      	uxth	r3, r3
 8018656:	4618      	mov	r0, r3
 8018658:	f7f8 fa4e 	bl	8010af8 <lwip_htons>
 801865c:	4603      	mov	r3, r0
 801865e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8018660:	697b      	ldr	r3, [r7, #20]
 8018662:	885b      	ldrh	r3, [r3, #2]
 8018664:	b29b      	uxth	r3, r3
 8018666:	4618      	mov	r0, r3
 8018668:	f7f8 fa46 	bl	8010af8 <lwip_htons>
 801866c:	4603      	mov	r3, r0
 801866e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8018670:	2300      	movs	r3, #0
 8018672:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8018674:	2300      	movs	r3, #0
 8018676:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8018678:	2300      	movs	r3, #0
 801867a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801867c:	4b64      	ldr	r3, [pc, #400]	@ (8018810 <udp_input+0x21c>)
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	627b      	str	r3, [r7, #36]	@ 0x24
 8018682:	e054      	b.n	801872e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8018684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018686:	8a5b      	ldrh	r3, [r3, #18]
 8018688:	89fa      	ldrh	r2, [r7, #14]
 801868a:	429a      	cmp	r2, r3
 801868c:	d14a      	bne.n	8018724 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801868e:	7cfb      	ldrb	r3, [r7, #19]
 8018690:	461a      	mov	r2, r3
 8018692:	6839      	ldr	r1, [r7, #0]
 8018694:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018696:	f7ff ff49 	bl	801852c <udp_input_local_match>
 801869a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801869c:	2b00      	cmp	r3, #0
 801869e:	d041      	beq.n	8018724 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80186a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186a2:	7c1b      	ldrb	r3, [r3, #16]
 80186a4:	f003 0304 	and.w	r3, r3, #4
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d11d      	bne.n	80186e8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80186ac:	69fb      	ldr	r3, [r7, #28]
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d102      	bne.n	80186b8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80186b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186b4:	61fb      	str	r3, [r7, #28]
 80186b6:	e017      	b.n	80186e8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80186b8:	7cfb      	ldrb	r3, [r7, #19]
 80186ba:	2b00      	cmp	r3, #0
 80186bc:	d014      	beq.n	80186e8 <udp_input+0xf4>
 80186be:	4b53      	ldr	r3, [pc, #332]	@ (801880c <udp_input+0x218>)
 80186c0:	695b      	ldr	r3, [r3, #20]
 80186c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80186c6:	d10f      	bne.n	80186e8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80186c8:	69fb      	ldr	r3, [r7, #28]
 80186ca:	681a      	ldr	r2, [r3, #0]
 80186cc:	683b      	ldr	r3, [r7, #0]
 80186ce:	3304      	adds	r3, #4
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	429a      	cmp	r2, r3
 80186d4:	d008      	beq.n	80186e8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80186d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186d8:	681a      	ldr	r2, [r3, #0]
 80186da:	683b      	ldr	r3, [r7, #0]
 80186dc:	3304      	adds	r3, #4
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	429a      	cmp	r2, r3
 80186e2:	d101      	bne.n	80186e8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80186e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186e6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80186e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186ea:	8a9b      	ldrh	r3, [r3, #20]
 80186ec:	8a3a      	ldrh	r2, [r7, #16]
 80186ee:	429a      	cmp	r2, r3
 80186f0:	d118      	bne.n	8018724 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80186f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186f4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d005      	beq.n	8018706 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80186fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186fc:	685a      	ldr	r2, [r3, #4]
 80186fe:	4b43      	ldr	r3, [pc, #268]	@ (801880c <udp_input+0x218>)
 8018700:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018702:	429a      	cmp	r2, r3
 8018704:	d10e      	bne.n	8018724 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8018706:	6a3b      	ldr	r3, [r7, #32]
 8018708:	2b00      	cmp	r3, #0
 801870a:	d014      	beq.n	8018736 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801870c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801870e:	68da      	ldr	r2, [r3, #12]
 8018710:	6a3b      	ldr	r3, [r7, #32]
 8018712:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8018714:	4b3e      	ldr	r3, [pc, #248]	@ (8018810 <udp_input+0x21c>)
 8018716:	681a      	ldr	r2, [r3, #0]
 8018718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801871a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801871c:	4a3c      	ldr	r2, [pc, #240]	@ (8018810 <udp_input+0x21c>)
 801871e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018720:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8018722:	e008      	b.n	8018736 <udp_input+0x142>
      }
    }

    prev = pcb;
 8018724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018726:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801872a:	68db      	ldr	r3, [r3, #12]
 801872c:	627b      	str	r3, [r7, #36]	@ 0x24
 801872e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018730:	2b00      	cmp	r3, #0
 8018732:	d1a7      	bne.n	8018684 <udp_input+0x90>
 8018734:	e000      	b.n	8018738 <udp_input+0x144>
        break;
 8018736:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8018738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801873a:	2b00      	cmp	r3, #0
 801873c:	d101      	bne.n	8018742 <udp_input+0x14e>
    pcb = uncon_pcb;
 801873e:	69fb      	ldr	r3, [r7, #28]
 8018740:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8018742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018744:	2b00      	cmp	r3, #0
 8018746:	d002      	beq.n	801874e <udp_input+0x15a>
    for_us = 1;
 8018748:	2301      	movs	r3, #1
 801874a:	76fb      	strb	r3, [r7, #27]
 801874c:	e00a      	b.n	8018764 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801874e:	683b      	ldr	r3, [r7, #0]
 8018750:	3304      	adds	r3, #4
 8018752:	681a      	ldr	r2, [r3, #0]
 8018754:	4b2d      	ldr	r3, [pc, #180]	@ (801880c <udp_input+0x218>)
 8018756:	695b      	ldr	r3, [r3, #20]
 8018758:	429a      	cmp	r2, r3
 801875a:	bf0c      	ite	eq
 801875c:	2301      	moveq	r3, #1
 801875e:	2300      	movne	r3, #0
 8018760:	b2db      	uxtb	r3, r3
 8018762:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018764:	7efb      	ldrb	r3, [r7, #27]
 8018766:	2b00      	cmp	r3, #0
 8018768:	d041      	beq.n	80187ee <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801876a:	2108      	movs	r1, #8
 801876c:	6878      	ldr	r0, [r7, #4]
 801876e:	f7f9 fe91 	bl	8012494 <pbuf_remove_header>
 8018772:	4603      	mov	r3, r0
 8018774:	2b00      	cmp	r3, #0
 8018776:	d00a      	beq.n	801878e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018778:	4b20      	ldr	r3, [pc, #128]	@ (80187fc <udp_input+0x208>)
 801877a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801877e:	4925      	ldr	r1, [pc, #148]	@ (8018814 <udp_input+0x220>)
 8018780:	4820      	ldr	r0, [pc, #128]	@ (8018804 <udp_input+0x210>)
 8018782:	f006 f92d 	bl	801e9e0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8018786:	6878      	ldr	r0, [r7, #4]
 8018788:	f7f9 ff0a 	bl	80125a0 <pbuf_free>
      goto end;
 801878c:	e032      	b.n	80187f4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801878e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018790:	2b00      	cmp	r3, #0
 8018792:	d012      	beq.n	80187ba <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018796:	6a1b      	ldr	r3, [r3, #32]
 8018798:	2b00      	cmp	r3, #0
 801879a:	d00a      	beq.n	80187b2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801879c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801879e:	6a1c      	ldr	r4, [r3, #32]
 80187a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187a2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80187a4:	8a3b      	ldrh	r3, [r7, #16]
 80187a6:	9300      	str	r3, [sp, #0]
 80187a8:	4b1b      	ldr	r3, [pc, #108]	@ (8018818 <udp_input+0x224>)
 80187aa:	687a      	ldr	r2, [r7, #4]
 80187ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80187ae:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80187b0:	e021      	b.n	80187f6 <udp_input+0x202>
        pbuf_free(p);
 80187b2:	6878      	ldr	r0, [r7, #4]
 80187b4:	f7f9 fef4 	bl	80125a0 <pbuf_free>
        goto end;
 80187b8:	e01c      	b.n	80187f4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80187ba:	7cfb      	ldrb	r3, [r7, #19]
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d112      	bne.n	80187e6 <udp_input+0x1f2>
 80187c0:	4b12      	ldr	r3, [pc, #72]	@ (801880c <udp_input+0x218>)
 80187c2:	695b      	ldr	r3, [r3, #20]
 80187c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80187c8:	2be0      	cmp	r3, #224	@ 0xe0
 80187ca:	d00c      	beq.n	80187e6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80187cc:	4b0f      	ldr	r3, [pc, #60]	@ (801880c <udp_input+0x218>)
 80187ce:	899b      	ldrh	r3, [r3, #12]
 80187d0:	3308      	adds	r3, #8
 80187d2:	b29b      	uxth	r3, r3
 80187d4:	b21b      	sxth	r3, r3
 80187d6:	4619      	mov	r1, r3
 80187d8:	6878      	ldr	r0, [r7, #4]
 80187da:	f7f9 fece 	bl	801257a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80187de:	2103      	movs	r1, #3
 80187e0:	6878      	ldr	r0, [r7, #4]
 80187e2:	f003 fa23 	bl	801bc2c <icmp_dest_unreach>
      pbuf_free(p);
 80187e6:	6878      	ldr	r0, [r7, #4]
 80187e8:	f7f9 feda 	bl	80125a0 <pbuf_free>
  return;
 80187ec:	e003      	b.n	80187f6 <udp_input+0x202>
    pbuf_free(p);
 80187ee:	6878      	ldr	r0, [r7, #4]
 80187f0:	f7f9 fed6 	bl	80125a0 <pbuf_free>
  return;
 80187f4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80187f6:	372c      	adds	r7, #44	@ 0x2c
 80187f8:	46bd      	mov	sp, r7
 80187fa:	bd90      	pop	{r4, r7, pc}
 80187fc:	08022450 	.word	0x08022450
 8018800:	080224f4 	.word	0x080224f4
 8018804:	080224a4 	.word	0x080224a4
 8018808:	0802250c 	.word	0x0802250c
 801880c:	20004768 	.word	0x20004768
 8018810:	200047f8 	.word	0x200047f8
 8018814:	08022528 	.word	0x08022528
 8018818:	20004778 	.word	0x20004778

0801881c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801881c:	b580      	push	{r7, lr}
 801881e:	b088      	sub	sp, #32
 8018820:	af02      	add	r7, sp, #8
 8018822:	60f8      	str	r0, [r7, #12]
 8018824:	60b9      	str	r1, [r7, #8]
 8018826:	607a      	str	r2, [r7, #4]
 8018828:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801882a:	68fb      	ldr	r3, [r7, #12]
 801882c:	2b00      	cmp	r3, #0
 801882e:	d109      	bne.n	8018844 <udp_sendto_if+0x28>
 8018830:	4b2e      	ldr	r3, [pc, #184]	@ (80188ec <udp_sendto_if+0xd0>)
 8018832:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018836:	492e      	ldr	r1, [pc, #184]	@ (80188f0 <udp_sendto_if+0xd4>)
 8018838:	482e      	ldr	r0, [pc, #184]	@ (80188f4 <udp_sendto_if+0xd8>)
 801883a:	f006 f8d1 	bl	801e9e0 <iprintf>
 801883e:	f06f 030f 	mvn.w	r3, #15
 8018842:	e04f      	b.n	80188e4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8018844:	68bb      	ldr	r3, [r7, #8]
 8018846:	2b00      	cmp	r3, #0
 8018848:	d109      	bne.n	801885e <udp_sendto_if+0x42>
 801884a:	4b28      	ldr	r3, [pc, #160]	@ (80188ec <udp_sendto_if+0xd0>)
 801884c:	f240 2281 	movw	r2, #641	@ 0x281
 8018850:	4929      	ldr	r1, [pc, #164]	@ (80188f8 <udp_sendto_if+0xdc>)
 8018852:	4828      	ldr	r0, [pc, #160]	@ (80188f4 <udp_sendto_if+0xd8>)
 8018854:	f006 f8c4 	bl	801e9e0 <iprintf>
 8018858:	f06f 030f 	mvn.w	r3, #15
 801885c:	e042      	b.n	80188e4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	2b00      	cmp	r3, #0
 8018862:	d109      	bne.n	8018878 <udp_sendto_if+0x5c>
 8018864:	4b21      	ldr	r3, [pc, #132]	@ (80188ec <udp_sendto_if+0xd0>)
 8018866:	f240 2282 	movw	r2, #642	@ 0x282
 801886a:	4924      	ldr	r1, [pc, #144]	@ (80188fc <udp_sendto_if+0xe0>)
 801886c:	4821      	ldr	r0, [pc, #132]	@ (80188f4 <udp_sendto_if+0xd8>)
 801886e:	f006 f8b7 	bl	801e9e0 <iprintf>
 8018872:	f06f 030f 	mvn.w	r3, #15
 8018876:	e035      	b.n	80188e4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8018878:	6a3b      	ldr	r3, [r7, #32]
 801887a:	2b00      	cmp	r3, #0
 801887c:	d109      	bne.n	8018892 <udp_sendto_if+0x76>
 801887e:	4b1b      	ldr	r3, [pc, #108]	@ (80188ec <udp_sendto_if+0xd0>)
 8018880:	f240 2283 	movw	r2, #643	@ 0x283
 8018884:	491e      	ldr	r1, [pc, #120]	@ (8018900 <udp_sendto_if+0xe4>)
 8018886:	481b      	ldr	r0, [pc, #108]	@ (80188f4 <udp_sendto_if+0xd8>)
 8018888:	f006 f8aa 	bl	801e9e0 <iprintf>
 801888c:	f06f 030f 	mvn.w	r3, #15
 8018890:	e028      	b.n	80188e4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	2b00      	cmp	r3, #0
 8018896:	d009      	beq.n	80188ac <udp_sendto_if+0x90>
 8018898:	68fb      	ldr	r3, [r7, #12]
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	2b00      	cmp	r3, #0
 801889e:	d005      	beq.n	80188ac <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80188a0:	68fb      	ldr	r3, [r7, #12]
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80188a8:	2be0      	cmp	r3, #224	@ 0xe0
 80188aa:	d103      	bne.n	80188b4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80188ac:	6a3b      	ldr	r3, [r7, #32]
 80188ae:	3304      	adds	r3, #4
 80188b0:	617b      	str	r3, [r7, #20]
 80188b2:	e00b      	b.n	80188cc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80188b4:	68fb      	ldr	r3, [r7, #12]
 80188b6:	681a      	ldr	r2, [r3, #0]
 80188b8:	6a3b      	ldr	r3, [r7, #32]
 80188ba:	3304      	adds	r3, #4
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	429a      	cmp	r2, r3
 80188c0:	d002      	beq.n	80188c8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80188c2:	f06f 0303 	mvn.w	r3, #3
 80188c6:	e00d      	b.n	80188e4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80188c8:	68fb      	ldr	r3, [r7, #12]
 80188ca:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80188cc:	887a      	ldrh	r2, [r7, #2]
 80188ce:	697b      	ldr	r3, [r7, #20]
 80188d0:	9301      	str	r3, [sp, #4]
 80188d2:	6a3b      	ldr	r3, [r7, #32]
 80188d4:	9300      	str	r3, [sp, #0]
 80188d6:	4613      	mov	r3, r2
 80188d8:	687a      	ldr	r2, [r7, #4]
 80188da:	68b9      	ldr	r1, [r7, #8]
 80188dc:	68f8      	ldr	r0, [r7, #12]
 80188de:	f000 f811 	bl	8018904 <udp_sendto_if_src>
 80188e2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80188e4:	4618      	mov	r0, r3
 80188e6:	3718      	adds	r7, #24
 80188e8:	46bd      	mov	sp, r7
 80188ea:	bd80      	pop	{r7, pc}
 80188ec:	08022450 	.word	0x08022450
 80188f0:	080225c4 	.word	0x080225c4
 80188f4:	080224a4 	.word	0x080224a4
 80188f8:	080225e0 	.word	0x080225e0
 80188fc:	080225fc 	.word	0x080225fc
 8018900:	0802261c 	.word	0x0802261c

08018904 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8018904:	b580      	push	{r7, lr}
 8018906:	b08c      	sub	sp, #48	@ 0x30
 8018908:	af04      	add	r7, sp, #16
 801890a:	60f8      	str	r0, [r7, #12]
 801890c:	60b9      	str	r1, [r7, #8]
 801890e:	607a      	str	r2, [r7, #4]
 8018910:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	2b00      	cmp	r3, #0
 8018916:	d109      	bne.n	801892c <udp_sendto_if_src+0x28>
 8018918:	4b73      	ldr	r3, [pc, #460]	@ (8018ae8 <udp_sendto_if_src+0x1e4>)
 801891a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801891e:	4973      	ldr	r1, [pc, #460]	@ (8018aec <udp_sendto_if_src+0x1e8>)
 8018920:	4873      	ldr	r0, [pc, #460]	@ (8018af0 <udp_sendto_if_src+0x1ec>)
 8018922:	f006 f85d 	bl	801e9e0 <iprintf>
 8018926:	f06f 030f 	mvn.w	r3, #15
 801892a:	e0d8      	b.n	8018ade <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801892c:	68bb      	ldr	r3, [r7, #8]
 801892e:	2b00      	cmp	r3, #0
 8018930:	d109      	bne.n	8018946 <udp_sendto_if_src+0x42>
 8018932:	4b6d      	ldr	r3, [pc, #436]	@ (8018ae8 <udp_sendto_if_src+0x1e4>)
 8018934:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8018938:	496e      	ldr	r1, [pc, #440]	@ (8018af4 <udp_sendto_if_src+0x1f0>)
 801893a:	486d      	ldr	r0, [pc, #436]	@ (8018af0 <udp_sendto_if_src+0x1ec>)
 801893c:	f006 f850 	bl	801e9e0 <iprintf>
 8018940:	f06f 030f 	mvn.w	r3, #15
 8018944:	e0cb      	b.n	8018ade <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	2b00      	cmp	r3, #0
 801894a:	d109      	bne.n	8018960 <udp_sendto_if_src+0x5c>
 801894c:	4b66      	ldr	r3, [pc, #408]	@ (8018ae8 <udp_sendto_if_src+0x1e4>)
 801894e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8018952:	4969      	ldr	r1, [pc, #420]	@ (8018af8 <udp_sendto_if_src+0x1f4>)
 8018954:	4866      	ldr	r0, [pc, #408]	@ (8018af0 <udp_sendto_if_src+0x1ec>)
 8018956:	f006 f843 	bl	801e9e0 <iprintf>
 801895a:	f06f 030f 	mvn.w	r3, #15
 801895e:	e0be      	b.n	8018ade <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8018960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018962:	2b00      	cmp	r3, #0
 8018964:	d109      	bne.n	801897a <udp_sendto_if_src+0x76>
 8018966:	4b60      	ldr	r3, [pc, #384]	@ (8018ae8 <udp_sendto_if_src+0x1e4>)
 8018968:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801896c:	4963      	ldr	r1, [pc, #396]	@ (8018afc <udp_sendto_if_src+0x1f8>)
 801896e:	4860      	ldr	r0, [pc, #384]	@ (8018af0 <udp_sendto_if_src+0x1ec>)
 8018970:	f006 f836 	bl	801e9e0 <iprintf>
 8018974:	f06f 030f 	mvn.w	r3, #15
 8018978:	e0b1      	b.n	8018ade <udp_sendto_if_src+0x1da>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801897a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801897c:	2b00      	cmp	r3, #0
 801897e:	d109      	bne.n	8018994 <udp_sendto_if_src+0x90>
 8018980:	4b59      	ldr	r3, [pc, #356]	@ (8018ae8 <udp_sendto_if_src+0x1e4>)
 8018982:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8018986:	495e      	ldr	r1, [pc, #376]	@ (8018b00 <udp_sendto_if_src+0x1fc>)
 8018988:	4859      	ldr	r0, [pc, #356]	@ (8018af0 <udp_sendto_if_src+0x1ec>)
 801898a:	f006 f829 	bl	801e9e0 <iprintf>
 801898e:	f06f 030f 	mvn.w	r3, #15
 8018992:	e0a4      	b.n	8018ade <udp_sendto_if_src+0x1da>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8018994:	68fb      	ldr	r3, [r7, #12]
 8018996:	8a5b      	ldrh	r3, [r3, #18]
 8018998:	2b00      	cmp	r3, #0
 801899a:	d10f      	bne.n	80189bc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801899c:	68f9      	ldr	r1, [r7, #12]
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	8a5b      	ldrh	r3, [r3, #18]
 80189a2:	461a      	mov	r2, r3
 80189a4:	68f8      	ldr	r0, [r7, #12]
 80189a6:	f000 f8af 	bl	8018b08 <udp_bind>
 80189aa:	4603      	mov	r3, r0
 80189ac:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80189ae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d002      	beq.n	80189bc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80189b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80189ba:	e090      	b.n	8018ade <udp_sendto_if_src+0x1da>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80189bc:	68bb      	ldr	r3, [r7, #8]
 80189be:	891b      	ldrh	r3, [r3, #8]
 80189c0:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80189c4:	4293      	cmp	r3, r2
 80189c6:	d902      	bls.n	80189ce <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80189c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80189cc:	e087      	b.n	8018ade <udp_sendto_if_src+0x1da>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80189ce:	2108      	movs	r1, #8
 80189d0:	68b8      	ldr	r0, [r7, #8]
 80189d2:	f7f9 fd4f 	bl	8012474 <pbuf_add_header>
 80189d6:	4603      	mov	r3, r0
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d015      	beq.n	8018a08 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80189dc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80189e0:	2108      	movs	r1, #8
 80189e2:	2022      	movs	r0, #34	@ 0x22
 80189e4:	f7f9 faf8 	bl	8011fd8 <pbuf_alloc>
 80189e8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80189ea:	69fb      	ldr	r3, [r7, #28]
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d102      	bne.n	80189f6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80189f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80189f4:	e073      	b.n	8018ade <udp_sendto_if_src+0x1da>
    }
    if (p->tot_len != 0) {
 80189f6:	68bb      	ldr	r3, [r7, #8]
 80189f8:	891b      	ldrh	r3, [r3, #8]
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d006      	beq.n	8018a0c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80189fe:	68b9      	ldr	r1, [r7, #8]
 8018a00:	69f8      	ldr	r0, [r7, #28]
 8018a02:	f7f9 fef1 	bl	80127e8 <pbuf_chain>
 8018a06:	e001      	b.n	8018a0c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8018a08:	68bb      	ldr	r3, [r7, #8]
 8018a0a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8018a0c:	69fb      	ldr	r3, [r7, #28]
 8018a0e:	895b      	ldrh	r3, [r3, #10]
 8018a10:	2b07      	cmp	r3, #7
 8018a12:	d806      	bhi.n	8018a22 <udp_sendto_if_src+0x11e>
 8018a14:	4b34      	ldr	r3, [pc, #208]	@ (8018ae8 <udp_sendto_if_src+0x1e4>)
 8018a16:	f240 320d 	movw	r2, #781	@ 0x30d
 8018a1a:	493a      	ldr	r1, [pc, #232]	@ (8018b04 <udp_sendto_if_src+0x200>)
 8018a1c:	4834      	ldr	r0, [pc, #208]	@ (8018af0 <udp_sendto_if_src+0x1ec>)
 8018a1e:	f005 ffdf 	bl	801e9e0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8018a22:	69fb      	ldr	r3, [r7, #28]
 8018a24:	685b      	ldr	r3, [r3, #4]
 8018a26:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8018a28:	68fb      	ldr	r3, [r7, #12]
 8018a2a:	8a5b      	ldrh	r3, [r3, #18]
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	f7f8 f863 	bl	8010af8 <lwip_htons>
 8018a32:	4603      	mov	r3, r0
 8018a34:	461a      	mov	r2, r3
 8018a36:	697b      	ldr	r3, [r7, #20]
 8018a38:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8018a3a:	887b      	ldrh	r3, [r7, #2]
 8018a3c:	4618      	mov	r0, r3
 8018a3e:	f7f8 f85b 	bl	8010af8 <lwip_htons>
 8018a42:	4603      	mov	r3, r0
 8018a44:	461a      	mov	r2, r3
 8018a46:	697b      	ldr	r3, [r7, #20]
 8018a48:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8018a4a:	697b      	ldr	r3, [r7, #20]
 8018a4c:	2200      	movs	r2, #0
 8018a4e:	719a      	strb	r2, [r3, #6]
 8018a50:	2200      	movs	r2, #0
 8018a52:	71da      	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if LWIP_MULTICAST_TX_OPTIONS
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 8018a54:	68fb      	ldr	r3, [r7, #12]
 8018a56:	7c1b      	ldrb	r3, [r3, #16]
 8018a58:	f003 0308 	and.w	r3, r3, #8
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d00c      	beq.n	8018a7a <udp_sendto_if_src+0x176>
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018a68:	2be0      	cmp	r3, #224	@ 0xe0
 8018a6a:	d106      	bne.n	8018a7a <udp_sendto_if_src+0x176>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 8018a6c:	69fb      	ldr	r3, [r7, #28]
 8018a6e:	7b5b      	ldrb	r3, [r3, #13]
 8018a70:	f043 0304 	orr.w	r3, r3, #4
 8018a74:	b2da      	uxtb	r2, r3
 8018a76:	69fb      	ldr	r3, [r7, #28]
 8018a78:	735a      	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8018a7a:	69fb      	ldr	r3, [r7, #28]
 8018a7c:	891b      	ldrh	r3, [r3, #8]
 8018a7e:	4618      	mov	r0, r3
 8018a80:	f7f8 f83a 	bl	8010af8 <lwip_htons>
 8018a84:	4603      	mov	r3, r0
 8018a86:	461a      	mov	r2, r3
 8018a88:	697b      	ldr	r3, [r7, #20]
 8018a8a:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8018a8c:	2311      	movs	r3, #17
 8018a8e:	74fb      	strb	r3, [r7, #19]
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018a98:	2be0      	cmp	r3, #224	@ 0xe0
 8018a9a:	d102      	bne.n	8018aa2 <udp_sendto_if_src+0x19e>
 8018a9c:	68fb      	ldr	r3, [r7, #12]
 8018a9e:	7f5b      	ldrb	r3, [r3, #29]
 8018aa0:	e001      	b.n	8018aa6 <udp_sendto_if_src+0x1a2>
 8018aa2:	68fb      	ldr	r3, [r7, #12]
 8018aa4:	7adb      	ldrb	r3, [r3, #11]
 8018aa6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	7a9b      	ldrb	r3, [r3, #10]
 8018aac:	7cb9      	ldrb	r1, [r7, #18]
 8018aae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018ab0:	9202      	str	r2, [sp, #8]
 8018ab2:	7cfa      	ldrb	r2, [r7, #19]
 8018ab4:	9201      	str	r2, [sp, #4]
 8018ab6:	9300      	str	r3, [sp, #0]
 8018ab8:	460b      	mov	r3, r1
 8018aba:	687a      	ldr	r2, [r7, #4]
 8018abc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018abe:	69f8      	ldr	r0, [r7, #28]
 8018ac0:	f003 fecb 	bl	801c85a <ip4_output_if_src>
 8018ac4:	4603      	mov	r3, r0
 8018ac6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8018ac8:	69fa      	ldr	r2, [r7, #28]
 8018aca:	68bb      	ldr	r3, [r7, #8]
 8018acc:	429a      	cmp	r2, r3
 8018ace:	d004      	beq.n	8018ada <udp_sendto_if_src+0x1d6>
    /* free the header pbuf */
    pbuf_free(q);
 8018ad0:	69f8      	ldr	r0, [r7, #28]
 8018ad2:	f7f9 fd65 	bl	80125a0 <pbuf_free>
    q = NULL;
 8018ad6:	2300      	movs	r3, #0
 8018ad8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8018ada:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8018ade:	4618      	mov	r0, r3
 8018ae0:	3720      	adds	r7, #32
 8018ae2:	46bd      	mov	sp, r7
 8018ae4:	bd80      	pop	{r7, pc}
 8018ae6:	bf00      	nop
 8018ae8:	08022450 	.word	0x08022450
 8018aec:	0802263c 	.word	0x0802263c
 8018af0:	080224a4 	.word	0x080224a4
 8018af4:	0802265c 	.word	0x0802265c
 8018af8:	0802267c 	.word	0x0802267c
 8018afc:	080226a0 	.word	0x080226a0
 8018b00:	080226c4 	.word	0x080226c4
 8018b04:	080226e8 	.word	0x080226e8

08018b08 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018b08:	b580      	push	{r7, lr}
 8018b0a:	b086      	sub	sp, #24
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	60f8      	str	r0, [r7, #12]
 8018b10:	60b9      	str	r1, [r7, #8]
 8018b12:	4613      	mov	r3, r2
 8018b14:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8018b16:	68bb      	ldr	r3, [r7, #8]
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d101      	bne.n	8018b20 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8018b1c:	4b39      	ldr	r3, [pc, #228]	@ (8018c04 <udp_bind+0xfc>)
 8018b1e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8018b20:	68fb      	ldr	r3, [r7, #12]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d109      	bne.n	8018b3a <udp_bind+0x32>
 8018b26:	4b38      	ldr	r3, [pc, #224]	@ (8018c08 <udp_bind+0x100>)
 8018b28:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8018b2c:	4937      	ldr	r1, [pc, #220]	@ (8018c0c <udp_bind+0x104>)
 8018b2e:	4838      	ldr	r0, [pc, #224]	@ (8018c10 <udp_bind+0x108>)
 8018b30:	f005 ff56 	bl	801e9e0 <iprintf>
 8018b34:	f06f 030f 	mvn.w	r3, #15
 8018b38:	e060      	b.n	8018bfc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8018b3a:	2300      	movs	r3, #0
 8018b3c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018b3e:	4b35      	ldr	r3, [pc, #212]	@ (8018c14 <udp_bind+0x10c>)
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	617b      	str	r3, [r7, #20]
 8018b44:	e009      	b.n	8018b5a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8018b46:	68fa      	ldr	r2, [r7, #12]
 8018b48:	697b      	ldr	r3, [r7, #20]
 8018b4a:	429a      	cmp	r2, r3
 8018b4c:	d102      	bne.n	8018b54 <udp_bind+0x4c>
      rebind = 1;
 8018b4e:	2301      	movs	r3, #1
 8018b50:	74fb      	strb	r3, [r7, #19]
      break;
 8018b52:	e005      	b.n	8018b60 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018b54:	697b      	ldr	r3, [r7, #20]
 8018b56:	68db      	ldr	r3, [r3, #12]
 8018b58:	617b      	str	r3, [r7, #20]
 8018b5a:	697b      	ldr	r3, [r7, #20]
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d1f2      	bne.n	8018b46 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8018b60:	88fb      	ldrh	r3, [r7, #6]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d109      	bne.n	8018b7a <udp_bind+0x72>
    port = udp_new_port();
 8018b66:	f7ff fca9 	bl	80184bc <udp_new_port>
 8018b6a:	4603      	mov	r3, r0
 8018b6c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8018b6e:	88fb      	ldrh	r3, [r7, #6]
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d12c      	bne.n	8018bce <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8018b74:	f06f 0307 	mvn.w	r3, #7
 8018b78:	e040      	b.n	8018bfc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018b7a:	4b26      	ldr	r3, [pc, #152]	@ (8018c14 <udp_bind+0x10c>)
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	617b      	str	r3, [r7, #20]
 8018b80:	e022      	b.n	8018bc8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8018b82:	68fa      	ldr	r2, [r7, #12]
 8018b84:	697b      	ldr	r3, [r7, #20]
 8018b86:	429a      	cmp	r2, r3
 8018b88:	d01b      	beq.n	8018bc2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8018b8a:	697b      	ldr	r3, [r7, #20]
 8018b8c:	8a5b      	ldrh	r3, [r3, #18]
 8018b8e:	88fa      	ldrh	r2, [r7, #6]
 8018b90:	429a      	cmp	r2, r3
 8018b92:	d116      	bne.n	8018bc2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018b94:	697b      	ldr	r3, [r7, #20]
 8018b96:	681a      	ldr	r2, [r3, #0]
 8018b98:	68bb      	ldr	r3, [r7, #8]
 8018b9a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8018b9c:	429a      	cmp	r2, r3
 8018b9e:	d00d      	beq.n	8018bbc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018ba0:	68bb      	ldr	r3, [r7, #8]
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d00a      	beq.n	8018bbc <udp_bind+0xb4>
 8018ba6:	68bb      	ldr	r3, [r7, #8]
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d006      	beq.n	8018bbc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018bae:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d003      	beq.n	8018bbc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018bb4:	697b      	ldr	r3, [r7, #20]
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d102      	bne.n	8018bc2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8018bbc:	f06f 0307 	mvn.w	r3, #7
 8018bc0:	e01c      	b.n	8018bfc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018bc2:	697b      	ldr	r3, [r7, #20]
 8018bc4:	68db      	ldr	r3, [r3, #12]
 8018bc6:	617b      	str	r3, [r7, #20]
 8018bc8:	697b      	ldr	r3, [r7, #20]
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d1d9      	bne.n	8018b82 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8018bce:	68bb      	ldr	r3, [r7, #8]
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d002      	beq.n	8018bda <udp_bind+0xd2>
 8018bd4:	68bb      	ldr	r3, [r7, #8]
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	e000      	b.n	8018bdc <udp_bind+0xd4>
 8018bda:	2300      	movs	r3, #0
 8018bdc:	68fa      	ldr	r2, [r7, #12]
 8018bde:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8018be0:	68fb      	ldr	r3, [r7, #12]
 8018be2:	88fa      	ldrh	r2, [r7, #6]
 8018be4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8018be6:	7cfb      	ldrb	r3, [r7, #19]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d106      	bne.n	8018bfa <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8018bec:	4b09      	ldr	r3, [pc, #36]	@ (8018c14 <udp_bind+0x10c>)
 8018bee:	681a      	ldr	r2, [r3, #0]
 8018bf0:	68fb      	ldr	r3, [r7, #12]
 8018bf2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8018bf4:	4a07      	ldr	r2, [pc, #28]	@ (8018c14 <udp_bind+0x10c>)
 8018bf6:	68fb      	ldr	r3, [r7, #12]
 8018bf8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8018bfa:	2300      	movs	r3, #0
}
 8018bfc:	4618      	mov	r0, r3
 8018bfe:	3718      	adds	r7, #24
 8018c00:	46bd      	mov	sp, r7
 8018c02:	bd80      	pop	{r7, pc}
 8018c04:	080236a0 	.word	0x080236a0
 8018c08:	08022450 	.word	0x08022450
 8018c0c:	08022718 	.word	0x08022718
 8018c10:	080224a4 	.word	0x080224a4
 8018c14:	200047f8 	.word	0x200047f8

08018c18 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018c18:	b580      	push	{r7, lr}
 8018c1a:	b086      	sub	sp, #24
 8018c1c:	af00      	add	r7, sp, #0
 8018c1e:	60f8      	str	r0, [r7, #12]
 8018c20:	60b9      	str	r1, [r7, #8]
 8018c22:	4613      	mov	r3, r2
 8018c24:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8018c26:	68fb      	ldr	r3, [r7, #12]
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	d109      	bne.n	8018c40 <udp_connect+0x28>
 8018c2c:	4b2c      	ldr	r3, [pc, #176]	@ (8018ce0 <udp_connect+0xc8>)
 8018c2e:	f240 4235 	movw	r2, #1077	@ 0x435
 8018c32:	492c      	ldr	r1, [pc, #176]	@ (8018ce4 <udp_connect+0xcc>)
 8018c34:	482c      	ldr	r0, [pc, #176]	@ (8018ce8 <udp_connect+0xd0>)
 8018c36:	f005 fed3 	bl	801e9e0 <iprintf>
 8018c3a:	f06f 030f 	mvn.w	r3, #15
 8018c3e:	e04b      	b.n	8018cd8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8018c40:	68bb      	ldr	r3, [r7, #8]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d109      	bne.n	8018c5a <udp_connect+0x42>
 8018c46:	4b26      	ldr	r3, [pc, #152]	@ (8018ce0 <udp_connect+0xc8>)
 8018c48:	f240 4236 	movw	r2, #1078	@ 0x436
 8018c4c:	4927      	ldr	r1, [pc, #156]	@ (8018cec <udp_connect+0xd4>)
 8018c4e:	4826      	ldr	r0, [pc, #152]	@ (8018ce8 <udp_connect+0xd0>)
 8018c50:	f005 fec6 	bl	801e9e0 <iprintf>
 8018c54:	f06f 030f 	mvn.w	r3, #15
 8018c58:	e03e      	b.n	8018cd8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8018c5a:	68fb      	ldr	r3, [r7, #12]
 8018c5c:	8a5b      	ldrh	r3, [r3, #18]
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d10f      	bne.n	8018c82 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8018c62:	68f9      	ldr	r1, [r7, #12]
 8018c64:	68fb      	ldr	r3, [r7, #12]
 8018c66:	8a5b      	ldrh	r3, [r3, #18]
 8018c68:	461a      	mov	r2, r3
 8018c6a:	68f8      	ldr	r0, [r7, #12]
 8018c6c:	f7ff ff4c 	bl	8018b08 <udp_bind>
 8018c70:	4603      	mov	r3, r0
 8018c72:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8018c74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d002      	beq.n	8018c82 <udp_connect+0x6a>
      return err;
 8018c7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018c80:	e02a      	b.n	8018cd8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8018c82:	68bb      	ldr	r3, [r7, #8]
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d002      	beq.n	8018c8e <udp_connect+0x76>
 8018c88:	68bb      	ldr	r3, [r7, #8]
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	e000      	b.n	8018c90 <udp_connect+0x78>
 8018c8e:	2300      	movs	r3, #0
 8018c90:	68fa      	ldr	r2, [r7, #12]
 8018c92:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8018c94:	68fb      	ldr	r3, [r7, #12]
 8018c96:	88fa      	ldrh	r2, [r7, #6]
 8018c98:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	7c1b      	ldrb	r3, [r3, #16]
 8018c9e:	f043 0304 	orr.w	r3, r3, #4
 8018ca2:	b2da      	uxtb	r2, r3
 8018ca4:	68fb      	ldr	r3, [r7, #12]
 8018ca6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018ca8:	4b11      	ldr	r3, [pc, #68]	@ (8018cf0 <udp_connect+0xd8>)
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	617b      	str	r3, [r7, #20]
 8018cae:	e008      	b.n	8018cc2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8018cb0:	68fa      	ldr	r2, [r7, #12]
 8018cb2:	697b      	ldr	r3, [r7, #20]
 8018cb4:	429a      	cmp	r2, r3
 8018cb6:	d101      	bne.n	8018cbc <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8018cb8:	2300      	movs	r3, #0
 8018cba:	e00d      	b.n	8018cd8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018cbc:	697b      	ldr	r3, [r7, #20]
 8018cbe:	68db      	ldr	r3, [r3, #12]
 8018cc0:	617b      	str	r3, [r7, #20]
 8018cc2:	697b      	ldr	r3, [r7, #20]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	d1f3      	bne.n	8018cb0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8018cc8:	4b09      	ldr	r3, [pc, #36]	@ (8018cf0 <udp_connect+0xd8>)
 8018cca:	681a      	ldr	r2, [r3, #0]
 8018ccc:	68fb      	ldr	r3, [r7, #12]
 8018cce:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8018cd0:	4a07      	ldr	r2, [pc, #28]	@ (8018cf0 <udp_connect+0xd8>)
 8018cd2:	68fb      	ldr	r3, [r7, #12]
 8018cd4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8018cd6:	2300      	movs	r3, #0
}
 8018cd8:	4618      	mov	r0, r3
 8018cda:	3718      	adds	r7, #24
 8018cdc:	46bd      	mov	sp, r7
 8018cde:	bd80      	pop	{r7, pc}
 8018ce0:	08022450 	.word	0x08022450
 8018ce4:	08022730 	.word	0x08022730
 8018ce8:	080224a4 	.word	0x080224a4
 8018cec:	0802274c 	.word	0x0802274c
 8018cf0:	200047f8 	.word	0x200047f8

08018cf4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8018cf4:	b580      	push	{r7, lr}
 8018cf6:	b084      	sub	sp, #16
 8018cf8:	af00      	add	r7, sp, #0
 8018cfa:	60f8      	str	r0, [r7, #12]
 8018cfc:	60b9      	str	r1, [r7, #8]
 8018cfe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8018d00:	68fb      	ldr	r3, [r7, #12]
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	d107      	bne.n	8018d16 <udp_recv+0x22>
 8018d06:	4b08      	ldr	r3, [pc, #32]	@ (8018d28 <udp_recv+0x34>)
 8018d08:	f240 428a 	movw	r2, #1162	@ 0x48a
 8018d0c:	4907      	ldr	r1, [pc, #28]	@ (8018d2c <udp_recv+0x38>)
 8018d0e:	4808      	ldr	r0, [pc, #32]	@ (8018d30 <udp_recv+0x3c>)
 8018d10:	f005 fe66 	bl	801e9e0 <iprintf>
 8018d14:	e005      	b.n	8018d22 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8018d16:	68fb      	ldr	r3, [r7, #12]
 8018d18:	68ba      	ldr	r2, [r7, #8]
 8018d1a:	621a      	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
 8018d1c:	68fb      	ldr	r3, [r7, #12]
 8018d1e:	687a      	ldr	r2, [r7, #4]
 8018d20:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8018d22:	3710      	adds	r7, #16
 8018d24:	46bd      	mov	sp, r7
 8018d26:	bd80      	pop	{r7, pc}
 8018d28:	08022450 	.word	0x08022450
 8018d2c:	08022784 	.word	0x08022784
 8018d30:	080224a4 	.word	0x080224a4

08018d34 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8018d34:	b580      	push	{r7, lr}
 8018d36:	b084      	sub	sp, #16
 8018d38:	af00      	add	r7, sp, #0
 8018d3a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	d107      	bne.n	8018d52 <udp_remove+0x1e>
 8018d42:	4b19      	ldr	r3, [pc, #100]	@ (8018da8 <udp_remove+0x74>)
 8018d44:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8018d48:	4918      	ldr	r1, [pc, #96]	@ (8018dac <udp_remove+0x78>)
 8018d4a:	4819      	ldr	r0, [pc, #100]	@ (8018db0 <udp_remove+0x7c>)
 8018d4c:	f005 fe48 	bl	801e9e0 <iprintf>
 8018d50:	e026      	b.n	8018da0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8018d52:	4b18      	ldr	r3, [pc, #96]	@ (8018db4 <udp_remove+0x80>)
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	687a      	ldr	r2, [r7, #4]
 8018d58:	429a      	cmp	r2, r3
 8018d5a:	d105      	bne.n	8018d68 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8018d5c:	4b15      	ldr	r3, [pc, #84]	@ (8018db4 <udp_remove+0x80>)
 8018d5e:	681b      	ldr	r3, [r3, #0]
 8018d60:	68db      	ldr	r3, [r3, #12]
 8018d62:	4a14      	ldr	r2, [pc, #80]	@ (8018db4 <udp_remove+0x80>)
 8018d64:	6013      	str	r3, [r2, #0]
 8018d66:	e017      	b.n	8018d98 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018d68:	4b12      	ldr	r3, [pc, #72]	@ (8018db4 <udp_remove+0x80>)
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	60fb      	str	r3, [r7, #12]
 8018d6e:	e010      	b.n	8018d92 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8018d70:	68fb      	ldr	r3, [r7, #12]
 8018d72:	68db      	ldr	r3, [r3, #12]
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d009      	beq.n	8018d8c <udp_remove+0x58>
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	68db      	ldr	r3, [r3, #12]
 8018d7c:	687a      	ldr	r2, [r7, #4]
 8018d7e:	429a      	cmp	r2, r3
 8018d80:	d104      	bne.n	8018d8c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	68da      	ldr	r2, [r3, #12]
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	60da      	str	r2, [r3, #12]
        break;
 8018d8a:	e005      	b.n	8018d98 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	68db      	ldr	r3, [r3, #12]
 8018d90:	60fb      	str	r3, [r7, #12]
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	2b00      	cmp	r3, #0
 8018d96:	d1eb      	bne.n	8018d70 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8018d98:	6879      	ldr	r1, [r7, #4]
 8018d9a:	2000      	movs	r0, #0
 8018d9c:	f7f8 fd14 	bl	80117c8 <memp_free>
}
 8018da0:	3710      	adds	r7, #16
 8018da2:	46bd      	mov	sp, r7
 8018da4:	bd80      	pop	{r7, pc}
 8018da6:	bf00      	nop
 8018da8:	08022450 	.word	0x08022450
 8018dac:	0802279c 	.word	0x0802279c
 8018db0:	080224a4 	.word	0x080224a4
 8018db4:	200047f8 	.word	0x200047f8

08018db8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8018db8:	b580      	push	{r7, lr}
 8018dba:	b082      	sub	sp, #8
 8018dbc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8018dbe:	2000      	movs	r0, #0
 8018dc0:	f7f8 fc92 	bl	80116e8 <memp_malloc>
 8018dc4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	d00a      	beq.n	8018de2 <udp_new+0x2a>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8018dcc:	2228      	movs	r2, #40	@ 0x28
 8018dce:	2100      	movs	r1, #0
 8018dd0:	6878      	ldr	r0, [r7, #4]
 8018dd2:	f005 ffd5 	bl	801ed80 <memset>
    pcb->ttl = UDP_TTL;
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	22ff      	movs	r2, #255	@ 0xff
 8018dda:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	22ff      	movs	r2, #255	@ 0xff
 8018de0:	775a      	strb	r2, [r3, #29]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8018de2:	687b      	ldr	r3, [r7, #4]
}
 8018de4:	4618      	mov	r0, r3
 8018de6:	3708      	adds	r7, #8
 8018de8:	46bd      	mov	sp, r7
 8018dea:	bd80      	pop	{r7, pc}

08018dec <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8018dec:	b580      	push	{r7, lr}
 8018dee:	b084      	sub	sp, #16
 8018df0:	af00      	add	r7, sp, #0
 8018df2:	4603      	mov	r3, r0
 8018df4:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8018df6:	f7ff ffdf 	bl	8018db8 <udp_new>
 8018dfa:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8018dfc:	68fb      	ldr	r3, [r7, #12]
}
 8018dfe:	4618      	mov	r0, r3
 8018e00:	3710      	adds	r7, #16
 8018e02:	46bd      	mov	sp, r7
 8018e04:	bd80      	pop	{r7, pc}
	...

08018e08 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018e08:	b480      	push	{r7}
 8018e0a:	b085      	sub	sp, #20
 8018e0c:	af00      	add	r7, sp, #0
 8018e0e:	6078      	str	r0, [r7, #4]
 8018e10:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d01e      	beq.n	8018e56 <udp_netif_ip_addr_changed+0x4e>
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d01a      	beq.n	8018e56 <udp_netif_ip_addr_changed+0x4e>
 8018e20:	683b      	ldr	r3, [r7, #0]
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d017      	beq.n	8018e56 <udp_netif_ip_addr_changed+0x4e>
 8018e26:	683b      	ldr	r3, [r7, #0]
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d013      	beq.n	8018e56 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8018e64 <udp_netif_ip_addr_changed+0x5c>)
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	60fb      	str	r3, [r7, #12]
 8018e34:	e00c      	b.n	8018e50 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	681a      	ldr	r2, [r3, #0]
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	429a      	cmp	r2, r3
 8018e40:	d103      	bne.n	8018e4a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018e42:	683b      	ldr	r3, [r7, #0]
 8018e44:	681a      	ldr	r2, [r3, #0]
 8018e46:	68fb      	ldr	r3, [r7, #12]
 8018e48:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	68db      	ldr	r3, [r3, #12]
 8018e4e:	60fb      	str	r3, [r7, #12]
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d1ef      	bne.n	8018e36 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018e56:	bf00      	nop
 8018e58:	3714      	adds	r7, #20
 8018e5a:	46bd      	mov	sp, r7
 8018e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e60:	4770      	bx	lr
 8018e62:	bf00      	nop
 8018e64:	200047f8 	.word	0x200047f8

08018e68 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8018e6c:	4b20      	ldr	r3, [pc, #128]	@ (8018ef0 <dhcp_inc_pcb_refcount+0x88>)
 8018e6e:	781b      	ldrb	r3, [r3, #0]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d133      	bne.n	8018edc <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8018e74:	4b1f      	ldr	r3, [pc, #124]	@ (8018ef4 <dhcp_inc_pcb_refcount+0x8c>)
 8018e76:	681b      	ldr	r3, [r3, #0]
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d005      	beq.n	8018e88 <dhcp_inc_pcb_refcount+0x20>
 8018e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8018ef8 <dhcp_inc_pcb_refcount+0x90>)
 8018e7e:	22e5      	movs	r2, #229	@ 0xe5
 8018e80:	491e      	ldr	r1, [pc, #120]	@ (8018efc <dhcp_inc_pcb_refcount+0x94>)
 8018e82:	481f      	ldr	r0, [pc, #124]	@ (8018f00 <dhcp_inc_pcb_refcount+0x98>)
 8018e84:	f005 fdac 	bl	801e9e0 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8018e88:	f7ff ff96 	bl	8018db8 <udp_new>
 8018e8c:	4603      	mov	r3, r0
 8018e8e:	4a19      	ldr	r2, [pc, #100]	@ (8018ef4 <dhcp_inc_pcb_refcount+0x8c>)
 8018e90:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8018e92:	4b18      	ldr	r3, [pc, #96]	@ (8018ef4 <dhcp_inc_pcb_refcount+0x8c>)
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d102      	bne.n	8018ea0 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8018e9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018e9e:	e024      	b.n	8018eea <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8018ea0:	4b14      	ldr	r3, [pc, #80]	@ (8018ef4 <dhcp_inc_pcb_refcount+0x8c>)
 8018ea2:	681b      	ldr	r3, [r3, #0]
 8018ea4:	7a5a      	ldrb	r2, [r3, #9]
 8018ea6:	4b13      	ldr	r3, [pc, #76]	@ (8018ef4 <dhcp_inc_pcb_refcount+0x8c>)
 8018ea8:	681b      	ldr	r3, [r3, #0]
 8018eaa:	f042 0220 	orr.w	r2, r2, #32
 8018eae:	b2d2      	uxtb	r2, r2
 8018eb0:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8018eb2:	4b10      	ldr	r3, [pc, #64]	@ (8018ef4 <dhcp_inc_pcb_refcount+0x8c>)
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	2244      	movs	r2, #68	@ 0x44
 8018eb8:	4912      	ldr	r1, [pc, #72]	@ (8018f04 <dhcp_inc_pcb_refcount+0x9c>)
 8018eba:	4618      	mov	r0, r3
 8018ebc:	f7ff fe24 	bl	8018b08 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8018ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8018ef4 <dhcp_inc_pcb_refcount+0x8c>)
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	2243      	movs	r2, #67	@ 0x43
 8018ec6:	490f      	ldr	r1, [pc, #60]	@ (8018f04 <dhcp_inc_pcb_refcount+0x9c>)
 8018ec8:	4618      	mov	r0, r3
 8018eca:	f7ff fea5 	bl	8018c18 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8018ece:	4b09      	ldr	r3, [pc, #36]	@ (8018ef4 <dhcp_inc_pcb_refcount+0x8c>)
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	2200      	movs	r2, #0
 8018ed4:	490c      	ldr	r1, [pc, #48]	@ (8018f08 <dhcp_inc_pcb_refcount+0xa0>)
 8018ed6:	4618      	mov	r0, r3
 8018ed8:	f7ff ff0c 	bl	8018cf4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8018edc:	4b04      	ldr	r3, [pc, #16]	@ (8018ef0 <dhcp_inc_pcb_refcount+0x88>)
 8018ede:	781b      	ldrb	r3, [r3, #0]
 8018ee0:	3301      	adds	r3, #1
 8018ee2:	b2da      	uxtb	r2, r3
 8018ee4:	4b02      	ldr	r3, [pc, #8]	@ (8018ef0 <dhcp_inc_pcb_refcount+0x88>)
 8018ee6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8018ee8:	2300      	movs	r3, #0
}
 8018eea:	4618      	mov	r0, r3
 8018eec:	bd80      	pop	{r7, pc}
 8018eee:	bf00      	nop
 8018ef0:	20004828 	.word	0x20004828
 8018ef4:	20004824 	.word	0x20004824
 8018ef8:	080227b4 	.word	0x080227b4
 8018efc:	080227ec 	.word	0x080227ec
 8018f00:	08022814 	.word	0x08022814
 8018f04:	080236a0 	.word	0x080236a0
 8018f08:	0801a795 	.word	0x0801a795

08018f0c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8018f0c:	b580      	push	{r7, lr}
 8018f0e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8018f10:	4b0e      	ldr	r3, [pc, #56]	@ (8018f4c <dhcp_dec_pcb_refcount+0x40>)
 8018f12:	781b      	ldrb	r3, [r3, #0]
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d105      	bne.n	8018f24 <dhcp_dec_pcb_refcount+0x18>
 8018f18:	4b0d      	ldr	r3, [pc, #52]	@ (8018f50 <dhcp_dec_pcb_refcount+0x44>)
 8018f1a:	22ff      	movs	r2, #255	@ 0xff
 8018f1c:	490d      	ldr	r1, [pc, #52]	@ (8018f54 <dhcp_dec_pcb_refcount+0x48>)
 8018f1e:	480e      	ldr	r0, [pc, #56]	@ (8018f58 <dhcp_dec_pcb_refcount+0x4c>)
 8018f20:	f005 fd5e 	bl	801e9e0 <iprintf>
  dhcp_pcb_refcount--;
 8018f24:	4b09      	ldr	r3, [pc, #36]	@ (8018f4c <dhcp_dec_pcb_refcount+0x40>)
 8018f26:	781b      	ldrb	r3, [r3, #0]
 8018f28:	3b01      	subs	r3, #1
 8018f2a:	b2da      	uxtb	r2, r3
 8018f2c:	4b07      	ldr	r3, [pc, #28]	@ (8018f4c <dhcp_dec_pcb_refcount+0x40>)
 8018f2e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8018f30:	4b06      	ldr	r3, [pc, #24]	@ (8018f4c <dhcp_dec_pcb_refcount+0x40>)
 8018f32:	781b      	ldrb	r3, [r3, #0]
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d107      	bne.n	8018f48 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8018f38:	4b08      	ldr	r3, [pc, #32]	@ (8018f5c <dhcp_dec_pcb_refcount+0x50>)
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	f7ff fef9 	bl	8018d34 <udp_remove>
    dhcp_pcb = NULL;
 8018f42:	4b06      	ldr	r3, [pc, #24]	@ (8018f5c <dhcp_dec_pcb_refcount+0x50>)
 8018f44:	2200      	movs	r2, #0
 8018f46:	601a      	str	r2, [r3, #0]
  }
}
 8018f48:	bf00      	nop
 8018f4a:	bd80      	pop	{r7, pc}
 8018f4c:	20004828 	.word	0x20004828
 8018f50:	080227b4 	.word	0x080227b4
 8018f54:	0802283c 	.word	0x0802283c
 8018f58:	08022814 	.word	0x08022814
 8018f5c:	20004824 	.word	0x20004824

08018f60 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8018f60:	b580      	push	{r7, lr}
 8018f62:	b084      	sub	sp, #16
 8018f64:	af00      	add	r7, sp, #0
 8018f66:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018f6c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8018f6e:	210c      	movs	r1, #12
 8018f70:	68f8      	ldr	r0, [r7, #12]
 8018f72:	f001 f851 	bl	801a018 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8018f76:	4b06      	ldr	r3, [pc, #24]	@ (8018f90 <dhcp_handle_nak+0x30>)
 8018f78:	4a05      	ldr	r2, [pc, #20]	@ (8018f90 <dhcp_handle_nak+0x30>)
 8018f7a:	4905      	ldr	r1, [pc, #20]	@ (8018f90 <dhcp_handle_nak+0x30>)
 8018f7c:	6878      	ldr	r0, [r7, #4]
 8018f7e:	f7f8 fdd1 	bl	8011b24 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8018f82:	6878      	ldr	r0, [r7, #4]
 8018f84:	f000 fc4a 	bl	801981c <dhcp_discover>
}
 8018f88:	bf00      	nop
 8018f8a:	3710      	adds	r7, #16
 8018f8c:	46bd      	mov	sp, r7
 8018f8e:	bd80      	pop	{r7, pc}
 8018f90:	080236a0 	.word	0x080236a0

08018f94 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8018f94:	b580      	push	{r7, lr}
 8018f96:	b084      	sub	sp, #16
 8018f98:	af00      	add	r7, sp, #0
 8018f9a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018fa0:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8018fa2:	2108      	movs	r1, #8
 8018fa4:	68f8      	ldr	r0, [r7, #12]
 8018fa6:	f001 f837 	bl	801a018 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8018faa:	68fb      	ldr	r3, [r7, #12]
 8018fac:	331c      	adds	r3, #28
 8018fae:	2200      	movs	r2, #0
 8018fb0:	4619      	mov	r1, r3
 8018fb2:	6878      	ldr	r0, [r7, #4]
 8018fb4:	f002 fb38 	bl	801b628 <etharp_query>
 8018fb8:	4603      	mov	r3, r0
 8018fba:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8018fbc:	68fb      	ldr	r3, [r7, #12]
 8018fbe:	799b      	ldrb	r3, [r3, #6]
 8018fc0:	2bff      	cmp	r3, #255	@ 0xff
 8018fc2:	d005      	beq.n	8018fd0 <dhcp_check+0x3c>
    dhcp->tries++;
 8018fc4:	68fb      	ldr	r3, [r7, #12]
 8018fc6:	799b      	ldrb	r3, [r3, #6]
 8018fc8:	3301      	adds	r3, #1
 8018fca:	b2da      	uxtb	r2, r3
 8018fcc:	68fb      	ldr	r3, [r7, #12]
 8018fce:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8018fd0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8018fd4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018fd6:	893b      	ldrh	r3, [r7, #8]
 8018fd8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8018fdc:	4a06      	ldr	r2, [pc, #24]	@ (8018ff8 <dhcp_check+0x64>)
 8018fde:	fb82 1203 	smull	r1, r2, r2, r3
 8018fe2:	1152      	asrs	r2, r2, #5
 8018fe4:	17db      	asrs	r3, r3, #31
 8018fe6:	1ad3      	subs	r3, r2, r3
 8018fe8:	b29a      	uxth	r2, r3
 8018fea:	68fb      	ldr	r3, [r7, #12]
 8018fec:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8018fee:	bf00      	nop
 8018ff0:	3710      	adds	r7, #16
 8018ff2:	46bd      	mov	sp, r7
 8018ff4:	bd80      	pop	{r7, pc}
 8018ff6:	bf00      	nop
 8018ff8:	10624dd3 	.word	0x10624dd3

08018ffc <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8018ffc:	b580      	push	{r7, lr}
 8018ffe:	b084      	sub	sp, #16
 8019000:	af00      	add	r7, sp, #0
 8019002:	6078      	str	r0, [r7, #4]
 8019004:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801900a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801900c:	4b0c      	ldr	r3, [pc, #48]	@ (8019040 <dhcp_handle_offer+0x44>)
 801900e:	789b      	ldrb	r3, [r3, #2]
 8019010:	2b00      	cmp	r3, #0
 8019012:	d011      	beq.n	8019038 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8019014:	68fb      	ldr	r3, [r7, #12]
 8019016:	2200      	movs	r2, #0
 8019018:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801901a:	4b0a      	ldr	r3, [pc, #40]	@ (8019044 <dhcp_handle_offer+0x48>)
 801901c:	689b      	ldr	r3, [r3, #8]
 801901e:	4618      	mov	r0, r3
 8019020:	f7f7 fd80 	bl	8010b24 <lwip_htonl>
 8019024:	4602      	mov	r2, r0
 8019026:	68fb      	ldr	r3, [r7, #12]
 8019028:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801902a:	683b      	ldr	r3, [r7, #0]
 801902c:	691a      	ldr	r2, [r3, #16]
 801902e:	68fb      	ldr	r3, [r7, #12]
 8019030:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8019032:	6878      	ldr	r0, [r7, #4]
 8019034:	f000 f808 	bl	8019048 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8019038:	bf00      	nop
 801903a:	3710      	adds	r7, #16
 801903c:	46bd      	mov	sp, r7
 801903e:	bd80      	pop	{r7, pc}
 8019040:	2000481c 	.word	0x2000481c
 8019044:	200047fc 	.word	0x200047fc

08019048 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8019048:	b5b0      	push	{r4, r5, r7, lr}
 801904a:	b08a      	sub	sp, #40	@ 0x28
 801904c:	af02      	add	r7, sp, #8
 801904e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	2b00      	cmp	r3, #0
 8019054:	d109      	bne.n	801906a <dhcp_select+0x22>
 8019056:	4b71      	ldr	r3, [pc, #452]	@ (801921c <dhcp_select+0x1d4>)
 8019058:	f240 1277 	movw	r2, #375	@ 0x177
 801905c:	4970      	ldr	r1, [pc, #448]	@ (8019220 <dhcp_select+0x1d8>)
 801905e:	4871      	ldr	r0, [pc, #452]	@ (8019224 <dhcp_select+0x1dc>)
 8019060:	f005 fcbe 	bl	801e9e0 <iprintf>
 8019064:	f06f 030f 	mvn.w	r3, #15
 8019068:	e0d3      	b.n	8019212 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801906e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8019070:	69bb      	ldr	r3, [r7, #24]
 8019072:	2b00      	cmp	r3, #0
 8019074:	d109      	bne.n	801908a <dhcp_select+0x42>
 8019076:	4b69      	ldr	r3, [pc, #420]	@ (801921c <dhcp_select+0x1d4>)
 8019078:	f240 1279 	movw	r2, #377	@ 0x179
 801907c:	496a      	ldr	r1, [pc, #424]	@ (8019228 <dhcp_select+0x1e0>)
 801907e:	4869      	ldr	r0, [pc, #420]	@ (8019224 <dhcp_select+0x1dc>)
 8019080:	f005 fcae 	bl	801e9e0 <iprintf>
 8019084:	f06f 0305 	mvn.w	r3, #5
 8019088:	e0c3      	b.n	8019212 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801908a:	2101      	movs	r1, #1
 801908c:	69b8      	ldr	r0, [r7, #24]
 801908e:	f000 ffc3 	bl	801a018 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019092:	f107 030c 	add.w	r3, r7, #12
 8019096:	2203      	movs	r2, #3
 8019098:	69b9      	ldr	r1, [r7, #24]
 801909a:	6878      	ldr	r0, [r7, #4]
 801909c:	f001 fc48 	bl	801a930 <dhcp_create_msg>
 80190a0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80190a2:	697b      	ldr	r3, [r7, #20]
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	f000 8085 	beq.w	80191b4 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80190aa:	697b      	ldr	r3, [r7, #20]
 80190ac:	685b      	ldr	r3, [r3, #4]
 80190ae:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80190b0:	89b8      	ldrh	r0, [r7, #12]
 80190b2:	693b      	ldr	r3, [r7, #16]
 80190b4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80190b8:	2302      	movs	r3, #2
 80190ba:	2239      	movs	r2, #57	@ 0x39
 80190bc:	f000 ffc6 	bl	801a04c <dhcp_option>
 80190c0:	4603      	mov	r3, r0
 80190c2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80190c4:	89b8      	ldrh	r0, [r7, #12]
 80190c6:	693b      	ldr	r3, [r7, #16]
 80190c8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80190d0:	461a      	mov	r2, r3
 80190d2:	f001 f815 	bl	801a100 <dhcp_option_short>
 80190d6:	4603      	mov	r3, r0
 80190d8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80190da:	89b8      	ldrh	r0, [r7, #12]
 80190dc:	693b      	ldr	r3, [r7, #16]
 80190de:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80190e2:	2304      	movs	r3, #4
 80190e4:	2232      	movs	r2, #50	@ 0x32
 80190e6:	f000 ffb1 	bl	801a04c <dhcp_option>
 80190ea:	4603      	mov	r3, r0
 80190ec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80190ee:	89bc      	ldrh	r4, [r7, #12]
 80190f0:	693b      	ldr	r3, [r7, #16]
 80190f2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80190f6:	69bb      	ldr	r3, [r7, #24]
 80190f8:	69db      	ldr	r3, [r3, #28]
 80190fa:	4618      	mov	r0, r3
 80190fc:	f7f7 fd12 	bl	8010b24 <lwip_htonl>
 8019100:	4603      	mov	r3, r0
 8019102:	461a      	mov	r2, r3
 8019104:	4629      	mov	r1, r5
 8019106:	4620      	mov	r0, r4
 8019108:	f001 f82c 	bl	801a164 <dhcp_option_long>
 801910c:	4603      	mov	r3, r0
 801910e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8019110:	89b8      	ldrh	r0, [r7, #12]
 8019112:	693b      	ldr	r3, [r7, #16]
 8019114:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019118:	2304      	movs	r3, #4
 801911a:	2236      	movs	r2, #54	@ 0x36
 801911c:	f000 ff96 	bl	801a04c <dhcp_option>
 8019120:	4603      	mov	r3, r0
 8019122:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8019124:	89bc      	ldrh	r4, [r7, #12]
 8019126:	693b      	ldr	r3, [r7, #16]
 8019128:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801912c:	69bb      	ldr	r3, [r7, #24]
 801912e:	699b      	ldr	r3, [r3, #24]
 8019130:	4618      	mov	r0, r3
 8019132:	f7f7 fcf7 	bl	8010b24 <lwip_htonl>
 8019136:	4603      	mov	r3, r0
 8019138:	461a      	mov	r2, r3
 801913a:	4629      	mov	r1, r5
 801913c:	4620      	mov	r0, r4
 801913e:	f001 f811 	bl	801a164 <dhcp_option_long>
 8019142:	4603      	mov	r3, r0
 8019144:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019146:	89b8      	ldrh	r0, [r7, #12]
 8019148:	693b      	ldr	r3, [r7, #16]
 801914a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801914e:	2303      	movs	r3, #3
 8019150:	2237      	movs	r2, #55	@ 0x37
 8019152:	f000 ff7b 	bl	801a04c <dhcp_option>
 8019156:	4603      	mov	r3, r0
 8019158:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801915a:	2300      	movs	r3, #0
 801915c:	77bb      	strb	r3, [r7, #30]
 801915e:	e00e      	b.n	801917e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019160:	89b8      	ldrh	r0, [r7, #12]
 8019162:	693b      	ldr	r3, [r7, #16]
 8019164:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019168:	7fbb      	ldrb	r3, [r7, #30]
 801916a:	4a30      	ldr	r2, [pc, #192]	@ (801922c <dhcp_select+0x1e4>)
 801916c:	5cd3      	ldrb	r3, [r2, r3]
 801916e:	461a      	mov	r2, r3
 8019170:	f000 ffa0 	bl	801a0b4 <dhcp_option_byte>
 8019174:	4603      	mov	r3, r0
 8019176:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019178:	7fbb      	ldrb	r3, [r7, #30]
 801917a:	3301      	adds	r3, #1
 801917c:	77bb      	strb	r3, [r7, #30]
 801917e:	7fbb      	ldrb	r3, [r7, #30]
 8019180:	2b02      	cmp	r3, #2
 8019182:	d9ed      	bls.n	8019160 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019184:	89b8      	ldrh	r0, [r7, #12]
 8019186:	693b      	ldr	r3, [r7, #16]
 8019188:	33f0      	adds	r3, #240	@ 0xf0
 801918a:	697a      	ldr	r2, [r7, #20]
 801918c:	4619      	mov	r1, r3
 801918e:	f001 fca5 	bl	801aadc <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8019192:	4b27      	ldr	r3, [pc, #156]	@ (8019230 <dhcp_select+0x1e8>)
 8019194:	6818      	ldr	r0, [r3, #0]
 8019196:	4b27      	ldr	r3, [pc, #156]	@ (8019234 <dhcp_select+0x1ec>)
 8019198:	9301      	str	r3, [sp, #4]
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	9300      	str	r3, [sp, #0]
 801919e:	2343      	movs	r3, #67	@ 0x43
 80191a0:	4a25      	ldr	r2, [pc, #148]	@ (8019238 <dhcp_select+0x1f0>)
 80191a2:	6979      	ldr	r1, [r7, #20]
 80191a4:	f7ff fbae 	bl	8018904 <udp_sendto_if_src>
 80191a8:	4603      	mov	r3, r0
 80191aa:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80191ac:	6978      	ldr	r0, [r7, #20]
 80191ae:	f7f9 f9f7 	bl	80125a0 <pbuf_free>
 80191b2:	e001      	b.n	80191b8 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80191b4:	23ff      	movs	r3, #255	@ 0xff
 80191b6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80191b8:	69bb      	ldr	r3, [r7, #24]
 80191ba:	799b      	ldrb	r3, [r3, #6]
 80191bc:	2bff      	cmp	r3, #255	@ 0xff
 80191be:	d005      	beq.n	80191cc <dhcp_select+0x184>
    dhcp->tries++;
 80191c0:	69bb      	ldr	r3, [r7, #24]
 80191c2:	799b      	ldrb	r3, [r3, #6]
 80191c4:	3301      	adds	r3, #1
 80191c6:	b2da      	uxtb	r2, r3
 80191c8:	69bb      	ldr	r3, [r7, #24]
 80191ca:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80191cc:	69bb      	ldr	r3, [r7, #24]
 80191ce:	799b      	ldrb	r3, [r3, #6]
 80191d0:	2b05      	cmp	r3, #5
 80191d2:	d80d      	bhi.n	80191f0 <dhcp_select+0x1a8>
 80191d4:	69bb      	ldr	r3, [r7, #24]
 80191d6:	799b      	ldrb	r3, [r3, #6]
 80191d8:	461a      	mov	r2, r3
 80191da:	2301      	movs	r3, #1
 80191dc:	4093      	lsls	r3, r2
 80191de:	b29b      	uxth	r3, r3
 80191e0:	461a      	mov	r2, r3
 80191e2:	0152      	lsls	r2, r2, #5
 80191e4:	1ad2      	subs	r2, r2, r3
 80191e6:	0092      	lsls	r2, r2, #2
 80191e8:	4413      	add	r3, r2
 80191ea:	00db      	lsls	r3, r3, #3
 80191ec:	b29b      	uxth	r3, r3
 80191ee:	e001      	b.n	80191f4 <dhcp_select+0x1ac>
 80191f0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80191f4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80191f6:	89fb      	ldrh	r3, [r7, #14]
 80191f8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80191fc:	4a0f      	ldr	r2, [pc, #60]	@ (801923c <dhcp_select+0x1f4>)
 80191fe:	fb82 1203 	smull	r1, r2, r2, r3
 8019202:	1152      	asrs	r2, r2, #5
 8019204:	17db      	asrs	r3, r3, #31
 8019206:	1ad3      	subs	r3, r2, r3
 8019208:	b29a      	uxth	r2, r3
 801920a:	69bb      	ldr	r3, [r7, #24]
 801920c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801920e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019212:	4618      	mov	r0, r3
 8019214:	3720      	adds	r7, #32
 8019216:	46bd      	mov	sp, r7
 8019218:	bdb0      	pop	{r4, r5, r7, pc}
 801921a:	bf00      	nop
 801921c:	080227b4 	.word	0x080227b4
 8019220:	08022860 	.word	0x08022860
 8019224:	08022814 	.word	0x08022814
 8019228:	0802287c 	.word	0x0802287c
 801922c:	200000c4 	.word	0x200000c4
 8019230:	20004824 	.word	0x20004824
 8019234:	080236a0 	.word	0x080236a0
 8019238:	080236a4 	.word	0x080236a4
 801923c:	10624dd3 	.word	0x10624dd3

08019240 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8019240:	b580      	push	{r7, lr}
 8019242:	b082      	sub	sp, #8
 8019244:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8019246:	4b27      	ldr	r3, [pc, #156]	@ (80192e4 <dhcp_coarse_tmr+0xa4>)
 8019248:	681b      	ldr	r3, [r3, #0]
 801924a:	607b      	str	r3, [r7, #4]
 801924c:	e042      	b.n	80192d4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019252:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8019254:	683b      	ldr	r3, [r7, #0]
 8019256:	2b00      	cmp	r3, #0
 8019258:	d039      	beq.n	80192ce <dhcp_coarse_tmr+0x8e>
 801925a:	683b      	ldr	r3, [r7, #0]
 801925c:	795b      	ldrb	r3, [r3, #5]
 801925e:	2b00      	cmp	r3, #0
 8019260:	d035      	beq.n	80192ce <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8019262:	683b      	ldr	r3, [r7, #0]
 8019264:	8a9b      	ldrh	r3, [r3, #20]
 8019266:	2b00      	cmp	r3, #0
 8019268:	d012      	beq.n	8019290 <dhcp_coarse_tmr+0x50>
 801926a:	683b      	ldr	r3, [r7, #0]
 801926c:	8a5b      	ldrh	r3, [r3, #18]
 801926e:	3301      	adds	r3, #1
 8019270:	b29a      	uxth	r2, r3
 8019272:	683b      	ldr	r3, [r7, #0]
 8019274:	825a      	strh	r2, [r3, #18]
 8019276:	683b      	ldr	r3, [r7, #0]
 8019278:	8a5a      	ldrh	r2, [r3, #18]
 801927a:	683b      	ldr	r3, [r7, #0]
 801927c:	8a9b      	ldrh	r3, [r3, #20]
 801927e:	429a      	cmp	r2, r3
 8019280:	d106      	bne.n	8019290 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8019282:	6878      	ldr	r0, [r7, #4]
 8019284:	f000 fe2e 	bl	8019ee4 <dhcp_release_and_stop>
        dhcp_start(netif);
 8019288:	6878      	ldr	r0, [r7, #4]
 801928a:	f000 f96b 	bl	8019564 <dhcp_start>
 801928e:	e01e      	b.n	80192ce <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8019290:	683b      	ldr	r3, [r7, #0]
 8019292:	8a1b      	ldrh	r3, [r3, #16]
 8019294:	2b00      	cmp	r3, #0
 8019296:	d00b      	beq.n	80192b0 <dhcp_coarse_tmr+0x70>
 8019298:	683b      	ldr	r3, [r7, #0]
 801929a:	8a1b      	ldrh	r3, [r3, #16]
 801929c:	1e5a      	subs	r2, r3, #1
 801929e:	b291      	uxth	r1, r2
 80192a0:	683a      	ldr	r2, [r7, #0]
 80192a2:	8211      	strh	r1, [r2, #16]
 80192a4:	2b01      	cmp	r3, #1
 80192a6:	d103      	bne.n	80192b0 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80192a8:	6878      	ldr	r0, [r7, #4]
 80192aa:	f000 f8c7 	bl	801943c <dhcp_t2_timeout>
 80192ae:	e00e      	b.n	80192ce <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80192b0:	683b      	ldr	r3, [r7, #0]
 80192b2:	89db      	ldrh	r3, [r3, #14]
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d00a      	beq.n	80192ce <dhcp_coarse_tmr+0x8e>
 80192b8:	683b      	ldr	r3, [r7, #0]
 80192ba:	89db      	ldrh	r3, [r3, #14]
 80192bc:	1e5a      	subs	r2, r3, #1
 80192be:	b291      	uxth	r1, r2
 80192c0:	683a      	ldr	r2, [r7, #0]
 80192c2:	81d1      	strh	r1, [r2, #14]
 80192c4:	2b01      	cmp	r3, #1
 80192c6:	d102      	bne.n	80192ce <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80192c8:	6878      	ldr	r0, [r7, #4]
 80192ca:	f000 f888 	bl	80193de <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	607b      	str	r3, [r7, #4]
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d1b9      	bne.n	801924e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80192da:	bf00      	nop
 80192dc:	bf00      	nop
 80192de:	3708      	adds	r7, #8
 80192e0:	46bd      	mov	sp, r7
 80192e2:	bd80      	pop	{r7, pc}
 80192e4:	20004790 	.word	0x20004790

080192e8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80192e8:	b580      	push	{r7, lr}
 80192ea:	b082      	sub	sp, #8
 80192ec:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80192ee:	4b16      	ldr	r3, [pc, #88]	@ (8019348 <dhcp_fine_tmr+0x60>)
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	607b      	str	r3, [r7, #4]
 80192f4:	e020      	b.n	8019338 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80192fa:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80192fc:	683b      	ldr	r3, [r7, #0]
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d017      	beq.n	8019332 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8019302:	683b      	ldr	r3, [r7, #0]
 8019304:	891b      	ldrh	r3, [r3, #8]
 8019306:	2b01      	cmp	r3, #1
 8019308:	d906      	bls.n	8019318 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801930a:	683b      	ldr	r3, [r7, #0]
 801930c:	891b      	ldrh	r3, [r3, #8]
 801930e:	3b01      	subs	r3, #1
 8019310:	b29a      	uxth	r2, r3
 8019312:	683b      	ldr	r3, [r7, #0]
 8019314:	811a      	strh	r2, [r3, #8]
 8019316:	e00c      	b.n	8019332 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8019318:	683b      	ldr	r3, [r7, #0]
 801931a:	891b      	ldrh	r3, [r3, #8]
 801931c:	2b01      	cmp	r3, #1
 801931e:	d108      	bne.n	8019332 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8019320:	683b      	ldr	r3, [r7, #0]
 8019322:	891b      	ldrh	r3, [r3, #8]
 8019324:	3b01      	subs	r3, #1
 8019326:	b29a      	uxth	r2, r3
 8019328:	683b      	ldr	r3, [r7, #0]
 801932a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801932c:	6878      	ldr	r0, [r7, #4]
 801932e:	f000 f80d 	bl	801934c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	607b      	str	r3, [r7, #4]
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	2b00      	cmp	r3, #0
 801933c:	d1db      	bne.n	80192f6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801933e:	bf00      	nop
 8019340:	bf00      	nop
 8019342:	3708      	adds	r7, #8
 8019344:	46bd      	mov	sp, r7
 8019346:	bd80      	pop	{r7, pc}
 8019348:	20004790 	.word	0x20004790

0801934c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801934c:	b580      	push	{r7, lr}
 801934e:	b084      	sub	sp, #16
 8019350:	af00      	add	r7, sp, #0
 8019352:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019358:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801935a:	68fb      	ldr	r3, [r7, #12]
 801935c:	795b      	ldrb	r3, [r3, #5]
 801935e:	2b0c      	cmp	r3, #12
 8019360:	d003      	beq.n	801936a <dhcp_timeout+0x1e>
 8019362:	68fb      	ldr	r3, [r7, #12]
 8019364:	795b      	ldrb	r3, [r3, #5]
 8019366:	2b06      	cmp	r3, #6
 8019368:	d103      	bne.n	8019372 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801936a:	6878      	ldr	r0, [r7, #4]
 801936c:	f000 fa56 	bl	801981c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8019370:	e031      	b.n	80193d6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8019372:	68fb      	ldr	r3, [r7, #12]
 8019374:	795b      	ldrb	r3, [r3, #5]
 8019376:	2b01      	cmp	r3, #1
 8019378:	d10e      	bne.n	8019398 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801937a:	68fb      	ldr	r3, [r7, #12]
 801937c:	799b      	ldrb	r3, [r3, #6]
 801937e:	2b05      	cmp	r3, #5
 8019380:	d803      	bhi.n	801938a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8019382:	6878      	ldr	r0, [r7, #4]
 8019384:	f7ff fe60 	bl	8019048 <dhcp_select>
}
 8019388:	e025      	b.n	80193d6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801938a:	6878      	ldr	r0, [r7, #4]
 801938c:	f000 fdaa 	bl	8019ee4 <dhcp_release_and_stop>
      dhcp_start(netif);
 8019390:	6878      	ldr	r0, [r7, #4]
 8019392:	f000 f8e7 	bl	8019564 <dhcp_start>
}
 8019396:	e01e      	b.n	80193d6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8019398:	68fb      	ldr	r3, [r7, #12]
 801939a:	795b      	ldrb	r3, [r3, #5]
 801939c:	2b08      	cmp	r3, #8
 801939e:	d10b      	bne.n	80193b8 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80193a0:	68fb      	ldr	r3, [r7, #12]
 80193a2:	799b      	ldrb	r3, [r3, #6]
 80193a4:	2b01      	cmp	r3, #1
 80193a6:	d803      	bhi.n	80193b0 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80193a8:	6878      	ldr	r0, [r7, #4]
 80193aa:	f7ff fdf3 	bl	8018f94 <dhcp_check>
}
 80193ae:	e012      	b.n	80193d6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80193b0:	6878      	ldr	r0, [r7, #4]
 80193b2:	f000 fad5 	bl	8019960 <dhcp_bind>
}
 80193b6:	e00e      	b.n	80193d6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80193b8:	68fb      	ldr	r3, [r7, #12]
 80193ba:	795b      	ldrb	r3, [r3, #5]
 80193bc:	2b03      	cmp	r3, #3
 80193be:	d10a      	bne.n	80193d6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80193c0:	68fb      	ldr	r3, [r7, #12]
 80193c2:	799b      	ldrb	r3, [r3, #6]
 80193c4:	2b01      	cmp	r3, #1
 80193c6:	d803      	bhi.n	80193d0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80193c8:	6878      	ldr	r0, [r7, #4]
 80193ca:	f000 fcd7 	bl	8019d7c <dhcp_reboot>
}
 80193ce:	e002      	b.n	80193d6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80193d0:	6878      	ldr	r0, [r7, #4]
 80193d2:	f000 fa23 	bl	801981c <dhcp_discover>
}
 80193d6:	bf00      	nop
 80193d8:	3710      	adds	r7, #16
 80193da:	46bd      	mov	sp, r7
 80193dc:	bd80      	pop	{r7, pc}

080193de <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80193de:	b580      	push	{r7, lr}
 80193e0:	b084      	sub	sp, #16
 80193e2:	af00      	add	r7, sp, #0
 80193e4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80193ea:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	795b      	ldrb	r3, [r3, #5]
 80193f0:	2b01      	cmp	r3, #1
 80193f2:	d007      	beq.n	8019404 <dhcp_t1_timeout+0x26>
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	795b      	ldrb	r3, [r3, #5]
 80193f8:	2b0a      	cmp	r3, #10
 80193fa:	d003      	beq.n	8019404 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80193fc:	68fb      	ldr	r3, [r7, #12]
 80193fe:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019400:	2b05      	cmp	r3, #5
 8019402:	d117      	bne.n	8019434 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8019404:	6878      	ldr	r0, [r7, #4]
 8019406:	f000 fb85 	bl	8019b14 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801940a:	68fb      	ldr	r3, [r7, #12]
 801940c:	899b      	ldrh	r3, [r3, #12]
 801940e:	461a      	mov	r2, r3
 8019410:	68fb      	ldr	r3, [r7, #12]
 8019412:	8a5b      	ldrh	r3, [r3, #18]
 8019414:	1ad3      	subs	r3, r2, r3
 8019416:	2b01      	cmp	r3, #1
 8019418:	dd0c      	ble.n	8019434 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801941a:	68fb      	ldr	r3, [r7, #12]
 801941c:	899b      	ldrh	r3, [r3, #12]
 801941e:	461a      	mov	r2, r3
 8019420:	68fb      	ldr	r3, [r7, #12]
 8019422:	8a5b      	ldrh	r3, [r3, #18]
 8019424:	1ad3      	subs	r3, r2, r3
 8019426:	2b00      	cmp	r3, #0
 8019428:	da00      	bge.n	801942c <dhcp_t1_timeout+0x4e>
 801942a:	3301      	adds	r3, #1
 801942c:	105b      	asrs	r3, r3, #1
 801942e:	b29a      	uxth	r2, r3
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8019434:	bf00      	nop
 8019436:	3710      	adds	r7, #16
 8019438:	46bd      	mov	sp, r7
 801943a:	bd80      	pop	{r7, pc}

0801943c <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801943c:	b580      	push	{r7, lr}
 801943e:	b084      	sub	sp, #16
 8019440:	af00      	add	r7, sp, #0
 8019442:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019448:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801944a:	68fb      	ldr	r3, [r7, #12]
 801944c:	795b      	ldrb	r3, [r3, #5]
 801944e:	2b01      	cmp	r3, #1
 8019450:	d00b      	beq.n	801946a <dhcp_t2_timeout+0x2e>
 8019452:	68fb      	ldr	r3, [r7, #12]
 8019454:	795b      	ldrb	r3, [r3, #5]
 8019456:	2b0a      	cmp	r3, #10
 8019458:	d007      	beq.n	801946a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801945a:	68fb      	ldr	r3, [r7, #12]
 801945c:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801945e:	2b05      	cmp	r3, #5
 8019460:	d003      	beq.n	801946a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8019462:	68fb      	ldr	r3, [r7, #12]
 8019464:	795b      	ldrb	r3, [r3, #5]
 8019466:	2b04      	cmp	r3, #4
 8019468:	d117      	bne.n	801949a <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801946a:	6878      	ldr	r0, [r7, #4]
 801946c:	f000 fbec 	bl	8019c48 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8019470:	68fb      	ldr	r3, [r7, #12]
 8019472:	8a9b      	ldrh	r3, [r3, #20]
 8019474:	461a      	mov	r2, r3
 8019476:	68fb      	ldr	r3, [r7, #12]
 8019478:	8a5b      	ldrh	r3, [r3, #18]
 801947a:	1ad3      	subs	r3, r2, r3
 801947c:	2b01      	cmp	r3, #1
 801947e:	dd0c      	ble.n	801949a <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8019480:	68fb      	ldr	r3, [r7, #12]
 8019482:	8a9b      	ldrh	r3, [r3, #20]
 8019484:	461a      	mov	r2, r3
 8019486:	68fb      	ldr	r3, [r7, #12]
 8019488:	8a5b      	ldrh	r3, [r3, #18]
 801948a:	1ad3      	subs	r3, r2, r3
 801948c:	2b00      	cmp	r3, #0
 801948e:	da00      	bge.n	8019492 <dhcp_t2_timeout+0x56>
 8019490:	3301      	adds	r3, #1
 8019492:	105b      	asrs	r3, r3, #1
 8019494:	b29a      	uxth	r2, r3
 8019496:	68fb      	ldr	r3, [r7, #12]
 8019498:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801949a:	bf00      	nop
 801949c:	3710      	adds	r7, #16
 801949e:	46bd      	mov	sp, r7
 80194a0:	bd80      	pop	{r7, pc}
	...

080194a4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80194a4:	b580      	push	{r7, lr}
 80194a6:	b084      	sub	sp, #16
 80194a8:	af00      	add	r7, sp, #0
 80194aa:	6078      	str	r0, [r7, #4]
 80194ac:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80194b2:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	2200      	movs	r2, #0
 80194b8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80194ba:	68fb      	ldr	r3, [r7, #12]
 80194bc:	2200      	movs	r2, #0
 80194be:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80194c0:	4b26      	ldr	r3, [pc, #152]	@ (801955c <dhcp_handle_ack+0xb8>)
 80194c2:	78db      	ldrb	r3, [r3, #3]
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d003      	beq.n	80194d0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80194c8:	4b25      	ldr	r3, [pc, #148]	@ (8019560 <dhcp_handle_ack+0xbc>)
 80194ca:	68da      	ldr	r2, [r3, #12]
 80194cc:	68fb      	ldr	r3, [r7, #12]
 80194ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80194d0:	4b22      	ldr	r3, [pc, #136]	@ (801955c <dhcp_handle_ack+0xb8>)
 80194d2:	791b      	ldrb	r3, [r3, #4]
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d004      	beq.n	80194e2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80194d8:	4b21      	ldr	r3, [pc, #132]	@ (8019560 <dhcp_handle_ack+0xbc>)
 80194da:	691a      	ldr	r2, [r3, #16]
 80194dc:	68fb      	ldr	r3, [r7, #12]
 80194de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80194e0:	e004      	b.n	80194ec <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80194e2:	68fb      	ldr	r3, [r7, #12]
 80194e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80194e6:	085a      	lsrs	r2, r3, #1
 80194e8:	68fb      	ldr	r3, [r7, #12]
 80194ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80194ec:	4b1b      	ldr	r3, [pc, #108]	@ (801955c <dhcp_handle_ack+0xb8>)
 80194ee:	795b      	ldrb	r3, [r3, #5]
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d004      	beq.n	80194fe <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80194f4:	4b1a      	ldr	r3, [pc, #104]	@ (8019560 <dhcp_handle_ack+0xbc>)
 80194f6:	695a      	ldr	r2, [r3, #20]
 80194f8:	68fb      	ldr	r3, [r7, #12]
 80194fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80194fc:	e007      	b.n	801950e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80194fe:	68fb      	ldr	r3, [r7, #12]
 8019500:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019502:	4613      	mov	r3, r2
 8019504:	00db      	lsls	r3, r3, #3
 8019506:	1a9b      	subs	r3, r3, r2
 8019508:	08da      	lsrs	r2, r3, #3
 801950a:	68fb      	ldr	r3, [r7, #12]
 801950c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801950e:	683b      	ldr	r3, [r7, #0]
 8019510:	691a      	ldr	r2, [r3, #16]
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8019516:	4b11      	ldr	r3, [pc, #68]	@ (801955c <dhcp_handle_ack+0xb8>)
 8019518:	799b      	ldrb	r3, [r3, #6]
 801951a:	2b00      	cmp	r3, #0
 801951c:	d00b      	beq.n	8019536 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801951e:	4b10      	ldr	r3, [pc, #64]	@ (8019560 <dhcp_handle_ack+0xbc>)
 8019520:	699b      	ldr	r3, [r3, #24]
 8019522:	4618      	mov	r0, r3
 8019524:	f7f7 fafe 	bl	8010b24 <lwip_htonl>
 8019528:	4602      	mov	r2, r0
 801952a:	68fb      	ldr	r3, [r7, #12]
 801952c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801952e:	68fb      	ldr	r3, [r7, #12]
 8019530:	2201      	movs	r2, #1
 8019532:	71da      	strb	r2, [r3, #7]
 8019534:	e002      	b.n	801953c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	2200      	movs	r2, #0
 801953a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801953c:	4b07      	ldr	r3, [pc, #28]	@ (801955c <dhcp_handle_ack+0xb8>)
 801953e:	79db      	ldrb	r3, [r3, #7]
 8019540:	2b00      	cmp	r3, #0
 8019542:	d007      	beq.n	8019554 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8019544:	4b06      	ldr	r3, [pc, #24]	@ (8019560 <dhcp_handle_ack+0xbc>)
 8019546:	69db      	ldr	r3, [r3, #28]
 8019548:	4618      	mov	r0, r3
 801954a:	f7f7 faeb 	bl	8010b24 <lwip_htonl>
 801954e:	4602      	mov	r2, r0
 8019550:	68fb      	ldr	r3, [r7, #12]
 8019552:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8019554:	bf00      	nop
 8019556:	3710      	adds	r7, #16
 8019558:	46bd      	mov	sp, r7
 801955a:	bd80      	pop	{r7, pc}
 801955c:	2000481c 	.word	0x2000481c
 8019560:	200047fc 	.word	0x200047fc

08019564 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8019564:	b580      	push	{r7, lr}
 8019566:	b084      	sub	sp, #16
 8019568:	af00      	add	r7, sp, #0
 801956a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	2b00      	cmp	r3, #0
 8019570:	d109      	bne.n	8019586 <dhcp_start+0x22>
 8019572:	4b37      	ldr	r3, [pc, #220]	@ (8019650 <dhcp_start+0xec>)
 8019574:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8019578:	4936      	ldr	r1, [pc, #216]	@ (8019654 <dhcp_start+0xf0>)
 801957a:	4837      	ldr	r0, [pc, #220]	@ (8019658 <dhcp_start+0xf4>)
 801957c:	f005 fa30 	bl	801e9e0 <iprintf>
 8019580:	f06f 030f 	mvn.w	r3, #15
 8019584:	e060      	b.n	8019648 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801958c:	f003 0301 	and.w	r3, r3, #1
 8019590:	2b00      	cmp	r3, #0
 8019592:	d109      	bne.n	80195a8 <dhcp_start+0x44>
 8019594:	4b2e      	ldr	r3, [pc, #184]	@ (8019650 <dhcp_start+0xec>)
 8019596:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 801959a:	4930      	ldr	r1, [pc, #192]	@ (801965c <dhcp_start+0xf8>)
 801959c:	482e      	ldr	r0, [pc, #184]	@ (8019658 <dhcp_start+0xf4>)
 801959e:	f005 fa1f 	bl	801e9e0 <iprintf>
 80195a2:	f06f 030f 	mvn.w	r3, #15
 80195a6:	e04f      	b.n	8019648 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80195ac:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80195b2:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 80195b6:	d202      	bcs.n	80195be <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80195b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80195bc:	e044      	b.n	8019648 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d10d      	bne.n	80195e0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80195c4:	2034      	movs	r0, #52	@ 0x34
 80195c6:	f7f7 fee7 	bl	8011398 <mem_malloc>
 80195ca:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80195cc:	68fb      	ldr	r3, [r7, #12]
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	d102      	bne.n	80195d8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80195d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80195d6:	e037      	b.n	8019648 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	68fa      	ldr	r2, [r7, #12]
 80195dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80195de:	e005      	b.n	80195ec <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80195e0:	68fb      	ldr	r3, [r7, #12]
 80195e2:	791b      	ldrb	r3, [r3, #4]
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	d001      	beq.n	80195ec <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80195e8:	f7ff fc90 	bl	8018f0c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80195ec:	2234      	movs	r2, #52	@ 0x34
 80195ee:	2100      	movs	r1, #0
 80195f0:	68f8      	ldr	r0, [r7, #12]
 80195f2:	f005 fbc5 	bl	801ed80 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80195f6:	f7ff fc37 	bl	8018e68 <dhcp_inc_pcb_refcount>
 80195fa:	4603      	mov	r3, r0
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d002      	beq.n	8019606 <dhcp_start+0xa2>
    return ERR_MEM;
 8019600:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019604:	e020      	b.n	8019648 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	2201      	movs	r2, #1
 801960a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8019612:	f003 0304 	and.w	r3, r3, #4
 8019616:	2b00      	cmp	r3, #0
 8019618:	d105      	bne.n	8019626 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801961a:	2102      	movs	r1, #2
 801961c:	68f8      	ldr	r0, [r7, #12]
 801961e:	f000 fcfb 	bl	801a018 <dhcp_set_state>
    return ERR_OK;
 8019622:	2300      	movs	r3, #0
 8019624:	e010      	b.n	8019648 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8019626:	6878      	ldr	r0, [r7, #4]
 8019628:	f000 f8f8 	bl	801981c <dhcp_discover>
 801962c:	4603      	mov	r3, r0
 801962e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8019630:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8019634:	2b00      	cmp	r3, #0
 8019636:	d005      	beq.n	8019644 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8019638:	6878      	ldr	r0, [r7, #4]
 801963a:	f000 fc53 	bl	8019ee4 <dhcp_release_and_stop>
    return ERR_MEM;
 801963e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019642:	e001      	b.n	8019648 <dhcp_start+0xe4>
  }
  return result;
 8019644:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019648:	4618      	mov	r0, r3
 801964a:	3710      	adds	r7, #16
 801964c:	46bd      	mov	sp, r7
 801964e:	bd80      	pop	{r7, pc}
 8019650:	080227b4 	.word	0x080227b4
 8019654:	08022898 	.word	0x08022898
 8019658:	08022814 	.word	0x08022814
 801965c:	080228dc 	.word	0x080228dc

08019660 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8019660:	b580      	push	{r7, lr}
 8019662:	b084      	sub	sp, #16
 8019664:	af00      	add	r7, sp, #0
 8019666:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801966c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801966e:	68fb      	ldr	r3, [r7, #12]
 8019670:	2b00      	cmp	r3, #0
 8019672:	d025      	beq.n	80196c0 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	795b      	ldrb	r3, [r3, #5]
 8019678:	2b0a      	cmp	r3, #10
 801967a:	d008      	beq.n	801968e <dhcp_network_changed+0x2e>
 801967c:	2b0a      	cmp	r3, #10
 801967e:	dc0d      	bgt.n	801969c <dhcp_network_changed+0x3c>
 8019680:	2b00      	cmp	r3, #0
 8019682:	d01f      	beq.n	80196c4 <dhcp_network_changed+0x64>
 8019684:	2b00      	cmp	r3, #0
 8019686:	db09      	blt.n	801969c <dhcp_network_changed+0x3c>
 8019688:	3b03      	subs	r3, #3
 801968a:	2b02      	cmp	r3, #2
 801968c:	d806      	bhi.n	801969c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801968e:	68fb      	ldr	r3, [r7, #12]
 8019690:	2200      	movs	r2, #0
 8019692:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8019694:	6878      	ldr	r0, [r7, #4]
 8019696:	f000 fb71 	bl	8019d7c <dhcp_reboot>
      break;
 801969a:	e014      	b.n	80196c6 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	795b      	ldrb	r3, [r3, #5]
 80196a0:	2b0c      	cmp	r3, #12
 80196a2:	d906      	bls.n	80196b2 <dhcp_network_changed+0x52>
 80196a4:	4b09      	ldr	r3, [pc, #36]	@ (80196cc <dhcp_network_changed+0x6c>)
 80196a6:	f240 326d 	movw	r2, #877	@ 0x36d
 80196aa:	4909      	ldr	r1, [pc, #36]	@ (80196d0 <dhcp_network_changed+0x70>)
 80196ac:	4809      	ldr	r0, [pc, #36]	@ (80196d4 <dhcp_network_changed+0x74>)
 80196ae:	f005 f997 	bl	801e9e0 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80196b2:	68fb      	ldr	r3, [r7, #12]
 80196b4:	2200      	movs	r2, #0
 80196b6:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80196b8:	6878      	ldr	r0, [r7, #4]
 80196ba:	f000 f8af 	bl	801981c <dhcp_discover>
      break;
 80196be:	e002      	b.n	80196c6 <dhcp_network_changed+0x66>
    return;
 80196c0:	bf00      	nop
 80196c2:	e000      	b.n	80196c6 <dhcp_network_changed+0x66>
      break;
 80196c4:	bf00      	nop
  }
}
 80196c6:	3710      	adds	r7, #16
 80196c8:	46bd      	mov	sp, r7
 80196ca:	bd80      	pop	{r7, pc}
 80196cc:	080227b4 	.word	0x080227b4
 80196d0:	08022900 	.word	0x08022900
 80196d4:	08022814 	.word	0x08022814

080196d8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80196d8:	b580      	push	{r7, lr}
 80196da:	b084      	sub	sp, #16
 80196dc:	af00      	add	r7, sp, #0
 80196de:	6078      	str	r0, [r7, #4]
 80196e0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d107      	bne.n	80196f8 <dhcp_arp_reply+0x20>
 80196e8:	4b0e      	ldr	r3, [pc, #56]	@ (8019724 <dhcp_arp_reply+0x4c>)
 80196ea:	f240 328b 	movw	r2, #907	@ 0x38b
 80196ee:	490e      	ldr	r1, [pc, #56]	@ (8019728 <dhcp_arp_reply+0x50>)
 80196f0:	480e      	ldr	r0, [pc, #56]	@ (801972c <dhcp_arp_reply+0x54>)
 80196f2:	f005 f975 	bl	801e9e0 <iprintf>
 80196f6:	e012      	b.n	801971e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196fc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	2b00      	cmp	r3, #0
 8019702:	d00c      	beq.n	801971e <dhcp_arp_reply+0x46>
 8019704:	68fb      	ldr	r3, [r7, #12]
 8019706:	795b      	ldrb	r3, [r3, #5]
 8019708:	2b08      	cmp	r3, #8
 801970a:	d108      	bne.n	801971e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801970c:	683b      	ldr	r3, [r7, #0]
 801970e:	681a      	ldr	r2, [r3, #0]
 8019710:	68fb      	ldr	r3, [r7, #12]
 8019712:	69db      	ldr	r3, [r3, #28]
 8019714:	429a      	cmp	r2, r3
 8019716:	d102      	bne.n	801971e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8019718:	6878      	ldr	r0, [r7, #4]
 801971a:	f000 f809 	bl	8019730 <dhcp_decline>
    }
  }
}
 801971e:	3710      	adds	r7, #16
 8019720:	46bd      	mov	sp, r7
 8019722:	bd80      	pop	{r7, pc}
 8019724:	080227b4 	.word	0x080227b4
 8019728:	08022898 	.word	0x08022898
 801972c:	08022814 	.word	0x08022814

08019730 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8019730:	b5b0      	push	{r4, r5, r7, lr}
 8019732:	b08a      	sub	sp, #40	@ 0x28
 8019734:	af02      	add	r7, sp, #8
 8019736:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801973c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801973e:	210c      	movs	r1, #12
 8019740:	69b8      	ldr	r0, [r7, #24]
 8019742:	f000 fc69 	bl	801a018 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8019746:	f107 030c 	add.w	r3, r7, #12
 801974a:	2204      	movs	r2, #4
 801974c:	69b9      	ldr	r1, [r7, #24]
 801974e:	6878      	ldr	r0, [r7, #4]
 8019750:	f001 f8ee 	bl	801a930 <dhcp_create_msg>
 8019754:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019756:	697b      	ldr	r3, [r7, #20]
 8019758:	2b00      	cmp	r3, #0
 801975a:	d035      	beq.n	80197c8 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801975c:	697b      	ldr	r3, [r7, #20]
 801975e:	685b      	ldr	r3, [r3, #4]
 8019760:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8019762:	89b8      	ldrh	r0, [r7, #12]
 8019764:	693b      	ldr	r3, [r7, #16]
 8019766:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801976a:	2304      	movs	r3, #4
 801976c:	2232      	movs	r2, #50	@ 0x32
 801976e:	f000 fc6d 	bl	801a04c <dhcp_option>
 8019772:	4603      	mov	r3, r0
 8019774:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8019776:	89bc      	ldrh	r4, [r7, #12]
 8019778:	693b      	ldr	r3, [r7, #16]
 801977a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801977e:	69bb      	ldr	r3, [r7, #24]
 8019780:	69db      	ldr	r3, [r3, #28]
 8019782:	4618      	mov	r0, r3
 8019784:	f7f7 f9ce 	bl	8010b24 <lwip_htonl>
 8019788:	4603      	mov	r3, r0
 801978a:	461a      	mov	r2, r3
 801978c:	4629      	mov	r1, r5
 801978e:	4620      	mov	r0, r4
 8019790:	f000 fce8 	bl	801a164 <dhcp_option_long>
 8019794:	4603      	mov	r3, r0
 8019796:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019798:	89b8      	ldrh	r0, [r7, #12]
 801979a:	693b      	ldr	r3, [r7, #16]
 801979c:	33f0      	adds	r3, #240	@ 0xf0
 801979e:	697a      	ldr	r2, [r7, #20]
 80197a0:	4619      	mov	r1, r3
 80197a2:	f001 f99b 	bl	801aadc <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80197a6:	4b19      	ldr	r3, [pc, #100]	@ (801980c <dhcp_decline+0xdc>)
 80197a8:	6818      	ldr	r0, [r3, #0]
 80197aa:	4b19      	ldr	r3, [pc, #100]	@ (8019810 <dhcp_decline+0xe0>)
 80197ac:	9301      	str	r3, [sp, #4]
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	9300      	str	r3, [sp, #0]
 80197b2:	2343      	movs	r3, #67	@ 0x43
 80197b4:	4a17      	ldr	r2, [pc, #92]	@ (8019814 <dhcp_decline+0xe4>)
 80197b6:	6979      	ldr	r1, [r7, #20]
 80197b8:	f7ff f8a4 	bl	8018904 <udp_sendto_if_src>
 80197bc:	4603      	mov	r3, r0
 80197be:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80197c0:	6978      	ldr	r0, [r7, #20]
 80197c2:	f7f8 feed 	bl	80125a0 <pbuf_free>
 80197c6:	e001      	b.n	80197cc <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80197c8:	23ff      	movs	r3, #255	@ 0xff
 80197ca:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80197cc:	69bb      	ldr	r3, [r7, #24]
 80197ce:	799b      	ldrb	r3, [r3, #6]
 80197d0:	2bff      	cmp	r3, #255	@ 0xff
 80197d2:	d005      	beq.n	80197e0 <dhcp_decline+0xb0>
    dhcp->tries++;
 80197d4:	69bb      	ldr	r3, [r7, #24]
 80197d6:	799b      	ldrb	r3, [r3, #6]
 80197d8:	3301      	adds	r3, #1
 80197da:	b2da      	uxtb	r2, r3
 80197dc:	69bb      	ldr	r3, [r7, #24]
 80197de:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80197e0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80197e4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80197e6:	89fb      	ldrh	r3, [r7, #14]
 80197e8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80197ec:	4a0a      	ldr	r2, [pc, #40]	@ (8019818 <dhcp_decline+0xe8>)
 80197ee:	fb82 1203 	smull	r1, r2, r2, r3
 80197f2:	1152      	asrs	r2, r2, #5
 80197f4:	17db      	asrs	r3, r3, #31
 80197f6:	1ad3      	subs	r3, r2, r3
 80197f8:	b29a      	uxth	r2, r3
 80197fa:	69bb      	ldr	r3, [r7, #24]
 80197fc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80197fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019802:	4618      	mov	r0, r3
 8019804:	3720      	adds	r7, #32
 8019806:	46bd      	mov	sp, r7
 8019808:	bdb0      	pop	{r4, r5, r7, pc}
 801980a:	bf00      	nop
 801980c:	20004824 	.word	0x20004824
 8019810:	080236a0 	.word	0x080236a0
 8019814:	080236a4 	.word	0x080236a4
 8019818:	10624dd3 	.word	0x10624dd3

0801981c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801981c:	b580      	push	{r7, lr}
 801981e:	b08a      	sub	sp, #40	@ 0x28
 8019820:	af02      	add	r7, sp, #8
 8019822:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019828:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801982a:	2300      	movs	r3, #0
 801982c:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801982e:	69bb      	ldr	r3, [r7, #24]
 8019830:	2200      	movs	r2, #0
 8019832:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8019834:	2106      	movs	r1, #6
 8019836:	69b8      	ldr	r0, [r7, #24]
 8019838:	f000 fbee 	bl	801a018 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801983c:	f107 0308 	add.w	r3, r7, #8
 8019840:	2201      	movs	r2, #1
 8019842:	69b9      	ldr	r1, [r7, #24]
 8019844:	6878      	ldr	r0, [r7, #4]
 8019846:	f001 f873 	bl	801a930 <dhcp_create_msg>
 801984a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801984c:	693b      	ldr	r3, [r7, #16]
 801984e:	2b00      	cmp	r3, #0
 8019850:	d04b      	beq.n	80198ea <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019852:	693b      	ldr	r3, [r7, #16]
 8019854:	685b      	ldr	r3, [r3, #4]
 8019856:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019858:	8938      	ldrh	r0, [r7, #8]
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019860:	2302      	movs	r3, #2
 8019862:	2239      	movs	r2, #57	@ 0x39
 8019864:	f000 fbf2 	bl	801a04c <dhcp_option>
 8019868:	4603      	mov	r3, r0
 801986a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801986c:	8938      	ldrh	r0, [r7, #8]
 801986e:	68fb      	ldr	r3, [r7, #12]
 8019870:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8019878:	461a      	mov	r2, r3
 801987a:	f000 fc41 	bl	801a100 <dhcp_option_short>
 801987e:	4603      	mov	r3, r0
 8019880:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019882:	8938      	ldrh	r0, [r7, #8]
 8019884:	68fb      	ldr	r3, [r7, #12]
 8019886:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801988a:	2303      	movs	r3, #3
 801988c:	2237      	movs	r2, #55	@ 0x37
 801988e:	f000 fbdd 	bl	801a04c <dhcp_option>
 8019892:	4603      	mov	r3, r0
 8019894:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019896:	2300      	movs	r3, #0
 8019898:	77fb      	strb	r3, [r7, #31]
 801989a:	e00e      	b.n	80198ba <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801989c:	8938      	ldrh	r0, [r7, #8]
 801989e:	68fb      	ldr	r3, [r7, #12]
 80198a0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80198a4:	7ffb      	ldrb	r3, [r7, #31]
 80198a6:	4a29      	ldr	r2, [pc, #164]	@ (801994c <dhcp_discover+0x130>)
 80198a8:	5cd3      	ldrb	r3, [r2, r3]
 80198aa:	461a      	mov	r2, r3
 80198ac:	f000 fc02 	bl	801a0b4 <dhcp_option_byte>
 80198b0:	4603      	mov	r3, r0
 80198b2:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80198b4:	7ffb      	ldrb	r3, [r7, #31]
 80198b6:	3301      	adds	r3, #1
 80198b8:	77fb      	strb	r3, [r7, #31]
 80198ba:	7ffb      	ldrb	r3, [r7, #31]
 80198bc:	2b02      	cmp	r3, #2
 80198be:	d9ed      	bls.n	801989c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80198c0:	8938      	ldrh	r0, [r7, #8]
 80198c2:	68fb      	ldr	r3, [r7, #12]
 80198c4:	33f0      	adds	r3, #240	@ 0xf0
 80198c6:	693a      	ldr	r2, [r7, #16]
 80198c8:	4619      	mov	r1, r3
 80198ca:	f001 f907 	bl	801aadc <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80198ce:	4b20      	ldr	r3, [pc, #128]	@ (8019950 <dhcp_discover+0x134>)
 80198d0:	6818      	ldr	r0, [r3, #0]
 80198d2:	4b20      	ldr	r3, [pc, #128]	@ (8019954 <dhcp_discover+0x138>)
 80198d4:	9301      	str	r3, [sp, #4]
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	9300      	str	r3, [sp, #0]
 80198da:	2343      	movs	r3, #67	@ 0x43
 80198dc:	4a1e      	ldr	r2, [pc, #120]	@ (8019958 <dhcp_discover+0x13c>)
 80198de:	6939      	ldr	r1, [r7, #16]
 80198e0:	f7ff f810 	bl	8018904 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80198e4:	6938      	ldr	r0, [r7, #16]
 80198e6:	f7f8 fe5b 	bl	80125a0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80198ea:	69bb      	ldr	r3, [r7, #24]
 80198ec:	799b      	ldrb	r3, [r3, #6]
 80198ee:	2bff      	cmp	r3, #255	@ 0xff
 80198f0:	d005      	beq.n	80198fe <dhcp_discover+0xe2>
    dhcp->tries++;
 80198f2:	69bb      	ldr	r3, [r7, #24]
 80198f4:	799b      	ldrb	r3, [r3, #6]
 80198f6:	3301      	adds	r3, #1
 80198f8:	b2da      	uxtb	r2, r3
 80198fa:	69bb      	ldr	r3, [r7, #24]
 80198fc:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80198fe:	69bb      	ldr	r3, [r7, #24]
 8019900:	799b      	ldrb	r3, [r3, #6]
 8019902:	2b05      	cmp	r3, #5
 8019904:	d80d      	bhi.n	8019922 <dhcp_discover+0x106>
 8019906:	69bb      	ldr	r3, [r7, #24]
 8019908:	799b      	ldrb	r3, [r3, #6]
 801990a:	461a      	mov	r2, r3
 801990c:	2301      	movs	r3, #1
 801990e:	4093      	lsls	r3, r2
 8019910:	b29b      	uxth	r3, r3
 8019912:	461a      	mov	r2, r3
 8019914:	0152      	lsls	r2, r2, #5
 8019916:	1ad2      	subs	r2, r2, r3
 8019918:	0092      	lsls	r2, r2, #2
 801991a:	4413      	add	r3, r2
 801991c:	00db      	lsls	r3, r3, #3
 801991e:	b29b      	uxth	r3, r3
 8019920:	e001      	b.n	8019926 <dhcp_discover+0x10a>
 8019922:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8019926:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019928:	897b      	ldrh	r3, [r7, #10]
 801992a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801992e:	4a0b      	ldr	r2, [pc, #44]	@ (801995c <dhcp_discover+0x140>)
 8019930:	fb82 1203 	smull	r1, r2, r2, r3
 8019934:	1152      	asrs	r2, r2, #5
 8019936:	17db      	asrs	r3, r3, #31
 8019938:	1ad3      	subs	r3, r2, r3
 801993a:	b29a      	uxth	r2, r3
 801993c:	69bb      	ldr	r3, [r7, #24]
 801993e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019940:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019944:	4618      	mov	r0, r3
 8019946:	3720      	adds	r7, #32
 8019948:	46bd      	mov	sp, r7
 801994a:	bd80      	pop	{r7, pc}
 801994c:	200000c4 	.word	0x200000c4
 8019950:	20004824 	.word	0x20004824
 8019954:	080236a0 	.word	0x080236a0
 8019958:	080236a4 	.word	0x080236a4
 801995c:	10624dd3 	.word	0x10624dd3

08019960 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8019960:	b580      	push	{r7, lr}
 8019962:	b088      	sub	sp, #32
 8019964:	af00      	add	r7, sp, #0
 8019966:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	2b00      	cmp	r3, #0
 801996c:	d107      	bne.n	801997e <dhcp_bind+0x1e>
 801996e:	4b64      	ldr	r3, [pc, #400]	@ (8019b00 <dhcp_bind+0x1a0>)
 8019970:	f240 4215 	movw	r2, #1045	@ 0x415
 8019974:	4963      	ldr	r1, [pc, #396]	@ (8019b04 <dhcp_bind+0x1a4>)
 8019976:	4864      	ldr	r0, [pc, #400]	@ (8019b08 <dhcp_bind+0x1a8>)
 8019978:	f005 f832 	bl	801e9e0 <iprintf>
 801997c:	e0bc      	b.n	8019af8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019982:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8019984:	69bb      	ldr	r3, [r7, #24]
 8019986:	2b00      	cmp	r3, #0
 8019988:	d107      	bne.n	801999a <dhcp_bind+0x3a>
 801998a:	4b5d      	ldr	r3, [pc, #372]	@ (8019b00 <dhcp_bind+0x1a0>)
 801998c:	f240 4217 	movw	r2, #1047	@ 0x417
 8019990:	495e      	ldr	r1, [pc, #376]	@ (8019b0c <dhcp_bind+0x1ac>)
 8019992:	485d      	ldr	r0, [pc, #372]	@ (8019b08 <dhcp_bind+0x1a8>)
 8019994:	f005 f824 	bl	801e9e0 <iprintf>
 8019998:	e0ae      	b.n	8019af8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801999a:	69bb      	ldr	r3, [r7, #24]
 801999c:	2200      	movs	r2, #0
 801999e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80199a0:	69bb      	ldr	r3, [r7, #24]
 80199a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80199a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80199a8:	d019      	beq.n	80199de <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80199aa:	69bb      	ldr	r3, [r7, #24]
 80199ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80199ae:	331e      	adds	r3, #30
 80199b0:	4a57      	ldr	r2, [pc, #348]	@ (8019b10 <dhcp_bind+0x1b0>)
 80199b2:	fba2 2303 	umull	r2, r3, r2, r3
 80199b6:	095b      	lsrs	r3, r3, #5
 80199b8:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80199ba:	69fb      	ldr	r3, [r7, #28]
 80199bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80199c0:	d302      	bcc.n	80199c8 <dhcp_bind+0x68>
      timeout = 0xffff;
 80199c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80199c6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80199c8:	69fb      	ldr	r3, [r7, #28]
 80199ca:	b29a      	uxth	r2, r3
 80199cc:	69bb      	ldr	r3, [r7, #24]
 80199ce:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80199d0:	69bb      	ldr	r3, [r7, #24]
 80199d2:	8a9b      	ldrh	r3, [r3, #20]
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d102      	bne.n	80199de <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80199d8:	69bb      	ldr	r3, [r7, #24]
 80199da:	2201      	movs	r2, #1
 80199dc:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80199de:	69bb      	ldr	r3, [r7, #24]
 80199e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80199e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80199e6:	d01d      	beq.n	8019a24 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80199e8:	69bb      	ldr	r3, [r7, #24]
 80199ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80199ec:	331e      	adds	r3, #30
 80199ee:	4a48      	ldr	r2, [pc, #288]	@ (8019b10 <dhcp_bind+0x1b0>)
 80199f0:	fba2 2303 	umull	r2, r3, r2, r3
 80199f4:	095b      	lsrs	r3, r3, #5
 80199f6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80199f8:	69fb      	ldr	r3, [r7, #28]
 80199fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80199fe:	d302      	bcc.n	8019a06 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8019a00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019a04:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8019a06:	69fb      	ldr	r3, [r7, #28]
 8019a08:	b29a      	uxth	r2, r3
 8019a0a:	69bb      	ldr	r3, [r7, #24]
 8019a0c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8019a0e:	69bb      	ldr	r3, [r7, #24]
 8019a10:	895b      	ldrh	r3, [r3, #10]
 8019a12:	2b00      	cmp	r3, #0
 8019a14:	d102      	bne.n	8019a1c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8019a16:	69bb      	ldr	r3, [r7, #24]
 8019a18:	2201      	movs	r2, #1
 8019a1a:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8019a1c:	69bb      	ldr	r3, [r7, #24]
 8019a1e:	895a      	ldrh	r2, [r3, #10]
 8019a20:	69bb      	ldr	r3, [r7, #24]
 8019a22:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8019a24:	69bb      	ldr	r3, [r7, #24]
 8019a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019a28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019a2c:	d01d      	beq.n	8019a6a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8019a2e:	69bb      	ldr	r3, [r7, #24]
 8019a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019a32:	331e      	adds	r3, #30
 8019a34:	4a36      	ldr	r2, [pc, #216]	@ (8019b10 <dhcp_bind+0x1b0>)
 8019a36:	fba2 2303 	umull	r2, r3, r2, r3
 8019a3a:	095b      	lsrs	r3, r3, #5
 8019a3c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8019a3e:	69fb      	ldr	r3, [r7, #28]
 8019a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019a44:	d302      	bcc.n	8019a4c <dhcp_bind+0xec>
      timeout = 0xffff;
 8019a46:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019a4a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8019a4c:	69fb      	ldr	r3, [r7, #28]
 8019a4e:	b29a      	uxth	r2, r3
 8019a50:	69bb      	ldr	r3, [r7, #24]
 8019a52:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8019a54:	69bb      	ldr	r3, [r7, #24]
 8019a56:	899b      	ldrh	r3, [r3, #12]
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d102      	bne.n	8019a62 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8019a5c:	69bb      	ldr	r3, [r7, #24]
 8019a5e:	2201      	movs	r2, #1
 8019a60:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8019a62:	69bb      	ldr	r3, [r7, #24]
 8019a64:	899a      	ldrh	r2, [r3, #12]
 8019a66:	69bb      	ldr	r3, [r7, #24]
 8019a68:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8019a6a:	69bb      	ldr	r3, [r7, #24]
 8019a6c:	895a      	ldrh	r2, [r3, #10]
 8019a6e:	69bb      	ldr	r3, [r7, #24]
 8019a70:	899b      	ldrh	r3, [r3, #12]
 8019a72:	429a      	cmp	r2, r3
 8019a74:	d306      	bcc.n	8019a84 <dhcp_bind+0x124>
 8019a76:	69bb      	ldr	r3, [r7, #24]
 8019a78:	899b      	ldrh	r3, [r3, #12]
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d002      	beq.n	8019a84 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8019a7e:	69bb      	ldr	r3, [r7, #24]
 8019a80:	2200      	movs	r2, #0
 8019a82:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8019a84:	69bb      	ldr	r3, [r7, #24]
 8019a86:	79db      	ldrb	r3, [r3, #7]
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d003      	beq.n	8019a94 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8019a8c:	69bb      	ldr	r3, [r7, #24]
 8019a8e:	6a1b      	ldr	r3, [r3, #32]
 8019a90:	613b      	str	r3, [r7, #16]
 8019a92:	e014      	b.n	8019abe <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8019a94:	69bb      	ldr	r3, [r7, #24]
 8019a96:	331c      	adds	r3, #28
 8019a98:	781b      	ldrb	r3, [r3, #0]
 8019a9a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8019a9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	db02      	blt.n	8019aaa <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8019aa4:	23ff      	movs	r3, #255	@ 0xff
 8019aa6:	613b      	str	r3, [r7, #16]
 8019aa8:	e009      	b.n	8019abe <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8019aaa:	7dfb      	ldrb	r3, [r7, #23]
 8019aac:	2bbf      	cmp	r3, #191	@ 0xbf
 8019aae:	d903      	bls.n	8019ab8 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8019ab0:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8019ab4:	613b      	str	r3, [r7, #16]
 8019ab6:	e002      	b.n	8019abe <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8019ab8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019abc:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8019abe:	69bb      	ldr	r3, [r7, #24]
 8019ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ac2:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d108      	bne.n	8019adc <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8019aca:	69bb      	ldr	r3, [r7, #24]
 8019acc:	69da      	ldr	r2, [r3, #28]
 8019ace:	693b      	ldr	r3, [r7, #16]
 8019ad0:	4013      	ands	r3, r2
 8019ad2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8019ad4:	68fb      	ldr	r3, [r7, #12]
 8019ad6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8019ada:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8019adc:	210a      	movs	r1, #10
 8019ade:	69b8      	ldr	r0, [r7, #24]
 8019ae0:	f000 fa9a 	bl	801a018 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8019ae4:	69bb      	ldr	r3, [r7, #24]
 8019ae6:	f103 011c 	add.w	r1, r3, #28
 8019aea:	f107 030c 	add.w	r3, r7, #12
 8019aee:	f107 0210 	add.w	r2, r7, #16
 8019af2:	6878      	ldr	r0, [r7, #4]
 8019af4:	f7f8 f816 	bl	8011b24 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8019af8:	3720      	adds	r7, #32
 8019afa:	46bd      	mov	sp, r7
 8019afc:	bd80      	pop	{r7, pc}
 8019afe:	bf00      	nop
 8019b00:	080227b4 	.word	0x080227b4
 8019b04:	08022914 	.word	0x08022914
 8019b08:	08022814 	.word	0x08022814
 8019b0c:	08022930 	.word	0x08022930
 8019b10:	88888889 	.word	0x88888889

08019b14 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8019b14:	b580      	push	{r7, lr}
 8019b16:	b08a      	sub	sp, #40	@ 0x28
 8019b18:	af02      	add	r7, sp, #8
 8019b1a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b20:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8019b22:	2105      	movs	r1, #5
 8019b24:	69b8      	ldr	r0, [r7, #24]
 8019b26:	f000 fa77 	bl	801a018 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019b2a:	f107 030c 	add.w	r3, r7, #12
 8019b2e:	2203      	movs	r2, #3
 8019b30:	69b9      	ldr	r1, [r7, #24]
 8019b32:	6878      	ldr	r0, [r7, #4]
 8019b34:	f000 fefc 	bl	801a930 <dhcp_create_msg>
 8019b38:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019b3a:	697b      	ldr	r3, [r7, #20]
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	d04e      	beq.n	8019bde <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019b40:	697b      	ldr	r3, [r7, #20]
 8019b42:	685b      	ldr	r3, [r3, #4]
 8019b44:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019b46:	89b8      	ldrh	r0, [r7, #12]
 8019b48:	693b      	ldr	r3, [r7, #16]
 8019b4a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019b4e:	2302      	movs	r3, #2
 8019b50:	2239      	movs	r2, #57	@ 0x39
 8019b52:	f000 fa7b 	bl	801a04c <dhcp_option>
 8019b56:	4603      	mov	r3, r0
 8019b58:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8019b5a:	89b8      	ldrh	r0, [r7, #12]
 8019b5c:	693b      	ldr	r3, [r7, #16]
 8019b5e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8019b66:	461a      	mov	r2, r3
 8019b68:	f000 faca 	bl	801a100 <dhcp_option_short>
 8019b6c:	4603      	mov	r3, r0
 8019b6e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019b70:	89b8      	ldrh	r0, [r7, #12]
 8019b72:	693b      	ldr	r3, [r7, #16]
 8019b74:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019b78:	2303      	movs	r3, #3
 8019b7a:	2237      	movs	r2, #55	@ 0x37
 8019b7c:	f000 fa66 	bl	801a04c <dhcp_option>
 8019b80:	4603      	mov	r3, r0
 8019b82:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019b84:	2300      	movs	r3, #0
 8019b86:	77bb      	strb	r3, [r7, #30]
 8019b88:	e00e      	b.n	8019ba8 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019b8a:	89b8      	ldrh	r0, [r7, #12]
 8019b8c:	693b      	ldr	r3, [r7, #16]
 8019b8e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019b92:	7fbb      	ldrb	r3, [r7, #30]
 8019b94:	4a29      	ldr	r2, [pc, #164]	@ (8019c3c <dhcp_renew+0x128>)
 8019b96:	5cd3      	ldrb	r3, [r2, r3]
 8019b98:	461a      	mov	r2, r3
 8019b9a:	f000 fa8b 	bl	801a0b4 <dhcp_option_byte>
 8019b9e:	4603      	mov	r3, r0
 8019ba0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019ba2:	7fbb      	ldrb	r3, [r7, #30]
 8019ba4:	3301      	adds	r3, #1
 8019ba6:	77bb      	strb	r3, [r7, #30]
 8019ba8:	7fbb      	ldrb	r3, [r7, #30]
 8019baa:	2b02      	cmp	r3, #2
 8019bac:	d9ed      	bls.n	8019b8a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019bae:	89b8      	ldrh	r0, [r7, #12]
 8019bb0:	693b      	ldr	r3, [r7, #16]
 8019bb2:	33f0      	adds	r3, #240	@ 0xf0
 8019bb4:	697a      	ldr	r2, [r7, #20]
 8019bb6:	4619      	mov	r1, r3
 8019bb8:	f000 ff90 	bl	801aadc <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019bbc:	4b20      	ldr	r3, [pc, #128]	@ (8019c40 <dhcp_renew+0x12c>)
 8019bbe:	6818      	ldr	r0, [r3, #0]
 8019bc0:	69bb      	ldr	r3, [r7, #24]
 8019bc2:	f103 0218 	add.w	r2, r3, #24
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	9300      	str	r3, [sp, #0]
 8019bca:	2343      	movs	r3, #67	@ 0x43
 8019bcc:	6979      	ldr	r1, [r7, #20]
 8019bce:	f7fe fe25 	bl	801881c <udp_sendto_if>
 8019bd2:	4603      	mov	r3, r0
 8019bd4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019bd6:	6978      	ldr	r0, [r7, #20]
 8019bd8:	f7f8 fce2 	bl	80125a0 <pbuf_free>
 8019bdc:	e001      	b.n	8019be2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019bde:	23ff      	movs	r3, #255	@ 0xff
 8019be0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019be2:	69bb      	ldr	r3, [r7, #24]
 8019be4:	799b      	ldrb	r3, [r3, #6]
 8019be6:	2bff      	cmp	r3, #255	@ 0xff
 8019be8:	d005      	beq.n	8019bf6 <dhcp_renew+0xe2>
    dhcp->tries++;
 8019bea:	69bb      	ldr	r3, [r7, #24]
 8019bec:	799b      	ldrb	r3, [r3, #6]
 8019bee:	3301      	adds	r3, #1
 8019bf0:	b2da      	uxtb	r2, r3
 8019bf2:	69bb      	ldr	r3, [r7, #24]
 8019bf4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8019bf6:	69bb      	ldr	r3, [r7, #24]
 8019bf8:	799b      	ldrb	r3, [r3, #6]
 8019bfa:	2b09      	cmp	r3, #9
 8019bfc:	d809      	bhi.n	8019c12 <dhcp_renew+0xfe>
 8019bfe:	69bb      	ldr	r3, [r7, #24]
 8019c00:	799b      	ldrb	r3, [r3, #6]
 8019c02:	461a      	mov	r2, r3
 8019c04:	0152      	lsls	r2, r2, #5
 8019c06:	1ad2      	subs	r2, r2, r3
 8019c08:	0092      	lsls	r2, r2, #2
 8019c0a:	4413      	add	r3, r2
 8019c0c:	011b      	lsls	r3, r3, #4
 8019c0e:	b29b      	uxth	r3, r3
 8019c10:	e001      	b.n	8019c16 <dhcp_renew+0x102>
 8019c12:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8019c16:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019c18:	89fb      	ldrh	r3, [r7, #14]
 8019c1a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019c1e:	4a09      	ldr	r2, [pc, #36]	@ (8019c44 <dhcp_renew+0x130>)
 8019c20:	fb82 1203 	smull	r1, r2, r2, r3
 8019c24:	1152      	asrs	r2, r2, #5
 8019c26:	17db      	asrs	r3, r3, #31
 8019c28:	1ad3      	subs	r3, r2, r3
 8019c2a:	b29a      	uxth	r2, r3
 8019c2c:	69bb      	ldr	r3, [r7, #24]
 8019c2e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019c30:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019c34:	4618      	mov	r0, r3
 8019c36:	3720      	adds	r7, #32
 8019c38:	46bd      	mov	sp, r7
 8019c3a:	bd80      	pop	{r7, pc}
 8019c3c:	200000c4 	.word	0x200000c4
 8019c40:	20004824 	.word	0x20004824
 8019c44:	10624dd3 	.word	0x10624dd3

08019c48 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8019c48:	b580      	push	{r7, lr}
 8019c4a:	b08a      	sub	sp, #40	@ 0x28
 8019c4c:	af02      	add	r7, sp, #8
 8019c4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019c50:	687b      	ldr	r3, [r7, #4]
 8019c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019c54:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8019c56:	2104      	movs	r1, #4
 8019c58:	69b8      	ldr	r0, [r7, #24]
 8019c5a:	f000 f9dd 	bl	801a018 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019c5e:	f107 030c 	add.w	r3, r7, #12
 8019c62:	2203      	movs	r2, #3
 8019c64:	69b9      	ldr	r1, [r7, #24]
 8019c66:	6878      	ldr	r0, [r7, #4]
 8019c68:	f000 fe62 	bl	801a930 <dhcp_create_msg>
 8019c6c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019c6e:	697b      	ldr	r3, [r7, #20]
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d04c      	beq.n	8019d0e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019c74:	697b      	ldr	r3, [r7, #20]
 8019c76:	685b      	ldr	r3, [r3, #4]
 8019c78:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019c7a:	89b8      	ldrh	r0, [r7, #12]
 8019c7c:	693b      	ldr	r3, [r7, #16]
 8019c7e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019c82:	2302      	movs	r3, #2
 8019c84:	2239      	movs	r2, #57	@ 0x39
 8019c86:	f000 f9e1 	bl	801a04c <dhcp_option>
 8019c8a:	4603      	mov	r3, r0
 8019c8c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8019c8e:	89b8      	ldrh	r0, [r7, #12]
 8019c90:	693b      	ldr	r3, [r7, #16]
 8019c92:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8019c9a:	461a      	mov	r2, r3
 8019c9c:	f000 fa30 	bl	801a100 <dhcp_option_short>
 8019ca0:	4603      	mov	r3, r0
 8019ca2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019ca4:	89b8      	ldrh	r0, [r7, #12]
 8019ca6:	693b      	ldr	r3, [r7, #16]
 8019ca8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019cac:	2303      	movs	r3, #3
 8019cae:	2237      	movs	r2, #55	@ 0x37
 8019cb0:	f000 f9cc 	bl	801a04c <dhcp_option>
 8019cb4:	4603      	mov	r3, r0
 8019cb6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019cb8:	2300      	movs	r3, #0
 8019cba:	77bb      	strb	r3, [r7, #30]
 8019cbc:	e00e      	b.n	8019cdc <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019cbe:	89b8      	ldrh	r0, [r7, #12]
 8019cc0:	693b      	ldr	r3, [r7, #16]
 8019cc2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019cc6:	7fbb      	ldrb	r3, [r7, #30]
 8019cc8:	4a28      	ldr	r2, [pc, #160]	@ (8019d6c <dhcp_rebind+0x124>)
 8019cca:	5cd3      	ldrb	r3, [r2, r3]
 8019ccc:	461a      	mov	r2, r3
 8019cce:	f000 f9f1 	bl	801a0b4 <dhcp_option_byte>
 8019cd2:	4603      	mov	r3, r0
 8019cd4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019cd6:	7fbb      	ldrb	r3, [r7, #30]
 8019cd8:	3301      	adds	r3, #1
 8019cda:	77bb      	strb	r3, [r7, #30]
 8019cdc:	7fbb      	ldrb	r3, [r7, #30]
 8019cde:	2b02      	cmp	r3, #2
 8019ce0:	d9ed      	bls.n	8019cbe <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019ce2:	89b8      	ldrh	r0, [r7, #12]
 8019ce4:	693b      	ldr	r3, [r7, #16]
 8019ce6:	33f0      	adds	r3, #240	@ 0xf0
 8019ce8:	697a      	ldr	r2, [r7, #20]
 8019cea:	4619      	mov	r1, r3
 8019cec:	f000 fef6 	bl	801aadc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8019d70 <dhcp_rebind+0x128>)
 8019cf2:	6818      	ldr	r0, [r3, #0]
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	9300      	str	r3, [sp, #0]
 8019cf8:	2343      	movs	r3, #67	@ 0x43
 8019cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8019d74 <dhcp_rebind+0x12c>)
 8019cfc:	6979      	ldr	r1, [r7, #20]
 8019cfe:	f7fe fd8d 	bl	801881c <udp_sendto_if>
 8019d02:	4603      	mov	r3, r0
 8019d04:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019d06:	6978      	ldr	r0, [r7, #20]
 8019d08:	f7f8 fc4a 	bl	80125a0 <pbuf_free>
 8019d0c:	e001      	b.n	8019d12 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019d0e:	23ff      	movs	r3, #255	@ 0xff
 8019d10:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019d12:	69bb      	ldr	r3, [r7, #24]
 8019d14:	799b      	ldrb	r3, [r3, #6]
 8019d16:	2bff      	cmp	r3, #255	@ 0xff
 8019d18:	d005      	beq.n	8019d26 <dhcp_rebind+0xde>
    dhcp->tries++;
 8019d1a:	69bb      	ldr	r3, [r7, #24]
 8019d1c:	799b      	ldrb	r3, [r3, #6]
 8019d1e:	3301      	adds	r3, #1
 8019d20:	b2da      	uxtb	r2, r3
 8019d22:	69bb      	ldr	r3, [r7, #24]
 8019d24:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8019d26:	69bb      	ldr	r3, [r7, #24]
 8019d28:	799b      	ldrb	r3, [r3, #6]
 8019d2a:	2b09      	cmp	r3, #9
 8019d2c:	d809      	bhi.n	8019d42 <dhcp_rebind+0xfa>
 8019d2e:	69bb      	ldr	r3, [r7, #24]
 8019d30:	799b      	ldrb	r3, [r3, #6]
 8019d32:	461a      	mov	r2, r3
 8019d34:	0152      	lsls	r2, r2, #5
 8019d36:	1ad2      	subs	r2, r2, r3
 8019d38:	0092      	lsls	r2, r2, #2
 8019d3a:	4413      	add	r3, r2
 8019d3c:	00db      	lsls	r3, r3, #3
 8019d3e:	b29b      	uxth	r3, r3
 8019d40:	e001      	b.n	8019d46 <dhcp_rebind+0xfe>
 8019d42:	f242 7310 	movw	r3, #10000	@ 0x2710
 8019d46:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019d48:	89fb      	ldrh	r3, [r7, #14]
 8019d4a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8019d78 <dhcp_rebind+0x130>)
 8019d50:	fb82 1203 	smull	r1, r2, r2, r3
 8019d54:	1152      	asrs	r2, r2, #5
 8019d56:	17db      	asrs	r3, r3, #31
 8019d58:	1ad3      	subs	r3, r2, r3
 8019d5a:	b29a      	uxth	r2, r3
 8019d5c:	69bb      	ldr	r3, [r7, #24]
 8019d5e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019d60:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019d64:	4618      	mov	r0, r3
 8019d66:	3720      	adds	r7, #32
 8019d68:	46bd      	mov	sp, r7
 8019d6a:	bd80      	pop	{r7, pc}
 8019d6c:	200000c4 	.word	0x200000c4
 8019d70:	20004824 	.word	0x20004824
 8019d74:	080236a4 	.word	0x080236a4
 8019d78:	10624dd3 	.word	0x10624dd3

08019d7c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8019d7c:	b5b0      	push	{r4, r5, r7, lr}
 8019d7e:	b08a      	sub	sp, #40	@ 0x28
 8019d80:	af02      	add	r7, sp, #8
 8019d82:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019d88:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8019d8a:	2103      	movs	r1, #3
 8019d8c:	69b8      	ldr	r0, [r7, #24]
 8019d8e:	f000 f943 	bl	801a018 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019d92:	f107 030c 	add.w	r3, r7, #12
 8019d96:	2203      	movs	r2, #3
 8019d98:	69b9      	ldr	r1, [r7, #24]
 8019d9a:	6878      	ldr	r0, [r7, #4]
 8019d9c:	f000 fdc8 	bl	801a930 <dhcp_create_msg>
 8019da0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019da2:	697b      	ldr	r3, [r7, #20]
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	d066      	beq.n	8019e76 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019da8:	697b      	ldr	r3, [r7, #20]
 8019daa:	685b      	ldr	r3, [r3, #4]
 8019dac:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019dae:	89b8      	ldrh	r0, [r7, #12]
 8019db0:	693b      	ldr	r3, [r7, #16]
 8019db2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019db6:	2302      	movs	r3, #2
 8019db8:	2239      	movs	r2, #57	@ 0x39
 8019dba:	f000 f947 	bl	801a04c <dhcp_option>
 8019dbe:	4603      	mov	r3, r0
 8019dc0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8019dc2:	89b8      	ldrh	r0, [r7, #12]
 8019dc4:	693b      	ldr	r3, [r7, #16]
 8019dc6:	33f0      	adds	r3, #240	@ 0xf0
 8019dc8:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8019dcc:	4619      	mov	r1, r3
 8019dce:	f000 f997 	bl	801a100 <dhcp_option_short>
 8019dd2:	4603      	mov	r3, r0
 8019dd4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8019dd6:	89b8      	ldrh	r0, [r7, #12]
 8019dd8:	693b      	ldr	r3, [r7, #16]
 8019dda:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019dde:	2304      	movs	r3, #4
 8019de0:	2232      	movs	r2, #50	@ 0x32
 8019de2:	f000 f933 	bl	801a04c <dhcp_option>
 8019de6:	4603      	mov	r3, r0
 8019de8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8019dea:	89bc      	ldrh	r4, [r7, #12]
 8019dec:	693b      	ldr	r3, [r7, #16]
 8019dee:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8019df2:	69bb      	ldr	r3, [r7, #24]
 8019df4:	69db      	ldr	r3, [r3, #28]
 8019df6:	4618      	mov	r0, r3
 8019df8:	f7f6 fe94 	bl	8010b24 <lwip_htonl>
 8019dfc:	4603      	mov	r3, r0
 8019dfe:	461a      	mov	r2, r3
 8019e00:	4629      	mov	r1, r5
 8019e02:	4620      	mov	r0, r4
 8019e04:	f000 f9ae 	bl	801a164 <dhcp_option_long>
 8019e08:	4603      	mov	r3, r0
 8019e0a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019e0c:	89b8      	ldrh	r0, [r7, #12]
 8019e0e:	693b      	ldr	r3, [r7, #16]
 8019e10:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019e14:	2303      	movs	r3, #3
 8019e16:	2237      	movs	r2, #55	@ 0x37
 8019e18:	f000 f918 	bl	801a04c <dhcp_option>
 8019e1c:	4603      	mov	r3, r0
 8019e1e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019e20:	2300      	movs	r3, #0
 8019e22:	77bb      	strb	r3, [r7, #30]
 8019e24:	e00e      	b.n	8019e44 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019e26:	89b8      	ldrh	r0, [r7, #12]
 8019e28:	693b      	ldr	r3, [r7, #16]
 8019e2a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019e2e:	7fbb      	ldrb	r3, [r7, #30]
 8019e30:	4a28      	ldr	r2, [pc, #160]	@ (8019ed4 <dhcp_reboot+0x158>)
 8019e32:	5cd3      	ldrb	r3, [r2, r3]
 8019e34:	461a      	mov	r2, r3
 8019e36:	f000 f93d 	bl	801a0b4 <dhcp_option_byte>
 8019e3a:	4603      	mov	r3, r0
 8019e3c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019e3e:	7fbb      	ldrb	r3, [r7, #30]
 8019e40:	3301      	adds	r3, #1
 8019e42:	77bb      	strb	r3, [r7, #30]
 8019e44:	7fbb      	ldrb	r3, [r7, #30]
 8019e46:	2b02      	cmp	r3, #2
 8019e48:	d9ed      	bls.n	8019e26 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019e4a:	89b8      	ldrh	r0, [r7, #12]
 8019e4c:	693b      	ldr	r3, [r7, #16]
 8019e4e:	33f0      	adds	r3, #240	@ 0xf0
 8019e50:	697a      	ldr	r2, [r7, #20]
 8019e52:	4619      	mov	r1, r3
 8019e54:	f000 fe42 	bl	801aadc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019e58:	4b1f      	ldr	r3, [pc, #124]	@ (8019ed8 <dhcp_reboot+0x15c>)
 8019e5a:	6818      	ldr	r0, [r3, #0]
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	9300      	str	r3, [sp, #0]
 8019e60:	2343      	movs	r3, #67	@ 0x43
 8019e62:	4a1e      	ldr	r2, [pc, #120]	@ (8019edc <dhcp_reboot+0x160>)
 8019e64:	6979      	ldr	r1, [r7, #20]
 8019e66:	f7fe fcd9 	bl	801881c <udp_sendto_if>
 8019e6a:	4603      	mov	r3, r0
 8019e6c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019e6e:	6978      	ldr	r0, [r7, #20]
 8019e70:	f7f8 fb96 	bl	80125a0 <pbuf_free>
 8019e74:	e001      	b.n	8019e7a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019e76:	23ff      	movs	r3, #255	@ 0xff
 8019e78:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019e7a:	69bb      	ldr	r3, [r7, #24]
 8019e7c:	799b      	ldrb	r3, [r3, #6]
 8019e7e:	2bff      	cmp	r3, #255	@ 0xff
 8019e80:	d005      	beq.n	8019e8e <dhcp_reboot+0x112>
    dhcp->tries++;
 8019e82:	69bb      	ldr	r3, [r7, #24]
 8019e84:	799b      	ldrb	r3, [r3, #6]
 8019e86:	3301      	adds	r3, #1
 8019e88:	b2da      	uxtb	r2, r3
 8019e8a:	69bb      	ldr	r3, [r7, #24]
 8019e8c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8019e8e:	69bb      	ldr	r3, [r7, #24]
 8019e90:	799b      	ldrb	r3, [r3, #6]
 8019e92:	2b09      	cmp	r3, #9
 8019e94:	d809      	bhi.n	8019eaa <dhcp_reboot+0x12e>
 8019e96:	69bb      	ldr	r3, [r7, #24]
 8019e98:	799b      	ldrb	r3, [r3, #6]
 8019e9a:	461a      	mov	r2, r3
 8019e9c:	0152      	lsls	r2, r2, #5
 8019e9e:	1ad2      	subs	r2, r2, r3
 8019ea0:	0092      	lsls	r2, r2, #2
 8019ea2:	4413      	add	r3, r2
 8019ea4:	00db      	lsls	r3, r3, #3
 8019ea6:	b29b      	uxth	r3, r3
 8019ea8:	e001      	b.n	8019eae <dhcp_reboot+0x132>
 8019eaa:	f242 7310 	movw	r3, #10000	@ 0x2710
 8019eae:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019eb0:	89fb      	ldrh	r3, [r7, #14]
 8019eb2:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8019ee0 <dhcp_reboot+0x164>)
 8019eb8:	fb82 1203 	smull	r1, r2, r2, r3
 8019ebc:	1152      	asrs	r2, r2, #5
 8019ebe:	17db      	asrs	r3, r3, #31
 8019ec0:	1ad3      	subs	r3, r2, r3
 8019ec2:	b29a      	uxth	r2, r3
 8019ec4:	69bb      	ldr	r3, [r7, #24]
 8019ec6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019ec8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019ecc:	4618      	mov	r0, r3
 8019ece:	3720      	adds	r7, #32
 8019ed0:	46bd      	mov	sp, r7
 8019ed2:	bdb0      	pop	{r4, r5, r7, pc}
 8019ed4:	200000c4 	.word	0x200000c4
 8019ed8:	20004824 	.word	0x20004824
 8019edc:	080236a4 	.word	0x080236a4
 8019ee0:	10624dd3 	.word	0x10624dd3

08019ee4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8019ee4:	b5b0      	push	{r4, r5, r7, lr}
 8019ee6:	b08a      	sub	sp, #40	@ 0x28
 8019ee8:	af02      	add	r7, sp, #8
 8019eea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ef0:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8019ef2:	69fb      	ldr	r3, [r7, #28]
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	f000 8084 	beq.w	801a002 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8019efa:	69fb      	ldr	r3, [r7, #28]
 8019efc:	795b      	ldrb	r3, [r3, #5]
 8019efe:	2b00      	cmp	r3, #0
 8019f00:	f000 8081 	beq.w	801a006 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8019f04:	69fb      	ldr	r3, [r7, #28]
 8019f06:	699b      	ldr	r3, [r3, #24]
 8019f08:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8019f0a:	69fb      	ldr	r3, [r7, #28]
 8019f0c:	2200      	movs	r2, #0
 8019f0e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8019f10:	69fb      	ldr	r3, [r7, #28]
 8019f12:	2200      	movs	r2, #0
 8019f14:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8019f16:	69fb      	ldr	r3, [r7, #28]
 8019f18:	2200      	movs	r2, #0
 8019f1a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8019f1c:	69fb      	ldr	r3, [r7, #28]
 8019f1e:	2200      	movs	r2, #0
 8019f20:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8019f22:	69fb      	ldr	r3, [r7, #28]
 8019f24:	2200      	movs	r2, #0
 8019f26:	631a      	str	r2, [r3, #48]	@ 0x30
 8019f28:	69fb      	ldr	r3, [r7, #28]
 8019f2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019f2c:	69fb      	ldr	r3, [r7, #28]
 8019f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8019f30:	69fb      	ldr	r3, [r7, #28]
 8019f32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019f34:	69fb      	ldr	r3, [r7, #28]
 8019f36:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8019f38:	69fb      	ldr	r3, [r7, #28]
 8019f3a:	2200      	movs	r2, #0
 8019f3c:	829a      	strh	r2, [r3, #20]
 8019f3e:	69fb      	ldr	r3, [r7, #28]
 8019f40:	8a9a      	ldrh	r2, [r3, #20]
 8019f42:	69fb      	ldr	r3, [r7, #28]
 8019f44:	825a      	strh	r2, [r3, #18]
 8019f46:	69fb      	ldr	r3, [r7, #28]
 8019f48:	8a5a      	ldrh	r2, [r3, #18]
 8019f4a:	69fb      	ldr	r3, [r7, #28]
 8019f4c:	821a      	strh	r2, [r3, #16]
 8019f4e:	69fb      	ldr	r3, [r7, #28]
 8019f50:	8a1a      	ldrh	r2, [r3, #16]
 8019f52:	69fb      	ldr	r3, [r7, #28]
 8019f54:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8019f56:	6878      	ldr	r0, [r7, #4]
 8019f58:	f000 fdee 	bl	801ab38 <dhcp_supplied_address>
 8019f5c:	4603      	mov	r3, r0
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d03b      	beq.n	8019fda <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8019f62:	f107 030e 	add.w	r3, r7, #14
 8019f66:	2207      	movs	r2, #7
 8019f68:	69f9      	ldr	r1, [r7, #28]
 8019f6a:	6878      	ldr	r0, [r7, #4]
 8019f6c:	f000 fce0 	bl	801a930 <dhcp_create_msg>
 8019f70:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8019f72:	69bb      	ldr	r3, [r7, #24]
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	d030      	beq.n	8019fda <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019f78:	69bb      	ldr	r3, [r7, #24]
 8019f7a:	685b      	ldr	r3, [r3, #4]
 8019f7c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8019f7e:	89f8      	ldrh	r0, [r7, #14]
 8019f80:	697b      	ldr	r3, [r7, #20]
 8019f82:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019f86:	2304      	movs	r3, #4
 8019f88:	2236      	movs	r2, #54	@ 0x36
 8019f8a:	f000 f85f 	bl	801a04c <dhcp_option>
 8019f8e:	4603      	mov	r3, r0
 8019f90:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8019f92:	89fc      	ldrh	r4, [r7, #14]
 8019f94:	697b      	ldr	r3, [r7, #20]
 8019f96:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8019f9a:	693b      	ldr	r3, [r7, #16]
 8019f9c:	4618      	mov	r0, r3
 8019f9e:	f7f6 fdc1 	bl	8010b24 <lwip_htonl>
 8019fa2:	4603      	mov	r3, r0
 8019fa4:	461a      	mov	r2, r3
 8019fa6:	4629      	mov	r1, r5
 8019fa8:	4620      	mov	r0, r4
 8019faa:	f000 f8db 	bl	801a164 <dhcp_option_long>
 8019fae:	4603      	mov	r3, r0
 8019fb0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019fb2:	89f8      	ldrh	r0, [r7, #14]
 8019fb4:	697b      	ldr	r3, [r7, #20]
 8019fb6:	33f0      	adds	r3, #240	@ 0xf0
 8019fb8:	69ba      	ldr	r2, [r7, #24]
 8019fba:	4619      	mov	r1, r3
 8019fbc:	f000 fd8e 	bl	801aadc <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019fc0:	4b13      	ldr	r3, [pc, #76]	@ (801a010 <dhcp_release_and_stop+0x12c>)
 8019fc2:	6818      	ldr	r0, [r3, #0]
 8019fc4:	f107 0210 	add.w	r2, r7, #16
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	9300      	str	r3, [sp, #0]
 8019fcc:	2343      	movs	r3, #67	@ 0x43
 8019fce:	69b9      	ldr	r1, [r7, #24]
 8019fd0:	f7fe fc24 	bl	801881c <udp_sendto_if>
      pbuf_free(p_out);
 8019fd4:	69b8      	ldr	r0, [r7, #24]
 8019fd6:	f7f8 fae3 	bl	80125a0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8019fda:	4b0e      	ldr	r3, [pc, #56]	@ (801a014 <dhcp_release_and_stop+0x130>)
 8019fdc:	4a0d      	ldr	r2, [pc, #52]	@ (801a014 <dhcp_release_and_stop+0x130>)
 8019fde:	490d      	ldr	r1, [pc, #52]	@ (801a014 <dhcp_release_and_stop+0x130>)
 8019fe0:	6878      	ldr	r0, [r7, #4]
 8019fe2:	f7f7 fd9f 	bl	8011b24 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8019fe6:	2100      	movs	r1, #0
 8019fe8:	69f8      	ldr	r0, [r7, #28]
 8019fea:	f000 f815 	bl	801a018 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8019fee:	69fb      	ldr	r3, [r7, #28]
 8019ff0:	791b      	ldrb	r3, [r3, #4]
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	d008      	beq.n	801a008 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8019ff6:	f7fe ff89 	bl	8018f0c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8019ffa:	69fb      	ldr	r3, [r7, #28]
 8019ffc:	2200      	movs	r2, #0
 8019ffe:	711a      	strb	r2, [r3, #4]
 801a000:	e002      	b.n	801a008 <dhcp_release_and_stop+0x124>
    return;
 801a002:	bf00      	nop
 801a004:	e000      	b.n	801a008 <dhcp_release_and_stop+0x124>
    return;
 801a006:	bf00      	nop
  }
}
 801a008:	3720      	adds	r7, #32
 801a00a:	46bd      	mov	sp, r7
 801a00c:	bdb0      	pop	{r4, r5, r7, pc}
 801a00e:	bf00      	nop
 801a010:	20004824 	.word	0x20004824
 801a014:	080236a0 	.word	0x080236a0

0801a018 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801a018:	b480      	push	{r7}
 801a01a:	b083      	sub	sp, #12
 801a01c:	af00      	add	r7, sp, #0
 801a01e:	6078      	str	r0, [r7, #4]
 801a020:	460b      	mov	r3, r1
 801a022:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	795b      	ldrb	r3, [r3, #5]
 801a028:	78fa      	ldrb	r2, [r7, #3]
 801a02a:	429a      	cmp	r2, r3
 801a02c:	d008      	beq.n	801a040 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	78fa      	ldrb	r2, [r7, #3]
 801a032:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	2200      	movs	r2, #0
 801a038:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	2200      	movs	r2, #0
 801a03e:	811a      	strh	r2, [r3, #8]
  }
}
 801a040:	bf00      	nop
 801a042:	370c      	adds	r7, #12
 801a044:	46bd      	mov	sp, r7
 801a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a04a:	4770      	bx	lr

0801a04c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801a04c:	b580      	push	{r7, lr}
 801a04e:	b082      	sub	sp, #8
 801a050:	af00      	add	r7, sp, #0
 801a052:	6039      	str	r1, [r7, #0]
 801a054:	4611      	mov	r1, r2
 801a056:	461a      	mov	r2, r3
 801a058:	4603      	mov	r3, r0
 801a05a:	80fb      	strh	r3, [r7, #6]
 801a05c:	460b      	mov	r3, r1
 801a05e:	717b      	strb	r3, [r7, #5]
 801a060:	4613      	mov	r3, r2
 801a062:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801a064:	88fa      	ldrh	r2, [r7, #6]
 801a066:	793b      	ldrb	r3, [r7, #4]
 801a068:	4413      	add	r3, r2
 801a06a:	3302      	adds	r3, #2
 801a06c:	2b44      	cmp	r3, #68	@ 0x44
 801a06e:	d906      	bls.n	801a07e <dhcp_option+0x32>
 801a070:	4b0d      	ldr	r3, [pc, #52]	@ (801a0a8 <dhcp_option+0x5c>)
 801a072:	f240 529a 	movw	r2, #1434	@ 0x59a
 801a076:	490d      	ldr	r1, [pc, #52]	@ (801a0ac <dhcp_option+0x60>)
 801a078:	480d      	ldr	r0, [pc, #52]	@ (801a0b0 <dhcp_option+0x64>)
 801a07a:	f004 fcb1 	bl	801e9e0 <iprintf>
  options[options_out_len++] = option_type;
 801a07e:	88fb      	ldrh	r3, [r7, #6]
 801a080:	1c5a      	adds	r2, r3, #1
 801a082:	80fa      	strh	r2, [r7, #6]
 801a084:	461a      	mov	r2, r3
 801a086:	683b      	ldr	r3, [r7, #0]
 801a088:	4413      	add	r3, r2
 801a08a:	797a      	ldrb	r2, [r7, #5]
 801a08c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801a08e:	88fb      	ldrh	r3, [r7, #6]
 801a090:	1c5a      	adds	r2, r3, #1
 801a092:	80fa      	strh	r2, [r7, #6]
 801a094:	461a      	mov	r2, r3
 801a096:	683b      	ldr	r3, [r7, #0]
 801a098:	4413      	add	r3, r2
 801a09a:	793a      	ldrb	r2, [r7, #4]
 801a09c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801a09e:	88fb      	ldrh	r3, [r7, #6]
}
 801a0a0:	4618      	mov	r0, r3
 801a0a2:	3708      	adds	r7, #8
 801a0a4:	46bd      	mov	sp, r7
 801a0a6:	bd80      	pop	{r7, pc}
 801a0a8:	080227b4 	.word	0x080227b4
 801a0ac:	08022948 	.word	0x08022948
 801a0b0:	08022814 	.word	0x08022814

0801a0b4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801a0b4:	b580      	push	{r7, lr}
 801a0b6:	b082      	sub	sp, #8
 801a0b8:	af00      	add	r7, sp, #0
 801a0ba:	4603      	mov	r3, r0
 801a0bc:	6039      	str	r1, [r7, #0]
 801a0be:	80fb      	strh	r3, [r7, #6]
 801a0c0:	4613      	mov	r3, r2
 801a0c2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801a0c4:	88fb      	ldrh	r3, [r7, #6]
 801a0c6:	2b43      	cmp	r3, #67	@ 0x43
 801a0c8:	d906      	bls.n	801a0d8 <dhcp_option_byte+0x24>
 801a0ca:	4b0a      	ldr	r3, [pc, #40]	@ (801a0f4 <dhcp_option_byte+0x40>)
 801a0cc:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 801a0d0:	4909      	ldr	r1, [pc, #36]	@ (801a0f8 <dhcp_option_byte+0x44>)
 801a0d2:	480a      	ldr	r0, [pc, #40]	@ (801a0fc <dhcp_option_byte+0x48>)
 801a0d4:	f004 fc84 	bl	801e9e0 <iprintf>
  options[options_out_len++] = value;
 801a0d8:	88fb      	ldrh	r3, [r7, #6]
 801a0da:	1c5a      	adds	r2, r3, #1
 801a0dc:	80fa      	strh	r2, [r7, #6]
 801a0de:	461a      	mov	r2, r3
 801a0e0:	683b      	ldr	r3, [r7, #0]
 801a0e2:	4413      	add	r3, r2
 801a0e4:	797a      	ldrb	r2, [r7, #5]
 801a0e6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801a0e8:	88fb      	ldrh	r3, [r7, #6]
}
 801a0ea:	4618      	mov	r0, r3
 801a0ec:	3708      	adds	r7, #8
 801a0ee:	46bd      	mov	sp, r7
 801a0f0:	bd80      	pop	{r7, pc}
 801a0f2:	bf00      	nop
 801a0f4:	080227b4 	.word	0x080227b4
 801a0f8:	0802298c 	.word	0x0802298c
 801a0fc:	08022814 	.word	0x08022814

0801a100 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801a100:	b580      	push	{r7, lr}
 801a102:	b082      	sub	sp, #8
 801a104:	af00      	add	r7, sp, #0
 801a106:	4603      	mov	r3, r0
 801a108:	6039      	str	r1, [r7, #0]
 801a10a:	80fb      	strh	r3, [r7, #6]
 801a10c:	4613      	mov	r3, r2
 801a10e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801a110:	88fb      	ldrh	r3, [r7, #6]
 801a112:	3302      	adds	r3, #2
 801a114:	2b44      	cmp	r3, #68	@ 0x44
 801a116:	d906      	bls.n	801a126 <dhcp_option_short+0x26>
 801a118:	4b0f      	ldr	r3, [pc, #60]	@ (801a158 <dhcp_option_short+0x58>)
 801a11a:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 801a11e:	490f      	ldr	r1, [pc, #60]	@ (801a15c <dhcp_option_short+0x5c>)
 801a120:	480f      	ldr	r0, [pc, #60]	@ (801a160 <dhcp_option_short+0x60>)
 801a122:	f004 fc5d 	bl	801e9e0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801a126:	88bb      	ldrh	r3, [r7, #4]
 801a128:	0a1b      	lsrs	r3, r3, #8
 801a12a:	b29a      	uxth	r2, r3
 801a12c:	88fb      	ldrh	r3, [r7, #6]
 801a12e:	1c59      	adds	r1, r3, #1
 801a130:	80f9      	strh	r1, [r7, #6]
 801a132:	4619      	mov	r1, r3
 801a134:	683b      	ldr	r3, [r7, #0]
 801a136:	440b      	add	r3, r1
 801a138:	b2d2      	uxtb	r2, r2
 801a13a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801a13c:	88fb      	ldrh	r3, [r7, #6]
 801a13e:	1c5a      	adds	r2, r3, #1
 801a140:	80fa      	strh	r2, [r7, #6]
 801a142:	461a      	mov	r2, r3
 801a144:	683b      	ldr	r3, [r7, #0]
 801a146:	4413      	add	r3, r2
 801a148:	88ba      	ldrh	r2, [r7, #4]
 801a14a:	b2d2      	uxtb	r2, r2
 801a14c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801a14e:	88fb      	ldrh	r3, [r7, #6]
}
 801a150:	4618      	mov	r0, r3
 801a152:	3708      	adds	r7, #8
 801a154:	46bd      	mov	sp, r7
 801a156:	bd80      	pop	{r7, pc}
 801a158:	080227b4 	.word	0x080227b4
 801a15c:	080229c4 	.word	0x080229c4
 801a160:	08022814 	.word	0x08022814

0801a164 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801a164:	b580      	push	{r7, lr}
 801a166:	b084      	sub	sp, #16
 801a168:	af00      	add	r7, sp, #0
 801a16a:	4603      	mov	r3, r0
 801a16c:	60b9      	str	r1, [r7, #8]
 801a16e:	607a      	str	r2, [r7, #4]
 801a170:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801a172:	89fb      	ldrh	r3, [r7, #14]
 801a174:	3304      	adds	r3, #4
 801a176:	2b44      	cmp	r3, #68	@ 0x44
 801a178:	d906      	bls.n	801a188 <dhcp_option_long+0x24>
 801a17a:	4b19      	ldr	r3, [pc, #100]	@ (801a1e0 <dhcp_option_long+0x7c>)
 801a17c:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 801a180:	4918      	ldr	r1, [pc, #96]	@ (801a1e4 <dhcp_option_long+0x80>)
 801a182:	4819      	ldr	r0, [pc, #100]	@ (801a1e8 <dhcp_option_long+0x84>)
 801a184:	f004 fc2c 	bl	801e9e0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	0e1a      	lsrs	r2, r3, #24
 801a18c:	89fb      	ldrh	r3, [r7, #14]
 801a18e:	1c59      	adds	r1, r3, #1
 801a190:	81f9      	strh	r1, [r7, #14]
 801a192:	4619      	mov	r1, r3
 801a194:	68bb      	ldr	r3, [r7, #8]
 801a196:	440b      	add	r3, r1
 801a198:	b2d2      	uxtb	r2, r2
 801a19a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	0c1a      	lsrs	r2, r3, #16
 801a1a0:	89fb      	ldrh	r3, [r7, #14]
 801a1a2:	1c59      	adds	r1, r3, #1
 801a1a4:	81f9      	strh	r1, [r7, #14]
 801a1a6:	4619      	mov	r1, r3
 801a1a8:	68bb      	ldr	r3, [r7, #8]
 801a1aa:	440b      	add	r3, r1
 801a1ac:	b2d2      	uxtb	r2, r2
 801a1ae:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	0a1a      	lsrs	r2, r3, #8
 801a1b4:	89fb      	ldrh	r3, [r7, #14]
 801a1b6:	1c59      	adds	r1, r3, #1
 801a1b8:	81f9      	strh	r1, [r7, #14]
 801a1ba:	4619      	mov	r1, r3
 801a1bc:	68bb      	ldr	r3, [r7, #8]
 801a1be:	440b      	add	r3, r1
 801a1c0:	b2d2      	uxtb	r2, r2
 801a1c2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801a1c4:	89fb      	ldrh	r3, [r7, #14]
 801a1c6:	1c5a      	adds	r2, r3, #1
 801a1c8:	81fa      	strh	r2, [r7, #14]
 801a1ca:	461a      	mov	r2, r3
 801a1cc:	68bb      	ldr	r3, [r7, #8]
 801a1ce:	4413      	add	r3, r2
 801a1d0:	687a      	ldr	r2, [r7, #4]
 801a1d2:	b2d2      	uxtb	r2, r2
 801a1d4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801a1d6:	89fb      	ldrh	r3, [r7, #14]
}
 801a1d8:	4618      	mov	r0, r3
 801a1da:	3710      	adds	r7, #16
 801a1dc:	46bd      	mov	sp, r7
 801a1de:	bd80      	pop	{r7, pc}
 801a1e0:	080227b4 	.word	0x080227b4
 801a1e4:	08022a00 	.word	0x08022a00
 801a1e8:	08022814 	.word	0x08022814

0801a1ec <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801a1ec:	b580      	push	{r7, lr}
 801a1ee:	b090      	sub	sp, #64	@ 0x40
 801a1f0:	af00      	add	r7, sp, #0
 801a1f2:	6078      	str	r0, [r7, #4]
 801a1f4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801a1f6:	2300      	movs	r3, #0
 801a1f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801a1fe:	2208      	movs	r2, #8
 801a200:	2100      	movs	r1, #0
 801a202:	48b5      	ldr	r0, [pc, #724]	@ (801a4d8 <dhcp_parse_reply+0x2ec>)
 801a204:	f004 fdbc 	bl	801ed80 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	895b      	ldrh	r3, [r3, #10]
 801a20c:	2b2b      	cmp	r3, #43	@ 0x2b
 801a20e:	d802      	bhi.n	801a216 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801a210:	f06f 0301 	mvn.w	r3, #1
 801a214:	e2a7      	b.n	801a766 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801a216:	687b      	ldr	r3, [r7, #4]
 801a218:	685b      	ldr	r3, [r3, #4]
 801a21a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801a21c:	23f0      	movs	r3, #240	@ 0xf0
 801a21e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	891b      	ldrh	r3, [r3, #8]
 801a224:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801a22a:	e00c      	b.n	801a246 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801a22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a22e:	895b      	ldrh	r3, [r3, #10]
 801a230:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801a232:	1ad3      	subs	r3, r2, r3
 801a234:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801a236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a238:	895b      	ldrh	r3, [r3, #10]
 801a23a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 801a23c:	1ad3      	subs	r3, r2, r3
 801a23e:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 801a240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a242:	681b      	ldr	r3, [r3, #0]
 801a244:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801a246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d004      	beq.n	801a256 <dhcp_parse_reply+0x6a>
 801a24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a24e:	895b      	ldrh	r3, [r3, #10]
 801a250:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801a252:	429a      	cmp	r2, r3
 801a254:	d2ea      	bcs.n	801a22c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801a256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a258:	2b00      	cmp	r3, #0
 801a25a:	d102      	bne.n	801a262 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801a25c:	f06f 0301 	mvn.w	r3, #1
 801a260:	e281      	b.n	801a766 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801a262:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801a264:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 801a266:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801a268:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 801a26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a26c:	685b      	ldr	r3, [r3, #4]
 801a26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801a270:	e239      	b.n	801a6e6 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801a272:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a274:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a276:	4413      	add	r3, r2
 801a278:	781b      	ldrb	r3, [r3, #0]
 801a27a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801a27c:	2300      	movs	r3, #0
 801a27e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 801a282:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a286:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801a288:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a28a:	3302      	adds	r3, #2
 801a28c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801a28e:	8bfa      	ldrh	r2, [r7, #30]
 801a290:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a292:	429a      	cmp	r2, r3
 801a294:	d202      	bcs.n	801a29c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801a296:	f06f 0301 	mvn.w	r3, #1
 801a29a:	e264      	b.n	801a766 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801a29c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a29e:	3301      	adds	r3, #1
 801a2a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a2a2:	8952      	ldrh	r2, [r2, #10]
 801a2a4:	4293      	cmp	r3, r2
 801a2a6:	da07      	bge.n	801a2b8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801a2a8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a2aa:	3301      	adds	r3, #1
 801a2ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a2ae:	4413      	add	r3, r2
 801a2b0:	781b      	ldrb	r3, [r3, #0]
 801a2b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a2b6:	e00b      	b.n	801a2d0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801a2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2ba:	681b      	ldr	r3, [r3, #0]
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	d004      	beq.n	801a2ca <dhcp_parse_reply+0xde>
 801a2c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	685b      	ldr	r3, [r3, #4]
 801a2c6:	781b      	ldrb	r3, [r3, #0]
 801a2c8:	e000      	b.n	801a2cc <dhcp_parse_reply+0xe0>
 801a2ca:	2300      	movs	r3, #0
 801a2cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801a2d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a2d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 801a2d8:	7dfb      	ldrb	r3, [r7, #23]
 801a2da:	2b3b      	cmp	r3, #59	@ 0x3b
 801a2dc:	f200 812c 	bhi.w	801a538 <dhcp_parse_reply+0x34c>
 801a2e0:	a201      	add	r2, pc, #4	@ (adr r2, 801a2e8 <dhcp_parse_reply+0xfc>)
 801a2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a2e6:	bf00      	nop
 801a2e8:	0801a3d9 	.word	0x0801a3d9
 801a2ec:	0801a3e9 	.word	0x0801a3e9
 801a2f0:	0801a539 	.word	0x0801a539
 801a2f4:	0801a40b 	.word	0x0801a40b
 801a2f8:	0801a539 	.word	0x0801a539
 801a2fc:	0801a539 	.word	0x0801a539
 801a300:	0801a539 	.word	0x0801a539
 801a304:	0801a539 	.word	0x0801a539
 801a308:	0801a539 	.word	0x0801a539
 801a30c:	0801a539 	.word	0x0801a539
 801a310:	0801a539 	.word	0x0801a539
 801a314:	0801a539 	.word	0x0801a539
 801a318:	0801a539 	.word	0x0801a539
 801a31c:	0801a539 	.word	0x0801a539
 801a320:	0801a539 	.word	0x0801a539
 801a324:	0801a539 	.word	0x0801a539
 801a328:	0801a539 	.word	0x0801a539
 801a32c:	0801a539 	.word	0x0801a539
 801a330:	0801a539 	.word	0x0801a539
 801a334:	0801a539 	.word	0x0801a539
 801a338:	0801a539 	.word	0x0801a539
 801a33c:	0801a539 	.word	0x0801a539
 801a340:	0801a539 	.word	0x0801a539
 801a344:	0801a539 	.word	0x0801a539
 801a348:	0801a539 	.word	0x0801a539
 801a34c:	0801a539 	.word	0x0801a539
 801a350:	0801a539 	.word	0x0801a539
 801a354:	0801a539 	.word	0x0801a539
 801a358:	0801a539 	.word	0x0801a539
 801a35c:	0801a539 	.word	0x0801a539
 801a360:	0801a539 	.word	0x0801a539
 801a364:	0801a539 	.word	0x0801a539
 801a368:	0801a539 	.word	0x0801a539
 801a36c:	0801a539 	.word	0x0801a539
 801a370:	0801a539 	.word	0x0801a539
 801a374:	0801a539 	.word	0x0801a539
 801a378:	0801a539 	.word	0x0801a539
 801a37c:	0801a539 	.word	0x0801a539
 801a380:	0801a539 	.word	0x0801a539
 801a384:	0801a539 	.word	0x0801a539
 801a388:	0801a539 	.word	0x0801a539
 801a38c:	0801a539 	.word	0x0801a539
 801a390:	0801a539 	.word	0x0801a539
 801a394:	0801a539 	.word	0x0801a539
 801a398:	0801a539 	.word	0x0801a539
 801a39c:	0801a539 	.word	0x0801a539
 801a3a0:	0801a539 	.word	0x0801a539
 801a3a4:	0801a539 	.word	0x0801a539
 801a3a8:	0801a539 	.word	0x0801a539
 801a3ac:	0801a539 	.word	0x0801a539
 801a3b0:	0801a539 	.word	0x0801a539
 801a3b4:	0801a437 	.word	0x0801a437
 801a3b8:	0801a459 	.word	0x0801a459
 801a3bc:	0801a495 	.word	0x0801a495
 801a3c0:	0801a4b7 	.word	0x0801a4b7
 801a3c4:	0801a539 	.word	0x0801a539
 801a3c8:	0801a539 	.word	0x0801a539
 801a3cc:	0801a539 	.word	0x0801a539
 801a3d0:	0801a4f5 	.word	0x0801a4f5
 801a3d4:	0801a517 	.word	0x0801a517
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801a3d8:	2300      	movs	r3, #0
 801a3da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a3de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a3e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 801a3e6:	e0ab      	b.n	801a540 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a3e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a3ec:	2b04      	cmp	r3, #4
 801a3ee:	d009      	beq.n	801a404 <dhcp_parse_reply+0x218>
 801a3f0:	4b3a      	ldr	r3, [pc, #232]	@ (801a4dc <dhcp_parse_reply+0x2f0>)
 801a3f2:	f240 622e 	movw	r2, #1582	@ 0x62e
 801a3f6:	493a      	ldr	r1, [pc, #232]	@ (801a4e0 <dhcp_parse_reply+0x2f4>)
 801a3f8:	483a      	ldr	r0, [pc, #232]	@ (801a4e4 <dhcp_parse_reply+0x2f8>)
 801a3fa:	f004 faf1 	bl	801e9e0 <iprintf>
 801a3fe:	f06f 0305 	mvn.w	r3, #5
 801a402:	e1b0      	b.n	801a766 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801a404:	2306      	movs	r3, #6
 801a406:	623b      	str	r3, [r7, #32]
        break;
 801a408:	e09a      	b.n	801a540 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801a40a:	2304      	movs	r3, #4
 801a40c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801a410:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801a414:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a418:	429a      	cmp	r2, r3
 801a41a:	d209      	bcs.n	801a430 <dhcp_parse_reply+0x244>
 801a41c:	4b2f      	ldr	r3, [pc, #188]	@ (801a4dc <dhcp_parse_reply+0x2f0>)
 801a41e:	f240 6233 	movw	r2, #1587	@ 0x633
 801a422:	4931      	ldr	r1, [pc, #196]	@ (801a4e8 <dhcp_parse_reply+0x2fc>)
 801a424:	482f      	ldr	r0, [pc, #188]	@ (801a4e4 <dhcp_parse_reply+0x2f8>)
 801a426:	f004 fadb 	bl	801e9e0 <iprintf>
 801a42a:	f06f 0305 	mvn.w	r3, #5
 801a42e:	e19a      	b.n	801a766 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801a430:	2307      	movs	r3, #7
 801a432:	623b      	str	r3, [r7, #32]
        break;
 801a434:	e084      	b.n	801a540 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a436:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a43a:	2b04      	cmp	r3, #4
 801a43c:	d009      	beq.n	801a452 <dhcp_parse_reply+0x266>
 801a43e:	4b27      	ldr	r3, [pc, #156]	@ (801a4dc <dhcp_parse_reply+0x2f0>)
 801a440:	f240 6241 	movw	r2, #1601	@ 0x641
 801a444:	4926      	ldr	r1, [pc, #152]	@ (801a4e0 <dhcp_parse_reply+0x2f4>)
 801a446:	4827      	ldr	r0, [pc, #156]	@ (801a4e4 <dhcp_parse_reply+0x2f8>)
 801a448:	f004 faca 	bl	801e9e0 <iprintf>
 801a44c:	f06f 0305 	mvn.w	r3, #5
 801a450:	e189      	b.n	801a766 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801a452:	2303      	movs	r3, #3
 801a454:	623b      	str	r3, [r7, #32]
        break;
 801a456:	e073      	b.n	801a540 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801a458:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a45c:	2b01      	cmp	r3, #1
 801a45e:	d009      	beq.n	801a474 <dhcp_parse_reply+0x288>
 801a460:	4b1e      	ldr	r3, [pc, #120]	@ (801a4dc <dhcp_parse_reply+0x2f0>)
 801a462:	f240 624f 	movw	r2, #1615	@ 0x64f
 801a466:	4921      	ldr	r1, [pc, #132]	@ (801a4ec <dhcp_parse_reply+0x300>)
 801a468:	481e      	ldr	r0, [pc, #120]	@ (801a4e4 <dhcp_parse_reply+0x2f8>)
 801a46a:	f004 fab9 	bl	801e9e0 <iprintf>
 801a46e:	f06f 0305 	mvn.w	r3, #5
 801a472:	e178      	b.n	801a766 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801a474:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801a476:	2bf0      	cmp	r3, #240	@ 0xf0
 801a478:	d009      	beq.n	801a48e <dhcp_parse_reply+0x2a2>
 801a47a:	4b18      	ldr	r3, [pc, #96]	@ (801a4dc <dhcp_parse_reply+0x2f0>)
 801a47c:	f240 6251 	movw	r2, #1617	@ 0x651
 801a480:	491b      	ldr	r1, [pc, #108]	@ (801a4f0 <dhcp_parse_reply+0x304>)
 801a482:	4818      	ldr	r0, [pc, #96]	@ (801a4e4 <dhcp_parse_reply+0x2f8>)
 801a484:	f004 faac 	bl	801e9e0 <iprintf>
 801a488:	f06f 0305 	mvn.w	r3, #5
 801a48c:	e16b      	b.n	801a766 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801a48e:	2300      	movs	r3, #0
 801a490:	623b      	str	r3, [r7, #32]
        break;
 801a492:	e055      	b.n	801a540 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801a494:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a498:	2b01      	cmp	r3, #1
 801a49a:	d009      	beq.n	801a4b0 <dhcp_parse_reply+0x2c4>
 801a49c:	4b0f      	ldr	r3, [pc, #60]	@ (801a4dc <dhcp_parse_reply+0x2f0>)
 801a49e:	f240 6255 	movw	r2, #1621	@ 0x655
 801a4a2:	4912      	ldr	r1, [pc, #72]	@ (801a4ec <dhcp_parse_reply+0x300>)
 801a4a4:	480f      	ldr	r0, [pc, #60]	@ (801a4e4 <dhcp_parse_reply+0x2f8>)
 801a4a6:	f004 fa9b 	bl	801e9e0 <iprintf>
 801a4aa:	f06f 0305 	mvn.w	r3, #5
 801a4ae:	e15a      	b.n	801a766 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801a4b0:	2301      	movs	r3, #1
 801a4b2:	623b      	str	r3, [r7, #32]
        break;
 801a4b4:	e044      	b.n	801a540 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a4b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a4ba:	2b04      	cmp	r3, #4
 801a4bc:	d009      	beq.n	801a4d2 <dhcp_parse_reply+0x2e6>
 801a4be:	4b07      	ldr	r3, [pc, #28]	@ (801a4dc <dhcp_parse_reply+0x2f0>)
 801a4c0:	f240 6259 	movw	r2, #1625	@ 0x659
 801a4c4:	4906      	ldr	r1, [pc, #24]	@ (801a4e0 <dhcp_parse_reply+0x2f4>)
 801a4c6:	4807      	ldr	r0, [pc, #28]	@ (801a4e4 <dhcp_parse_reply+0x2f8>)
 801a4c8:	f004 fa8a 	bl	801e9e0 <iprintf>
 801a4cc:	f06f 0305 	mvn.w	r3, #5
 801a4d0:	e149      	b.n	801a766 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801a4d2:	2302      	movs	r3, #2
 801a4d4:	623b      	str	r3, [r7, #32]
        break;
 801a4d6:	e033      	b.n	801a540 <dhcp_parse_reply+0x354>
 801a4d8:	2000481c 	.word	0x2000481c
 801a4dc:	080227b4 	.word	0x080227b4
 801a4e0:	08022a3c 	.word	0x08022a3c
 801a4e4:	08022814 	.word	0x08022814
 801a4e8:	08022a48 	.word	0x08022a48
 801a4ec:	08022a5c 	.word	0x08022a5c
 801a4f0:	08022a68 	.word	0x08022a68
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a4f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a4f8:	2b04      	cmp	r3, #4
 801a4fa:	d009      	beq.n	801a510 <dhcp_parse_reply+0x324>
 801a4fc:	4b9c      	ldr	r3, [pc, #624]	@ (801a770 <dhcp_parse_reply+0x584>)
 801a4fe:	f240 625d 	movw	r2, #1629	@ 0x65d
 801a502:	499c      	ldr	r1, [pc, #624]	@ (801a774 <dhcp_parse_reply+0x588>)
 801a504:	489c      	ldr	r0, [pc, #624]	@ (801a778 <dhcp_parse_reply+0x58c>)
 801a506:	f004 fa6b 	bl	801e9e0 <iprintf>
 801a50a:	f06f 0305 	mvn.w	r3, #5
 801a50e:	e12a      	b.n	801a766 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 801a510:	2304      	movs	r3, #4
 801a512:	623b      	str	r3, [r7, #32]
        break;
 801a514:	e014      	b.n	801a540 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a516:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a51a:	2b04      	cmp	r3, #4
 801a51c:	d009      	beq.n	801a532 <dhcp_parse_reply+0x346>
 801a51e:	4b94      	ldr	r3, [pc, #592]	@ (801a770 <dhcp_parse_reply+0x584>)
 801a520:	f240 6261 	movw	r2, #1633	@ 0x661
 801a524:	4993      	ldr	r1, [pc, #588]	@ (801a774 <dhcp_parse_reply+0x588>)
 801a526:	4894      	ldr	r0, [pc, #592]	@ (801a778 <dhcp_parse_reply+0x58c>)
 801a528:	f004 fa5a 	bl	801e9e0 <iprintf>
 801a52c:	f06f 0305 	mvn.w	r3, #5
 801a530:	e119      	b.n	801a766 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801a532:	2305      	movs	r3, #5
 801a534:	623b      	str	r3, [r7, #32]
        break;
 801a536:	e003      	b.n	801a540 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 801a538:	2300      	movs	r3, #0
 801a53a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801a53e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801a540:	7dfb      	ldrb	r3, [r7, #23]
 801a542:	2b00      	cmp	r3, #0
 801a544:	d103      	bne.n	801a54e <dhcp_parse_reply+0x362>
      offset++;
 801a546:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a548:	3301      	adds	r3, #1
 801a54a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 801a54c:	e0a1      	b.n	801a692 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801a54e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a550:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a554:	4413      	add	r3, r2
 801a556:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 801a55a:	4293      	cmp	r3, r2
 801a55c:	dd02      	ble.n	801a564 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801a55e:	f06f 0301 	mvn.w	r3, #1
 801a562:	e100      	b.n	801a766 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 801a564:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a568:	b29a      	uxth	r2, r3
 801a56a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a56c:	4413      	add	r3, r2
 801a56e:	b29b      	uxth	r3, r3
 801a570:	3302      	adds	r3, #2
 801a572:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 801a574:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a578:	2b00      	cmp	r3, #0
 801a57a:	f000 808a 	beq.w	801a692 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801a57e:	2300      	movs	r3, #0
 801a580:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801a582:	6a3b      	ldr	r3, [r7, #32]
 801a584:	2b00      	cmp	r3, #0
 801a586:	db02      	blt.n	801a58e <dhcp_parse_reply+0x3a2>
 801a588:	6a3b      	ldr	r3, [r7, #32]
 801a58a:	2b07      	cmp	r3, #7
 801a58c:	dd06      	ble.n	801a59c <dhcp_parse_reply+0x3b0>
 801a58e:	4b78      	ldr	r3, [pc, #480]	@ (801a770 <dhcp_parse_reply+0x584>)
 801a590:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 801a594:	4979      	ldr	r1, [pc, #484]	@ (801a77c <dhcp_parse_reply+0x590>)
 801a596:	4878      	ldr	r0, [pc, #480]	@ (801a778 <dhcp_parse_reply+0x58c>)
 801a598:	f004 fa22 	bl	801e9e0 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801a59c:	4a78      	ldr	r2, [pc, #480]	@ (801a780 <dhcp_parse_reply+0x594>)
 801a59e:	6a3b      	ldr	r3, [r7, #32]
 801a5a0:	4413      	add	r3, r2
 801a5a2:	781b      	ldrb	r3, [r3, #0]
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d174      	bne.n	801a692 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 801a5a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a5ac:	2b04      	cmp	r3, #4
 801a5ae:	bf28      	it	cs
 801a5b0:	2304      	movcs	r3, #4
 801a5b2:	b2db      	uxtb	r3, r3
 801a5b4:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801a5b6:	8bfb      	ldrh	r3, [r7, #30]
 801a5b8:	8aba      	ldrh	r2, [r7, #20]
 801a5ba:	f107 0108 	add.w	r1, r7, #8
 801a5be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a5c0:	f7f8 f9f4 	bl	80129ac <pbuf_copy_partial>
 801a5c4:	4603      	mov	r3, r0
 801a5c6:	461a      	mov	r2, r3
 801a5c8:	8abb      	ldrh	r3, [r7, #20]
 801a5ca:	4293      	cmp	r3, r2
 801a5cc:	d002      	beq.n	801a5d4 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801a5ce:	f06f 0301 	mvn.w	r3, #1
 801a5d2:	e0c8      	b.n	801a766 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 801a5d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a5d8:	2b04      	cmp	r3, #4
 801a5da:	d933      	bls.n	801a644 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801a5dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a5e0:	f003 0303 	and.w	r3, r3, #3
 801a5e4:	b2db      	uxtb	r3, r3
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	d009      	beq.n	801a5fe <dhcp_parse_reply+0x412>
 801a5ea:	4b61      	ldr	r3, [pc, #388]	@ (801a770 <dhcp_parse_reply+0x584>)
 801a5ec:	f240 6281 	movw	r2, #1665	@ 0x681
 801a5f0:	4964      	ldr	r1, [pc, #400]	@ (801a784 <dhcp_parse_reply+0x598>)
 801a5f2:	4861      	ldr	r0, [pc, #388]	@ (801a778 <dhcp_parse_reply+0x58c>)
 801a5f4:	f004 f9f4 	bl	801e9e0 <iprintf>
 801a5f8:	f06f 0305 	mvn.w	r3, #5
 801a5fc:	e0b3      	b.n	801a766 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801a5fe:	4a60      	ldr	r2, [pc, #384]	@ (801a780 <dhcp_parse_reply+0x594>)
 801a600:	6a3b      	ldr	r3, [r7, #32]
 801a602:	4413      	add	r3, r2
 801a604:	2201      	movs	r2, #1
 801a606:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801a608:	68bb      	ldr	r3, [r7, #8]
 801a60a:	4618      	mov	r0, r3
 801a60c:	f7f6 fa8a 	bl	8010b24 <lwip_htonl>
 801a610:	4602      	mov	r2, r0
 801a612:	495d      	ldr	r1, [pc, #372]	@ (801a788 <dhcp_parse_reply+0x59c>)
 801a614:	6a3b      	ldr	r3, [r7, #32]
 801a616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801a61a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a61e:	3b04      	subs	r3, #4
 801a620:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801a624:	8bfb      	ldrh	r3, [r7, #30]
 801a626:	3304      	adds	r3, #4
 801a628:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801a62a:	8a7a      	ldrh	r2, [r7, #18]
 801a62c:	8bfb      	ldrh	r3, [r7, #30]
 801a62e:	429a      	cmp	r2, r3
 801a630:	d202      	bcs.n	801a638 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801a632:	f06f 0301 	mvn.w	r3, #1
 801a636:	e096      	b.n	801a766 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 801a638:	8a7b      	ldrh	r3, [r7, #18]
 801a63a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801a63c:	6a3b      	ldr	r3, [r7, #32]
 801a63e:	3301      	adds	r3, #1
 801a640:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801a642:	e79e      	b.n	801a582 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 801a644:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a648:	2b04      	cmp	r3, #4
 801a64a:	d106      	bne.n	801a65a <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 801a64c:	68bb      	ldr	r3, [r7, #8]
 801a64e:	4618      	mov	r0, r3
 801a650:	f7f6 fa68 	bl	8010b24 <lwip_htonl>
 801a654:	4603      	mov	r3, r0
 801a656:	60bb      	str	r3, [r7, #8]
 801a658:	e011      	b.n	801a67e <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801a65a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a65e:	2b01      	cmp	r3, #1
 801a660:	d009      	beq.n	801a676 <dhcp_parse_reply+0x48a>
 801a662:	4b43      	ldr	r3, [pc, #268]	@ (801a770 <dhcp_parse_reply+0x584>)
 801a664:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 801a668:	4948      	ldr	r1, [pc, #288]	@ (801a78c <dhcp_parse_reply+0x5a0>)
 801a66a:	4843      	ldr	r0, [pc, #268]	@ (801a778 <dhcp_parse_reply+0x58c>)
 801a66c:	f004 f9b8 	bl	801e9e0 <iprintf>
 801a670:	f06f 0305 	mvn.w	r3, #5
 801a674:	e077      	b.n	801a766 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 801a676:	f107 0308 	add.w	r3, r7, #8
 801a67a:	781b      	ldrb	r3, [r3, #0]
 801a67c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801a67e:	4a40      	ldr	r2, [pc, #256]	@ (801a780 <dhcp_parse_reply+0x594>)
 801a680:	6a3b      	ldr	r3, [r7, #32]
 801a682:	4413      	add	r3, r2
 801a684:	2201      	movs	r2, #1
 801a686:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801a688:	68ba      	ldr	r2, [r7, #8]
 801a68a:	493f      	ldr	r1, [pc, #252]	@ (801a788 <dhcp_parse_reply+0x59c>)
 801a68c:	6a3b      	ldr	r3, [r7, #32]
 801a68e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801a692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a694:	895b      	ldrh	r3, [r3, #10]
 801a696:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a698:	429a      	cmp	r2, r3
 801a69a:	d324      	bcc.n	801a6e6 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 801a69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a69e:	895b      	ldrh	r3, [r3, #10]
 801a6a0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a6a2:	1ad3      	subs	r3, r2, r3
 801a6a4:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801a6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6a8:	895b      	ldrh	r3, [r3, #10]
 801a6aa:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801a6ac:	1ad3      	subs	r3, r2, r3
 801a6ae:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 801a6b0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a6b2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a6b4:	429a      	cmp	r2, r3
 801a6b6:	d213      	bcs.n	801a6e0 <dhcp_parse_reply+0x4f4>
        q = q->next;
 801a6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801a6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6c0:	2b00      	cmp	r3, #0
 801a6c2:	d109      	bne.n	801a6d8 <dhcp_parse_reply+0x4ec>
 801a6c4:	4b2a      	ldr	r3, [pc, #168]	@ (801a770 <dhcp_parse_reply+0x584>)
 801a6c6:	f240 629d 	movw	r2, #1693	@ 0x69d
 801a6ca:	4931      	ldr	r1, [pc, #196]	@ (801a790 <dhcp_parse_reply+0x5a4>)
 801a6cc:	482a      	ldr	r0, [pc, #168]	@ (801a778 <dhcp_parse_reply+0x58c>)
 801a6ce:	f004 f987 	bl	801e9e0 <iprintf>
 801a6d2:	f06f 0305 	mvn.w	r3, #5
 801a6d6:	e046      	b.n	801a766 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 801a6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6da:	685b      	ldr	r3, [r3, #4]
 801a6dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a6de:	e002      	b.n	801a6e6 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801a6e0:	f06f 0301 	mvn.w	r3, #1
 801a6e4:	e03f      	b.n	801a766 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801a6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d00a      	beq.n	801a702 <dhcp_parse_reply+0x516>
 801a6ec:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a6ee:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a6f0:	429a      	cmp	r2, r3
 801a6f2:	d206      	bcs.n	801a702 <dhcp_parse_reply+0x516>
 801a6f4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a6f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a6f8:	4413      	add	r3, r2
 801a6fa:	781b      	ldrb	r3, [r3, #0]
 801a6fc:	2bff      	cmp	r3, #255	@ 0xff
 801a6fe:	f47f adb8 	bne.w	801a272 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801a702:	4b1f      	ldr	r3, [pc, #124]	@ (801a780 <dhcp_parse_reply+0x594>)
 801a704:	781b      	ldrb	r3, [r3, #0]
 801a706:	2b00      	cmp	r3, #0
 801a708:	d018      	beq.n	801a73c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801a70a:	4b1f      	ldr	r3, [pc, #124]	@ (801a788 <dhcp_parse_reply+0x59c>)
 801a70c:	681b      	ldr	r3, [r3, #0]
 801a70e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801a710:	4b1b      	ldr	r3, [pc, #108]	@ (801a780 <dhcp_parse_reply+0x594>)
 801a712:	2200      	movs	r2, #0
 801a714:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801a716:	68fb      	ldr	r3, [r7, #12]
 801a718:	2b01      	cmp	r3, #1
 801a71a:	d102      	bne.n	801a722 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801a71c:	2301      	movs	r3, #1
 801a71e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a720:	e00c      	b.n	801a73c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801a722:	68fb      	ldr	r3, [r7, #12]
 801a724:	2b02      	cmp	r3, #2
 801a726:	d102      	bne.n	801a72e <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 801a728:	2301      	movs	r3, #1
 801a72a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a72c:	e006      	b.n	801a73c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801a72e:	68fb      	ldr	r3, [r7, #12]
 801a730:	2b03      	cmp	r3, #3
 801a732:	d103      	bne.n	801a73c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 801a734:	2301      	movs	r3, #1
 801a736:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 801a738:	2301      	movs	r3, #1
 801a73a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801a73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a73e:	2b00      	cmp	r3, #0
 801a740:	d006      	beq.n	801a750 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801a742:	2300      	movs	r3, #0
 801a744:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 801a746:	236c      	movs	r3, #108	@ 0x6c
 801a748:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801a74a:	23ec      	movs	r3, #236	@ 0xec
 801a74c:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801a74e:	e56a      	b.n	801a226 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801a750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a752:	2b00      	cmp	r3, #0
 801a754:	d006      	beq.n	801a764 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801a756:	2300      	movs	r3, #0
 801a758:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 801a75a:	232c      	movs	r3, #44	@ 0x2c
 801a75c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801a75e:	236c      	movs	r3, #108	@ 0x6c
 801a760:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 801a762:	e560      	b.n	801a226 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801a764:	2300      	movs	r3, #0
}
 801a766:	4618      	mov	r0, r3
 801a768:	3740      	adds	r7, #64	@ 0x40
 801a76a:	46bd      	mov	sp, r7
 801a76c:	bd80      	pop	{r7, pc}
 801a76e:	bf00      	nop
 801a770:	080227b4 	.word	0x080227b4
 801a774:	08022a3c 	.word	0x08022a3c
 801a778:	08022814 	.word	0x08022814
 801a77c:	08022a80 	.word	0x08022a80
 801a780:	2000481c 	.word	0x2000481c
 801a784:	08022a94 	.word	0x08022a94
 801a788:	200047fc 	.word	0x200047fc
 801a78c:	08022aac 	.word	0x08022aac
 801a790:	08022ac0 	.word	0x08022ac0

0801a794 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801a794:	b580      	push	{r7, lr}
 801a796:	b08a      	sub	sp, #40	@ 0x28
 801a798:	af00      	add	r7, sp, #0
 801a79a:	60f8      	str	r0, [r7, #12]
 801a79c:	60b9      	str	r1, [r7, #8]
 801a79e:	607a      	str	r2, [r7, #4]
 801a7a0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801a7a2:	4b60      	ldr	r3, [pc, #384]	@ (801a924 <dhcp_recv+0x190>)
 801a7a4:	685b      	ldr	r3, [r3, #4]
 801a7a6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a7a8:	6a3b      	ldr	r3, [r7, #32]
 801a7aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a7ac:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	685b      	ldr	r3, [r3, #4]
 801a7b2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801a7b4:	69fb      	ldr	r3, [r7, #28]
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	f000 809d 	beq.w	801a8f6 <dhcp_recv+0x162>
 801a7bc:	69fb      	ldr	r3, [r7, #28]
 801a7be:	791b      	ldrb	r3, [r3, #4]
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	f000 8098 	beq.w	801a8f6 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	895b      	ldrh	r3, [r3, #10]
 801a7ca:	2b2b      	cmp	r3, #43	@ 0x2b
 801a7cc:	f240 8095 	bls.w	801a8fa <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801a7d0:	69bb      	ldr	r3, [r7, #24]
 801a7d2:	781b      	ldrb	r3, [r3, #0]
 801a7d4:	2b02      	cmp	r3, #2
 801a7d6:	f040 8092 	bne.w	801a8fe <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a7da:	2300      	movs	r3, #0
 801a7dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a7e0:	e012      	b.n	801a808 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801a7e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a7e6:	6a3a      	ldr	r2, [r7, #32]
 801a7e8:	4413      	add	r3, r2
 801a7ea:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 801a7ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a7f2:	69b9      	ldr	r1, [r7, #24]
 801a7f4:	440b      	add	r3, r1
 801a7f6:	7f1b      	ldrb	r3, [r3, #28]
 801a7f8:	429a      	cmp	r2, r3
 801a7fa:	f040 8082 	bne.w	801a902 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a7fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a802:	3301      	adds	r3, #1
 801a804:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a808:	6a3b      	ldr	r3, [r7, #32]
 801a80a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801a80e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801a812:	429a      	cmp	r2, r3
 801a814:	d203      	bcs.n	801a81e <dhcp_recv+0x8a>
 801a816:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a81a:	2b05      	cmp	r3, #5
 801a81c:	d9e1      	bls.n	801a7e2 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801a81e:	69bb      	ldr	r3, [r7, #24]
 801a820:	685b      	ldr	r3, [r3, #4]
 801a822:	4618      	mov	r0, r3
 801a824:	f7f6 f97e 	bl	8010b24 <lwip_htonl>
 801a828:	4602      	mov	r2, r0
 801a82a:	69fb      	ldr	r3, [r7, #28]
 801a82c:	681b      	ldr	r3, [r3, #0]
 801a82e:	429a      	cmp	r2, r3
 801a830:	d169      	bne.n	801a906 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801a832:	69f9      	ldr	r1, [r7, #28]
 801a834:	6878      	ldr	r0, [r7, #4]
 801a836:	f7ff fcd9 	bl	801a1ec <dhcp_parse_reply>
 801a83a:	4603      	mov	r3, r0
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d164      	bne.n	801a90a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801a840:	4b39      	ldr	r3, [pc, #228]	@ (801a928 <dhcp_recv+0x194>)
 801a842:	785b      	ldrb	r3, [r3, #1]
 801a844:	2b00      	cmp	r3, #0
 801a846:	d062      	beq.n	801a90e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	685b      	ldr	r3, [r3, #4]
 801a84c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801a84e:	4b37      	ldr	r3, [pc, #220]	@ (801a92c <dhcp_recv+0x198>)
 801a850:	685b      	ldr	r3, [r3, #4]
 801a852:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801a854:	7cfb      	ldrb	r3, [r7, #19]
 801a856:	2b05      	cmp	r3, #5
 801a858:	d12a      	bne.n	801a8b0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801a85a:	69fb      	ldr	r3, [r7, #28]
 801a85c:	795b      	ldrb	r3, [r3, #5]
 801a85e:	2b01      	cmp	r3, #1
 801a860:	d112      	bne.n	801a888 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801a862:	6979      	ldr	r1, [r7, #20]
 801a864:	6a38      	ldr	r0, [r7, #32]
 801a866:	f7fe fe1d 	bl	80194a4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801a86a:	6a3b      	ldr	r3, [r7, #32]
 801a86c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801a870:	f003 0308 	and.w	r3, r3, #8
 801a874:	2b00      	cmp	r3, #0
 801a876:	d003      	beq.n	801a880 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801a878:	6a38      	ldr	r0, [r7, #32]
 801a87a:	f7fe fb8b 	bl	8018f94 <dhcp_check>
 801a87e:	e049      	b.n	801a914 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801a880:	6a38      	ldr	r0, [r7, #32]
 801a882:	f7ff f86d 	bl	8019960 <dhcp_bind>
 801a886:	e045      	b.n	801a914 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801a888:	69fb      	ldr	r3, [r7, #28]
 801a88a:	795b      	ldrb	r3, [r3, #5]
 801a88c:	2b03      	cmp	r3, #3
 801a88e:	d007      	beq.n	801a8a0 <dhcp_recv+0x10c>
 801a890:	69fb      	ldr	r3, [r7, #28]
 801a892:	795b      	ldrb	r3, [r3, #5]
 801a894:	2b04      	cmp	r3, #4
 801a896:	d003      	beq.n	801a8a0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801a898:	69fb      	ldr	r3, [r7, #28]
 801a89a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801a89c:	2b05      	cmp	r3, #5
 801a89e:	d139      	bne.n	801a914 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801a8a0:	6979      	ldr	r1, [r7, #20]
 801a8a2:	6a38      	ldr	r0, [r7, #32]
 801a8a4:	f7fe fdfe 	bl	80194a4 <dhcp_handle_ack>
      dhcp_bind(netif);
 801a8a8:	6a38      	ldr	r0, [r7, #32]
 801a8aa:	f7ff f859 	bl	8019960 <dhcp_bind>
 801a8ae:	e031      	b.n	801a914 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801a8b0:	7cfb      	ldrb	r3, [r7, #19]
 801a8b2:	2b06      	cmp	r3, #6
 801a8b4:	d113      	bne.n	801a8de <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a8b6:	69fb      	ldr	r3, [r7, #28]
 801a8b8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801a8ba:	2b03      	cmp	r3, #3
 801a8bc:	d00b      	beq.n	801a8d6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a8be:	69fb      	ldr	r3, [r7, #28]
 801a8c0:	795b      	ldrb	r3, [r3, #5]
 801a8c2:	2b01      	cmp	r3, #1
 801a8c4:	d007      	beq.n	801a8d6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801a8c6:	69fb      	ldr	r3, [r7, #28]
 801a8c8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a8ca:	2b04      	cmp	r3, #4
 801a8cc:	d003      	beq.n	801a8d6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801a8ce:	69fb      	ldr	r3, [r7, #28]
 801a8d0:	795b      	ldrb	r3, [r3, #5]
 801a8d2:	2b05      	cmp	r3, #5
 801a8d4:	d103      	bne.n	801a8de <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801a8d6:	6a38      	ldr	r0, [r7, #32]
 801a8d8:	f7fe fb42 	bl	8018f60 <dhcp_handle_nak>
 801a8dc:	e01a      	b.n	801a914 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801a8de:	7cfb      	ldrb	r3, [r7, #19]
 801a8e0:	2b02      	cmp	r3, #2
 801a8e2:	d116      	bne.n	801a912 <dhcp_recv+0x17e>
 801a8e4:	69fb      	ldr	r3, [r7, #28]
 801a8e6:	795b      	ldrb	r3, [r3, #5]
 801a8e8:	2b06      	cmp	r3, #6
 801a8ea:	d112      	bne.n	801a912 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801a8ec:	6979      	ldr	r1, [r7, #20]
 801a8ee:	6a38      	ldr	r0, [r7, #32]
 801a8f0:	f7fe fb84 	bl	8018ffc <dhcp_handle_offer>
 801a8f4:	e00e      	b.n	801a914 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a8f6:	bf00      	nop
 801a8f8:	e00c      	b.n	801a914 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a8fa:	bf00      	nop
 801a8fc:	e00a      	b.n	801a914 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a8fe:	bf00      	nop
 801a900:	e008      	b.n	801a914 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801a902:	bf00      	nop
 801a904:	e006      	b.n	801a914 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a906:	bf00      	nop
 801a908:	e004      	b.n	801a914 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a90a:	bf00      	nop
 801a90c:	e002      	b.n	801a914 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a90e:	bf00      	nop
 801a910:	e000      	b.n	801a914 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801a912:	bf00      	nop
  pbuf_free(p);
 801a914:	6878      	ldr	r0, [r7, #4]
 801a916:	f7f7 fe43 	bl	80125a0 <pbuf_free>
}
 801a91a:	bf00      	nop
 801a91c:	3728      	adds	r7, #40	@ 0x28
 801a91e:	46bd      	mov	sp, r7
 801a920:	bd80      	pop	{r7, pc}
 801a922:	bf00      	nop
 801a924:	20004768 	.word	0x20004768
 801a928:	2000481c 	.word	0x2000481c
 801a92c:	200047fc 	.word	0x200047fc

0801a930 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801a930:	b580      	push	{r7, lr}
 801a932:	b088      	sub	sp, #32
 801a934:	af00      	add	r7, sp, #0
 801a936:	60f8      	str	r0, [r7, #12]
 801a938:	60b9      	str	r1, [r7, #8]
 801a93a:	603b      	str	r3, [r7, #0]
 801a93c:	4613      	mov	r3, r2
 801a93e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801a940:	68fb      	ldr	r3, [r7, #12]
 801a942:	2b00      	cmp	r3, #0
 801a944:	d108      	bne.n	801a958 <dhcp_create_msg+0x28>
 801a946:	4b5f      	ldr	r3, [pc, #380]	@ (801aac4 <dhcp_create_msg+0x194>)
 801a948:	f240 7269 	movw	r2, #1897	@ 0x769
 801a94c:	495e      	ldr	r1, [pc, #376]	@ (801aac8 <dhcp_create_msg+0x198>)
 801a94e:	485f      	ldr	r0, [pc, #380]	@ (801aacc <dhcp_create_msg+0x19c>)
 801a950:	f004 f846 	bl	801e9e0 <iprintf>
 801a954:	2300      	movs	r3, #0
 801a956:	e0b1      	b.n	801aabc <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801a958:	68bb      	ldr	r3, [r7, #8]
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d108      	bne.n	801a970 <dhcp_create_msg+0x40>
 801a95e:	4b59      	ldr	r3, [pc, #356]	@ (801aac4 <dhcp_create_msg+0x194>)
 801a960:	f240 726a 	movw	r2, #1898	@ 0x76a
 801a964:	495a      	ldr	r1, [pc, #360]	@ (801aad0 <dhcp_create_msg+0x1a0>)
 801a966:	4859      	ldr	r0, [pc, #356]	@ (801aacc <dhcp_create_msg+0x19c>)
 801a968:	f004 f83a 	bl	801e9e0 <iprintf>
 801a96c:	2300      	movs	r3, #0
 801a96e:	e0a5      	b.n	801aabc <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801a970:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a974:	f44f 719a 	mov.w	r1, #308	@ 0x134
 801a978:	2036      	movs	r0, #54	@ 0x36
 801a97a:	f7f7 fb2d 	bl	8011fd8 <pbuf_alloc>
 801a97e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801a980:	69bb      	ldr	r3, [r7, #24]
 801a982:	2b00      	cmp	r3, #0
 801a984:	d101      	bne.n	801a98a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801a986:	2300      	movs	r3, #0
 801a988:	e098      	b.n	801aabc <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801a98a:	69bb      	ldr	r3, [r7, #24]
 801a98c:	895b      	ldrh	r3, [r3, #10]
 801a98e:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801a992:	d206      	bcs.n	801a9a2 <dhcp_create_msg+0x72>
 801a994:	4b4b      	ldr	r3, [pc, #300]	@ (801aac4 <dhcp_create_msg+0x194>)
 801a996:	f240 7271 	movw	r2, #1905	@ 0x771
 801a99a:	494e      	ldr	r1, [pc, #312]	@ (801aad4 <dhcp_create_msg+0x1a4>)
 801a99c:	484b      	ldr	r0, [pc, #300]	@ (801aacc <dhcp_create_msg+0x19c>)
 801a99e:	f004 f81f 	bl	801e9e0 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801a9a2:	79fb      	ldrb	r3, [r7, #7]
 801a9a4:	2b03      	cmp	r3, #3
 801a9a6:	d103      	bne.n	801a9b0 <dhcp_create_msg+0x80>
 801a9a8:	68bb      	ldr	r3, [r7, #8]
 801a9aa:	795b      	ldrb	r3, [r3, #5]
 801a9ac:	2b03      	cmp	r3, #3
 801a9ae:	d10d      	bne.n	801a9cc <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801a9b0:	68bb      	ldr	r3, [r7, #8]
 801a9b2:	799b      	ldrb	r3, [r3, #6]
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d105      	bne.n	801a9c4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801a9b8:	f003 ff12 	bl	801e7e0 <rand>
 801a9bc:	4603      	mov	r3, r0
 801a9be:	461a      	mov	r2, r3
 801a9c0:	4b45      	ldr	r3, [pc, #276]	@ (801aad8 <dhcp_create_msg+0x1a8>)
 801a9c2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801a9c4:	4b44      	ldr	r3, [pc, #272]	@ (801aad8 <dhcp_create_msg+0x1a8>)
 801a9c6:	681a      	ldr	r2, [r3, #0]
 801a9c8:	68bb      	ldr	r3, [r7, #8]
 801a9ca:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801a9cc:	69bb      	ldr	r3, [r7, #24]
 801a9ce:	685b      	ldr	r3, [r3, #4]
 801a9d0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801a9d2:	f44f 729a 	mov.w	r2, #308	@ 0x134
 801a9d6:	2100      	movs	r1, #0
 801a9d8:	6978      	ldr	r0, [r7, #20]
 801a9da:	f004 f9d1 	bl	801ed80 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801a9de:	697b      	ldr	r3, [r7, #20]
 801a9e0:	2201      	movs	r2, #1
 801a9e2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801a9e4:	697b      	ldr	r3, [r7, #20]
 801a9e6:	2201      	movs	r2, #1
 801a9e8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801a9ea:	68fb      	ldr	r3, [r7, #12]
 801a9ec:	f893 203c 	ldrb.w	r2, [r3, #60]	@ 0x3c
 801a9f0:	697b      	ldr	r3, [r7, #20]
 801a9f2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801a9f4:	68bb      	ldr	r3, [r7, #8]
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	4618      	mov	r0, r3
 801a9fa:	f7f6 f893 	bl	8010b24 <lwip_htonl>
 801a9fe:	4602      	mov	r2, r0
 801aa00:	697b      	ldr	r3, [r7, #20]
 801aa02:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801aa04:	79fb      	ldrb	r3, [r7, #7]
 801aa06:	2b08      	cmp	r3, #8
 801aa08:	d010      	beq.n	801aa2c <dhcp_create_msg+0xfc>
 801aa0a:	79fb      	ldrb	r3, [r7, #7]
 801aa0c:	2b04      	cmp	r3, #4
 801aa0e:	d00d      	beq.n	801aa2c <dhcp_create_msg+0xfc>
 801aa10:	79fb      	ldrb	r3, [r7, #7]
 801aa12:	2b07      	cmp	r3, #7
 801aa14:	d00a      	beq.n	801aa2c <dhcp_create_msg+0xfc>
 801aa16:	79fb      	ldrb	r3, [r7, #7]
 801aa18:	2b03      	cmp	r3, #3
 801aa1a:	d10c      	bne.n	801aa36 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801aa1c:	68bb      	ldr	r3, [r7, #8]
 801aa1e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801aa20:	2b05      	cmp	r3, #5
 801aa22:	d003      	beq.n	801aa2c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801aa24:	68bb      	ldr	r3, [r7, #8]
 801aa26:	795b      	ldrb	r3, [r3, #5]
 801aa28:	2b04      	cmp	r3, #4
 801aa2a:	d104      	bne.n	801aa36 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801aa2c:	68fb      	ldr	r3, [r7, #12]
 801aa2e:	3304      	adds	r3, #4
 801aa30:	681a      	ldr	r2, [r3, #0]
 801aa32:	697b      	ldr	r3, [r7, #20]
 801aa34:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801aa36:	2300      	movs	r3, #0
 801aa38:	83fb      	strh	r3, [r7, #30]
 801aa3a:	e00c      	b.n	801aa56 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801aa3c:	8bfa      	ldrh	r2, [r7, #30]
 801aa3e:	8bfb      	ldrh	r3, [r7, #30]
 801aa40:	68f9      	ldr	r1, [r7, #12]
 801aa42:	440a      	add	r2, r1
 801aa44:	f892 1036 	ldrb.w	r1, [r2, #54]	@ 0x36
 801aa48:	697a      	ldr	r2, [r7, #20]
 801aa4a:	4413      	add	r3, r2
 801aa4c:	460a      	mov	r2, r1
 801aa4e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801aa50:	8bfb      	ldrh	r3, [r7, #30]
 801aa52:	3301      	adds	r3, #1
 801aa54:	83fb      	strh	r3, [r7, #30]
 801aa56:	8bfb      	ldrh	r3, [r7, #30]
 801aa58:	2b05      	cmp	r3, #5
 801aa5a:	d9ef      	bls.n	801aa3c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801aa5c:	697b      	ldr	r3, [r7, #20]
 801aa5e:	2200      	movs	r2, #0
 801aa60:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801aa64:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801aa68:	2200      	movs	r2, #0
 801aa6a:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801aa6e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801aa72:	2200      	movs	r2, #0
 801aa74:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 801aa78:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 801aa7c:	2200      	movs	r2, #0
 801aa7e:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801aa82:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801aa86:	697b      	ldr	r3, [r7, #20]
 801aa88:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801aa8c:	2301      	movs	r3, #1
 801aa8e:	2235      	movs	r2, #53	@ 0x35
 801aa90:	2000      	movs	r0, #0
 801aa92:	f7ff fadb 	bl	801a04c <dhcp_option>
 801aa96:	4603      	mov	r3, r0
 801aa98:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801aa9a:	697b      	ldr	r3, [r7, #20]
 801aa9c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801aaa0:	79fa      	ldrb	r2, [r7, #7]
 801aaa2:	8a7b      	ldrh	r3, [r7, #18]
 801aaa4:	4618      	mov	r0, r3
 801aaa6:	f7ff fb05 	bl	801a0b4 <dhcp_option_byte>
 801aaaa:	4603      	mov	r3, r0
 801aaac:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801aaae:	683b      	ldr	r3, [r7, #0]
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d002      	beq.n	801aaba <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801aab4:	683b      	ldr	r3, [r7, #0]
 801aab6:	8a7a      	ldrh	r2, [r7, #18]
 801aab8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801aaba:	69bb      	ldr	r3, [r7, #24]
}
 801aabc:	4618      	mov	r0, r3
 801aabe:	3720      	adds	r7, #32
 801aac0:	46bd      	mov	sp, r7
 801aac2:	bd80      	pop	{r7, pc}
 801aac4:	080227b4 	.word	0x080227b4
 801aac8:	08022ad4 	.word	0x08022ad4
 801aacc:	08022814 	.word	0x08022814
 801aad0:	08022af4 	.word	0x08022af4
 801aad4:	08022b14 	.word	0x08022b14
 801aad8:	2000482c 	.word	0x2000482c

0801aadc <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801aadc:	b580      	push	{r7, lr}
 801aade:	b084      	sub	sp, #16
 801aae0:	af00      	add	r7, sp, #0
 801aae2:	4603      	mov	r3, r0
 801aae4:	60b9      	str	r1, [r7, #8]
 801aae6:	607a      	str	r2, [r7, #4]
 801aae8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801aaea:	89fb      	ldrh	r3, [r7, #14]
 801aaec:	1c5a      	adds	r2, r3, #1
 801aaee:	81fa      	strh	r2, [r7, #14]
 801aaf0:	461a      	mov	r2, r3
 801aaf2:	68bb      	ldr	r3, [r7, #8]
 801aaf4:	4413      	add	r3, r2
 801aaf6:	22ff      	movs	r2, #255	@ 0xff
 801aaf8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801aafa:	e007      	b.n	801ab0c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801aafc:	89fb      	ldrh	r3, [r7, #14]
 801aafe:	1c5a      	adds	r2, r3, #1
 801ab00:	81fa      	strh	r2, [r7, #14]
 801ab02:	461a      	mov	r2, r3
 801ab04:	68bb      	ldr	r3, [r7, #8]
 801ab06:	4413      	add	r3, r2
 801ab08:	2200      	movs	r2, #0
 801ab0a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801ab0c:	89fb      	ldrh	r3, [r7, #14]
 801ab0e:	2b43      	cmp	r3, #67	@ 0x43
 801ab10:	d904      	bls.n	801ab1c <dhcp_option_trailer+0x40>
 801ab12:	89fb      	ldrh	r3, [r7, #14]
 801ab14:	f003 0303 	and.w	r3, r3, #3
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	d002      	beq.n	801ab22 <dhcp_option_trailer+0x46>
 801ab1c:	89fb      	ldrh	r3, [r7, #14]
 801ab1e:	2b43      	cmp	r3, #67	@ 0x43
 801ab20:	d9ec      	bls.n	801aafc <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801ab22:	89fb      	ldrh	r3, [r7, #14]
 801ab24:	33f0      	adds	r3, #240	@ 0xf0
 801ab26:	b29b      	uxth	r3, r3
 801ab28:	4619      	mov	r1, r3
 801ab2a:	6878      	ldr	r0, [r7, #4]
 801ab2c:	f7f7 fbb2 	bl	8012294 <pbuf_realloc>
}
 801ab30:	bf00      	nop
 801ab32:	3710      	adds	r7, #16
 801ab34:	46bd      	mov	sp, r7
 801ab36:	bd80      	pop	{r7, pc}

0801ab38 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801ab38:	b480      	push	{r7}
 801ab3a:	b085      	sub	sp, #20
 801ab3c:	af00      	add	r7, sp, #0
 801ab3e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	d017      	beq.n	801ab76 <dhcp_supplied_address+0x3e>
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d013      	beq.n	801ab76 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ab52:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801ab54:	68fb      	ldr	r3, [r7, #12]
 801ab56:	795b      	ldrb	r3, [r3, #5]
 801ab58:	2b0a      	cmp	r3, #10
 801ab5a:	d007      	beq.n	801ab6c <dhcp_supplied_address+0x34>
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	795b      	ldrb	r3, [r3, #5]
 801ab60:	2b05      	cmp	r3, #5
 801ab62:	d003      	beq.n	801ab6c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801ab64:	68fb      	ldr	r3, [r7, #12]
 801ab66:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801ab68:	2b04      	cmp	r3, #4
 801ab6a:	d101      	bne.n	801ab70 <dhcp_supplied_address+0x38>
 801ab6c:	2301      	movs	r3, #1
 801ab6e:	e000      	b.n	801ab72 <dhcp_supplied_address+0x3a>
 801ab70:	2300      	movs	r3, #0
 801ab72:	b2db      	uxtb	r3, r3
 801ab74:	e000      	b.n	801ab78 <dhcp_supplied_address+0x40>
  }
  return 0;
 801ab76:	2300      	movs	r3, #0
}
 801ab78:	4618      	mov	r0, r3
 801ab7a:	3714      	adds	r7, #20
 801ab7c:	46bd      	mov	sp, r7
 801ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab82:	4770      	bx	lr

0801ab84 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801ab84:	b580      	push	{r7, lr}
 801ab86:	b082      	sub	sp, #8
 801ab88:	af00      	add	r7, sp, #0
 801ab8a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801ab8c:	4915      	ldr	r1, [pc, #84]	@ (801abe4 <etharp_free_entry+0x60>)
 801ab8e:	687a      	ldr	r2, [r7, #4]
 801ab90:	4613      	mov	r3, r2
 801ab92:	005b      	lsls	r3, r3, #1
 801ab94:	4413      	add	r3, r2
 801ab96:	00db      	lsls	r3, r3, #3
 801ab98:	440b      	add	r3, r1
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	d013      	beq.n	801abc8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801aba0:	4910      	ldr	r1, [pc, #64]	@ (801abe4 <etharp_free_entry+0x60>)
 801aba2:	687a      	ldr	r2, [r7, #4]
 801aba4:	4613      	mov	r3, r2
 801aba6:	005b      	lsls	r3, r3, #1
 801aba8:	4413      	add	r3, r2
 801abaa:	00db      	lsls	r3, r3, #3
 801abac:	440b      	add	r3, r1
 801abae:	681b      	ldr	r3, [r3, #0]
 801abb0:	4618      	mov	r0, r3
 801abb2:	f7f7 fcf5 	bl	80125a0 <pbuf_free>
    arp_table[i].q = NULL;
 801abb6:	490b      	ldr	r1, [pc, #44]	@ (801abe4 <etharp_free_entry+0x60>)
 801abb8:	687a      	ldr	r2, [r7, #4]
 801abba:	4613      	mov	r3, r2
 801abbc:	005b      	lsls	r3, r3, #1
 801abbe:	4413      	add	r3, r2
 801abc0:	00db      	lsls	r3, r3, #3
 801abc2:	440b      	add	r3, r1
 801abc4:	2200      	movs	r2, #0
 801abc6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801abc8:	4906      	ldr	r1, [pc, #24]	@ (801abe4 <etharp_free_entry+0x60>)
 801abca:	687a      	ldr	r2, [r7, #4]
 801abcc:	4613      	mov	r3, r2
 801abce:	005b      	lsls	r3, r3, #1
 801abd0:	4413      	add	r3, r2
 801abd2:	00db      	lsls	r3, r3, #3
 801abd4:	440b      	add	r3, r1
 801abd6:	3314      	adds	r3, #20
 801abd8:	2200      	movs	r2, #0
 801abda:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801abdc:	bf00      	nop
 801abde:	3708      	adds	r7, #8
 801abe0:	46bd      	mov	sp, r7
 801abe2:	bd80      	pop	{r7, pc}
 801abe4:	20004830 	.word	0x20004830

0801abe8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801abe8:	b580      	push	{r7, lr}
 801abea:	b082      	sub	sp, #8
 801abec:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801abee:	2300      	movs	r3, #0
 801abf0:	607b      	str	r3, [r7, #4]
 801abf2:	e096      	b.n	801ad22 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801abf4:	494f      	ldr	r1, [pc, #316]	@ (801ad34 <etharp_tmr+0x14c>)
 801abf6:	687a      	ldr	r2, [r7, #4]
 801abf8:	4613      	mov	r3, r2
 801abfa:	005b      	lsls	r3, r3, #1
 801abfc:	4413      	add	r3, r2
 801abfe:	00db      	lsls	r3, r3, #3
 801ac00:	440b      	add	r3, r1
 801ac02:	3314      	adds	r3, #20
 801ac04:	781b      	ldrb	r3, [r3, #0]
 801ac06:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801ac08:	78fb      	ldrb	r3, [r7, #3]
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	f000 8086 	beq.w	801ad1c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801ac10:	4948      	ldr	r1, [pc, #288]	@ (801ad34 <etharp_tmr+0x14c>)
 801ac12:	687a      	ldr	r2, [r7, #4]
 801ac14:	4613      	mov	r3, r2
 801ac16:	005b      	lsls	r3, r3, #1
 801ac18:	4413      	add	r3, r2
 801ac1a:	00db      	lsls	r3, r3, #3
 801ac1c:	440b      	add	r3, r1
 801ac1e:	3312      	adds	r3, #18
 801ac20:	881b      	ldrh	r3, [r3, #0]
 801ac22:	3301      	adds	r3, #1
 801ac24:	b298      	uxth	r0, r3
 801ac26:	4943      	ldr	r1, [pc, #268]	@ (801ad34 <etharp_tmr+0x14c>)
 801ac28:	687a      	ldr	r2, [r7, #4]
 801ac2a:	4613      	mov	r3, r2
 801ac2c:	005b      	lsls	r3, r3, #1
 801ac2e:	4413      	add	r3, r2
 801ac30:	00db      	lsls	r3, r3, #3
 801ac32:	440b      	add	r3, r1
 801ac34:	3312      	adds	r3, #18
 801ac36:	4602      	mov	r2, r0
 801ac38:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801ac3a:	493e      	ldr	r1, [pc, #248]	@ (801ad34 <etharp_tmr+0x14c>)
 801ac3c:	687a      	ldr	r2, [r7, #4]
 801ac3e:	4613      	mov	r3, r2
 801ac40:	005b      	lsls	r3, r3, #1
 801ac42:	4413      	add	r3, r2
 801ac44:	00db      	lsls	r3, r3, #3
 801ac46:	440b      	add	r3, r1
 801ac48:	3312      	adds	r3, #18
 801ac4a:	881b      	ldrh	r3, [r3, #0]
 801ac4c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801ac50:	d215      	bcs.n	801ac7e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ac52:	4938      	ldr	r1, [pc, #224]	@ (801ad34 <etharp_tmr+0x14c>)
 801ac54:	687a      	ldr	r2, [r7, #4]
 801ac56:	4613      	mov	r3, r2
 801ac58:	005b      	lsls	r3, r3, #1
 801ac5a:	4413      	add	r3, r2
 801ac5c:	00db      	lsls	r3, r3, #3
 801ac5e:	440b      	add	r3, r1
 801ac60:	3314      	adds	r3, #20
 801ac62:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801ac64:	2b01      	cmp	r3, #1
 801ac66:	d10e      	bne.n	801ac86 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801ac68:	4932      	ldr	r1, [pc, #200]	@ (801ad34 <etharp_tmr+0x14c>)
 801ac6a:	687a      	ldr	r2, [r7, #4]
 801ac6c:	4613      	mov	r3, r2
 801ac6e:	005b      	lsls	r3, r3, #1
 801ac70:	4413      	add	r3, r2
 801ac72:	00db      	lsls	r3, r3, #3
 801ac74:	440b      	add	r3, r1
 801ac76:	3312      	adds	r3, #18
 801ac78:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ac7a:	2b04      	cmp	r3, #4
 801ac7c:	d903      	bls.n	801ac86 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801ac7e:	6878      	ldr	r0, [r7, #4]
 801ac80:	f7ff ff80 	bl	801ab84 <etharp_free_entry>
 801ac84:	e04a      	b.n	801ad1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801ac86:	492b      	ldr	r1, [pc, #172]	@ (801ad34 <etharp_tmr+0x14c>)
 801ac88:	687a      	ldr	r2, [r7, #4]
 801ac8a:	4613      	mov	r3, r2
 801ac8c:	005b      	lsls	r3, r3, #1
 801ac8e:	4413      	add	r3, r2
 801ac90:	00db      	lsls	r3, r3, #3
 801ac92:	440b      	add	r3, r1
 801ac94:	3314      	adds	r3, #20
 801ac96:	781b      	ldrb	r3, [r3, #0]
 801ac98:	2b03      	cmp	r3, #3
 801ac9a:	d10a      	bne.n	801acb2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801ac9c:	4925      	ldr	r1, [pc, #148]	@ (801ad34 <etharp_tmr+0x14c>)
 801ac9e:	687a      	ldr	r2, [r7, #4]
 801aca0:	4613      	mov	r3, r2
 801aca2:	005b      	lsls	r3, r3, #1
 801aca4:	4413      	add	r3, r2
 801aca6:	00db      	lsls	r3, r3, #3
 801aca8:	440b      	add	r3, r1
 801acaa:	3314      	adds	r3, #20
 801acac:	2204      	movs	r2, #4
 801acae:	701a      	strb	r2, [r3, #0]
 801acb0:	e034      	b.n	801ad1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801acb2:	4920      	ldr	r1, [pc, #128]	@ (801ad34 <etharp_tmr+0x14c>)
 801acb4:	687a      	ldr	r2, [r7, #4]
 801acb6:	4613      	mov	r3, r2
 801acb8:	005b      	lsls	r3, r3, #1
 801acba:	4413      	add	r3, r2
 801acbc:	00db      	lsls	r3, r3, #3
 801acbe:	440b      	add	r3, r1
 801acc0:	3314      	adds	r3, #20
 801acc2:	781b      	ldrb	r3, [r3, #0]
 801acc4:	2b04      	cmp	r3, #4
 801acc6:	d10a      	bne.n	801acde <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801acc8:	491a      	ldr	r1, [pc, #104]	@ (801ad34 <etharp_tmr+0x14c>)
 801acca:	687a      	ldr	r2, [r7, #4]
 801accc:	4613      	mov	r3, r2
 801acce:	005b      	lsls	r3, r3, #1
 801acd0:	4413      	add	r3, r2
 801acd2:	00db      	lsls	r3, r3, #3
 801acd4:	440b      	add	r3, r1
 801acd6:	3314      	adds	r3, #20
 801acd8:	2202      	movs	r2, #2
 801acda:	701a      	strb	r2, [r3, #0]
 801acdc:	e01e      	b.n	801ad1c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801acde:	4915      	ldr	r1, [pc, #84]	@ (801ad34 <etharp_tmr+0x14c>)
 801ace0:	687a      	ldr	r2, [r7, #4]
 801ace2:	4613      	mov	r3, r2
 801ace4:	005b      	lsls	r3, r3, #1
 801ace6:	4413      	add	r3, r2
 801ace8:	00db      	lsls	r3, r3, #3
 801acea:	440b      	add	r3, r1
 801acec:	3314      	adds	r3, #20
 801acee:	781b      	ldrb	r3, [r3, #0]
 801acf0:	2b01      	cmp	r3, #1
 801acf2:	d113      	bne.n	801ad1c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801acf4:	490f      	ldr	r1, [pc, #60]	@ (801ad34 <etharp_tmr+0x14c>)
 801acf6:	687a      	ldr	r2, [r7, #4]
 801acf8:	4613      	mov	r3, r2
 801acfa:	005b      	lsls	r3, r3, #1
 801acfc:	4413      	add	r3, r2
 801acfe:	00db      	lsls	r3, r3, #3
 801ad00:	440b      	add	r3, r1
 801ad02:	3308      	adds	r3, #8
 801ad04:	6818      	ldr	r0, [r3, #0]
 801ad06:	687a      	ldr	r2, [r7, #4]
 801ad08:	4613      	mov	r3, r2
 801ad0a:	005b      	lsls	r3, r3, #1
 801ad0c:	4413      	add	r3, r2
 801ad0e:	00db      	lsls	r3, r3, #3
 801ad10:	4a08      	ldr	r2, [pc, #32]	@ (801ad34 <etharp_tmr+0x14c>)
 801ad12:	4413      	add	r3, r2
 801ad14:	3304      	adds	r3, #4
 801ad16:	4619      	mov	r1, r3
 801ad18:	f000 fe72 	bl	801ba00 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ad1c:	687b      	ldr	r3, [r7, #4]
 801ad1e:	3301      	adds	r3, #1
 801ad20:	607b      	str	r3, [r7, #4]
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	2b09      	cmp	r3, #9
 801ad26:	f77f af65 	ble.w	801abf4 <etharp_tmr+0xc>
      }
    }
  }
}
 801ad2a:	bf00      	nop
 801ad2c:	bf00      	nop
 801ad2e:	3708      	adds	r7, #8
 801ad30:	46bd      	mov	sp, r7
 801ad32:	bd80      	pop	{r7, pc}
 801ad34:	20004830 	.word	0x20004830

0801ad38 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801ad38:	b580      	push	{r7, lr}
 801ad3a:	b08a      	sub	sp, #40	@ 0x28
 801ad3c:	af00      	add	r7, sp, #0
 801ad3e:	60f8      	str	r0, [r7, #12]
 801ad40:	460b      	mov	r3, r1
 801ad42:	607a      	str	r2, [r7, #4]
 801ad44:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801ad46:	230a      	movs	r3, #10
 801ad48:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801ad4a:	230a      	movs	r3, #10
 801ad4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801ad4e:	230a      	movs	r3, #10
 801ad50:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801ad52:	2300      	movs	r3, #0
 801ad54:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801ad56:	230a      	movs	r3, #10
 801ad58:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801ad5a:	2300      	movs	r3, #0
 801ad5c:	83bb      	strh	r3, [r7, #28]
 801ad5e:	2300      	movs	r3, #0
 801ad60:	837b      	strh	r3, [r7, #26]
 801ad62:	2300      	movs	r3, #0
 801ad64:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ad66:	2300      	movs	r3, #0
 801ad68:	843b      	strh	r3, [r7, #32]
 801ad6a:	e0ae      	b.n	801aeca <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801ad6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ad70:	49a6      	ldr	r1, [pc, #664]	@ (801b00c <etharp_find_entry+0x2d4>)
 801ad72:	4613      	mov	r3, r2
 801ad74:	005b      	lsls	r3, r3, #1
 801ad76:	4413      	add	r3, r2
 801ad78:	00db      	lsls	r3, r3, #3
 801ad7a:	440b      	add	r3, r1
 801ad7c:	3314      	adds	r3, #20
 801ad7e:	781b      	ldrb	r3, [r3, #0]
 801ad80:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801ad82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801ad86:	2b0a      	cmp	r3, #10
 801ad88:	d105      	bne.n	801ad96 <etharp_find_entry+0x5e>
 801ad8a:	7dfb      	ldrb	r3, [r7, #23]
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d102      	bne.n	801ad96 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801ad90:	8c3b      	ldrh	r3, [r7, #32]
 801ad92:	847b      	strh	r3, [r7, #34]	@ 0x22
 801ad94:	e095      	b.n	801aec2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801ad96:	7dfb      	ldrb	r3, [r7, #23]
 801ad98:	2b00      	cmp	r3, #0
 801ad9a:	f000 8092 	beq.w	801aec2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801ad9e:	7dfb      	ldrb	r3, [r7, #23]
 801ada0:	2b01      	cmp	r3, #1
 801ada2:	d009      	beq.n	801adb8 <etharp_find_entry+0x80>
 801ada4:	7dfb      	ldrb	r3, [r7, #23]
 801ada6:	2b01      	cmp	r3, #1
 801ada8:	d806      	bhi.n	801adb8 <etharp_find_entry+0x80>
 801adaa:	4b99      	ldr	r3, [pc, #612]	@ (801b010 <etharp_find_entry+0x2d8>)
 801adac:	f240 1223 	movw	r2, #291	@ 0x123
 801adb0:	4998      	ldr	r1, [pc, #608]	@ (801b014 <etharp_find_entry+0x2dc>)
 801adb2:	4899      	ldr	r0, [pc, #612]	@ (801b018 <etharp_find_entry+0x2e0>)
 801adb4:	f003 fe14 	bl	801e9e0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801adb8:	68fb      	ldr	r3, [r7, #12]
 801adba:	2b00      	cmp	r3, #0
 801adbc:	d020      	beq.n	801ae00 <etharp_find_entry+0xc8>
 801adbe:	68fb      	ldr	r3, [r7, #12]
 801adc0:	6819      	ldr	r1, [r3, #0]
 801adc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801adc6:	4891      	ldr	r0, [pc, #580]	@ (801b00c <etharp_find_entry+0x2d4>)
 801adc8:	4613      	mov	r3, r2
 801adca:	005b      	lsls	r3, r3, #1
 801adcc:	4413      	add	r3, r2
 801adce:	00db      	lsls	r3, r3, #3
 801add0:	4403      	add	r3, r0
 801add2:	3304      	adds	r3, #4
 801add4:	681b      	ldr	r3, [r3, #0]
 801add6:	4299      	cmp	r1, r3
 801add8:	d112      	bne.n	801ae00 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801adda:	687b      	ldr	r3, [r7, #4]
 801addc:	2b00      	cmp	r3, #0
 801adde:	d00c      	beq.n	801adfa <etharp_find_entry+0xc2>
 801ade0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ade4:	4989      	ldr	r1, [pc, #548]	@ (801b00c <etharp_find_entry+0x2d4>)
 801ade6:	4613      	mov	r3, r2
 801ade8:	005b      	lsls	r3, r3, #1
 801adea:	4413      	add	r3, r2
 801adec:	00db      	lsls	r3, r3, #3
 801adee:	440b      	add	r3, r1
 801adf0:	3308      	adds	r3, #8
 801adf2:	681b      	ldr	r3, [r3, #0]
 801adf4:	687a      	ldr	r2, [r7, #4]
 801adf6:	429a      	cmp	r2, r3
 801adf8:	d102      	bne.n	801ae00 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801adfa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801adfe:	e100      	b.n	801b002 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801ae00:	7dfb      	ldrb	r3, [r7, #23]
 801ae02:	2b01      	cmp	r3, #1
 801ae04:	d140      	bne.n	801ae88 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801ae06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ae0a:	4980      	ldr	r1, [pc, #512]	@ (801b00c <etharp_find_entry+0x2d4>)
 801ae0c:	4613      	mov	r3, r2
 801ae0e:	005b      	lsls	r3, r3, #1
 801ae10:	4413      	add	r3, r2
 801ae12:	00db      	lsls	r3, r3, #3
 801ae14:	440b      	add	r3, r1
 801ae16:	681b      	ldr	r3, [r3, #0]
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	d01a      	beq.n	801ae52 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801ae1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ae20:	497a      	ldr	r1, [pc, #488]	@ (801b00c <etharp_find_entry+0x2d4>)
 801ae22:	4613      	mov	r3, r2
 801ae24:	005b      	lsls	r3, r3, #1
 801ae26:	4413      	add	r3, r2
 801ae28:	00db      	lsls	r3, r3, #3
 801ae2a:	440b      	add	r3, r1
 801ae2c:	3312      	adds	r3, #18
 801ae2e:	881b      	ldrh	r3, [r3, #0]
 801ae30:	8bba      	ldrh	r2, [r7, #28]
 801ae32:	429a      	cmp	r2, r3
 801ae34:	d845      	bhi.n	801aec2 <etharp_find_entry+0x18a>
            old_queue = i;
 801ae36:	8c3b      	ldrh	r3, [r7, #32]
 801ae38:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801ae3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ae3e:	4973      	ldr	r1, [pc, #460]	@ (801b00c <etharp_find_entry+0x2d4>)
 801ae40:	4613      	mov	r3, r2
 801ae42:	005b      	lsls	r3, r3, #1
 801ae44:	4413      	add	r3, r2
 801ae46:	00db      	lsls	r3, r3, #3
 801ae48:	440b      	add	r3, r1
 801ae4a:	3312      	adds	r3, #18
 801ae4c:	881b      	ldrh	r3, [r3, #0]
 801ae4e:	83bb      	strh	r3, [r7, #28]
 801ae50:	e037      	b.n	801aec2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801ae52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ae56:	496d      	ldr	r1, [pc, #436]	@ (801b00c <etharp_find_entry+0x2d4>)
 801ae58:	4613      	mov	r3, r2
 801ae5a:	005b      	lsls	r3, r3, #1
 801ae5c:	4413      	add	r3, r2
 801ae5e:	00db      	lsls	r3, r3, #3
 801ae60:	440b      	add	r3, r1
 801ae62:	3312      	adds	r3, #18
 801ae64:	881b      	ldrh	r3, [r3, #0]
 801ae66:	8b7a      	ldrh	r2, [r7, #26]
 801ae68:	429a      	cmp	r2, r3
 801ae6a:	d82a      	bhi.n	801aec2 <etharp_find_entry+0x18a>
            old_pending = i;
 801ae6c:	8c3b      	ldrh	r3, [r7, #32]
 801ae6e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801ae70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ae74:	4965      	ldr	r1, [pc, #404]	@ (801b00c <etharp_find_entry+0x2d4>)
 801ae76:	4613      	mov	r3, r2
 801ae78:	005b      	lsls	r3, r3, #1
 801ae7a:	4413      	add	r3, r2
 801ae7c:	00db      	lsls	r3, r3, #3
 801ae7e:	440b      	add	r3, r1
 801ae80:	3312      	adds	r3, #18
 801ae82:	881b      	ldrh	r3, [r3, #0]
 801ae84:	837b      	strh	r3, [r7, #26]
 801ae86:	e01c      	b.n	801aec2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801ae88:	7dfb      	ldrb	r3, [r7, #23]
 801ae8a:	2b01      	cmp	r3, #1
 801ae8c:	d919      	bls.n	801aec2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801ae8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ae92:	495e      	ldr	r1, [pc, #376]	@ (801b00c <etharp_find_entry+0x2d4>)
 801ae94:	4613      	mov	r3, r2
 801ae96:	005b      	lsls	r3, r3, #1
 801ae98:	4413      	add	r3, r2
 801ae9a:	00db      	lsls	r3, r3, #3
 801ae9c:	440b      	add	r3, r1
 801ae9e:	3312      	adds	r3, #18
 801aea0:	881b      	ldrh	r3, [r3, #0]
 801aea2:	8b3a      	ldrh	r2, [r7, #24]
 801aea4:	429a      	cmp	r2, r3
 801aea6:	d80c      	bhi.n	801aec2 <etharp_find_entry+0x18a>
            old_stable = i;
 801aea8:	8c3b      	ldrh	r3, [r7, #32]
 801aeaa:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801aeac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aeb0:	4956      	ldr	r1, [pc, #344]	@ (801b00c <etharp_find_entry+0x2d4>)
 801aeb2:	4613      	mov	r3, r2
 801aeb4:	005b      	lsls	r3, r3, #1
 801aeb6:	4413      	add	r3, r2
 801aeb8:	00db      	lsls	r3, r3, #3
 801aeba:	440b      	add	r3, r1
 801aebc:	3312      	adds	r3, #18
 801aebe:	881b      	ldrh	r3, [r3, #0]
 801aec0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801aec2:	8c3b      	ldrh	r3, [r7, #32]
 801aec4:	3301      	adds	r3, #1
 801aec6:	b29b      	uxth	r3, r3
 801aec8:	843b      	strh	r3, [r7, #32]
 801aeca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801aece:	2b09      	cmp	r3, #9
 801aed0:	f77f af4c 	ble.w	801ad6c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801aed4:	7afb      	ldrb	r3, [r7, #11]
 801aed6:	f003 0302 	and.w	r3, r3, #2
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	d108      	bne.n	801aef0 <etharp_find_entry+0x1b8>
 801aede:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801aee2:	2b0a      	cmp	r3, #10
 801aee4:	d107      	bne.n	801aef6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801aee6:	7afb      	ldrb	r3, [r7, #11]
 801aee8:	f003 0301 	and.w	r3, r3, #1
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d102      	bne.n	801aef6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801aef0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801aef4:	e085      	b.n	801b002 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801aef6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801aefa:	2b09      	cmp	r3, #9
 801aefc:	dc02      	bgt.n	801af04 <etharp_find_entry+0x1cc>
    i = empty;
 801aefe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801af00:	843b      	strh	r3, [r7, #32]
 801af02:	e039      	b.n	801af78 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801af04:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801af08:	2b09      	cmp	r3, #9
 801af0a:	dc14      	bgt.n	801af36 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801af0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801af0e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801af10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801af14:	493d      	ldr	r1, [pc, #244]	@ (801b00c <etharp_find_entry+0x2d4>)
 801af16:	4613      	mov	r3, r2
 801af18:	005b      	lsls	r3, r3, #1
 801af1a:	4413      	add	r3, r2
 801af1c:	00db      	lsls	r3, r3, #3
 801af1e:	440b      	add	r3, r1
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	2b00      	cmp	r3, #0
 801af24:	d018      	beq.n	801af58 <etharp_find_entry+0x220>
 801af26:	4b3a      	ldr	r3, [pc, #232]	@ (801b010 <etharp_find_entry+0x2d8>)
 801af28:	f240 126d 	movw	r2, #365	@ 0x16d
 801af2c:	493b      	ldr	r1, [pc, #236]	@ (801b01c <etharp_find_entry+0x2e4>)
 801af2e:	483a      	ldr	r0, [pc, #232]	@ (801b018 <etharp_find_entry+0x2e0>)
 801af30:	f003 fd56 	bl	801e9e0 <iprintf>
 801af34:	e010      	b.n	801af58 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801af36:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801af3a:	2b09      	cmp	r3, #9
 801af3c:	dc02      	bgt.n	801af44 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801af3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801af40:	843b      	strh	r3, [r7, #32]
 801af42:	e009      	b.n	801af58 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801af44:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801af48:	2b09      	cmp	r3, #9
 801af4a:	dc02      	bgt.n	801af52 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801af4c:	8bfb      	ldrh	r3, [r7, #30]
 801af4e:	843b      	strh	r3, [r7, #32]
 801af50:	e002      	b.n	801af58 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801af52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801af56:	e054      	b.n	801b002 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801af58:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801af5c:	2b09      	cmp	r3, #9
 801af5e:	dd06      	ble.n	801af6e <etharp_find_entry+0x236>
 801af60:	4b2b      	ldr	r3, [pc, #172]	@ (801b010 <etharp_find_entry+0x2d8>)
 801af62:	f240 127f 	movw	r2, #383	@ 0x17f
 801af66:	492e      	ldr	r1, [pc, #184]	@ (801b020 <etharp_find_entry+0x2e8>)
 801af68:	482b      	ldr	r0, [pc, #172]	@ (801b018 <etharp_find_entry+0x2e0>)
 801af6a:	f003 fd39 	bl	801e9e0 <iprintf>
    etharp_free_entry(i);
 801af6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801af72:	4618      	mov	r0, r3
 801af74:	f7ff fe06 	bl	801ab84 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801af78:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801af7c:	2b09      	cmp	r3, #9
 801af7e:	dd06      	ble.n	801af8e <etharp_find_entry+0x256>
 801af80:	4b23      	ldr	r3, [pc, #140]	@ (801b010 <etharp_find_entry+0x2d8>)
 801af82:	f240 1283 	movw	r2, #387	@ 0x183
 801af86:	4926      	ldr	r1, [pc, #152]	@ (801b020 <etharp_find_entry+0x2e8>)
 801af88:	4823      	ldr	r0, [pc, #140]	@ (801b018 <etharp_find_entry+0x2e0>)
 801af8a:	f003 fd29 	bl	801e9e0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801af8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801af92:	491e      	ldr	r1, [pc, #120]	@ (801b00c <etharp_find_entry+0x2d4>)
 801af94:	4613      	mov	r3, r2
 801af96:	005b      	lsls	r3, r3, #1
 801af98:	4413      	add	r3, r2
 801af9a:	00db      	lsls	r3, r3, #3
 801af9c:	440b      	add	r3, r1
 801af9e:	3314      	adds	r3, #20
 801afa0:	781b      	ldrb	r3, [r3, #0]
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	d006      	beq.n	801afb4 <etharp_find_entry+0x27c>
 801afa6:	4b1a      	ldr	r3, [pc, #104]	@ (801b010 <etharp_find_entry+0x2d8>)
 801afa8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801afac:	491d      	ldr	r1, [pc, #116]	@ (801b024 <etharp_find_entry+0x2ec>)
 801afae:	481a      	ldr	r0, [pc, #104]	@ (801b018 <etharp_find_entry+0x2e0>)
 801afb0:	f003 fd16 	bl	801e9e0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801afb4:	68fb      	ldr	r3, [r7, #12]
 801afb6:	2b00      	cmp	r3, #0
 801afb8:	d00b      	beq.n	801afd2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801afba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801afbe:	68fb      	ldr	r3, [r7, #12]
 801afc0:	6819      	ldr	r1, [r3, #0]
 801afc2:	4812      	ldr	r0, [pc, #72]	@ (801b00c <etharp_find_entry+0x2d4>)
 801afc4:	4613      	mov	r3, r2
 801afc6:	005b      	lsls	r3, r3, #1
 801afc8:	4413      	add	r3, r2
 801afca:	00db      	lsls	r3, r3, #3
 801afcc:	4403      	add	r3, r0
 801afce:	3304      	adds	r3, #4
 801afd0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801afd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801afd6:	490d      	ldr	r1, [pc, #52]	@ (801b00c <etharp_find_entry+0x2d4>)
 801afd8:	4613      	mov	r3, r2
 801afda:	005b      	lsls	r3, r3, #1
 801afdc:	4413      	add	r3, r2
 801afde:	00db      	lsls	r3, r3, #3
 801afe0:	440b      	add	r3, r1
 801afe2:	3312      	adds	r3, #18
 801afe4:	2200      	movs	r2, #0
 801afe6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801afe8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801afec:	4907      	ldr	r1, [pc, #28]	@ (801b00c <etharp_find_entry+0x2d4>)
 801afee:	4613      	mov	r3, r2
 801aff0:	005b      	lsls	r3, r3, #1
 801aff2:	4413      	add	r3, r2
 801aff4:	00db      	lsls	r3, r3, #3
 801aff6:	440b      	add	r3, r1
 801aff8:	3308      	adds	r3, #8
 801affa:	687a      	ldr	r2, [r7, #4]
 801affc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801affe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801b002:	4618      	mov	r0, r3
 801b004:	3728      	adds	r7, #40	@ 0x28
 801b006:	46bd      	mov	sp, r7
 801b008:	bd80      	pop	{r7, pc}
 801b00a:	bf00      	nop
 801b00c:	20004830 	.word	0x20004830
 801b010:	08022b54 	.word	0x08022b54
 801b014:	08022b8c 	.word	0x08022b8c
 801b018:	08022bcc 	.word	0x08022bcc
 801b01c:	08022bf4 	.word	0x08022bf4
 801b020:	08022c0c 	.word	0x08022c0c
 801b024:	08022c20 	.word	0x08022c20

0801b028 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801b028:	b580      	push	{r7, lr}
 801b02a:	b088      	sub	sp, #32
 801b02c:	af02      	add	r7, sp, #8
 801b02e:	60f8      	str	r0, [r7, #12]
 801b030:	60b9      	str	r1, [r7, #8]
 801b032:	607a      	str	r2, [r7, #4]
 801b034:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801b036:	68fb      	ldr	r3, [r7, #12]
 801b038:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801b03c:	2b06      	cmp	r3, #6
 801b03e:	d006      	beq.n	801b04e <etharp_update_arp_entry+0x26>
 801b040:	4b48      	ldr	r3, [pc, #288]	@ (801b164 <etharp_update_arp_entry+0x13c>)
 801b042:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801b046:	4948      	ldr	r1, [pc, #288]	@ (801b168 <etharp_update_arp_entry+0x140>)
 801b048:	4848      	ldr	r0, [pc, #288]	@ (801b16c <etharp_update_arp_entry+0x144>)
 801b04a:	f003 fcc9 	bl	801e9e0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801b04e:	68bb      	ldr	r3, [r7, #8]
 801b050:	2b00      	cmp	r3, #0
 801b052:	d012      	beq.n	801b07a <etharp_update_arp_entry+0x52>
 801b054:	68bb      	ldr	r3, [r7, #8]
 801b056:	681b      	ldr	r3, [r3, #0]
 801b058:	2b00      	cmp	r3, #0
 801b05a:	d00e      	beq.n	801b07a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b05c:	68bb      	ldr	r3, [r7, #8]
 801b05e:	681b      	ldr	r3, [r3, #0]
 801b060:	68f9      	ldr	r1, [r7, #12]
 801b062:	4618      	mov	r0, r3
 801b064:	f001 fcfc 	bl	801ca60 <ip4_addr_isbroadcast_u32>
 801b068:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	d105      	bne.n	801b07a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801b06e:	68bb      	ldr	r3, [r7, #8]
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b076:	2be0      	cmp	r3, #224	@ 0xe0
 801b078:	d102      	bne.n	801b080 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b07a:	f06f 030f 	mvn.w	r3, #15
 801b07e:	e06c      	b.n	801b15a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801b080:	78fb      	ldrb	r3, [r7, #3]
 801b082:	68fa      	ldr	r2, [r7, #12]
 801b084:	4619      	mov	r1, r3
 801b086:	68b8      	ldr	r0, [r7, #8]
 801b088:	f7ff fe56 	bl	801ad38 <etharp_find_entry>
 801b08c:	4603      	mov	r3, r0
 801b08e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801b090:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b094:	2b00      	cmp	r3, #0
 801b096:	da02      	bge.n	801b09e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801b098:	8afb      	ldrh	r3, [r7, #22]
 801b09a:	b25b      	sxtb	r3, r3
 801b09c:	e05d      	b.n	801b15a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801b09e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b0a2:	4933      	ldr	r1, [pc, #204]	@ (801b170 <etharp_update_arp_entry+0x148>)
 801b0a4:	4613      	mov	r3, r2
 801b0a6:	005b      	lsls	r3, r3, #1
 801b0a8:	4413      	add	r3, r2
 801b0aa:	00db      	lsls	r3, r3, #3
 801b0ac:	440b      	add	r3, r1
 801b0ae:	3314      	adds	r3, #20
 801b0b0:	2202      	movs	r2, #2
 801b0b2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801b0b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b0b8:	492d      	ldr	r1, [pc, #180]	@ (801b170 <etharp_update_arp_entry+0x148>)
 801b0ba:	4613      	mov	r3, r2
 801b0bc:	005b      	lsls	r3, r3, #1
 801b0be:	4413      	add	r3, r2
 801b0c0:	00db      	lsls	r3, r3, #3
 801b0c2:	440b      	add	r3, r1
 801b0c4:	3308      	adds	r3, #8
 801b0c6:	68fa      	ldr	r2, [r7, #12]
 801b0c8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801b0ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b0ce:	4613      	mov	r3, r2
 801b0d0:	005b      	lsls	r3, r3, #1
 801b0d2:	4413      	add	r3, r2
 801b0d4:	00db      	lsls	r3, r3, #3
 801b0d6:	3308      	adds	r3, #8
 801b0d8:	4a25      	ldr	r2, [pc, #148]	@ (801b170 <etharp_update_arp_entry+0x148>)
 801b0da:	4413      	add	r3, r2
 801b0dc:	3304      	adds	r3, #4
 801b0de:	2206      	movs	r2, #6
 801b0e0:	6879      	ldr	r1, [r7, #4]
 801b0e2:	4618      	mov	r0, r3
 801b0e4:	f003 ff2f 	bl	801ef46 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801b0e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b0ec:	4920      	ldr	r1, [pc, #128]	@ (801b170 <etharp_update_arp_entry+0x148>)
 801b0ee:	4613      	mov	r3, r2
 801b0f0:	005b      	lsls	r3, r3, #1
 801b0f2:	4413      	add	r3, r2
 801b0f4:	00db      	lsls	r3, r3, #3
 801b0f6:	440b      	add	r3, r1
 801b0f8:	3312      	adds	r3, #18
 801b0fa:	2200      	movs	r2, #0
 801b0fc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801b0fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b102:	491b      	ldr	r1, [pc, #108]	@ (801b170 <etharp_update_arp_entry+0x148>)
 801b104:	4613      	mov	r3, r2
 801b106:	005b      	lsls	r3, r3, #1
 801b108:	4413      	add	r3, r2
 801b10a:	00db      	lsls	r3, r3, #3
 801b10c:	440b      	add	r3, r1
 801b10e:	681b      	ldr	r3, [r3, #0]
 801b110:	2b00      	cmp	r3, #0
 801b112:	d021      	beq.n	801b158 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801b114:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b118:	4915      	ldr	r1, [pc, #84]	@ (801b170 <etharp_update_arp_entry+0x148>)
 801b11a:	4613      	mov	r3, r2
 801b11c:	005b      	lsls	r3, r3, #1
 801b11e:	4413      	add	r3, r2
 801b120:	00db      	lsls	r3, r3, #3
 801b122:	440b      	add	r3, r1
 801b124:	681b      	ldr	r3, [r3, #0]
 801b126:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801b128:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b12c:	4910      	ldr	r1, [pc, #64]	@ (801b170 <etharp_update_arp_entry+0x148>)
 801b12e:	4613      	mov	r3, r2
 801b130:	005b      	lsls	r3, r3, #1
 801b132:	4413      	add	r3, r2
 801b134:	00db      	lsls	r3, r3, #3
 801b136:	440b      	add	r3, r1
 801b138:	2200      	movs	r2, #0
 801b13a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801b13c:	68fb      	ldr	r3, [r7, #12]
 801b13e:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 801b142:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b146:	9300      	str	r3, [sp, #0]
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	6939      	ldr	r1, [r7, #16]
 801b14c:	68f8      	ldr	r0, [r7, #12]
 801b14e:	f002 fb95 	bl	801d87c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801b152:	6938      	ldr	r0, [r7, #16]
 801b154:	f7f7 fa24 	bl	80125a0 <pbuf_free>
  }
  return ERR_OK;
 801b158:	2300      	movs	r3, #0
}
 801b15a:	4618      	mov	r0, r3
 801b15c:	3718      	adds	r7, #24
 801b15e:	46bd      	mov	sp, r7
 801b160:	bd80      	pop	{r7, pc}
 801b162:	bf00      	nop
 801b164:	08022b54 	.word	0x08022b54
 801b168:	08022c4c 	.word	0x08022c4c
 801b16c:	08022bcc 	.word	0x08022bcc
 801b170:	20004830 	.word	0x20004830

0801b174 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801b174:	b580      	push	{r7, lr}
 801b176:	b084      	sub	sp, #16
 801b178:	af00      	add	r7, sp, #0
 801b17a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b17c:	2300      	movs	r3, #0
 801b17e:	60fb      	str	r3, [r7, #12]
 801b180:	e01e      	b.n	801b1c0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801b182:	4913      	ldr	r1, [pc, #76]	@ (801b1d0 <etharp_cleanup_netif+0x5c>)
 801b184:	68fa      	ldr	r2, [r7, #12]
 801b186:	4613      	mov	r3, r2
 801b188:	005b      	lsls	r3, r3, #1
 801b18a:	4413      	add	r3, r2
 801b18c:	00db      	lsls	r3, r3, #3
 801b18e:	440b      	add	r3, r1
 801b190:	3314      	adds	r3, #20
 801b192:	781b      	ldrb	r3, [r3, #0]
 801b194:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801b196:	7afb      	ldrb	r3, [r7, #11]
 801b198:	2b00      	cmp	r3, #0
 801b19a:	d00e      	beq.n	801b1ba <etharp_cleanup_netif+0x46>
 801b19c:	490c      	ldr	r1, [pc, #48]	@ (801b1d0 <etharp_cleanup_netif+0x5c>)
 801b19e:	68fa      	ldr	r2, [r7, #12]
 801b1a0:	4613      	mov	r3, r2
 801b1a2:	005b      	lsls	r3, r3, #1
 801b1a4:	4413      	add	r3, r2
 801b1a6:	00db      	lsls	r3, r3, #3
 801b1a8:	440b      	add	r3, r1
 801b1aa:	3308      	adds	r3, #8
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	687a      	ldr	r2, [r7, #4]
 801b1b0:	429a      	cmp	r2, r3
 801b1b2:	d102      	bne.n	801b1ba <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801b1b4:	68f8      	ldr	r0, [r7, #12]
 801b1b6:	f7ff fce5 	bl	801ab84 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b1ba:	68fb      	ldr	r3, [r7, #12]
 801b1bc:	3301      	adds	r3, #1
 801b1be:	60fb      	str	r3, [r7, #12]
 801b1c0:	68fb      	ldr	r3, [r7, #12]
 801b1c2:	2b09      	cmp	r3, #9
 801b1c4:	dddd      	ble.n	801b182 <etharp_cleanup_netif+0xe>
    }
  }
}
 801b1c6:	bf00      	nop
 801b1c8:	bf00      	nop
 801b1ca:	3710      	adds	r7, #16
 801b1cc:	46bd      	mov	sp, r7
 801b1ce:	bd80      	pop	{r7, pc}
 801b1d0:	20004830 	.word	0x20004830

0801b1d4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801b1d4:	b5b0      	push	{r4, r5, r7, lr}
 801b1d6:	b08a      	sub	sp, #40	@ 0x28
 801b1d8:	af04      	add	r7, sp, #16
 801b1da:	6078      	str	r0, [r7, #4]
 801b1dc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801b1de:	683b      	ldr	r3, [r7, #0]
 801b1e0:	2b00      	cmp	r3, #0
 801b1e2:	d107      	bne.n	801b1f4 <etharp_input+0x20>
 801b1e4:	4b3f      	ldr	r3, [pc, #252]	@ (801b2e4 <etharp_input+0x110>)
 801b1e6:	f240 228a 	movw	r2, #650	@ 0x28a
 801b1ea:	493f      	ldr	r1, [pc, #252]	@ (801b2e8 <etharp_input+0x114>)
 801b1ec:	483f      	ldr	r0, [pc, #252]	@ (801b2ec <etharp_input+0x118>)
 801b1ee:	f003 fbf7 	bl	801e9e0 <iprintf>
 801b1f2:	e074      	b.n	801b2de <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	685b      	ldr	r3, [r3, #4]
 801b1f8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b1fa:	693b      	ldr	r3, [r7, #16]
 801b1fc:	881b      	ldrh	r3, [r3, #0]
 801b1fe:	b29b      	uxth	r3, r3
 801b200:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b204:	d10c      	bne.n	801b220 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b206:	693b      	ldr	r3, [r7, #16]
 801b208:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b20a:	2b06      	cmp	r3, #6
 801b20c:	d108      	bne.n	801b220 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b20e:	693b      	ldr	r3, [r7, #16]
 801b210:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b212:	2b04      	cmp	r3, #4
 801b214:	d104      	bne.n	801b220 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801b216:	693b      	ldr	r3, [r7, #16]
 801b218:	885b      	ldrh	r3, [r3, #2]
 801b21a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b21c:	2b08      	cmp	r3, #8
 801b21e:	d003      	beq.n	801b228 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801b220:	6878      	ldr	r0, [r7, #4]
 801b222:	f7f7 f9bd 	bl	80125a0 <pbuf_free>
    return;
 801b226:	e05a      	b.n	801b2de <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801b228:	693b      	ldr	r3, [r7, #16]
 801b22a:	330e      	adds	r3, #14
 801b22c:	681b      	ldr	r3, [r3, #0]
 801b22e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801b230:	693b      	ldr	r3, [r7, #16]
 801b232:	3318      	adds	r3, #24
 801b234:	681b      	ldr	r3, [r3, #0]
 801b236:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b238:	683b      	ldr	r3, [r7, #0]
 801b23a:	3304      	adds	r3, #4
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	2b00      	cmp	r3, #0
 801b240:	d102      	bne.n	801b248 <etharp_input+0x74>
    for_us = 0;
 801b242:	2300      	movs	r3, #0
 801b244:	75fb      	strb	r3, [r7, #23]
 801b246:	e009      	b.n	801b25c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801b248:	68ba      	ldr	r2, [r7, #8]
 801b24a:	683b      	ldr	r3, [r7, #0]
 801b24c:	3304      	adds	r3, #4
 801b24e:	681b      	ldr	r3, [r3, #0]
 801b250:	429a      	cmp	r2, r3
 801b252:	bf0c      	ite	eq
 801b254:	2301      	moveq	r3, #1
 801b256:	2300      	movne	r3, #0
 801b258:	b2db      	uxtb	r3, r3
 801b25a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801b25c:	693b      	ldr	r3, [r7, #16]
 801b25e:	f103 0208 	add.w	r2, r3, #8
 801b262:	7dfb      	ldrb	r3, [r7, #23]
 801b264:	2b00      	cmp	r3, #0
 801b266:	d001      	beq.n	801b26c <etharp_input+0x98>
 801b268:	2301      	movs	r3, #1
 801b26a:	e000      	b.n	801b26e <etharp_input+0x9a>
 801b26c:	2302      	movs	r3, #2
 801b26e:	f107 010c 	add.w	r1, r7, #12
 801b272:	6838      	ldr	r0, [r7, #0]
 801b274:	f7ff fed8 	bl	801b028 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801b278:	693b      	ldr	r3, [r7, #16]
 801b27a:	88db      	ldrh	r3, [r3, #6]
 801b27c:	b29b      	uxth	r3, r3
 801b27e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b282:	d003      	beq.n	801b28c <etharp_input+0xb8>
 801b284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b288:	d01e      	beq.n	801b2c8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801b28a:	e025      	b.n	801b2d8 <etharp_input+0x104>
      if (for_us) {
 801b28c:	7dfb      	ldrb	r3, [r7, #23]
 801b28e:	2b00      	cmp	r3, #0
 801b290:	d021      	beq.n	801b2d6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801b292:	683b      	ldr	r3, [r7, #0]
 801b294:	f103 0036 	add.w	r0, r3, #54	@ 0x36
 801b298:	693b      	ldr	r3, [r7, #16]
 801b29a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801b29e:	683b      	ldr	r3, [r7, #0]
 801b2a0:	f103 0536 	add.w	r5, r3, #54	@ 0x36
 801b2a4:	683b      	ldr	r3, [r7, #0]
 801b2a6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801b2a8:	693a      	ldr	r2, [r7, #16]
 801b2aa:	3208      	adds	r2, #8
        etharp_raw(netif,
 801b2ac:	2102      	movs	r1, #2
 801b2ae:	9103      	str	r1, [sp, #12]
 801b2b0:	f107 010c 	add.w	r1, r7, #12
 801b2b4:	9102      	str	r1, [sp, #8]
 801b2b6:	9201      	str	r2, [sp, #4]
 801b2b8:	9300      	str	r3, [sp, #0]
 801b2ba:	462b      	mov	r3, r5
 801b2bc:	4622      	mov	r2, r4
 801b2be:	4601      	mov	r1, r0
 801b2c0:	6838      	ldr	r0, [r7, #0]
 801b2c2:	f000 faef 	bl	801b8a4 <etharp_raw>
      break;
 801b2c6:	e006      	b.n	801b2d6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801b2c8:	f107 030c 	add.w	r3, r7, #12
 801b2cc:	4619      	mov	r1, r3
 801b2ce:	6838      	ldr	r0, [r7, #0]
 801b2d0:	f7fe fa02 	bl	80196d8 <dhcp_arp_reply>
      break;
 801b2d4:	e000      	b.n	801b2d8 <etharp_input+0x104>
      break;
 801b2d6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801b2d8:	6878      	ldr	r0, [r7, #4]
 801b2da:	f7f7 f961 	bl	80125a0 <pbuf_free>
}
 801b2de:	3718      	adds	r7, #24
 801b2e0:	46bd      	mov	sp, r7
 801b2e2:	bdb0      	pop	{r4, r5, r7, pc}
 801b2e4:	08022b54 	.word	0x08022b54
 801b2e8:	08022ca4 	.word	0x08022ca4
 801b2ec:	08022bcc 	.word	0x08022bcc

0801b2f0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801b2f0:	b580      	push	{r7, lr}
 801b2f2:	b086      	sub	sp, #24
 801b2f4:	af02      	add	r7, sp, #8
 801b2f6:	60f8      	str	r0, [r7, #12]
 801b2f8:	60b9      	str	r1, [r7, #8]
 801b2fa:	4613      	mov	r3, r2
 801b2fc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801b2fe:	79fa      	ldrb	r2, [r7, #7]
 801b300:	4944      	ldr	r1, [pc, #272]	@ (801b414 <etharp_output_to_arp_index+0x124>)
 801b302:	4613      	mov	r3, r2
 801b304:	005b      	lsls	r3, r3, #1
 801b306:	4413      	add	r3, r2
 801b308:	00db      	lsls	r3, r3, #3
 801b30a:	440b      	add	r3, r1
 801b30c:	3314      	adds	r3, #20
 801b30e:	781b      	ldrb	r3, [r3, #0]
 801b310:	2b01      	cmp	r3, #1
 801b312:	d806      	bhi.n	801b322 <etharp_output_to_arp_index+0x32>
 801b314:	4b40      	ldr	r3, [pc, #256]	@ (801b418 <etharp_output_to_arp_index+0x128>)
 801b316:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801b31a:	4940      	ldr	r1, [pc, #256]	@ (801b41c <etharp_output_to_arp_index+0x12c>)
 801b31c:	4840      	ldr	r0, [pc, #256]	@ (801b420 <etharp_output_to_arp_index+0x130>)
 801b31e:	f003 fb5f 	bl	801e9e0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801b322:	79fa      	ldrb	r2, [r7, #7]
 801b324:	493b      	ldr	r1, [pc, #236]	@ (801b414 <etharp_output_to_arp_index+0x124>)
 801b326:	4613      	mov	r3, r2
 801b328:	005b      	lsls	r3, r3, #1
 801b32a:	4413      	add	r3, r2
 801b32c:	00db      	lsls	r3, r3, #3
 801b32e:	440b      	add	r3, r1
 801b330:	3314      	adds	r3, #20
 801b332:	781b      	ldrb	r3, [r3, #0]
 801b334:	2b02      	cmp	r3, #2
 801b336:	d153      	bne.n	801b3e0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801b338:	79fa      	ldrb	r2, [r7, #7]
 801b33a:	4936      	ldr	r1, [pc, #216]	@ (801b414 <etharp_output_to_arp_index+0x124>)
 801b33c:	4613      	mov	r3, r2
 801b33e:	005b      	lsls	r3, r3, #1
 801b340:	4413      	add	r3, r2
 801b342:	00db      	lsls	r3, r3, #3
 801b344:	440b      	add	r3, r1
 801b346:	3312      	adds	r3, #18
 801b348:	881b      	ldrh	r3, [r3, #0]
 801b34a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801b34e:	d919      	bls.n	801b384 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801b350:	79fa      	ldrb	r2, [r7, #7]
 801b352:	4613      	mov	r3, r2
 801b354:	005b      	lsls	r3, r3, #1
 801b356:	4413      	add	r3, r2
 801b358:	00db      	lsls	r3, r3, #3
 801b35a:	4a2e      	ldr	r2, [pc, #184]	@ (801b414 <etharp_output_to_arp_index+0x124>)
 801b35c:	4413      	add	r3, r2
 801b35e:	3304      	adds	r3, #4
 801b360:	4619      	mov	r1, r3
 801b362:	68f8      	ldr	r0, [r7, #12]
 801b364:	f000 fb4c 	bl	801ba00 <etharp_request>
 801b368:	4603      	mov	r3, r0
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d138      	bne.n	801b3e0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b36e:	79fa      	ldrb	r2, [r7, #7]
 801b370:	4928      	ldr	r1, [pc, #160]	@ (801b414 <etharp_output_to_arp_index+0x124>)
 801b372:	4613      	mov	r3, r2
 801b374:	005b      	lsls	r3, r3, #1
 801b376:	4413      	add	r3, r2
 801b378:	00db      	lsls	r3, r3, #3
 801b37a:	440b      	add	r3, r1
 801b37c:	3314      	adds	r3, #20
 801b37e:	2203      	movs	r2, #3
 801b380:	701a      	strb	r2, [r3, #0]
 801b382:	e02d      	b.n	801b3e0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801b384:	79fa      	ldrb	r2, [r7, #7]
 801b386:	4923      	ldr	r1, [pc, #140]	@ (801b414 <etharp_output_to_arp_index+0x124>)
 801b388:	4613      	mov	r3, r2
 801b38a:	005b      	lsls	r3, r3, #1
 801b38c:	4413      	add	r3, r2
 801b38e:	00db      	lsls	r3, r3, #3
 801b390:	440b      	add	r3, r1
 801b392:	3312      	adds	r3, #18
 801b394:	881b      	ldrh	r3, [r3, #0]
 801b396:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801b39a:	d321      	bcc.n	801b3e0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801b39c:	79fa      	ldrb	r2, [r7, #7]
 801b39e:	4613      	mov	r3, r2
 801b3a0:	005b      	lsls	r3, r3, #1
 801b3a2:	4413      	add	r3, r2
 801b3a4:	00db      	lsls	r3, r3, #3
 801b3a6:	4a1b      	ldr	r2, [pc, #108]	@ (801b414 <etharp_output_to_arp_index+0x124>)
 801b3a8:	4413      	add	r3, r2
 801b3aa:	1d19      	adds	r1, r3, #4
 801b3ac:	79fa      	ldrb	r2, [r7, #7]
 801b3ae:	4613      	mov	r3, r2
 801b3b0:	005b      	lsls	r3, r3, #1
 801b3b2:	4413      	add	r3, r2
 801b3b4:	00db      	lsls	r3, r3, #3
 801b3b6:	3308      	adds	r3, #8
 801b3b8:	4a16      	ldr	r2, [pc, #88]	@ (801b414 <etharp_output_to_arp_index+0x124>)
 801b3ba:	4413      	add	r3, r2
 801b3bc:	3304      	adds	r3, #4
 801b3be:	461a      	mov	r2, r3
 801b3c0:	68f8      	ldr	r0, [r7, #12]
 801b3c2:	f000 fafb 	bl	801b9bc <etharp_request_dst>
 801b3c6:	4603      	mov	r3, r0
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	d109      	bne.n	801b3e0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b3cc:	79fa      	ldrb	r2, [r7, #7]
 801b3ce:	4911      	ldr	r1, [pc, #68]	@ (801b414 <etharp_output_to_arp_index+0x124>)
 801b3d0:	4613      	mov	r3, r2
 801b3d2:	005b      	lsls	r3, r3, #1
 801b3d4:	4413      	add	r3, r2
 801b3d6:	00db      	lsls	r3, r3, #3
 801b3d8:	440b      	add	r3, r1
 801b3da:	3314      	adds	r3, #20
 801b3dc:	2203      	movs	r2, #3
 801b3de:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801b3e0:	68fb      	ldr	r3, [r7, #12]
 801b3e2:	f103 0136 	add.w	r1, r3, #54	@ 0x36
 801b3e6:	79fa      	ldrb	r2, [r7, #7]
 801b3e8:	4613      	mov	r3, r2
 801b3ea:	005b      	lsls	r3, r3, #1
 801b3ec:	4413      	add	r3, r2
 801b3ee:	00db      	lsls	r3, r3, #3
 801b3f0:	3308      	adds	r3, #8
 801b3f2:	4a08      	ldr	r2, [pc, #32]	@ (801b414 <etharp_output_to_arp_index+0x124>)
 801b3f4:	4413      	add	r3, r2
 801b3f6:	3304      	adds	r3, #4
 801b3f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b3fc:	9200      	str	r2, [sp, #0]
 801b3fe:	460a      	mov	r2, r1
 801b400:	68b9      	ldr	r1, [r7, #8]
 801b402:	68f8      	ldr	r0, [r7, #12]
 801b404:	f002 fa3a 	bl	801d87c <ethernet_output>
 801b408:	4603      	mov	r3, r0
}
 801b40a:	4618      	mov	r0, r3
 801b40c:	3710      	adds	r7, #16
 801b40e:	46bd      	mov	sp, r7
 801b410:	bd80      	pop	{r7, pc}
 801b412:	bf00      	nop
 801b414:	20004830 	.word	0x20004830
 801b418:	08022b54 	.word	0x08022b54
 801b41c:	08022cc4 	.word	0x08022cc4
 801b420:	08022bcc 	.word	0x08022bcc

0801b424 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801b424:	b580      	push	{r7, lr}
 801b426:	b08a      	sub	sp, #40	@ 0x28
 801b428:	af02      	add	r7, sp, #8
 801b42a:	60f8      	str	r0, [r7, #12]
 801b42c:	60b9      	str	r1, [r7, #8]
 801b42e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b434:	68fb      	ldr	r3, [r7, #12]
 801b436:	2b00      	cmp	r3, #0
 801b438:	d106      	bne.n	801b448 <etharp_output+0x24>
 801b43a:	4b73      	ldr	r3, [pc, #460]	@ (801b608 <etharp_output+0x1e4>)
 801b43c:	f240 321e 	movw	r2, #798	@ 0x31e
 801b440:	4972      	ldr	r1, [pc, #456]	@ (801b60c <etharp_output+0x1e8>)
 801b442:	4873      	ldr	r0, [pc, #460]	@ (801b610 <etharp_output+0x1ec>)
 801b444:	f003 facc 	bl	801e9e0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801b448:	68bb      	ldr	r3, [r7, #8]
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d106      	bne.n	801b45c <etharp_output+0x38>
 801b44e:	4b6e      	ldr	r3, [pc, #440]	@ (801b608 <etharp_output+0x1e4>)
 801b450:	f240 321f 	movw	r2, #799	@ 0x31f
 801b454:	496f      	ldr	r1, [pc, #444]	@ (801b614 <etharp_output+0x1f0>)
 801b456:	486e      	ldr	r0, [pc, #440]	@ (801b610 <etharp_output+0x1ec>)
 801b458:	f003 fac2 	bl	801e9e0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801b45c:	687b      	ldr	r3, [r7, #4]
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d106      	bne.n	801b470 <etharp_output+0x4c>
 801b462:	4b69      	ldr	r3, [pc, #420]	@ (801b608 <etharp_output+0x1e4>)
 801b464:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801b468:	496b      	ldr	r1, [pc, #428]	@ (801b618 <etharp_output+0x1f4>)
 801b46a:	4869      	ldr	r0, [pc, #420]	@ (801b610 <etharp_output+0x1ec>)
 801b46c:	f003 fab8 	bl	801e9e0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	68f9      	ldr	r1, [r7, #12]
 801b476:	4618      	mov	r0, r3
 801b478:	f001 faf2 	bl	801ca60 <ip4_addr_isbroadcast_u32>
 801b47c:	4603      	mov	r3, r0
 801b47e:	2b00      	cmp	r3, #0
 801b480:	d002      	beq.n	801b488 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801b482:	4b66      	ldr	r3, [pc, #408]	@ (801b61c <etharp_output+0x1f8>)
 801b484:	61fb      	str	r3, [r7, #28]
 801b486:	e0af      	b.n	801b5e8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	681b      	ldr	r3, [r3, #0]
 801b48c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b490:	2be0      	cmp	r3, #224	@ 0xe0
 801b492:	d118      	bne.n	801b4c6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801b494:	2301      	movs	r3, #1
 801b496:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801b498:	2300      	movs	r3, #0
 801b49a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801b49c:	235e      	movs	r3, #94	@ 0x5e
 801b49e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	3301      	adds	r3, #1
 801b4a4:	781b      	ldrb	r3, [r3, #0]
 801b4a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b4aa:	b2db      	uxtb	r3, r3
 801b4ac:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	3302      	adds	r3, #2
 801b4b2:	781b      	ldrb	r3, [r3, #0]
 801b4b4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801b4b6:	687b      	ldr	r3, [r7, #4]
 801b4b8:	3303      	adds	r3, #3
 801b4ba:	781b      	ldrb	r3, [r3, #0]
 801b4bc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801b4be:	f107 0310 	add.w	r3, r7, #16
 801b4c2:	61fb      	str	r3, [r7, #28]
 801b4c4:	e090      	b.n	801b5e8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	681a      	ldr	r2, [r3, #0]
 801b4ca:	68fb      	ldr	r3, [r7, #12]
 801b4cc:	3304      	adds	r3, #4
 801b4ce:	681b      	ldr	r3, [r3, #0]
 801b4d0:	405a      	eors	r2, r3
 801b4d2:	68fb      	ldr	r3, [r7, #12]
 801b4d4:	3308      	adds	r3, #8
 801b4d6:	681b      	ldr	r3, [r3, #0]
 801b4d8:	4013      	ands	r3, r2
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	d012      	beq.n	801b504 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801b4de:	687b      	ldr	r3, [r7, #4]
 801b4e0:	681b      	ldr	r3, [r3, #0]
 801b4e2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b4e4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801b4e8:	4293      	cmp	r3, r2
 801b4ea:	d00b      	beq.n	801b504 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801b4ec:	68fb      	ldr	r3, [r7, #12]
 801b4ee:	330c      	adds	r3, #12
 801b4f0:	681b      	ldr	r3, [r3, #0]
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	d003      	beq.n	801b4fe <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801b4f6:	68fb      	ldr	r3, [r7, #12]
 801b4f8:	330c      	adds	r3, #12
 801b4fa:	61bb      	str	r3, [r7, #24]
 801b4fc:	e002      	b.n	801b504 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801b4fe:	f06f 0303 	mvn.w	r3, #3
 801b502:	e07d      	b.n	801b600 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b504:	4b46      	ldr	r3, [pc, #280]	@ (801b620 <etharp_output+0x1fc>)
 801b506:	781b      	ldrb	r3, [r3, #0]
 801b508:	4619      	mov	r1, r3
 801b50a:	4a46      	ldr	r2, [pc, #280]	@ (801b624 <etharp_output+0x200>)
 801b50c:	460b      	mov	r3, r1
 801b50e:	005b      	lsls	r3, r3, #1
 801b510:	440b      	add	r3, r1
 801b512:	00db      	lsls	r3, r3, #3
 801b514:	4413      	add	r3, r2
 801b516:	3314      	adds	r3, #20
 801b518:	781b      	ldrb	r3, [r3, #0]
 801b51a:	2b01      	cmp	r3, #1
 801b51c:	d925      	bls.n	801b56a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b51e:	4b40      	ldr	r3, [pc, #256]	@ (801b620 <etharp_output+0x1fc>)
 801b520:	781b      	ldrb	r3, [r3, #0]
 801b522:	4619      	mov	r1, r3
 801b524:	4a3f      	ldr	r2, [pc, #252]	@ (801b624 <etharp_output+0x200>)
 801b526:	460b      	mov	r3, r1
 801b528:	005b      	lsls	r3, r3, #1
 801b52a:	440b      	add	r3, r1
 801b52c:	00db      	lsls	r3, r3, #3
 801b52e:	4413      	add	r3, r2
 801b530:	3308      	adds	r3, #8
 801b532:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b534:	68fa      	ldr	r2, [r7, #12]
 801b536:	429a      	cmp	r2, r3
 801b538:	d117      	bne.n	801b56a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801b53a:	69bb      	ldr	r3, [r7, #24]
 801b53c:	681a      	ldr	r2, [r3, #0]
 801b53e:	4b38      	ldr	r3, [pc, #224]	@ (801b620 <etharp_output+0x1fc>)
 801b540:	781b      	ldrb	r3, [r3, #0]
 801b542:	4618      	mov	r0, r3
 801b544:	4937      	ldr	r1, [pc, #220]	@ (801b624 <etharp_output+0x200>)
 801b546:	4603      	mov	r3, r0
 801b548:	005b      	lsls	r3, r3, #1
 801b54a:	4403      	add	r3, r0
 801b54c:	00db      	lsls	r3, r3, #3
 801b54e:	440b      	add	r3, r1
 801b550:	3304      	adds	r3, #4
 801b552:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b554:	429a      	cmp	r2, r3
 801b556:	d108      	bne.n	801b56a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801b558:	4b31      	ldr	r3, [pc, #196]	@ (801b620 <etharp_output+0x1fc>)
 801b55a:	781b      	ldrb	r3, [r3, #0]
 801b55c:	461a      	mov	r2, r3
 801b55e:	68b9      	ldr	r1, [r7, #8]
 801b560:	68f8      	ldr	r0, [r7, #12]
 801b562:	f7ff fec5 	bl	801b2f0 <etharp_output_to_arp_index>
 801b566:	4603      	mov	r3, r0
 801b568:	e04a      	b.n	801b600 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b56a:	2300      	movs	r3, #0
 801b56c:	75fb      	strb	r3, [r7, #23]
 801b56e:	e031      	b.n	801b5d4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b570:	7dfa      	ldrb	r2, [r7, #23]
 801b572:	492c      	ldr	r1, [pc, #176]	@ (801b624 <etharp_output+0x200>)
 801b574:	4613      	mov	r3, r2
 801b576:	005b      	lsls	r3, r3, #1
 801b578:	4413      	add	r3, r2
 801b57a:	00db      	lsls	r3, r3, #3
 801b57c:	440b      	add	r3, r1
 801b57e:	3314      	adds	r3, #20
 801b580:	781b      	ldrb	r3, [r3, #0]
 801b582:	2b01      	cmp	r3, #1
 801b584:	d923      	bls.n	801b5ce <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801b586:	7dfa      	ldrb	r2, [r7, #23]
 801b588:	4926      	ldr	r1, [pc, #152]	@ (801b624 <etharp_output+0x200>)
 801b58a:	4613      	mov	r3, r2
 801b58c:	005b      	lsls	r3, r3, #1
 801b58e:	4413      	add	r3, r2
 801b590:	00db      	lsls	r3, r3, #3
 801b592:	440b      	add	r3, r1
 801b594:	3308      	adds	r3, #8
 801b596:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b598:	68fa      	ldr	r2, [r7, #12]
 801b59a:	429a      	cmp	r2, r3
 801b59c:	d117      	bne.n	801b5ce <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801b59e:	69bb      	ldr	r3, [r7, #24]
 801b5a0:	6819      	ldr	r1, [r3, #0]
 801b5a2:	7dfa      	ldrb	r2, [r7, #23]
 801b5a4:	481f      	ldr	r0, [pc, #124]	@ (801b624 <etharp_output+0x200>)
 801b5a6:	4613      	mov	r3, r2
 801b5a8:	005b      	lsls	r3, r3, #1
 801b5aa:	4413      	add	r3, r2
 801b5ac:	00db      	lsls	r3, r3, #3
 801b5ae:	4403      	add	r3, r0
 801b5b0:	3304      	adds	r3, #4
 801b5b2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801b5b4:	4299      	cmp	r1, r3
 801b5b6:	d10a      	bne.n	801b5ce <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801b5b8:	4a19      	ldr	r2, [pc, #100]	@ (801b620 <etharp_output+0x1fc>)
 801b5ba:	7dfb      	ldrb	r3, [r7, #23]
 801b5bc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801b5be:	7dfb      	ldrb	r3, [r7, #23]
 801b5c0:	461a      	mov	r2, r3
 801b5c2:	68b9      	ldr	r1, [r7, #8]
 801b5c4:	68f8      	ldr	r0, [r7, #12]
 801b5c6:	f7ff fe93 	bl	801b2f0 <etharp_output_to_arp_index>
 801b5ca:	4603      	mov	r3, r0
 801b5cc:	e018      	b.n	801b600 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b5ce:	7dfb      	ldrb	r3, [r7, #23]
 801b5d0:	3301      	adds	r3, #1
 801b5d2:	75fb      	strb	r3, [r7, #23]
 801b5d4:	7dfb      	ldrb	r3, [r7, #23]
 801b5d6:	2b09      	cmp	r3, #9
 801b5d8:	d9ca      	bls.n	801b570 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801b5da:	68ba      	ldr	r2, [r7, #8]
 801b5dc:	69b9      	ldr	r1, [r7, #24]
 801b5de:	68f8      	ldr	r0, [r7, #12]
 801b5e0:	f000 f822 	bl	801b628 <etharp_query>
 801b5e4:	4603      	mov	r3, r0
 801b5e6:	e00b      	b.n	801b600 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801b5e8:	68fb      	ldr	r3, [r7, #12]
 801b5ea:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 801b5ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b5f2:	9300      	str	r3, [sp, #0]
 801b5f4:	69fb      	ldr	r3, [r7, #28]
 801b5f6:	68b9      	ldr	r1, [r7, #8]
 801b5f8:	68f8      	ldr	r0, [r7, #12]
 801b5fa:	f002 f93f 	bl	801d87c <ethernet_output>
 801b5fe:	4603      	mov	r3, r0
}
 801b600:	4618      	mov	r0, r3
 801b602:	3720      	adds	r7, #32
 801b604:	46bd      	mov	sp, r7
 801b606:	bd80      	pop	{r7, pc}
 801b608:	08022b54 	.word	0x08022b54
 801b60c:	08022ca4 	.word	0x08022ca4
 801b610:	08022bcc 	.word	0x08022bcc
 801b614:	08022cf4 	.word	0x08022cf4
 801b618:	08022c94 	.word	0x08022c94
 801b61c:	080236a8 	.word	0x080236a8
 801b620:	20004920 	.word	0x20004920
 801b624:	20004830 	.word	0x20004830

0801b628 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801b628:	b580      	push	{r7, lr}
 801b62a:	b08c      	sub	sp, #48	@ 0x30
 801b62c:	af02      	add	r7, sp, #8
 801b62e:	60f8      	str	r0, [r7, #12]
 801b630:	60b9      	str	r1, [r7, #8]
 801b632:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801b634:	68fb      	ldr	r3, [r7, #12]
 801b636:	3336      	adds	r3, #54	@ 0x36
 801b638:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801b63a:	23ff      	movs	r3, #255	@ 0xff
 801b63c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801b640:	2300      	movs	r3, #0
 801b642:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b644:	68bb      	ldr	r3, [r7, #8]
 801b646:	681b      	ldr	r3, [r3, #0]
 801b648:	68f9      	ldr	r1, [r7, #12]
 801b64a:	4618      	mov	r0, r3
 801b64c:	f001 fa08 	bl	801ca60 <ip4_addr_isbroadcast_u32>
 801b650:	4603      	mov	r3, r0
 801b652:	2b00      	cmp	r3, #0
 801b654:	d10c      	bne.n	801b670 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b656:	68bb      	ldr	r3, [r7, #8]
 801b658:	681b      	ldr	r3, [r3, #0]
 801b65a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b65e:	2be0      	cmp	r3, #224	@ 0xe0
 801b660:	d006      	beq.n	801b670 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b662:	68bb      	ldr	r3, [r7, #8]
 801b664:	2b00      	cmp	r3, #0
 801b666:	d003      	beq.n	801b670 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801b668:	68bb      	ldr	r3, [r7, #8]
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	2b00      	cmp	r3, #0
 801b66e:	d102      	bne.n	801b676 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b670:	f06f 030f 	mvn.w	r3, #15
 801b674:	e101      	b.n	801b87a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801b676:	68fa      	ldr	r2, [r7, #12]
 801b678:	2101      	movs	r1, #1
 801b67a:	68b8      	ldr	r0, [r7, #8]
 801b67c:	f7ff fb5c 	bl	801ad38 <etharp_find_entry>
 801b680:	4603      	mov	r3, r0
 801b682:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801b684:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b688:	2b00      	cmp	r3, #0
 801b68a:	da02      	bge.n	801b692 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801b68c:	8a7b      	ldrh	r3, [r7, #18]
 801b68e:	b25b      	sxtb	r3, r3
 801b690:	e0f3      	b.n	801b87a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801b692:	8a7b      	ldrh	r3, [r7, #18]
 801b694:	2b7e      	cmp	r3, #126	@ 0x7e
 801b696:	d906      	bls.n	801b6a6 <etharp_query+0x7e>
 801b698:	4b7a      	ldr	r3, [pc, #488]	@ (801b884 <etharp_query+0x25c>)
 801b69a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801b69e:	497a      	ldr	r1, [pc, #488]	@ (801b888 <etharp_query+0x260>)
 801b6a0:	487a      	ldr	r0, [pc, #488]	@ (801b88c <etharp_query+0x264>)
 801b6a2:	f003 f99d 	bl	801e9e0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801b6a6:	8a7b      	ldrh	r3, [r7, #18]
 801b6a8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801b6aa:	7c7a      	ldrb	r2, [r7, #17]
 801b6ac:	4978      	ldr	r1, [pc, #480]	@ (801b890 <etharp_query+0x268>)
 801b6ae:	4613      	mov	r3, r2
 801b6b0:	005b      	lsls	r3, r3, #1
 801b6b2:	4413      	add	r3, r2
 801b6b4:	00db      	lsls	r3, r3, #3
 801b6b6:	440b      	add	r3, r1
 801b6b8:	3314      	adds	r3, #20
 801b6ba:	781b      	ldrb	r3, [r3, #0]
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d115      	bne.n	801b6ec <etharp_query+0xc4>
    is_new_entry = 1;
 801b6c0:	2301      	movs	r3, #1
 801b6c2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801b6c4:	7c7a      	ldrb	r2, [r7, #17]
 801b6c6:	4972      	ldr	r1, [pc, #456]	@ (801b890 <etharp_query+0x268>)
 801b6c8:	4613      	mov	r3, r2
 801b6ca:	005b      	lsls	r3, r3, #1
 801b6cc:	4413      	add	r3, r2
 801b6ce:	00db      	lsls	r3, r3, #3
 801b6d0:	440b      	add	r3, r1
 801b6d2:	3314      	adds	r3, #20
 801b6d4:	2201      	movs	r2, #1
 801b6d6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801b6d8:	7c7a      	ldrb	r2, [r7, #17]
 801b6da:	496d      	ldr	r1, [pc, #436]	@ (801b890 <etharp_query+0x268>)
 801b6dc:	4613      	mov	r3, r2
 801b6de:	005b      	lsls	r3, r3, #1
 801b6e0:	4413      	add	r3, r2
 801b6e2:	00db      	lsls	r3, r3, #3
 801b6e4:	440b      	add	r3, r1
 801b6e6:	3308      	adds	r3, #8
 801b6e8:	68fa      	ldr	r2, [r7, #12]
 801b6ea:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801b6ec:	7c7a      	ldrb	r2, [r7, #17]
 801b6ee:	4968      	ldr	r1, [pc, #416]	@ (801b890 <etharp_query+0x268>)
 801b6f0:	4613      	mov	r3, r2
 801b6f2:	005b      	lsls	r3, r3, #1
 801b6f4:	4413      	add	r3, r2
 801b6f6:	00db      	lsls	r3, r3, #3
 801b6f8:	440b      	add	r3, r1
 801b6fa:	3314      	adds	r3, #20
 801b6fc:	781b      	ldrb	r3, [r3, #0]
 801b6fe:	2b01      	cmp	r3, #1
 801b700:	d011      	beq.n	801b726 <etharp_query+0xfe>
 801b702:	7c7a      	ldrb	r2, [r7, #17]
 801b704:	4962      	ldr	r1, [pc, #392]	@ (801b890 <etharp_query+0x268>)
 801b706:	4613      	mov	r3, r2
 801b708:	005b      	lsls	r3, r3, #1
 801b70a:	4413      	add	r3, r2
 801b70c:	00db      	lsls	r3, r3, #3
 801b70e:	440b      	add	r3, r1
 801b710:	3314      	adds	r3, #20
 801b712:	781b      	ldrb	r3, [r3, #0]
 801b714:	2b01      	cmp	r3, #1
 801b716:	d806      	bhi.n	801b726 <etharp_query+0xfe>
 801b718:	4b5a      	ldr	r3, [pc, #360]	@ (801b884 <etharp_query+0x25c>)
 801b71a:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801b71e:	495d      	ldr	r1, [pc, #372]	@ (801b894 <etharp_query+0x26c>)
 801b720:	485a      	ldr	r0, [pc, #360]	@ (801b88c <etharp_query+0x264>)
 801b722:	f003 f95d 	bl	801e9e0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801b726:	6a3b      	ldr	r3, [r7, #32]
 801b728:	2b00      	cmp	r3, #0
 801b72a:	d102      	bne.n	801b732 <etharp_query+0x10a>
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	2b00      	cmp	r3, #0
 801b730:	d10c      	bne.n	801b74c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801b732:	68b9      	ldr	r1, [r7, #8]
 801b734:	68f8      	ldr	r0, [r7, #12]
 801b736:	f000 f963 	bl	801ba00 <etharp_request>
 801b73a:	4603      	mov	r3, r0
 801b73c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801b740:	687b      	ldr	r3, [r7, #4]
 801b742:	2b00      	cmp	r3, #0
 801b744:	d102      	bne.n	801b74c <etharp_query+0x124>
      return result;
 801b746:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801b74a:	e096      	b.n	801b87a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	2b00      	cmp	r3, #0
 801b750:	d106      	bne.n	801b760 <etharp_query+0x138>
 801b752:	4b4c      	ldr	r3, [pc, #304]	@ (801b884 <etharp_query+0x25c>)
 801b754:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801b758:	494f      	ldr	r1, [pc, #316]	@ (801b898 <etharp_query+0x270>)
 801b75a:	484c      	ldr	r0, [pc, #304]	@ (801b88c <etharp_query+0x264>)
 801b75c:	f003 f940 	bl	801e9e0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801b760:	7c7a      	ldrb	r2, [r7, #17]
 801b762:	494b      	ldr	r1, [pc, #300]	@ (801b890 <etharp_query+0x268>)
 801b764:	4613      	mov	r3, r2
 801b766:	005b      	lsls	r3, r3, #1
 801b768:	4413      	add	r3, r2
 801b76a:	00db      	lsls	r3, r3, #3
 801b76c:	440b      	add	r3, r1
 801b76e:	3314      	adds	r3, #20
 801b770:	781b      	ldrb	r3, [r3, #0]
 801b772:	2b01      	cmp	r3, #1
 801b774:	d917      	bls.n	801b7a6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801b776:	4a49      	ldr	r2, [pc, #292]	@ (801b89c <etharp_query+0x274>)
 801b778:	7c7b      	ldrb	r3, [r7, #17]
 801b77a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801b77c:	7c7a      	ldrb	r2, [r7, #17]
 801b77e:	4613      	mov	r3, r2
 801b780:	005b      	lsls	r3, r3, #1
 801b782:	4413      	add	r3, r2
 801b784:	00db      	lsls	r3, r3, #3
 801b786:	3308      	adds	r3, #8
 801b788:	4a41      	ldr	r2, [pc, #260]	@ (801b890 <etharp_query+0x268>)
 801b78a:	4413      	add	r3, r2
 801b78c:	3304      	adds	r3, #4
 801b78e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b792:	9200      	str	r2, [sp, #0]
 801b794:	697a      	ldr	r2, [r7, #20]
 801b796:	6879      	ldr	r1, [r7, #4]
 801b798:	68f8      	ldr	r0, [r7, #12]
 801b79a:	f002 f86f 	bl	801d87c <ethernet_output>
 801b79e:	4603      	mov	r3, r0
 801b7a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b7a4:	e067      	b.n	801b876 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b7a6:	7c7a      	ldrb	r2, [r7, #17]
 801b7a8:	4939      	ldr	r1, [pc, #228]	@ (801b890 <etharp_query+0x268>)
 801b7aa:	4613      	mov	r3, r2
 801b7ac:	005b      	lsls	r3, r3, #1
 801b7ae:	4413      	add	r3, r2
 801b7b0:	00db      	lsls	r3, r3, #3
 801b7b2:	440b      	add	r3, r1
 801b7b4:	3314      	adds	r3, #20
 801b7b6:	781b      	ldrb	r3, [r3, #0]
 801b7b8:	2b01      	cmp	r3, #1
 801b7ba:	d15c      	bne.n	801b876 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801b7bc:	2300      	movs	r3, #0
 801b7be:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801b7c0:	687b      	ldr	r3, [r7, #4]
 801b7c2:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b7c4:	e01c      	b.n	801b800 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801b7c6:	69fb      	ldr	r3, [r7, #28]
 801b7c8:	895a      	ldrh	r2, [r3, #10]
 801b7ca:	69fb      	ldr	r3, [r7, #28]
 801b7cc:	891b      	ldrh	r3, [r3, #8]
 801b7ce:	429a      	cmp	r2, r3
 801b7d0:	d10a      	bne.n	801b7e8 <etharp_query+0x1c0>
 801b7d2:	69fb      	ldr	r3, [r7, #28]
 801b7d4:	681b      	ldr	r3, [r3, #0]
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	d006      	beq.n	801b7e8 <etharp_query+0x1c0>
 801b7da:	4b2a      	ldr	r3, [pc, #168]	@ (801b884 <etharp_query+0x25c>)
 801b7dc:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801b7e0:	492f      	ldr	r1, [pc, #188]	@ (801b8a0 <etharp_query+0x278>)
 801b7e2:	482a      	ldr	r0, [pc, #168]	@ (801b88c <etharp_query+0x264>)
 801b7e4:	f003 f8fc 	bl	801e9e0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801b7e8:	69fb      	ldr	r3, [r7, #28]
 801b7ea:	7b1b      	ldrb	r3, [r3, #12]
 801b7ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	d002      	beq.n	801b7fa <etharp_query+0x1d2>
        copy_needed = 1;
 801b7f4:	2301      	movs	r3, #1
 801b7f6:	61bb      	str	r3, [r7, #24]
        break;
 801b7f8:	e005      	b.n	801b806 <etharp_query+0x1de>
      }
      p = p->next;
 801b7fa:	69fb      	ldr	r3, [r7, #28]
 801b7fc:	681b      	ldr	r3, [r3, #0]
 801b7fe:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b800:	69fb      	ldr	r3, [r7, #28]
 801b802:	2b00      	cmp	r3, #0
 801b804:	d1df      	bne.n	801b7c6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801b806:	69bb      	ldr	r3, [r7, #24]
 801b808:	2b00      	cmp	r3, #0
 801b80a:	d007      	beq.n	801b81c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801b80c:	687a      	ldr	r2, [r7, #4]
 801b80e:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801b812:	200e      	movs	r0, #14
 801b814:	f7f7 fa74 	bl	8012d00 <pbuf_clone>
 801b818:	61f8      	str	r0, [r7, #28]
 801b81a:	e004      	b.n	801b826 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801b81c:	687b      	ldr	r3, [r7, #4]
 801b81e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801b820:	69f8      	ldr	r0, [r7, #28]
 801b822:	f7f6 ff63 	bl	80126ec <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801b826:	69fb      	ldr	r3, [r7, #28]
 801b828:	2b00      	cmp	r3, #0
 801b82a:	d021      	beq.n	801b870 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801b82c:	7c7a      	ldrb	r2, [r7, #17]
 801b82e:	4918      	ldr	r1, [pc, #96]	@ (801b890 <etharp_query+0x268>)
 801b830:	4613      	mov	r3, r2
 801b832:	005b      	lsls	r3, r3, #1
 801b834:	4413      	add	r3, r2
 801b836:	00db      	lsls	r3, r3, #3
 801b838:	440b      	add	r3, r1
 801b83a:	681b      	ldr	r3, [r3, #0]
 801b83c:	2b00      	cmp	r3, #0
 801b83e:	d00a      	beq.n	801b856 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801b840:	7c7a      	ldrb	r2, [r7, #17]
 801b842:	4913      	ldr	r1, [pc, #76]	@ (801b890 <etharp_query+0x268>)
 801b844:	4613      	mov	r3, r2
 801b846:	005b      	lsls	r3, r3, #1
 801b848:	4413      	add	r3, r2
 801b84a:	00db      	lsls	r3, r3, #3
 801b84c:	440b      	add	r3, r1
 801b84e:	681b      	ldr	r3, [r3, #0]
 801b850:	4618      	mov	r0, r3
 801b852:	f7f6 fea5 	bl	80125a0 <pbuf_free>
      }
      arp_table[i].q = p;
 801b856:	7c7a      	ldrb	r2, [r7, #17]
 801b858:	490d      	ldr	r1, [pc, #52]	@ (801b890 <etharp_query+0x268>)
 801b85a:	4613      	mov	r3, r2
 801b85c:	005b      	lsls	r3, r3, #1
 801b85e:	4413      	add	r3, r2
 801b860:	00db      	lsls	r3, r3, #3
 801b862:	440b      	add	r3, r1
 801b864:	69fa      	ldr	r2, [r7, #28]
 801b866:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801b868:	2300      	movs	r3, #0
 801b86a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b86e:	e002      	b.n	801b876 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801b870:	23ff      	movs	r3, #255	@ 0xff
 801b872:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801b876:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801b87a:	4618      	mov	r0, r3
 801b87c:	3728      	adds	r7, #40	@ 0x28
 801b87e:	46bd      	mov	sp, r7
 801b880:	bd80      	pop	{r7, pc}
 801b882:	bf00      	nop
 801b884:	08022b54 	.word	0x08022b54
 801b888:	08022d00 	.word	0x08022d00
 801b88c:	08022bcc 	.word	0x08022bcc
 801b890:	20004830 	.word	0x20004830
 801b894:	08022d10 	.word	0x08022d10
 801b898:	08022cf4 	.word	0x08022cf4
 801b89c:	20004920 	.word	0x20004920
 801b8a0:	08022d38 	.word	0x08022d38

0801b8a4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801b8a4:	b580      	push	{r7, lr}
 801b8a6:	b08a      	sub	sp, #40	@ 0x28
 801b8a8:	af02      	add	r7, sp, #8
 801b8aa:	60f8      	str	r0, [r7, #12]
 801b8ac:	60b9      	str	r1, [r7, #8]
 801b8ae:	607a      	str	r2, [r7, #4]
 801b8b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801b8b2:	2300      	movs	r3, #0
 801b8b4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b8b6:	68fb      	ldr	r3, [r7, #12]
 801b8b8:	2b00      	cmp	r3, #0
 801b8ba:	d106      	bne.n	801b8ca <etharp_raw+0x26>
 801b8bc:	4b3a      	ldr	r3, [pc, #232]	@ (801b9a8 <etharp_raw+0x104>)
 801b8be:	f240 4257 	movw	r2, #1111	@ 0x457
 801b8c2:	493a      	ldr	r1, [pc, #232]	@ (801b9ac <etharp_raw+0x108>)
 801b8c4:	483a      	ldr	r0, [pc, #232]	@ (801b9b0 <etharp_raw+0x10c>)
 801b8c6:	f003 f88b 	bl	801e9e0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801b8ca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b8ce:	211c      	movs	r1, #28
 801b8d0:	200e      	movs	r0, #14
 801b8d2:	f7f6 fb81 	bl	8011fd8 <pbuf_alloc>
 801b8d6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801b8d8:	69bb      	ldr	r3, [r7, #24]
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	d102      	bne.n	801b8e4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801b8de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b8e2:	e05d      	b.n	801b9a0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801b8e4:	69bb      	ldr	r3, [r7, #24]
 801b8e6:	895b      	ldrh	r3, [r3, #10]
 801b8e8:	2b1b      	cmp	r3, #27
 801b8ea:	d806      	bhi.n	801b8fa <etharp_raw+0x56>
 801b8ec:	4b2e      	ldr	r3, [pc, #184]	@ (801b9a8 <etharp_raw+0x104>)
 801b8ee:	f240 4262 	movw	r2, #1122	@ 0x462
 801b8f2:	4930      	ldr	r1, [pc, #192]	@ (801b9b4 <etharp_raw+0x110>)
 801b8f4:	482e      	ldr	r0, [pc, #184]	@ (801b9b0 <etharp_raw+0x10c>)
 801b8f6:	f003 f873 	bl	801e9e0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801b8fa:	69bb      	ldr	r3, [r7, #24]
 801b8fc:	685b      	ldr	r3, [r3, #4]
 801b8fe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801b900:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801b902:	4618      	mov	r0, r3
 801b904:	f7f5 f8f8 	bl	8010af8 <lwip_htons>
 801b908:	4603      	mov	r3, r0
 801b90a:	461a      	mov	r2, r3
 801b90c:	697b      	ldr	r3, [r7, #20]
 801b90e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801b910:	68fb      	ldr	r3, [r7, #12]
 801b912:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801b916:	2b06      	cmp	r3, #6
 801b918:	d006      	beq.n	801b928 <etharp_raw+0x84>
 801b91a:	4b23      	ldr	r3, [pc, #140]	@ (801b9a8 <etharp_raw+0x104>)
 801b91c:	f240 4269 	movw	r2, #1129	@ 0x469
 801b920:	4925      	ldr	r1, [pc, #148]	@ (801b9b8 <etharp_raw+0x114>)
 801b922:	4823      	ldr	r0, [pc, #140]	@ (801b9b0 <etharp_raw+0x10c>)
 801b924:	f003 f85c 	bl	801e9e0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801b928:	697b      	ldr	r3, [r7, #20]
 801b92a:	3308      	adds	r3, #8
 801b92c:	2206      	movs	r2, #6
 801b92e:	6839      	ldr	r1, [r7, #0]
 801b930:	4618      	mov	r0, r3
 801b932:	f003 fb08 	bl	801ef46 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801b936:	697b      	ldr	r3, [r7, #20]
 801b938:	3312      	adds	r3, #18
 801b93a:	2206      	movs	r2, #6
 801b93c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b93e:	4618      	mov	r0, r3
 801b940:	f003 fb01 	bl	801ef46 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801b944:	697b      	ldr	r3, [r7, #20]
 801b946:	330e      	adds	r3, #14
 801b948:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b94a:	6812      	ldr	r2, [r2, #0]
 801b94c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801b94e:	697b      	ldr	r3, [r7, #20]
 801b950:	3318      	adds	r3, #24
 801b952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b954:	6812      	ldr	r2, [r2, #0]
 801b956:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801b958:	697b      	ldr	r3, [r7, #20]
 801b95a:	2200      	movs	r2, #0
 801b95c:	701a      	strb	r2, [r3, #0]
 801b95e:	2200      	movs	r2, #0
 801b960:	f042 0201 	orr.w	r2, r2, #1
 801b964:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801b966:	697b      	ldr	r3, [r7, #20]
 801b968:	2200      	movs	r2, #0
 801b96a:	f042 0208 	orr.w	r2, r2, #8
 801b96e:	709a      	strb	r2, [r3, #2]
 801b970:	2200      	movs	r2, #0
 801b972:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801b974:	697b      	ldr	r3, [r7, #20]
 801b976:	2206      	movs	r2, #6
 801b978:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801b97a:	697b      	ldr	r3, [r7, #20]
 801b97c:	2204      	movs	r2, #4
 801b97e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801b980:	f640 0306 	movw	r3, #2054	@ 0x806
 801b984:	9300      	str	r3, [sp, #0]
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	68ba      	ldr	r2, [r7, #8]
 801b98a:	69b9      	ldr	r1, [r7, #24]
 801b98c:	68f8      	ldr	r0, [r7, #12]
 801b98e:	f001 ff75 	bl	801d87c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801b992:	69b8      	ldr	r0, [r7, #24]
 801b994:	f7f6 fe04 	bl	80125a0 <pbuf_free>
  p = NULL;
 801b998:	2300      	movs	r3, #0
 801b99a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801b99c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b9a0:	4618      	mov	r0, r3
 801b9a2:	3720      	adds	r7, #32
 801b9a4:	46bd      	mov	sp, r7
 801b9a6:	bd80      	pop	{r7, pc}
 801b9a8:	08022b54 	.word	0x08022b54
 801b9ac:	08022ca4 	.word	0x08022ca4
 801b9b0:	08022bcc 	.word	0x08022bcc
 801b9b4:	08022d54 	.word	0x08022d54
 801b9b8:	08022d88 	.word	0x08022d88

0801b9bc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801b9bc:	b580      	push	{r7, lr}
 801b9be:	b088      	sub	sp, #32
 801b9c0:	af04      	add	r7, sp, #16
 801b9c2:	60f8      	str	r0, [r7, #12]
 801b9c4:	60b9      	str	r1, [r7, #8]
 801b9c6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b9c8:	68fb      	ldr	r3, [r7, #12]
 801b9ca:	f103 0136 	add.w	r1, r3, #54	@ 0x36
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b9ce:	68fb      	ldr	r3, [r7, #12]
 801b9d0:	f103 0036 	add.w	r0, r3, #54	@ 0x36
 801b9d4:	68fb      	ldr	r3, [r7, #12]
 801b9d6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b9d8:	2201      	movs	r2, #1
 801b9da:	9203      	str	r2, [sp, #12]
 801b9dc:	68ba      	ldr	r2, [r7, #8]
 801b9de:	9202      	str	r2, [sp, #8]
 801b9e0:	4a06      	ldr	r2, [pc, #24]	@ (801b9fc <etharp_request_dst+0x40>)
 801b9e2:	9201      	str	r2, [sp, #4]
 801b9e4:	9300      	str	r3, [sp, #0]
 801b9e6:	4603      	mov	r3, r0
 801b9e8:	687a      	ldr	r2, [r7, #4]
 801b9ea:	68f8      	ldr	r0, [r7, #12]
 801b9ec:	f7ff ff5a 	bl	801b8a4 <etharp_raw>
 801b9f0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801b9f2:	4618      	mov	r0, r3
 801b9f4:	3710      	adds	r7, #16
 801b9f6:	46bd      	mov	sp, r7
 801b9f8:	bd80      	pop	{r7, pc}
 801b9fa:	bf00      	nop
 801b9fc:	080236b0 	.word	0x080236b0

0801ba00 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801ba00:	b580      	push	{r7, lr}
 801ba02:	b082      	sub	sp, #8
 801ba04:	af00      	add	r7, sp, #0
 801ba06:	6078      	str	r0, [r7, #4]
 801ba08:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801ba0a:	4a05      	ldr	r2, [pc, #20]	@ (801ba20 <etharp_request+0x20>)
 801ba0c:	6839      	ldr	r1, [r7, #0]
 801ba0e:	6878      	ldr	r0, [r7, #4]
 801ba10:	f7ff ffd4 	bl	801b9bc <etharp_request_dst>
 801ba14:	4603      	mov	r3, r0
}
 801ba16:	4618      	mov	r0, r3
 801ba18:	3708      	adds	r7, #8
 801ba1a:	46bd      	mov	sp, r7
 801ba1c:	bd80      	pop	{r7, pc}
 801ba1e:	bf00      	nop
 801ba20:	080236a8 	.word	0x080236a8

0801ba24 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801ba24:	b580      	push	{r7, lr}
 801ba26:	b08e      	sub	sp, #56	@ 0x38
 801ba28:	af04      	add	r7, sp, #16
 801ba2a:	6078      	str	r0, [r7, #4]
 801ba2c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801ba2e:	4b79      	ldr	r3, [pc, #484]	@ (801bc14 <icmp_input+0x1f0>)
 801ba30:	689b      	ldr	r3, [r3, #8]
 801ba32:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801ba34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba36:	781b      	ldrb	r3, [r3, #0]
 801ba38:	f003 030f 	and.w	r3, r3, #15
 801ba3c:	b2db      	uxtb	r3, r3
 801ba3e:	009b      	lsls	r3, r3, #2
 801ba40:	b2db      	uxtb	r3, r3
 801ba42:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801ba44:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801ba46:	2b13      	cmp	r3, #19
 801ba48:	f240 80cd 	bls.w	801bbe6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801ba4c:	687b      	ldr	r3, [r7, #4]
 801ba4e:	895b      	ldrh	r3, [r3, #10]
 801ba50:	2b03      	cmp	r3, #3
 801ba52:	f240 80ca 	bls.w	801bbea <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801ba56:	687b      	ldr	r3, [r7, #4]
 801ba58:	685b      	ldr	r3, [r3, #4]
 801ba5a:	781b      	ldrb	r3, [r3, #0]
 801ba5c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801ba60:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	f000 80b7 	beq.w	801bbd8 <icmp_input+0x1b4>
 801ba6a:	2b08      	cmp	r3, #8
 801ba6c:	f040 80b7 	bne.w	801bbde <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801ba70:	4b69      	ldr	r3, [pc, #420]	@ (801bc18 <icmp_input+0x1f4>)
 801ba72:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ba74:	4b67      	ldr	r3, [pc, #412]	@ (801bc14 <icmp_input+0x1f0>)
 801ba76:	695b      	ldr	r3, [r3, #20]
 801ba78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ba7c:	2be0      	cmp	r3, #224	@ 0xe0
 801ba7e:	f000 80bb 	beq.w	801bbf8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801ba82:	4b64      	ldr	r3, [pc, #400]	@ (801bc14 <icmp_input+0x1f0>)
 801ba84:	695b      	ldr	r3, [r3, #20]
 801ba86:	4a63      	ldr	r2, [pc, #396]	@ (801bc14 <icmp_input+0x1f0>)
 801ba88:	6812      	ldr	r2, [r2, #0]
 801ba8a:	4611      	mov	r1, r2
 801ba8c:	4618      	mov	r0, r3
 801ba8e:	f000 ffe7 	bl	801ca60 <ip4_addr_isbroadcast_u32>
 801ba92:	4603      	mov	r3, r0
 801ba94:	2b00      	cmp	r3, #0
 801ba96:	f040 80b1 	bne.w	801bbfc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	891b      	ldrh	r3, [r3, #8]
 801ba9e:	2b07      	cmp	r3, #7
 801baa0:	f240 80a5 	bls.w	801bbee <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801baa4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801baa6:	330e      	adds	r3, #14
 801baa8:	4619      	mov	r1, r3
 801baaa:	6878      	ldr	r0, [r7, #4]
 801baac:	f7f6 fce2 	bl	8012474 <pbuf_add_header>
 801bab0:	4603      	mov	r3, r0
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	d04b      	beq.n	801bb4e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801bab6:	687b      	ldr	r3, [r7, #4]
 801bab8:	891a      	ldrh	r2, [r3, #8]
 801baba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801babc:	4413      	add	r3, r2
 801babe:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	891b      	ldrh	r3, [r3, #8]
 801bac4:	8b7a      	ldrh	r2, [r7, #26]
 801bac6:	429a      	cmp	r2, r3
 801bac8:	f0c0 809a 	bcc.w	801bc00 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801bacc:	8b7b      	ldrh	r3, [r7, #26]
 801bace:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bad2:	4619      	mov	r1, r3
 801bad4:	200e      	movs	r0, #14
 801bad6:	f7f6 fa7f 	bl	8011fd8 <pbuf_alloc>
 801bada:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801badc:	697b      	ldr	r3, [r7, #20]
 801bade:	2b00      	cmp	r3, #0
 801bae0:	f000 8090 	beq.w	801bc04 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801bae4:	697b      	ldr	r3, [r7, #20]
 801bae6:	895b      	ldrh	r3, [r3, #10]
 801bae8:	461a      	mov	r2, r3
 801baea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801baec:	3308      	adds	r3, #8
 801baee:	429a      	cmp	r2, r3
 801baf0:	d203      	bcs.n	801bafa <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801baf2:	6978      	ldr	r0, [r7, #20]
 801baf4:	f7f6 fd54 	bl	80125a0 <pbuf_free>
          goto icmperr;
 801baf8:	e085      	b.n	801bc06 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801bafa:	697b      	ldr	r3, [r7, #20]
 801bafc:	685b      	ldr	r3, [r3, #4]
 801bafe:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801bb00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801bb02:	4618      	mov	r0, r3
 801bb04:	f003 fa1f 	bl	801ef46 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801bb08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bb0a:	4619      	mov	r1, r3
 801bb0c:	6978      	ldr	r0, [r7, #20]
 801bb0e:	f7f6 fcc1 	bl	8012494 <pbuf_remove_header>
 801bb12:	4603      	mov	r3, r0
 801bb14:	2b00      	cmp	r3, #0
 801bb16:	d009      	beq.n	801bb2c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801bb18:	4b40      	ldr	r3, [pc, #256]	@ (801bc1c <icmp_input+0x1f8>)
 801bb1a:	22b6      	movs	r2, #182	@ 0xb6
 801bb1c:	4940      	ldr	r1, [pc, #256]	@ (801bc20 <icmp_input+0x1fc>)
 801bb1e:	4841      	ldr	r0, [pc, #260]	@ (801bc24 <icmp_input+0x200>)
 801bb20:	f002 ff5e 	bl	801e9e0 <iprintf>
          pbuf_free(r);
 801bb24:	6978      	ldr	r0, [r7, #20]
 801bb26:	f7f6 fd3b 	bl	80125a0 <pbuf_free>
          goto icmperr;
 801bb2a:	e06c      	b.n	801bc06 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801bb2c:	6879      	ldr	r1, [r7, #4]
 801bb2e:	6978      	ldr	r0, [r7, #20]
 801bb30:	f7f6 fe6a 	bl	8012808 <pbuf_copy>
 801bb34:	4603      	mov	r3, r0
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d003      	beq.n	801bb42 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801bb3a:	6978      	ldr	r0, [r7, #20]
 801bb3c:	f7f6 fd30 	bl	80125a0 <pbuf_free>
          goto icmperr;
 801bb40:	e061      	b.n	801bc06 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801bb42:	6878      	ldr	r0, [r7, #4]
 801bb44:	f7f6 fd2c 	bl	80125a0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801bb48:	697b      	ldr	r3, [r7, #20]
 801bb4a:	607b      	str	r3, [r7, #4]
 801bb4c:	e00f      	b.n	801bb6e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801bb4e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bb50:	330e      	adds	r3, #14
 801bb52:	4619      	mov	r1, r3
 801bb54:	6878      	ldr	r0, [r7, #4]
 801bb56:	f7f6 fc9d 	bl	8012494 <pbuf_remove_header>
 801bb5a:	4603      	mov	r3, r0
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	d006      	beq.n	801bb6e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801bb60:	4b2e      	ldr	r3, [pc, #184]	@ (801bc1c <icmp_input+0x1f8>)
 801bb62:	22c7      	movs	r2, #199	@ 0xc7
 801bb64:	4930      	ldr	r1, [pc, #192]	@ (801bc28 <icmp_input+0x204>)
 801bb66:	482f      	ldr	r0, [pc, #188]	@ (801bc24 <icmp_input+0x200>)
 801bb68:	f002 ff3a 	bl	801e9e0 <iprintf>
          goto icmperr;
 801bb6c:	e04b      	b.n	801bc06 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	685b      	ldr	r3, [r3, #4]
 801bb72:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801bb74:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bb76:	4619      	mov	r1, r3
 801bb78:	6878      	ldr	r0, [r7, #4]
 801bb7a:	f7f6 fc7b 	bl	8012474 <pbuf_add_header>
 801bb7e:	4603      	mov	r3, r0
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	d12b      	bne.n	801bbdc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801bb84:	687b      	ldr	r3, [r7, #4]
 801bb86:	685b      	ldr	r3, [r3, #4]
 801bb88:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801bb8a:	69fb      	ldr	r3, [r7, #28]
 801bb8c:	681a      	ldr	r2, [r3, #0]
 801bb8e:	68fb      	ldr	r3, [r7, #12]
 801bb90:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801bb92:	4b20      	ldr	r3, [pc, #128]	@ (801bc14 <icmp_input+0x1f0>)
 801bb94:	691a      	ldr	r2, [r3, #16]
 801bb96:	68fb      	ldr	r3, [r7, #12]
 801bb98:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801bb9a:	693b      	ldr	r3, [r7, #16]
 801bb9c:	2200      	movs	r2, #0
 801bb9e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801bba0:	693b      	ldr	r3, [r7, #16]
 801bba2:	2200      	movs	r2, #0
 801bba4:	709a      	strb	r2, [r3, #2]
 801bba6:	2200      	movs	r2, #0
 801bba8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801bbaa:	68fb      	ldr	r3, [r7, #12]
 801bbac:	22ff      	movs	r2, #255	@ 0xff
 801bbae:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801bbb0:	68fb      	ldr	r3, [r7, #12]
 801bbb2:	2200      	movs	r2, #0
 801bbb4:	729a      	strb	r2, [r3, #10]
 801bbb6:	2200      	movs	r2, #0
 801bbb8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801bbba:	683b      	ldr	r3, [r7, #0]
 801bbbc:	9302      	str	r3, [sp, #8]
 801bbbe:	2301      	movs	r3, #1
 801bbc0:	9301      	str	r3, [sp, #4]
 801bbc2:	2300      	movs	r3, #0
 801bbc4:	9300      	str	r3, [sp, #0]
 801bbc6:	23ff      	movs	r3, #255	@ 0xff
 801bbc8:	2200      	movs	r2, #0
 801bbca:	69f9      	ldr	r1, [r7, #28]
 801bbcc:	6878      	ldr	r0, [r7, #4]
 801bbce:	f000 fdf9 	bl	801c7c4 <ip4_output_if>
 801bbd2:	4603      	mov	r3, r0
 801bbd4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801bbd6:	e001      	b.n	801bbdc <icmp_input+0x1b8>
      break;
 801bbd8:	bf00      	nop
 801bbda:	e000      	b.n	801bbde <icmp_input+0x1ba>
      break;
 801bbdc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801bbde:	6878      	ldr	r0, [r7, #4]
 801bbe0:	f7f6 fcde 	bl	80125a0 <pbuf_free>
  return;
 801bbe4:	e013      	b.n	801bc0e <icmp_input+0x1ea>
    goto lenerr;
 801bbe6:	bf00      	nop
 801bbe8:	e002      	b.n	801bbf0 <icmp_input+0x1cc>
    goto lenerr;
 801bbea:	bf00      	nop
 801bbec:	e000      	b.n	801bbf0 <icmp_input+0x1cc>
        goto lenerr;
 801bbee:	bf00      	nop
lenerr:
  pbuf_free(p);
 801bbf0:	6878      	ldr	r0, [r7, #4]
 801bbf2:	f7f6 fcd5 	bl	80125a0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801bbf6:	e00a      	b.n	801bc0e <icmp_input+0x1ea>
        goto icmperr;
 801bbf8:	bf00      	nop
 801bbfa:	e004      	b.n	801bc06 <icmp_input+0x1e2>
        goto icmperr;
 801bbfc:	bf00      	nop
 801bbfe:	e002      	b.n	801bc06 <icmp_input+0x1e2>
          goto icmperr;
 801bc00:	bf00      	nop
 801bc02:	e000      	b.n	801bc06 <icmp_input+0x1e2>
          goto icmperr;
 801bc04:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801bc06:	6878      	ldr	r0, [r7, #4]
 801bc08:	f7f6 fcca 	bl	80125a0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801bc0c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801bc0e:	3728      	adds	r7, #40	@ 0x28
 801bc10:	46bd      	mov	sp, r7
 801bc12:	bd80      	pop	{r7, pc}
 801bc14:	20004768 	.word	0x20004768
 801bc18:	2000477c 	.word	0x2000477c
 801bc1c:	08022dcc 	.word	0x08022dcc
 801bc20:	08022e04 	.word	0x08022e04
 801bc24:	08022e3c 	.word	0x08022e3c
 801bc28:	08022e64 	.word	0x08022e64

0801bc2c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801bc2c:	b580      	push	{r7, lr}
 801bc2e:	b082      	sub	sp, #8
 801bc30:	af00      	add	r7, sp, #0
 801bc32:	6078      	str	r0, [r7, #4]
 801bc34:	460b      	mov	r3, r1
 801bc36:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801bc38:	78fb      	ldrb	r3, [r7, #3]
 801bc3a:	461a      	mov	r2, r3
 801bc3c:	2103      	movs	r1, #3
 801bc3e:	6878      	ldr	r0, [r7, #4]
 801bc40:	f000 f814 	bl	801bc6c <icmp_send_response>
}
 801bc44:	bf00      	nop
 801bc46:	3708      	adds	r7, #8
 801bc48:	46bd      	mov	sp, r7
 801bc4a:	bd80      	pop	{r7, pc}

0801bc4c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801bc4c:	b580      	push	{r7, lr}
 801bc4e:	b082      	sub	sp, #8
 801bc50:	af00      	add	r7, sp, #0
 801bc52:	6078      	str	r0, [r7, #4]
 801bc54:	460b      	mov	r3, r1
 801bc56:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801bc58:	78fb      	ldrb	r3, [r7, #3]
 801bc5a:	461a      	mov	r2, r3
 801bc5c:	210b      	movs	r1, #11
 801bc5e:	6878      	ldr	r0, [r7, #4]
 801bc60:	f000 f804 	bl	801bc6c <icmp_send_response>
}
 801bc64:	bf00      	nop
 801bc66:	3708      	adds	r7, #8
 801bc68:	46bd      	mov	sp, r7
 801bc6a:	bd80      	pop	{r7, pc}

0801bc6c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801bc6c:	b580      	push	{r7, lr}
 801bc6e:	b08c      	sub	sp, #48	@ 0x30
 801bc70:	af04      	add	r7, sp, #16
 801bc72:	6078      	str	r0, [r7, #4]
 801bc74:	460b      	mov	r3, r1
 801bc76:	70fb      	strb	r3, [r7, #3]
 801bc78:	4613      	mov	r3, r2
 801bc7a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801bc7c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bc80:	2124      	movs	r1, #36	@ 0x24
 801bc82:	2022      	movs	r0, #34	@ 0x22
 801bc84:	f7f6 f9a8 	bl	8011fd8 <pbuf_alloc>
 801bc88:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801bc8a:	69fb      	ldr	r3, [r7, #28]
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d04c      	beq.n	801bd2a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801bc90:	69fb      	ldr	r3, [r7, #28]
 801bc92:	895b      	ldrh	r3, [r3, #10]
 801bc94:	2b23      	cmp	r3, #35	@ 0x23
 801bc96:	d806      	bhi.n	801bca6 <icmp_send_response+0x3a>
 801bc98:	4b26      	ldr	r3, [pc, #152]	@ (801bd34 <icmp_send_response+0xc8>)
 801bc9a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801bc9e:	4926      	ldr	r1, [pc, #152]	@ (801bd38 <icmp_send_response+0xcc>)
 801bca0:	4826      	ldr	r0, [pc, #152]	@ (801bd3c <icmp_send_response+0xd0>)
 801bca2:	f002 fe9d 	bl	801e9e0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	685b      	ldr	r3, [r3, #4]
 801bcaa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801bcac:	69fb      	ldr	r3, [r7, #28]
 801bcae:	685b      	ldr	r3, [r3, #4]
 801bcb0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801bcb2:	697b      	ldr	r3, [r7, #20]
 801bcb4:	78fa      	ldrb	r2, [r7, #3]
 801bcb6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801bcb8:	697b      	ldr	r3, [r7, #20]
 801bcba:	78ba      	ldrb	r2, [r7, #2]
 801bcbc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801bcbe:	697b      	ldr	r3, [r7, #20]
 801bcc0:	2200      	movs	r2, #0
 801bcc2:	711a      	strb	r2, [r3, #4]
 801bcc4:	2200      	movs	r2, #0
 801bcc6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801bcc8:	697b      	ldr	r3, [r7, #20]
 801bcca:	2200      	movs	r2, #0
 801bccc:	719a      	strb	r2, [r3, #6]
 801bcce:	2200      	movs	r2, #0
 801bcd0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801bcd2:	69fb      	ldr	r3, [r7, #28]
 801bcd4:	685b      	ldr	r3, [r3, #4]
 801bcd6:	f103 0008 	add.w	r0, r3, #8
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	685b      	ldr	r3, [r3, #4]
 801bcde:	221c      	movs	r2, #28
 801bce0:	4619      	mov	r1, r3
 801bce2:	f003 f930 	bl	801ef46 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801bce6:	69bb      	ldr	r3, [r7, #24]
 801bce8:	68db      	ldr	r3, [r3, #12]
 801bcea:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801bcec:	f107 030c 	add.w	r3, r7, #12
 801bcf0:	4618      	mov	r0, r3
 801bcf2:	f000 fb45 	bl	801c380 <ip4_route>
 801bcf6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801bcf8:	693b      	ldr	r3, [r7, #16]
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	d011      	beq.n	801bd22 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801bcfe:	697b      	ldr	r3, [r7, #20]
 801bd00:	2200      	movs	r2, #0
 801bd02:	709a      	strb	r2, [r3, #2]
 801bd04:	2200      	movs	r2, #0
 801bd06:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801bd08:	f107 020c 	add.w	r2, r7, #12
 801bd0c:	693b      	ldr	r3, [r7, #16]
 801bd0e:	9302      	str	r3, [sp, #8]
 801bd10:	2301      	movs	r3, #1
 801bd12:	9301      	str	r3, [sp, #4]
 801bd14:	2300      	movs	r3, #0
 801bd16:	9300      	str	r3, [sp, #0]
 801bd18:	23ff      	movs	r3, #255	@ 0xff
 801bd1a:	2100      	movs	r1, #0
 801bd1c:	69f8      	ldr	r0, [r7, #28]
 801bd1e:	f000 fd51 	bl	801c7c4 <ip4_output_if>
  }
  pbuf_free(q);
 801bd22:	69f8      	ldr	r0, [r7, #28]
 801bd24:	f7f6 fc3c 	bl	80125a0 <pbuf_free>
 801bd28:	e000      	b.n	801bd2c <icmp_send_response+0xc0>
    return;
 801bd2a:	bf00      	nop
}
 801bd2c:	3720      	adds	r7, #32
 801bd2e:	46bd      	mov	sp, r7
 801bd30:	bd80      	pop	{r7, pc}
 801bd32:	bf00      	nop
 801bd34:	08022dcc 	.word	0x08022dcc
 801bd38:	08022e98 	.word	0x08022e98
 801bd3c:	08022e3c 	.word	0x08022e3c

0801bd40 <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
 801bd40:	b480      	push	{r7}
 801bd42:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 801bd44:	4b05      	ldr	r3, [pc, #20]	@ (801bd5c <igmp_init+0x1c>)
 801bd46:	4a06      	ldr	r2, [pc, #24]	@ (801bd60 <igmp_init+0x20>)
 801bd48:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 801bd4a:	4b06      	ldr	r3, [pc, #24]	@ (801bd64 <igmp_init+0x24>)
 801bd4c:	4a06      	ldr	r2, [pc, #24]	@ (801bd68 <igmp_init+0x28>)
 801bd4e:	601a      	str	r2, [r3, #0]
}
 801bd50:	bf00      	nop
 801bd52:	46bd      	mov	sp, r7
 801bd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd58:	4770      	bx	lr
 801bd5a:	bf00      	nop
 801bd5c:	20004924 	.word	0x20004924
 801bd60:	010000e0 	.word	0x010000e0
 801bd64:	20004928 	.word	0x20004928
 801bd68:	020000e0 	.word	0x020000e0

0801bd6c <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
 801bd6c:	b580      	push	{r7, lr}
 801bd6e:	b084      	sub	sp, #16
 801bd70:	af00      	add	r7, sp, #0
 801bd72:	6078      	str	r0, [r7, #4]
  struct igmp_group *group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void *)netif));

  group = igmp_lookup_group(netif, &allsystems);
 801bd74:	4911      	ldr	r1, [pc, #68]	@ (801bdbc <igmp_start+0x50>)
 801bd76:	6878      	ldr	r0, [r7, #4]
 801bd78:	f000 f85e 	bl	801be38 <igmp_lookup_group>
 801bd7c:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 801bd7e:	68fb      	ldr	r3, [r7, #12]
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	d014      	beq.n	801bdae <igmp_start+0x42>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 801bd84:	68fb      	ldr	r3, [r7, #12]
 801bd86:	2202      	movs	r2, #2
 801bd88:	725a      	strb	r2, [r3, #9]
    group->use++;
 801bd8a:	68fb      	ldr	r3, [r7, #12]
 801bd8c:	7b1b      	ldrb	r3, [r3, #12]
 801bd8e:	3301      	adds	r3, #1
 801bd90:	b2da      	uxtb	r2, r3
 801bd92:	68fb      	ldr	r3, [r7, #12]
 801bd94:	731a      	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
 801bd96:	687b      	ldr	r3, [r7, #4]
 801bd98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d005      	beq.n	801bdaa <igmp_start+0x3e>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
 801bd9e:	687b      	ldr	r3, [r7, #4]
 801bda0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bda2:	2201      	movs	r2, #1
 801bda4:	4905      	ldr	r1, [pc, #20]	@ (801bdbc <igmp_start+0x50>)
 801bda6:	6878      	ldr	r0, [r7, #4]
 801bda8:	4798      	blx	r3
    }

    return ERR_OK;
 801bdaa:	2300      	movs	r3, #0
 801bdac:	e001      	b.n	801bdb2 <igmp_start+0x46>
  }

  return ERR_MEM;
 801bdae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801bdb2:	4618      	mov	r0, r3
 801bdb4:	3710      	adds	r7, #16
 801bdb6:	46bd      	mov	sp, r7
 801bdb8:	bd80      	pop	{r7, pc}
 801bdba:	bf00      	nop
 801bdbc:	20004924 	.word	0x20004924

0801bdc0 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
 801bdc0:	b580      	push	{r7, lr}
 801bdc2:	b084      	sub	sp, #16
 801bdc4:	af00      	add	r7, sp, #0
 801bdc6:	6078      	str	r0, [r7, #4]
  struct igmp_group *group = netif_igmp_data(netif);
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bdcc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void *)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if (group != NULL) {
 801bdce:	68fb      	ldr	r3, [r7, #12]
 801bdd0:	2b00      	cmp	r3, #0
 801bdd2:	d00a      	beq.n	801bdea <igmp_report_groups+0x2a>
    group = group->next;
 801bdd4:	68fb      	ldr	r3, [r7, #12]
 801bdd6:	681b      	ldr	r3, [r3, #0]
 801bdd8:	60fb      	str	r3, [r7, #12]
  }

  while (group != NULL) {
 801bdda:	e006      	b.n	801bdea <igmp_report_groups+0x2a>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 801bddc:	2105      	movs	r1, #5
 801bdde:	68f8      	ldr	r0, [r7, #12]
 801bde0:	f000 fa13 	bl	801c20a <igmp_delaying_member>
    group = group->next;
 801bde4:	68fb      	ldr	r3, [r7, #12]
 801bde6:	681b      	ldr	r3, [r3, #0]
 801bde8:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 801bdea:	68fb      	ldr	r3, [r7, #12]
 801bdec:	2b00      	cmp	r3, #0
 801bdee:	d1f5      	bne.n	801bddc <igmp_report_groups+0x1c>
  }
}
 801bdf0:	bf00      	nop
 801bdf2:	bf00      	nop
 801bdf4:	3710      	adds	r7, #16
 801bdf6:	46bd      	mov	sp, r7
 801bdf8:	bd80      	pop	{r7, pc}

0801bdfa <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
 801bdfa:	b480      	push	{r7}
 801bdfc:	b085      	sub	sp, #20
 801bdfe:	af00      	add	r7, sp, #0
 801be00:	6078      	str	r0, [r7, #4]
 801be02:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = netif_igmp_data(ifp);
 801be04:	687b      	ldr	r3, [r7, #4]
 801be06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801be08:	60fb      	str	r3, [r7, #12]

  while (group != NULL) {
 801be0a:	e00a      	b.n	801be22 <igmp_lookfor_group+0x28>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 801be0c:	68fb      	ldr	r3, [r7, #12]
 801be0e:	685a      	ldr	r2, [r3, #4]
 801be10:	683b      	ldr	r3, [r7, #0]
 801be12:	681b      	ldr	r3, [r3, #0]
 801be14:	429a      	cmp	r2, r3
 801be16:	d101      	bne.n	801be1c <igmp_lookfor_group+0x22>
      return group;
 801be18:	68fb      	ldr	r3, [r7, #12]
 801be1a:	e006      	b.n	801be2a <igmp_lookfor_group+0x30>
    }
    group = group->next;
 801be1c:	68fb      	ldr	r3, [r7, #12]
 801be1e:	681b      	ldr	r3, [r3, #0]
 801be20:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 801be22:	68fb      	ldr	r3, [r7, #12]
 801be24:	2b00      	cmp	r3, #0
 801be26:	d1f1      	bne.n	801be0c <igmp_lookfor_group+0x12>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
 801be28:	2300      	movs	r3, #0
}
 801be2a:	4618      	mov	r0, r3
 801be2c:	3714      	adds	r7, #20
 801be2e:	46bd      	mov	sp, r7
 801be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be34:	4770      	bx	lr
	...

0801be38 <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
 801be38:	b580      	push	{r7, lr}
 801be3a:	b084      	sub	sp, #16
 801be3c:	af00      	add	r7, sp, #0
 801be3e:	6078      	str	r0, [r7, #4]
 801be40:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
 801be42:	687b      	ldr	r3, [r7, #4]
 801be44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801be46:	60fb      	str	r3, [r7, #12]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
 801be48:	6839      	ldr	r1, [r7, #0]
 801be4a:	6878      	ldr	r0, [r7, #4]
 801be4c:	f7ff ffd5 	bl	801bdfa <igmp_lookfor_group>
 801be50:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 801be52:	68bb      	ldr	r3, [r7, #8]
 801be54:	2b00      	cmp	r3, #0
 801be56:	d001      	beq.n	801be5c <igmp_lookup_group+0x24>
    /* Group already exists. */
    return group;
 801be58:	68bb      	ldr	r3, [r7, #8]
 801be5a:	e047      	b.n	801beec <igmp_lookup_group+0xb4>
  }

  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 801be5c:	200a      	movs	r0, #10
 801be5e:	f7f5 fc43 	bl	80116e8 <memp_malloc>
 801be62:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 801be64:	68bb      	ldr	r3, [r7, #8]
 801be66:	2b00      	cmp	r3, #0
 801be68:	d03f      	beq.n	801beea <igmp_lookup_group+0xb2>
    ip4_addr_set(&(group->group_address), addr);
 801be6a:	683b      	ldr	r3, [r7, #0]
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d002      	beq.n	801be76 <igmp_lookup_group+0x3e>
 801be70:	683b      	ldr	r3, [r7, #0]
 801be72:	681b      	ldr	r3, [r3, #0]
 801be74:	e000      	b.n	801be78 <igmp_lookup_group+0x40>
 801be76:	2300      	movs	r3, #0
 801be78:	68ba      	ldr	r2, [r7, #8]
 801be7a:	6053      	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
 801be7c:	68bb      	ldr	r3, [r7, #8]
 801be7e:	2200      	movs	r2, #0
 801be80:	815a      	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 801be82:	68bb      	ldr	r3, [r7, #8]
 801be84:	2200      	movs	r2, #0
 801be86:	725a      	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
 801be88:	68bb      	ldr	r3, [r7, #8]
 801be8a:	2200      	movs	r2, #0
 801be8c:	721a      	strb	r2, [r3, #8]
    group->use                = 0;
 801be8e:	68bb      	ldr	r3, [r7, #8]
 801be90:	2200      	movs	r2, #0
 801be92:	731a      	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */
    if (list_head == NULL) {
 801be94:	68fb      	ldr	r3, [r7, #12]
 801be96:	2b00      	cmp	r3, #0
 801be98:	d113      	bne.n	801bec2 <igmp_lookup_group+0x8a>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 801be9a:	683b      	ldr	r3, [r7, #0]
 801be9c:	681a      	ldr	r2, [r3, #0]
 801be9e:	4b15      	ldr	r3, [pc, #84]	@ (801bef4 <igmp_lookup_group+0xbc>)
 801bea0:	681b      	ldr	r3, [r3, #0]
 801bea2:	429a      	cmp	r2, r3
 801bea4:	d006      	beq.n	801beb4 <igmp_lookup_group+0x7c>
 801bea6:	4b14      	ldr	r3, [pc, #80]	@ (801bef8 <igmp_lookup_group+0xc0>)
 801bea8:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 801beac:	4913      	ldr	r1, [pc, #76]	@ (801befc <igmp_lookup_group+0xc4>)
 801beae:	4814      	ldr	r0, [pc, #80]	@ (801bf00 <igmp_lookup_group+0xc8>)
 801beb0:	f002 fd96 	bl	801e9e0 <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
 801beb4:	68bb      	ldr	r3, [r7, #8]
 801beb6:	2200      	movs	r2, #0
 801beb8:	601a      	str	r2, [r3, #0]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	68ba      	ldr	r2, [r7, #8]
 801bebe:	629a      	str	r2, [r3, #40]	@ 0x28
 801bec0:	e013      	b.n	801beea <igmp_lookup_group+0xb2>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 801bec2:	683b      	ldr	r3, [r7, #0]
 801bec4:	681a      	ldr	r2, [r3, #0]
 801bec6:	4b0b      	ldr	r3, [pc, #44]	@ (801bef4 <igmp_lookup_group+0xbc>)
 801bec8:	681b      	ldr	r3, [r3, #0]
 801beca:	429a      	cmp	r2, r3
 801becc:	d106      	bne.n	801bedc <igmp_lookup_group+0xa4>
 801bece:	4b0a      	ldr	r3, [pc, #40]	@ (801bef8 <igmp_lookup_group+0xc0>)
 801bed0:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801bed4:	490b      	ldr	r1, [pc, #44]	@ (801bf04 <igmp_lookup_group+0xcc>)
 801bed6:	480a      	ldr	r0, [pc, #40]	@ (801bf00 <igmp_lookup_group+0xc8>)
 801bed8:	f002 fd82 	bl	801e9e0 <iprintf>
                  (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
 801bedc:	68fb      	ldr	r3, [r7, #12]
 801bede:	681a      	ldr	r2, [r3, #0]
 801bee0:	68bb      	ldr	r3, [r7, #8]
 801bee2:	601a      	str	r2, [r3, #0]
      list_head->next = group;
 801bee4:	68fb      	ldr	r3, [r7, #12]
 801bee6:	68ba      	ldr	r2, [r7, #8]
 801bee8:	601a      	str	r2, [r3, #0]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group ? "" : "impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)ifp));

  return group;
 801beea:	68bb      	ldr	r3, [r7, #8]
}
 801beec:	4618      	mov	r0, r3
 801beee:	3710      	adds	r7, #16
 801bef0:	46bd      	mov	sp, r7
 801bef2:	bd80      	pop	{r7, pc}
 801bef4:	20004924 	.word	0x20004924
 801bef8:	08022ec4 	.word	0x08022ec4
 801befc:	08022efc 	.word	0x08022efc
 801bf00:	08022f30 	.word	0x08022f30
 801bf04:	08022f58 	.word	0x08022f58

0801bf08 <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
 801bf08:	b580      	push	{r7, lr}
 801bf0a:	b088      	sub	sp, #32
 801bf0c:	af00      	add	r7, sp, #0
 801bf0e:	60f8      	str	r0, [r7, #12]
 801bf10:	60b9      	str	r1, [r7, #8]
 801bf12:	607a      	str	r2, [r7, #4]
  struct igmp_group *groupref;

  IGMP_STATS_INC(igmp.recv);

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
 801bf14:	68fb      	ldr	r3, [r7, #12]
 801bf16:	895b      	ldrh	r3, [r3, #10]
 801bf18:	2b07      	cmp	r3, #7
 801bf1a:	d803      	bhi.n	801bf24 <igmp_input+0x1c>
    pbuf_free(p);
 801bf1c:	68f8      	ldr	r0, [r7, #12]
 801bf1e:	f7f6 fb3f 	bl	80125a0 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
 801bf22:	e086      	b.n	801c032 <igmp_input+0x12a>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print_val(IGMP_DEBUG, ip4_current_header()->dest);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
 801bf24:	68fb      	ldr	r3, [r7, #12]
 801bf26:	685b      	ldr	r3, [r3, #4]
 801bf28:	617b      	str	r3, [r7, #20]
  if (inet_chksum(igmp, p->len)) {
 801bf2a:	68fb      	ldr	r3, [r7, #12]
 801bf2c:	895b      	ldrh	r3, [r3, #10]
 801bf2e:	4619      	mov	r1, r3
 801bf30:	6978      	ldr	r0, [r7, #20]
 801bf32:	f7f4 ff1c 	bl	8010d6e <inet_chksum>
 801bf36:	4603      	mov	r3, r0
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	d003      	beq.n	801bf44 <igmp_input+0x3c>
    pbuf_free(p);
 801bf3c:	68f8      	ldr	r0, [r7, #12]
 801bf3e:	f7f6 fb2f 	bl	80125a0 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
 801bf42:	e076      	b.n	801c032 <igmp_input+0x12a>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 801bf44:	6879      	ldr	r1, [r7, #4]
 801bf46:	68b8      	ldr	r0, [r7, #8]
 801bf48:	f7ff ff57 	bl	801bdfa <igmp_lookfor_group>
 801bf4c:	61f8      	str	r0, [r7, #28]

  /* If group can be found or create... */
  if (!group) {
 801bf4e:	69fb      	ldr	r3, [r7, #28]
 801bf50:	2b00      	cmp	r3, #0
 801bf52:	d103      	bne.n	801bf5c <igmp_input+0x54>
    pbuf_free(p);
 801bf54:	68f8      	ldr	r0, [r7, #12]
 801bf56:	f7f6 fb23 	bl	80125a0 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
 801bf5a:	e06a      	b.n	801c032 <igmp_input+0x12a>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
 801bf5c:	697b      	ldr	r3, [r7, #20]
 801bf5e:	781b      	ldrb	r3, [r3, #0]
 801bf60:	2b11      	cmp	r3, #17
 801bf62:	d002      	beq.n	801bf6a <igmp_input+0x62>
 801bf64:	2b16      	cmp	r3, #22
 801bf66:	d04f      	beq.n	801c008 <igmp_input+0x100>
      break;
    default:
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
                               igmp->igmp_msgtype, group->group_state, (void *)&group, (void *)inp));
      IGMP_STATS_INC(igmp.proterr);
      break;
 801bf68:	e05f      	b.n	801c02a <igmp_input+0x122>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 801bf6a:	687b      	ldr	r3, [r7, #4]
 801bf6c:	681a      	ldr	r2, [r3, #0]
 801bf6e:	4b32      	ldr	r3, [pc, #200]	@ (801c038 <igmp_input+0x130>)
 801bf70:	681b      	ldr	r3, [r3, #0]
 801bf72:	429a      	cmp	r2, r3
 801bf74:	d125      	bne.n	801bfc2 <igmp_input+0xba>
 801bf76:	697b      	ldr	r3, [r7, #20]
 801bf78:	3304      	adds	r3, #4
 801bf7a:	2b00      	cmp	r3, #0
 801bf7c:	d003      	beq.n	801bf86 <igmp_input+0x7e>
 801bf7e:	697b      	ldr	r3, [r7, #20]
 801bf80:	685b      	ldr	r3, [r3, #4]
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	d11d      	bne.n	801bfc2 <igmp_input+0xba>
        if (igmp->igmp_maxresp == 0) {
 801bf86:	697b      	ldr	r3, [r7, #20]
 801bf88:	785b      	ldrb	r3, [r3, #1]
 801bf8a:	2b00      	cmp	r3, #0
 801bf8c:	d102      	bne.n	801bf94 <igmp_input+0x8c>
          igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 801bf8e:	697b      	ldr	r3, [r7, #20]
 801bf90:	220a      	movs	r2, #10
 801bf92:	705a      	strb	r2, [r3, #1]
        groupref = netif_igmp_data(inp);
 801bf94:	68bb      	ldr	r3, [r7, #8]
 801bf96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bf98:	61bb      	str	r3, [r7, #24]
        if (groupref != NULL) {
 801bf9a:	69bb      	ldr	r3, [r7, #24]
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d00c      	beq.n	801bfba <igmp_input+0xb2>
          groupref = groupref->next;
 801bfa0:	69bb      	ldr	r3, [r7, #24]
 801bfa2:	681b      	ldr	r3, [r3, #0]
 801bfa4:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 801bfa6:	e008      	b.n	801bfba <igmp_input+0xb2>
          igmp_delaying_member(groupref, igmp->igmp_maxresp);
 801bfa8:	697b      	ldr	r3, [r7, #20]
 801bfaa:	785b      	ldrb	r3, [r3, #1]
 801bfac:	4619      	mov	r1, r3
 801bfae:	69b8      	ldr	r0, [r7, #24]
 801bfb0:	f000 f92b 	bl	801c20a <igmp_delaying_member>
          groupref = groupref->next;
 801bfb4:	69bb      	ldr	r3, [r7, #24]
 801bfb6:	681b      	ldr	r3, [r3, #0]
 801bfb8:	61bb      	str	r3, [r7, #24]
        while (groupref) {
 801bfba:	69bb      	ldr	r3, [r7, #24]
 801bfbc:	2b00      	cmp	r3, #0
 801bfbe:	d1f3      	bne.n	801bfa8 <igmp_input+0xa0>
      if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 801bfc0:	e021      	b.n	801c006 <igmp_input+0xfe>
        if (!ip4_addr_isany(&igmp->igmp_group_address)) {
 801bfc2:	697b      	ldr	r3, [r7, #20]
 801bfc4:	3304      	adds	r3, #4
 801bfc6:	2b00      	cmp	r3, #0
 801bfc8:	d02c      	beq.n	801c024 <igmp_input+0x11c>
 801bfca:	697b      	ldr	r3, [r7, #20]
 801bfcc:	685b      	ldr	r3, [r3, #4]
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d028      	beq.n	801c024 <igmp_input+0x11c>
          if (ip4_addr_cmp(dest, &allsystems)) {
 801bfd2:	687b      	ldr	r3, [r7, #4]
 801bfd4:	681a      	ldr	r2, [r3, #0]
 801bfd6:	4b18      	ldr	r3, [pc, #96]	@ (801c038 <igmp_input+0x130>)
 801bfd8:	681b      	ldr	r3, [r3, #0]
 801bfda:	429a      	cmp	r2, r3
 801bfdc:	d109      	bne.n	801bff2 <igmp_input+0xea>
            ip4_addr_copy(groupaddr, igmp->igmp_group_address);
 801bfde:	697b      	ldr	r3, [r7, #20]
 801bfe0:	685b      	ldr	r3, [r3, #4]
 801bfe2:	613b      	str	r3, [r7, #16]
            group = igmp_lookfor_group(inp, &groupaddr);
 801bfe4:	f107 0310 	add.w	r3, r7, #16
 801bfe8:	4619      	mov	r1, r3
 801bfea:	68b8      	ldr	r0, [r7, #8]
 801bfec:	f7ff ff05 	bl	801bdfa <igmp_lookfor_group>
 801bff0:	61f8      	str	r0, [r7, #28]
          if (group != NULL) {
 801bff2:	69fb      	ldr	r3, [r7, #28]
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	d015      	beq.n	801c024 <igmp_input+0x11c>
            igmp_delaying_member(group, igmp->igmp_maxresp);
 801bff8:	697b      	ldr	r3, [r7, #20]
 801bffa:	785b      	ldrb	r3, [r3, #1]
 801bffc:	4619      	mov	r1, r3
 801bffe:	69f8      	ldr	r0, [r7, #28]
 801c000:	f000 f903 	bl	801c20a <igmp_delaying_member>
      break;
 801c004:	e00e      	b.n	801c024 <igmp_input+0x11c>
 801c006:	e00d      	b.n	801c024 <igmp_input+0x11c>
      if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 801c008:	69fb      	ldr	r3, [r7, #28]
 801c00a:	7a5b      	ldrb	r3, [r3, #9]
 801c00c:	2b01      	cmp	r3, #1
 801c00e:	d10b      	bne.n	801c028 <igmp_input+0x120>
        group->timer = 0; /* stopped */
 801c010:	69fb      	ldr	r3, [r7, #28]
 801c012:	2200      	movs	r2, #0
 801c014:	815a      	strh	r2, [r3, #10]
        group->group_state = IGMP_GROUP_IDLE_MEMBER;
 801c016:	69fb      	ldr	r3, [r7, #28]
 801c018:	2202      	movs	r2, #2
 801c01a:	725a      	strb	r2, [r3, #9]
        group->last_reporter_flag = 0;
 801c01c:	69fb      	ldr	r3, [r7, #28]
 801c01e:	2200      	movs	r2, #0
 801c020:	721a      	strb	r2, [r3, #8]
      break;
 801c022:	e001      	b.n	801c028 <igmp_input+0x120>
      break;
 801c024:	bf00      	nop
 801c026:	e000      	b.n	801c02a <igmp_input+0x122>
      break;
 801c028:	bf00      	nop
  }

  pbuf_free(p);
 801c02a:	68f8      	ldr	r0, [r7, #12]
 801c02c:	f7f6 fab8 	bl	80125a0 <pbuf_free>
  return;
 801c030:	bf00      	nop
}
 801c032:	3720      	adds	r7, #32
 801c034:	46bd      	mov	sp, r7
 801c036:	bd80      	pop	{r7, pc}
 801c038:	20004924 	.word	0x20004924

0801c03c <igmp_joingroup_netif>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif, an err_t otherwise
 */
err_t
igmp_joingroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
 801c03c:	b580      	push	{r7, lr}
 801c03e:	b084      	sub	sp, #16
 801c040:	af00      	add	r7, sp, #0
 801c042:	6078      	str	r0, [r7, #4]
 801c044:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;

  LWIP_ASSERT_CORE_LOCKED();

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 801c046:	683b      	ldr	r3, [r7, #0]
 801c048:	681b      	ldr	r3, [r3, #0]
 801c04a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c04e:	2be0      	cmp	r3, #224	@ 0xe0
 801c050:	d009      	beq.n	801c066 <igmp_joingroup_netif+0x2a>
 801c052:	4b2f      	ldr	r3, [pc, #188]	@ (801c110 <igmp_joingroup_netif+0xd4>)
 801c054:	f44f 72f6 	mov.w	r2, #492	@ 0x1ec
 801c058:	492e      	ldr	r1, [pc, #184]	@ (801c114 <igmp_joingroup_netif+0xd8>)
 801c05a:	482f      	ldr	r0, [pc, #188]	@ (801c118 <igmp_joingroup_netif+0xdc>)
 801c05c:	f002 fcc0 	bl	801e9e0 <iprintf>
 801c060:	f06f 0305 	mvn.w	r3, #5
 801c064:	e050      	b.n	801c108 <igmp_joingroup_netif+0xcc>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 801c066:	683b      	ldr	r3, [r7, #0]
 801c068:	681a      	ldr	r2, [r3, #0]
 801c06a:	4b2c      	ldr	r3, [pc, #176]	@ (801c11c <igmp_joingroup_netif+0xe0>)
 801c06c:	681b      	ldr	r3, [r3, #0]
 801c06e:	429a      	cmp	r2, r3
 801c070:	d109      	bne.n	801c086 <igmp_joingroup_netif+0x4a>
 801c072:	4b27      	ldr	r3, [pc, #156]	@ (801c110 <igmp_joingroup_netif+0xd4>)
 801c074:	f240 12ed 	movw	r2, #493	@ 0x1ed
 801c078:	4929      	ldr	r1, [pc, #164]	@ (801c120 <igmp_joingroup_netif+0xe4>)
 801c07a:	4827      	ldr	r0, [pc, #156]	@ (801c118 <igmp_joingroup_netif+0xdc>)
 801c07c:	f002 fcb0 	bl	801e9e0 <iprintf>
 801c080:	f06f 0305 	mvn.w	r3, #5
 801c084:	e040      	b.n	801c108 <igmp_joingroup_netif+0xcc>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801c08c:	f003 0320 	and.w	r3, r3, #32
 801c090:	2b00      	cmp	r3, #0
 801c092:	d109      	bne.n	801c0a8 <igmp_joingroup_netif+0x6c>
 801c094:	4b1e      	ldr	r3, [pc, #120]	@ (801c110 <igmp_joingroup_netif+0xd4>)
 801c096:	f44f 72f8 	mov.w	r2, #496	@ 0x1f0
 801c09a:	4922      	ldr	r1, [pc, #136]	@ (801c124 <igmp_joingroup_netif+0xe8>)
 801c09c:	481e      	ldr	r0, [pc, #120]	@ (801c118 <igmp_joingroup_netif+0xdc>)
 801c09e:	f002 fc9f 	bl	801e9e0 <iprintf>
 801c0a2:	f06f 0305 	mvn.w	r3, #5
 801c0a6:	e02f      	b.n	801c108 <igmp_joingroup_netif+0xcc>

  /* find group or create a new one if not found */
  group = igmp_lookup_group(netif, groupaddr);
 801c0a8:	6839      	ldr	r1, [r7, #0]
 801c0aa:	6878      	ldr	r0, [r7, #4]
 801c0ac:	f7ff fec4 	bl	801be38 <igmp_lookup_group>
 801c0b0:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 801c0b2:	68fb      	ldr	r3, [r7, #12]
 801c0b4:	2b00      	cmp	r3, #0
 801c0b6:	d025      	beq.n	801c104 <igmp_joingroup_netif+0xc8>
    /* This should create a new group, check the state to make sure */
    if (group->group_state != IGMP_GROUP_NON_MEMBER) {
 801c0b8:	68fb      	ldr	r3, [r7, #12]
 801c0ba:	7a5b      	ldrb	r3, [r3, #9]
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	d119      	bne.n	801c0f4 <igmp_joingroup_netif+0xb8>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: join to new group: "));
      ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
      LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

      /* If first use of the group, allow the group at the MAC level */
      if ((group->use == 0) && (netif->igmp_mac_filter != NULL)) {
 801c0c0:	68fb      	ldr	r3, [r7, #12]
 801c0c2:	7b1b      	ldrb	r3, [r3, #12]
 801c0c4:	2b00      	cmp	r3, #0
 801c0c6:	d109      	bne.n	801c0dc <igmp_joingroup_netif+0xa0>
 801c0c8:	687b      	ldr	r3, [r7, #4]
 801c0ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c0cc:	2b00      	cmp	r3, #0
 801c0ce:	d005      	beq.n	801c0dc <igmp_joingroup_netif+0xa0>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: igmp_mac_filter(ADD "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void *)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
 801c0d0:	687b      	ldr	r3, [r7, #4]
 801c0d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c0d4:	2201      	movs	r2, #1
 801c0d6:	6839      	ldr	r1, [r7, #0]
 801c0d8:	6878      	ldr	r0, [r7, #4]
 801c0da:	4798      	blx	r3
      }

      IGMP_STATS_INC(igmp.tx_join);
      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 801c0dc:	2216      	movs	r2, #22
 801c0de:	68f9      	ldr	r1, [r7, #12]
 801c0e0:	6878      	ldr	r0, [r7, #4]
 801c0e2:	f000 f8d9 	bl	801c298 <igmp_send>

      igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 801c0e6:	2105      	movs	r1, #5
 801c0e8:	68f8      	ldr	r0, [r7, #12]
 801c0ea:	f000 f86b 	bl	801c1c4 <igmp_start_timer>

      /* Need to work out where this timer comes from */
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 801c0ee:	68fb      	ldr	r3, [r7, #12]
 801c0f0:	2201      	movs	r2, #1
 801c0f2:	725a      	strb	r2, [r3, #9]
    }
    /* Increment group use */
    group->use++;
 801c0f4:	68fb      	ldr	r3, [r7, #12]
 801c0f6:	7b1b      	ldrb	r3, [r3, #12]
 801c0f8:	3301      	adds	r3, #1
 801c0fa:	b2da      	uxtb	r2, r3
 801c0fc:	68fb      	ldr	r3, [r7, #12]
 801c0fe:	731a      	strb	r2, [r3, #12]
    /* Join on this interface */
    return ERR_OK;
 801c100:	2300      	movs	r3, #0
 801c102:	e001      	b.n	801c108 <igmp_joingroup_netif+0xcc>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: Not enough memory to join to group\n"));
    return ERR_MEM;
 801c104:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 801c108:	4618      	mov	r0, r3
 801c10a:	3710      	adds	r7, #16
 801c10c:	46bd      	mov	sp, r7
 801c10e:	bd80      	pop	{r7, pc}
 801c110:	08022ec4 	.word	0x08022ec4
 801c114:	08023008 	.word	0x08023008
 801c118:	08022f30 	.word	0x08022f30
 801c11c:	20004924 	.word	0x20004924
 801c120:	08023044 	.word	0x08023044
 801c124:	08023080 	.word	0x08023080

0801c128 <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
 801c128:	b580      	push	{r7, lr}
 801c12a:	b082      	sub	sp, #8
 801c12c:	af00      	add	r7, sp, #0
  struct netif *netif;

  NETIF_FOREACH(netif) {
 801c12e:	4b15      	ldr	r3, [pc, #84]	@ (801c184 <igmp_tmr+0x5c>)
 801c130:	681b      	ldr	r3, [r3, #0]
 801c132:	607b      	str	r3, [r7, #4]
 801c134:	e01e      	b.n	801c174 <igmp_tmr+0x4c>
    struct igmp_group *group = netif_igmp_data(netif);
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c13a:	603b      	str	r3, [r7, #0]

    while (group != NULL) {
 801c13c:	e014      	b.n	801c168 <igmp_tmr+0x40>
      if (group->timer > 0) {
 801c13e:	683b      	ldr	r3, [r7, #0]
 801c140:	895b      	ldrh	r3, [r3, #10]
 801c142:	2b00      	cmp	r3, #0
 801c144:	d00d      	beq.n	801c162 <igmp_tmr+0x3a>
        group->timer--;
 801c146:	683b      	ldr	r3, [r7, #0]
 801c148:	895b      	ldrh	r3, [r3, #10]
 801c14a:	3b01      	subs	r3, #1
 801c14c:	b29a      	uxth	r2, r3
 801c14e:	683b      	ldr	r3, [r7, #0]
 801c150:	815a      	strh	r2, [r3, #10]
        if (group->timer == 0) {
 801c152:	683b      	ldr	r3, [r7, #0]
 801c154:	895b      	ldrh	r3, [r3, #10]
 801c156:	2b00      	cmp	r3, #0
 801c158:	d103      	bne.n	801c162 <igmp_tmr+0x3a>
          igmp_timeout(netif, group);
 801c15a:	6839      	ldr	r1, [r7, #0]
 801c15c:	6878      	ldr	r0, [r7, #4]
 801c15e:	f000 f813 	bl	801c188 <igmp_timeout>
        }
      }
      group = group->next;
 801c162:	683b      	ldr	r3, [r7, #0]
 801c164:	681b      	ldr	r3, [r3, #0]
 801c166:	603b      	str	r3, [r7, #0]
    while (group != NULL) {
 801c168:	683b      	ldr	r3, [r7, #0]
 801c16a:	2b00      	cmp	r3, #0
 801c16c:	d1e7      	bne.n	801c13e <igmp_tmr+0x16>
  NETIF_FOREACH(netif) {
 801c16e:	687b      	ldr	r3, [r7, #4]
 801c170:	681b      	ldr	r3, [r3, #0]
 801c172:	607b      	str	r3, [r7, #4]
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	2b00      	cmp	r3, #0
 801c178:	d1dd      	bne.n	801c136 <igmp_tmr+0xe>
    }
  }
}
 801c17a:	bf00      	nop
 801c17c:	bf00      	nop
 801c17e:	3708      	adds	r7, #8
 801c180:	46bd      	mov	sp, r7
 801c182:	bd80      	pop	{r7, pc}
 801c184:	20004790 	.word	0x20004790

0801c188 <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
 801c188:	b580      	push	{r7, lr}
 801c18a:	b082      	sub	sp, #8
 801c18c:	af00      	add	r7, sp, #0
 801c18e:	6078      	str	r0, [r7, #4]
 801c190:	6039      	str	r1, [r7, #0]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 801c192:	683b      	ldr	r3, [r7, #0]
 801c194:	7a5b      	ldrb	r3, [r3, #9]
 801c196:	2b01      	cmp	r3, #1
 801c198:	d10d      	bne.n	801c1b6 <igmp_timeout+0x2e>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
 801c19a:	683b      	ldr	r3, [r7, #0]
 801c19c:	685a      	ldr	r2, [r3, #4]
 801c19e:	4b08      	ldr	r3, [pc, #32]	@ (801c1c0 <igmp_timeout+0x38>)
 801c1a0:	681b      	ldr	r3, [r3, #0]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 801c1a2:	429a      	cmp	r2, r3
 801c1a4:	d007      	beq.n	801c1b6 <igmp_timeout+0x2e>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print_val(IGMP_DEBUG, group->group_address);
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void *)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 801c1a6:	683b      	ldr	r3, [r7, #0]
 801c1a8:	2202      	movs	r2, #2
 801c1aa:	725a      	strb	r2, [r3, #9]

    IGMP_STATS_INC(igmp.tx_report);
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 801c1ac:	2216      	movs	r2, #22
 801c1ae:	6839      	ldr	r1, [r7, #0]
 801c1b0:	6878      	ldr	r0, [r7, #4]
 801c1b2:	f000 f871 	bl	801c298 <igmp_send>
  }
}
 801c1b6:	bf00      	nop
 801c1b8:	3708      	adds	r7, #8
 801c1ba:	46bd      	mov	sp, r7
 801c1bc:	bd80      	pop	{r7, pc}
 801c1be:	bf00      	nop
 801c1c0:	20004924 	.word	0x20004924

0801c1c4 <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 801c1c4:	b580      	push	{r7, lr}
 801c1c6:	b082      	sub	sp, #8
 801c1c8:	af00      	add	r7, sp, #0
 801c1ca:	6078      	str	r0, [r7, #4]
 801c1cc:	460b      	mov	r3, r1
 801c1ce:	70fb      	strb	r3, [r7, #3]
#ifdef LWIP_RAND
  group->timer = (u16_t)(max_time > 2 ? (LWIP_RAND() % max_time) : 1);
 801c1d0:	78fb      	ldrb	r3, [r7, #3]
 801c1d2:	2b02      	cmp	r3, #2
 801c1d4:	d90b      	bls.n	801c1ee <igmp_start_timer+0x2a>
 801c1d6:	f002 fb03 	bl	801e7e0 <rand>
 801c1da:	4603      	mov	r3, r0
 801c1dc:	461a      	mov	r2, r3
 801c1de:	78fb      	ldrb	r3, [r7, #3]
 801c1e0:	fbb2 f1f3 	udiv	r1, r2, r3
 801c1e4:	fb01 f303 	mul.w	r3, r1, r3
 801c1e8:	1ad3      	subs	r3, r2, r3
 801c1ea:	b29a      	uxth	r2, r3
 801c1ec:	e000      	b.n	801c1f0 <igmp_start_timer+0x2c>
 801c1ee:	2201      	movs	r2, #1
 801c1f0:	687b      	ldr	r3, [r7, #4]
 801c1f2:	815a      	strh	r2, [r3, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	895b      	ldrh	r3, [r3, #10]
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	d102      	bne.n	801c202 <igmp_start_timer+0x3e>
    group->timer = 1;
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	2201      	movs	r2, #1
 801c200:	815a      	strh	r2, [r3, #10]
  }
}
 801c202:	bf00      	nop
 801c204:	3708      	adds	r7, #8
 801c206:	46bd      	mov	sp, r7
 801c208:	bd80      	pop	{r7, pc}

0801c20a <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 801c20a:	b580      	push	{r7, lr}
 801c20c:	b082      	sub	sp, #8
 801c20e:	af00      	add	r7, sp, #0
 801c210:	6078      	str	r0, [r7, #4]
 801c212:	460b      	mov	r3, r1
 801c214:	70fb      	strb	r3, [r7, #3]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 801c216:	687b      	ldr	r3, [r7, #4]
 801c218:	7a5b      	ldrb	r3, [r3, #9]
 801c21a:	2b02      	cmp	r3, #2
 801c21c:	d00d      	beq.n	801c23a <igmp_delaying_member+0x30>
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	7a5b      	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 801c222:	2b01      	cmp	r3, #1
 801c224:	d111      	bne.n	801c24a <igmp_delaying_member+0x40>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	895b      	ldrh	r3, [r3, #10]
      ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	d005      	beq.n	801c23a <igmp_delaying_member+0x30>
       ((group->timer == 0) || (maxresp < group->timer)))) {
 801c22e:	78fb      	ldrb	r3, [r7, #3]
 801c230:	b29a      	uxth	r2, r3
 801c232:	687b      	ldr	r3, [r7, #4]
 801c234:	895b      	ldrh	r3, [r3, #10]
 801c236:	429a      	cmp	r2, r3
 801c238:	d207      	bcs.n	801c24a <igmp_delaying_member+0x40>
    igmp_start_timer(group, maxresp);
 801c23a:	78fb      	ldrb	r3, [r7, #3]
 801c23c:	4619      	mov	r1, r3
 801c23e:	6878      	ldr	r0, [r7, #4]
 801c240:	f7ff ffc0 	bl	801c1c4 <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	2201      	movs	r2, #1
 801c248:	725a      	strb	r2, [r3, #9]
  }
}
 801c24a:	bf00      	nop
 801c24c:	3708      	adds	r7, #8
 801c24e:	46bd      	mov	sp, r7
 801c250:	bd80      	pop	{r7, pc}

0801c252 <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
 801c252:	b580      	push	{r7, lr}
 801c254:	b08c      	sub	sp, #48	@ 0x30
 801c256:	af06      	add	r7, sp, #24
 801c258:	60f8      	str	r0, [r7, #12]
 801c25a:	60b9      	str	r1, [r7, #8]
 801c25c:	607a      	str	r2, [r7, #4]
 801c25e:	603b      	str	r3, [r7, #0]
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 801c260:	f240 4394 	movw	r3, #1172	@ 0x494
 801c264:	82bb      	strh	r3, [r7, #20]
  ra[1] = 0x0000; /* Router shall examine packet */
 801c266:	2300      	movs	r3, #0
 801c268:	82fb      	strh	r3, [r7, #22]
  IGMP_STATS_INC(igmp.xmit);
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 801c26a:	2304      	movs	r3, #4
 801c26c:	9304      	str	r3, [sp, #16]
 801c26e:	f107 0314 	add.w	r3, r7, #20
 801c272:	9303      	str	r3, [sp, #12]
 801c274:	683b      	ldr	r3, [r7, #0]
 801c276:	9302      	str	r3, [sp, #8]
 801c278:	2302      	movs	r3, #2
 801c27a:	9301      	str	r3, [sp, #4]
 801c27c:	2300      	movs	r3, #0
 801c27e:	9300      	str	r3, [sp, #0]
 801c280:	2301      	movs	r3, #1
 801c282:	687a      	ldr	r2, [r7, #4]
 801c284:	68b9      	ldr	r1, [r7, #8]
 801c286:	68f8      	ldr	r0, [r7, #12]
 801c288:	f000 fab9 	bl	801c7fe <ip4_output_if_opt>
 801c28c:	4603      	mov	r3, r0
}
 801c28e:	4618      	mov	r0, r3
 801c290:	3718      	adds	r7, #24
 801c292:	46bd      	mov	sp, r7
 801c294:	bd80      	pop	{r7, pc}
	...

0801c298 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
 801c298:	b580      	push	{r7, lr}
 801c29a:	b088      	sub	sp, #32
 801c29c:	af00      	add	r7, sp, #0
 801c29e:	60f8      	str	r0, [r7, #12]
 801c2a0:	60b9      	str	r1, [r7, #8]
 801c2a2:	4613      	mov	r3, r2
 801c2a4:	71fb      	strb	r3, [r7, #7]
  struct pbuf     *p    = NULL;
 801c2a6:	2300      	movs	r3, #0
 801c2a8:	61bb      	str	r3, [r7, #24]
  struct igmp_msg *igmp = NULL;
 801c2aa:	2300      	movs	r3, #0
 801c2ac:	617b      	str	r3, [r7, #20]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 801c2ae:	4b2f      	ldr	r3, [pc, #188]	@ (801c36c <igmp_send+0xd4>)
 801c2b0:	681b      	ldr	r3, [r3, #0]
 801c2b2:	613b      	str	r3, [r7, #16]
  ip4_addr_t  *dest = NULL;
 801c2b4:	2300      	movs	r3, #0
 801c2b6:	61fb      	str	r3, [r7, #28]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 801c2b8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c2bc:	2108      	movs	r1, #8
 801c2be:	2036      	movs	r0, #54	@ 0x36
 801c2c0:	f7f5 fe8a 	bl	8011fd8 <pbuf_alloc>
 801c2c4:	61b8      	str	r0, [r7, #24]

  if (p) {
 801c2c6:	69bb      	ldr	r3, [r7, #24]
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	d04b      	beq.n	801c364 <igmp_send+0xcc>
    igmp = (struct igmp_msg *)p->payload;
 801c2cc:	69bb      	ldr	r3, [r7, #24]
 801c2ce:	685b      	ldr	r3, [r3, #4]
 801c2d0:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 801c2d2:	69bb      	ldr	r3, [r7, #24]
 801c2d4:	895b      	ldrh	r3, [r3, #10]
 801c2d6:	2b07      	cmp	r3, #7
 801c2d8:	d806      	bhi.n	801c2e8 <igmp_send+0x50>
 801c2da:	4b25      	ldr	r3, [pc, #148]	@ (801c370 <igmp_send+0xd8>)
 801c2dc:	f240 3202 	movw	r2, #770	@ 0x302
 801c2e0:	4924      	ldr	r1, [pc, #144]	@ (801c374 <igmp_send+0xdc>)
 801c2e2:	4825      	ldr	r0, [pc, #148]	@ (801c378 <igmp_send+0xe0>)
 801c2e4:	f002 fb7c 	bl	801e9e0 <iprintf>
                (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
 801c2e8:	68fb      	ldr	r3, [r7, #12]
 801c2ea:	3304      	adds	r3, #4
 801c2ec:	681b      	ldr	r3, [r3, #0]
 801c2ee:	613b      	str	r3, [r7, #16]

    if (type == IGMP_V2_MEMB_REPORT) {
 801c2f0:	79fb      	ldrb	r3, [r7, #7]
 801c2f2:	2b16      	cmp	r3, #22
 801c2f4:	d10a      	bne.n	801c30c <igmp_send+0x74>
      dest = &(group->group_address);
 801c2f6:	68bb      	ldr	r3, [r7, #8]
 801c2f8:	3304      	adds	r3, #4
 801c2fa:	61fb      	str	r3, [r7, #28]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 801c2fc:	68bb      	ldr	r3, [r7, #8]
 801c2fe:	685a      	ldr	r2, [r3, #4]
 801c300:	697b      	ldr	r3, [r7, #20]
 801c302:	605a      	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 801c304:	68bb      	ldr	r3, [r7, #8]
 801c306:	2201      	movs	r2, #1
 801c308:	721a      	strb	r2, [r3, #8]
 801c30a:	e008      	b.n	801c31e <igmp_send+0x86>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 801c30c:	79fb      	ldrb	r3, [r7, #7]
 801c30e:	2b17      	cmp	r3, #23
 801c310:	d105      	bne.n	801c31e <igmp_send+0x86>
        dest = &allrouters;
 801c312:	4b1a      	ldr	r3, [pc, #104]	@ (801c37c <igmp_send+0xe4>)
 801c314:	61fb      	str	r3, [r7, #28]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 801c316:	68bb      	ldr	r3, [r7, #8]
 801c318:	685a      	ldr	r2, [r3, #4]
 801c31a:	697b      	ldr	r3, [r7, #20]
 801c31c:	605a      	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 801c31e:	79fb      	ldrb	r3, [r7, #7]
 801c320:	2b16      	cmp	r3, #22
 801c322:	d002      	beq.n	801c32a <igmp_send+0x92>
 801c324:	79fb      	ldrb	r3, [r7, #7]
 801c326:	2b17      	cmp	r3, #23
 801c328:	d119      	bne.n	801c35e <igmp_send+0xc6>
      igmp->igmp_msgtype  = type;
 801c32a:	697b      	ldr	r3, [r7, #20]
 801c32c:	79fa      	ldrb	r2, [r7, #7]
 801c32e:	701a      	strb	r2, [r3, #0]
      igmp->igmp_maxresp  = 0;
 801c330:	697b      	ldr	r3, [r7, #20]
 801c332:	2200      	movs	r2, #0
 801c334:	705a      	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
 801c336:	697b      	ldr	r3, [r7, #20]
 801c338:	2200      	movs	r2, #0
 801c33a:	709a      	strb	r2, [r3, #2]
 801c33c:	2200      	movs	r2, #0
 801c33e:	70da      	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 801c340:	2108      	movs	r1, #8
 801c342:	6978      	ldr	r0, [r7, #20]
 801c344:	f7f4 fd13 	bl	8010d6e <inet_chksum>
 801c348:	4603      	mov	r3, r0
 801c34a:	461a      	mov	r2, r3
 801c34c:	697b      	ldr	r3, [r7, #20]
 801c34e:	805a      	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
 801c350:	f107 0110 	add.w	r1, r7, #16
 801c354:	68fb      	ldr	r3, [r7, #12]
 801c356:	69fa      	ldr	r2, [r7, #28]
 801c358:	69b8      	ldr	r0, [r7, #24]
 801c35a:	f7ff ff7a 	bl	801c252 <igmp_ip_output_if>
    }

    pbuf_free(p);
 801c35e:	69b8      	ldr	r0, [r7, #24]
 801c360:	f7f6 f91e 	bl	80125a0 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 801c364:	bf00      	nop
 801c366:	3720      	adds	r7, #32
 801c368:	46bd      	mov	sp, r7
 801c36a:	bd80      	pop	{r7, pc}
 801c36c:	080236a0 	.word	0x080236a0
 801c370:	08022ec4 	.word	0x08022ec4
 801c374:	080231e0 	.word	0x080231e0
 801c378:	08022f30 	.word	0x08022f30
 801c37c:	20004928 	.word	0x20004928

0801c380 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801c380:	b480      	push	{r7}
 801c382:	b085      	sub	sp, #20
 801c384:	af00      	add	r7, sp, #0
 801c386:	6078      	str	r0, [r7, #4]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 801c388:	687b      	ldr	r3, [r7, #4]
 801c38a:	681b      	ldr	r3, [r3, #0]
 801c38c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c390:	2be0      	cmp	r3, #224	@ 0xe0
 801c392:	d106      	bne.n	801c3a2 <ip4_route+0x22>
 801c394:	4b36      	ldr	r3, [pc, #216]	@ (801c470 <ip4_route+0xf0>)
 801c396:	681b      	ldr	r3, [r3, #0]
 801c398:	2b00      	cmp	r3, #0
 801c39a:	d002      	beq.n	801c3a2 <ip4_route+0x22>
    return ip4_default_multicast_netif;
 801c39c:	4b34      	ldr	r3, [pc, #208]	@ (801c470 <ip4_route+0xf0>)
 801c39e:	681b      	ldr	r3, [r3, #0]
 801c3a0:	e060      	b.n	801c464 <ip4_route+0xe4>

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801c3a2:	4b34      	ldr	r3, [pc, #208]	@ (801c474 <ip4_route+0xf4>)
 801c3a4:	681b      	ldr	r3, [r3, #0]
 801c3a6:	60fb      	str	r3, [r7, #12]
 801c3a8:	e036      	b.n	801c418 <ip4_route+0x98>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c3aa:	68fb      	ldr	r3, [r7, #12]
 801c3ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801c3b0:	f003 0301 	and.w	r3, r3, #1
 801c3b4:	b2db      	uxtb	r3, r3
 801c3b6:	2b00      	cmp	r3, #0
 801c3b8:	d02b      	beq.n	801c412 <ip4_route+0x92>
 801c3ba:	68fb      	ldr	r3, [r7, #12]
 801c3bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801c3c0:	089b      	lsrs	r3, r3, #2
 801c3c2:	f003 0301 	and.w	r3, r3, #1
 801c3c6:	b2db      	uxtb	r3, r3
 801c3c8:	2b00      	cmp	r3, #0
 801c3ca:	d022      	beq.n	801c412 <ip4_route+0x92>
 801c3cc:	68fb      	ldr	r3, [r7, #12]
 801c3ce:	3304      	adds	r3, #4
 801c3d0:	681b      	ldr	r3, [r3, #0]
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	d01d      	beq.n	801c412 <ip4_route+0x92>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801c3d6:	687b      	ldr	r3, [r7, #4]
 801c3d8:	681a      	ldr	r2, [r3, #0]
 801c3da:	68fb      	ldr	r3, [r7, #12]
 801c3dc:	3304      	adds	r3, #4
 801c3de:	681b      	ldr	r3, [r3, #0]
 801c3e0:	405a      	eors	r2, r3
 801c3e2:	68fb      	ldr	r3, [r7, #12]
 801c3e4:	3308      	adds	r3, #8
 801c3e6:	681b      	ldr	r3, [r3, #0]
 801c3e8:	4013      	ands	r3, r2
 801c3ea:	2b00      	cmp	r3, #0
 801c3ec:	d101      	bne.n	801c3f2 <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 801c3ee:	68fb      	ldr	r3, [r7, #12]
 801c3f0:	e038      	b.n	801c464 <ip4_route+0xe4>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801c3f2:	68fb      	ldr	r3, [r7, #12]
 801c3f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801c3f8:	f003 0302 	and.w	r3, r3, #2
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d108      	bne.n	801c412 <ip4_route+0x92>
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	681a      	ldr	r2, [r3, #0]
 801c404:	68fb      	ldr	r3, [r7, #12]
 801c406:	330c      	adds	r3, #12
 801c408:	681b      	ldr	r3, [r3, #0]
 801c40a:	429a      	cmp	r2, r3
 801c40c:	d101      	bne.n	801c412 <ip4_route+0x92>
        /* return netif on which to forward IP packet */
        return netif;
 801c40e:	68fb      	ldr	r3, [r7, #12]
 801c410:	e028      	b.n	801c464 <ip4_route+0xe4>
  NETIF_FOREACH(netif) {
 801c412:	68fb      	ldr	r3, [r7, #12]
 801c414:	681b      	ldr	r3, [r3, #0]
 801c416:	60fb      	str	r3, [r7, #12]
 801c418:	68fb      	ldr	r3, [r7, #12]
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d1c5      	bne.n	801c3aa <ip4_route+0x2a>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c41e:	4b16      	ldr	r3, [pc, #88]	@ (801c478 <ip4_route+0xf8>)
 801c420:	681b      	ldr	r3, [r3, #0]
 801c422:	2b00      	cmp	r3, #0
 801c424:	d01a      	beq.n	801c45c <ip4_route+0xdc>
 801c426:	4b14      	ldr	r3, [pc, #80]	@ (801c478 <ip4_route+0xf8>)
 801c428:	681b      	ldr	r3, [r3, #0]
 801c42a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801c42e:	f003 0301 	and.w	r3, r3, #1
 801c432:	2b00      	cmp	r3, #0
 801c434:	d012      	beq.n	801c45c <ip4_route+0xdc>
 801c436:	4b10      	ldr	r3, [pc, #64]	@ (801c478 <ip4_route+0xf8>)
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801c43e:	f003 0304 	and.w	r3, r3, #4
 801c442:	2b00      	cmp	r3, #0
 801c444:	d00a      	beq.n	801c45c <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c446:	4b0c      	ldr	r3, [pc, #48]	@ (801c478 <ip4_route+0xf8>)
 801c448:	681b      	ldr	r3, [r3, #0]
 801c44a:	3304      	adds	r3, #4
 801c44c:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c44e:	2b00      	cmp	r3, #0
 801c450:	d004      	beq.n	801c45c <ip4_route+0xdc>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c452:	687b      	ldr	r3, [r7, #4]
 801c454:	681b      	ldr	r3, [r3, #0]
 801c456:	b2db      	uxtb	r3, r3
 801c458:	2b7f      	cmp	r3, #127	@ 0x7f
 801c45a:	d101      	bne.n	801c460 <ip4_route+0xe0>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801c45c:	2300      	movs	r3, #0
 801c45e:	e001      	b.n	801c464 <ip4_route+0xe4>
  }

  return netif_default;
 801c460:	4b05      	ldr	r3, [pc, #20]	@ (801c478 <ip4_route+0xf8>)
 801c462:	681b      	ldr	r3, [r3, #0]
}
 801c464:	4618      	mov	r0, r3
 801c466:	3714      	adds	r7, #20
 801c468:	46bd      	mov	sp, r7
 801c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c46e:	4770      	bx	lr
 801c470:	20004930 	.word	0x20004930
 801c474:	20004790 	.word	0x20004790
 801c478:	20004794 	.word	0x20004794

0801c47c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801c47c:	b580      	push	{r7, lr}
 801c47e:	b082      	sub	sp, #8
 801c480:	af00      	add	r7, sp, #0
 801c482:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801c48a:	f003 0301 	and.w	r3, r3, #1
 801c48e:	b2db      	uxtb	r3, r3
 801c490:	2b00      	cmp	r3, #0
 801c492:	d016      	beq.n	801c4c2 <ip4_input_accept+0x46>
 801c494:	687b      	ldr	r3, [r7, #4]
 801c496:	3304      	adds	r3, #4
 801c498:	681b      	ldr	r3, [r3, #0]
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	d011      	beq.n	801c4c2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801c49e:	4b0b      	ldr	r3, [pc, #44]	@ (801c4cc <ip4_input_accept+0x50>)
 801c4a0:	695a      	ldr	r2, [r3, #20]
 801c4a2:	687b      	ldr	r3, [r7, #4]
 801c4a4:	3304      	adds	r3, #4
 801c4a6:	681b      	ldr	r3, [r3, #0]
 801c4a8:	429a      	cmp	r2, r3
 801c4aa:	d008      	beq.n	801c4be <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801c4ac:	4b07      	ldr	r3, [pc, #28]	@ (801c4cc <ip4_input_accept+0x50>)
 801c4ae:	695b      	ldr	r3, [r3, #20]
 801c4b0:	6879      	ldr	r1, [r7, #4]
 801c4b2:	4618      	mov	r0, r3
 801c4b4:	f000 fad4 	bl	801ca60 <ip4_addr_isbroadcast_u32>
 801c4b8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801c4ba:	2b00      	cmp	r3, #0
 801c4bc:	d001      	beq.n	801c4c2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801c4be:	2301      	movs	r3, #1
 801c4c0:	e000      	b.n	801c4c4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801c4c2:	2300      	movs	r3, #0
}
 801c4c4:	4618      	mov	r0, r3
 801c4c6:	3708      	adds	r7, #8
 801c4c8:	46bd      	mov	sp, r7
 801c4ca:	bd80      	pop	{r7, pc}
 801c4cc:	20004768 	.word	0x20004768

0801c4d0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801c4d0:	b580      	push	{r7, lr}
 801c4d2:	b088      	sub	sp, #32
 801c4d4:	af00      	add	r7, sp, #0
 801c4d6:	6078      	str	r0, [r7, #4]
 801c4d8:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801c4da:	2301      	movs	r3, #1
 801c4dc:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	685b      	ldr	r3, [r3, #4]
 801c4e2:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801c4e4:	69fb      	ldr	r3, [r7, #28]
 801c4e6:	781b      	ldrb	r3, [r3, #0]
 801c4e8:	091b      	lsrs	r3, r3, #4
 801c4ea:	b2db      	uxtb	r3, r3
 801c4ec:	2b04      	cmp	r3, #4
 801c4ee:	d004      	beq.n	801c4fa <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801c4f0:	6878      	ldr	r0, [r7, #4]
 801c4f2:	f7f6 f855 	bl	80125a0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801c4f6:	2300      	movs	r3, #0
 801c4f8:	e157      	b.n	801c7aa <ip4_input+0x2da>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801c4fa:	69fb      	ldr	r3, [r7, #28]
 801c4fc:	781b      	ldrb	r3, [r3, #0]
 801c4fe:	f003 030f 	and.w	r3, r3, #15
 801c502:	b2db      	uxtb	r3, r3
 801c504:	009b      	lsls	r3, r3, #2
 801c506:	b2db      	uxtb	r3, r3
 801c508:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801c50a:	69fb      	ldr	r3, [r7, #28]
 801c50c:	885b      	ldrh	r3, [r3, #2]
 801c50e:	b29b      	uxth	r3, r3
 801c510:	4618      	mov	r0, r3
 801c512:	f7f4 faf1 	bl	8010af8 <lwip_htons>
 801c516:	4603      	mov	r3, r0
 801c518:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	891b      	ldrh	r3, [r3, #8]
 801c51e:	8a3a      	ldrh	r2, [r7, #16]
 801c520:	429a      	cmp	r2, r3
 801c522:	d204      	bcs.n	801c52e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801c524:	8a3b      	ldrh	r3, [r7, #16]
 801c526:	4619      	mov	r1, r3
 801c528:	6878      	ldr	r0, [r7, #4]
 801c52a:	f7f5 feb3 	bl	8012294 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	895b      	ldrh	r3, [r3, #10]
 801c532:	8a7a      	ldrh	r2, [r7, #18]
 801c534:	429a      	cmp	r2, r3
 801c536:	d807      	bhi.n	801c548 <ip4_input+0x78>
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	891b      	ldrh	r3, [r3, #8]
 801c53c:	8a3a      	ldrh	r2, [r7, #16]
 801c53e:	429a      	cmp	r2, r3
 801c540:	d802      	bhi.n	801c548 <ip4_input+0x78>
 801c542:	8a7b      	ldrh	r3, [r7, #18]
 801c544:	2b13      	cmp	r3, #19
 801c546:	d804      	bhi.n	801c552 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801c548:	6878      	ldr	r0, [r7, #4]
 801c54a:	f7f6 f829 	bl	80125a0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801c54e:	2300      	movs	r3, #0
 801c550:	e12b      	b.n	801c7aa <ip4_input+0x2da>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801c552:	69fb      	ldr	r3, [r7, #28]
 801c554:	691b      	ldr	r3, [r3, #16]
 801c556:	4a97      	ldr	r2, [pc, #604]	@ (801c7b4 <ip4_input+0x2e4>)
 801c558:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801c55a:	69fb      	ldr	r3, [r7, #28]
 801c55c:	68db      	ldr	r3, [r3, #12]
 801c55e:	4a95      	ldr	r2, [pc, #596]	@ (801c7b4 <ip4_input+0x2e4>)
 801c560:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c562:	4b94      	ldr	r3, [pc, #592]	@ (801c7b4 <ip4_input+0x2e4>)
 801c564:	695b      	ldr	r3, [r3, #20]
 801c566:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c56a:	2be0      	cmp	r3, #224	@ 0xe0
 801c56c:	d120      	bne.n	801c5b0 <ip4_input+0xe0>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 801c56e:	683b      	ldr	r3, [r7, #0]
 801c570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801c574:	f003 0320 	and.w	r3, r3, #32
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d016      	beq.n	801c5aa <ip4_input+0xda>
 801c57c:	498e      	ldr	r1, [pc, #568]	@ (801c7b8 <ip4_input+0x2e8>)
 801c57e:	6838      	ldr	r0, [r7, #0]
 801c580:	f7ff fc3b 	bl	801bdfa <igmp_lookfor_group>
 801c584:	4603      	mov	r3, r0
 801c586:	2b00      	cmp	r3, #0
 801c588:	d00f      	beq.n	801c5aa <ip4_input+0xda>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
 801c58a:	4b8c      	ldr	r3, [pc, #560]	@ (801c7bc <ip4_input+0x2ec>)
 801c58c:	60bb      	str	r3, [r7, #8]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 801c58e:	4b89      	ldr	r3, [pc, #548]	@ (801c7b4 <ip4_input+0x2e4>)
 801c590:	695a      	ldr	r2, [r3, #20]
 801c592:	68bb      	ldr	r3, [r7, #8]
 801c594:	429a      	cmp	r2, r3
 801c596:	d105      	bne.n	801c5a4 <ip4_input+0xd4>
          ip4_addr_isany(ip4_current_src_addr())) {
 801c598:	4b86      	ldr	r3, [pc, #536]	@ (801c7b4 <ip4_input+0x2e4>)
 801c59a:	691b      	ldr	r3, [r3, #16]
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	d101      	bne.n	801c5a4 <ip4_input+0xd4>
        check_ip_src = 0;
 801c5a0:	2300      	movs	r3, #0
 801c5a2:	617b      	str	r3, [r7, #20]
      }
      netif = inp;
 801c5a4:	683b      	ldr	r3, [r7, #0]
 801c5a6:	61bb      	str	r3, [r7, #24]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 801c5a8:	e02a      	b.n	801c600 <ip4_input+0x130>
    } else {
      netif = NULL;
 801c5aa:	2300      	movs	r3, #0
 801c5ac:	61bb      	str	r3, [r7, #24]
 801c5ae:	e027      	b.n	801c600 <ip4_input+0x130>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801c5b0:	6838      	ldr	r0, [r7, #0]
 801c5b2:	f7ff ff63 	bl	801c47c <ip4_input_accept>
 801c5b6:	4603      	mov	r3, r0
 801c5b8:	2b00      	cmp	r3, #0
 801c5ba:	d002      	beq.n	801c5c2 <ip4_input+0xf2>
      netif = inp;
 801c5bc:	683b      	ldr	r3, [r7, #0]
 801c5be:	61bb      	str	r3, [r7, #24]
 801c5c0:	e01e      	b.n	801c600 <ip4_input+0x130>
    } else {
      netif = NULL;
 801c5c2:	2300      	movs	r3, #0
 801c5c4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801c5c6:	4b7b      	ldr	r3, [pc, #492]	@ (801c7b4 <ip4_input+0x2e4>)
 801c5c8:	695b      	ldr	r3, [r3, #20]
 801c5ca:	b2db      	uxtb	r3, r3
 801c5cc:	2b7f      	cmp	r3, #127	@ 0x7f
 801c5ce:	d017      	beq.n	801c600 <ip4_input+0x130>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801c5d0:	4b7b      	ldr	r3, [pc, #492]	@ (801c7c0 <ip4_input+0x2f0>)
 801c5d2:	681b      	ldr	r3, [r3, #0]
 801c5d4:	61bb      	str	r3, [r7, #24]
 801c5d6:	e00e      	b.n	801c5f6 <ip4_input+0x126>
          if (netif == inp) {
 801c5d8:	69ba      	ldr	r2, [r7, #24]
 801c5da:	683b      	ldr	r3, [r7, #0]
 801c5dc:	429a      	cmp	r2, r3
 801c5de:	d006      	beq.n	801c5ee <ip4_input+0x11e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801c5e0:	69b8      	ldr	r0, [r7, #24]
 801c5e2:	f7ff ff4b 	bl	801c47c <ip4_input_accept>
 801c5e6:	4603      	mov	r3, r0
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	d108      	bne.n	801c5fe <ip4_input+0x12e>
 801c5ec:	e000      	b.n	801c5f0 <ip4_input+0x120>
            continue;
 801c5ee:	bf00      	nop
        NETIF_FOREACH(netif) {
 801c5f0:	69bb      	ldr	r3, [r7, #24]
 801c5f2:	681b      	ldr	r3, [r3, #0]
 801c5f4:	61bb      	str	r3, [r7, #24]
 801c5f6:	69bb      	ldr	r3, [r7, #24]
 801c5f8:	2b00      	cmp	r3, #0
 801c5fa:	d1ed      	bne.n	801c5d8 <ip4_input+0x108>
 801c5fc:	e000      	b.n	801c600 <ip4_input+0x130>
            break;
 801c5fe:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801c600:	69bb      	ldr	r3, [r7, #24]
 801c602:	2b00      	cmp	r3, #0
 801c604:	d111      	bne.n	801c62a <ip4_input+0x15a>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801c606:	69fb      	ldr	r3, [r7, #28]
 801c608:	7a5b      	ldrb	r3, [r3, #9]
 801c60a:	2b11      	cmp	r3, #17
 801c60c:	d10d      	bne.n	801c62a <ip4_input+0x15a>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801c60e:	8a7b      	ldrh	r3, [r7, #18]
 801c610:	69fa      	ldr	r2, [r7, #28]
 801c612:	4413      	add	r3, r2
 801c614:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801c616:	68fb      	ldr	r3, [r7, #12]
 801c618:	885b      	ldrh	r3, [r3, #2]
 801c61a:	b29b      	uxth	r3, r3
 801c61c:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801c620:	d103      	bne.n	801c62a <ip4_input+0x15a>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801c622:	683b      	ldr	r3, [r7, #0]
 801c624:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801c626:	2300      	movs	r3, #0
 801c628:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801c62a:	697b      	ldr	r3, [r7, #20]
 801c62c:	2b00      	cmp	r3, #0
 801c62e:	d017      	beq.n	801c660 <ip4_input+0x190>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801c630:	4b60      	ldr	r3, [pc, #384]	@ (801c7b4 <ip4_input+0x2e4>)
 801c632:	691b      	ldr	r3, [r3, #16]
 801c634:	2b00      	cmp	r3, #0
 801c636:	d013      	beq.n	801c660 <ip4_input+0x190>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c638:	4b5e      	ldr	r3, [pc, #376]	@ (801c7b4 <ip4_input+0x2e4>)
 801c63a:	691b      	ldr	r3, [r3, #16]
 801c63c:	6839      	ldr	r1, [r7, #0]
 801c63e:	4618      	mov	r0, r3
 801c640:	f000 fa0e 	bl	801ca60 <ip4_addr_isbroadcast_u32>
 801c644:	4603      	mov	r3, r0
 801c646:	2b00      	cmp	r3, #0
 801c648:	d105      	bne.n	801c656 <ip4_input+0x186>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801c64a:	4b5a      	ldr	r3, [pc, #360]	@ (801c7b4 <ip4_input+0x2e4>)
 801c64c:	691b      	ldr	r3, [r3, #16]
 801c64e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c652:	2be0      	cmp	r3, #224	@ 0xe0
 801c654:	d104      	bne.n	801c660 <ip4_input+0x190>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801c656:	6878      	ldr	r0, [r7, #4]
 801c658:	f7f5 ffa2 	bl	80125a0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801c65c:	2300      	movs	r3, #0
 801c65e:	e0a4      	b.n	801c7aa <ip4_input+0x2da>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801c660:	69bb      	ldr	r3, [r7, #24]
 801c662:	2b00      	cmp	r3, #0
 801c664:	d104      	bne.n	801c670 <ip4_input+0x1a0>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801c666:	6878      	ldr	r0, [r7, #4]
 801c668:	f7f5 ff9a 	bl	80125a0 <pbuf_free>
    return ERR_OK;
 801c66c:	2300      	movs	r3, #0
 801c66e:	e09c      	b.n	801c7aa <ip4_input+0x2da>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801c670:	69fb      	ldr	r3, [r7, #28]
 801c672:	88db      	ldrh	r3, [r3, #6]
 801c674:	b29b      	uxth	r3, r3
 801c676:	461a      	mov	r2, r3
 801c678:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801c67c:	4013      	ands	r3, r2
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d00b      	beq.n	801c69a <ip4_input+0x1ca>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801c682:	6878      	ldr	r0, [r7, #4]
 801c684:	f000 fd32 	bl	801d0ec <ip4_reass>
 801c688:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801c68a:	687b      	ldr	r3, [r7, #4]
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	d101      	bne.n	801c694 <ip4_input+0x1c4>
      return ERR_OK;
 801c690:	2300      	movs	r3, #0
 801c692:	e08a      	b.n	801c7aa <ip4_input+0x2da>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	685b      	ldr	r3, [r3, #4]
 801c698:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801c69a:	4a46      	ldr	r2, [pc, #280]	@ (801c7b4 <ip4_input+0x2e4>)
 801c69c:	69bb      	ldr	r3, [r7, #24]
 801c69e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801c6a0:	4a44      	ldr	r2, [pc, #272]	@ (801c7b4 <ip4_input+0x2e4>)
 801c6a2:	683b      	ldr	r3, [r7, #0]
 801c6a4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801c6a6:	4a43      	ldr	r2, [pc, #268]	@ (801c7b4 <ip4_input+0x2e4>)
 801c6a8:	69fb      	ldr	r3, [r7, #28]
 801c6aa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801c6ac:	69fb      	ldr	r3, [r7, #28]
 801c6ae:	781b      	ldrb	r3, [r3, #0]
 801c6b0:	f003 030f 	and.w	r3, r3, #15
 801c6b4:	b2db      	uxtb	r3, r3
 801c6b6:	009b      	lsls	r3, r3, #2
 801c6b8:	b2db      	uxtb	r3, r3
 801c6ba:	461a      	mov	r2, r3
 801c6bc:	4b3d      	ldr	r3, [pc, #244]	@ (801c7b4 <ip4_input+0x2e4>)
 801c6be:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801c6c0:	8a7b      	ldrh	r3, [r7, #18]
 801c6c2:	4619      	mov	r1, r3
 801c6c4:	6878      	ldr	r0, [r7, #4]
 801c6c6:	f7f5 fee5 	bl	8012494 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801c6ca:	69fb      	ldr	r3, [r7, #28]
 801c6cc:	7a5b      	ldrb	r3, [r3, #9]
 801c6ce:	3b01      	subs	r3, #1
 801c6d0:	2b10      	cmp	r3, #16
 801c6d2:	d83a      	bhi.n	801c74a <ip4_input+0x27a>
 801c6d4:	a201      	add	r2, pc, #4	@ (adr r2, 801c6dc <ip4_input+0x20c>)
 801c6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c6da:	bf00      	nop
 801c6dc:	0801c735 	.word	0x0801c735
 801c6e0:	0801c73f 	.word	0x0801c73f
 801c6e4:	0801c74b 	.word	0x0801c74b
 801c6e8:	0801c74b 	.word	0x0801c74b
 801c6ec:	0801c74b 	.word	0x0801c74b
 801c6f0:	0801c72b 	.word	0x0801c72b
 801c6f4:	0801c74b 	.word	0x0801c74b
 801c6f8:	0801c74b 	.word	0x0801c74b
 801c6fc:	0801c74b 	.word	0x0801c74b
 801c700:	0801c74b 	.word	0x0801c74b
 801c704:	0801c74b 	.word	0x0801c74b
 801c708:	0801c74b 	.word	0x0801c74b
 801c70c:	0801c74b 	.word	0x0801c74b
 801c710:	0801c74b 	.word	0x0801c74b
 801c714:	0801c74b 	.word	0x0801c74b
 801c718:	0801c74b 	.word	0x0801c74b
 801c71c:	0801c721 	.word	0x0801c721
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801c720:	6839      	ldr	r1, [r7, #0]
 801c722:	6878      	ldr	r0, [r7, #4]
 801c724:	f7fb ff66 	bl	80185f4 <udp_input>
        break;
 801c728:	e02c      	b.n	801c784 <ip4_input+0x2b4>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801c72a:	6839      	ldr	r1, [r7, #0]
 801c72c:	6878      	ldr	r0, [r7, #4]
 801c72e:	f7f7 ff43 	bl	80145b8 <tcp_input>
        break;
 801c732:	e027      	b.n	801c784 <ip4_input+0x2b4>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801c734:	6839      	ldr	r1, [r7, #0]
 801c736:	6878      	ldr	r0, [r7, #4]
 801c738:	f7ff f974 	bl	801ba24 <icmp_input>
        break;
 801c73c:	e022      	b.n	801c784 <ip4_input+0x2b4>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
      case IP_PROTO_IGMP:
        igmp_input(p, inp, ip4_current_dest_addr());
 801c73e:	4a1e      	ldr	r2, [pc, #120]	@ (801c7b8 <ip4_input+0x2e8>)
 801c740:	6839      	ldr	r1, [r7, #0]
 801c742:	6878      	ldr	r0, [r7, #4]
 801c744:	f7ff fbe0 	bl	801bf08 <igmp_input>
        break;
 801c748:	e01c      	b.n	801c784 <ip4_input+0x2b4>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c74a:	4b1a      	ldr	r3, [pc, #104]	@ (801c7b4 <ip4_input+0x2e4>)
 801c74c:	695b      	ldr	r3, [r3, #20]
 801c74e:	69b9      	ldr	r1, [r7, #24]
 801c750:	4618      	mov	r0, r3
 801c752:	f000 f985 	bl	801ca60 <ip4_addr_isbroadcast_u32>
 801c756:	4603      	mov	r3, r0
 801c758:	2b00      	cmp	r3, #0
 801c75a:	d10f      	bne.n	801c77c <ip4_input+0x2ac>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c75c:	4b15      	ldr	r3, [pc, #84]	@ (801c7b4 <ip4_input+0x2e4>)
 801c75e:	695b      	ldr	r3, [r3, #20]
 801c760:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c764:	2be0      	cmp	r3, #224	@ 0xe0
 801c766:	d009      	beq.n	801c77c <ip4_input+0x2ac>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801c768:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c76c:	4619      	mov	r1, r3
 801c76e:	6878      	ldr	r0, [r7, #4]
 801c770:	f7f5 ff03 	bl	801257a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801c774:	2102      	movs	r1, #2
 801c776:	6878      	ldr	r0, [r7, #4]
 801c778:	f7ff fa58 	bl	801bc2c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801c77c:	6878      	ldr	r0, [r7, #4]
 801c77e:	f7f5 ff0f 	bl	80125a0 <pbuf_free>
        break;
 801c782:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801c784:	4b0b      	ldr	r3, [pc, #44]	@ (801c7b4 <ip4_input+0x2e4>)
 801c786:	2200      	movs	r2, #0
 801c788:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801c78a:	4b0a      	ldr	r3, [pc, #40]	@ (801c7b4 <ip4_input+0x2e4>)
 801c78c:	2200      	movs	r2, #0
 801c78e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801c790:	4b08      	ldr	r3, [pc, #32]	@ (801c7b4 <ip4_input+0x2e4>)
 801c792:	2200      	movs	r2, #0
 801c794:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801c796:	4b07      	ldr	r3, [pc, #28]	@ (801c7b4 <ip4_input+0x2e4>)
 801c798:	2200      	movs	r2, #0
 801c79a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801c79c:	4b05      	ldr	r3, [pc, #20]	@ (801c7b4 <ip4_input+0x2e4>)
 801c79e:	2200      	movs	r2, #0
 801c7a0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801c7a2:	4b04      	ldr	r3, [pc, #16]	@ (801c7b4 <ip4_input+0x2e4>)
 801c7a4:	2200      	movs	r2, #0
 801c7a6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801c7a8:	2300      	movs	r3, #0
}
 801c7aa:	4618      	mov	r0, r3
 801c7ac:	3720      	adds	r7, #32
 801c7ae:	46bd      	mov	sp, r7
 801c7b0:	bd80      	pop	{r7, pc}
 801c7b2:	bf00      	nop
 801c7b4:	20004768 	.word	0x20004768
 801c7b8:	2000477c 	.word	0x2000477c
 801c7bc:	010000e0 	.word	0x010000e0
 801c7c0:	20004790 	.word	0x20004790

0801c7c4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801c7c4:	b580      	push	{r7, lr}
 801c7c6:	b08a      	sub	sp, #40	@ 0x28
 801c7c8:	af06      	add	r7, sp, #24
 801c7ca:	60f8      	str	r0, [r7, #12]
 801c7cc:	60b9      	str	r1, [r7, #8]
 801c7ce:	607a      	str	r2, [r7, #4]
 801c7d0:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 801c7d2:	78fa      	ldrb	r2, [r7, #3]
 801c7d4:	2300      	movs	r3, #0
 801c7d6:	9304      	str	r3, [sp, #16]
 801c7d8:	2300      	movs	r3, #0
 801c7da:	9303      	str	r3, [sp, #12]
 801c7dc:	6a3b      	ldr	r3, [r7, #32]
 801c7de:	9302      	str	r3, [sp, #8]
 801c7e0:	7f3b      	ldrb	r3, [r7, #28]
 801c7e2:	9301      	str	r3, [sp, #4]
 801c7e4:	7e3b      	ldrb	r3, [r7, #24]
 801c7e6:	9300      	str	r3, [sp, #0]
 801c7e8:	4613      	mov	r3, r2
 801c7ea:	687a      	ldr	r2, [r7, #4]
 801c7ec:	68b9      	ldr	r1, [r7, #8]
 801c7ee:	68f8      	ldr	r0, [r7, #12]
 801c7f0:	f000 f805 	bl	801c7fe <ip4_output_if_opt>
 801c7f4:	4603      	mov	r3, r0
}
 801c7f6:	4618      	mov	r0, r3
 801c7f8:	3710      	adds	r7, #16
 801c7fa:	46bd      	mov	sp, r7
 801c7fc:	bd80      	pop	{r7, pc}

0801c7fe <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
 801c7fe:	b580      	push	{r7, lr}
 801c800:	b08c      	sub	sp, #48	@ 0x30
 801c802:	af06      	add	r7, sp, #24
 801c804:	60f8      	str	r0, [r7, #12]
 801c806:	60b9      	str	r1, [r7, #8]
 801c808:	607a      	str	r2, [r7, #4]
 801c80a:	70fb      	strb	r3, [r7, #3]
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801c80c:	68bb      	ldr	r3, [r7, #8]
 801c80e:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801c810:	687b      	ldr	r3, [r7, #4]
 801c812:	2b00      	cmp	r3, #0
 801c814:	d009      	beq.n	801c82a <ip4_output_if_opt+0x2c>
    if (ip4_addr_isany(src)) {
 801c816:	68bb      	ldr	r3, [r7, #8]
 801c818:	2b00      	cmp	r3, #0
 801c81a:	d003      	beq.n	801c824 <ip4_output_if_opt+0x26>
 801c81c:	68bb      	ldr	r3, [r7, #8]
 801c81e:	681b      	ldr	r3, [r3, #0]
 801c820:	2b00      	cmp	r3, #0
 801c822:	d102      	bne.n	801c82a <ip4_output_if_opt+0x2c>
      src_used = netif_ip4_addr(netif);
 801c824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c826:	3304      	adds	r3, #4
 801c828:	617b      	str	r3, [r7, #20]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 801c82a:	78fa      	ldrb	r2, [r7, #3]
 801c82c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801c82e:	9304      	str	r3, [sp, #16]
 801c830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c832:	9303      	str	r3, [sp, #12]
 801c834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c836:	9302      	str	r3, [sp, #8]
 801c838:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801c83c:	9301      	str	r3, [sp, #4]
 801c83e:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c842:	9300      	str	r3, [sp, #0]
 801c844:	4613      	mov	r3, r2
 801c846:	687a      	ldr	r2, [r7, #4]
 801c848:	6979      	ldr	r1, [r7, #20]
 801c84a:	68f8      	ldr	r0, [r7, #12]
 801c84c:	f000 f822 	bl	801c894 <ip4_output_if_opt_src>
 801c850:	4603      	mov	r3, r0
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
 801c852:	4618      	mov	r0, r3
 801c854:	3718      	adds	r7, #24
 801c856:	46bd      	mov	sp, r7
 801c858:	bd80      	pop	{r7, pc}

0801c85a <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801c85a:	b580      	push	{r7, lr}
 801c85c:	b08a      	sub	sp, #40	@ 0x28
 801c85e:	af06      	add	r7, sp, #24
 801c860:	60f8      	str	r0, [r7, #12]
 801c862:	60b9      	str	r1, [r7, #8]
 801c864:	607a      	str	r2, [r7, #4]
 801c866:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 801c868:	78fa      	ldrb	r2, [r7, #3]
 801c86a:	2300      	movs	r3, #0
 801c86c:	9304      	str	r3, [sp, #16]
 801c86e:	2300      	movs	r3, #0
 801c870:	9303      	str	r3, [sp, #12]
 801c872:	6a3b      	ldr	r3, [r7, #32]
 801c874:	9302      	str	r3, [sp, #8]
 801c876:	7f3b      	ldrb	r3, [r7, #28]
 801c878:	9301      	str	r3, [sp, #4]
 801c87a:	7e3b      	ldrb	r3, [r7, #24]
 801c87c:	9300      	str	r3, [sp, #0]
 801c87e:	4613      	mov	r3, r2
 801c880:	687a      	ldr	r2, [r7, #4]
 801c882:	68b9      	ldr	r1, [r7, #8]
 801c884:	68f8      	ldr	r0, [r7, #12]
 801c886:	f000 f805 	bl	801c894 <ip4_output_if_opt_src>
 801c88a:	4603      	mov	r3, r0
}
 801c88c:	4618      	mov	r0, r3
 801c88e:	3710      	adds	r7, #16
 801c890:	46bd      	mov	sp, r7
 801c892:	bd80      	pop	{r7, pc}

0801c894 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                      u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                      u16_t optlen)
{
 801c894:	b580      	push	{r7, lr}
 801c896:	b088      	sub	sp, #32
 801c898:	af00      	add	r7, sp, #0
 801c89a:	60f8      	str	r0, [r7, #12]
 801c89c:	60b9      	str	r1, [r7, #8]
 801c89e:	607a      	str	r2, [r7, #4]
 801c8a0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801c8a2:	68fb      	ldr	r3, [r7, #12]
 801c8a4:	7b9b      	ldrb	r3, [r3, #14]
 801c8a6:	2b01      	cmp	r3, #1
 801c8a8:	d006      	beq.n	801c8b8 <ip4_output_if_opt_src+0x24>
 801c8aa:	4b67      	ldr	r3, [pc, #412]	@ (801ca48 <ip4_output_if_opt_src+0x1b4>)
 801c8ac:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801c8b0:	4966      	ldr	r1, [pc, #408]	@ (801ca4c <ip4_output_if_opt_src+0x1b8>)
 801c8b2:	4867      	ldr	r0, [pc, #412]	@ (801ca50 <ip4_output_if_opt_src+0x1bc>)
 801c8b4:	f002 f894 	bl	801e9e0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801c8b8:	687b      	ldr	r3, [r7, #4]
 801c8ba:	2b00      	cmp	r3, #0
 801c8bc:	f000 8097 	beq.w	801c9ee <ip4_output_if_opt_src+0x15a>
    u16_t ip_hlen = IP_HLEN;
 801c8c0:	2314      	movs	r3, #20
 801c8c2:	83fb      	strh	r3, [r7, #30]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
 801c8c4:	2300      	movs	r3, #0
 801c8c6:	82fb      	strh	r3, [r7, #22]
    if (optlen != 0) {
 801c8c8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801c8ca:	2b00      	cmp	r3, #0
 801c8cc:	d030      	beq.n	801c930 <ip4_output_if_opt_src+0x9c>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      if (optlen > (IP_HLEN_MAX - IP_HLEN)) {
 801c8ce:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801c8d0:	2b28      	cmp	r3, #40	@ 0x28
 801c8d2:	d902      	bls.n	801c8da <ip4_output_if_opt_src+0x46>
        /* optlen too long */
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: optlen too long\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_VAL;
 801c8d4:	f06f 0305 	mvn.w	r3, #5
 801c8d8:	e0b1      	b.n	801ca3e <ip4_output_if_opt_src+0x1aa>
      }
      /* round up to a multiple of 4 */
      optlen_aligned = (u16_t)((optlen + 3) & ~3);
 801c8da:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801c8dc:	3303      	adds	r3, #3
 801c8de:	b29b      	uxth	r3, r3
 801c8e0:	f023 0303 	bic.w	r3, r3, #3
 801c8e4:	82fb      	strh	r3, [r7, #22]
      ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
 801c8e6:	8bfa      	ldrh	r2, [r7, #30]
 801c8e8:	8afb      	ldrh	r3, [r7, #22]
 801c8ea:	4413      	add	r3, r2
 801c8ec:	83fb      	strh	r3, [r7, #30]
      /* First write in the IP options */
      if (pbuf_add_header(p, optlen_aligned)) {
 801c8ee:	8afb      	ldrh	r3, [r7, #22]
 801c8f0:	4619      	mov	r1, r3
 801c8f2:	68f8      	ldr	r0, [r7, #12]
 801c8f4:	f7f5 fdbe 	bl	8012474 <pbuf_add_header>
 801c8f8:	4603      	mov	r3, r0
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	d002      	beq.n	801c904 <ip4_output_if_opt_src+0x70>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_BUF;
 801c8fe:	f06f 0301 	mvn.w	r3, #1
 801c902:	e09c      	b.n	801ca3e <ip4_output_if_opt_src+0x1aa>
      }
      MEMCPY(p->payload, ip_options, optlen);
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	685b      	ldr	r3, [r3, #4]
 801c908:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801c90a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c90c:	4618      	mov	r0, r3
 801c90e:	f002 fb1a 	bl	801ef46 <memcpy>
      if (optlen < optlen_aligned) {
 801c912:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801c914:	8afb      	ldrh	r3, [r7, #22]
 801c916:	429a      	cmp	r2, r3
 801c918:	d20a      	bcs.n	801c930 <ip4_output_if_opt_src+0x9c>
        /* zero the remaining bytes */
        memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
 801c91a:	68fb      	ldr	r3, [r7, #12]
 801c91c:	685a      	ldr	r2, [r3, #4]
 801c91e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801c920:	18d0      	adds	r0, r2, r3
 801c922:	8afa      	ldrh	r2, [r7, #22]
 801c924:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801c926:	1ad3      	subs	r3, r2, r3
 801c928:	461a      	mov	r2, r3
 801c92a:	2100      	movs	r1, #0
 801c92c:	f002 fa28 	bl	801ed80 <memset>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801c930:	2114      	movs	r1, #20
 801c932:	68f8      	ldr	r0, [r7, #12]
 801c934:	f7f5 fd9e 	bl	8012474 <pbuf_add_header>
 801c938:	4603      	mov	r3, r0
 801c93a:	2b00      	cmp	r3, #0
 801c93c:	d002      	beq.n	801c944 <ip4_output_if_opt_src+0xb0>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c93e:	f06f 0301 	mvn.w	r3, #1
 801c942:	e07c      	b.n	801ca3e <ip4_output_if_opt_src+0x1aa>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801c944:	68fb      	ldr	r3, [r7, #12]
 801c946:	685b      	ldr	r3, [r3, #4]
 801c948:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801c94a:	68fb      	ldr	r3, [r7, #12]
 801c94c:	895b      	ldrh	r3, [r3, #10]
 801c94e:	2b13      	cmp	r3, #19
 801c950:	d806      	bhi.n	801c960 <ip4_output_if_opt_src+0xcc>
 801c952:	4b3d      	ldr	r3, [pc, #244]	@ (801ca48 <ip4_output_if_opt_src+0x1b4>)
 801c954:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801c958:	493e      	ldr	r1, [pc, #248]	@ (801ca54 <ip4_output_if_opt_src+0x1c0>)
 801c95a:	483d      	ldr	r0, [pc, #244]	@ (801ca50 <ip4_output_if_opt_src+0x1bc>)
 801c95c:	f002 f840 	bl	801e9e0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801c960:	69bb      	ldr	r3, [r7, #24]
 801c962:	78fa      	ldrb	r2, [r7, #3]
 801c964:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801c966:	69bb      	ldr	r3, [r7, #24]
 801c968:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801c96c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801c96e:	687b      	ldr	r3, [r7, #4]
 801c970:	681a      	ldr	r2, [r3, #0]
 801c972:	69bb      	ldr	r3, [r7, #24]
 801c974:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801c976:	8bfb      	ldrh	r3, [r7, #30]
 801c978:	089b      	lsrs	r3, r3, #2
 801c97a:	b29b      	uxth	r3, r3
 801c97c:	b2db      	uxtb	r3, r3
 801c97e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c982:	b2da      	uxtb	r2, r3
 801c984:	69bb      	ldr	r3, [r7, #24]
 801c986:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801c988:	69bb      	ldr	r3, [r7, #24]
 801c98a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801c98e:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801c990:	68fb      	ldr	r3, [r7, #12]
 801c992:	891b      	ldrh	r3, [r3, #8]
 801c994:	4618      	mov	r0, r3
 801c996:	f7f4 f8af 	bl	8010af8 <lwip_htons>
 801c99a:	4603      	mov	r3, r0
 801c99c:	461a      	mov	r2, r3
 801c99e:	69bb      	ldr	r3, [r7, #24]
 801c9a0:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801c9a2:	69bb      	ldr	r3, [r7, #24]
 801c9a4:	2200      	movs	r2, #0
 801c9a6:	719a      	strb	r2, [r3, #6]
 801c9a8:	2200      	movs	r2, #0
 801c9aa:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801c9ac:	4b2a      	ldr	r3, [pc, #168]	@ (801ca58 <ip4_output_if_opt_src+0x1c4>)
 801c9ae:	881b      	ldrh	r3, [r3, #0]
 801c9b0:	4618      	mov	r0, r3
 801c9b2:	f7f4 f8a1 	bl	8010af8 <lwip_htons>
 801c9b6:	4603      	mov	r3, r0
 801c9b8:	461a      	mov	r2, r3
 801c9ba:	69bb      	ldr	r3, [r7, #24]
 801c9bc:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801c9be:	4b26      	ldr	r3, [pc, #152]	@ (801ca58 <ip4_output_if_opt_src+0x1c4>)
 801c9c0:	881b      	ldrh	r3, [r3, #0]
 801c9c2:	3301      	adds	r3, #1
 801c9c4:	b29a      	uxth	r2, r3
 801c9c6:	4b24      	ldr	r3, [pc, #144]	@ (801ca58 <ip4_output_if_opt_src+0x1c4>)
 801c9c8:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801c9ca:	68bb      	ldr	r3, [r7, #8]
 801c9cc:	2b00      	cmp	r3, #0
 801c9ce:	d104      	bne.n	801c9da <ip4_output_if_opt_src+0x146>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801c9d0:	4b22      	ldr	r3, [pc, #136]	@ (801ca5c <ip4_output_if_opt_src+0x1c8>)
 801c9d2:	681a      	ldr	r2, [r3, #0]
 801c9d4:	69bb      	ldr	r3, [r7, #24]
 801c9d6:	60da      	str	r2, [r3, #12]
 801c9d8:	e003      	b.n	801c9e2 <ip4_output_if_opt_src+0x14e>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801c9da:	68bb      	ldr	r3, [r7, #8]
 801c9dc:	681a      	ldr	r2, [r3, #0]
 801c9de:	69bb      	ldr	r3, [r7, #24]
 801c9e0:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801c9e2:	69bb      	ldr	r3, [r7, #24]
 801c9e4:	2200      	movs	r2, #0
 801c9e6:	729a      	strb	r2, [r3, #10]
 801c9e8:	2200      	movs	r2, #0
 801c9ea:	72da      	strb	r2, [r3, #11]
 801c9ec:	e00f      	b.n	801ca0e <ip4_output_if_opt_src+0x17a>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801c9ee:	68fb      	ldr	r3, [r7, #12]
 801c9f0:	895b      	ldrh	r3, [r3, #10]
 801c9f2:	2b13      	cmp	r3, #19
 801c9f4:	d802      	bhi.n	801c9fc <ip4_output_if_opt_src+0x168>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c9f6:	f06f 0301 	mvn.w	r3, #1
 801c9fa:	e020      	b.n	801ca3e <ip4_output_if_opt_src+0x1aa>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801c9fc:	68fb      	ldr	r3, [r7, #12]
 801c9fe:	685b      	ldr	r3, [r3, #4]
 801ca00:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801ca02:	69bb      	ldr	r3, [r7, #24]
 801ca04:	691b      	ldr	r3, [r3, #16]
 801ca06:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 801ca08:	f107 0310 	add.w	r3, r7, #16
 801ca0c:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801ca0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca10:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	d00c      	beq.n	801ca30 <ip4_output_if_opt_src+0x19c>
 801ca16:	68fb      	ldr	r3, [r7, #12]
 801ca18:	891a      	ldrh	r2, [r3, #8]
 801ca1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca1c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801ca1e:	429a      	cmp	r2, r3
 801ca20:	d906      	bls.n	801ca30 <ip4_output_if_opt_src+0x19c>
    return ip4_frag(p, netif, dest);
 801ca22:	687a      	ldr	r2, [r7, #4]
 801ca24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801ca26:	68f8      	ldr	r0, [r7, #12]
 801ca28:	f000 fd54 	bl	801d4d4 <ip4_frag>
 801ca2c:	4603      	mov	r3, r0
 801ca2e:	e006      	b.n	801ca3e <ip4_output_if_opt_src+0x1aa>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801ca30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca32:	695b      	ldr	r3, [r3, #20]
 801ca34:	687a      	ldr	r2, [r7, #4]
 801ca36:	68f9      	ldr	r1, [r7, #12]
 801ca38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801ca3a:	4798      	blx	r3
 801ca3c:	4603      	mov	r3, r0
}
 801ca3e:	4618      	mov	r0, r3
 801ca40:	3720      	adds	r7, #32
 801ca42:	46bd      	mov	sp, r7
 801ca44:	bd80      	pop	{r7, pc}
 801ca46:	bf00      	nop
 801ca48:	0802321c 	.word	0x0802321c
 801ca4c:	08023250 	.word	0x08023250
 801ca50:	0802325c 	.word	0x0802325c
 801ca54:	08023284 	.word	0x08023284
 801ca58:	2000492c 	.word	0x2000492c
 801ca5c:	080236a0 	.word	0x080236a0

0801ca60 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801ca60:	b480      	push	{r7}
 801ca62:	b085      	sub	sp, #20
 801ca64:	af00      	add	r7, sp, #0
 801ca66:	6078      	str	r0, [r7, #4]
 801ca68:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ca74:	d002      	beq.n	801ca7c <ip4_addr_isbroadcast_u32+0x1c>
 801ca76:	687b      	ldr	r3, [r7, #4]
 801ca78:	2b00      	cmp	r3, #0
 801ca7a:	d101      	bne.n	801ca80 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801ca7c:	2301      	movs	r3, #1
 801ca7e:	e02a      	b.n	801cad6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801ca80:	683b      	ldr	r3, [r7, #0]
 801ca82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801ca86:	f003 0302 	and.w	r3, r3, #2
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	d101      	bne.n	801ca92 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801ca8e:	2300      	movs	r3, #0
 801ca90:	e021      	b.n	801cad6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801ca92:	683b      	ldr	r3, [r7, #0]
 801ca94:	3304      	adds	r3, #4
 801ca96:	681b      	ldr	r3, [r3, #0]
 801ca98:	687a      	ldr	r2, [r7, #4]
 801ca9a:	429a      	cmp	r2, r3
 801ca9c:	d101      	bne.n	801caa2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801ca9e:	2300      	movs	r3, #0
 801caa0:	e019      	b.n	801cad6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801caa2:	68fa      	ldr	r2, [r7, #12]
 801caa4:	683b      	ldr	r3, [r7, #0]
 801caa6:	3304      	adds	r3, #4
 801caa8:	681b      	ldr	r3, [r3, #0]
 801caaa:	405a      	eors	r2, r3
 801caac:	683b      	ldr	r3, [r7, #0]
 801caae:	3308      	adds	r3, #8
 801cab0:	681b      	ldr	r3, [r3, #0]
 801cab2:	4013      	ands	r3, r2
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	d10d      	bne.n	801cad4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801cab8:	683b      	ldr	r3, [r7, #0]
 801caba:	3308      	adds	r3, #8
 801cabc:	681b      	ldr	r3, [r3, #0]
 801cabe:	43da      	mvns	r2, r3
 801cac0:	687b      	ldr	r3, [r7, #4]
 801cac2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801cac4:	683b      	ldr	r3, [r7, #0]
 801cac6:	3308      	adds	r3, #8
 801cac8:	681b      	ldr	r3, [r3, #0]
 801caca:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801cacc:	429a      	cmp	r2, r3
 801cace:	d101      	bne.n	801cad4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801cad0:	2301      	movs	r3, #1
 801cad2:	e000      	b.n	801cad6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801cad4:	2300      	movs	r3, #0
  }
}
 801cad6:	4618      	mov	r0, r3
 801cad8:	3714      	adds	r7, #20
 801cada:	46bd      	mov	sp, r7
 801cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cae0:	4770      	bx	lr
	...

0801cae4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801cae4:	b580      	push	{r7, lr}
 801cae6:	b084      	sub	sp, #16
 801cae8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801caea:	2300      	movs	r3, #0
 801caec:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801caee:	4b12      	ldr	r3, [pc, #72]	@ (801cb38 <ip_reass_tmr+0x54>)
 801caf0:	681b      	ldr	r3, [r3, #0]
 801caf2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801caf4:	e018      	b.n	801cb28 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801caf6:	68fb      	ldr	r3, [r7, #12]
 801caf8:	7fdb      	ldrb	r3, [r3, #31]
 801cafa:	2b00      	cmp	r3, #0
 801cafc:	d00b      	beq.n	801cb16 <ip_reass_tmr+0x32>
      r->timer--;
 801cafe:	68fb      	ldr	r3, [r7, #12]
 801cb00:	7fdb      	ldrb	r3, [r3, #31]
 801cb02:	3b01      	subs	r3, #1
 801cb04:	b2da      	uxtb	r2, r3
 801cb06:	68fb      	ldr	r3, [r7, #12]
 801cb08:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801cb0a:	68fb      	ldr	r3, [r7, #12]
 801cb0c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801cb0e:	68fb      	ldr	r3, [r7, #12]
 801cb10:	681b      	ldr	r3, [r3, #0]
 801cb12:	60fb      	str	r3, [r7, #12]
 801cb14:	e008      	b.n	801cb28 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801cb16:	68fb      	ldr	r3, [r7, #12]
 801cb18:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801cb1a:	68fb      	ldr	r3, [r7, #12]
 801cb1c:	681b      	ldr	r3, [r3, #0]
 801cb1e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801cb20:	68b9      	ldr	r1, [r7, #8]
 801cb22:	6878      	ldr	r0, [r7, #4]
 801cb24:	f000 f80a 	bl	801cb3c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801cb28:	68fb      	ldr	r3, [r7, #12]
 801cb2a:	2b00      	cmp	r3, #0
 801cb2c:	d1e3      	bne.n	801caf6 <ip_reass_tmr+0x12>
    }
  }
}
 801cb2e:	bf00      	nop
 801cb30:	bf00      	nop
 801cb32:	3710      	adds	r7, #16
 801cb34:	46bd      	mov	sp, r7
 801cb36:	bd80      	pop	{r7, pc}
 801cb38:	20004934 	.word	0x20004934

0801cb3c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801cb3c:	b580      	push	{r7, lr}
 801cb3e:	b088      	sub	sp, #32
 801cb40:	af00      	add	r7, sp, #0
 801cb42:	6078      	str	r0, [r7, #4]
 801cb44:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801cb46:	2300      	movs	r3, #0
 801cb48:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801cb4a:	683a      	ldr	r2, [r7, #0]
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	429a      	cmp	r2, r3
 801cb50:	d105      	bne.n	801cb5e <ip_reass_free_complete_datagram+0x22>
 801cb52:	4b45      	ldr	r3, [pc, #276]	@ (801cc68 <ip_reass_free_complete_datagram+0x12c>)
 801cb54:	22ab      	movs	r2, #171	@ 0xab
 801cb56:	4945      	ldr	r1, [pc, #276]	@ (801cc6c <ip_reass_free_complete_datagram+0x130>)
 801cb58:	4845      	ldr	r0, [pc, #276]	@ (801cc70 <ip_reass_free_complete_datagram+0x134>)
 801cb5a:	f001 ff41 	bl	801e9e0 <iprintf>
  if (prev != NULL) {
 801cb5e:	683b      	ldr	r3, [r7, #0]
 801cb60:	2b00      	cmp	r3, #0
 801cb62:	d00a      	beq.n	801cb7a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801cb64:	683b      	ldr	r3, [r7, #0]
 801cb66:	681b      	ldr	r3, [r3, #0]
 801cb68:	687a      	ldr	r2, [r7, #4]
 801cb6a:	429a      	cmp	r2, r3
 801cb6c:	d005      	beq.n	801cb7a <ip_reass_free_complete_datagram+0x3e>
 801cb6e:	4b3e      	ldr	r3, [pc, #248]	@ (801cc68 <ip_reass_free_complete_datagram+0x12c>)
 801cb70:	22ad      	movs	r2, #173	@ 0xad
 801cb72:	4940      	ldr	r1, [pc, #256]	@ (801cc74 <ip_reass_free_complete_datagram+0x138>)
 801cb74:	483e      	ldr	r0, [pc, #248]	@ (801cc70 <ip_reass_free_complete_datagram+0x134>)
 801cb76:	f001 ff33 	bl	801e9e0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	685b      	ldr	r3, [r3, #4]
 801cb7e:	685b      	ldr	r3, [r3, #4]
 801cb80:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801cb82:	697b      	ldr	r3, [r7, #20]
 801cb84:	889b      	ldrh	r3, [r3, #4]
 801cb86:	b29b      	uxth	r3, r3
 801cb88:	2b00      	cmp	r3, #0
 801cb8a:	d12a      	bne.n	801cbe2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801cb8c:	687b      	ldr	r3, [r7, #4]
 801cb8e:	685b      	ldr	r3, [r3, #4]
 801cb90:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801cb92:	697b      	ldr	r3, [r7, #20]
 801cb94:	681a      	ldr	r2, [r3, #0]
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801cb9a:	69bb      	ldr	r3, [r7, #24]
 801cb9c:	6858      	ldr	r0, [r3, #4]
 801cb9e:	687b      	ldr	r3, [r7, #4]
 801cba0:	3308      	adds	r3, #8
 801cba2:	2214      	movs	r2, #20
 801cba4:	4619      	mov	r1, r3
 801cba6:	f002 f9ce 	bl	801ef46 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801cbaa:	2101      	movs	r1, #1
 801cbac:	69b8      	ldr	r0, [r7, #24]
 801cbae:	f7ff f84d 	bl	801bc4c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801cbb2:	69b8      	ldr	r0, [r7, #24]
 801cbb4:	f7f5 fd82 	bl	80126bc <pbuf_clen>
 801cbb8:	4603      	mov	r3, r0
 801cbba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801cbbc:	8bfa      	ldrh	r2, [r7, #30]
 801cbbe:	8a7b      	ldrh	r3, [r7, #18]
 801cbc0:	4413      	add	r3, r2
 801cbc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cbc6:	db05      	blt.n	801cbd4 <ip_reass_free_complete_datagram+0x98>
 801cbc8:	4b27      	ldr	r3, [pc, #156]	@ (801cc68 <ip_reass_free_complete_datagram+0x12c>)
 801cbca:	22bc      	movs	r2, #188	@ 0xbc
 801cbcc:	492a      	ldr	r1, [pc, #168]	@ (801cc78 <ip_reass_free_complete_datagram+0x13c>)
 801cbce:	4828      	ldr	r0, [pc, #160]	@ (801cc70 <ip_reass_free_complete_datagram+0x134>)
 801cbd0:	f001 ff06 	bl	801e9e0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801cbd4:	8bfa      	ldrh	r2, [r7, #30]
 801cbd6:	8a7b      	ldrh	r3, [r7, #18]
 801cbd8:	4413      	add	r3, r2
 801cbda:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801cbdc:	69b8      	ldr	r0, [r7, #24]
 801cbde:	f7f5 fcdf 	bl	80125a0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	685b      	ldr	r3, [r3, #4]
 801cbe6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801cbe8:	e01f      	b.n	801cc2a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801cbea:	69bb      	ldr	r3, [r7, #24]
 801cbec:	685b      	ldr	r3, [r3, #4]
 801cbee:	617b      	str	r3, [r7, #20]
    pcur = p;
 801cbf0:	69bb      	ldr	r3, [r7, #24]
 801cbf2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801cbf4:	697b      	ldr	r3, [r7, #20]
 801cbf6:	681b      	ldr	r3, [r3, #0]
 801cbf8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801cbfa:	68f8      	ldr	r0, [r7, #12]
 801cbfc:	f7f5 fd5e 	bl	80126bc <pbuf_clen>
 801cc00:	4603      	mov	r3, r0
 801cc02:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801cc04:	8bfa      	ldrh	r2, [r7, #30]
 801cc06:	8a7b      	ldrh	r3, [r7, #18]
 801cc08:	4413      	add	r3, r2
 801cc0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cc0e:	db05      	blt.n	801cc1c <ip_reass_free_complete_datagram+0xe0>
 801cc10:	4b15      	ldr	r3, [pc, #84]	@ (801cc68 <ip_reass_free_complete_datagram+0x12c>)
 801cc12:	22cc      	movs	r2, #204	@ 0xcc
 801cc14:	4918      	ldr	r1, [pc, #96]	@ (801cc78 <ip_reass_free_complete_datagram+0x13c>)
 801cc16:	4816      	ldr	r0, [pc, #88]	@ (801cc70 <ip_reass_free_complete_datagram+0x134>)
 801cc18:	f001 fee2 	bl	801e9e0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801cc1c:	8bfa      	ldrh	r2, [r7, #30]
 801cc1e:	8a7b      	ldrh	r3, [r7, #18]
 801cc20:	4413      	add	r3, r2
 801cc22:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801cc24:	68f8      	ldr	r0, [r7, #12]
 801cc26:	f7f5 fcbb 	bl	80125a0 <pbuf_free>
  while (p != NULL) {
 801cc2a:	69bb      	ldr	r3, [r7, #24]
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	d1dc      	bne.n	801cbea <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801cc30:	6839      	ldr	r1, [r7, #0]
 801cc32:	6878      	ldr	r0, [r7, #4]
 801cc34:	f000 f8c2 	bl	801cdbc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801cc38:	4b10      	ldr	r3, [pc, #64]	@ (801cc7c <ip_reass_free_complete_datagram+0x140>)
 801cc3a:	881b      	ldrh	r3, [r3, #0]
 801cc3c:	8bfa      	ldrh	r2, [r7, #30]
 801cc3e:	429a      	cmp	r2, r3
 801cc40:	d905      	bls.n	801cc4e <ip_reass_free_complete_datagram+0x112>
 801cc42:	4b09      	ldr	r3, [pc, #36]	@ (801cc68 <ip_reass_free_complete_datagram+0x12c>)
 801cc44:	22d2      	movs	r2, #210	@ 0xd2
 801cc46:	490e      	ldr	r1, [pc, #56]	@ (801cc80 <ip_reass_free_complete_datagram+0x144>)
 801cc48:	4809      	ldr	r0, [pc, #36]	@ (801cc70 <ip_reass_free_complete_datagram+0x134>)
 801cc4a:	f001 fec9 	bl	801e9e0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801cc4e:	4b0b      	ldr	r3, [pc, #44]	@ (801cc7c <ip_reass_free_complete_datagram+0x140>)
 801cc50:	881a      	ldrh	r2, [r3, #0]
 801cc52:	8bfb      	ldrh	r3, [r7, #30]
 801cc54:	1ad3      	subs	r3, r2, r3
 801cc56:	b29a      	uxth	r2, r3
 801cc58:	4b08      	ldr	r3, [pc, #32]	@ (801cc7c <ip_reass_free_complete_datagram+0x140>)
 801cc5a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801cc5c:	8bfb      	ldrh	r3, [r7, #30]
}
 801cc5e:	4618      	mov	r0, r3
 801cc60:	3720      	adds	r7, #32
 801cc62:	46bd      	mov	sp, r7
 801cc64:	bd80      	pop	{r7, pc}
 801cc66:	bf00      	nop
 801cc68:	080232b4 	.word	0x080232b4
 801cc6c:	080232f0 	.word	0x080232f0
 801cc70:	080232fc 	.word	0x080232fc
 801cc74:	08023324 	.word	0x08023324
 801cc78:	08023338 	.word	0x08023338
 801cc7c:	20004938 	.word	0x20004938
 801cc80:	08023358 	.word	0x08023358

0801cc84 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801cc84:	b580      	push	{r7, lr}
 801cc86:	b08a      	sub	sp, #40	@ 0x28
 801cc88:	af00      	add	r7, sp, #0
 801cc8a:	6078      	str	r0, [r7, #4]
 801cc8c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801cc8e:	2300      	movs	r3, #0
 801cc90:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801cc92:	2300      	movs	r3, #0
 801cc94:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801cc96:	2300      	movs	r3, #0
 801cc98:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801cc9a:	2300      	movs	r3, #0
 801cc9c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801cc9e:	2300      	movs	r3, #0
 801cca0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801cca2:	4b28      	ldr	r3, [pc, #160]	@ (801cd44 <ip_reass_remove_oldest_datagram+0xc0>)
 801cca4:	681b      	ldr	r3, [r3, #0]
 801cca6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801cca8:	e030      	b.n	801cd0c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801ccaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ccac:	695a      	ldr	r2, [r3, #20]
 801ccae:	687b      	ldr	r3, [r7, #4]
 801ccb0:	68db      	ldr	r3, [r3, #12]
 801ccb2:	429a      	cmp	r2, r3
 801ccb4:	d10c      	bne.n	801ccd0 <ip_reass_remove_oldest_datagram+0x4c>
 801ccb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ccb8:	699a      	ldr	r2, [r3, #24]
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	691b      	ldr	r3, [r3, #16]
 801ccbe:	429a      	cmp	r2, r3
 801ccc0:	d106      	bne.n	801ccd0 <ip_reass_remove_oldest_datagram+0x4c>
 801ccc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ccc4:	899a      	ldrh	r2, [r3, #12]
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	889b      	ldrh	r3, [r3, #4]
 801ccca:	b29b      	uxth	r3, r3
 801cccc:	429a      	cmp	r2, r3
 801ccce:	d014      	beq.n	801ccfa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801ccd0:	693b      	ldr	r3, [r7, #16]
 801ccd2:	3301      	adds	r3, #1
 801ccd4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801ccd6:	6a3b      	ldr	r3, [r7, #32]
 801ccd8:	2b00      	cmp	r3, #0
 801ccda:	d104      	bne.n	801cce6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801ccdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ccde:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801cce0:	69fb      	ldr	r3, [r7, #28]
 801cce2:	61bb      	str	r3, [r7, #24]
 801cce4:	e009      	b.n	801ccfa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801cce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cce8:	7fda      	ldrb	r2, [r3, #31]
 801ccea:	6a3b      	ldr	r3, [r7, #32]
 801ccec:	7fdb      	ldrb	r3, [r3, #31]
 801ccee:	429a      	cmp	r2, r3
 801ccf0:	d803      	bhi.n	801ccfa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801ccf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ccf4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ccf6:	69fb      	ldr	r3, [r7, #28]
 801ccf8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801ccfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ccfc:	681b      	ldr	r3, [r3, #0]
 801ccfe:	2b00      	cmp	r3, #0
 801cd00:	d001      	beq.n	801cd06 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801cd02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd04:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801cd06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd08:	681b      	ldr	r3, [r3, #0]
 801cd0a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801cd0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	d1cb      	bne.n	801ccaa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801cd12:	6a3b      	ldr	r3, [r7, #32]
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	d008      	beq.n	801cd2a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801cd18:	69b9      	ldr	r1, [r7, #24]
 801cd1a:	6a38      	ldr	r0, [r7, #32]
 801cd1c:	f7ff ff0e 	bl	801cb3c <ip_reass_free_complete_datagram>
 801cd20:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801cd22:	697a      	ldr	r2, [r7, #20]
 801cd24:	68fb      	ldr	r3, [r7, #12]
 801cd26:	4413      	add	r3, r2
 801cd28:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801cd2a:	697a      	ldr	r2, [r7, #20]
 801cd2c:	683b      	ldr	r3, [r7, #0]
 801cd2e:	429a      	cmp	r2, r3
 801cd30:	da02      	bge.n	801cd38 <ip_reass_remove_oldest_datagram+0xb4>
 801cd32:	693b      	ldr	r3, [r7, #16]
 801cd34:	2b01      	cmp	r3, #1
 801cd36:	dcac      	bgt.n	801cc92 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801cd38:	697b      	ldr	r3, [r7, #20]
}
 801cd3a:	4618      	mov	r0, r3
 801cd3c:	3728      	adds	r7, #40	@ 0x28
 801cd3e:	46bd      	mov	sp, r7
 801cd40:	bd80      	pop	{r7, pc}
 801cd42:	bf00      	nop
 801cd44:	20004934 	.word	0x20004934

0801cd48 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801cd48:	b580      	push	{r7, lr}
 801cd4a:	b084      	sub	sp, #16
 801cd4c:	af00      	add	r7, sp, #0
 801cd4e:	6078      	str	r0, [r7, #4]
 801cd50:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801cd52:	2004      	movs	r0, #4
 801cd54:	f7f4 fcc8 	bl	80116e8 <memp_malloc>
 801cd58:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801cd5a:	68fb      	ldr	r3, [r7, #12]
 801cd5c:	2b00      	cmp	r3, #0
 801cd5e:	d110      	bne.n	801cd82 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801cd60:	6839      	ldr	r1, [r7, #0]
 801cd62:	6878      	ldr	r0, [r7, #4]
 801cd64:	f7ff ff8e 	bl	801cc84 <ip_reass_remove_oldest_datagram>
 801cd68:	4602      	mov	r2, r0
 801cd6a:	683b      	ldr	r3, [r7, #0]
 801cd6c:	4293      	cmp	r3, r2
 801cd6e:	dc03      	bgt.n	801cd78 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801cd70:	2004      	movs	r0, #4
 801cd72:	f7f4 fcb9 	bl	80116e8 <memp_malloc>
 801cd76:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801cd78:	68fb      	ldr	r3, [r7, #12]
 801cd7a:	2b00      	cmp	r3, #0
 801cd7c:	d101      	bne.n	801cd82 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801cd7e:	2300      	movs	r3, #0
 801cd80:	e016      	b.n	801cdb0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801cd82:	2220      	movs	r2, #32
 801cd84:	2100      	movs	r1, #0
 801cd86:	68f8      	ldr	r0, [r7, #12]
 801cd88:	f001 fffa 	bl	801ed80 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801cd8c:	68fb      	ldr	r3, [r7, #12]
 801cd8e:	220f      	movs	r2, #15
 801cd90:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801cd92:	4b09      	ldr	r3, [pc, #36]	@ (801cdb8 <ip_reass_enqueue_new_datagram+0x70>)
 801cd94:	681a      	ldr	r2, [r3, #0]
 801cd96:	68fb      	ldr	r3, [r7, #12]
 801cd98:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801cd9a:	4a07      	ldr	r2, [pc, #28]	@ (801cdb8 <ip_reass_enqueue_new_datagram+0x70>)
 801cd9c:	68fb      	ldr	r3, [r7, #12]
 801cd9e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801cda0:	68fb      	ldr	r3, [r7, #12]
 801cda2:	3308      	adds	r3, #8
 801cda4:	2214      	movs	r2, #20
 801cda6:	6879      	ldr	r1, [r7, #4]
 801cda8:	4618      	mov	r0, r3
 801cdaa:	f002 f8cc 	bl	801ef46 <memcpy>
  return ipr;
 801cdae:	68fb      	ldr	r3, [r7, #12]
}
 801cdb0:	4618      	mov	r0, r3
 801cdb2:	3710      	adds	r7, #16
 801cdb4:	46bd      	mov	sp, r7
 801cdb6:	bd80      	pop	{r7, pc}
 801cdb8:	20004934 	.word	0x20004934

0801cdbc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801cdbc:	b580      	push	{r7, lr}
 801cdbe:	b082      	sub	sp, #8
 801cdc0:	af00      	add	r7, sp, #0
 801cdc2:	6078      	str	r0, [r7, #4]
 801cdc4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801cdc6:	4b10      	ldr	r3, [pc, #64]	@ (801ce08 <ip_reass_dequeue_datagram+0x4c>)
 801cdc8:	681b      	ldr	r3, [r3, #0]
 801cdca:	687a      	ldr	r2, [r7, #4]
 801cdcc:	429a      	cmp	r2, r3
 801cdce:	d104      	bne.n	801cdda <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801cdd0:	687b      	ldr	r3, [r7, #4]
 801cdd2:	681b      	ldr	r3, [r3, #0]
 801cdd4:	4a0c      	ldr	r2, [pc, #48]	@ (801ce08 <ip_reass_dequeue_datagram+0x4c>)
 801cdd6:	6013      	str	r3, [r2, #0]
 801cdd8:	e00d      	b.n	801cdf6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801cdda:	683b      	ldr	r3, [r7, #0]
 801cddc:	2b00      	cmp	r3, #0
 801cdde:	d106      	bne.n	801cdee <ip_reass_dequeue_datagram+0x32>
 801cde0:	4b0a      	ldr	r3, [pc, #40]	@ (801ce0c <ip_reass_dequeue_datagram+0x50>)
 801cde2:	f240 1245 	movw	r2, #325	@ 0x145
 801cde6:	490a      	ldr	r1, [pc, #40]	@ (801ce10 <ip_reass_dequeue_datagram+0x54>)
 801cde8:	480a      	ldr	r0, [pc, #40]	@ (801ce14 <ip_reass_dequeue_datagram+0x58>)
 801cdea:	f001 fdf9 	bl	801e9e0 <iprintf>
    prev->next = ipr->next;
 801cdee:	687b      	ldr	r3, [r7, #4]
 801cdf0:	681a      	ldr	r2, [r3, #0]
 801cdf2:	683b      	ldr	r3, [r7, #0]
 801cdf4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801cdf6:	6879      	ldr	r1, [r7, #4]
 801cdf8:	2004      	movs	r0, #4
 801cdfa:	f7f4 fce5 	bl	80117c8 <memp_free>
}
 801cdfe:	bf00      	nop
 801ce00:	3708      	adds	r7, #8
 801ce02:	46bd      	mov	sp, r7
 801ce04:	bd80      	pop	{r7, pc}
 801ce06:	bf00      	nop
 801ce08:	20004934 	.word	0x20004934
 801ce0c:	080232b4 	.word	0x080232b4
 801ce10:	0802337c 	.word	0x0802337c
 801ce14:	080232fc 	.word	0x080232fc

0801ce18 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801ce18:	b580      	push	{r7, lr}
 801ce1a:	b08c      	sub	sp, #48	@ 0x30
 801ce1c:	af00      	add	r7, sp, #0
 801ce1e:	60f8      	str	r0, [r7, #12]
 801ce20:	60b9      	str	r1, [r7, #8]
 801ce22:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801ce24:	2300      	movs	r3, #0
 801ce26:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801ce28:	2301      	movs	r3, #1
 801ce2a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801ce2c:	68bb      	ldr	r3, [r7, #8]
 801ce2e:	685b      	ldr	r3, [r3, #4]
 801ce30:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ce32:	69fb      	ldr	r3, [r7, #28]
 801ce34:	885b      	ldrh	r3, [r3, #2]
 801ce36:	b29b      	uxth	r3, r3
 801ce38:	4618      	mov	r0, r3
 801ce3a:	f7f3 fe5d 	bl	8010af8 <lwip_htons>
 801ce3e:	4603      	mov	r3, r0
 801ce40:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801ce42:	69fb      	ldr	r3, [r7, #28]
 801ce44:	781b      	ldrb	r3, [r3, #0]
 801ce46:	f003 030f 	and.w	r3, r3, #15
 801ce4a:	b2db      	uxtb	r3, r3
 801ce4c:	009b      	lsls	r3, r3, #2
 801ce4e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801ce50:	7e7b      	ldrb	r3, [r7, #25]
 801ce52:	b29b      	uxth	r3, r3
 801ce54:	8b7a      	ldrh	r2, [r7, #26]
 801ce56:	429a      	cmp	r2, r3
 801ce58:	d202      	bcs.n	801ce60 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ce5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ce5e:	e135      	b.n	801d0cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801ce60:	7e7b      	ldrb	r3, [r7, #25]
 801ce62:	b29b      	uxth	r3, r3
 801ce64:	8b7a      	ldrh	r2, [r7, #26]
 801ce66:	1ad3      	subs	r3, r2, r3
 801ce68:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801ce6a:	69fb      	ldr	r3, [r7, #28]
 801ce6c:	88db      	ldrh	r3, [r3, #6]
 801ce6e:	b29b      	uxth	r3, r3
 801ce70:	4618      	mov	r0, r3
 801ce72:	f7f3 fe41 	bl	8010af8 <lwip_htons>
 801ce76:	4603      	mov	r3, r0
 801ce78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ce7c:	b29b      	uxth	r3, r3
 801ce7e:	00db      	lsls	r3, r3, #3
 801ce80:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801ce82:	68bb      	ldr	r3, [r7, #8]
 801ce84:	685b      	ldr	r3, [r3, #4]
 801ce86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801ce88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ce8a:	2200      	movs	r2, #0
 801ce8c:	701a      	strb	r2, [r3, #0]
 801ce8e:	2200      	movs	r2, #0
 801ce90:	705a      	strb	r2, [r3, #1]
 801ce92:	2200      	movs	r2, #0
 801ce94:	709a      	strb	r2, [r3, #2]
 801ce96:	2200      	movs	r2, #0
 801ce98:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801ce9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ce9c:	8afa      	ldrh	r2, [r7, #22]
 801ce9e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801cea0:	8afa      	ldrh	r2, [r7, #22]
 801cea2:	8b7b      	ldrh	r3, [r7, #26]
 801cea4:	4413      	add	r3, r2
 801cea6:	b29a      	uxth	r2, r3
 801cea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ceaa:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801ceac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ceae:	88db      	ldrh	r3, [r3, #6]
 801ceb0:	b29b      	uxth	r3, r3
 801ceb2:	8afa      	ldrh	r2, [r7, #22]
 801ceb4:	429a      	cmp	r2, r3
 801ceb6:	d902      	bls.n	801cebe <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ceb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cebc:	e106      	b.n	801d0cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801cebe:	68fb      	ldr	r3, [r7, #12]
 801cec0:	685b      	ldr	r3, [r3, #4]
 801cec2:	627b      	str	r3, [r7, #36]	@ 0x24
 801cec4:	e068      	b.n	801cf98 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801cec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cec8:	685b      	ldr	r3, [r3, #4]
 801ceca:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801cecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cece:	889b      	ldrh	r3, [r3, #4]
 801ced0:	b29a      	uxth	r2, r3
 801ced2:	693b      	ldr	r3, [r7, #16]
 801ced4:	889b      	ldrh	r3, [r3, #4]
 801ced6:	b29b      	uxth	r3, r3
 801ced8:	429a      	cmp	r2, r3
 801ceda:	d235      	bcs.n	801cf48 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801cedc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801cee0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801cee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d020      	beq.n	801cf2a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801cee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ceea:	889b      	ldrh	r3, [r3, #4]
 801ceec:	b29a      	uxth	r2, r3
 801ceee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cef0:	88db      	ldrh	r3, [r3, #6]
 801cef2:	b29b      	uxth	r3, r3
 801cef4:	429a      	cmp	r2, r3
 801cef6:	d307      	bcc.n	801cf08 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801cef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cefa:	88db      	ldrh	r3, [r3, #6]
 801cefc:	b29a      	uxth	r2, r3
 801cefe:	693b      	ldr	r3, [r7, #16]
 801cf00:	889b      	ldrh	r3, [r3, #4]
 801cf02:	b29b      	uxth	r3, r3
 801cf04:	429a      	cmp	r2, r3
 801cf06:	d902      	bls.n	801cf0e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cf08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cf0c:	e0de      	b.n	801d0cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801cf0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf10:	68ba      	ldr	r2, [r7, #8]
 801cf12:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801cf14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf16:	88db      	ldrh	r3, [r3, #6]
 801cf18:	b29a      	uxth	r2, r3
 801cf1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf1c:	889b      	ldrh	r3, [r3, #4]
 801cf1e:	b29b      	uxth	r3, r3
 801cf20:	429a      	cmp	r2, r3
 801cf22:	d03d      	beq.n	801cfa0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801cf24:	2300      	movs	r3, #0
 801cf26:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801cf28:	e03a      	b.n	801cfa0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801cf2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf2c:	88db      	ldrh	r3, [r3, #6]
 801cf2e:	b29a      	uxth	r2, r3
 801cf30:	693b      	ldr	r3, [r7, #16]
 801cf32:	889b      	ldrh	r3, [r3, #4]
 801cf34:	b29b      	uxth	r3, r3
 801cf36:	429a      	cmp	r2, r3
 801cf38:	d902      	bls.n	801cf40 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cf3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cf3e:	e0c5      	b.n	801d0cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801cf40:	68fb      	ldr	r3, [r7, #12]
 801cf42:	68ba      	ldr	r2, [r7, #8]
 801cf44:	605a      	str	r2, [r3, #4]
      break;
 801cf46:	e02b      	b.n	801cfa0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801cf48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf4a:	889b      	ldrh	r3, [r3, #4]
 801cf4c:	b29a      	uxth	r2, r3
 801cf4e:	693b      	ldr	r3, [r7, #16]
 801cf50:	889b      	ldrh	r3, [r3, #4]
 801cf52:	b29b      	uxth	r3, r3
 801cf54:	429a      	cmp	r2, r3
 801cf56:	d102      	bne.n	801cf5e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cf58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cf5c:	e0b6      	b.n	801d0cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801cf5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf60:	889b      	ldrh	r3, [r3, #4]
 801cf62:	b29a      	uxth	r2, r3
 801cf64:	693b      	ldr	r3, [r7, #16]
 801cf66:	88db      	ldrh	r3, [r3, #6]
 801cf68:	b29b      	uxth	r3, r3
 801cf6a:	429a      	cmp	r2, r3
 801cf6c:	d202      	bcs.n	801cf74 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801cf6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cf72:	e0ab      	b.n	801d0cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801cf74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf76:	2b00      	cmp	r3, #0
 801cf78:	d009      	beq.n	801cf8e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801cf7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cf7c:	88db      	ldrh	r3, [r3, #6]
 801cf7e:	b29a      	uxth	r2, r3
 801cf80:	693b      	ldr	r3, [r7, #16]
 801cf82:	889b      	ldrh	r3, [r3, #4]
 801cf84:	b29b      	uxth	r3, r3
 801cf86:	429a      	cmp	r2, r3
 801cf88:	d001      	beq.n	801cf8e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801cf8a:	2300      	movs	r3, #0
 801cf8c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801cf8e:	693b      	ldr	r3, [r7, #16]
 801cf90:	681b      	ldr	r3, [r3, #0]
 801cf92:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801cf94:	693b      	ldr	r3, [r7, #16]
 801cf96:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801cf98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf9a:	2b00      	cmp	r3, #0
 801cf9c:	d193      	bne.n	801cec6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801cf9e:	e000      	b.n	801cfa2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801cfa0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801cfa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cfa4:	2b00      	cmp	r3, #0
 801cfa6:	d12d      	bne.n	801d004 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801cfa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cfaa:	2b00      	cmp	r3, #0
 801cfac:	d01c      	beq.n	801cfe8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801cfae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cfb0:	88db      	ldrh	r3, [r3, #6]
 801cfb2:	b29a      	uxth	r2, r3
 801cfb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cfb6:	889b      	ldrh	r3, [r3, #4]
 801cfb8:	b29b      	uxth	r3, r3
 801cfba:	429a      	cmp	r2, r3
 801cfbc:	d906      	bls.n	801cfcc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801cfbe:	4b45      	ldr	r3, [pc, #276]	@ (801d0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801cfc0:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801cfc4:	4944      	ldr	r1, [pc, #272]	@ (801d0d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801cfc6:	4845      	ldr	r0, [pc, #276]	@ (801d0dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801cfc8:	f001 fd0a 	bl	801e9e0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801cfcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cfce:	68ba      	ldr	r2, [r7, #8]
 801cfd0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801cfd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cfd4:	88db      	ldrh	r3, [r3, #6]
 801cfd6:	b29a      	uxth	r2, r3
 801cfd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cfda:	889b      	ldrh	r3, [r3, #4]
 801cfdc:	b29b      	uxth	r3, r3
 801cfde:	429a      	cmp	r2, r3
 801cfe0:	d010      	beq.n	801d004 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801cfe2:	2300      	movs	r3, #0
 801cfe4:	623b      	str	r3, [r7, #32]
 801cfe6:	e00d      	b.n	801d004 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801cfe8:	68fb      	ldr	r3, [r7, #12]
 801cfea:	685b      	ldr	r3, [r3, #4]
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	d006      	beq.n	801cffe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801cff0:	4b38      	ldr	r3, [pc, #224]	@ (801d0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801cff2:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801cff6:	493a      	ldr	r1, [pc, #232]	@ (801d0e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801cff8:	4838      	ldr	r0, [pc, #224]	@ (801d0dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801cffa:	f001 fcf1 	bl	801e9e0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801cffe:	68fb      	ldr	r3, [r7, #12]
 801d000:	68ba      	ldr	r2, [r7, #8]
 801d002:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801d004:	687b      	ldr	r3, [r7, #4]
 801d006:	2b00      	cmp	r3, #0
 801d008:	d105      	bne.n	801d016 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801d00a:	68fb      	ldr	r3, [r7, #12]
 801d00c:	7f9b      	ldrb	r3, [r3, #30]
 801d00e:	f003 0301 	and.w	r3, r3, #1
 801d012:	2b00      	cmp	r3, #0
 801d014:	d059      	beq.n	801d0ca <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801d016:	6a3b      	ldr	r3, [r7, #32]
 801d018:	2b00      	cmp	r3, #0
 801d01a:	d04f      	beq.n	801d0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801d01c:	68fb      	ldr	r3, [r7, #12]
 801d01e:	685b      	ldr	r3, [r3, #4]
 801d020:	2b00      	cmp	r3, #0
 801d022:	d006      	beq.n	801d032 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801d024:	68fb      	ldr	r3, [r7, #12]
 801d026:	685b      	ldr	r3, [r3, #4]
 801d028:	685b      	ldr	r3, [r3, #4]
 801d02a:	889b      	ldrh	r3, [r3, #4]
 801d02c:	b29b      	uxth	r3, r3
 801d02e:	2b00      	cmp	r3, #0
 801d030:	d002      	beq.n	801d038 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801d032:	2300      	movs	r3, #0
 801d034:	623b      	str	r3, [r7, #32]
 801d036:	e041      	b.n	801d0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801d038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d03a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801d03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d03e:	681b      	ldr	r3, [r3, #0]
 801d040:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801d042:	e012      	b.n	801d06a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801d044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d046:	685b      	ldr	r3, [r3, #4]
 801d048:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801d04a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d04c:	88db      	ldrh	r3, [r3, #6]
 801d04e:	b29a      	uxth	r2, r3
 801d050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d052:	889b      	ldrh	r3, [r3, #4]
 801d054:	b29b      	uxth	r3, r3
 801d056:	429a      	cmp	r2, r3
 801d058:	d002      	beq.n	801d060 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801d05a:	2300      	movs	r3, #0
 801d05c:	623b      	str	r3, [r7, #32]
            break;
 801d05e:	e007      	b.n	801d070 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801d060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d062:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801d064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d066:	681b      	ldr	r3, [r3, #0]
 801d068:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801d06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d06c:	2b00      	cmp	r3, #0
 801d06e:	d1e9      	bne.n	801d044 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801d070:	6a3b      	ldr	r3, [r7, #32]
 801d072:	2b00      	cmp	r3, #0
 801d074:	d022      	beq.n	801d0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801d076:	68fb      	ldr	r3, [r7, #12]
 801d078:	685b      	ldr	r3, [r3, #4]
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	d106      	bne.n	801d08c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801d07e:	4b15      	ldr	r3, [pc, #84]	@ (801d0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d080:	f240 12df 	movw	r2, #479	@ 0x1df
 801d084:	4917      	ldr	r1, [pc, #92]	@ (801d0e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d086:	4815      	ldr	r0, [pc, #84]	@ (801d0dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d088:	f001 fcaa 	bl	801e9e0 <iprintf>
          LWIP_ASSERT("sanity check",
 801d08c:	68fb      	ldr	r3, [r7, #12]
 801d08e:	685b      	ldr	r3, [r3, #4]
 801d090:	685b      	ldr	r3, [r3, #4]
 801d092:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d094:	429a      	cmp	r2, r3
 801d096:	d106      	bne.n	801d0a6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801d098:	4b0e      	ldr	r3, [pc, #56]	@ (801d0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d09a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801d09e:	4911      	ldr	r1, [pc, #68]	@ (801d0e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d0a0:	480e      	ldr	r0, [pc, #56]	@ (801d0dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d0a2:	f001 fc9d 	bl	801e9e0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801d0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d0a8:	681b      	ldr	r3, [r3, #0]
 801d0aa:	2b00      	cmp	r3, #0
 801d0ac:	d006      	beq.n	801d0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801d0ae:	4b09      	ldr	r3, [pc, #36]	@ (801d0d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d0b0:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801d0b4:	490c      	ldr	r1, [pc, #48]	@ (801d0e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801d0b6:	4809      	ldr	r0, [pc, #36]	@ (801d0dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d0b8:	f001 fc92 	bl	801e9e0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801d0bc:	6a3b      	ldr	r3, [r7, #32]
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	bf14      	ite	ne
 801d0c2:	2301      	movne	r3, #1
 801d0c4:	2300      	moveq	r3, #0
 801d0c6:	b2db      	uxtb	r3, r3
 801d0c8:	e000      	b.n	801d0cc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801d0ca:	2300      	movs	r3, #0
}
 801d0cc:	4618      	mov	r0, r3
 801d0ce:	3730      	adds	r7, #48	@ 0x30
 801d0d0:	46bd      	mov	sp, r7
 801d0d2:	bd80      	pop	{r7, pc}
 801d0d4:	080232b4 	.word	0x080232b4
 801d0d8:	08023398 	.word	0x08023398
 801d0dc:	080232fc 	.word	0x080232fc
 801d0e0:	080233b8 	.word	0x080233b8
 801d0e4:	080233f0 	.word	0x080233f0
 801d0e8:	08023400 	.word	0x08023400

0801d0ec <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801d0ec:	b580      	push	{r7, lr}
 801d0ee:	b08e      	sub	sp, #56	@ 0x38
 801d0f0:	af00      	add	r7, sp, #0
 801d0f2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	685b      	ldr	r3, [r3, #4]
 801d0f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801d0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d0fc:	781b      	ldrb	r3, [r3, #0]
 801d0fe:	f003 030f 	and.w	r3, r3, #15
 801d102:	b2db      	uxtb	r3, r3
 801d104:	009b      	lsls	r3, r3, #2
 801d106:	b2db      	uxtb	r3, r3
 801d108:	2b14      	cmp	r3, #20
 801d10a:	f040 8171 	bne.w	801d3f0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801d10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d110:	88db      	ldrh	r3, [r3, #6]
 801d112:	b29b      	uxth	r3, r3
 801d114:	4618      	mov	r0, r3
 801d116:	f7f3 fcef 	bl	8010af8 <lwip_htons>
 801d11a:	4603      	mov	r3, r0
 801d11c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d120:	b29b      	uxth	r3, r3
 801d122:	00db      	lsls	r3, r3, #3
 801d124:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d128:	885b      	ldrh	r3, [r3, #2]
 801d12a:	b29b      	uxth	r3, r3
 801d12c:	4618      	mov	r0, r3
 801d12e:	f7f3 fce3 	bl	8010af8 <lwip_htons>
 801d132:	4603      	mov	r3, r0
 801d134:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801d136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d138:	781b      	ldrb	r3, [r3, #0]
 801d13a:	f003 030f 	and.w	r3, r3, #15
 801d13e:	b2db      	uxtb	r3, r3
 801d140:	009b      	lsls	r3, r3, #2
 801d142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801d146:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801d14a:	b29b      	uxth	r3, r3
 801d14c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801d14e:	429a      	cmp	r2, r3
 801d150:	f0c0 8150 	bcc.w	801d3f4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801d154:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801d158:	b29b      	uxth	r3, r3
 801d15a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801d15c:	1ad3      	subs	r3, r2, r3
 801d15e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801d160:	6878      	ldr	r0, [r7, #4]
 801d162:	f7f5 faab 	bl	80126bc <pbuf_clen>
 801d166:	4603      	mov	r3, r0
 801d168:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801d16a:	4b8c      	ldr	r3, [pc, #560]	@ (801d39c <ip4_reass+0x2b0>)
 801d16c:	881b      	ldrh	r3, [r3, #0]
 801d16e:	461a      	mov	r2, r3
 801d170:	8c3b      	ldrh	r3, [r7, #32]
 801d172:	4413      	add	r3, r2
 801d174:	2b0a      	cmp	r3, #10
 801d176:	dd10      	ble.n	801d19a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d178:	8c3b      	ldrh	r3, [r7, #32]
 801d17a:	4619      	mov	r1, r3
 801d17c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801d17e:	f7ff fd81 	bl	801cc84 <ip_reass_remove_oldest_datagram>
 801d182:	4603      	mov	r3, r0
 801d184:	2b00      	cmp	r3, #0
 801d186:	f000 8137 	beq.w	801d3f8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801d18a:	4b84      	ldr	r3, [pc, #528]	@ (801d39c <ip4_reass+0x2b0>)
 801d18c:	881b      	ldrh	r3, [r3, #0]
 801d18e:	461a      	mov	r2, r3
 801d190:	8c3b      	ldrh	r3, [r7, #32]
 801d192:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d194:	2b0a      	cmp	r3, #10
 801d196:	f300 812f 	bgt.w	801d3f8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d19a:	4b81      	ldr	r3, [pc, #516]	@ (801d3a0 <ip4_reass+0x2b4>)
 801d19c:	681b      	ldr	r3, [r3, #0]
 801d19e:	633b      	str	r3, [r7, #48]	@ 0x30
 801d1a0:	e015      	b.n	801d1ce <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801d1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d1a4:	695a      	ldr	r2, [r3, #20]
 801d1a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d1a8:	68db      	ldr	r3, [r3, #12]
 801d1aa:	429a      	cmp	r2, r3
 801d1ac:	d10c      	bne.n	801d1c8 <ip4_reass+0xdc>
 801d1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d1b0:	699a      	ldr	r2, [r3, #24]
 801d1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d1b4:	691b      	ldr	r3, [r3, #16]
 801d1b6:	429a      	cmp	r2, r3
 801d1b8:	d106      	bne.n	801d1c8 <ip4_reass+0xdc>
 801d1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d1bc:	899a      	ldrh	r2, [r3, #12]
 801d1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d1c0:	889b      	ldrh	r3, [r3, #4]
 801d1c2:	b29b      	uxth	r3, r3
 801d1c4:	429a      	cmp	r2, r3
 801d1c6:	d006      	beq.n	801d1d6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d1ca:	681b      	ldr	r3, [r3, #0]
 801d1cc:	633b      	str	r3, [r7, #48]	@ 0x30
 801d1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	d1e6      	bne.n	801d1a2 <ip4_reass+0xb6>
 801d1d4:	e000      	b.n	801d1d8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801d1d6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801d1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	d109      	bne.n	801d1f2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801d1de:	8c3b      	ldrh	r3, [r7, #32]
 801d1e0:	4619      	mov	r1, r3
 801d1e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801d1e4:	f7ff fdb0 	bl	801cd48 <ip_reass_enqueue_new_datagram>
 801d1e8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801d1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d1ec:	2b00      	cmp	r3, #0
 801d1ee:	d11c      	bne.n	801d22a <ip4_reass+0x13e>
      goto nullreturn;
 801d1f0:	e105      	b.n	801d3fe <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d1f4:	88db      	ldrh	r3, [r3, #6]
 801d1f6:	b29b      	uxth	r3, r3
 801d1f8:	4618      	mov	r0, r3
 801d1fa:	f7f3 fc7d 	bl	8010af8 <lwip_htons>
 801d1fe:	4603      	mov	r3, r0
 801d200:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d204:	2b00      	cmp	r3, #0
 801d206:	d110      	bne.n	801d22a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801d208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d20a:	89db      	ldrh	r3, [r3, #14]
 801d20c:	4618      	mov	r0, r3
 801d20e:	f7f3 fc73 	bl	8010af8 <lwip_htons>
 801d212:	4603      	mov	r3, r0
 801d214:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d218:	2b00      	cmp	r3, #0
 801d21a:	d006      	beq.n	801d22a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801d21c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d21e:	3308      	adds	r3, #8
 801d220:	2214      	movs	r2, #20
 801d222:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801d224:	4618      	mov	r0, r3
 801d226:	f001 fe8e 	bl	801ef46 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801d22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d22c:	88db      	ldrh	r3, [r3, #6]
 801d22e:	b29b      	uxth	r3, r3
 801d230:	f003 0320 	and.w	r3, r3, #32
 801d234:	2b00      	cmp	r3, #0
 801d236:	bf0c      	ite	eq
 801d238:	2301      	moveq	r3, #1
 801d23a:	2300      	movne	r3, #0
 801d23c:	b2db      	uxtb	r3, r3
 801d23e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801d240:	69fb      	ldr	r3, [r7, #28]
 801d242:	2b00      	cmp	r3, #0
 801d244:	d00e      	beq.n	801d264 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801d246:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801d248:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d24a:	4413      	add	r3, r2
 801d24c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801d24e:	8b7a      	ldrh	r2, [r7, #26]
 801d250:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801d252:	429a      	cmp	r2, r3
 801d254:	f0c0 80a0 	bcc.w	801d398 <ip4_reass+0x2ac>
 801d258:	8b7b      	ldrh	r3, [r7, #26]
 801d25a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801d25e:	4293      	cmp	r3, r2
 801d260:	f200 809a 	bhi.w	801d398 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801d264:	69fa      	ldr	r2, [r7, #28]
 801d266:	6879      	ldr	r1, [r7, #4]
 801d268:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801d26a:	f7ff fdd5 	bl	801ce18 <ip_reass_chain_frag_into_datagram_and_validate>
 801d26e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801d270:	697b      	ldr	r3, [r7, #20]
 801d272:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801d276:	f000 809b 	beq.w	801d3b0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801d27a:	4b48      	ldr	r3, [pc, #288]	@ (801d39c <ip4_reass+0x2b0>)
 801d27c:	881a      	ldrh	r2, [r3, #0]
 801d27e:	8c3b      	ldrh	r3, [r7, #32]
 801d280:	4413      	add	r3, r2
 801d282:	b29a      	uxth	r2, r3
 801d284:	4b45      	ldr	r3, [pc, #276]	@ (801d39c <ip4_reass+0x2b0>)
 801d286:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801d288:	69fb      	ldr	r3, [r7, #28]
 801d28a:	2b00      	cmp	r3, #0
 801d28c:	d00d      	beq.n	801d2aa <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801d28e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801d290:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d292:	4413      	add	r3, r2
 801d294:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801d296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d298:	8a7a      	ldrh	r2, [r7, #18]
 801d29a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801d29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d29e:	7f9b      	ldrb	r3, [r3, #30]
 801d2a0:	f043 0301 	orr.w	r3, r3, #1
 801d2a4:	b2da      	uxtb	r2, r3
 801d2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d2a8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801d2aa:	697b      	ldr	r3, [r7, #20]
 801d2ac:	2b01      	cmp	r3, #1
 801d2ae:	d171      	bne.n	801d394 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801d2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d2b2:	8b9b      	ldrh	r3, [r3, #28]
 801d2b4:	3314      	adds	r3, #20
 801d2b6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801d2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d2ba:	685b      	ldr	r3, [r3, #4]
 801d2bc:	685b      	ldr	r3, [r3, #4]
 801d2be:	681b      	ldr	r3, [r3, #0]
 801d2c0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801d2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d2c4:	685b      	ldr	r3, [r3, #4]
 801d2c6:	685b      	ldr	r3, [r3, #4]
 801d2c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801d2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d2cc:	3308      	adds	r3, #8
 801d2ce:	2214      	movs	r2, #20
 801d2d0:	4619      	mov	r1, r3
 801d2d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801d2d4:	f001 fe37 	bl	801ef46 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801d2d8:	8a3b      	ldrh	r3, [r7, #16]
 801d2da:	4618      	mov	r0, r3
 801d2dc:	f7f3 fc0c 	bl	8010af8 <lwip_htons>
 801d2e0:	4603      	mov	r3, r0
 801d2e2:	461a      	mov	r2, r3
 801d2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d2e6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801d2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d2ea:	2200      	movs	r2, #0
 801d2ec:	719a      	strb	r2, [r3, #6]
 801d2ee:	2200      	movs	r2, #0
 801d2f0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801d2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d2f4:	2200      	movs	r2, #0
 801d2f6:	729a      	strb	r2, [r3, #10]
 801d2f8:	2200      	movs	r2, #0
 801d2fa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801d2fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d2fe:	685b      	ldr	r3, [r3, #4]
 801d300:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801d302:	e00d      	b.n	801d320 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801d304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d306:	685b      	ldr	r3, [r3, #4]
 801d308:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801d30a:	2114      	movs	r1, #20
 801d30c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801d30e:	f7f5 f8c1 	bl	8012494 <pbuf_remove_header>
      pbuf_cat(p, r);
 801d312:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801d314:	6878      	ldr	r0, [r7, #4]
 801d316:	f7f5 fa11 	bl	801273c <pbuf_cat>
      r = iprh->next_pbuf;
 801d31a:	68fb      	ldr	r3, [r7, #12]
 801d31c:	681b      	ldr	r3, [r3, #0]
 801d31e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801d320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d322:	2b00      	cmp	r3, #0
 801d324:	d1ee      	bne.n	801d304 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801d326:	4b1e      	ldr	r3, [pc, #120]	@ (801d3a0 <ip4_reass+0x2b4>)
 801d328:	681b      	ldr	r3, [r3, #0]
 801d32a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d32c:	429a      	cmp	r2, r3
 801d32e:	d102      	bne.n	801d336 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801d330:	2300      	movs	r3, #0
 801d332:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d334:	e010      	b.n	801d358 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d336:	4b1a      	ldr	r3, [pc, #104]	@ (801d3a0 <ip4_reass+0x2b4>)
 801d338:	681b      	ldr	r3, [r3, #0]
 801d33a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d33c:	e007      	b.n	801d34e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801d33e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d340:	681b      	ldr	r3, [r3, #0]
 801d342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d344:	429a      	cmp	r2, r3
 801d346:	d006      	beq.n	801d356 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d34a:	681b      	ldr	r3, [r3, #0]
 801d34c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d350:	2b00      	cmp	r3, #0
 801d352:	d1f4      	bne.n	801d33e <ip4_reass+0x252>
 801d354:	e000      	b.n	801d358 <ip4_reass+0x26c>
          break;
 801d356:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801d358:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801d35a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801d35c:	f7ff fd2e 	bl	801cdbc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801d360:	6878      	ldr	r0, [r7, #4]
 801d362:	f7f5 f9ab 	bl	80126bc <pbuf_clen>
 801d366:	4603      	mov	r3, r0
 801d368:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801d36a:	4b0c      	ldr	r3, [pc, #48]	@ (801d39c <ip4_reass+0x2b0>)
 801d36c:	881b      	ldrh	r3, [r3, #0]
 801d36e:	8c3a      	ldrh	r2, [r7, #32]
 801d370:	429a      	cmp	r2, r3
 801d372:	d906      	bls.n	801d382 <ip4_reass+0x296>
 801d374:	4b0b      	ldr	r3, [pc, #44]	@ (801d3a4 <ip4_reass+0x2b8>)
 801d376:	f240 229b 	movw	r2, #667	@ 0x29b
 801d37a:	490b      	ldr	r1, [pc, #44]	@ (801d3a8 <ip4_reass+0x2bc>)
 801d37c:	480b      	ldr	r0, [pc, #44]	@ (801d3ac <ip4_reass+0x2c0>)
 801d37e:	f001 fb2f 	bl	801e9e0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801d382:	4b06      	ldr	r3, [pc, #24]	@ (801d39c <ip4_reass+0x2b0>)
 801d384:	881a      	ldrh	r2, [r3, #0]
 801d386:	8c3b      	ldrh	r3, [r7, #32]
 801d388:	1ad3      	subs	r3, r2, r3
 801d38a:	b29a      	uxth	r2, r3
 801d38c:	4b03      	ldr	r3, [pc, #12]	@ (801d39c <ip4_reass+0x2b0>)
 801d38e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801d390:	687b      	ldr	r3, [r7, #4]
 801d392:	e038      	b.n	801d406 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801d394:	2300      	movs	r3, #0
 801d396:	e036      	b.n	801d406 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801d398:	bf00      	nop
 801d39a:	e00a      	b.n	801d3b2 <ip4_reass+0x2c6>
 801d39c:	20004938 	.word	0x20004938
 801d3a0:	20004934 	.word	0x20004934
 801d3a4:	080232b4 	.word	0x080232b4
 801d3a8:	08023424 	.word	0x08023424
 801d3ac:	080232fc 	.word	0x080232fc
    goto nullreturn_ipr;
 801d3b0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801d3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d3b4:	2b00      	cmp	r3, #0
 801d3b6:	d106      	bne.n	801d3c6 <ip4_reass+0x2da>
 801d3b8:	4b15      	ldr	r3, [pc, #84]	@ (801d410 <ip4_reass+0x324>)
 801d3ba:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801d3be:	4915      	ldr	r1, [pc, #84]	@ (801d414 <ip4_reass+0x328>)
 801d3c0:	4815      	ldr	r0, [pc, #84]	@ (801d418 <ip4_reass+0x32c>)
 801d3c2:	f001 fb0d 	bl	801e9e0 <iprintf>
  if (ipr->p == NULL) {
 801d3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d3c8:	685b      	ldr	r3, [r3, #4]
 801d3ca:	2b00      	cmp	r3, #0
 801d3cc:	d116      	bne.n	801d3fc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801d3ce:	4b13      	ldr	r3, [pc, #76]	@ (801d41c <ip4_reass+0x330>)
 801d3d0:	681b      	ldr	r3, [r3, #0]
 801d3d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801d3d4:	429a      	cmp	r2, r3
 801d3d6:	d006      	beq.n	801d3e6 <ip4_reass+0x2fa>
 801d3d8:	4b0d      	ldr	r3, [pc, #52]	@ (801d410 <ip4_reass+0x324>)
 801d3da:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801d3de:	4910      	ldr	r1, [pc, #64]	@ (801d420 <ip4_reass+0x334>)
 801d3e0:	480d      	ldr	r0, [pc, #52]	@ (801d418 <ip4_reass+0x32c>)
 801d3e2:	f001 fafd 	bl	801e9e0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801d3e6:	2100      	movs	r1, #0
 801d3e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801d3ea:	f7ff fce7 	bl	801cdbc <ip_reass_dequeue_datagram>
 801d3ee:	e006      	b.n	801d3fe <ip4_reass+0x312>
    goto nullreturn;
 801d3f0:	bf00      	nop
 801d3f2:	e004      	b.n	801d3fe <ip4_reass+0x312>
    goto nullreturn;
 801d3f4:	bf00      	nop
 801d3f6:	e002      	b.n	801d3fe <ip4_reass+0x312>
      goto nullreturn;
 801d3f8:	bf00      	nop
 801d3fa:	e000      	b.n	801d3fe <ip4_reass+0x312>
  }

nullreturn:
 801d3fc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801d3fe:	6878      	ldr	r0, [r7, #4]
 801d400:	f7f5 f8ce 	bl	80125a0 <pbuf_free>
  return NULL;
 801d404:	2300      	movs	r3, #0
}
 801d406:	4618      	mov	r0, r3
 801d408:	3738      	adds	r7, #56	@ 0x38
 801d40a:	46bd      	mov	sp, r7
 801d40c:	bd80      	pop	{r7, pc}
 801d40e:	bf00      	nop
 801d410:	080232b4 	.word	0x080232b4
 801d414:	08023440 	.word	0x08023440
 801d418:	080232fc 	.word	0x080232fc
 801d41c:	20004934 	.word	0x20004934
 801d420:	0802344c 	.word	0x0802344c

0801d424 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801d424:	b580      	push	{r7, lr}
 801d426:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801d428:	2005      	movs	r0, #5
 801d42a:	f7f4 f95d 	bl	80116e8 <memp_malloc>
 801d42e:	4603      	mov	r3, r0
}
 801d430:	4618      	mov	r0, r3
 801d432:	bd80      	pop	{r7, pc}

0801d434 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801d434:	b580      	push	{r7, lr}
 801d436:	b082      	sub	sp, #8
 801d438:	af00      	add	r7, sp, #0
 801d43a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801d43c:	687b      	ldr	r3, [r7, #4]
 801d43e:	2b00      	cmp	r3, #0
 801d440:	d106      	bne.n	801d450 <ip_frag_free_pbuf_custom_ref+0x1c>
 801d442:	4b07      	ldr	r3, [pc, #28]	@ (801d460 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801d444:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801d448:	4906      	ldr	r1, [pc, #24]	@ (801d464 <ip_frag_free_pbuf_custom_ref+0x30>)
 801d44a:	4807      	ldr	r0, [pc, #28]	@ (801d468 <ip_frag_free_pbuf_custom_ref+0x34>)
 801d44c:	f001 fac8 	bl	801e9e0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801d450:	6879      	ldr	r1, [r7, #4]
 801d452:	2005      	movs	r0, #5
 801d454:	f7f4 f9b8 	bl	80117c8 <memp_free>
}
 801d458:	bf00      	nop
 801d45a:	3708      	adds	r7, #8
 801d45c:	46bd      	mov	sp, r7
 801d45e:	bd80      	pop	{r7, pc}
 801d460:	080232b4 	.word	0x080232b4
 801d464:	0802346c 	.word	0x0802346c
 801d468:	080232fc 	.word	0x080232fc

0801d46c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801d46c:	b580      	push	{r7, lr}
 801d46e:	b084      	sub	sp, #16
 801d470:	af00      	add	r7, sp, #0
 801d472:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801d478:	68fb      	ldr	r3, [r7, #12]
 801d47a:	2b00      	cmp	r3, #0
 801d47c:	d106      	bne.n	801d48c <ipfrag_free_pbuf_custom+0x20>
 801d47e:	4b11      	ldr	r3, [pc, #68]	@ (801d4c4 <ipfrag_free_pbuf_custom+0x58>)
 801d480:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801d484:	4910      	ldr	r1, [pc, #64]	@ (801d4c8 <ipfrag_free_pbuf_custom+0x5c>)
 801d486:	4811      	ldr	r0, [pc, #68]	@ (801d4cc <ipfrag_free_pbuf_custom+0x60>)
 801d488:	f001 faaa 	bl	801e9e0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801d48c:	68fa      	ldr	r2, [r7, #12]
 801d48e:	687b      	ldr	r3, [r7, #4]
 801d490:	429a      	cmp	r2, r3
 801d492:	d006      	beq.n	801d4a2 <ipfrag_free_pbuf_custom+0x36>
 801d494:	4b0b      	ldr	r3, [pc, #44]	@ (801d4c4 <ipfrag_free_pbuf_custom+0x58>)
 801d496:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801d49a:	490d      	ldr	r1, [pc, #52]	@ (801d4d0 <ipfrag_free_pbuf_custom+0x64>)
 801d49c:	480b      	ldr	r0, [pc, #44]	@ (801d4cc <ipfrag_free_pbuf_custom+0x60>)
 801d49e:	f001 fa9f 	bl	801e9e0 <iprintf>
  if (pcr->original != NULL) {
 801d4a2:	68fb      	ldr	r3, [r7, #12]
 801d4a4:	695b      	ldr	r3, [r3, #20]
 801d4a6:	2b00      	cmp	r3, #0
 801d4a8:	d004      	beq.n	801d4b4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801d4aa:	68fb      	ldr	r3, [r7, #12]
 801d4ac:	695b      	ldr	r3, [r3, #20]
 801d4ae:	4618      	mov	r0, r3
 801d4b0:	f7f5 f876 	bl	80125a0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801d4b4:	68f8      	ldr	r0, [r7, #12]
 801d4b6:	f7ff ffbd 	bl	801d434 <ip_frag_free_pbuf_custom_ref>
}
 801d4ba:	bf00      	nop
 801d4bc:	3710      	adds	r7, #16
 801d4be:	46bd      	mov	sp, r7
 801d4c0:	bd80      	pop	{r7, pc}
 801d4c2:	bf00      	nop
 801d4c4:	080232b4 	.word	0x080232b4
 801d4c8:	08023478 	.word	0x08023478
 801d4cc:	080232fc 	.word	0x080232fc
 801d4d0:	08023484 	.word	0x08023484

0801d4d4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801d4d4:	b580      	push	{r7, lr}
 801d4d6:	b094      	sub	sp, #80	@ 0x50
 801d4d8:	af02      	add	r7, sp, #8
 801d4da:	60f8      	str	r0, [r7, #12]
 801d4dc:	60b9      	str	r1, [r7, #8]
 801d4de:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801d4e0:	2300      	movs	r3, #0
 801d4e2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801d4e6:	68bb      	ldr	r3, [r7, #8]
 801d4e8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801d4ea:	3b14      	subs	r3, #20
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	da00      	bge.n	801d4f2 <ip4_frag+0x1e>
 801d4f0:	3307      	adds	r3, #7
 801d4f2:	10db      	asrs	r3, r3, #3
 801d4f4:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801d4f6:	2314      	movs	r3, #20
 801d4f8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801d4fa:	68fb      	ldr	r3, [r7, #12]
 801d4fc:	685b      	ldr	r3, [r3, #4]
 801d4fe:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801d500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d502:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801d504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d506:	781b      	ldrb	r3, [r3, #0]
 801d508:	f003 030f 	and.w	r3, r3, #15
 801d50c:	b2db      	uxtb	r3, r3
 801d50e:	009b      	lsls	r3, r3, #2
 801d510:	b2db      	uxtb	r3, r3
 801d512:	2b14      	cmp	r3, #20
 801d514:	d002      	beq.n	801d51c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801d516:	f06f 0305 	mvn.w	r3, #5
 801d51a:	e110      	b.n	801d73e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801d51c:	68fb      	ldr	r3, [r7, #12]
 801d51e:	895b      	ldrh	r3, [r3, #10]
 801d520:	2b13      	cmp	r3, #19
 801d522:	d809      	bhi.n	801d538 <ip4_frag+0x64>
 801d524:	4b88      	ldr	r3, [pc, #544]	@ (801d748 <ip4_frag+0x274>)
 801d526:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801d52a:	4988      	ldr	r1, [pc, #544]	@ (801d74c <ip4_frag+0x278>)
 801d52c:	4888      	ldr	r0, [pc, #544]	@ (801d750 <ip4_frag+0x27c>)
 801d52e:	f001 fa57 	bl	801e9e0 <iprintf>
 801d532:	f06f 0305 	mvn.w	r3, #5
 801d536:	e102      	b.n	801d73e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801d538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d53a:	88db      	ldrh	r3, [r3, #6]
 801d53c:	b29b      	uxth	r3, r3
 801d53e:	4618      	mov	r0, r3
 801d540:	f7f3 fada 	bl	8010af8 <lwip_htons>
 801d544:	4603      	mov	r3, r0
 801d546:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801d548:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801d54a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d54e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801d552:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801d554:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801d558:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801d55a:	68fb      	ldr	r3, [r7, #12]
 801d55c:	891b      	ldrh	r3, [r3, #8]
 801d55e:	3b14      	subs	r3, #20
 801d560:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801d564:	e0e1      	b.n	801d72a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801d566:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801d568:	00db      	lsls	r3, r3, #3
 801d56a:	b29b      	uxth	r3, r3
 801d56c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801d570:	4293      	cmp	r3, r2
 801d572:	bf28      	it	cs
 801d574:	4613      	movcs	r3, r2
 801d576:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801d578:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801d57c:	2114      	movs	r1, #20
 801d57e:	200e      	movs	r0, #14
 801d580:	f7f4 fd2a 	bl	8011fd8 <pbuf_alloc>
 801d584:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801d586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d588:	2b00      	cmp	r3, #0
 801d58a:	f000 80d5 	beq.w	801d738 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801d58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d590:	895b      	ldrh	r3, [r3, #10]
 801d592:	2b13      	cmp	r3, #19
 801d594:	d806      	bhi.n	801d5a4 <ip4_frag+0xd0>
 801d596:	4b6c      	ldr	r3, [pc, #432]	@ (801d748 <ip4_frag+0x274>)
 801d598:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801d59c:	496d      	ldr	r1, [pc, #436]	@ (801d754 <ip4_frag+0x280>)
 801d59e:	486c      	ldr	r0, [pc, #432]	@ (801d750 <ip4_frag+0x27c>)
 801d5a0:	f001 fa1e 	bl	801e9e0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801d5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5a6:	685b      	ldr	r3, [r3, #4]
 801d5a8:	2214      	movs	r2, #20
 801d5aa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801d5ac:	4618      	mov	r0, r3
 801d5ae:	f001 fcca 	bl	801ef46 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801d5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5b4:	685b      	ldr	r3, [r3, #4]
 801d5b6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801d5b8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801d5ba:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801d5be:	e064      	b.n	801d68a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801d5c0:	68fb      	ldr	r3, [r7, #12]
 801d5c2:	895a      	ldrh	r2, [r3, #10]
 801d5c4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801d5c6:	1ad3      	subs	r3, r2, r3
 801d5c8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801d5ca:	68fb      	ldr	r3, [r7, #12]
 801d5cc:	895b      	ldrh	r3, [r3, #10]
 801d5ce:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801d5d0:	429a      	cmp	r2, r3
 801d5d2:	d906      	bls.n	801d5e2 <ip4_frag+0x10e>
 801d5d4:	4b5c      	ldr	r3, [pc, #368]	@ (801d748 <ip4_frag+0x274>)
 801d5d6:	f240 322d 	movw	r2, #813	@ 0x32d
 801d5da:	495f      	ldr	r1, [pc, #380]	@ (801d758 <ip4_frag+0x284>)
 801d5dc:	485c      	ldr	r0, [pc, #368]	@ (801d750 <ip4_frag+0x27c>)
 801d5de:	f001 f9ff 	bl	801e9e0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801d5e2:	8bfa      	ldrh	r2, [r7, #30]
 801d5e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801d5e8:	4293      	cmp	r3, r2
 801d5ea:	bf28      	it	cs
 801d5ec:	4613      	movcs	r3, r2
 801d5ee:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801d5f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801d5f6:	2b00      	cmp	r3, #0
 801d5f8:	d105      	bne.n	801d606 <ip4_frag+0x132>
        poff = 0;
 801d5fa:	2300      	movs	r3, #0
 801d5fc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801d5fe:	68fb      	ldr	r3, [r7, #12]
 801d600:	681b      	ldr	r3, [r3, #0]
 801d602:	60fb      	str	r3, [r7, #12]
        continue;
 801d604:	e041      	b.n	801d68a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801d606:	f7ff ff0d 	bl	801d424 <ip_frag_alloc_pbuf_custom_ref>
 801d60a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801d60c:	69bb      	ldr	r3, [r7, #24]
 801d60e:	2b00      	cmp	r3, #0
 801d610:	d103      	bne.n	801d61a <ip4_frag+0x146>
        pbuf_free(rambuf);
 801d612:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d614:	f7f4 ffc4 	bl	80125a0 <pbuf_free>
        goto memerr;
 801d618:	e08f      	b.n	801d73a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d61a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801d61c:	68fb      	ldr	r3, [r7, #12]
 801d61e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d620:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801d622:	4413      	add	r3, r2
 801d624:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801d628:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801d62c:	9201      	str	r2, [sp, #4]
 801d62e:	9300      	str	r3, [sp, #0]
 801d630:	4603      	mov	r3, r0
 801d632:	2241      	movs	r2, #65	@ 0x41
 801d634:	2000      	movs	r0, #0
 801d636:	f7f4 fdf9 	bl	801222c <pbuf_alloced_custom>
 801d63a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801d63c:	697b      	ldr	r3, [r7, #20]
 801d63e:	2b00      	cmp	r3, #0
 801d640:	d106      	bne.n	801d650 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801d642:	69b8      	ldr	r0, [r7, #24]
 801d644:	f7ff fef6 	bl	801d434 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801d648:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d64a:	f7f4 ffa9 	bl	80125a0 <pbuf_free>
        goto memerr;
 801d64e:	e074      	b.n	801d73a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801d650:	68f8      	ldr	r0, [r7, #12]
 801d652:	f7f5 f84b 	bl	80126ec <pbuf_ref>
      pcr->original = p;
 801d656:	69bb      	ldr	r3, [r7, #24]
 801d658:	68fa      	ldr	r2, [r7, #12]
 801d65a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801d65c:	69bb      	ldr	r3, [r7, #24]
 801d65e:	4a3f      	ldr	r2, [pc, #252]	@ (801d75c <ip4_frag+0x288>)
 801d660:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801d662:	6979      	ldr	r1, [r7, #20]
 801d664:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d666:	f7f5 f869 	bl	801273c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801d66a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801d66e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801d672:	1ad3      	subs	r3, r2, r3
 801d674:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801d678:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801d67c:	2b00      	cmp	r3, #0
 801d67e:	d004      	beq.n	801d68a <ip4_frag+0x1b6>
        poff = 0;
 801d680:	2300      	movs	r3, #0
 801d682:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801d684:	68fb      	ldr	r3, [r7, #12]
 801d686:	681b      	ldr	r3, [r3, #0]
 801d688:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801d68a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801d68e:	2b00      	cmp	r3, #0
 801d690:	d196      	bne.n	801d5c0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801d692:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801d694:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801d698:	4413      	add	r3, r2
 801d69a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801d69c:	68bb      	ldr	r3, [r7, #8]
 801d69e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801d6a0:	f1a3 0213 	sub.w	r2, r3, #19
 801d6a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801d6a8:	429a      	cmp	r2, r3
 801d6aa:	bfcc      	ite	gt
 801d6ac:	2301      	movgt	r3, #1
 801d6ae:	2300      	movle	r3, #0
 801d6b0:	b2db      	uxtb	r3, r3
 801d6b2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801d6b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801d6b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d6bc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801d6be:	6a3b      	ldr	r3, [r7, #32]
 801d6c0:	2b00      	cmp	r3, #0
 801d6c2:	d002      	beq.n	801d6ca <ip4_frag+0x1f6>
 801d6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d6c6:	2b00      	cmp	r3, #0
 801d6c8:	d003      	beq.n	801d6d2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801d6ca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801d6cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801d6d0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801d6d2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801d6d4:	4618      	mov	r0, r3
 801d6d6:	f7f3 fa0f 	bl	8010af8 <lwip_htons>
 801d6da:	4603      	mov	r3, r0
 801d6dc:	461a      	mov	r2, r3
 801d6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d6e0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801d6e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801d6e4:	3314      	adds	r3, #20
 801d6e6:	b29b      	uxth	r3, r3
 801d6e8:	4618      	mov	r0, r3
 801d6ea:	f7f3 fa05 	bl	8010af8 <lwip_htons>
 801d6ee:	4603      	mov	r3, r0
 801d6f0:	461a      	mov	r2, r3
 801d6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d6f4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801d6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d6f8:	2200      	movs	r2, #0
 801d6fa:	729a      	strb	r2, [r3, #10]
 801d6fc:	2200      	movs	r2, #0
 801d6fe:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801d700:	68bb      	ldr	r3, [r7, #8]
 801d702:	695b      	ldr	r3, [r3, #20]
 801d704:	687a      	ldr	r2, [r7, #4]
 801d706:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d708:	68b8      	ldr	r0, [r7, #8]
 801d70a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801d70c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801d70e:	f7f4 ff47 	bl	80125a0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801d712:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801d716:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801d718:	1ad3      	subs	r3, r2, r3
 801d71a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801d71e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801d722:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801d724:	4413      	add	r3, r2
 801d726:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801d72a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801d72e:	2b00      	cmp	r3, #0
 801d730:	f47f af19 	bne.w	801d566 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801d734:	2300      	movs	r3, #0
 801d736:	e002      	b.n	801d73e <ip4_frag+0x26a>
      goto memerr;
 801d738:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801d73a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801d73e:	4618      	mov	r0, r3
 801d740:	3748      	adds	r7, #72	@ 0x48
 801d742:	46bd      	mov	sp, r7
 801d744:	bd80      	pop	{r7, pc}
 801d746:	bf00      	nop
 801d748:	080232b4 	.word	0x080232b4
 801d74c:	08023490 	.word	0x08023490
 801d750:	080232fc 	.word	0x080232fc
 801d754:	080234ac 	.word	0x080234ac
 801d758:	080234cc 	.word	0x080234cc
 801d75c:	0801d46d 	.word	0x0801d46d

0801d760 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801d760:	b580      	push	{r7, lr}
 801d762:	b086      	sub	sp, #24
 801d764:	af00      	add	r7, sp, #0
 801d766:	6078      	str	r0, [r7, #4]
 801d768:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801d76a:	230e      	movs	r3, #14
 801d76c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801d76e:	687b      	ldr	r3, [r7, #4]
 801d770:	895b      	ldrh	r3, [r3, #10]
 801d772:	2b0e      	cmp	r3, #14
 801d774:	d96e      	bls.n	801d854 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801d776:	687b      	ldr	r3, [r7, #4]
 801d778:	7bdb      	ldrb	r3, [r3, #15]
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	d106      	bne.n	801d78c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801d77e:	683b      	ldr	r3, [r7, #0]
 801d780:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801d784:	3301      	adds	r3, #1
 801d786:	b2da      	uxtb	r2, r3
 801d788:	687b      	ldr	r3, [r7, #4]
 801d78a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801d78c:	687b      	ldr	r3, [r7, #4]
 801d78e:	685b      	ldr	r3, [r3, #4]
 801d790:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801d792:	693b      	ldr	r3, [r7, #16]
 801d794:	7b1a      	ldrb	r2, [r3, #12]
 801d796:	7b5b      	ldrb	r3, [r3, #13]
 801d798:	021b      	lsls	r3, r3, #8
 801d79a:	4313      	orrs	r3, r2
 801d79c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801d79e:	693b      	ldr	r3, [r7, #16]
 801d7a0:	781b      	ldrb	r3, [r3, #0]
 801d7a2:	f003 0301 	and.w	r3, r3, #1
 801d7a6:	2b00      	cmp	r3, #0
 801d7a8:	d023      	beq.n	801d7f2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801d7aa:	693b      	ldr	r3, [r7, #16]
 801d7ac:	781b      	ldrb	r3, [r3, #0]
 801d7ae:	2b01      	cmp	r3, #1
 801d7b0:	d10f      	bne.n	801d7d2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d7b2:	693b      	ldr	r3, [r7, #16]
 801d7b4:	785b      	ldrb	r3, [r3, #1]
 801d7b6:	2b00      	cmp	r3, #0
 801d7b8:	d11b      	bne.n	801d7f2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801d7ba:	693b      	ldr	r3, [r7, #16]
 801d7bc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d7be:	2b5e      	cmp	r3, #94	@ 0x5e
 801d7c0:	d117      	bne.n	801d7f2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801d7c2:	687b      	ldr	r3, [r7, #4]
 801d7c4:	7b5b      	ldrb	r3, [r3, #13]
 801d7c6:	f043 0310 	orr.w	r3, r3, #16
 801d7ca:	b2da      	uxtb	r2, r3
 801d7cc:	687b      	ldr	r3, [r7, #4]
 801d7ce:	735a      	strb	r2, [r3, #13]
 801d7d0:	e00f      	b.n	801d7f2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801d7d2:	693b      	ldr	r3, [r7, #16]
 801d7d4:	2206      	movs	r2, #6
 801d7d6:	4928      	ldr	r1, [pc, #160]	@ (801d878 <ethernet_input+0x118>)
 801d7d8:	4618      	mov	r0, r3
 801d7da:	f001 faa7 	bl	801ed2c <memcmp>
 801d7de:	4603      	mov	r3, r0
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	d106      	bne.n	801d7f2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801d7e4:	687b      	ldr	r3, [r7, #4]
 801d7e6:	7b5b      	ldrb	r3, [r3, #13]
 801d7e8:	f043 0308 	orr.w	r3, r3, #8
 801d7ec:	b2da      	uxtb	r2, r3
 801d7ee:	687b      	ldr	r3, [r7, #4]
 801d7f0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801d7f2:	89fb      	ldrh	r3, [r7, #14]
 801d7f4:	2b08      	cmp	r3, #8
 801d7f6:	d003      	beq.n	801d800 <ethernet_input+0xa0>
 801d7f8:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801d7fc:	d014      	beq.n	801d828 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801d7fe:	e032      	b.n	801d866 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d800:	683b      	ldr	r3, [r7, #0]
 801d802:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801d806:	f003 0308 	and.w	r3, r3, #8
 801d80a:	2b00      	cmp	r3, #0
 801d80c:	d024      	beq.n	801d858 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d80e:	8afb      	ldrh	r3, [r7, #22]
 801d810:	4619      	mov	r1, r3
 801d812:	6878      	ldr	r0, [r7, #4]
 801d814:	f7f4 fe3e 	bl	8012494 <pbuf_remove_header>
 801d818:	4603      	mov	r3, r0
 801d81a:	2b00      	cmp	r3, #0
 801d81c:	d11e      	bne.n	801d85c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801d81e:	6839      	ldr	r1, [r7, #0]
 801d820:	6878      	ldr	r0, [r7, #4]
 801d822:	f7fe fe55 	bl	801c4d0 <ip4_input>
      break;
 801d826:	e013      	b.n	801d850 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d828:	683b      	ldr	r3, [r7, #0]
 801d82a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801d82e:	f003 0308 	and.w	r3, r3, #8
 801d832:	2b00      	cmp	r3, #0
 801d834:	d014      	beq.n	801d860 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d836:	8afb      	ldrh	r3, [r7, #22]
 801d838:	4619      	mov	r1, r3
 801d83a:	6878      	ldr	r0, [r7, #4]
 801d83c:	f7f4 fe2a 	bl	8012494 <pbuf_remove_header>
 801d840:	4603      	mov	r3, r0
 801d842:	2b00      	cmp	r3, #0
 801d844:	d10e      	bne.n	801d864 <ethernet_input+0x104>
        etharp_input(p, netif);
 801d846:	6839      	ldr	r1, [r7, #0]
 801d848:	6878      	ldr	r0, [r7, #4]
 801d84a:	f7fd fcc3 	bl	801b1d4 <etharp_input>
      break;
 801d84e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801d850:	2300      	movs	r3, #0
 801d852:	e00c      	b.n	801d86e <ethernet_input+0x10e>
    goto free_and_return;
 801d854:	bf00      	nop
 801d856:	e006      	b.n	801d866 <ethernet_input+0x106>
        goto free_and_return;
 801d858:	bf00      	nop
 801d85a:	e004      	b.n	801d866 <ethernet_input+0x106>
        goto free_and_return;
 801d85c:	bf00      	nop
 801d85e:	e002      	b.n	801d866 <ethernet_input+0x106>
        goto free_and_return;
 801d860:	bf00      	nop
 801d862:	e000      	b.n	801d866 <ethernet_input+0x106>
        goto free_and_return;
 801d864:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801d866:	6878      	ldr	r0, [r7, #4]
 801d868:	f7f4 fe9a 	bl	80125a0 <pbuf_free>
  return ERR_OK;
 801d86c:	2300      	movs	r3, #0
}
 801d86e:	4618      	mov	r0, r3
 801d870:	3718      	adds	r7, #24
 801d872:	46bd      	mov	sp, r7
 801d874:	bd80      	pop	{r7, pc}
 801d876:	bf00      	nop
 801d878:	080236a8 	.word	0x080236a8

0801d87c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801d87c:	b580      	push	{r7, lr}
 801d87e:	b086      	sub	sp, #24
 801d880:	af00      	add	r7, sp, #0
 801d882:	60f8      	str	r0, [r7, #12]
 801d884:	60b9      	str	r1, [r7, #8]
 801d886:	607a      	str	r2, [r7, #4]
 801d888:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801d88a:	8c3b      	ldrh	r3, [r7, #32]
 801d88c:	4618      	mov	r0, r3
 801d88e:	f7f3 f933 	bl	8010af8 <lwip_htons>
 801d892:	4603      	mov	r3, r0
 801d894:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801d896:	210e      	movs	r1, #14
 801d898:	68b8      	ldr	r0, [r7, #8]
 801d89a:	f7f4 fdeb 	bl	8012474 <pbuf_add_header>
 801d89e:	4603      	mov	r3, r0
 801d8a0:	2b00      	cmp	r3, #0
 801d8a2:	d125      	bne.n	801d8f0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801d8a4:	68bb      	ldr	r3, [r7, #8]
 801d8a6:	685b      	ldr	r3, [r3, #4]
 801d8a8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801d8aa:	693b      	ldr	r3, [r7, #16]
 801d8ac:	8afa      	ldrh	r2, [r7, #22]
 801d8ae:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801d8b0:	693b      	ldr	r3, [r7, #16]
 801d8b2:	2206      	movs	r2, #6
 801d8b4:	6839      	ldr	r1, [r7, #0]
 801d8b6:	4618      	mov	r0, r3
 801d8b8:	f001 fb45 	bl	801ef46 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801d8bc:	693b      	ldr	r3, [r7, #16]
 801d8be:	3306      	adds	r3, #6
 801d8c0:	2206      	movs	r2, #6
 801d8c2:	6879      	ldr	r1, [r7, #4]
 801d8c4:	4618      	mov	r0, r3
 801d8c6:	f001 fb3e 	bl	801ef46 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801d8ca:	68fb      	ldr	r3, [r7, #12]
 801d8cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801d8d0:	2b06      	cmp	r3, #6
 801d8d2:	d006      	beq.n	801d8e2 <ethernet_output+0x66>
 801d8d4:	4b0a      	ldr	r3, [pc, #40]	@ (801d900 <ethernet_output+0x84>)
 801d8d6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801d8da:	490a      	ldr	r1, [pc, #40]	@ (801d904 <ethernet_output+0x88>)
 801d8dc:	480a      	ldr	r0, [pc, #40]	@ (801d908 <ethernet_output+0x8c>)
 801d8de:	f001 f87f 	bl	801e9e0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801d8e2:	68fb      	ldr	r3, [r7, #12]
 801d8e4:	699b      	ldr	r3, [r3, #24]
 801d8e6:	68b9      	ldr	r1, [r7, #8]
 801d8e8:	68f8      	ldr	r0, [r7, #12]
 801d8ea:	4798      	blx	r3
 801d8ec:	4603      	mov	r3, r0
 801d8ee:	e002      	b.n	801d8f6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801d8f0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801d8f2:	f06f 0301 	mvn.w	r3, #1
}
 801d8f6:	4618      	mov	r0, r3
 801d8f8:	3718      	adds	r7, #24
 801d8fa:	46bd      	mov	sp, r7
 801d8fc:	bd80      	pop	{r7, pc}
 801d8fe:	bf00      	nop
 801d900:	080234dc 	.word	0x080234dc
 801d904:	08023514 	.word	0x08023514
 801d908:	08023548 	.word	0x08023548

0801d90c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801d90c:	b580      	push	{r7, lr}
 801d90e:	b086      	sub	sp, #24
 801d910:	af00      	add	r7, sp, #0
 801d912:	6078      	str	r0, [r7, #4]
 801d914:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801d916:	683b      	ldr	r3, [r7, #0]
 801d918:	60bb      	str	r3, [r7, #8]
 801d91a:	2304      	movs	r3, #4
 801d91c:	60fb      	str	r3, [r7, #12]
 801d91e:	2300      	movs	r3, #0
 801d920:	613b      	str	r3, [r7, #16]
 801d922:	2300      	movs	r3, #0
 801d924:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801d926:	f107 0308 	add.w	r3, r7, #8
 801d92a:	2100      	movs	r1, #0
 801d92c:	4618      	mov	r0, r3
 801d92e:	f7ed f9f9 	bl	800ad24 <osMessageCreate>
 801d932:	4602      	mov	r2, r0
 801d934:	687b      	ldr	r3, [r7, #4]
 801d936:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801d938:	687b      	ldr	r3, [r7, #4]
 801d93a:	681b      	ldr	r3, [r3, #0]
 801d93c:	2b00      	cmp	r3, #0
 801d93e:	d102      	bne.n	801d946 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801d940:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d944:	e000      	b.n	801d948 <sys_mbox_new+0x3c>

  return ERR_OK;
 801d946:	2300      	movs	r3, #0
}
 801d948:	4618      	mov	r0, r3
 801d94a:	3718      	adds	r7, #24
 801d94c:	46bd      	mov	sp, r7
 801d94e:	bd80      	pop	{r7, pc}

0801d950 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801d950:	b580      	push	{r7, lr}
 801d952:	b084      	sub	sp, #16
 801d954:	af00      	add	r7, sp, #0
 801d956:	6078      	str	r0, [r7, #4]
 801d958:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801d95a:	687b      	ldr	r3, [r7, #4]
 801d95c:	681b      	ldr	r3, [r3, #0]
 801d95e:	6839      	ldr	r1, [r7, #0]
 801d960:	2200      	movs	r2, #0
 801d962:	4618      	mov	r0, r3
 801d964:	f7ed fa06 	bl	800ad74 <osMessagePut>
 801d968:	4603      	mov	r3, r0
 801d96a:	2b00      	cmp	r3, #0
 801d96c:	d102      	bne.n	801d974 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801d96e:	2300      	movs	r3, #0
 801d970:	73fb      	strb	r3, [r7, #15]
 801d972:	e001      	b.n	801d978 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801d974:	23ff      	movs	r3, #255	@ 0xff
 801d976:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801d978:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d97c:	4618      	mov	r0, r3
 801d97e:	3710      	adds	r7, #16
 801d980:	46bd      	mov	sp, r7
 801d982:	bd80      	pop	{r7, pc}

0801d984 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801d984:	b580      	push	{r7, lr}
 801d986:	b08c      	sub	sp, #48	@ 0x30
 801d988:	af00      	add	r7, sp, #0
 801d98a:	61f8      	str	r0, [r7, #28]
 801d98c:	61b9      	str	r1, [r7, #24]
 801d98e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801d990:	f7ec fffa 	bl	800a988 <osKernelSysTick>
 801d994:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801d996:	697b      	ldr	r3, [r7, #20]
 801d998:	2b00      	cmp	r3, #0
 801d99a:	d017      	beq.n	801d9cc <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801d99c:	69fb      	ldr	r3, [r7, #28]
 801d99e:	6819      	ldr	r1, [r3, #0]
 801d9a0:	f107 0320 	add.w	r3, r7, #32
 801d9a4:	697a      	ldr	r2, [r7, #20]
 801d9a6:	4618      	mov	r0, r3
 801d9a8:	f7ed fa24 	bl	800adf4 <osMessageGet>

    if(event.status == osEventMessage)
 801d9ac:	6a3b      	ldr	r3, [r7, #32]
 801d9ae:	2b10      	cmp	r3, #16
 801d9b0:	d109      	bne.n	801d9c6 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801d9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d9b4:	461a      	mov	r2, r3
 801d9b6:	69bb      	ldr	r3, [r7, #24]
 801d9b8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801d9ba:	f7ec ffe5 	bl	800a988 <osKernelSysTick>
 801d9be:	4602      	mov	r2, r0
 801d9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d9c2:	1ad3      	subs	r3, r2, r3
 801d9c4:	e019      	b.n	801d9fa <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801d9c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d9ca:	e016      	b.n	801d9fa <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801d9cc:	69fb      	ldr	r3, [r7, #28]
 801d9ce:	6819      	ldr	r1, [r3, #0]
 801d9d0:	463b      	mov	r3, r7
 801d9d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d9d6:	4618      	mov	r0, r3
 801d9d8:	f7ed fa0c 	bl	800adf4 <osMessageGet>
 801d9dc:	f107 0320 	add.w	r3, r7, #32
 801d9e0:	463a      	mov	r2, r7
 801d9e2:	ca07      	ldmia	r2, {r0, r1, r2}
 801d9e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801d9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d9ea:	461a      	mov	r2, r3
 801d9ec:	69bb      	ldr	r3, [r7, #24]
 801d9ee:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801d9f0:	f7ec ffca 	bl	800a988 <osKernelSysTick>
 801d9f4:	4602      	mov	r2, r0
 801d9f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d9f8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801d9fa:	4618      	mov	r0, r3
 801d9fc:	3730      	adds	r7, #48	@ 0x30
 801d9fe:	46bd      	mov	sp, r7
 801da00:	bd80      	pop	{r7, pc}

0801da02 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801da02:	b480      	push	{r7}
 801da04:	b083      	sub	sp, #12
 801da06:	af00      	add	r7, sp, #0
 801da08:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	681b      	ldr	r3, [r3, #0]
 801da0e:	2b00      	cmp	r3, #0
 801da10:	d101      	bne.n	801da16 <sys_mbox_valid+0x14>
    return 0;
 801da12:	2300      	movs	r3, #0
 801da14:	e000      	b.n	801da18 <sys_mbox_valid+0x16>
  else
    return 1;
 801da16:	2301      	movs	r3, #1
}
 801da18:	4618      	mov	r0, r3
 801da1a:	370c      	adds	r7, #12
 801da1c:	46bd      	mov	sp, r7
 801da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da22:	4770      	bx	lr

0801da24 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801da24:	b580      	push	{r7, lr}
 801da26:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801da28:	4803      	ldr	r0, [pc, #12]	@ (801da38 <sys_init+0x14>)
 801da2a:	f7ed f829 	bl	800aa80 <osMutexCreate>
 801da2e:	4603      	mov	r3, r0
 801da30:	4a02      	ldr	r2, [pc, #8]	@ (801da3c <sys_init+0x18>)
 801da32:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801da34:	bf00      	nop
 801da36:	bd80      	pop	{r7, pc}
 801da38:	080236b8 	.word	0x080236b8
 801da3c:	2000493c 	.word	0x2000493c

0801da40 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801da40:	b580      	push	{r7, lr}
 801da42:	b084      	sub	sp, #16
 801da44:	af00      	add	r7, sp, #0
 801da46:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801da48:	2300      	movs	r3, #0
 801da4a:	60bb      	str	r3, [r7, #8]
 801da4c:	2300      	movs	r3, #0
 801da4e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801da50:	f107 0308 	add.w	r3, r7, #8
 801da54:	4618      	mov	r0, r3
 801da56:	f7ed f813 	bl	800aa80 <osMutexCreate>
 801da5a:	4602      	mov	r2, r0
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801da60:	687b      	ldr	r3, [r7, #4]
 801da62:	681b      	ldr	r3, [r3, #0]
 801da64:	2b00      	cmp	r3, #0
 801da66:	d102      	bne.n	801da6e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801da68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801da6c:	e000      	b.n	801da70 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801da6e:	2300      	movs	r3, #0
}
 801da70:	4618      	mov	r0, r3
 801da72:	3710      	adds	r7, #16
 801da74:	46bd      	mov	sp, r7
 801da76:	bd80      	pop	{r7, pc}

0801da78 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801da78:	b580      	push	{r7, lr}
 801da7a:	b082      	sub	sp, #8
 801da7c:	af00      	add	r7, sp, #0
 801da7e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801da80:	687b      	ldr	r3, [r7, #4]
 801da82:	681b      	ldr	r3, [r3, #0]
 801da84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801da88:	4618      	mov	r0, r3
 801da8a:	f7ed f811 	bl	800aab0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801da8e:	bf00      	nop
 801da90:	3708      	adds	r7, #8
 801da92:	46bd      	mov	sp, r7
 801da94:	bd80      	pop	{r7, pc}

0801da96 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801da96:	b580      	push	{r7, lr}
 801da98:	b082      	sub	sp, #8
 801da9a:	af00      	add	r7, sp, #0
 801da9c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801da9e:	687b      	ldr	r3, [r7, #4]
 801daa0:	681b      	ldr	r3, [r3, #0]
 801daa2:	4618      	mov	r0, r3
 801daa4:	f7ed f852 	bl	800ab4c <osMutexRelease>
}
 801daa8:	bf00      	nop
 801daaa:	3708      	adds	r7, #8
 801daac:	46bd      	mov	sp, r7
 801daae:	bd80      	pop	{r7, pc}

0801dab0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801dab0:	b580      	push	{r7, lr}
 801dab2:	b08c      	sub	sp, #48	@ 0x30
 801dab4:	af00      	add	r7, sp, #0
 801dab6:	60f8      	str	r0, [r7, #12]
 801dab8:	60b9      	str	r1, [r7, #8]
 801daba:	607a      	str	r2, [r7, #4]
 801dabc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801dabe:	f107 0314 	add.w	r3, r7, #20
 801dac2:	2200      	movs	r2, #0
 801dac4:	601a      	str	r2, [r3, #0]
 801dac6:	605a      	str	r2, [r3, #4]
 801dac8:	609a      	str	r2, [r3, #8]
 801daca:	60da      	str	r2, [r3, #12]
 801dacc:	611a      	str	r2, [r3, #16]
 801dace:	615a      	str	r2, [r3, #20]
 801dad0:	619a      	str	r2, [r3, #24]
 801dad2:	68fb      	ldr	r3, [r7, #12]
 801dad4:	617b      	str	r3, [r7, #20]
 801dad6:	68bb      	ldr	r3, [r7, #8]
 801dad8:	61bb      	str	r3, [r7, #24]
 801dada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801dadc:	b21b      	sxth	r3, r3
 801dade:	83bb      	strh	r3, [r7, #28]
 801dae0:	683b      	ldr	r3, [r7, #0]
 801dae2:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 801dae4:	f107 0314 	add.w	r3, r7, #20
 801dae8:	6879      	ldr	r1, [r7, #4]
 801daea:	4618      	mov	r0, r3
 801daec:	f7ec ff5c 	bl	800a9a8 <osThreadCreate>
 801daf0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801daf2:	4618      	mov	r0, r3
 801daf4:	3730      	adds	r7, #48	@ 0x30
 801daf6:	46bd      	mov	sp, r7
 801daf8:	bd80      	pop	{r7, pc}
	...

0801dafc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801dafc:	b580      	push	{r7, lr}
 801dafe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801db00:	4b04      	ldr	r3, [pc, #16]	@ (801db14 <sys_arch_protect+0x18>)
 801db02:	681b      	ldr	r3, [r3, #0]
 801db04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801db08:	4618      	mov	r0, r3
 801db0a:	f7ec ffd1 	bl	800aab0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801db0e:	2301      	movs	r3, #1
}
 801db10:	4618      	mov	r0, r3
 801db12:	bd80      	pop	{r7, pc}
 801db14:	2000493c 	.word	0x2000493c

0801db18 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801db18:	b580      	push	{r7, lr}
 801db1a:	b082      	sub	sp, #8
 801db1c:	af00      	add	r7, sp, #0
 801db1e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801db20:	4b04      	ldr	r3, [pc, #16]	@ (801db34 <sys_arch_unprotect+0x1c>)
 801db22:	681b      	ldr	r3, [r3, #0]
 801db24:	4618      	mov	r0, r3
 801db26:	f7ed f811 	bl	800ab4c <osMutexRelease>
}
 801db2a:	bf00      	nop
 801db2c:	3708      	adds	r7, #8
 801db2e:	46bd      	mov	sp, r7
 801db30:	bd80      	pop	{r7, pc}
 801db32:	bf00      	nop
 801db34:	2000493c 	.word	0x2000493c

0801db38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801db38:	b580      	push	{r7, lr}
 801db3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801db3c:	2200      	movs	r2, #0
 801db3e:	4912      	ldr	r1, [pc, #72]	@ (801db88 <MX_USB_DEVICE_Init+0x50>)
 801db40:	4812      	ldr	r0, [pc, #72]	@ (801db8c <MX_USB_DEVICE_Init+0x54>)
 801db42:	f7eb fba7 	bl	8009294 <USBD_Init>
 801db46:	4603      	mov	r3, r0
 801db48:	2b00      	cmp	r3, #0
 801db4a:	d001      	beq.n	801db50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801db4c:	f7e3 f822 	bl	8000b94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801db50:	490f      	ldr	r1, [pc, #60]	@ (801db90 <MX_USB_DEVICE_Init+0x58>)
 801db52:	480e      	ldr	r0, [pc, #56]	@ (801db8c <MX_USB_DEVICE_Init+0x54>)
 801db54:	f7eb fbce 	bl	80092f4 <USBD_RegisterClass>
 801db58:	4603      	mov	r3, r0
 801db5a:	2b00      	cmp	r3, #0
 801db5c:	d001      	beq.n	801db62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801db5e:	f7e3 f819 	bl	8000b94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801db62:	490c      	ldr	r1, [pc, #48]	@ (801db94 <MX_USB_DEVICE_Init+0x5c>)
 801db64:	4809      	ldr	r0, [pc, #36]	@ (801db8c <MX_USB_DEVICE_Init+0x54>)
 801db66:	f7eb fac5 	bl	80090f4 <USBD_CDC_RegisterInterface>
 801db6a:	4603      	mov	r3, r0
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	d001      	beq.n	801db74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801db70:	f7e3 f810 	bl	8000b94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801db74:	4805      	ldr	r0, [pc, #20]	@ (801db8c <MX_USB_DEVICE_Init+0x54>)
 801db76:	f7eb fbf3 	bl	8009360 <USBD_Start>
 801db7a:	4603      	mov	r3, r0
 801db7c:	2b00      	cmp	r3, #0
 801db7e:	d001      	beq.n	801db84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801db80:	f7e3 f808 	bl	8000b94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801db84:	bf00      	nop
 801db86:	bd80      	pop	{r7, pc}
 801db88:	200000dc 	.word	0x200000dc
 801db8c:	20004940 	.word	0x20004940
 801db90:	2000002c 	.word	0x2000002c
 801db94:	200000c8 	.word	0x200000c8

0801db98 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801db98:	b580      	push	{r7, lr}
 801db9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801db9c:	2200      	movs	r2, #0
 801db9e:	4905      	ldr	r1, [pc, #20]	@ (801dbb4 <CDC_Init_FS+0x1c>)
 801dba0:	4805      	ldr	r0, [pc, #20]	@ (801dbb8 <CDC_Init_FS+0x20>)
 801dba2:	f7eb fac1 	bl	8009128 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801dba6:	4905      	ldr	r1, [pc, #20]	@ (801dbbc <CDC_Init_FS+0x24>)
 801dba8:	4803      	ldr	r0, [pc, #12]	@ (801dbb8 <CDC_Init_FS+0x20>)
 801dbaa:	f7eb fadf 	bl	800916c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801dbae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801dbb0:	4618      	mov	r0, r3
 801dbb2:	bd80      	pop	{r7, pc}
 801dbb4:	2000541c 	.word	0x2000541c
 801dbb8:	20004940 	.word	0x20004940
 801dbbc:	20004c1c 	.word	0x20004c1c

0801dbc0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801dbc0:	b480      	push	{r7}
 801dbc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801dbc4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801dbc6:	4618      	mov	r0, r3
 801dbc8:	46bd      	mov	sp, r7
 801dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dbce:	4770      	bx	lr

0801dbd0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801dbd0:	b480      	push	{r7}
 801dbd2:	b083      	sub	sp, #12
 801dbd4:	af00      	add	r7, sp, #0
 801dbd6:	4603      	mov	r3, r0
 801dbd8:	6039      	str	r1, [r7, #0]
 801dbda:	71fb      	strb	r3, [r7, #7]
 801dbdc:	4613      	mov	r3, r2
 801dbde:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801dbe0:	79fb      	ldrb	r3, [r7, #7]
 801dbe2:	2b23      	cmp	r3, #35	@ 0x23
 801dbe4:	d84a      	bhi.n	801dc7c <CDC_Control_FS+0xac>
 801dbe6:	a201      	add	r2, pc, #4	@ (adr r2, 801dbec <CDC_Control_FS+0x1c>)
 801dbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dbec:	0801dc7d 	.word	0x0801dc7d
 801dbf0:	0801dc7d 	.word	0x0801dc7d
 801dbf4:	0801dc7d 	.word	0x0801dc7d
 801dbf8:	0801dc7d 	.word	0x0801dc7d
 801dbfc:	0801dc7d 	.word	0x0801dc7d
 801dc00:	0801dc7d 	.word	0x0801dc7d
 801dc04:	0801dc7d 	.word	0x0801dc7d
 801dc08:	0801dc7d 	.word	0x0801dc7d
 801dc0c:	0801dc7d 	.word	0x0801dc7d
 801dc10:	0801dc7d 	.word	0x0801dc7d
 801dc14:	0801dc7d 	.word	0x0801dc7d
 801dc18:	0801dc7d 	.word	0x0801dc7d
 801dc1c:	0801dc7d 	.word	0x0801dc7d
 801dc20:	0801dc7d 	.word	0x0801dc7d
 801dc24:	0801dc7d 	.word	0x0801dc7d
 801dc28:	0801dc7d 	.word	0x0801dc7d
 801dc2c:	0801dc7d 	.word	0x0801dc7d
 801dc30:	0801dc7d 	.word	0x0801dc7d
 801dc34:	0801dc7d 	.word	0x0801dc7d
 801dc38:	0801dc7d 	.word	0x0801dc7d
 801dc3c:	0801dc7d 	.word	0x0801dc7d
 801dc40:	0801dc7d 	.word	0x0801dc7d
 801dc44:	0801dc7d 	.word	0x0801dc7d
 801dc48:	0801dc7d 	.word	0x0801dc7d
 801dc4c:	0801dc7d 	.word	0x0801dc7d
 801dc50:	0801dc7d 	.word	0x0801dc7d
 801dc54:	0801dc7d 	.word	0x0801dc7d
 801dc58:	0801dc7d 	.word	0x0801dc7d
 801dc5c:	0801dc7d 	.word	0x0801dc7d
 801dc60:	0801dc7d 	.word	0x0801dc7d
 801dc64:	0801dc7d 	.word	0x0801dc7d
 801dc68:	0801dc7d 	.word	0x0801dc7d
 801dc6c:	0801dc7d 	.word	0x0801dc7d
 801dc70:	0801dc7d 	.word	0x0801dc7d
 801dc74:	0801dc7d 	.word	0x0801dc7d
 801dc78:	0801dc7d 	.word	0x0801dc7d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801dc7c:	bf00      	nop
  }

  return (USBD_OK);
 801dc7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801dc80:	4618      	mov	r0, r3
 801dc82:	370c      	adds	r7, #12
 801dc84:	46bd      	mov	sp, r7
 801dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc8a:	4770      	bx	lr

0801dc8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801dc8c:	b580      	push	{r7, lr}
 801dc8e:	b082      	sub	sp, #8
 801dc90:	af00      	add	r7, sp, #0
 801dc92:	6078      	str	r0, [r7, #4]
 801dc94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801dc96:	6879      	ldr	r1, [r7, #4]
 801dc98:	4805      	ldr	r0, [pc, #20]	@ (801dcb0 <CDC_Receive_FS+0x24>)
 801dc9a:	f7eb fa67 	bl	800916c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801dc9e:	4804      	ldr	r0, [pc, #16]	@ (801dcb0 <CDC_Receive_FS+0x24>)
 801dca0:	f7eb fac2 	bl	8009228 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801dca4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801dca6:	4618      	mov	r0, r3
 801dca8:	3708      	adds	r7, #8
 801dcaa:	46bd      	mov	sp, r7
 801dcac:	bd80      	pop	{r7, pc}
 801dcae:	bf00      	nop
 801dcb0:	20004940 	.word	0x20004940

0801dcb4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801dcb4:	b580      	push	{r7, lr}
 801dcb6:	b084      	sub	sp, #16
 801dcb8:	af00      	add	r7, sp, #0
 801dcba:	6078      	str	r0, [r7, #4]
 801dcbc:	460b      	mov	r3, r1
 801dcbe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801dcc0:	2300      	movs	r3, #0
 801dcc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801dcc4:	4b0d      	ldr	r3, [pc, #52]	@ (801dcfc <CDC_Transmit_FS+0x48>)
 801dcc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801dcca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801dccc:	68bb      	ldr	r3, [r7, #8]
 801dcce:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801dcd2:	2b00      	cmp	r3, #0
 801dcd4:	d001      	beq.n	801dcda <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801dcd6:	2301      	movs	r3, #1
 801dcd8:	e00b      	b.n	801dcf2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801dcda:	887b      	ldrh	r3, [r7, #2]
 801dcdc:	461a      	mov	r2, r3
 801dcde:	6879      	ldr	r1, [r7, #4]
 801dce0:	4806      	ldr	r0, [pc, #24]	@ (801dcfc <CDC_Transmit_FS+0x48>)
 801dce2:	f7eb fa21 	bl	8009128 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801dce6:	4805      	ldr	r0, [pc, #20]	@ (801dcfc <CDC_Transmit_FS+0x48>)
 801dce8:	f7eb fa5e 	bl	80091a8 <USBD_CDC_TransmitPacket>
 801dcec:	4603      	mov	r3, r0
 801dcee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801dcf0:	7bfb      	ldrb	r3, [r7, #15]
}
 801dcf2:	4618      	mov	r0, r3
 801dcf4:	3710      	adds	r7, #16
 801dcf6:	46bd      	mov	sp, r7
 801dcf8:	bd80      	pop	{r7, pc}
 801dcfa:	bf00      	nop
 801dcfc:	20004940 	.word	0x20004940

0801dd00 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801dd00:	b480      	push	{r7}
 801dd02:	b087      	sub	sp, #28
 801dd04:	af00      	add	r7, sp, #0
 801dd06:	60f8      	str	r0, [r7, #12]
 801dd08:	60b9      	str	r1, [r7, #8]
 801dd0a:	4613      	mov	r3, r2
 801dd0c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801dd0e:	2300      	movs	r3, #0
 801dd10:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801dd12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801dd16:	4618      	mov	r0, r3
 801dd18:	371c      	adds	r7, #28
 801dd1a:	46bd      	mov	sp, r7
 801dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd20:	4770      	bx	lr
	...

0801dd24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801dd24:	b480      	push	{r7}
 801dd26:	b083      	sub	sp, #12
 801dd28:	af00      	add	r7, sp, #0
 801dd2a:	4603      	mov	r3, r0
 801dd2c:	6039      	str	r1, [r7, #0]
 801dd2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801dd30:	683b      	ldr	r3, [r7, #0]
 801dd32:	2212      	movs	r2, #18
 801dd34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801dd36:	4b03      	ldr	r3, [pc, #12]	@ (801dd44 <USBD_FS_DeviceDescriptor+0x20>)
}
 801dd38:	4618      	mov	r0, r3
 801dd3a:	370c      	adds	r7, #12
 801dd3c:	46bd      	mov	sp, r7
 801dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd42:	4770      	bx	lr
 801dd44:	200000fc 	.word	0x200000fc

0801dd48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801dd48:	b480      	push	{r7}
 801dd4a:	b083      	sub	sp, #12
 801dd4c:	af00      	add	r7, sp, #0
 801dd4e:	4603      	mov	r3, r0
 801dd50:	6039      	str	r1, [r7, #0]
 801dd52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801dd54:	683b      	ldr	r3, [r7, #0]
 801dd56:	2204      	movs	r2, #4
 801dd58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801dd5a:	4b03      	ldr	r3, [pc, #12]	@ (801dd68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801dd5c:	4618      	mov	r0, r3
 801dd5e:	370c      	adds	r7, #12
 801dd60:	46bd      	mov	sp, r7
 801dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd66:	4770      	bx	lr
 801dd68:	2000011c 	.word	0x2000011c

0801dd6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801dd6c:	b580      	push	{r7, lr}
 801dd6e:	b082      	sub	sp, #8
 801dd70:	af00      	add	r7, sp, #0
 801dd72:	4603      	mov	r3, r0
 801dd74:	6039      	str	r1, [r7, #0]
 801dd76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801dd78:	79fb      	ldrb	r3, [r7, #7]
 801dd7a:	2b00      	cmp	r3, #0
 801dd7c:	d105      	bne.n	801dd8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801dd7e:	683a      	ldr	r2, [r7, #0]
 801dd80:	4907      	ldr	r1, [pc, #28]	@ (801dda0 <USBD_FS_ProductStrDescriptor+0x34>)
 801dd82:	4808      	ldr	r0, [pc, #32]	@ (801dda4 <USBD_FS_ProductStrDescriptor+0x38>)
 801dd84:	f7ec fcdc 	bl	800a740 <USBD_GetString>
 801dd88:	e004      	b.n	801dd94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801dd8a:	683a      	ldr	r2, [r7, #0]
 801dd8c:	4904      	ldr	r1, [pc, #16]	@ (801dda0 <USBD_FS_ProductStrDescriptor+0x34>)
 801dd8e:	4805      	ldr	r0, [pc, #20]	@ (801dda4 <USBD_FS_ProductStrDescriptor+0x38>)
 801dd90:	f7ec fcd6 	bl	800a740 <USBD_GetString>
  }
  return USBD_StrDesc;
 801dd94:	4b02      	ldr	r3, [pc, #8]	@ (801dda0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801dd96:	4618      	mov	r0, r3
 801dd98:	3708      	adds	r7, #8
 801dd9a:	46bd      	mov	sp, r7
 801dd9c:	bd80      	pop	{r7, pc}
 801dd9e:	bf00      	nop
 801dda0:	20005c1c 	.word	0x20005c1c
 801dda4:	08023570 	.word	0x08023570

0801dda8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801dda8:	b580      	push	{r7, lr}
 801ddaa:	b082      	sub	sp, #8
 801ddac:	af00      	add	r7, sp, #0
 801ddae:	4603      	mov	r3, r0
 801ddb0:	6039      	str	r1, [r7, #0]
 801ddb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801ddb4:	683a      	ldr	r2, [r7, #0]
 801ddb6:	4904      	ldr	r1, [pc, #16]	@ (801ddc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801ddb8:	4804      	ldr	r0, [pc, #16]	@ (801ddcc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801ddba:	f7ec fcc1 	bl	800a740 <USBD_GetString>
  return USBD_StrDesc;
 801ddbe:	4b02      	ldr	r3, [pc, #8]	@ (801ddc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801ddc0:	4618      	mov	r0, r3
 801ddc2:	3708      	adds	r7, #8
 801ddc4:	46bd      	mov	sp, r7
 801ddc6:	bd80      	pop	{r7, pc}
 801ddc8:	20005c1c 	.word	0x20005c1c
 801ddcc:	08023588 	.word	0x08023588

0801ddd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ddd0:	b580      	push	{r7, lr}
 801ddd2:	b082      	sub	sp, #8
 801ddd4:	af00      	add	r7, sp, #0
 801ddd6:	4603      	mov	r3, r0
 801ddd8:	6039      	str	r1, [r7, #0]
 801ddda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801dddc:	683b      	ldr	r3, [r7, #0]
 801ddde:	221a      	movs	r2, #26
 801dde0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801dde2:	f000 f855 	bl	801de90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801dde6:	4b02      	ldr	r3, [pc, #8]	@ (801ddf0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801dde8:	4618      	mov	r0, r3
 801ddea:	3708      	adds	r7, #8
 801ddec:	46bd      	mov	sp, r7
 801ddee:	bd80      	pop	{r7, pc}
 801ddf0:	20000120 	.word	0x20000120

0801ddf4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ddf4:	b580      	push	{r7, lr}
 801ddf6:	b082      	sub	sp, #8
 801ddf8:	af00      	add	r7, sp, #0
 801ddfa:	4603      	mov	r3, r0
 801ddfc:	6039      	str	r1, [r7, #0]
 801ddfe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801de00:	79fb      	ldrb	r3, [r7, #7]
 801de02:	2b00      	cmp	r3, #0
 801de04:	d105      	bne.n	801de12 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801de06:	683a      	ldr	r2, [r7, #0]
 801de08:	4907      	ldr	r1, [pc, #28]	@ (801de28 <USBD_FS_ConfigStrDescriptor+0x34>)
 801de0a:	4808      	ldr	r0, [pc, #32]	@ (801de2c <USBD_FS_ConfigStrDescriptor+0x38>)
 801de0c:	f7ec fc98 	bl	800a740 <USBD_GetString>
 801de10:	e004      	b.n	801de1c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801de12:	683a      	ldr	r2, [r7, #0]
 801de14:	4904      	ldr	r1, [pc, #16]	@ (801de28 <USBD_FS_ConfigStrDescriptor+0x34>)
 801de16:	4805      	ldr	r0, [pc, #20]	@ (801de2c <USBD_FS_ConfigStrDescriptor+0x38>)
 801de18:	f7ec fc92 	bl	800a740 <USBD_GetString>
  }
  return USBD_StrDesc;
 801de1c:	4b02      	ldr	r3, [pc, #8]	@ (801de28 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801de1e:	4618      	mov	r0, r3
 801de20:	3708      	adds	r7, #8
 801de22:	46bd      	mov	sp, r7
 801de24:	bd80      	pop	{r7, pc}
 801de26:	bf00      	nop
 801de28:	20005c1c 	.word	0x20005c1c
 801de2c:	0802359c 	.word	0x0802359c

0801de30 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801de30:	b580      	push	{r7, lr}
 801de32:	b082      	sub	sp, #8
 801de34:	af00      	add	r7, sp, #0
 801de36:	4603      	mov	r3, r0
 801de38:	6039      	str	r1, [r7, #0]
 801de3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801de3c:	79fb      	ldrb	r3, [r7, #7]
 801de3e:	2b00      	cmp	r3, #0
 801de40:	d105      	bne.n	801de4e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801de42:	683a      	ldr	r2, [r7, #0]
 801de44:	4907      	ldr	r1, [pc, #28]	@ (801de64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801de46:	4808      	ldr	r0, [pc, #32]	@ (801de68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801de48:	f7ec fc7a 	bl	800a740 <USBD_GetString>
 801de4c:	e004      	b.n	801de58 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801de4e:	683a      	ldr	r2, [r7, #0]
 801de50:	4904      	ldr	r1, [pc, #16]	@ (801de64 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801de52:	4805      	ldr	r0, [pc, #20]	@ (801de68 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801de54:	f7ec fc74 	bl	800a740 <USBD_GetString>
  }
  return USBD_StrDesc;
 801de58:	4b02      	ldr	r3, [pc, #8]	@ (801de64 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801de5a:	4618      	mov	r0, r3
 801de5c:	3708      	adds	r7, #8
 801de5e:	46bd      	mov	sp, r7
 801de60:	bd80      	pop	{r7, pc}
 801de62:	bf00      	nop
 801de64:	20005c1c 	.word	0x20005c1c
 801de68:	080235a8 	.word	0x080235a8

0801de6c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801de6c:	b480      	push	{r7}
 801de6e:	b083      	sub	sp, #12
 801de70:	af00      	add	r7, sp, #0
 801de72:	4603      	mov	r3, r0
 801de74:	6039      	str	r1, [r7, #0]
 801de76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801de78:	683b      	ldr	r3, [r7, #0]
 801de7a:	220c      	movs	r2, #12
 801de7c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801de7e:	4b03      	ldr	r3, [pc, #12]	@ (801de8c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801de80:	4618      	mov	r0, r3
 801de82:	370c      	adds	r7, #12
 801de84:	46bd      	mov	sp, r7
 801de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de8a:	4770      	bx	lr
 801de8c:	20000110 	.word	0x20000110

0801de90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801de90:	b580      	push	{r7, lr}
 801de92:	b084      	sub	sp, #16
 801de94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801de96:	4b0f      	ldr	r3, [pc, #60]	@ (801ded4 <Get_SerialNum+0x44>)
 801de98:	681b      	ldr	r3, [r3, #0]
 801de9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801de9c:	4b0e      	ldr	r3, [pc, #56]	@ (801ded8 <Get_SerialNum+0x48>)
 801de9e:	681b      	ldr	r3, [r3, #0]
 801dea0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801dea2:	4b0e      	ldr	r3, [pc, #56]	@ (801dedc <Get_SerialNum+0x4c>)
 801dea4:	681b      	ldr	r3, [r3, #0]
 801dea6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801dea8:	68fa      	ldr	r2, [r7, #12]
 801deaa:	687b      	ldr	r3, [r7, #4]
 801deac:	4413      	add	r3, r2
 801deae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801deb0:	68fb      	ldr	r3, [r7, #12]
 801deb2:	2b00      	cmp	r3, #0
 801deb4:	d009      	beq.n	801deca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801deb6:	2208      	movs	r2, #8
 801deb8:	4909      	ldr	r1, [pc, #36]	@ (801dee0 <Get_SerialNum+0x50>)
 801deba:	68f8      	ldr	r0, [r7, #12]
 801debc:	f000 f814 	bl	801dee8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801dec0:	2204      	movs	r2, #4
 801dec2:	4908      	ldr	r1, [pc, #32]	@ (801dee4 <Get_SerialNum+0x54>)
 801dec4:	68b8      	ldr	r0, [r7, #8]
 801dec6:	f000 f80f 	bl	801dee8 <IntToUnicode>
  }
}
 801deca:	bf00      	nop
 801decc:	3710      	adds	r7, #16
 801dece:	46bd      	mov	sp, r7
 801ded0:	bd80      	pop	{r7, pc}
 801ded2:	bf00      	nop
 801ded4:	1ff0f420 	.word	0x1ff0f420
 801ded8:	1ff0f424 	.word	0x1ff0f424
 801dedc:	1ff0f428 	.word	0x1ff0f428
 801dee0:	20000122 	.word	0x20000122
 801dee4:	20000132 	.word	0x20000132

0801dee8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801dee8:	b480      	push	{r7}
 801deea:	b087      	sub	sp, #28
 801deec:	af00      	add	r7, sp, #0
 801deee:	60f8      	str	r0, [r7, #12]
 801def0:	60b9      	str	r1, [r7, #8]
 801def2:	4613      	mov	r3, r2
 801def4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801def6:	2300      	movs	r3, #0
 801def8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801defa:	2300      	movs	r3, #0
 801defc:	75fb      	strb	r3, [r7, #23]
 801defe:	e027      	b.n	801df50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801df00:	68fb      	ldr	r3, [r7, #12]
 801df02:	0f1b      	lsrs	r3, r3, #28
 801df04:	2b09      	cmp	r3, #9
 801df06:	d80b      	bhi.n	801df20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801df08:	68fb      	ldr	r3, [r7, #12]
 801df0a:	0f1b      	lsrs	r3, r3, #28
 801df0c:	b2da      	uxtb	r2, r3
 801df0e:	7dfb      	ldrb	r3, [r7, #23]
 801df10:	005b      	lsls	r3, r3, #1
 801df12:	4619      	mov	r1, r3
 801df14:	68bb      	ldr	r3, [r7, #8]
 801df16:	440b      	add	r3, r1
 801df18:	3230      	adds	r2, #48	@ 0x30
 801df1a:	b2d2      	uxtb	r2, r2
 801df1c:	701a      	strb	r2, [r3, #0]
 801df1e:	e00a      	b.n	801df36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801df20:	68fb      	ldr	r3, [r7, #12]
 801df22:	0f1b      	lsrs	r3, r3, #28
 801df24:	b2da      	uxtb	r2, r3
 801df26:	7dfb      	ldrb	r3, [r7, #23]
 801df28:	005b      	lsls	r3, r3, #1
 801df2a:	4619      	mov	r1, r3
 801df2c:	68bb      	ldr	r3, [r7, #8]
 801df2e:	440b      	add	r3, r1
 801df30:	3237      	adds	r2, #55	@ 0x37
 801df32:	b2d2      	uxtb	r2, r2
 801df34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801df36:	68fb      	ldr	r3, [r7, #12]
 801df38:	011b      	lsls	r3, r3, #4
 801df3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801df3c:	7dfb      	ldrb	r3, [r7, #23]
 801df3e:	005b      	lsls	r3, r3, #1
 801df40:	3301      	adds	r3, #1
 801df42:	68ba      	ldr	r2, [r7, #8]
 801df44:	4413      	add	r3, r2
 801df46:	2200      	movs	r2, #0
 801df48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801df4a:	7dfb      	ldrb	r3, [r7, #23]
 801df4c:	3301      	adds	r3, #1
 801df4e:	75fb      	strb	r3, [r7, #23]
 801df50:	7dfa      	ldrb	r2, [r7, #23]
 801df52:	79fb      	ldrb	r3, [r7, #7]
 801df54:	429a      	cmp	r2, r3
 801df56:	d3d3      	bcc.n	801df00 <IntToUnicode+0x18>
  }
}
 801df58:	bf00      	nop
 801df5a:	bf00      	nop
 801df5c:	371c      	adds	r7, #28
 801df5e:	46bd      	mov	sp, r7
 801df60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df64:	4770      	bx	lr
	...

0801df68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801df68:	b580      	push	{r7, lr}
 801df6a:	b0ae      	sub	sp, #184	@ 0xb8
 801df6c:	af00      	add	r7, sp, #0
 801df6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801df70:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801df74:	2200      	movs	r2, #0
 801df76:	601a      	str	r2, [r3, #0]
 801df78:	605a      	str	r2, [r3, #4]
 801df7a:	609a      	str	r2, [r3, #8]
 801df7c:	60da      	str	r2, [r3, #12]
 801df7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801df80:	f107 0314 	add.w	r3, r7, #20
 801df84:	2290      	movs	r2, #144	@ 0x90
 801df86:	2100      	movs	r1, #0
 801df88:	4618      	mov	r0, r3
 801df8a:	f000 fef9 	bl	801ed80 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801df8e:	687b      	ldr	r3, [r7, #4]
 801df90:	681b      	ldr	r3, [r3, #0]
 801df92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801df96:	d161      	bne.n	801e05c <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 801df98:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801df9c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 801df9e:	2300      	movs	r3, #0
 801dfa0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801dfa4:	f107 0314 	add.w	r3, r7, #20
 801dfa8:	4618      	mov	r0, r3
 801dfaa:	f7e6 fed9 	bl	8004d60 <HAL_RCCEx_PeriphCLKConfig>
 801dfae:	4603      	mov	r3, r0
 801dfb0:	2b00      	cmp	r3, #0
 801dfb2:	d001      	beq.n	801dfb8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 801dfb4:	f7e2 fdee 	bl	8000b94 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801dfb8:	4b2a      	ldr	r3, [pc, #168]	@ (801e064 <HAL_PCD_MspInit+0xfc>)
 801dfba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dfbc:	4a29      	ldr	r2, [pc, #164]	@ (801e064 <HAL_PCD_MspInit+0xfc>)
 801dfbe:	f043 0301 	orr.w	r3, r3, #1
 801dfc2:	6313      	str	r3, [r2, #48]	@ 0x30
 801dfc4:	4b27      	ldr	r3, [pc, #156]	@ (801e064 <HAL_PCD_MspInit+0xfc>)
 801dfc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dfc8:	f003 0301 	and.w	r3, r3, #1
 801dfcc:	613b      	str	r3, [r7, #16]
 801dfce:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 801dfd0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 801dfd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801dfd8:	2302      	movs	r3, #2
 801dfda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dfde:	2300      	movs	r3, #0
 801dfe0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801dfe4:	2303      	movs	r3, #3
 801dfe6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801dfea:	230a      	movs	r3, #10
 801dfec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801dff0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801dff4:	4619      	mov	r1, r3
 801dff6:	481c      	ldr	r0, [pc, #112]	@ (801e068 <HAL_PCD_MspInit+0x100>)
 801dff8:	f7e4 fcfc 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 801dffc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801e000:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801e004:	2300      	movs	r3, #0
 801e006:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e00a:	2300      	movs	r3, #0
 801e00c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 801e010:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 801e014:	4619      	mov	r1, r3
 801e016:	4814      	ldr	r0, [pc, #80]	@ (801e068 <HAL_PCD_MspInit+0x100>)
 801e018:	f7e4 fcec 	bl	80029f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801e01c:	4b11      	ldr	r3, [pc, #68]	@ (801e064 <HAL_PCD_MspInit+0xfc>)
 801e01e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e020:	4a10      	ldr	r2, [pc, #64]	@ (801e064 <HAL_PCD_MspInit+0xfc>)
 801e022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e026:	6353      	str	r3, [r2, #52]	@ 0x34
 801e028:	4b0e      	ldr	r3, [pc, #56]	@ (801e064 <HAL_PCD_MspInit+0xfc>)
 801e02a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e02c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801e030:	60fb      	str	r3, [r7, #12]
 801e032:	68fb      	ldr	r3, [r7, #12]
 801e034:	4b0b      	ldr	r3, [pc, #44]	@ (801e064 <HAL_PCD_MspInit+0xfc>)
 801e036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e038:	4a0a      	ldr	r2, [pc, #40]	@ (801e064 <HAL_PCD_MspInit+0xfc>)
 801e03a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801e03e:	6453      	str	r3, [r2, #68]	@ 0x44
 801e040:	4b08      	ldr	r3, [pc, #32]	@ (801e064 <HAL_PCD_MspInit+0xfc>)
 801e042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e044:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801e048:	60bb      	str	r3, [r7, #8]
 801e04a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801e04c:	2200      	movs	r2, #0
 801e04e:	2105      	movs	r1, #5
 801e050:	2043      	movs	r0, #67	@ 0x43
 801e052:	f7e3 fa2f 	bl	80014b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801e056:	2043      	movs	r0, #67	@ 0x43
 801e058:	f7e3 fa48 	bl	80014ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801e05c:	bf00      	nop
 801e05e:	37b8      	adds	r7, #184	@ 0xb8
 801e060:	46bd      	mov	sp, r7
 801e062:	bd80      	pop	{r7, pc}
 801e064:	40023800 	.word	0x40023800
 801e068:	40020000 	.word	0x40020000

0801e06c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e06c:	b580      	push	{r7, lr}
 801e06e:	b082      	sub	sp, #8
 801e070:	af00      	add	r7, sp, #0
 801e072:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801e074:	687b      	ldr	r3, [r7, #4]
 801e076:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 801e07a:	687b      	ldr	r3, [r7, #4]
 801e07c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801e080:	4619      	mov	r1, r3
 801e082:	4610      	mov	r0, r2
 801e084:	f7eb f9b9 	bl	80093fa <USBD_LL_SetupStage>
}
 801e088:	bf00      	nop
 801e08a:	3708      	adds	r7, #8
 801e08c:	46bd      	mov	sp, r7
 801e08e:	bd80      	pop	{r7, pc}

0801e090 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e090:	b580      	push	{r7, lr}
 801e092:	b082      	sub	sp, #8
 801e094:	af00      	add	r7, sp, #0
 801e096:	6078      	str	r0, [r7, #4]
 801e098:	460b      	mov	r3, r1
 801e09a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801e09c:	687b      	ldr	r3, [r7, #4]
 801e09e:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 801e0a2:	78fa      	ldrb	r2, [r7, #3]
 801e0a4:	6879      	ldr	r1, [r7, #4]
 801e0a6:	4613      	mov	r3, r2
 801e0a8:	00db      	lsls	r3, r3, #3
 801e0aa:	4413      	add	r3, r2
 801e0ac:	009b      	lsls	r3, r3, #2
 801e0ae:	440b      	add	r3, r1
 801e0b0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801e0b4:	681a      	ldr	r2, [r3, #0]
 801e0b6:	78fb      	ldrb	r3, [r7, #3]
 801e0b8:	4619      	mov	r1, r3
 801e0ba:	f7eb f9f3 	bl	80094a4 <USBD_LL_DataOutStage>
}
 801e0be:	bf00      	nop
 801e0c0:	3708      	adds	r7, #8
 801e0c2:	46bd      	mov	sp, r7
 801e0c4:	bd80      	pop	{r7, pc}

0801e0c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e0c6:	b580      	push	{r7, lr}
 801e0c8:	b082      	sub	sp, #8
 801e0ca:	af00      	add	r7, sp, #0
 801e0cc:	6078      	str	r0, [r7, #4]
 801e0ce:	460b      	mov	r3, r1
 801e0d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801e0d2:	687b      	ldr	r3, [r7, #4]
 801e0d4:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 801e0d8:	78fa      	ldrb	r2, [r7, #3]
 801e0da:	6879      	ldr	r1, [r7, #4]
 801e0dc:	4613      	mov	r3, r2
 801e0de:	00db      	lsls	r3, r3, #3
 801e0e0:	4413      	add	r3, r2
 801e0e2:	009b      	lsls	r3, r3, #2
 801e0e4:	440b      	add	r3, r1
 801e0e6:	3320      	adds	r3, #32
 801e0e8:	681a      	ldr	r2, [r3, #0]
 801e0ea:	78fb      	ldrb	r3, [r7, #3]
 801e0ec:	4619      	mov	r1, r3
 801e0ee:	f7eb fa95 	bl	800961c <USBD_LL_DataInStage>
}
 801e0f2:	bf00      	nop
 801e0f4:	3708      	adds	r7, #8
 801e0f6:	46bd      	mov	sp, r7
 801e0f8:	bd80      	pop	{r7, pc}

0801e0fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e0fa:	b580      	push	{r7, lr}
 801e0fc:	b082      	sub	sp, #8
 801e0fe:	af00      	add	r7, sp, #0
 801e100:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801e102:	687b      	ldr	r3, [r7, #4]
 801e104:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801e108:	4618      	mov	r0, r3
 801e10a:	f7eb fbd9 	bl	80098c0 <USBD_LL_SOF>
}
 801e10e:	bf00      	nop
 801e110:	3708      	adds	r7, #8
 801e112:	46bd      	mov	sp, r7
 801e114:	bd80      	pop	{r7, pc}

0801e116 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e116:	b580      	push	{r7, lr}
 801e118:	b084      	sub	sp, #16
 801e11a:	af00      	add	r7, sp, #0
 801e11c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801e11e:	2301      	movs	r3, #1
 801e120:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801e122:	687b      	ldr	r3, [r7, #4]
 801e124:	79db      	ldrb	r3, [r3, #7]
 801e126:	2b00      	cmp	r3, #0
 801e128:	d102      	bne.n	801e130 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801e12a:	2300      	movs	r3, #0
 801e12c:	73fb      	strb	r3, [r7, #15]
 801e12e:	e008      	b.n	801e142 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801e130:	687b      	ldr	r3, [r7, #4]
 801e132:	79db      	ldrb	r3, [r3, #7]
 801e134:	2b02      	cmp	r3, #2
 801e136:	d102      	bne.n	801e13e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801e138:	2301      	movs	r3, #1
 801e13a:	73fb      	strb	r3, [r7, #15]
 801e13c:	e001      	b.n	801e142 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801e13e:	f7e2 fd29 	bl	8000b94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801e142:	687b      	ldr	r3, [r7, #4]
 801e144:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801e148:	7bfa      	ldrb	r2, [r7, #15]
 801e14a:	4611      	mov	r1, r2
 801e14c:	4618      	mov	r0, r3
 801e14e:	f7eb fb73 	bl	8009838 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801e152:	687b      	ldr	r3, [r7, #4]
 801e154:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801e158:	4618      	mov	r0, r3
 801e15a:	f7eb fb1a 	bl	8009792 <USBD_LL_Reset>
}
 801e15e:	bf00      	nop
 801e160:	3710      	adds	r7, #16
 801e162:	46bd      	mov	sp, r7
 801e164:	bd80      	pop	{r7, pc}
	...

0801e168 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e168:	b580      	push	{r7, lr}
 801e16a:	b082      	sub	sp, #8
 801e16c:	af00      	add	r7, sp, #0
 801e16e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801e170:	687b      	ldr	r3, [r7, #4]
 801e172:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801e176:	4618      	mov	r0, r3
 801e178:	f7eb fb6e 	bl	8009858 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	681b      	ldr	r3, [r3, #0]
 801e180:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801e184:	681b      	ldr	r3, [r3, #0]
 801e186:	687a      	ldr	r2, [r7, #4]
 801e188:	6812      	ldr	r2, [r2, #0]
 801e18a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801e18e:	f043 0301 	orr.w	r3, r3, #1
 801e192:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	7adb      	ldrb	r3, [r3, #11]
 801e198:	2b00      	cmp	r3, #0
 801e19a:	d005      	beq.n	801e1a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801e19c:	4b04      	ldr	r3, [pc, #16]	@ (801e1b0 <HAL_PCD_SuspendCallback+0x48>)
 801e19e:	691b      	ldr	r3, [r3, #16]
 801e1a0:	4a03      	ldr	r2, [pc, #12]	@ (801e1b0 <HAL_PCD_SuspendCallback+0x48>)
 801e1a2:	f043 0306 	orr.w	r3, r3, #6
 801e1a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801e1a8:	bf00      	nop
 801e1aa:	3708      	adds	r7, #8
 801e1ac:	46bd      	mov	sp, r7
 801e1ae:	bd80      	pop	{r7, pc}
 801e1b0:	e000ed00 	.word	0xe000ed00

0801e1b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e1b4:	b580      	push	{r7, lr}
 801e1b6:	b082      	sub	sp, #8
 801e1b8:	af00      	add	r7, sp, #0
 801e1ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801e1bc:	687b      	ldr	r3, [r7, #4]
 801e1be:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801e1c2:	4618      	mov	r0, r3
 801e1c4:	f7eb fb64 	bl	8009890 <USBD_LL_Resume>
}
 801e1c8:	bf00      	nop
 801e1ca:	3708      	adds	r7, #8
 801e1cc:	46bd      	mov	sp, r7
 801e1ce:	bd80      	pop	{r7, pc}

0801e1d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e1d0:	b580      	push	{r7, lr}
 801e1d2:	b082      	sub	sp, #8
 801e1d4:	af00      	add	r7, sp, #0
 801e1d6:	6078      	str	r0, [r7, #4]
 801e1d8:	460b      	mov	r3, r1
 801e1da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801e1dc:	687b      	ldr	r3, [r7, #4]
 801e1de:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801e1e2:	78fa      	ldrb	r2, [r7, #3]
 801e1e4:	4611      	mov	r1, r2
 801e1e6:	4618      	mov	r0, r3
 801e1e8:	f7eb fbbc 	bl	8009964 <USBD_LL_IsoOUTIncomplete>
}
 801e1ec:	bf00      	nop
 801e1ee:	3708      	adds	r7, #8
 801e1f0:	46bd      	mov	sp, r7
 801e1f2:	bd80      	pop	{r7, pc}

0801e1f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e1f4:	b580      	push	{r7, lr}
 801e1f6:	b082      	sub	sp, #8
 801e1f8:	af00      	add	r7, sp, #0
 801e1fa:	6078      	str	r0, [r7, #4]
 801e1fc:	460b      	mov	r3, r1
 801e1fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801e200:	687b      	ldr	r3, [r7, #4]
 801e202:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801e206:	78fa      	ldrb	r2, [r7, #3]
 801e208:	4611      	mov	r1, r2
 801e20a:	4618      	mov	r0, r3
 801e20c:	f7eb fb78 	bl	8009900 <USBD_LL_IsoINIncomplete>
}
 801e210:	bf00      	nop
 801e212:	3708      	adds	r7, #8
 801e214:	46bd      	mov	sp, r7
 801e216:	bd80      	pop	{r7, pc}

0801e218 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e218:	b580      	push	{r7, lr}
 801e21a:	b082      	sub	sp, #8
 801e21c:	af00      	add	r7, sp, #0
 801e21e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801e220:	687b      	ldr	r3, [r7, #4]
 801e222:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801e226:	4618      	mov	r0, r3
 801e228:	f7eb fbce 	bl	80099c8 <USBD_LL_DevConnected>
}
 801e22c:	bf00      	nop
 801e22e:	3708      	adds	r7, #8
 801e230:	46bd      	mov	sp, r7
 801e232:	bd80      	pop	{r7, pc}

0801e234 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e234:	b580      	push	{r7, lr}
 801e236:	b082      	sub	sp, #8
 801e238:	af00      	add	r7, sp, #0
 801e23a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801e23c:	687b      	ldr	r3, [r7, #4]
 801e23e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801e242:	4618      	mov	r0, r3
 801e244:	f7eb fbcb 	bl	80099de <USBD_LL_DevDisconnected>
}
 801e248:	bf00      	nop
 801e24a:	3708      	adds	r7, #8
 801e24c:	46bd      	mov	sp, r7
 801e24e:	bd80      	pop	{r7, pc}

0801e250 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801e250:	b580      	push	{r7, lr}
 801e252:	b082      	sub	sp, #8
 801e254:	af00      	add	r7, sp, #0
 801e256:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801e258:	687b      	ldr	r3, [r7, #4]
 801e25a:	781b      	ldrb	r3, [r3, #0]
 801e25c:	2b00      	cmp	r3, #0
 801e25e:	d13c      	bne.n	801e2da <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801e260:	4a20      	ldr	r2, [pc, #128]	@ (801e2e4 <USBD_LL_Init+0x94>)
 801e262:	687b      	ldr	r3, [r7, #4]
 801e264:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_FS;
 801e268:	687b      	ldr	r3, [r7, #4]
 801e26a:	4a1e      	ldr	r2, [pc, #120]	@ (801e2e4 <USBD_LL_Init+0x94>)
 801e26c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801e270:	4b1c      	ldr	r3, [pc, #112]	@ (801e2e4 <USBD_LL_Init+0x94>)
 801e272:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 801e276:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801e278:	4b1a      	ldr	r3, [pc, #104]	@ (801e2e4 <USBD_LL_Init+0x94>)
 801e27a:	2206      	movs	r2, #6
 801e27c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801e27e:	4b19      	ldr	r3, [pc, #100]	@ (801e2e4 <USBD_LL_Init+0x94>)
 801e280:	2202      	movs	r2, #2
 801e282:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801e284:	4b17      	ldr	r3, [pc, #92]	@ (801e2e4 <USBD_LL_Init+0x94>)
 801e286:	2200      	movs	r2, #0
 801e288:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801e28a:	4b16      	ldr	r3, [pc, #88]	@ (801e2e4 <USBD_LL_Init+0x94>)
 801e28c:	2202      	movs	r2, #2
 801e28e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801e290:	4b14      	ldr	r3, [pc, #80]	@ (801e2e4 <USBD_LL_Init+0x94>)
 801e292:	2201      	movs	r2, #1
 801e294:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801e296:	4b13      	ldr	r3, [pc, #76]	@ (801e2e4 <USBD_LL_Init+0x94>)
 801e298:	2200      	movs	r2, #0
 801e29a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801e29c:	4b11      	ldr	r3, [pc, #68]	@ (801e2e4 <USBD_LL_Init+0x94>)
 801e29e:	2200      	movs	r2, #0
 801e2a0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801e2a2:	4b10      	ldr	r3, [pc, #64]	@ (801e2e4 <USBD_LL_Init+0x94>)
 801e2a4:	2201      	movs	r2, #1
 801e2a6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801e2a8:	4b0e      	ldr	r3, [pc, #56]	@ (801e2e4 <USBD_LL_Init+0x94>)
 801e2aa:	2200      	movs	r2, #0
 801e2ac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801e2ae:	480d      	ldr	r0, [pc, #52]	@ (801e2e4 <USBD_LL_Init+0x94>)
 801e2b0:	f7e4 fd65 	bl	8002d7e <HAL_PCD_Init>
 801e2b4:	4603      	mov	r3, r0
 801e2b6:	2b00      	cmp	r3, #0
 801e2b8:	d001      	beq.n	801e2be <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801e2ba:	f7e2 fc6b 	bl	8000b94 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801e2be:	2180      	movs	r1, #128	@ 0x80
 801e2c0:	4808      	ldr	r0, [pc, #32]	@ (801e2e4 <USBD_LL_Init+0x94>)
 801e2c2:	f7e5 ffb2 	bl	800422a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801e2c6:	2240      	movs	r2, #64	@ 0x40
 801e2c8:	2100      	movs	r1, #0
 801e2ca:	4806      	ldr	r0, [pc, #24]	@ (801e2e4 <USBD_LL_Init+0x94>)
 801e2cc:	f7e5 ff66 	bl	800419c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801e2d0:	2280      	movs	r2, #128	@ 0x80
 801e2d2:	2101      	movs	r1, #1
 801e2d4:	4803      	ldr	r0, [pc, #12]	@ (801e2e4 <USBD_LL_Init+0x94>)
 801e2d6:	f7e5 ff61 	bl	800419c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801e2da:	2300      	movs	r3, #0
}
 801e2dc:	4618      	mov	r0, r3
 801e2de:	3708      	adds	r7, #8
 801e2e0:	46bd      	mov	sp, r7
 801e2e2:	bd80      	pop	{r7, pc}
 801e2e4:	20005e1c 	.word	0x20005e1c

0801e2e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801e2e8:	b580      	push	{r7, lr}
 801e2ea:	b084      	sub	sp, #16
 801e2ec:	af00      	add	r7, sp, #0
 801e2ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e2f0:	2300      	movs	r3, #0
 801e2f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e2f4:	2300      	movs	r3, #0
 801e2f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801e2f8:	687b      	ldr	r3, [r7, #4]
 801e2fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801e2fe:	4618      	mov	r0, r3
 801e300:	f7e4 fe53 	bl	8002faa <HAL_PCD_Start>
 801e304:	4603      	mov	r3, r0
 801e306:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e308:	7bfb      	ldrb	r3, [r7, #15]
 801e30a:	4618      	mov	r0, r3
 801e30c:	f000 f97e 	bl	801e60c <USBD_Get_USB_Status>
 801e310:	4603      	mov	r3, r0
 801e312:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e314:	7bbb      	ldrb	r3, [r7, #14]
}
 801e316:	4618      	mov	r0, r3
 801e318:	3710      	adds	r7, #16
 801e31a:	46bd      	mov	sp, r7
 801e31c:	bd80      	pop	{r7, pc}

0801e31e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801e31e:	b580      	push	{r7, lr}
 801e320:	b084      	sub	sp, #16
 801e322:	af00      	add	r7, sp, #0
 801e324:	6078      	str	r0, [r7, #4]
 801e326:	4608      	mov	r0, r1
 801e328:	4611      	mov	r1, r2
 801e32a:	461a      	mov	r2, r3
 801e32c:	4603      	mov	r3, r0
 801e32e:	70fb      	strb	r3, [r7, #3]
 801e330:	460b      	mov	r3, r1
 801e332:	70bb      	strb	r3, [r7, #2]
 801e334:	4613      	mov	r3, r2
 801e336:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e338:	2300      	movs	r3, #0
 801e33a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e33c:	2300      	movs	r3, #0
 801e33e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801e340:	687b      	ldr	r3, [r7, #4]
 801e342:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801e346:	78bb      	ldrb	r3, [r7, #2]
 801e348:	883a      	ldrh	r2, [r7, #0]
 801e34a:	78f9      	ldrb	r1, [r7, #3]
 801e34c:	f7e5 fb41 	bl	80039d2 <HAL_PCD_EP_Open>
 801e350:	4603      	mov	r3, r0
 801e352:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e354:	7bfb      	ldrb	r3, [r7, #15]
 801e356:	4618      	mov	r0, r3
 801e358:	f000 f958 	bl	801e60c <USBD_Get_USB_Status>
 801e35c:	4603      	mov	r3, r0
 801e35e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e360:	7bbb      	ldrb	r3, [r7, #14]
}
 801e362:	4618      	mov	r0, r3
 801e364:	3710      	adds	r7, #16
 801e366:	46bd      	mov	sp, r7
 801e368:	bd80      	pop	{r7, pc}

0801e36a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e36a:	b580      	push	{r7, lr}
 801e36c:	b084      	sub	sp, #16
 801e36e:	af00      	add	r7, sp, #0
 801e370:	6078      	str	r0, [r7, #4]
 801e372:	460b      	mov	r3, r1
 801e374:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e376:	2300      	movs	r3, #0
 801e378:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e37a:	2300      	movs	r3, #0
 801e37c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801e37e:	687b      	ldr	r3, [r7, #4]
 801e380:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801e384:	78fa      	ldrb	r2, [r7, #3]
 801e386:	4611      	mov	r1, r2
 801e388:	4618      	mov	r0, r3
 801e38a:	f7e5 fb8c 	bl	8003aa6 <HAL_PCD_EP_Close>
 801e38e:	4603      	mov	r3, r0
 801e390:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e392:	7bfb      	ldrb	r3, [r7, #15]
 801e394:	4618      	mov	r0, r3
 801e396:	f000 f939 	bl	801e60c <USBD_Get_USB_Status>
 801e39a:	4603      	mov	r3, r0
 801e39c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e39e:	7bbb      	ldrb	r3, [r7, #14]
}
 801e3a0:	4618      	mov	r0, r3
 801e3a2:	3710      	adds	r7, #16
 801e3a4:	46bd      	mov	sp, r7
 801e3a6:	bd80      	pop	{r7, pc}

0801e3a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e3a8:	b580      	push	{r7, lr}
 801e3aa:	b084      	sub	sp, #16
 801e3ac:	af00      	add	r7, sp, #0
 801e3ae:	6078      	str	r0, [r7, #4]
 801e3b0:	460b      	mov	r3, r1
 801e3b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e3b4:	2300      	movs	r3, #0
 801e3b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e3b8:	2300      	movs	r3, #0
 801e3ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801e3c2:	78fa      	ldrb	r2, [r7, #3]
 801e3c4:	4611      	mov	r1, r2
 801e3c6:	4618      	mov	r0, r3
 801e3c8:	f7e5 fc44 	bl	8003c54 <HAL_PCD_EP_SetStall>
 801e3cc:	4603      	mov	r3, r0
 801e3ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e3d0:	7bfb      	ldrb	r3, [r7, #15]
 801e3d2:	4618      	mov	r0, r3
 801e3d4:	f000 f91a 	bl	801e60c <USBD_Get_USB_Status>
 801e3d8:	4603      	mov	r3, r0
 801e3da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e3dc:	7bbb      	ldrb	r3, [r7, #14]
}
 801e3de:	4618      	mov	r0, r3
 801e3e0:	3710      	adds	r7, #16
 801e3e2:	46bd      	mov	sp, r7
 801e3e4:	bd80      	pop	{r7, pc}

0801e3e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e3e6:	b580      	push	{r7, lr}
 801e3e8:	b084      	sub	sp, #16
 801e3ea:	af00      	add	r7, sp, #0
 801e3ec:	6078      	str	r0, [r7, #4]
 801e3ee:	460b      	mov	r3, r1
 801e3f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e3f2:	2300      	movs	r3, #0
 801e3f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e3f6:	2300      	movs	r3, #0
 801e3f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801e3fa:	687b      	ldr	r3, [r7, #4]
 801e3fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801e400:	78fa      	ldrb	r2, [r7, #3]
 801e402:	4611      	mov	r1, r2
 801e404:	4618      	mov	r0, r3
 801e406:	f7e5 fc88 	bl	8003d1a <HAL_PCD_EP_ClrStall>
 801e40a:	4603      	mov	r3, r0
 801e40c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e40e:	7bfb      	ldrb	r3, [r7, #15]
 801e410:	4618      	mov	r0, r3
 801e412:	f000 f8fb 	bl	801e60c <USBD_Get_USB_Status>
 801e416:	4603      	mov	r3, r0
 801e418:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e41a:	7bbb      	ldrb	r3, [r7, #14]
}
 801e41c:	4618      	mov	r0, r3
 801e41e:	3710      	adds	r7, #16
 801e420:	46bd      	mov	sp, r7
 801e422:	bd80      	pop	{r7, pc}

0801e424 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e424:	b480      	push	{r7}
 801e426:	b085      	sub	sp, #20
 801e428:	af00      	add	r7, sp, #0
 801e42a:	6078      	str	r0, [r7, #4]
 801e42c:	460b      	mov	r3, r1
 801e42e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801e430:	687b      	ldr	r3, [r7, #4]
 801e432:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801e436:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801e438:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e43c:	2b00      	cmp	r3, #0
 801e43e:	da0b      	bge.n	801e458 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801e440:	78fb      	ldrb	r3, [r7, #3]
 801e442:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801e446:	68f9      	ldr	r1, [r7, #12]
 801e448:	4613      	mov	r3, r2
 801e44a:	00db      	lsls	r3, r3, #3
 801e44c:	4413      	add	r3, r2
 801e44e:	009b      	lsls	r3, r3, #2
 801e450:	440b      	add	r3, r1
 801e452:	3316      	adds	r3, #22
 801e454:	781b      	ldrb	r3, [r3, #0]
 801e456:	e00b      	b.n	801e470 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801e458:	78fb      	ldrb	r3, [r7, #3]
 801e45a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801e45e:	68f9      	ldr	r1, [r7, #12]
 801e460:	4613      	mov	r3, r2
 801e462:	00db      	lsls	r3, r3, #3
 801e464:	4413      	add	r3, r2
 801e466:	009b      	lsls	r3, r3, #2
 801e468:	440b      	add	r3, r1
 801e46a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801e46e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801e470:	4618      	mov	r0, r3
 801e472:	3714      	adds	r7, #20
 801e474:	46bd      	mov	sp, r7
 801e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e47a:	4770      	bx	lr

0801e47c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801e47c:	b580      	push	{r7, lr}
 801e47e:	b084      	sub	sp, #16
 801e480:	af00      	add	r7, sp, #0
 801e482:	6078      	str	r0, [r7, #4]
 801e484:	460b      	mov	r3, r1
 801e486:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e488:	2300      	movs	r3, #0
 801e48a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e48c:	2300      	movs	r3, #0
 801e48e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801e490:	687b      	ldr	r3, [r7, #4]
 801e492:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801e496:	78fa      	ldrb	r2, [r7, #3]
 801e498:	4611      	mov	r1, r2
 801e49a:	4618      	mov	r0, r3
 801e49c:	f7e5 fa75 	bl	800398a <HAL_PCD_SetAddress>
 801e4a0:	4603      	mov	r3, r0
 801e4a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e4a4:	7bfb      	ldrb	r3, [r7, #15]
 801e4a6:	4618      	mov	r0, r3
 801e4a8:	f000 f8b0 	bl	801e60c <USBD_Get_USB_Status>
 801e4ac:	4603      	mov	r3, r0
 801e4ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801e4b0:	7bbb      	ldrb	r3, [r7, #14]
}
 801e4b2:	4618      	mov	r0, r3
 801e4b4:	3710      	adds	r7, #16
 801e4b6:	46bd      	mov	sp, r7
 801e4b8:	bd80      	pop	{r7, pc}

0801e4ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801e4ba:	b580      	push	{r7, lr}
 801e4bc:	b086      	sub	sp, #24
 801e4be:	af00      	add	r7, sp, #0
 801e4c0:	60f8      	str	r0, [r7, #12]
 801e4c2:	607a      	str	r2, [r7, #4]
 801e4c4:	603b      	str	r3, [r7, #0]
 801e4c6:	460b      	mov	r3, r1
 801e4c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e4ca:	2300      	movs	r3, #0
 801e4cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e4ce:	2300      	movs	r3, #0
 801e4d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801e4d2:	68fb      	ldr	r3, [r7, #12]
 801e4d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801e4d8:	7af9      	ldrb	r1, [r7, #11]
 801e4da:	683b      	ldr	r3, [r7, #0]
 801e4dc:	687a      	ldr	r2, [r7, #4]
 801e4de:	f7e5 fb7f 	bl	8003be0 <HAL_PCD_EP_Transmit>
 801e4e2:	4603      	mov	r3, r0
 801e4e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e4e6:	7dfb      	ldrb	r3, [r7, #23]
 801e4e8:	4618      	mov	r0, r3
 801e4ea:	f000 f88f 	bl	801e60c <USBD_Get_USB_Status>
 801e4ee:	4603      	mov	r3, r0
 801e4f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801e4f2:	7dbb      	ldrb	r3, [r7, #22]
}
 801e4f4:	4618      	mov	r0, r3
 801e4f6:	3718      	adds	r7, #24
 801e4f8:	46bd      	mov	sp, r7
 801e4fa:	bd80      	pop	{r7, pc}

0801e4fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801e4fc:	b580      	push	{r7, lr}
 801e4fe:	b086      	sub	sp, #24
 801e500:	af00      	add	r7, sp, #0
 801e502:	60f8      	str	r0, [r7, #12]
 801e504:	607a      	str	r2, [r7, #4]
 801e506:	603b      	str	r3, [r7, #0]
 801e508:	460b      	mov	r3, r1
 801e50a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e50c:	2300      	movs	r3, #0
 801e50e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e510:	2300      	movs	r3, #0
 801e512:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801e514:	68fb      	ldr	r3, [r7, #12]
 801e516:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801e51a:	7af9      	ldrb	r1, [r7, #11]
 801e51c:	683b      	ldr	r3, [r7, #0]
 801e51e:	687a      	ldr	r2, [r7, #4]
 801e520:	f7e5 fb0b 	bl	8003b3a <HAL_PCD_EP_Receive>
 801e524:	4603      	mov	r3, r0
 801e526:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e528:	7dfb      	ldrb	r3, [r7, #23]
 801e52a:	4618      	mov	r0, r3
 801e52c:	f000 f86e 	bl	801e60c <USBD_Get_USB_Status>
 801e530:	4603      	mov	r3, r0
 801e532:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801e534:	7dbb      	ldrb	r3, [r7, #22]
}
 801e536:	4618      	mov	r0, r3
 801e538:	3718      	adds	r7, #24
 801e53a:	46bd      	mov	sp, r7
 801e53c:	bd80      	pop	{r7, pc}

0801e53e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e53e:	b580      	push	{r7, lr}
 801e540:	b082      	sub	sp, #8
 801e542:	af00      	add	r7, sp, #0
 801e544:	6078      	str	r0, [r7, #4]
 801e546:	460b      	mov	r3, r1
 801e548:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801e54a:	687b      	ldr	r3, [r7, #4]
 801e54c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801e550:	78fa      	ldrb	r2, [r7, #3]
 801e552:	4611      	mov	r1, r2
 801e554:	4618      	mov	r0, r3
 801e556:	f7e5 fb2b 	bl	8003bb0 <HAL_PCD_EP_GetRxCount>
 801e55a:	4603      	mov	r3, r0
}
 801e55c:	4618      	mov	r0, r3
 801e55e:	3708      	adds	r7, #8
 801e560:	46bd      	mov	sp, r7
 801e562:	bd80      	pop	{r7, pc}

0801e564 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801e564:	b580      	push	{r7, lr}
 801e566:	b082      	sub	sp, #8
 801e568:	af00      	add	r7, sp, #0
 801e56a:	6078      	str	r0, [r7, #4]
 801e56c:	460b      	mov	r3, r1
 801e56e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801e570:	78fb      	ldrb	r3, [r7, #3]
 801e572:	2b00      	cmp	r3, #0
 801e574:	d002      	beq.n	801e57c <HAL_PCDEx_LPM_Callback+0x18>
 801e576:	2b01      	cmp	r3, #1
 801e578:	d01f      	beq.n	801e5ba <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801e57a:	e03b      	b.n	801e5f4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801e57c:	687b      	ldr	r3, [r7, #4]
 801e57e:	7adb      	ldrb	r3, [r3, #11]
 801e580:	2b00      	cmp	r3, #0
 801e582:	d007      	beq.n	801e594 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801e584:	f000 f83c 	bl	801e600 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801e588:	4b1c      	ldr	r3, [pc, #112]	@ (801e5fc <HAL_PCDEx_LPM_Callback+0x98>)
 801e58a:	691b      	ldr	r3, [r3, #16]
 801e58c:	4a1b      	ldr	r2, [pc, #108]	@ (801e5fc <HAL_PCDEx_LPM_Callback+0x98>)
 801e58e:	f023 0306 	bic.w	r3, r3, #6
 801e592:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801e594:	687b      	ldr	r3, [r7, #4]
 801e596:	681b      	ldr	r3, [r3, #0]
 801e598:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801e59c:	681b      	ldr	r3, [r3, #0]
 801e59e:	687a      	ldr	r2, [r7, #4]
 801e5a0:	6812      	ldr	r2, [r2, #0]
 801e5a2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801e5a6:	f023 0301 	bic.w	r3, r3, #1
 801e5aa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801e5ac:	687b      	ldr	r3, [r7, #4]
 801e5ae:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801e5b2:	4618      	mov	r0, r3
 801e5b4:	f7eb f96c 	bl	8009890 <USBD_LL_Resume>
    break;
 801e5b8:	e01c      	b.n	801e5f4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801e5ba:	687b      	ldr	r3, [r7, #4]
 801e5bc:	681b      	ldr	r3, [r3, #0]
 801e5be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801e5c2:	681b      	ldr	r3, [r3, #0]
 801e5c4:	687a      	ldr	r2, [r7, #4]
 801e5c6:	6812      	ldr	r2, [r2, #0]
 801e5c8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801e5cc:	f043 0301 	orr.w	r3, r3, #1
 801e5d0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801e5d2:	687b      	ldr	r3, [r7, #4]
 801e5d4:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 801e5d8:	4618      	mov	r0, r3
 801e5da:	f7eb f93d 	bl	8009858 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801e5de:	687b      	ldr	r3, [r7, #4]
 801e5e0:	7adb      	ldrb	r3, [r3, #11]
 801e5e2:	2b00      	cmp	r3, #0
 801e5e4:	d005      	beq.n	801e5f2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801e5e6:	4b05      	ldr	r3, [pc, #20]	@ (801e5fc <HAL_PCDEx_LPM_Callback+0x98>)
 801e5e8:	691b      	ldr	r3, [r3, #16]
 801e5ea:	4a04      	ldr	r2, [pc, #16]	@ (801e5fc <HAL_PCDEx_LPM_Callback+0x98>)
 801e5ec:	f043 0306 	orr.w	r3, r3, #6
 801e5f0:	6113      	str	r3, [r2, #16]
    break;
 801e5f2:	bf00      	nop
}
 801e5f4:	bf00      	nop
 801e5f6:	3708      	adds	r7, #8
 801e5f8:	46bd      	mov	sp, r7
 801e5fa:	bd80      	pop	{r7, pc}
 801e5fc:	e000ed00 	.word	0xe000ed00

0801e600 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801e600:	b580      	push	{r7, lr}
 801e602:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801e604:	f7e2 f884 	bl	8000710 <SystemClock_Config>
}
 801e608:	bf00      	nop
 801e60a:	bd80      	pop	{r7, pc}

0801e60c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801e60c:	b480      	push	{r7}
 801e60e:	b085      	sub	sp, #20
 801e610:	af00      	add	r7, sp, #0
 801e612:	4603      	mov	r3, r0
 801e614:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e616:	2300      	movs	r3, #0
 801e618:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801e61a:	79fb      	ldrb	r3, [r7, #7]
 801e61c:	2b03      	cmp	r3, #3
 801e61e:	d817      	bhi.n	801e650 <USBD_Get_USB_Status+0x44>
 801e620:	a201      	add	r2, pc, #4	@ (adr r2, 801e628 <USBD_Get_USB_Status+0x1c>)
 801e622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e626:	bf00      	nop
 801e628:	0801e639 	.word	0x0801e639
 801e62c:	0801e63f 	.word	0x0801e63f
 801e630:	0801e645 	.word	0x0801e645
 801e634:	0801e64b 	.word	0x0801e64b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801e638:	2300      	movs	r3, #0
 801e63a:	73fb      	strb	r3, [r7, #15]
    break;
 801e63c:	e00b      	b.n	801e656 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801e63e:	2303      	movs	r3, #3
 801e640:	73fb      	strb	r3, [r7, #15]
    break;
 801e642:	e008      	b.n	801e656 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801e644:	2301      	movs	r3, #1
 801e646:	73fb      	strb	r3, [r7, #15]
    break;
 801e648:	e005      	b.n	801e656 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801e64a:	2303      	movs	r3, #3
 801e64c:	73fb      	strb	r3, [r7, #15]
    break;
 801e64e:	e002      	b.n	801e656 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801e650:	2303      	movs	r3, #3
 801e652:	73fb      	strb	r3, [r7, #15]
    break;
 801e654:	bf00      	nop
  }
  return usb_status;
 801e656:	7bfb      	ldrb	r3, [r7, #15]
}
 801e658:	4618      	mov	r0, r3
 801e65a:	3714      	adds	r7, #20
 801e65c:	46bd      	mov	sp, r7
 801e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e662:	4770      	bx	lr

0801e664 <malloc>:
 801e664:	4b02      	ldr	r3, [pc, #8]	@ (801e670 <malloc+0xc>)
 801e666:	4601      	mov	r1, r0
 801e668:	6818      	ldr	r0, [r3, #0]
 801e66a:	f000 b82d 	b.w	801e6c8 <_malloc_r>
 801e66e:	bf00      	nop
 801e670:	20000148 	.word	0x20000148

0801e674 <free>:
 801e674:	4b02      	ldr	r3, [pc, #8]	@ (801e680 <free+0xc>)
 801e676:	4601      	mov	r1, r0
 801e678:	6818      	ldr	r0, [r3, #0]
 801e67a:	f000 bc91 	b.w	801efa0 <_free_r>
 801e67e:	bf00      	nop
 801e680:	20000148 	.word	0x20000148

0801e684 <sbrk_aligned>:
 801e684:	b570      	push	{r4, r5, r6, lr}
 801e686:	4e0f      	ldr	r6, [pc, #60]	@ (801e6c4 <sbrk_aligned+0x40>)
 801e688:	460c      	mov	r4, r1
 801e68a:	6831      	ldr	r1, [r6, #0]
 801e68c:	4605      	mov	r5, r0
 801e68e:	b911      	cbnz	r1, 801e696 <sbrk_aligned+0x12>
 801e690:	f000 fc10 	bl	801eeb4 <_sbrk_r>
 801e694:	6030      	str	r0, [r6, #0]
 801e696:	4621      	mov	r1, r4
 801e698:	4628      	mov	r0, r5
 801e69a:	f000 fc0b 	bl	801eeb4 <_sbrk_r>
 801e69e:	1c43      	adds	r3, r0, #1
 801e6a0:	d103      	bne.n	801e6aa <sbrk_aligned+0x26>
 801e6a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801e6a6:	4620      	mov	r0, r4
 801e6a8:	bd70      	pop	{r4, r5, r6, pc}
 801e6aa:	1cc4      	adds	r4, r0, #3
 801e6ac:	f024 0403 	bic.w	r4, r4, #3
 801e6b0:	42a0      	cmp	r0, r4
 801e6b2:	d0f8      	beq.n	801e6a6 <sbrk_aligned+0x22>
 801e6b4:	1a21      	subs	r1, r4, r0
 801e6b6:	4628      	mov	r0, r5
 801e6b8:	f000 fbfc 	bl	801eeb4 <_sbrk_r>
 801e6bc:	3001      	adds	r0, #1
 801e6be:	d1f2      	bne.n	801e6a6 <sbrk_aligned+0x22>
 801e6c0:	e7ef      	b.n	801e6a2 <sbrk_aligned+0x1e>
 801e6c2:	bf00      	nop
 801e6c4:	200062fc 	.word	0x200062fc

0801e6c8 <_malloc_r>:
 801e6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e6cc:	1ccd      	adds	r5, r1, #3
 801e6ce:	f025 0503 	bic.w	r5, r5, #3
 801e6d2:	3508      	adds	r5, #8
 801e6d4:	2d0c      	cmp	r5, #12
 801e6d6:	bf38      	it	cc
 801e6d8:	250c      	movcc	r5, #12
 801e6da:	2d00      	cmp	r5, #0
 801e6dc:	4606      	mov	r6, r0
 801e6de:	db01      	blt.n	801e6e4 <_malloc_r+0x1c>
 801e6e0:	42a9      	cmp	r1, r5
 801e6e2:	d904      	bls.n	801e6ee <_malloc_r+0x26>
 801e6e4:	230c      	movs	r3, #12
 801e6e6:	6033      	str	r3, [r6, #0]
 801e6e8:	2000      	movs	r0, #0
 801e6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e6ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801e7c4 <_malloc_r+0xfc>
 801e6f2:	f000 f869 	bl	801e7c8 <__malloc_lock>
 801e6f6:	f8d8 3000 	ldr.w	r3, [r8]
 801e6fa:	461c      	mov	r4, r3
 801e6fc:	bb44      	cbnz	r4, 801e750 <_malloc_r+0x88>
 801e6fe:	4629      	mov	r1, r5
 801e700:	4630      	mov	r0, r6
 801e702:	f7ff ffbf 	bl	801e684 <sbrk_aligned>
 801e706:	1c43      	adds	r3, r0, #1
 801e708:	4604      	mov	r4, r0
 801e70a:	d158      	bne.n	801e7be <_malloc_r+0xf6>
 801e70c:	f8d8 4000 	ldr.w	r4, [r8]
 801e710:	4627      	mov	r7, r4
 801e712:	2f00      	cmp	r7, #0
 801e714:	d143      	bne.n	801e79e <_malloc_r+0xd6>
 801e716:	2c00      	cmp	r4, #0
 801e718:	d04b      	beq.n	801e7b2 <_malloc_r+0xea>
 801e71a:	6823      	ldr	r3, [r4, #0]
 801e71c:	4639      	mov	r1, r7
 801e71e:	4630      	mov	r0, r6
 801e720:	eb04 0903 	add.w	r9, r4, r3
 801e724:	f000 fbc6 	bl	801eeb4 <_sbrk_r>
 801e728:	4581      	cmp	r9, r0
 801e72a:	d142      	bne.n	801e7b2 <_malloc_r+0xea>
 801e72c:	6821      	ldr	r1, [r4, #0]
 801e72e:	1a6d      	subs	r5, r5, r1
 801e730:	4629      	mov	r1, r5
 801e732:	4630      	mov	r0, r6
 801e734:	f7ff ffa6 	bl	801e684 <sbrk_aligned>
 801e738:	3001      	adds	r0, #1
 801e73a:	d03a      	beq.n	801e7b2 <_malloc_r+0xea>
 801e73c:	6823      	ldr	r3, [r4, #0]
 801e73e:	442b      	add	r3, r5
 801e740:	6023      	str	r3, [r4, #0]
 801e742:	f8d8 3000 	ldr.w	r3, [r8]
 801e746:	685a      	ldr	r2, [r3, #4]
 801e748:	bb62      	cbnz	r2, 801e7a4 <_malloc_r+0xdc>
 801e74a:	f8c8 7000 	str.w	r7, [r8]
 801e74e:	e00f      	b.n	801e770 <_malloc_r+0xa8>
 801e750:	6822      	ldr	r2, [r4, #0]
 801e752:	1b52      	subs	r2, r2, r5
 801e754:	d420      	bmi.n	801e798 <_malloc_r+0xd0>
 801e756:	2a0b      	cmp	r2, #11
 801e758:	d917      	bls.n	801e78a <_malloc_r+0xc2>
 801e75a:	1961      	adds	r1, r4, r5
 801e75c:	42a3      	cmp	r3, r4
 801e75e:	6025      	str	r5, [r4, #0]
 801e760:	bf18      	it	ne
 801e762:	6059      	strne	r1, [r3, #4]
 801e764:	6863      	ldr	r3, [r4, #4]
 801e766:	bf08      	it	eq
 801e768:	f8c8 1000 	streq.w	r1, [r8]
 801e76c:	5162      	str	r2, [r4, r5]
 801e76e:	604b      	str	r3, [r1, #4]
 801e770:	4630      	mov	r0, r6
 801e772:	f000 f82f 	bl	801e7d4 <__malloc_unlock>
 801e776:	f104 000b 	add.w	r0, r4, #11
 801e77a:	1d23      	adds	r3, r4, #4
 801e77c:	f020 0007 	bic.w	r0, r0, #7
 801e780:	1ac2      	subs	r2, r0, r3
 801e782:	bf1c      	itt	ne
 801e784:	1a1b      	subne	r3, r3, r0
 801e786:	50a3      	strne	r3, [r4, r2]
 801e788:	e7af      	b.n	801e6ea <_malloc_r+0x22>
 801e78a:	6862      	ldr	r2, [r4, #4]
 801e78c:	42a3      	cmp	r3, r4
 801e78e:	bf0c      	ite	eq
 801e790:	f8c8 2000 	streq.w	r2, [r8]
 801e794:	605a      	strne	r2, [r3, #4]
 801e796:	e7eb      	b.n	801e770 <_malloc_r+0xa8>
 801e798:	4623      	mov	r3, r4
 801e79a:	6864      	ldr	r4, [r4, #4]
 801e79c:	e7ae      	b.n	801e6fc <_malloc_r+0x34>
 801e79e:	463c      	mov	r4, r7
 801e7a0:	687f      	ldr	r7, [r7, #4]
 801e7a2:	e7b6      	b.n	801e712 <_malloc_r+0x4a>
 801e7a4:	461a      	mov	r2, r3
 801e7a6:	685b      	ldr	r3, [r3, #4]
 801e7a8:	42a3      	cmp	r3, r4
 801e7aa:	d1fb      	bne.n	801e7a4 <_malloc_r+0xdc>
 801e7ac:	2300      	movs	r3, #0
 801e7ae:	6053      	str	r3, [r2, #4]
 801e7b0:	e7de      	b.n	801e770 <_malloc_r+0xa8>
 801e7b2:	230c      	movs	r3, #12
 801e7b4:	6033      	str	r3, [r6, #0]
 801e7b6:	4630      	mov	r0, r6
 801e7b8:	f000 f80c 	bl	801e7d4 <__malloc_unlock>
 801e7bc:	e794      	b.n	801e6e8 <_malloc_r+0x20>
 801e7be:	6005      	str	r5, [r0, #0]
 801e7c0:	e7d6      	b.n	801e770 <_malloc_r+0xa8>
 801e7c2:	bf00      	nop
 801e7c4:	20006300 	.word	0x20006300

0801e7c8 <__malloc_lock>:
 801e7c8:	4801      	ldr	r0, [pc, #4]	@ (801e7d0 <__malloc_lock+0x8>)
 801e7ca:	f000 bbba 	b.w	801ef42 <__retarget_lock_acquire_recursive>
 801e7ce:	bf00      	nop
 801e7d0:	20006444 	.word	0x20006444

0801e7d4 <__malloc_unlock>:
 801e7d4:	4801      	ldr	r0, [pc, #4]	@ (801e7dc <__malloc_unlock+0x8>)
 801e7d6:	f000 bbb5 	b.w	801ef44 <__retarget_lock_release_recursive>
 801e7da:	bf00      	nop
 801e7dc:	20006444 	.word	0x20006444

0801e7e0 <rand>:
 801e7e0:	4b16      	ldr	r3, [pc, #88]	@ (801e83c <rand+0x5c>)
 801e7e2:	b510      	push	{r4, lr}
 801e7e4:	681c      	ldr	r4, [r3, #0]
 801e7e6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801e7e8:	b9b3      	cbnz	r3, 801e818 <rand+0x38>
 801e7ea:	2018      	movs	r0, #24
 801e7ec:	f7ff ff3a 	bl	801e664 <malloc>
 801e7f0:	4602      	mov	r2, r0
 801e7f2:	6320      	str	r0, [r4, #48]	@ 0x30
 801e7f4:	b920      	cbnz	r0, 801e800 <rand+0x20>
 801e7f6:	4b12      	ldr	r3, [pc, #72]	@ (801e840 <rand+0x60>)
 801e7f8:	4812      	ldr	r0, [pc, #72]	@ (801e844 <rand+0x64>)
 801e7fa:	2152      	movs	r1, #82	@ 0x52
 801e7fc:	f000 fbb2 	bl	801ef64 <__assert_func>
 801e800:	4911      	ldr	r1, [pc, #68]	@ (801e848 <rand+0x68>)
 801e802:	4b12      	ldr	r3, [pc, #72]	@ (801e84c <rand+0x6c>)
 801e804:	e9c0 1300 	strd	r1, r3, [r0]
 801e808:	4b11      	ldr	r3, [pc, #68]	@ (801e850 <rand+0x70>)
 801e80a:	6083      	str	r3, [r0, #8]
 801e80c:	230b      	movs	r3, #11
 801e80e:	8183      	strh	r3, [r0, #12]
 801e810:	2100      	movs	r1, #0
 801e812:	2001      	movs	r0, #1
 801e814:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801e818:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801e81a:	480e      	ldr	r0, [pc, #56]	@ (801e854 <rand+0x74>)
 801e81c:	690b      	ldr	r3, [r1, #16]
 801e81e:	694c      	ldr	r4, [r1, #20]
 801e820:	4a0d      	ldr	r2, [pc, #52]	@ (801e858 <rand+0x78>)
 801e822:	4358      	muls	r0, r3
 801e824:	fb02 0004 	mla	r0, r2, r4, r0
 801e828:	fba3 3202 	umull	r3, r2, r3, r2
 801e82c:	3301      	adds	r3, #1
 801e82e:	eb40 0002 	adc.w	r0, r0, r2
 801e832:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801e836:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801e83a:	bd10      	pop	{r4, pc}
 801e83c:	20000148 	.word	0x20000148
 801e840:	080236c0 	.word	0x080236c0
 801e844:	080236d7 	.word	0x080236d7
 801e848:	abcd330e 	.word	0xabcd330e
 801e84c:	e66d1234 	.word	0xe66d1234
 801e850:	0005deec 	.word	0x0005deec
 801e854:	5851f42d 	.word	0x5851f42d
 801e858:	4c957f2d 	.word	0x4c957f2d

0801e85c <std>:
 801e85c:	2300      	movs	r3, #0
 801e85e:	b510      	push	{r4, lr}
 801e860:	4604      	mov	r4, r0
 801e862:	e9c0 3300 	strd	r3, r3, [r0]
 801e866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e86a:	6083      	str	r3, [r0, #8]
 801e86c:	8181      	strh	r1, [r0, #12]
 801e86e:	6643      	str	r3, [r0, #100]	@ 0x64
 801e870:	81c2      	strh	r2, [r0, #14]
 801e872:	6183      	str	r3, [r0, #24]
 801e874:	4619      	mov	r1, r3
 801e876:	2208      	movs	r2, #8
 801e878:	305c      	adds	r0, #92	@ 0x5c
 801e87a:	f000 fa81 	bl	801ed80 <memset>
 801e87e:	4b0d      	ldr	r3, [pc, #52]	@ (801e8b4 <std+0x58>)
 801e880:	6263      	str	r3, [r4, #36]	@ 0x24
 801e882:	4b0d      	ldr	r3, [pc, #52]	@ (801e8b8 <std+0x5c>)
 801e884:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e886:	4b0d      	ldr	r3, [pc, #52]	@ (801e8bc <std+0x60>)
 801e888:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e88a:	4b0d      	ldr	r3, [pc, #52]	@ (801e8c0 <std+0x64>)
 801e88c:	6323      	str	r3, [r4, #48]	@ 0x30
 801e88e:	4b0d      	ldr	r3, [pc, #52]	@ (801e8c4 <std+0x68>)
 801e890:	6224      	str	r4, [r4, #32]
 801e892:	429c      	cmp	r4, r3
 801e894:	d006      	beq.n	801e8a4 <std+0x48>
 801e896:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e89a:	4294      	cmp	r4, r2
 801e89c:	d002      	beq.n	801e8a4 <std+0x48>
 801e89e:	33d0      	adds	r3, #208	@ 0xd0
 801e8a0:	429c      	cmp	r4, r3
 801e8a2:	d105      	bne.n	801e8b0 <std+0x54>
 801e8a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e8a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e8ac:	f000 bb48 	b.w	801ef40 <__retarget_lock_init_recursive>
 801e8b0:	bd10      	pop	{r4, pc}
 801e8b2:	bf00      	nop
 801e8b4:	0801eb05 	.word	0x0801eb05
 801e8b8:	0801eb27 	.word	0x0801eb27
 801e8bc:	0801eb5f 	.word	0x0801eb5f
 801e8c0:	0801eb83 	.word	0x0801eb83
 801e8c4:	20006304 	.word	0x20006304

0801e8c8 <stdio_exit_handler>:
 801e8c8:	4a02      	ldr	r2, [pc, #8]	@ (801e8d4 <stdio_exit_handler+0xc>)
 801e8ca:	4903      	ldr	r1, [pc, #12]	@ (801e8d8 <stdio_exit_handler+0x10>)
 801e8cc:	4803      	ldr	r0, [pc, #12]	@ (801e8dc <stdio_exit_handler+0x14>)
 801e8ce:	f000 b869 	b.w	801e9a4 <_fwalk_sglue>
 801e8d2:	bf00      	nop
 801e8d4:	2000013c 	.word	0x2000013c
 801e8d8:	0801f989 	.word	0x0801f989
 801e8dc:	2000014c 	.word	0x2000014c

0801e8e0 <cleanup_stdio>:
 801e8e0:	6841      	ldr	r1, [r0, #4]
 801e8e2:	4b0c      	ldr	r3, [pc, #48]	@ (801e914 <cleanup_stdio+0x34>)
 801e8e4:	4299      	cmp	r1, r3
 801e8e6:	b510      	push	{r4, lr}
 801e8e8:	4604      	mov	r4, r0
 801e8ea:	d001      	beq.n	801e8f0 <cleanup_stdio+0x10>
 801e8ec:	f001 f84c 	bl	801f988 <_fflush_r>
 801e8f0:	68a1      	ldr	r1, [r4, #8]
 801e8f2:	4b09      	ldr	r3, [pc, #36]	@ (801e918 <cleanup_stdio+0x38>)
 801e8f4:	4299      	cmp	r1, r3
 801e8f6:	d002      	beq.n	801e8fe <cleanup_stdio+0x1e>
 801e8f8:	4620      	mov	r0, r4
 801e8fa:	f001 f845 	bl	801f988 <_fflush_r>
 801e8fe:	68e1      	ldr	r1, [r4, #12]
 801e900:	4b06      	ldr	r3, [pc, #24]	@ (801e91c <cleanup_stdio+0x3c>)
 801e902:	4299      	cmp	r1, r3
 801e904:	d004      	beq.n	801e910 <cleanup_stdio+0x30>
 801e906:	4620      	mov	r0, r4
 801e908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e90c:	f001 b83c 	b.w	801f988 <_fflush_r>
 801e910:	bd10      	pop	{r4, pc}
 801e912:	bf00      	nop
 801e914:	20006304 	.word	0x20006304
 801e918:	2000636c 	.word	0x2000636c
 801e91c:	200063d4 	.word	0x200063d4

0801e920 <global_stdio_init.part.0>:
 801e920:	b510      	push	{r4, lr}
 801e922:	4b0b      	ldr	r3, [pc, #44]	@ (801e950 <global_stdio_init.part.0+0x30>)
 801e924:	4c0b      	ldr	r4, [pc, #44]	@ (801e954 <global_stdio_init.part.0+0x34>)
 801e926:	4a0c      	ldr	r2, [pc, #48]	@ (801e958 <global_stdio_init.part.0+0x38>)
 801e928:	601a      	str	r2, [r3, #0]
 801e92a:	4620      	mov	r0, r4
 801e92c:	2200      	movs	r2, #0
 801e92e:	2104      	movs	r1, #4
 801e930:	f7ff ff94 	bl	801e85c <std>
 801e934:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e938:	2201      	movs	r2, #1
 801e93a:	2109      	movs	r1, #9
 801e93c:	f7ff ff8e 	bl	801e85c <std>
 801e940:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e944:	2202      	movs	r2, #2
 801e946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e94a:	2112      	movs	r1, #18
 801e94c:	f7ff bf86 	b.w	801e85c <std>
 801e950:	2000643c 	.word	0x2000643c
 801e954:	20006304 	.word	0x20006304
 801e958:	0801e8c9 	.word	0x0801e8c9

0801e95c <__sfp_lock_acquire>:
 801e95c:	4801      	ldr	r0, [pc, #4]	@ (801e964 <__sfp_lock_acquire+0x8>)
 801e95e:	f000 baf0 	b.w	801ef42 <__retarget_lock_acquire_recursive>
 801e962:	bf00      	nop
 801e964:	20006445 	.word	0x20006445

0801e968 <__sfp_lock_release>:
 801e968:	4801      	ldr	r0, [pc, #4]	@ (801e970 <__sfp_lock_release+0x8>)
 801e96a:	f000 baeb 	b.w	801ef44 <__retarget_lock_release_recursive>
 801e96e:	bf00      	nop
 801e970:	20006445 	.word	0x20006445

0801e974 <__sinit>:
 801e974:	b510      	push	{r4, lr}
 801e976:	4604      	mov	r4, r0
 801e978:	f7ff fff0 	bl	801e95c <__sfp_lock_acquire>
 801e97c:	6a23      	ldr	r3, [r4, #32]
 801e97e:	b11b      	cbz	r3, 801e988 <__sinit+0x14>
 801e980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e984:	f7ff bff0 	b.w	801e968 <__sfp_lock_release>
 801e988:	4b04      	ldr	r3, [pc, #16]	@ (801e99c <__sinit+0x28>)
 801e98a:	6223      	str	r3, [r4, #32]
 801e98c:	4b04      	ldr	r3, [pc, #16]	@ (801e9a0 <__sinit+0x2c>)
 801e98e:	681b      	ldr	r3, [r3, #0]
 801e990:	2b00      	cmp	r3, #0
 801e992:	d1f5      	bne.n	801e980 <__sinit+0xc>
 801e994:	f7ff ffc4 	bl	801e920 <global_stdio_init.part.0>
 801e998:	e7f2      	b.n	801e980 <__sinit+0xc>
 801e99a:	bf00      	nop
 801e99c:	0801e8e1 	.word	0x0801e8e1
 801e9a0:	2000643c 	.word	0x2000643c

0801e9a4 <_fwalk_sglue>:
 801e9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e9a8:	4607      	mov	r7, r0
 801e9aa:	4688      	mov	r8, r1
 801e9ac:	4614      	mov	r4, r2
 801e9ae:	2600      	movs	r6, #0
 801e9b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e9b4:	f1b9 0901 	subs.w	r9, r9, #1
 801e9b8:	d505      	bpl.n	801e9c6 <_fwalk_sglue+0x22>
 801e9ba:	6824      	ldr	r4, [r4, #0]
 801e9bc:	2c00      	cmp	r4, #0
 801e9be:	d1f7      	bne.n	801e9b0 <_fwalk_sglue+0xc>
 801e9c0:	4630      	mov	r0, r6
 801e9c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e9c6:	89ab      	ldrh	r3, [r5, #12]
 801e9c8:	2b01      	cmp	r3, #1
 801e9ca:	d907      	bls.n	801e9dc <_fwalk_sglue+0x38>
 801e9cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e9d0:	3301      	adds	r3, #1
 801e9d2:	d003      	beq.n	801e9dc <_fwalk_sglue+0x38>
 801e9d4:	4629      	mov	r1, r5
 801e9d6:	4638      	mov	r0, r7
 801e9d8:	47c0      	blx	r8
 801e9da:	4306      	orrs	r6, r0
 801e9dc:	3568      	adds	r5, #104	@ 0x68
 801e9de:	e7e9      	b.n	801e9b4 <_fwalk_sglue+0x10>

0801e9e0 <iprintf>:
 801e9e0:	b40f      	push	{r0, r1, r2, r3}
 801e9e2:	b507      	push	{r0, r1, r2, lr}
 801e9e4:	4906      	ldr	r1, [pc, #24]	@ (801ea00 <iprintf+0x20>)
 801e9e6:	ab04      	add	r3, sp, #16
 801e9e8:	6808      	ldr	r0, [r1, #0]
 801e9ea:	f853 2b04 	ldr.w	r2, [r3], #4
 801e9ee:	6881      	ldr	r1, [r0, #8]
 801e9f0:	9301      	str	r3, [sp, #4]
 801e9f2:	f000 fca1 	bl	801f338 <_vfiprintf_r>
 801e9f6:	b003      	add	sp, #12
 801e9f8:	f85d eb04 	ldr.w	lr, [sp], #4
 801e9fc:	b004      	add	sp, #16
 801e9fe:	4770      	bx	lr
 801ea00:	20000148 	.word	0x20000148

0801ea04 <_puts_r>:
 801ea04:	6a03      	ldr	r3, [r0, #32]
 801ea06:	b570      	push	{r4, r5, r6, lr}
 801ea08:	6884      	ldr	r4, [r0, #8]
 801ea0a:	4605      	mov	r5, r0
 801ea0c:	460e      	mov	r6, r1
 801ea0e:	b90b      	cbnz	r3, 801ea14 <_puts_r+0x10>
 801ea10:	f7ff ffb0 	bl	801e974 <__sinit>
 801ea14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ea16:	07db      	lsls	r3, r3, #31
 801ea18:	d405      	bmi.n	801ea26 <_puts_r+0x22>
 801ea1a:	89a3      	ldrh	r3, [r4, #12]
 801ea1c:	0598      	lsls	r0, r3, #22
 801ea1e:	d402      	bmi.n	801ea26 <_puts_r+0x22>
 801ea20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ea22:	f000 fa8e 	bl	801ef42 <__retarget_lock_acquire_recursive>
 801ea26:	89a3      	ldrh	r3, [r4, #12]
 801ea28:	0719      	lsls	r1, r3, #28
 801ea2a:	d502      	bpl.n	801ea32 <_puts_r+0x2e>
 801ea2c:	6923      	ldr	r3, [r4, #16]
 801ea2e:	2b00      	cmp	r3, #0
 801ea30:	d135      	bne.n	801ea9e <_puts_r+0x9a>
 801ea32:	4621      	mov	r1, r4
 801ea34:	4628      	mov	r0, r5
 801ea36:	f000 f923 	bl	801ec80 <__swsetup_r>
 801ea3a:	b380      	cbz	r0, 801ea9e <_puts_r+0x9a>
 801ea3c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801ea40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ea42:	07da      	lsls	r2, r3, #31
 801ea44:	d405      	bmi.n	801ea52 <_puts_r+0x4e>
 801ea46:	89a3      	ldrh	r3, [r4, #12]
 801ea48:	059b      	lsls	r3, r3, #22
 801ea4a:	d402      	bmi.n	801ea52 <_puts_r+0x4e>
 801ea4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ea4e:	f000 fa79 	bl	801ef44 <__retarget_lock_release_recursive>
 801ea52:	4628      	mov	r0, r5
 801ea54:	bd70      	pop	{r4, r5, r6, pc}
 801ea56:	2b00      	cmp	r3, #0
 801ea58:	da04      	bge.n	801ea64 <_puts_r+0x60>
 801ea5a:	69a2      	ldr	r2, [r4, #24]
 801ea5c:	429a      	cmp	r2, r3
 801ea5e:	dc17      	bgt.n	801ea90 <_puts_r+0x8c>
 801ea60:	290a      	cmp	r1, #10
 801ea62:	d015      	beq.n	801ea90 <_puts_r+0x8c>
 801ea64:	6823      	ldr	r3, [r4, #0]
 801ea66:	1c5a      	adds	r2, r3, #1
 801ea68:	6022      	str	r2, [r4, #0]
 801ea6a:	7019      	strb	r1, [r3, #0]
 801ea6c:	68a3      	ldr	r3, [r4, #8]
 801ea6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ea72:	3b01      	subs	r3, #1
 801ea74:	60a3      	str	r3, [r4, #8]
 801ea76:	2900      	cmp	r1, #0
 801ea78:	d1ed      	bne.n	801ea56 <_puts_r+0x52>
 801ea7a:	2b00      	cmp	r3, #0
 801ea7c:	da11      	bge.n	801eaa2 <_puts_r+0x9e>
 801ea7e:	4622      	mov	r2, r4
 801ea80:	210a      	movs	r1, #10
 801ea82:	4628      	mov	r0, r5
 801ea84:	f000 f8be 	bl	801ec04 <__swbuf_r>
 801ea88:	3001      	adds	r0, #1
 801ea8a:	d0d7      	beq.n	801ea3c <_puts_r+0x38>
 801ea8c:	250a      	movs	r5, #10
 801ea8e:	e7d7      	b.n	801ea40 <_puts_r+0x3c>
 801ea90:	4622      	mov	r2, r4
 801ea92:	4628      	mov	r0, r5
 801ea94:	f000 f8b6 	bl	801ec04 <__swbuf_r>
 801ea98:	3001      	adds	r0, #1
 801ea9a:	d1e7      	bne.n	801ea6c <_puts_r+0x68>
 801ea9c:	e7ce      	b.n	801ea3c <_puts_r+0x38>
 801ea9e:	3e01      	subs	r6, #1
 801eaa0:	e7e4      	b.n	801ea6c <_puts_r+0x68>
 801eaa2:	6823      	ldr	r3, [r4, #0]
 801eaa4:	1c5a      	adds	r2, r3, #1
 801eaa6:	6022      	str	r2, [r4, #0]
 801eaa8:	220a      	movs	r2, #10
 801eaaa:	701a      	strb	r2, [r3, #0]
 801eaac:	e7ee      	b.n	801ea8c <_puts_r+0x88>
	...

0801eab0 <puts>:
 801eab0:	4b02      	ldr	r3, [pc, #8]	@ (801eabc <puts+0xc>)
 801eab2:	4601      	mov	r1, r0
 801eab4:	6818      	ldr	r0, [r3, #0]
 801eab6:	f7ff bfa5 	b.w	801ea04 <_puts_r>
 801eaba:	bf00      	nop
 801eabc:	20000148 	.word	0x20000148

0801eac0 <siprintf>:
 801eac0:	b40e      	push	{r1, r2, r3}
 801eac2:	b510      	push	{r4, lr}
 801eac4:	b09d      	sub	sp, #116	@ 0x74
 801eac6:	ab1f      	add	r3, sp, #124	@ 0x7c
 801eac8:	9002      	str	r0, [sp, #8]
 801eaca:	9006      	str	r0, [sp, #24]
 801eacc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801ead0:	480a      	ldr	r0, [pc, #40]	@ (801eafc <siprintf+0x3c>)
 801ead2:	9107      	str	r1, [sp, #28]
 801ead4:	9104      	str	r1, [sp, #16]
 801ead6:	490a      	ldr	r1, [pc, #40]	@ (801eb00 <siprintf+0x40>)
 801ead8:	f853 2b04 	ldr.w	r2, [r3], #4
 801eadc:	9105      	str	r1, [sp, #20]
 801eade:	2400      	movs	r4, #0
 801eae0:	a902      	add	r1, sp, #8
 801eae2:	6800      	ldr	r0, [r0, #0]
 801eae4:	9301      	str	r3, [sp, #4]
 801eae6:	941b      	str	r4, [sp, #108]	@ 0x6c
 801eae8:	f000 fb00 	bl	801f0ec <_svfiprintf_r>
 801eaec:	9b02      	ldr	r3, [sp, #8]
 801eaee:	701c      	strb	r4, [r3, #0]
 801eaf0:	b01d      	add	sp, #116	@ 0x74
 801eaf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eaf6:	b003      	add	sp, #12
 801eaf8:	4770      	bx	lr
 801eafa:	bf00      	nop
 801eafc:	20000148 	.word	0x20000148
 801eb00:	ffff0208 	.word	0xffff0208

0801eb04 <__sread>:
 801eb04:	b510      	push	{r4, lr}
 801eb06:	460c      	mov	r4, r1
 801eb08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb0c:	f000 f9c0 	bl	801ee90 <_read_r>
 801eb10:	2800      	cmp	r0, #0
 801eb12:	bfab      	itete	ge
 801eb14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801eb16:	89a3      	ldrhlt	r3, [r4, #12]
 801eb18:	181b      	addge	r3, r3, r0
 801eb1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801eb1e:	bfac      	ite	ge
 801eb20:	6563      	strge	r3, [r4, #84]	@ 0x54
 801eb22:	81a3      	strhlt	r3, [r4, #12]
 801eb24:	bd10      	pop	{r4, pc}

0801eb26 <__swrite>:
 801eb26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eb2a:	461f      	mov	r7, r3
 801eb2c:	898b      	ldrh	r3, [r1, #12]
 801eb2e:	05db      	lsls	r3, r3, #23
 801eb30:	4605      	mov	r5, r0
 801eb32:	460c      	mov	r4, r1
 801eb34:	4616      	mov	r6, r2
 801eb36:	d505      	bpl.n	801eb44 <__swrite+0x1e>
 801eb38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb3c:	2302      	movs	r3, #2
 801eb3e:	2200      	movs	r2, #0
 801eb40:	f000 f994 	bl	801ee6c <_lseek_r>
 801eb44:	89a3      	ldrh	r3, [r4, #12]
 801eb46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801eb4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801eb4e:	81a3      	strh	r3, [r4, #12]
 801eb50:	4632      	mov	r2, r6
 801eb52:	463b      	mov	r3, r7
 801eb54:	4628      	mov	r0, r5
 801eb56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801eb5a:	f000 b9bb 	b.w	801eed4 <_write_r>

0801eb5e <__sseek>:
 801eb5e:	b510      	push	{r4, lr}
 801eb60:	460c      	mov	r4, r1
 801eb62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb66:	f000 f981 	bl	801ee6c <_lseek_r>
 801eb6a:	1c43      	adds	r3, r0, #1
 801eb6c:	89a3      	ldrh	r3, [r4, #12]
 801eb6e:	bf15      	itete	ne
 801eb70:	6560      	strne	r0, [r4, #84]	@ 0x54
 801eb72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801eb76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801eb7a:	81a3      	strheq	r3, [r4, #12]
 801eb7c:	bf18      	it	ne
 801eb7e:	81a3      	strhne	r3, [r4, #12]
 801eb80:	bd10      	pop	{r4, pc}

0801eb82 <__sclose>:
 801eb82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801eb86:	f000 b903 	b.w	801ed90 <_close_r>

0801eb8a <_vsniprintf_r>:
 801eb8a:	b530      	push	{r4, r5, lr}
 801eb8c:	4614      	mov	r4, r2
 801eb8e:	2c00      	cmp	r4, #0
 801eb90:	b09b      	sub	sp, #108	@ 0x6c
 801eb92:	4605      	mov	r5, r0
 801eb94:	461a      	mov	r2, r3
 801eb96:	da05      	bge.n	801eba4 <_vsniprintf_r+0x1a>
 801eb98:	238b      	movs	r3, #139	@ 0x8b
 801eb9a:	6003      	str	r3, [r0, #0]
 801eb9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801eba0:	b01b      	add	sp, #108	@ 0x6c
 801eba2:	bd30      	pop	{r4, r5, pc}
 801eba4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801eba8:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ebac:	f04f 0300 	mov.w	r3, #0
 801ebb0:	9319      	str	r3, [sp, #100]	@ 0x64
 801ebb2:	bf14      	ite	ne
 801ebb4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801ebb8:	4623      	moveq	r3, r4
 801ebba:	9302      	str	r3, [sp, #8]
 801ebbc:	9305      	str	r3, [sp, #20]
 801ebbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801ebc2:	9100      	str	r1, [sp, #0]
 801ebc4:	9104      	str	r1, [sp, #16]
 801ebc6:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ebca:	4669      	mov	r1, sp
 801ebcc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ebce:	f000 fa8d 	bl	801f0ec <_svfiprintf_r>
 801ebd2:	1c43      	adds	r3, r0, #1
 801ebd4:	bfbc      	itt	lt
 801ebd6:	238b      	movlt	r3, #139	@ 0x8b
 801ebd8:	602b      	strlt	r3, [r5, #0]
 801ebda:	2c00      	cmp	r4, #0
 801ebdc:	d0e0      	beq.n	801eba0 <_vsniprintf_r+0x16>
 801ebde:	9b00      	ldr	r3, [sp, #0]
 801ebe0:	2200      	movs	r2, #0
 801ebe2:	701a      	strb	r2, [r3, #0]
 801ebe4:	e7dc      	b.n	801eba0 <_vsniprintf_r+0x16>
	...

0801ebe8 <vsniprintf>:
 801ebe8:	b507      	push	{r0, r1, r2, lr}
 801ebea:	9300      	str	r3, [sp, #0]
 801ebec:	4613      	mov	r3, r2
 801ebee:	460a      	mov	r2, r1
 801ebf0:	4601      	mov	r1, r0
 801ebf2:	4803      	ldr	r0, [pc, #12]	@ (801ec00 <vsniprintf+0x18>)
 801ebf4:	6800      	ldr	r0, [r0, #0]
 801ebf6:	f7ff ffc8 	bl	801eb8a <_vsniprintf_r>
 801ebfa:	b003      	add	sp, #12
 801ebfc:	f85d fb04 	ldr.w	pc, [sp], #4
 801ec00:	20000148 	.word	0x20000148

0801ec04 <__swbuf_r>:
 801ec04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec06:	460e      	mov	r6, r1
 801ec08:	4614      	mov	r4, r2
 801ec0a:	4605      	mov	r5, r0
 801ec0c:	b118      	cbz	r0, 801ec16 <__swbuf_r+0x12>
 801ec0e:	6a03      	ldr	r3, [r0, #32]
 801ec10:	b90b      	cbnz	r3, 801ec16 <__swbuf_r+0x12>
 801ec12:	f7ff feaf 	bl	801e974 <__sinit>
 801ec16:	69a3      	ldr	r3, [r4, #24]
 801ec18:	60a3      	str	r3, [r4, #8]
 801ec1a:	89a3      	ldrh	r3, [r4, #12]
 801ec1c:	071a      	lsls	r2, r3, #28
 801ec1e:	d501      	bpl.n	801ec24 <__swbuf_r+0x20>
 801ec20:	6923      	ldr	r3, [r4, #16]
 801ec22:	b943      	cbnz	r3, 801ec36 <__swbuf_r+0x32>
 801ec24:	4621      	mov	r1, r4
 801ec26:	4628      	mov	r0, r5
 801ec28:	f000 f82a 	bl	801ec80 <__swsetup_r>
 801ec2c:	b118      	cbz	r0, 801ec36 <__swbuf_r+0x32>
 801ec2e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801ec32:	4638      	mov	r0, r7
 801ec34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ec36:	6823      	ldr	r3, [r4, #0]
 801ec38:	6922      	ldr	r2, [r4, #16]
 801ec3a:	1a98      	subs	r0, r3, r2
 801ec3c:	6963      	ldr	r3, [r4, #20]
 801ec3e:	b2f6      	uxtb	r6, r6
 801ec40:	4283      	cmp	r3, r0
 801ec42:	4637      	mov	r7, r6
 801ec44:	dc05      	bgt.n	801ec52 <__swbuf_r+0x4e>
 801ec46:	4621      	mov	r1, r4
 801ec48:	4628      	mov	r0, r5
 801ec4a:	f000 fe9d 	bl	801f988 <_fflush_r>
 801ec4e:	2800      	cmp	r0, #0
 801ec50:	d1ed      	bne.n	801ec2e <__swbuf_r+0x2a>
 801ec52:	68a3      	ldr	r3, [r4, #8]
 801ec54:	3b01      	subs	r3, #1
 801ec56:	60a3      	str	r3, [r4, #8]
 801ec58:	6823      	ldr	r3, [r4, #0]
 801ec5a:	1c5a      	adds	r2, r3, #1
 801ec5c:	6022      	str	r2, [r4, #0]
 801ec5e:	701e      	strb	r6, [r3, #0]
 801ec60:	6962      	ldr	r2, [r4, #20]
 801ec62:	1c43      	adds	r3, r0, #1
 801ec64:	429a      	cmp	r2, r3
 801ec66:	d004      	beq.n	801ec72 <__swbuf_r+0x6e>
 801ec68:	89a3      	ldrh	r3, [r4, #12]
 801ec6a:	07db      	lsls	r3, r3, #31
 801ec6c:	d5e1      	bpl.n	801ec32 <__swbuf_r+0x2e>
 801ec6e:	2e0a      	cmp	r6, #10
 801ec70:	d1df      	bne.n	801ec32 <__swbuf_r+0x2e>
 801ec72:	4621      	mov	r1, r4
 801ec74:	4628      	mov	r0, r5
 801ec76:	f000 fe87 	bl	801f988 <_fflush_r>
 801ec7a:	2800      	cmp	r0, #0
 801ec7c:	d0d9      	beq.n	801ec32 <__swbuf_r+0x2e>
 801ec7e:	e7d6      	b.n	801ec2e <__swbuf_r+0x2a>

0801ec80 <__swsetup_r>:
 801ec80:	b538      	push	{r3, r4, r5, lr}
 801ec82:	4b29      	ldr	r3, [pc, #164]	@ (801ed28 <__swsetup_r+0xa8>)
 801ec84:	4605      	mov	r5, r0
 801ec86:	6818      	ldr	r0, [r3, #0]
 801ec88:	460c      	mov	r4, r1
 801ec8a:	b118      	cbz	r0, 801ec94 <__swsetup_r+0x14>
 801ec8c:	6a03      	ldr	r3, [r0, #32]
 801ec8e:	b90b      	cbnz	r3, 801ec94 <__swsetup_r+0x14>
 801ec90:	f7ff fe70 	bl	801e974 <__sinit>
 801ec94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ec98:	0719      	lsls	r1, r3, #28
 801ec9a:	d422      	bmi.n	801ece2 <__swsetup_r+0x62>
 801ec9c:	06da      	lsls	r2, r3, #27
 801ec9e:	d407      	bmi.n	801ecb0 <__swsetup_r+0x30>
 801eca0:	2209      	movs	r2, #9
 801eca2:	602a      	str	r2, [r5, #0]
 801eca4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801eca8:	81a3      	strh	r3, [r4, #12]
 801ecaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ecae:	e033      	b.n	801ed18 <__swsetup_r+0x98>
 801ecb0:	0758      	lsls	r0, r3, #29
 801ecb2:	d512      	bpl.n	801ecda <__swsetup_r+0x5a>
 801ecb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ecb6:	b141      	cbz	r1, 801ecca <__swsetup_r+0x4a>
 801ecb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ecbc:	4299      	cmp	r1, r3
 801ecbe:	d002      	beq.n	801ecc6 <__swsetup_r+0x46>
 801ecc0:	4628      	mov	r0, r5
 801ecc2:	f000 f96d 	bl	801efa0 <_free_r>
 801ecc6:	2300      	movs	r3, #0
 801ecc8:	6363      	str	r3, [r4, #52]	@ 0x34
 801ecca:	89a3      	ldrh	r3, [r4, #12]
 801eccc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801ecd0:	81a3      	strh	r3, [r4, #12]
 801ecd2:	2300      	movs	r3, #0
 801ecd4:	6063      	str	r3, [r4, #4]
 801ecd6:	6923      	ldr	r3, [r4, #16]
 801ecd8:	6023      	str	r3, [r4, #0]
 801ecda:	89a3      	ldrh	r3, [r4, #12]
 801ecdc:	f043 0308 	orr.w	r3, r3, #8
 801ece0:	81a3      	strh	r3, [r4, #12]
 801ece2:	6923      	ldr	r3, [r4, #16]
 801ece4:	b94b      	cbnz	r3, 801ecfa <__swsetup_r+0x7a>
 801ece6:	89a3      	ldrh	r3, [r4, #12]
 801ece8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801ecec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ecf0:	d003      	beq.n	801ecfa <__swsetup_r+0x7a>
 801ecf2:	4621      	mov	r1, r4
 801ecf4:	4628      	mov	r0, r5
 801ecf6:	f000 fea7 	bl	801fa48 <__smakebuf_r>
 801ecfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ecfe:	f013 0201 	ands.w	r2, r3, #1
 801ed02:	d00a      	beq.n	801ed1a <__swsetup_r+0x9a>
 801ed04:	2200      	movs	r2, #0
 801ed06:	60a2      	str	r2, [r4, #8]
 801ed08:	6962      	ldr	r2, [r4, #20]
 801ed0a:	4252      	negs	r2, r2
 801ed0c:	61a2      	str	r2, [r4, #24]
 801ed0e:	6922      	ldr	r2, [r4, #16]
 801ed10:	b942      	cbnz	r2, 801ed24 <__swsetup_r+0xa4>
 801ed12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ed16:	d1c5      	bne.n	801eca4 <__swsetup_r+0x24>
 801ed18:	bd38      	pop	{r3, r4, r5, pc}
 801ed1a:	0799      	lsls	r1, r3, #30
 801ed1c:	bf58      	it	pl
 801ed1e:	6962      	ldrpl	r2, [r4, #20]
 801ed20:	60a2      	str	r2, [r4, #8]
 801ed22:	e7f4      	b.n	801ed0e <__swsetup_r+0x8e>
 801ed24:	2000      	movs	r0, #0
 801ed26:	e7f7      	b.n	801ed18 <__swsetup_r+0x98>
 801ed28:	20000148 	.word	0x20000148

0801ed2c <memcmp>:
 801ed2c:	b510      	push	{r4, lr}
 801ed2e:	3901      	subs	r1, #1
 801ed30:	4402      	add	r2, r0
 801ed32:	4290      	cmp	r0, r2
 801ed34:	d101      	bne.n	801ed3a <memcmp+0xe>
 801ed36:	2000      	movs	r0, #0
 801ed38:	e005      	b.n	801ed46 <memcmp+0x1a>
 801ed3a:	7803      	ldrb	r3, [r0, #0]
 801ed3c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ed40:	42a3      	cmp	r3, r4
 801ed42:	d001      	beq.n	801ed48 <memcmp+0x1c>
 801ed44:	1b18      	subs	r0, r3, r4
 801ed46:	bd10      	pop	{r4, pc}
 801ed48:	3001      	adds	r0, #1
 801ed4a:	e7f2      	b.n	801ed32 <memcmp+0x6>

0801ed4c <memmove>:
 801ed4c:	4288      	cmp	r0, r1
 801ed4e:	b510      	push	{r4, lr}
 801ed50:	eb01 0402 	add.w	r4, r1, r2
 801ed54:	d902      	bls.n	801ed5c <memmove+0x10>
 801ed56:	4284      	cmp	r4, r0
 801ed58:	4623      	mov	r3, r4
 801ed5a:	d807      	bhi.n	801ed6c <memmove+0x20>
 801ed5c:	1e43      	subs	r3, r0, #1
 801ed5e:	42a1      	cmp	r1, r4
 801ed60:	d008      	beq.n	801ed74 <memmove+0x28>
 801ed62:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ed66:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ed6a:	e7f8      	b.n	801ed5e <memmove+0x12>
 801ed6c:	4402      	add	r2, r0
 801ed6e:	4601      	mov	r1, r0
 801ed70:	428a      	cmp	r2, r1
 801ed72:	d100      	bne.n	801ed76 <memmove+0x2a>
 801ed74:	bd10      	pop	{r4, pc}
 801ed76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ed7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ed7e:	e7f7      	b.n	801ed70 <memmove+0x24>

0801ed80 <memset>:
 801ed80:	4402      	add	r2, r0
 801ed82:	4603      	mov	r3, r0
 801ed84:	4293      	cmp	r3, r2
 801ed86:	d100      	bne.n	801ed8a <memset+0xa>
 801ed88:	4770      	bx	lr
 801ed8a:	f803 1b01 	strb.w	r1, [r3], #1
 801ed8e:	e7f9      	b.n	801ed84 <memset+0x4>

0801ed90 <_close_r>:
 801ed90:	b538      	push	{r3, r4, r5, lr}
 801ed92:	4d06      	ldr	r5, [pc, #24]	@ (801edac <_close_r+0x1c>)
 801ed94:	2300      	movs	r3, #0
 801ed96:	4604      	mov	r4, r0
 801ed98:	4608      	mov	r0, r1
 801ed9a:	602b      	str	r3, [r5, #0]
 801ed9c:	f7e2 f8c8 	bl	8000f30 <_close>
 801eda0:	1c43      	adds	r3, r0, #1
 801eda2:	d102      	bne.n	801edaa <_close_r+0x1a>
 801eda4:	682b      	ldr	r3, [r5, #0]
 801eda6:	b103      	cbz	r3, 801edaa <_close_r+0x1a>
 801eda8:	6023      	str	r3, [r4, #0]
 801edaa:	bd38      	pop	{r3, r4, r5, pc}
 801edac:	20006440 	.word	0x20006440

0801edb0 <_reclaim_reent>:
 801edb0:	4b2d      	ldr	r3, [pc, #180]	@ (801ee68 <_reclaim_reent+0xb8>)
 801edb2:	681b      	ldr	r3, [r3, #0]
 801edb4:	4283      	cmp	r3, r0
 801edb6:	b570      	push	{r4, r5, r6, lr}
 801edb8:	4604      	mov	r4, r0
 801edba:	d053      	beq.n	801ee64 <_reclaim_reent+0xb4>
 801edbc:	69c3      	ldr	r3, [r0, #28]
 801edbe:	b31b      	cbz	r3, 801ee08 <_reclaim_reent+0x58>
 801edc0:	68db      	ldr	r3, [r3, #12]
 801edc2:	b163      	cbz	r3, 801edde <_reclaim_reent+0x2e>
 801edc4:	2500      	movs	r5, #0
 801edc6:	69e3      	ldr	r3, [r4, #28]
 801edc8:	68db      	ldr	r3, [r3, #12]
 801edca:	5959      	ldr	r1, [r3, r5]
 801edcc:	b9b1      	cbnz	r1, 801edfc <_reclaim_reent+0x4c>
 801edce:	3504      	adds	r5, #4
 801edd0:	2d80      	cmp	r5, #128	@ 0x80
 801edd2:	d1f8      	bne.n	801edc6 <_reclaim_reent+0x16>
 801edd4:	69e3      	ldr	r3, [r4, #28]
 801edd6:	4620      	mov	r0, r4
 801edd8:	68d9      	ldr	r1, [r3, #12]
 801edda:	f000 f8e1 	bl	801efa0 <_free_r>
 801edde:	69e3      	ldr	r3, [r4, #28]
 801ede0:	6819      	ldr	r1, [r3, #0]
 801ede2:	b111      	cbz	r1, 801edea <_reclaim_reent+0x3a>
 801ede4:	4620      	mov	r0, r4
 801ede6:	f000 f8db 	bl	801efa0 <_free_r>
 801edea:	69e3      	ldr	r3, [r4, #28]
 801edec:	689d      	ldr	r5, [r3, #8]
 801edee:	b15d      	cbz	r5, 801ee08 <_reclaim_reent+0x58>
 801edf0:	4629      	mov	r1, r5
 801edf2:	4620      	mov	r0, r4
 801edf4:	682d      	ldr	r5, [r5, #0]
 801edf6:	f000 f8d3 	bl	801efa0 <_free_r>
 801edfa:	e7f8      	b.n	801edee <_reclaim_reent+0x3e>
 801edfc:	680e      	ldr	r6, [r1, #0]
 801edfe:	4620      	mov	r0, r4
 801ee00:	f000 f8ce 	bl	801efa0 <_free_r>
 801ee04:	4631      	mov	r1, r6
 801ee06:	e7e1      	b.n	801edcc <_reclaim_reent+0x1c>
 801ee08:	6961      	ldr	r1, [r4, #20]
 801ee0a:	b111      	cbz	r1, 801ee12 <_reclaim_reent+0x62>
 801ee0c:	4620      	mov	r0, r4
 801ee0e:	f000 f8c7 	bl	801efa0 <_free_r>
 801ee12:	69e1      	ldr	r1, [r4, #28]
 801ee14:	b111      	cbz	r1, 801ee1c <_reclaim_reent+0x6c>
 801ee16:	4620      	mov	r0, r4
 801ee18:	f000 f8c2 	bl	801efa0 <_free_r>
 801ee1c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801ee1e:	b111      	cbz	r1, 801ee26 <_reclaim_reent+0x76>
 801ee20:	4620      	mov	r0, r4
 801ee22:	f000 f8bd 	bl	801efa0 <_free_r>
 801ee26:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ee28:	b111      	cbz	r1, 801ee30 <_reclaim_reent+0x80>
 801ee2a:	4620      	mov	r0, r4
 801ee2c:	f000 f8b8 	bl	801efa0 <_free_r>
 801ee30:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801ee32:	b111      	cbz	r1, 801ee3a <_reclaim_reent+0x8a>
 801ee34:	4620      	mov	r0, r4
 801ee36:	f000 f8b3 	bl	801efa0 <_free_r>
 801ee3a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801ee3c:	b111      	cbz	r1, 801ee44 <_reclaim_reent+0x94>
 801ee3e:	4620      	mov	r0, r4
 801ee40:	f000 f8ae 	bl	801efa0 <_free_r>
 801ee44:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801ee46:	b111      	cbz	r1, 801ee4e <_reclaim_reent+0x9e>
 801ee48:	4620      	mov	r0, r4
 801ee4a:	f000 f8a9 	bl	801efa0 <_free_r>
 801ee4e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801ee50:	b111      	cbz	r1, 801ee58 <_reclaim_reent+0xa8>
 801ee52:	4620      	mov	r0, r4
 801ee54:	f000 f8a4 	bl	801efa0 <_free_r>
 801ee58:	6a23      	ldr	r3, [r4, #32]
 801ee5a:	b11b      	cbz	r3, 801ee64 <_reclaim_reent+0xb4>
 801ee5c:	4620      	mov	r0, r4
 801ee5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ee62:	4718      	bx	r3
 801ee64:	bd70      	pop	{r4, r5, r6, pc}
 801ee66:	bf00      	nop
 801ee68:	20000148 	.word	0x20000148

0801ee6c <_lseek_r>:
 801ee6c:	b538      	push	{r3, r4, r5, lr}
 801ee6e:	4d07      	ldr	r5, [pc, #28]	@ (801ee8c <_lseek_r+0x20>)
 801ee70:	4604      	mov	r4, r0
 801ee72:	4608      	mov	r0, r1
 801ee74:	4611      	mov	r1, r2
 801ee76:	2200      	movs	r2, #0
 801ee78:	602a      	str	r2, [r5, #0]
 801ee7a:	461a      	mov	r2, r3
 801ee7c:	f7e2 f87f 	bl	8000f7e <_lseek>
 801ee80:	1c43      	adds	r3, r0, #1
 801ee82:	d102      	bne.n	801ee8a <_lseek_r+0x1e>
 801ee84:	682b      	ldr	r3, [r5, #0]
 801ee86:	b103      	cbz	r3, 801ee8a <_lseek_r+0x1e>
 801ee88:	6023      	str	r3, [r4, #0]
 801ee8a:	bd38      	pop	{r3, r4, r5, pc}
 801ee8c:	20006440 	.word	0x20006440

0801ee90 <_read_r>:
 801ee90:	b538      	push	{r3, r4, r5, lr}
 801ee92:	4d07      	ldr	r5, [pc, #28]	@ (801eeb0 <_read_r+0x20>)
 801ee94:	4604      	mov	r4, r0
 801ee96:	4608      	mov	r0, r1
 801ee98:	4611      	mov	r1, r2
 801ee9a:	2200      	movs	r2, #0
 801ee9c:	602a      	str	r2, [r5, #0]
 801ee9e:	461a      	mov	r2, r3
 801eea0:	f7e2 f80d 	bl	8000ebe <_read>
 801eea4:	1c43      	adds	r3, r0, #1
 801eea6:	d102      	bne.n	801eeae <_read_r+0x1e>
 801eea8:	682b      	ldr	r3, [r5, #0]
 801eeaa:	b103      	cbz	r3, 801eeae <_read_r+0x1e>
 801eeac:	6023      	str	r3, [r4, #0]
 801eeae:	bd38      	pop	{r3, r4, r5, pc}
 801eeb0:	20006440 	.word	0x20006440

0801eeb4 <_sbrk_r>:
 801eeb4:	b538      	push	{r3, r4, r5, lr}
 801eeb6:	4d06      	ldr	r5, [pc, #24]	@ (801eed0 <_sbrk_r+0x1c>)
 801eeb8:	2300      	movs	r3, #0
 801eeba:	4604      	mov	r4, r0
 801eebc:	4608      	mov	r0, r1
 801eebe:	602b      	str	r3, [r5, #0]
 801eec0:	f7e2 f86a 	bl	8000f98 <_sbrk>
 801eec4:	1c43      	adds	r3, r0, #1
 801eec6:	d102      	bne.n	801eece <_sbrk_r+0x1a>
 801eec8:	682b      	ldr	r3, [r5, #0]
 801eeca:	b103      	cbz	r3, 801eece <_sbrk_r+0x1a>
 801eecc:	6023      	str	r3, [r4, #0]
 801eece:	bd38      	pop	{r3, r4, r5, pc}
 801eed0:	20006440 	.word	0x20006440

0801eed4 <_write_r>:
 801eed4:	b538      	push	{r3, r4, r5, lr}
 801eed6:	4d07      	ldr	r5, [pc, #28]	@ (801eef4 <_write_r+0x20>)
 801eed8:	4604      	mov	r4, r0
 801eeda:	4608      	mov	r0, r1
 801eedc:	4611      	mov	r1, r2
 801eede:	2200      	movs	r2, #0
 801eee0:	602a      	str	r2, [r5, #0]
 801eee2:	461a      	mov	r2, r3
 801eee4:	f7e2 f808 	bl	8000ef8 <_write>
 801eee8:	1c43      	adds	r3, r0, #1
 801eeea:	d102      	bne.n	801eef2 <_write_r+0x1e>
 801eeec:	682b      	ldr	r3, [r5, #0]
 801eeee:	b103      	cbz	r3, 801eef2 <_write_r+0x1e>
 801eef0:	6023      	str	r3, [r4, #0]
 801eef2:	bd38      	pop	{r3, r4, r5, pc}
 801eef4:	20006440 	.word	0x20006440

0801eef8 <__libc_init_array>:
 801eef8:	b570      	push	{r4, r5, r6, lr}
 801eefa:	4d0d      	ldr	r5, [pc, #52]	@ (801ef30 <__libc_init_array+0x38>)
 801eefc:	4c0d      	ldr	r4, [pc, #52]	@ (801ef34 <__libc_init_array+0x3c>)
 801eefe:	1b64      	subs	r4, r4, r5
 801ef00:	10a4      	asrs	r4, r4, #2
 801ef02:	2600      	movs	r6, #0
 801ef04:	42a6      	cmp	r6, r4
 801ef06:	d109      	bne.n	801ef1c <__libc_init_array+0x24>
 801ef08:	4d0b      	ldr	r5, [pc, #44]	@ (801ef38 <__libc_init_array+0x40>)
 801ef0a:	4c0c      	ldr	r4, [pc, #48]	@ (801ef3c <__libc_init_array+0x44>)
 801ef0c:	f000 fe7c 	bl	801fc08 <_init>
 801ef10:	1b64      	subs	r4, r4, r5
 801ef12:	10a4      	asrs	r4, r4, #2
 801ef14:	2600      	movs	r6, #0
 801ef16:	42a6      	cmp	r6, r4
 801ef18:	d105      	bne.n	801ef26 <__libc_init_array+0x2e>
 801ef1a:	bd70      	pop	{r4, r5, r6, pc}
 801ef1c:	f855 3b04 	ldr.w	r3, [r5], #4
 801ef20:	4798      	blx	r3
 801ef22:	3601      	adds	r6, #1
 801ef24:	e7ee      	b.n	801ef04 <__libc_init_array+0xc>
 801ef26:	f855 3b04 	ldr.w	r3, [r5], #4
 801ef2a:	4798      	blx	r3
 801ef2c:	3601      	adds	r6, #1
 801ef2e:	e7f2      	b.n	801ef16 <__libc_init_array+0x1e>
 801ef30:	080237a8 	.word	0x080237a8
 801ef34:	080237a8 	.word	0x080237a8
 801ef38:	080237a8 	.word	0x080237a8
 801ef3c:	080237ac 	.word	0x080237ac

0801ef40 <__retarget_lock_init_recursive>:
 801ef40:	4770      	bx	lr

0801ef42 <__retarget_lock_acquire_recursive>:
 801ef42:	4770      	bx	lr

0801ef44 <__retarget_lock_release_recursive>:
 801ef44:	4770      	bx	lr

0801ef46 <memcpy>:
 801ef46:	440a      	add	r2, r1
 801ef48:	4291      	cmp	r1, r2
 801ef4a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801ef4e:	d100      	bne.n	801ef52 <memcpy+0xc>
 801ef50:	4770      	bx	lr
 801ef52:	b510      	push	{r4, lr}
 801ef54:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ef58:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ef5c:	4291      	cmp	r1, r2
 801ef5e:	d1f9      	bne.n	801ef54 <memcpy+0xe>
 801ef60:	bd10      	pop	{r4, pc}
	...

0801ef64 <__assert_func>:
 801ef64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ef66:	4614      	mov	r4, r2
 801ef68:	461a      	mov	r2, r3
 801ef6a:	4b09      	ldr	r3, [pc, #36]	@ (801ef90 <__assert_func+0x2c>)
 801ef6c:	681b      	ldr	r3, [r3, #0]
 801ef6e:	4605      	mov	r5, r0
 801ef70:	68d8      	ldr	r0, [r3, #12]
 801ef72:	b14c      	cbz	r4, 801ef88 <__assert_func+0x24>
 801ef74:	4b07      	ldr	r3, [pc, #28]	@ (801ef94 <__assert_func+0x30>)
 801ef76:	9100      	str	r1, [sp, #0]
 801ef78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ef7c:	4906      	ldr	r1, [pc, #24]	@ (801ef98 <__assert_func+0x34>)
 801ef7e:	462b      	mov	r3, r5
 801ef80:	f000 fd2a 	bl	801f9d8 <fiprintf>
 801ef84:	f000 fdbe 	bl	801fb04 <abort>
 801ef88:	4b04      	ldr	r3, [pc, #16]	@ (801ef9c <__assert_func+0x38>)
 801ef8a:	461c      	mov	r4, r3
 801ef8c:	e7f3      	b.n	801ef76 <__assert_func+0x12>
 801ef8e:	bf00      	nop
 801ef90:	20000148 	.word	0x20000148
 801ef94:	0802372f 	.word	0x0802372f
 801ef98:	0802373c 	.word	0x0802373c
 801ef9c:	0802376a 	.word	0x0802376a

0801efa0 <_free_r>:
 801efa0:	b538      	push	{r3, r4, r5, lr}
 801efa2:	4605      	mov	r5, r0
 801efa4:	2900      	cmp	r1, #0
 801efa6:	d041      	beq.n	801f02c <_free_r+0x8c>
 801efa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801efac:	1f0c      	subs	r4, r1, #4
 801efae:	2b00      	cmp	r3, #0
 801efb0:	bfb8      	it	lt
 801efb2:	18e4      	addlt	r4, r4, r3
 801efb4:	f7ff fc08 	bl	801e7c8 <__malloc_lock>
 801efb8:	4a1d      	ldr	r2, [pc, #116]	@ (801f030 <_free_r+0x90>)
 801efba:	6813      	ldr	r3, [r2, #0]
 801efbc:	b933      	cbnz	r3, 801efcc <_free_r+0x2c>
 801efbe:	6063      	str	r3, [r4, #4]
 801efc0:	6014      	str	r4, [r2, #0]
 801efc2:	4628      	mov	r0, r5
 801efc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801efc8:	f7ff bc04 	b.w	801e7d4 <__malloc_unlock>
 801efcc:	42a3      	cmp	r3, r4
 801efce:	d908      	bls.n	801efe2 <_free_r+0x42>
 801efd0:	6820      	ldr	r0, [r4, #0]
 801efd2:	1821      	adds	r1, r4, r0
 801efd4:	428b      	cmp	r3, r1
 801efd6:	bf01      	itttt	eq
 801efd8:	6819      	ldreq	r1, [r3, #0]
 801efda:	685b      	ldreq	r3, [r3, #4]
 801efdc:	1809      	addeq	r1, r1, r0
 801efde:	6021      	streq	r1, [r4, #0]
 801efe0:	e7ed      	b.n	801efbe <_free_r+0x1e>
 801efe2:	461a      	mov	r2, r3
 801efe4:	685b      	ldr	r3, [r3, #4]
 801efe6:	b10b      	cbz	r3, 801efec <_free_r+0x4c>
 801efe8:	42a3      	cmp	r3, r4
 801efea:	d9fa      	bls.n	801efe2 <_free_r+0x42>
 801efec:	6811      	ldr	r1, [r2, #0]
 801efee:	1850      	adds	r0, r2, r1
 801eff0:	42a0      	cmp	r0, r4
 801eff2:	d10b      	bne.n	801f00c <_free_r+0x6c>
 801eff4:	6820      	ldr	r0, [r4, #0]
 801eff6:	4401      	add	r1, r0
 801eff8:	1850      	adds	r0, r2, r1
 801effa:	4283      	cmp	r3, r0
 801effc:	6011      	str	r1, [r2, #0]
 801effe:	d1e0      	bne.n	801efc2 <_free_r+0x22>
 801f000:	6818      	ldr	r0, [r3, #0]
 801f002:	685b      	ldr	r3, [r3, #4]
 801f004:	6053      	str	r3, [r2, #4]
 801f006:	4408      	add	r0, r1
 801f008:	6010      	str	r0, [r2, #0]
 801f00a:	e7da      	b.n	801efc2 <_free_r+0x22>
 801f00c:	d902      	bls.n	801f014 <_free_r+0x74>
 801f00e:	230c      	movs	r3, #12
 801f010:	602b      	str	r3, [r5, #0]
 801f012:	e7d6      	b.n	801efc2 <_free_r+0x22>
 801f014:	6820      	ldr	r0, [r4, #0]
 801f016:	1821      	adds	r1, r4, r0
 801f018:	428b      	cmp	r3, r1
 801f01a:	bf04      	itt	eq
 801f01c:	6819      	ldreq	r1, [r3, #0]
 801f01e:	685b      	ldreq	r3, [r3, #4]
 801f020:	6063      	str	r3, [r4, #4]
 801f022:	bf04      	itt	eq
 801f024:	1809      	addeq	r1, r1, r0
 801f026:	6021      	streq	r1, [r4, #0]
 801f028:	6054      	str	r4, [r2, #4]
 801f02a:	e7ca      	b.n	801efc2 <_free_r+0x22>
 801f02c:	bd38      	pop	{r3, r4, r5, pc}
 801f02e:	bf00      	nop
 801f030:	20006300 	.word	0x20006300

0801f034 <__ssputs_r>:
 801f034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f038:	688e      	ldr	r6, [r1, #8]
 801f03a:	461f      	mov	r7, r3
 801f03c:	42be      	cmp	r6, r7
 801f03e:	680b      	ldr	r3, [r1, #0]
 801f040:	4682      	mov	sl, r0
 801f042:	460c      	mov	r4, r1
 801f044:	4690      	mov	r8, r2
 801f046:	d82d      	bhi.n	801f0a4 <__ssputs_r+0x70>
 801f048:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f04c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801f050:	d026      	beq.n	801f0a0 <__ssputs_r+0x6c>
 801f052:	6965      	ldr	r5, [r4, #20]
 801f054:	6909      	ldr	r1, [r1, #16]
 801f056:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f05a:	eba3 0901 	sub.w	r9, r3, r1
 801f05e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f062:	1c7b      	adds	r3, r7, #1
 801f064:	444b      	add	r3, r9
 801f066:	106d      	asrs	r5, r5, #1
 801f068:	429d      	cmp	r5, r3
 801f06a:	bf38      	it	cc
 801f06c:	461d      	movcc	r5, r3
 801f06e:	0553      	lsls	r3, r2, #21
 801f070:	d527      	bpl.n	801f0c2 <__ssputs_r+0x8e>
 801f072:	4629      	mov	r1, r5
 801f074:	f7ff fb28 	bl	801e6c8 <_malloc_r>
 801f078:	4606      	mov	r6, r0
 801f07a:	b360      	cbz	r0, 801f0d6 <__ssputs_r+0xa2>
 801f07c:	6921      	ldr	r1, [r4, #16]
 801f07e:	464a      	mov	r2, r9
 801f080:	f7ff ff61 	bl	801ef46 <memcpy>
 801f084:	89a3      	ldrh	r3, [r4, #12]
 801f086:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801f08a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801f08e:	81a3      	strh	r3, [r4, #12]
 801f090:	6126      	str	r6, [r4, #16]
 801f092:	6165      	str	r5, [r4, #20]
 801f094:	444e      	add	r6, r9
 801f096:	eba5 0509 	sub.w	r5, r5, r9
 801f09a:	6026      	str	r6, [r4, #0]
 801f09c:	60a5      	str	r5, [r4, #8]
 801f09e:	463e      	mov	r6, r7
 801f0a0:	42be      	cmp	r6, r7
 801f0a2:	d900      	bls.n	801f0a6 <__ssputs_r+0x72>
 801f0a4:	463e      	mov	r6, r7
 801f0a6:	6820      	ldr	r0, [r4, #0]
 801f0a8:	4632      	mov	r2, r6
 801f0aa:	4641      	mov	r1, r8
 801f0ac:	f7ff fe4e 	bl	801ed4c <memmove>
 801f0b0:	68a3      	ldr	r3, [r4, #8]
 801f0b2:	1b9b      	subs	r3, r3, r6
 801f0b4:	60a3      	str	r3, [r4, #8]
 801f0b6:	6823      	ldr	r3, [r4, #0]
 801f0b8:	4433      	add	r3, r6
 801f0ba:	6023      	str	r3, [r4, #0]
 801f0bc:	2000      	movs	r0, #0
 801f0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f0c2:	462a      	mov	r2, r5
 801f0c4:	f000 fd25 	bl	801fb12 <_realloc_r>
 801f0c8:	4606      	mov	r6, r0
 801f0ca:	2800      	cmp	r0, #0
 801f0cc:	d1e0      	bne.n	801f090 <__ssputs_r+0x5c>
 801f0ce:	6921      	ldr	r1, [r4, #16]
 801f0d0:	4650      	mov	r0, sl
 801f0d2:	f7ff ff65 	bl	801efa0 <_free_r>
 801f0d6:	230c      	movs	r3, #12
 801f0d8:	f8ca 3000 	str.w	r3, [sl]
 801f0dc:	89a3      	ldrh	r3, [r4, #12]
 801f0de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f0e2:	81a3      	strh	r3, [r4, #12]
 801f0e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f0e8:	e7e9      	b.n	801f0be <__ssputs_r+0x8a>
	...

0801f0ec <_svfiprintf_r>:
 801f0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0f0:	4698      	mov	r8, r3
 801f0f2:	898b      	ldrh	r3, [r1, #12]
 801f0f4:	061b      	lsls	r3, r3, #24
 801f0f6:	b09d      	sub	sp, #116	@ 0x74
 801f0f8:	4607      	mov	r7, r0
 801f0fa:	460d      	mov	r5, r1
 801f0fc:	4614      	mov	r4, r2
 801f0fe:	d510      	bpl.n	801f122 <_svfiprintf_r+0x36>
 801f100:	690b      	ldr	r3, [r1, #16]
 801f102:	b973      	cbnz	r3, 801f122 <_svfiprintf_r+0x36>
 801f104:	2140      	movs	r1, #64	@ 0x40
 801f106:	f7ff fadf 	bl	801e6c8 <_malloc_r>
 801f10a:	6028      	str	r0, [r5, #0]
 801f10c:	6128      	str	r0, [r5, #16]
 801f10e:	b930      	cbnz	r0, 801f11e <_svfiprintf_r+0x32>
 801f110:	230c      	movs	r3, #12
 801f112:	603b      	str	r3, [r7, #0]
 801f114:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f118:	b01d      	add	sp, #116	@ 0x74
 801f11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f11e:	2340      	movs	r3, #64	@ 0x40
 801f120:	616b      	str	r3, [r5, #20]
 801f122:	2300      	movs	r3, #0
 801f124:	9309      	str	r3, [sp, #36]	@ 0x24
 801f126:	2320      	movs	r3, #32
 801f128:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801f12c:	f8cd 800c 	str.w	r8, [sp, #12]
 801f130:	2330      	movs	r3, #48	@ 0x30
 801f132:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801f2d0 <_svfiprintf_r+0x1e4>
 801f136:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801f13a:	f04f 0901 	mov.w	r9, #1
 801f13e:	4623      	mov	r3, r4
 801f140:	469a      	mov	sl, r3
 801f142:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f146:	b10a      	cbz	r2, 801f14c <_svfiprintf_r+0x60>
 801f148:	2a25      	cmp	r2, #37	@ 0x25
 801f14a:	d1f9      	bne.n	801f140 <_svfiprintf_r+0x54>
 801f14c:	ebba 0b04 	subs.w	fp, sl, r4
 801f150:	d00b      	beq.n	801f16a <_svfiprintf_r+0x7e>
 801f152:	465b      	mov	r3, fp
 801f154:	4622      	mov	r2, r4
 801f156:	4629      	mov	r1, r5
 801f158:	4638      	mov	r0, r7
 801f15a:	f7ff ff6b 	bl	801f034 <__ssputs_r>
 801f15e:	3001      	adds	r0, #1
 801f160:	f000 80a7 	beq.w	801f2b2 <_svfiprintf_r+0x1c6>
 801f164:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f166:	445a      	add	r2, fp
 801f168:	9209      	str	r2, [sp, #36]	@ 0x24
 801f16a:	f89a 3000 	ldrb.w	r3, [sl]
 801f16e:	2b00      	cmp	r3, #0
 801f170:	f000 809f 	beq.w	801f2b2 <_svfiprintf_r+0x1c6>
 801f174:	2300      	movs	r3, #0
 801f176:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801f17a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f17e:	f10a 0a01 	add.w	sl, sl, #1
 801f182:	9304      	str	r3, [sp, #16]
 801f184:	9307      	str	r3, [sp, #28]
 801f186:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801f18a:	931a      	str	r3, [sp, #104]	@ 0x68
 801f18c:	4654      	mov	r4, sl
 801f18e:	2205      	movs	r2, #5
 801f190:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f194:	484e      	ldr	r0, [pc, #312]	@ (801f2d0 <_svfiprintf_r+0x1e4>)
 801f196:	f7e1 f85b 	bl	8000250 <memchr>
 801f19a:	9a04      	ldr	r2, [sp, #16]
 801f19c:	b9d8      	cbnz	r0, 801f1d6 <_svfiprintf_r+0xea>
 801f19e:	06d0      	lsls	r0, r2, #27
 801f1a0:	bf44      	itt	mi
 801f1a2:	2320      	movmi	r3, #32
 801f1a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f1a8:	0711      	lsls	r1, r2, #28
 801f1aa:	bf44      	itt	mi
 801f1ac:	232b      	movmi	r3, #43	@ 0x2b
 801f1ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f1b2:	f89a 3000 	ldrb.w	r3, [sl]
 801f1b6:	2b2a      	cmp	r3, #42	@ 0x2a
 801f1b8:	d015      	beq.n	801f1e6 <_svfiprintf_r+0xfa>
 801f1ba:	9a07      	ldr	r2, [sp, #28]
 801f1bc:	4654      	mov	r4, sl
 801f1be:	2000      	movs	r0, #0
 801f1c0:	f04f 0c0a 	mov.w	ip, #10
 801f1c4:	4621      	mov	r1, r4
 801f1c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f1ca:	3b30      	subs	r3, #48	@ 0x30
 801f1cc:	2b09      	cmp	r3, #9
 801f1ce:	d94b      	bls.n	801f268 <_svfiprintf_r+0x17c>
 801f1d0:	b1b0      	cbz	r0, 801f200 <_svfiprintf_r+0x114>
 801f1d2:	9207      	str	r2, [sp, #28]
 801f1d4:	e014      	b.n	801f200 <_svfiprintf_r+0x114>
 801f1d6:	eba0 0308 	sub.w	r3, r0, r8
 801f1da:	fa09 f303 	lsl.w	r3, r9, r3
 801f1de:	4313      	orrs	r3, r2
 801f1e0:	9304      	str	r3, [sp, #16]
 801f1e2:	46a2      	mov	sl, r4
 801f1e4:	e7d2      	b.n	801f18c <_svfiprintf_r+0xa0>
 801f1e6:	9b03      	ldr	r3, [sp, #12]
 801f1e8:	1d19      	adds	r1, r3, #4
 801f1ea:	681b      	ldr	r3, [r3, #0]
 801f1ec:	9103      	str	r1, [sp, #12]
 801f1ee:	2b00      	cmp	r3, #0
 801f1f0:	bfbb      	ittet	lt
 801f1f2:	425b      	neglt	r3, r3
 801f1f4:	f042 0202 	orrlt.w	r2, r2, #2
 801f1f8:	9307      	strge	r3, [sp, #28]
 801f1fa:	9307      	strlt	r3, [sp, #28]
 801f1fc:	bfb8      	it	lt
 801f1fe:	9204      	strlt	r2, [sp, #16]
 801f200:	7823      	ldrb	r3, [r4, #0]
 801f202:	2b2e      	cmp	r3, #46	@ 0x2e
 801f204:	d10a      	bne.n	801f21c <_svfiprintf_r+0x130>
 801f206:	7863      	ldrb	r3, [r4, #1]
 801f208:	2b2a      	cmp	r3, #42	@ 0x2a
 801f20a:	d132      	bne.n	801f272 <_svfiprintf_r+0x186>
 801f20c:	9b03      	ldr	r3, [sp, #12]
 801f20e:	1d1a      	adds	r2, r3, #4
 801f210:	681b      	ldr	r3, [r3, #0]
 801f212:	9203      	str	r2, [sp, #12]
 801f214:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801f218:	3402      	adds	r4, #2
 801f21a:	9305      	str	r3, [sp, #20]
 801f21c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801f2e0 <_svfiprintf_r+0x1f4>
 801f220:	7821      	ldrb	r1, [r4, #0]
 801f222:	2203      	movs	r2, #3
 801f224:	4650      	mov	r0, sl
 801f226:	f7e1 f813 	bl	8000250 <memchr>
 801f22a:	b138      	cbz	r0, 801f23c <_svfiprintf_r+0x150>
 801f22c:	9b04      	ldr	r3, [sp, #16]
 801f22e:	eba0 000a 	sub.w	r0, r0, sl
 801f232:	2240      	movs	r2, #64	@ 0x40
 801f234:	4082      	lsls	r2, r0
 801f236:	4313      	orrs	r3, r2
 801f238:	3401      	adds	r4, #1
 801f23a:	9304      	str	r3, [sp, #16]
 801f23c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f240:	4824      	ldr	r0, [pc, #144]	@ (801f2d4 <_svfiprintf_r+0x1e8>)
 801f242:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801f246:	2206      	movs	r2, #6
 801f248:	f7e1 f802 	bl	8000250 <memchr>
 801f24c:	2800      	cmp	r0, #0
 801f24e:	d036      	beq.n	801f2be <_svfiprintf_r+0x1d2>
 801f250:	4b21      	ldr	r3, [pc, #132]	@ (801f2d8 <_svfiprintf_r+0x1ec>)
 801f252:	bb1b      	cbnz	r3, 801f29c <_svfiprintf_r+0x1b0>
 801f254:	9b03      	ldr	r3, [sp, #12]
 801f256:	3307      	adds	r3, #7
 801f258:	f023 0307 	bic.w	r3, r3, #7
 801f25c:	3308      	adds	r3, #8
 801f25e:	9303      	str	r3, [sp, #12]
 801f260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f262:	4433      	add	r3, r6
 801f264:	9309      	str	r3, [sp, #36]	@ 0x24
 801f266:	e76a      	b.n	801f13e <_svfiprintf_r+0x52>
 801f268:	fb0c 3202 	mla	r2, ip, r2, r3
 801f26c:	460c      	mov	r4, r1
 801f26e:	2001      	movs	r0, #1
 801f270:	e7a8      	b.n	801f1c4 <_svfiprintf_r+0xd8>
 801f272:	2300      	movs	r3, #0
 801f274:	3401      	adds	r4, #1
 801f276:	9305      	str	r3, [sp, #20]
 801f278:	4619      	mov	r1, r3
 801f27a:	f04f 0c0a 	mov.w	ip, #10
 801f27e:	4620      	mov	r0, r4
 801f280:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f284:	3a30      	subs	r2, #48	@ 0x30
 801f286:	2a09      	cmp	r2, #9
 801f288:	d903      	bls.n	801f292 <_svfiprintf_r+0x1a6>
 801f28a:	2b00      	cmp	r3, #0
 801f28c:	d0c6      	beq.n	801f21c <_svfiprintf_r+0x130>
 801f28e:	9105      	str	r1, [sp, #20]
 801f290:	e7c4      	b.n	801f21c <_svfiprintf_r+0x130>
 801f292:	fb0c 2101 	mla	r1, ip, r1, r2
 801f296:	4604      	mov	r4, r0
 801f298:	2301      	movs	r3, #1
 801f29a:	e7f0      	b.n	801f27e <_svfiprintf_r+0x192>
 801f29c:	ab03      	add	r3, sp, #12
 801f29e:	9300      	str	r3, [sp, #0]
 801f2a0:	462a      	mov	r2, r5
 801f2a2:	4b0e      	ldr	r3, [pc, #56]	@ (801f2dc <_svfiprintf_r+0x1f0>)
 801f2a4:	a904      	add	r1, sp, #16
 801f2a6:	4638      	mov	r0, r7
 801f2a8:	f3af 8000 	nop.w
 801f2ac:	1c42      	adds	r2, r0, #1
 801f2ae:	4606      	mov	r6, r0
 801f2b0:	d1d6      	bne.n	801f260 <_svfiprintf_r+0x174>
 801f2b2:	89ab      	ldrh	r3, [r5, #12]
 801f2b4:	065b      	lsls	r3, r3, #25
 801f2b6:	f53f af2d 	bmi.w	801f114 <_svfiprintf_r+0x28>
 801f2ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f2bc:	e72c      	b.n	801f118 <_svfiprintf_r+0x2c>
 801f2be:	ab03      	add	r3, sp, #12
 801f2c0:	9300      	str	r3, [sp, #0]
 801f2c2:	462a      	mov	r2, r5
 801f2c4:	4b05      	ldr	r3, [pc, #20]	@ (801f2dc <_svfiprintf_r+0x1f0>)
 801f2c6:	a904      	add	r1, sp, #16
 801f2c8:	4638      	mov	r0, r7
 801f2ca:	f000 f9bb 	bl	801f644 <_printf_i>
 801f2ce:	e7ed      	b.n	801f2ac <_svfiprintf_r+0x1c0>
 801f2d0:	0802376b 	.word	0x0802376b
 801f2d4:	08023775 	.word	0x08023775
 801f2d8:	00000000 	.word	0x00000000
 801f2dc:	0801f035 	.word	0x0801f035
 801f2e0:	08023771 	.word	0x08023771

0801f2e4 <__sfputc_r>:
 801f2e4:	6893      	ldr	r3, [r2, #8]
 801f2e6:	3b01      	subs	r3, #1
 801f2e8:	2b00      	cmp	r3, #0
 801f2ea:	b410      	push	{r4}
 801f2ec:	6093      	str	r3, [r2, #8]
 801f2ee:	da08      	bge.n	801f302 <__sfputc_r+0x1e>
 801f2f0:	6994      	ldr	r4, [r2, #24]
 801f2f2:	42a3      	cmp	r3, r4
 801f2f4:	db01      	blt.n	801f2fa <__sfputc_r+0x16>
 801f2f6:	290a      	cmp	r1, #10
 801f2f8:	d103      	bne.n	801f302 <__sfputc_r+0x1e>
 801f2fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f2fe:	f7ff bc81 	b.w	801ec04 <__swbuf_r>
 801f302:	6813      	ldr	r3, [r2, #0]
 801f304:	1c58      	adds	r0, r3, #1
 801f306:	6010      	str	r0, [r2, #0]
 801f308:	7019      	strb	r1, [r3, #0]
 801f30a:	4608      	mov	r0, r1
 801f30c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f310:	4770      	bx	lr

0801f312 <__sfputs_r>:
 801f312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f314:	4606      	mov	r6, r0
 801f316:	460f      	mov	r7, r1
 801f318:	4614      	mov	r4, r2
 801f31a:	18d5      	adds	r5, r2, r3
 801f31c:	42ac      	cmp	r4, r5
 801f31e:	d101      	bne.n	801f324 <__sfputs_r+0x12>
 801f320:	2000      	movs	r0, #0
 801f322:	e007      	b.n	801f334 <__sfputs_r+0x22>
 801f324:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f328:	463a      	mov	r2, r7
 801f32a:	4630      	mov	r0, r6
 801f32c:	f7ff ffda 	bl	801f2e4 <__sfputc_r>
 801f330:	1c43      	adds	r3, r0, #1
 801f332:	d1f3      	bne.n	801f31c <__sfputs_r+0xa>
 801f334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f338 <_vfiprintf_r>:
 801f338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f33c:	460d      	mov	r5, r1
 801f33e:	b09d      	sub	sp, #116	@ 0x74
 801f340:	4614      	mov	r4, r2
 801f342:	4698      	mov	r8, r3
 801f344:	4606      	mov	r6, r0
 801f346:	b118      	cbz	r0, 801f350 <_vfiprintf_r+0x18>
 801f348:	6a03      	ldr	r3, [r0, #32]
 801f34a:	b90b      	cbnz	r3, 801f350 <_vfiprintf_r+0x18>
 801f34c:	f7ff fb12 	bl	801e974 <__sinit>
 801f350:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f352:	07d9      	lsls	r1, r3, #31
 801f354:	d405      	bmi.n	801f362 <_vfiprintf_r+0x2a>
 801f356:	89ab      	ldrh	r3, [r5, #12]
 801f358:	059a      	lsls	r2, r3, #22
 801f35a:	d402      	bmi.n	801f362 <_vfiprintf_r+0x2a>
 801f35c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f35e:	f7ff fdf0 	bl	801ef42 <__retarget_lock_acquire_recursive>
 801f362:	89ab      	ldrh	r3, [r5, #12]
 801f364:	071b      	lsls	r3, r3, #28
 801f366:	d501      	bpl.n	801f36c <_vfiprintf_r+0x34>
 801f368:	692b      	ldr	r3, [r5, #16]
 801f36a:	b99b      	cbnz	r3, 801f394 <_vfiprintf_r+0x5c>
 801f36c:	4629      	mov	r1, r5
 801f36e:	4630      	mov	r0, r6
 801f370:	f7ff fc86 	bl	801ec80 <__swsetup_r>
 801f374:	b170      	cbz	r0, 801f394 <_vfiprintf_r+0x5c>
 801f376:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f378:	07dc      	lsls	r4, r3, #31
 801f37a:	d504      	bpl.n	801f386 <_vfiprintf_r+0x4e>
 801f37c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f380:	b01d      	add	sp, #116	@ 0x74
 801f382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f386:	89ab      	ldrh	r3, [r5, #12]
 801f388:	0598      	lsls	r0, r3, #22
 801f38a:	d4f7      	bmi.n	801f37c <_vfiprintf_r+0x44>
 801f38c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f38e:	f7ff fdd9 	bl	801ef44 <__retarget_lock_release_recursive>
 801f392:	e7f3      	b.n	801f37c <_vfiprintf_r+0x44>
 801f394:	2300      	movs	r3, #0
 801f396:	9309      	str	r3, [sp, #36]	@ 0x24
 801f398:	2320      	movs	r3, #32
 801f39a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801f39e:	f8cd 800c 	str.w	r8, [sp, #12]
 801f3a2:	2330      	movs	r3, #48	@ 0x30
 801f3a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801f554 <_vfiprintf_r+0x21c>
 801f3a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801f3ac:	f04f 0901 	mov.w	r9, #1
 801f3b0:	4623      	mov	r3, r4
 801f3b2:	469a      	mov	sl, r3
 801f3b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f3b8:	b10a      	cbz	r2, 801f3be <_vfiprintf_r+0x86>
 801f3ba:	2a25      	cmp	r2, #37	@ 0x25
 801f3bc:	d1f9      	bne.n	801f3b2 <_vfiprintf_r+0x7a>
 801f3be:	ebba 0b04 	subs.w	fp, sl, r4
 801f3c2:	d00b      	beq.n	801f3dc <_vfiprintf_r+0xa4>
 801f3c4:	465b      	mov	r3, fp
 801f3c6:	4622      	mov	r2, r4
 801f3c8:	4629      	mov	r1, r5
 801f3ca:	4630      	mov	r0, r6
 801f3cc:	f7ff ffa1 	bl	801f312 <__sfputs_r>
 801f3d0:	3001      	adds	r0, #1
 801f3d2:	f000 80a7 	beq.w	801f524 <_vfiprintf_r+0x1ec>
 801f3d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f3d8:	445a      	add	r2, fp
 801f3da:	9209      	str	r2, [sp, #36]	@ 0x24
 801f3dc:	f89a 3000 	ldrb.w	r3, [sl]
 801f3e0:	2b00      	cmp	r3, #0
 801f3e2:	f000 809f 	beq.w	801f524 <_vfiprintf_r+0x1ec>
 801f3e6:	2300      	movs	r3, #0
 801f3e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801f3ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f3f0:	f10a 0a01 	add.w	sl, sl, #1
 801f3f4:	9304      	str	r3, [sp, #16]
 801f3f6:	9307      	str	r3, [sp, #28]
 801f3f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801f3fc:	931a      	str	r3, [sp, #104]	@ 0x68
 801f3fe:	4654      	mov	r4, sl
 801f400:	2205      	movs	r2, #5
 801f402:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f406:	4853      	ldr	r0, [pc, #332]	@ (801f554 <_vfiprintf_r+0x21c>)
 801f408:	f7e0 ff22 	bl	8000250 <memchr>
 801f40c:	9a04      	ldr	r2, [sp, #16]
 801f40e:	b9d8      	cbnz	r0, 801f448 <_vfiprintf_r+0x110>
 801f410:	06d1      	lsls	r1, r2, #27
 801f412:	bf44      	itt	mi
 801f414:	2320      	movmi	r3, #32
 801f416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f41a:	0713      	lsls	r3, r2, #28
 801f41c:	bf44      	itt	mi
 801f41e:	232b      	movmi	r3, #43	@ 0x2b
 801f420:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801f424:	f89a 3000 	ldrb.w	r3, [sl]
 801f428:	2b2a      	cmp	r3, #42	@ 0x2a
 801f42a:	d015      	beq.n	801f458 <_vfiprintf_r+0x120>
 801f42c:	9a07      	ldr	r2, [sp, #28]
 801f42e:	4654      	mov	r4, sl
 801f430:	2000      	movs	r0, #0
 801f432:	f04f 0c0a 	mov.w	ip, #10
 801f436:	4621      	mov	r1, r4
 801f438:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f43c:	3b30      	subs	r3, #48	@ 0x30
 801f43e:	2b09      	cmp	r3, #9
 801f440:	d94b      	bls.n	801f4da <_vfiprintf_r+0x1a2>
 801f442:	b1b0      	cbz	r0, 801f472 <_vfiprintf_r+0x13a>
 801f444:	9207      	str	r2, [sp, #28]
 801f446:	e014      	b.n	801f472 <_vfiprintf_r+0x13a>
 801f448:	eba0 0308 	sub.w	r3, r0, r8
 801f44c:	fa09 f303 	lsl.w	r3, r9, r3
 801f450:	4313      	orrs	r3, r2
 801f452:	9304      	str	r3, [sp, #16]
 801f454:	46a2      	mov	sl, r4
 801f456:	e7d2      	b.n	801f3fe <_vfiprintf_r+0xc6>
 801f458:	9b03      	ldr	r3, [sp, #12]
 801f45a:	1d19      	adds	r1, r3, #4
 801f45c:	681b      	ldr	r3, [r3, #0]
 801f45e:	9103      	str	r1, [sp, #12]
 801f460:	2b00      	cmp	r3, #0
 801f462:	bfbb      	ittet	lt
 801f464:	425b      	neglt	r3, r3
 801f466:	f042 0202 	orrlt.w	r2, r2, #2
 801f46a:	9307      	strge	r3, [sp, #28]
 801f46c:	9307      	strlt	r3, [sp, #28]
 801f46e:	bfb8      	it	lt
 801f470:	9204      	strlt	r2, [sp, #16]
 801f472:	7823      	ldrb	r3, [r4, #0]
 801f474:	2b2e      	cmp	r3, #46	@ 0x2e
 801f476:	d10a      	bne.n	801f48e <_vfiprintf_r+0x156>
 801f478:	7863      	ldrb	r3, [r4, #1]
 801f47a:	2b2a      	cmp	r3, #42	@ 0x2a
 801f47c:	d132      	bne.n	801f4e4 <_vfiprintf_r+0x1ac>
 801f47e:	9b03      	ldr	r3, [sp, #12]
 801f480:	1d1a      	adds	r2, r3, #4
 801f482:	681b      	ldr	r3, [r3, #0]
 801f484:	9203      	str	r2, [sp, #12]
 801f486:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801f48a:	3402      	adds	r4, #2
 801f48c:	9305      	str	r3, [sp, #20]
 801f48e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801f564 <_vfiprintf_r+0x22c>
 801f492:	7821      	ldrb	r1, [r4, #0]
 801f494:	2203      	movs	r2, #3
 801f496:	4650      	mov	r0, sl
 801f498:	f7e0 feda 	bl	8000250 <memchr>
 801f49c:	b138      	cbz	r0, 801f4ae <_vfiprintf_r+0x176>
 801f49e:	9b04      	ldr	r3, [sp, #16]
 801f4a0:	eba0 000a 	sub.w	r0, r0, sl
 801f4a4:	2240      	movs	r2, #64	@ 0x40
 801f4a6:	4082      	lsls	r2, r0
 801f4a8:	4313      	orrs	r3, r2
 801f4aa:	3401      	adds	r4, #1
 801f4ac:	9304      	str	r3, [sp, #16]
 801f4ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f4b2:	4829      	ldr	r0, [pc, #164]	@ (801f558 <_vfiprintf_r+0x220>)
 801f4b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801f4b8:	2206      	movs	r2, #6
 801f4ba:	f7e0 fec9 	bl	8000250 <memchr>
 801f4be:	2800      	cmp	r0, #0
 801f4c0:	d03f      	beq.n	801f542 <_vfiprintf_r+0x20a>
 801f4c2:	4b26      	ldr	r3, [pc, #152]	@ (801f55c <_vfiprintf_r+0x224>)
 801f4c4:	bb1b      	cbnz	r3, 801f50e <_vfiprintf_r+0x1d6>
 801f4c6:	9b03      	ldr	r3, [sp, #12]
 801f4c8:	3307      	adds	r3, #7
 801f4ca:	f023 0307 	bic.w	r3, r3, #7
 801f4ce:	3308      	adds	r3, #8
 801f4d0:	9303      	str	r3, [sp, #12]
 801f4d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f4d4:	443b      	add	r3, r7
 801f4d6:	9309      	str	r3, [sp, #36]	@ 0x24
 801f4d8:	e76a      	b.n	801f3b0 <_vfiprintf_r+0x78>
 801f4da:	fb0c 3202 	mla	r2, ip, r2, r3
 801f4de:	460c      	mov	r4, r1
 801f4e0:	2001      	movs	r0, #1
 801f4e2:	e7a8      	b.n	801f436 <_vfiprintf_r+0xfe>
 801f4e4:	2300      	movs	r3, #0
 801f4e6:	3401      	adds	r4, #1
 801f4e8:	9305      	str	r3, [sp, #20]
 801f4ea:	4619      	mov	r1, r3
 801f4ec:	f04f 0c0a 	mov.w	ip, #10
 801f4f0:	4620      	mov	r0, r4
 801f4f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f4f6:	3a30      	subs	r2, #48	@ 0x30
 801f4f8:	2a09      	cmp	r2, #9
 801f4fa:	d903      	bls.n	801f504 <_vfiprintf_r+0x1cc>
 801f4fc:	2b00      	cmp	r3, #0
 801f4fe:	d0c6      	beq.n	801f48e <_vfiprintf_r+0x156>
 801f500:	9105      	str	r1, [sp, #20]
 801f502:	e7c4      	b.n	801f48e <_vfiprintf_r+0x156>
 801f504:	fb0c 2101 	mla	r1, ip, r1, r2
 801f508:	4604      	mov	r4, r0
 801f50a:	2301      	movs	r3, #1
 801f50c:	e7f0      	b.n	801f4f0 <_vfiprintf_r+0x1b8>
 801f50e:	ab03      	add	r3, sp, #12
 801f510:	9300      	str	r3, [sp, #0]
 801f512:	462a      	mov	r2, r5
 801f514:	4b12      	ldr	r3, [pc, #72]	@ (801f560 <_vfiprintf_r+0x228>)
 801f516:	a904      	add	r1, sp, #16
 801f518:	4630      	mov	r0, r6
 801f51a:	f3af 8000 	nop.w
 801f51e:	4607      	mov	r7, r0
 801f520:	1c78      	adds	r0, r7, #1
 801f522:	d1d6      	bne.n	801f4d2 <_vfiprintf_r+0x19a>
 801f524:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801f526:	07d9      	lsls	r1, r3, #31
 801f528:	d405      	bmi.n	801f536 <_vfiprintf_r+0x1fe>
 801f52a:	89ab      	ldrh	r3, [r5, #12]
 801f52c:	059a      	lsls	r2, r3, #22
 801f52e:	d402      	bmi.n	801f536 <_vfiprintf_r+0x1fe>
 801f530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801f532:	f7ff fd07 	bl	801ef44 <__retarget_lock_release_recursive>
 801f536:	89ab      	ldrh	r3, [r5, #12]
 801f538:	065b      	lsls	r3, r3, #25
 801f53a:	f53f af1f 	bmi.w	801f37c <_vfiprintf_r+0x44>
 801f53e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801f540:	e71e      	b.n	801f380 <_vfiprintf_r+0x48>
 801f542:	ab03      	add	r3, sp, #12
 801f544:	9300      	str	r3, [sp, #0]
 801f546:	462a      	mov	r2, r5
 801f548:	4b05      	ldr	r3, [pc, #20]	@ (801f560 <_vfiprintf_r+0x228>)
 801f54a:	a904      	add	r1, sp, #16
 801f54c:	4630      	mov	r0, r6
 801f54e:	f000 f879 	bl	801f644 <_printf_i>
 801f552:	e7e4      	b.n	801f51e <_vfiprintf_r+0x1e6>
 801f554:	0802376b 	.word	0x0802376b
 801f558:	08023775 	.word	0x08023775
 801f55c:	00000000 	.word	0x00000000
 801f560:	0801f313 	.word	0x0801f313
 801f564:	08023771 	.word	0x08023771

0801f568 <_printf_common>:
 801f568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f56c:	4616      	mov	r6, r2
 801f56e:	4698      	mov	r8, r3
 801f570:	688a      	ldr	r2, [r1, #8]
 801f572:	690b      	ldr	r3, [r1, #16]
 801f574:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801f578:	4293      	cmp	r3, r2
 801f57a:	bfb8      	it	lt
 801f57c:	4613      	movlt	r3, r2
 801f57e:	6033      	str	r3, [r6, #0]
 801f580:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801f584:	4607      	mov	r7, r0
 801f586:	460c      	mov	r4, r1
 801f588:	b10a      	cbz	r2, 801f58e <_printf_common+0x26>
 801f58a:	3301      	adds	r3, #1
 801f58c:	6033      	str	r3, [r6, #0]
 801f58e:	6823      	ldr	r3, [r4, #0]
 801f590:	0699      	lsls	r1, r3, #26
 801f592:	bf42      	ittt	mi
 801f594:	6833      	ldrmi	r3, [r6, #0]
 801f596:	3302      	addmi	r3, #2
 801f598:	6033      	strmi	r3, [r6, #0]
 801f59a:	6825      	ldr	r5, [r4, #0]
 801f59c:	f015 0506 	ands.w	r5, r5, #6
 801f5a0:	d106      	bne.n	801f5b0 <_printf_common+0x48>
 801f5a2:	f104 0a19 	add.w	sl, r4, #25
 801f5a6:	68e3      	ldr	r3, [r4, #12]
 801f5a8:	6832      	ldr	r2, [r6, #0]
 801f5aa:	1a9b      	subs	r3, r3, r2
 801f5ac:	42ab      	cmp	r3, r5
 801f5ae:	dc26      	bgt.n	801f5fe <_printf_common+0x96>
 801f5b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801f5b4:	6822      	ldr	r2, [r4, #0]
 801f5b6:	3b00      	subs	r3, #0
 801f5b8:	bf18      	it	ne
 801f5ba:	2301      	movne	r3, #1
 801f5bc:	0692      	lsls	r2, r2, #26
 801f5be:	d42b      	bmi.n	801f618 <_printf_common+0xb0>
 801f5c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801f5c4:	4641      	mov	r1, r8
 801f5c6:	4638      	mov	r0, r7
 801f5c8:	47c8      	blx	r9
 801f5ca:	3001      	adds	r0, #1
 801f5cc:	d01e      	beq.n	801f60c <_printf_common+0xa4>
 801f5ce:	6823      	ldr	r3, [r4, #0]
 801f5d0:	6922      	ldr	r2, [r4, #16]
 801f5d2:	f003 0306 	and.w	r3, r3, #6
 801f5d6:	2b04      	cmp	r3, #4
 801f5d8:	bf02      	ittt	eq
 801f5da:	68e5      	ldreq	r5, [r4, #12]
 801f5dc:	6833      	ldreq	r3, [r6, #0]
 801f5de:	1aed      	subeq	r5, r5, r3
 801f5e0:	68a3      	ldr	r3, [r4, #8]
 801f5e2:	bf0c      	ite	eq
 801f5e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f5e8:	2500      	movne	r5, #0
 801f5ea:	4293      	cmp	r3, r2
 801f5ec:	bfc4      	itt	gt
 801f5ee:	1a9b      	subgt	r3, r3, r2
 801f5f0:	18ed      	addgt	r5, r5, r3
 801f5f2:	2600      	movs	r6, #0
 801f5f4:	341a      	adds	r4, #26
 801f5f6:	42b5      	cmp	r5, r6
 801f5f8:	d11a      	bne.n	801f630 <_printf_common+0xc8>
 801f5fa:	2000      	movs	r0, #0
 801f5fc:	e008      	b.n	801f610 <_printf_common+0xa8>
 801f5fe:	2301      	movs	r3, #1
 801f600:	4652      	mov	r2, sl
 801f602:	4641      	mov	r1, r8
 801f604:	4638      	mov	r0, r7
 801f606:	47c8      	blx	r9
 801f608:	3001      	adds	r0, #1
 801f60a:	d103      	bne.n	801f614 <_printf_common+0xac>
 801f60c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f614:	3501      	adds	r5, #1
 801f616:	e7c6      	b.n	801f5a6 <_printf_common+0x3e>
 801f618:	18e1      	adds	r1, r4, r3
 801f61a:	1c5a      	adds	r2, r3, #1
 801f61c:	2030      	movs	r0, #48	@ 0x30
 801f61e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801f622:	4422      	add	r2, r4
 801f624:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801f628:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801f62c:	3302      	adds	r3, #2
 801f62e:	e7c7      	b.n	801f5c0 <_printf_common+0x58>
 801f630:	2301      	movs	r3, #1
 801f632:	4622      	mov	r2, r4
 801f634:	4641      	mov	r1, r8
 801f636:	4638      	mov	r0, r7
 801f638:	47c8      	blx	r9
 801f63a:	3001      	adds	r0, #1
 801f63c:	d0e6      	beq.n	801f60c <_printf_common+0xa4>
 801f63e:	3601      	adds	r6, #1
 801f640:	e7d9      	b.n	801f5f6 <_printf_common+0x8e>
	...

0801f644 <_printf_i>:
 801f644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f648:	7e0f      	ldrb	r7, [r1, #24]
 801f64a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801f64c:	2f78      	cmp	r7, #120	@ 0x78
 801f64e:	4691      	mov	r9, r2
 801f650:	4680      	mov	r8, r0
 801f652:	460c      	mov	r4, r1
 801f654:	469a      	mov	sl, r3
 801f656:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801f65a:	d807      	bhi.n	801f66c <_printf_i+0x28>
 801f65c:	2f62      	cmp	r7, #98	@ 0x62
 801f65e:	d80a      	bhi.n	801f676 <_printf_i+0x32>
 801f660:	2f00      	cmp	r7, #0
 801f662:	f000 80d1 	beq.w	801f808 <_printf_i+0x1c4>
 801f666:	2f58      	cmp	r7, #88	@ 0x58
 801f668:	f000 80b8 	beq.w	801f7dc <_printf_i+0x198>
 801f66c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801f670:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801f674:	e03a      	b.n	801f6ec <_printf_i+0xa8>
 801f676:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801f67a:	2b15      	cmp	r3, #21
 801f67c:	d8f6      	bhi.n	801f66c <_printf_i+0x28>
 801f67e:	a101      	add	r1, pc, #4	@ (adr r1, 801f684 <_printf_i+0x40>)
 801f680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f684:	0801f6dd 	.word	0x0801f6dd
 801f688:	0801f6f1 	.word	0x0801f6f1
 801f68c:	0801f66d 	.word	0x0801f66d
 801f690:	0801f66d 	.word	0x0801f66d
 801f694:	0801f66d 	.word	0x0801f66d
 801f698:	0801f66d 	.word	0x0801f66d
 801f69c:	0801f6f1 	.word	0x0801f6f1
 801f6a0:	0801f66d 	.word	0x0801f66d
 801f6a4:	0801f66d 	.word	0x0801f66d
 801f6a8:	0801f66d 	.word	0x0801f66d
 801f6ac:	0801f66d 	.word	0x0801f66d
 801f6b0:	0801f7ef 	.word	0x0801f7ef
 801f6b4:	0801f71b 	.word	0x0801f71b
 801f6b8:	0801f7a9 	.word	0x0801f7a9
 801f6bc:	0801f66d 	.word	0x0801f66d
 801f6c0:	0801f66d 	.word	0x0801f66d
 801f6c4:	0801f811 	.word	0x0801f811
 801f6c8:	0801f66d 	.word	0x0801f66d
 801f6cc:	0801f71b 	.word	0x0801f71b
 801f6d0:	0801f66d 	.word	0x0801f66d
 801f6d4:	0801f66d 	.word	0x0801f66d
 801f6d8:	0801f7b1 	.word	0x0801f7b1
 801f6dc:	6833      	ldr	r3, [r6, #0]
 801f6de:	1d1a      	adds	r2, r3, #4
 801f6e0:	681b      	ldr	r3, [r3, #0]
 801f6e2:	6032      	str	r2, [r6, #0]
 801f6e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801f6e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801f6ec:	2301      	movs	r3, #1
 801f6ee:	e09c      	b.n	801f82a <_printf_i+0x1e6>
 801f6f0:	6833      	ldr	r3, [r6, #0]
 801f6f2:	6820      	ldr	r0, [r4, #0]
 801f6f4:	1d19      	adds	r1, r3, #4
 801f6f6:	6031      	str	r1, [r6, #0]
 801f6f8:	0606      	lsls	r6, r0, #24
 801f6fa:	d501      	bpl.n	801f700 <_printf_i+0xbc>
 801f6fc:	681d      	ldr	r5, [r3, #0]
 801f6fe:	e003      	b.n	801f708 <_printf_i+0xc4>
 801f700:	0645      	lsls	r5, r0, #25
 801f702:	d5fb      	bpl.n	801f6fc <_printf_i+0xb8>
 801f704:	f9b3 5000 	ldrsh.w	r5, [r3]
 801f708:	2d00      	cmp	r5, #0
 801f70a:	da03      	bge.n	801f714 <_printf_i+0xd0>
 801f70c:	232d      	movs	r3, #45	@ 0x2d
 801f70e:	426d      	negs	r5, r5
 801f710:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801f714:	4858      	ldr	r0, [pc, #352]	@ (801f878 <_printf_i+0x234>)
 801f716:	230a      	movs	r3, #10
 801f718:	e011      	b.n	801f73e <_printf_i+0xfa>
 801f71a:	6821      	ldr	r1, [r4, #0]
 801f71c:	6833      	ldr	r3, [r6, #0]
 801f71e:	0608      	lsls	r0, r1, #24
 801f720:	f853 5b04 	ldr.w	r5, [r3], #4
 801f724:	d402      	bmi.n	801f72c <_printf_i+0xe8>
 801f726:	0649      	lsls	r1, r1, #25
 801f728:	bf48      	it	mi
 801f72a:	b2ad      	uxthmi	r5, r5
 801f72c:	2f6f      	cmp	r7, #111	@ 0x6f
 801f72e:	4852      	ldr	r0, [pc, #328]	@ (801f878 <_printf_i+0x234>)
 801f730:	6033      	str	r3, [r6, #0]
 801f732:	bf14      	ite	ne
 801f734:	230a      	movne	r3, #10
 801f736:	2308      	moveq	r3, #8
 801f738:	2100      	movs	r1, #0
 801f73a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801f73e:	6866      	ldr	r6, [r4, #4]
 801f740:	60a6      	str	r6, [r4, #8]
 801f742:	2e00      	cmp	r6, #0
 801f744:	db05      	blt.n	801f752 <_printf_i+0x10e>
 801f746:	6821      	ldr	r1, [r4, #0]
 801f748:	432e      	orrs	r6, r5
 801f74a:	f021 0104 	bic.w	r1, r1, #4
 801f74e:	6021      	str	r1, [r4, #0]
 801f750:	d04b      	beq.n	801f7ea <_printf_i+0x1a6>
 801f752:	4616      	mov	r6, r2
 801f754:	fbb5 f1f3 	udiv	r1, r5, r3
 801f758:	fb03 5711 	mls	r7, r3, r1, r5
 801f75c:	5dc7      	ldrb	r7, [r0, r7]
 801f75e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801f762:	462f      	mov	r7, r5
 801f764:	42bb      	cmp	r3, r7
 801f766:	460d      	mov	r5, r1
 801f768:	d9f4      	bls.n	801f754 <_printf_i+0x110>
 801f76a:	2b08      	cmp	r3, #8
 801f76c:	d10b      	bne.n	801f786 <_printf_i+0x142>
 801f76e:	6823      	ldr	r3, [r4, #0]
 801f770:	07df      	lsls	r7, r3, #31
 801f772:	d508      	bpl.n	801f786 <_printf_i+0x142>
 801f774:	6923      	ldr	r3, [r4, #16]
 801f776:	6861      	ldr	r1, [r4, #4]
 801f778:	4299      	cmp	r1, r3
 801f77a:	bfde      	ittt	le
 801f77c:	2330      	movle	r3, #48	@ 0x30
 801f77e:	f806 3c01 	strble.w	r3, [r6, #-1]
 801f782:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801f786:	1b92      	subs	r2, r2, r6
 801f788:	6122      	str	r2, [r4, #16]
 801f78a:	f8cd a000 	str.w	sl, [sp]
 801f78e:	464b      	mov	r3, r9
 801f790:	aa03      	add	r2, sp, #12
 801f792:	4621      	mov	r1, r4
 801f794:	4640      	mov	r0, r8
 801f796:	f7ff fee7 	bl	801f568 <_printf_common>
 801f79a:	3001      	adds	r0, #1
 801f79c:	d14a      	bne.n	801f834 <_printf_i+0x1f0>
 801f79e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f7a2:	b004      	add	sp, #16
 801f7a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f7a8:	6823      	ldr	r3, [r4, #0]
 801f7aa:	f043 0320 	orr.w	r3, r3, #32
 801f7ae:	6023      	str	r3, [r4, #0]
 801f7b0:	4832      	ldr	r0, [pc, #200]	@ (801f87c <_printf_i+0x238>)
 801f7b2:	2778      	movs	r7, #120	@ 0x78
 801f7b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801f7b8:	6823      	ldr	r3, [r4, #0]
 801f7ba:	6831      	ldr	r1, [r6, #0]
 801f7bc:	061f      	lsls	r7, r3, #24
 801f7be:	f851 5b04 	ldr.w	r5, [r1], #4
 801f7c2:	d402      	bmi.n	801f7ca <_printf_i+0x186>
 801f7c4:	065f      	lsls	r7, r3, #25
 801f7c6:	bf48      	it	mi
 801f7c8:	b2ad      	uxthmi	r5, r5
 801f7ca:	6031      	str	r1, [r6, #0]
 801f7cc:	07d9      	lsls	r1, r3, #31
 801f7ce:	bf44      	itt	mi
 801f7d0:	f043 0320 	orrmi.w	r3, r3, #32
 801f7d4:	6023      	strmi	r3, [r4, #0]
 801f7d6:	b11d      	cbz	r5, 801f7e0 <_printf_i+0x19c>
 801f7d8:	2310      	movs	r3, #16
 801f7da:	e7ad      	b.n	801f738 <_printf_i+0xf4>
 801f7dc:	4826      	ldr	r0, [pc, #152]	@ (801f878 <_printf_i+0x234>)
 801f7de:	e7e9      	b.n	801f7b4 <_printf_i+0x170>
 801f7e0:	6823      	ldr	r3, [r4, #0]
 801f7e2:	f023 0320 	bic.w	r3, r3, #32
 801f7e6:	6023      	str	r3, [r4, #0]
 801f7e8:	e7f6      	b.n	801f7d8 <_printf_i+0x194>
 801f7ea:	4616      	mov	r6, r2
 801f7ec:	e7bd      	b.n	801f76a <_printf_i+0x126>
 801f7ee:	6833      	ldr	r3, [r6, #0]
 801f7f0:	6825      	ldr	r5, [r4, #0]
 801f7f2:	6961      	ldr	r1, [r4, #20]
 801f7f4:	1d18      	adds	r0, r3, #4
 801f7f6:	6030      	str	r0, [r6, #0]
 801f7f8:	062e      	lsls	r6, r5, #24
 801f7fa:	681b      	ldr	r3, [r3, #0]
 801f7fc:	d501      	bpl.n	801f802 <_printf_i+0x1be>
 801f7fe:	6019      	str	r1, [r3, #0]
 801f800:	e002      	b.n	801f808 <_printf_i+0x1c4>
 801f802:	0668      	lsls	r0, r5, #25
 801f804:	d5fb      	bpl.n	801f7fe <_printf_i+0x1ba>
 801f806:	8019      	strh	r1, [r3, #0]
 801f808:	2300      	movs	r3, #0
 801f80a:	6123      	str	r3, [r4, #16]
 801f80c:	4616      	mov	r6, r2
 801f80e:	e7bc      	b.n	801f78a <_printf_i+0x146>
 801f810:	6833      	ldr	r3, [r6, #0]
 801f812:	1d1a      	adds	r2, r3, #4
 801f814:	6032      	str	r2, [r6, #0]
 801f816:	681e      	ldr	r6, [r3, #0]
 801f818:	6862      	ldr	r2, [r4, #4]
 801f81a:	2100      	movs	r1, #0
 801f81c:	4630      	mov	r0, r6
 801f81e:	f7e0 fd17 	bl	8000250 <memchr>
 801f822:	b108      	cbz	r0, 801f828 <_printf_i+0x1e4>
 801f824:	1b80      	subs	r0, r0, r6
 801f826:	6060      	str	r0, [r4, #4]
 801f828:	6863      	ldr	r3, [r4, #4]
 801f82a:	6123      	str	r3, [r4, #16]
 801f82c:	2300      	movs	r3, #0
 801f82e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801f832:	e7aa      	b.n	801f78a <_printf_i+0x146>
 801f834:	6923      	ldr	r3, [r4, #16]
 801f836:	4632      	mov	r2, r6
 801f838:	4649      	mov	r1, r9
 801f83a:	4640      	mov	r0, r8
 801f83c:	47d0      	blx	sl
 801f83e:	3001      	adds	r0, #1
 801f840:	d0ad      	beq.n	801f79e <_printf_i+0x15a>
 801f842:	6823      	ldr	r3, [r4, #0]
 801f844:	079b      	lsls	r3, r3, #30
 801f846:	d413      	bmi.n	801f870 <_printf_i+0x22c>
 801f848:	68e0      	ldr	r0, [r4, #12]
 801f84a:	9b03      	ldr	r3, [sp, #12]
 801f84c:	4298      	cmp	r0, r3
 801f84e:	bfb8      	it	lt
 801f850:	4618      	movlt	r0, r3
 801f852:	e7a6      	b.n	801f7a2 <_printf_i+0x15e>
 801f854:	2301      	movs	r3, #1
 801f856:	4632      	mov	r2, r6
 801f858:	4649      	mov	r1, r9
 801f85a:	4640      	mov	r0, r8
 801f85c:	47d0      	blx	sl
 801f85e:	3001      	adds	r0, #1
 801f860:	d09d      	beq.n	801f79e <_printf_i+0x15a>
 801f862:	3501      	adds	r5, #1
 801f864:	68e3      	ldr	r3, [r4, #12]
 801f866:	9903      	ldr	r1, [sp, #12]
 801f868:	1a5b      	subs	r3, r3, r1
 801f86a:	42ab      	cmp	r3, r5
 801f86c:	dcf2      	bgt.n	801f854 <_printf_i+0x210>
 801f86e:	e7eb      	b.n	801f848 <_printf_i+0x204>
 801f870:	2500      	movs	r5, #0
 801f872:	f104 0619 	add.w	r6, r4, #25
 801f876:	e7f5      	b.n	801f864 <_printf_i+0x220>
 801f878:	0802377c 	.word	0x0802377c
 801f87c:	0802378d 	.word	0x0802378d

0801f880 <__sflush_r>:
 801f880:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801f884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f888:	0716      	lsls	r6, r2, #28
 801f88a:	4605      	mov	r5, r0
 801f88c:	460c      	mov	r4, r1
 801f88e:	d454      	bmi.n	801f93a <__sflush_r+0xba>
 801f890:	684b      	ldr	r3, [r1, #4]
 801f892:	2b00      	cmp	r3, #0
 801f894:	dc02      	bgt.n	801f89c <__sflush_r+0x1c>
 801f896:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801f898:	2b00      	cmp	r3, #0
 801f89a:	dd48      	ble.n	801f92e <__sflush_r+0xae>
 801f89c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f89e:	2e00      	cmp	r6, #0
 801f8a0:	d045      	beq.n	801f92e <__sflush_r+0xae>
 801f8a2:	2300      	movs	r3, #0
 801f8a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801f8a8:	682f      	ldr	r7, [r5, #0]
 801f8aa:	6a21      	ldr	r1, [r4, #32]
 801f8ac:	602b      	str	r3, [r5, #0]
 801f8ae:	d030      	beq.n	801f912 <__sflush_r+0x92>
 801f8b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801f8b2:	89a3      	ldrh	r3, [r4, #12]
 801f8b4:	0759      	lsls	r1, r3, #29
 801f8b6:	d505      	bpl.n	801f8c4 <__sflush_r+0x44>
 801f8b8:	6863      	ldr	r3, [r4, #4]
 801f8ba:	1ad2      	subs	r2, r2, r3
 801f8bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801f8be:	b10b      	cbz	r3, 801f8c4 <__sflush_r+0x44>
 801f8c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801f8c2:	1ad2      	subs	r2, r2, r3
 801f8c4:	2300      	movs	r3, #0
 801f8c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801f8c8:	6a21      	ldr	r1, [r4, #32]
 801f8ca:	4628      	mov	r0, r5
 801f8cc:	47b0      	blx	r6
 801f8ce:	1c43      	adds	r3, r0, #1
 801f8d0:	89a3      	ldrh	r3, [r4, #12]
 801f8d2:	d106      	bne.n	801f8e2 <__sflush_r+0x62>
 801f8d4:	6829      	ldr	r1, [r5, #0]
 801f8d6:	291d      	cmp	r1, #29
 801f8d8:	d82b      	bhi.n	801f932 <__sflush_r+0xb2>
 801f8da:	4a2a      	ldr	r2, [pc, #168]	@ (801f984 <__sflush_r+0x104>)
 801f8dc:	40ca      	lsrs	r2, r1
 801f8de:	07d6      	lsls	r6, r2, #31
 801f8e0:	d527      	bpl.n	801f932 <__sflush_r+0xb2>
 801f8e2:	2200      	movs	r2, #0
 801f8e4:	6062      	str	r2, [r4, #4]
 801f8e6:	04d9      	lsls	r1, r3, #19
 801f8e8:	6922      	ldr	r2, [r4, #16]
 801f8ea:	6022      	str	r2, [r4, #0]
 801f8ec:	d504      	bpl.n	801f8f8 <__sflush_r+0x78>
 801f8ee:	1c42      	adds	r2, r0, #1
 801f8f0:	d101      	bne.n	801f8f6 <__sflush_r+0x76>
 801f8f2:	682b      	ldr	r3, [r5, #0]
 801f8f4:	b903      	cbnz	r3, 801f8f8 <__sflush_r+0x78>
 801f8f6:	6560      	str	r0, [r4, #84]	@ 0x54
 801f8f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f8fa:	602f      	str	r7, [r5, #0]
 801f8fc:	b1b9      	cbz	r1, 801f92e <__sflush_r+0xae>
 801f8fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f902:	4299      	cmp	r1, r3
 801f904:	d002      	beq.n	801f90c <__sflush_r+0x8c>
 801f906:	4628      	mov	r0, r5
 801f908:	f7ff fb4a 	bl	801efa0 <_free_r>
 801f90c:	2300      	movs	r3, #0
 801f90e:	6363      	str	r3, [r4, #52]	@ 0x34
 801f910:	e00d      	b.n	801f92e <__sflush_r+0xae>
 801f912:	2301      	movs	r3, #1
 801f914:	4628      	mov	r0, r5
 801f916:	47b0      	blx	r6
 801f918:	4602      	mov	r2, r0
 801f91a:	1c50      	adds	r0, r2, #1
 801f91c:	d1c9      	bne.n	801f8b2 <__sflush_r+0x32>
 801f91e:	682b      	ldr	r3, [r5, #0]
 801f920:	2b00      	cmp	r3, #0
 801f922:	d0c6      	beq.n	801f8b2 <__sflush_r+0x32>
 801f924:	2b1d      	cmp	r3, #29
 801f926:	d001      	beq.n	801f92c <__sflush_r+0xac>
 801f928:	2b16      	cmp	r3, #22
 801f92a:	d11e      	bne.n	801f96a <__sflush_r+0xea>
 801f92c:	602f      	str	r7, [r5, #0]
 801f92e:	2000      	movs	r0, #0
 801f930:	e022      	b.n	801f978 <__sflush_r+0xf8>
 801f932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f936:	b21b      	sxth	r3, r3
 801f938:	e01b      	b.n	801f972 <__sflush_r+0xf2>
 801f93a:	690f      	ldr	r7, [r1, #16]
 801f93c:	2f00      	cmp	r7, #0
 801f93e:	d0f6      	beq.n	801f92e <__sflush_r+0xae>
 801f940:	0793      	lsls	r3, r2, #30
 801f942:	680e      	ldr	r6, [r1, #0]
 801f944:	bf08      	it	eq
 801f946:	694b      	ldreq	r3, [r1, #20]
 801f948:	600f      	str	r7, [r1, #0]
 801f94a:	bf18      	it	ne
 801f94c:	2300      	movne	r3, #0
 801f94e:	eba6 0807 	sub.w	r8, r6, r7
 801f952:	608b      	str	r3, [r1, #8]
 801f954:	f1b8 0f00 	cmp.w	r8, #0
 801f958:	dde9      	ble.n	801f92e <__sflush_r+0xae>
 801f95a:	6a21      	ldr	r1, [r4, #32]
 801f95c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801f95e:	4643      	mov	r3, r8
 801f960:	463a      	mov	r2, r7
 801f962:	4628      	mov	r0, r5
 801f964:	47b0      	blx	r6
 801f966:	2800      	cmp	r0, #0
 801f968:	dc08      	bgt.n	801f97c <__sflush_r+0xfc>
 801f96a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f96e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f972:	81a3      	strh	r3, [r4, #12]
 801f974:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801f978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f97c:	4407      	add	r7, r0
 801f97e:	eba8 0800 	sub.w	r8, r8, r0
 801f982:	e7e7      	b.n	801f954 <__sflush_r+0xd4>
 801f984:	20400001 	.word	0x20400001

0801f988 <_fflush_r>:
 801f988:	b538      	push	{r3, r4, r5, lr}
 801f98a:	690b      	ldr	r3, [r1, #16]
 801f98c:	4605      	mov	r5, r0
 801f98e:	460c      	mov	r4, r1
 801f990:	b913      	cbnz	r3, 801f998 <_fflush_r+0x10>
 801f992:	2500      	movs	r5, #0
 801f994:	4628      	mov	r0, r5
 801f996:	bd38      	pop	{r3, r4, r5, pc}
 801f998:	b118      	cbz	r0, 801f9a2 <_fflush_r+0x1a>
 801f99a:	6a03      	ldr	r3, [r0, #32]
 801f99c:	b90b      	cbnz	r3, 801f9a2 <_fflush_r+0x1a>
 801f99e:	f7fe ffe9 	bl	801e974 <__sinit>
 801f9a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f9a6:	2b00      	cmp	r3, #0
 801f9a8:	d0f3      	beq.n	801f992 <_fflush_r+0xa>
 801f9aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801f9ac:	07d0      	lsls	r0, r2, #31
 801f9ae:	d404      	bmi.n	801f9ba <_fflush_r+0x32>
 801f9b0:	0599      	lsls	r1, r3, #22
 801f9b2:	d402      	bmi.n	801f9ba <_fflush_r+0x32>
 801f9b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f9b6:	f7ff fac4 	bl	801ef42 <__retarget_lock_acquire_recursive>
 801f9ba:	4628      	mov	r0, r5
 801f9bc:	4621      	mov	r1, r4
 801f9be:	f7ff ff5f 	bl	801f880 <__sflush_r>
 801f9c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f9c4:	07da      	lsls	r2, r3, #31
 801f9c6:	4605      	mov	r5, r0
 801f9c8:	d4e4      	bmi.n	801f994 <_fflush_r+0xc>
 801f9ca:	89a3      	ldrh	r3, [r4, #12]
 801f9cc:	059b      	lsls	r3, r3, #22
 801f9ce:	d4e1      	bmi.n	801f994 <_fflush_r+0xc>
 801f9d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f9d2:	f7ff fab7 	bl	801ef44 <__retarget_lock_release_recursive>
 801f9d6:	e7dd      	b.n	801f994 <_fflush_r+0xc>

0801f9d8 <fiprintf>:
 801f9d8:	b40e      	push	{r1, r2, r3}
 801f9da:	b503      	push	{r0, r1, lr}
 801f9dc:	4601      	mov	r1, r0
 801f9de:	ab03      	add	r3, sp, #12
 801f9e0:	4805      	ldr	r0, [pc, #20]	@ (801f9f8 <fiprintf+0x20>)
 801f9e2:	f853 2b04 	ldr.w	r2, [r3], #4
 801f9e6:	6800      	ldr	r0, [r0, #0]
 801f9e8:	9301      	str	r3, [sp, #4]
 801f9ea:	f7ff fca5 	bl	801f338 <_vfiprintf_r>
 801f9ee:	b002      	add	sp, #8
 801f9f0:	f85d eb04 	ldr.w	lr, [sp], #4
 801f9f4:	b003      	add	sp, #12
 801f9f6:	4770      	bx	lr
 801f9f8:	20000148 	.word	0x20000148

0801f9fc <__swhatbuf_r>:
 801f9fc:	b570      	push	{r4, r5, r6, lr}
 801f9fe:	460c      	mov	r4, r1
 801fa00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fa04:	2900      	cmp	r1, #0
 801fa06:	b096      	sub	sp, #88	@ 0x58
 801fa08:	4615      	mov	r5, r2
 801fa0a:	461e      	mov	r6, r3
 801fa0c:	da0d      	bge.n	801fa2a <__swhatbuf_r+0x2e>
 801fa0e:	89a3      	ldrh	r3, [r4, #12]
 801fa10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801fa14:	f04f 0100 	mov.w	r1, #0
 801fa18:	bf14      	ite	ne
 801fa1a:	2340      	movne	r3, #64	@ 0x40
 801fa1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801fa20:	2000      	movs	r0, #0
 801fa22:	6031      	str	r1, [r6, #0]
 801fa24:	602b      	str	r3, [r5, #0]
 801fa26:	b016      	add	sp, #88	@ 0x58
 801fa28:	bd70      	pop	{r4, r5, r6, pc}
 801fa2a:	466a      	mov	r2, sp
 801fa2c:	f000 f848 	bl	801fac0 <_fstat_r>
 801fa30:	2800      	cmp	r0, #0
 801fa32:	dbec      	blt.n	801fa0e <__swhatbuf_r+0x12>
 801fa34:	9901      	ldr	r1, [sp, #4]
 801fa36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801fa3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801fa3e:	4259      	negs	r1, r3
 801fa40:	4159      	adcs	r1, r3
 801fa42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801fa46:	e7eb      	b.n	801fa20 <__swhatbuf_r+0x24>

0801fa48 <__smakebuf_r>:
 801fa48:	898b      	ldrh	r3, [r1, #12]
 801fa4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fa4c:	079d      	lsls	r5, r3, #30
 801fa4e:	4606      	mov	r6, r0
 801fa50:	460c      	mov	r4, r1
 801fa52:	d507      	bpl.n	801fa64 <__smakebuf_r+0x1c>
 801fa54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801fa58:	6023      	str	r3, [r4, #0]
 801fa5a:	6123      	str	r3, [r4, #16]
 801fa5c:	2301      	movs	r3, #1
 801fa5e:	6163      	str	r3, [r4, #20]
 801fa60:	b003      	add	sp, #12
 801fa62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fa64:	ab01      	add	r3, sp, #4
 801fa66:	466a      	mov	r2, sp
 801fa68:	f7ff ffc8 	bl	801f9fc <__swhatbuf_r>
 801fa6c:	9f00      	ldr	r7, [sp, #0]
 801fa6e:	4605      	mov	r5, r0
 801fa70:	4639      	mov	r1, r7
 801fa72:	4630      	mov	r0, r6
 801fa74:	f7fe fe28 	bl	801e6c8 <_malloc_r>
 801fa78:	b948      	cbnz	r0, 801fa8e <__smakebuf_r+0x46>
 801fa7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fa7e:	059a      	lsls	r2, r3, #22
 801fa80:	d4ee      	bmi.n	801fa60 <__smakebuf_r+0x18>
 801fa82:	f023 0303 	bic.w	r3, r3, #3
 801fa86:	f043 0302 	orr.w	r3, r3, #2
 801fa8a:	81a3      	strh	r3, [r4, #12]
 801fa8c:	e7e2      	b.n	801fa54 <__smakebuf_r+0xc>
 801fa8e:	89a3      	ldrh	r3, [r4, #12]
 801fa90:	6020      	str	r0, [r4, #0]
 801fa92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801fa96:	81a3      	strh	r3, [r4, #12]
 801fa98:	9b01      	ldr	r3, [sp, #4]
 801fa9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801fa9e:	b15b      	cbz	r3, 801fab8 <__smakebuf_r+0x70>
 801faa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801faa4:	4630      	mov	r0, r6
 801faa6:	f000 f81d 	bl	801fae4 <_isatty_r>
 801faaa:	b128      	cbz	r0, 801fab8 <__smakebuf_r+0x70>
 801faac:	89a3      	ldrh	r3, [r4, #12]
 801faae:	f023 0303 	bic.w	r3, r3, #3
 801fab2:	f043 0301 	orr.w	r3, r3, #1
 801fab6:	81a3      	strh	r3, [r4, #12]
 801fab8:	89a3      	ldrh	r3, [r4, #12]
 801faba:	431d      	orrs	r5, r3
 801fabc:	81a5      	strh	r5, [r4, #12]
 801fabe:	e7cf      	b.n	801fa60 <__smakebuf_r+0x18>

0801fac0 <_fstat_r>:
 801fac0:	b538      	push	{r3, r4, r5, lr}
 801fac2:	4d07      	ldr	r5, [pc, #28]	@ (801fae0 <_fstat_r+0x20>)
 801fac4:	2300      	movs	r3, #0
 801fac6:	4604      	mov	r4, r0
 801fac8:	4608      	mov	r0, r1
 801faca:	4611      	mov	r1, r2
 801facc:	602b      	str	r3, [r5, #0]
 801face:	f7e1 fa3b 	bl	8000f48 <_fstat>
 801fad2:	1c43      	adds	r3, r0, #1
 801fad4:	d102      	bne.n	801fadc <_fstat_r+0x1c>
 801fad6:	682b      	ldr	r3, [r5, #0]
 801fad8:	b103      	cbz	r3, 801fadc <_fstat_r+0x1c>
 801fada:	6023      	str	r3, [r4, #0]
 801fadc:	bd38      	pop	{r3, r4, r5, pc}
 801fade:	bf00      	nop
 801fae0:	20006440 	.word	0x20006440

0801fae4 <_isatty_r>:
 801fae4:	b538      	push	{r3, r4, r5, lr}
 801fae6:	4d06      	ldr	r5, [pc, #24]	@ (801fb00 <_isatty_r+0x1c>)
 801fae8:	2300      	movs	r3, #0
 801faea:	4604      	mov	r4, r0
 801faec:	4608      	mov	r0, r1
 801faee:	602b      	str	r3, [r5, #0]
 801faf0:	f7e1 fa3a 	bl	8000f68 <_isatty>
 801faf4:	1c43      	adds	r3, r0, #1
 801faf6:	d102      	bne.n	801fafe <_isatty_r+0x1a>
 801faf8:	682b      	ldr	r3, [r5, #0]
 801fafa:	b103      	cbz	r3, 801fafe <_isatty_r+0x1a>
 801fafc:	6023      	str	r3, [r4, #0]
 801fafe:	bd38      	pop	{r3, r4, r5, pc}
 801fb00:	20006440 	.word	0x20006440

0801fb04 <abort>:
 801fb04:	b508      	push	{r3, lr}
 801fb06:	2006      	movs	r0, #6
 801fb08:	f000 f85a 	bl	801fbc0 <raise>
 801fb0c:	2001      	movs	r0, #1
 801fb0e:	f7e1 f9cb 	bl	8000ea8 <_exit>

0801fb12 <_realloc_r>:
 801fb12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fb16:	4607      	mov	r7, r0
 801fb18:	4614      	mov	r4, r2
 801fb1a:	460d      	mov	r5, r1
 801fb1c:	b921      	cbnz	r1, 801fb28 <_realloc_r+0x16>
 801fb1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fb22:	4611      	mov	r1, r2
 801fb24:	f7fe bdd0 	b.w	801e6c8 <_malloc_r>
 801fb28:	b92a      	cbnz	r2, 801fb36 <_realloc_r+0x24>
 801fb2a:	f7ff fa39 	bl	801efa0 <_free_r>
 801fb2e:	4625      	mov	r5, r4
 801fb30:	4628      	mov	r0, r5
 801fb32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fb36:	f000 f85f 	bl	801fbf8 <_malloc_usable_size_r>
 801fb3a:	4284      	cmp	r4, r0
 801fb3c:	4606      	mov	r6, r0
 801fb3e:	d802      	bhi.n	801fb46 <_realloc_r+0x34>
 801fb40:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801fb44:	d8f4      	bhi.n	801fb30 <_realloc_r+0x1e>
 801fb46:	4621      	mov	r1, r4
 801fb48:	4638      	mov	r0, r7
 801fb4a:	f7fe fdbd 	bl	801e6c8 <_malloc_r>
 801fb4e:	4680      	mov	r8, r0
 801fb50:	b908      	cbnz	r0, 801fb56 <_realloc_r+0x44>
 801fb52:	4645      	mov	r5, r8
 801fb54:	e7ec      	b.n	801fb30 <_realloc_r+0x1e>
 801fb56:	42b4      	cmp	r4, r6
 801fb58:	4622      	mov	r2, r4
 801fb5a:	4629      	mov	r1, r5
 801fb5c:	bf28      	it	cs
 801fb5e:	4632      	movcs	r2, r6
 801fb60:	f7ff f9f1 	bl	801ef46 <memcpy>
 801fb64:	4629      	mov	r1, r5
 801fb66:	4638      	mov	r0, r7
 801fb68:	f7ff fa1a 	bl	801efa0 <_free_r>
 801fb6c:	e7f1      	b.n	801fb52 <_realloc_r+0x40>

0801fb6e <_raise_r>:
 801fb6e:	291f      	cmp	r1, #31
 801fb70:	b538      	push	{r3, r4, r5, lr}
 801fb72:	4605      	mov	r5, r0
 801fb74:	460c      	mov	r4, r1
 801fb76:	d904      	bls.n	801fb82 <_raise_r+0x14>
 801fb78:	2316      	movs	r3, #22
 801fb7a:	6003      	str	r3, [r0, #0]
 801fb7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fb80:	bd38      	pop	{r3, r4, r5, pc}
 801fb82:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801fb84:	b112      	cbz	r2, 801fb8c <_raise_r+0x1e>
 801fb86:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801fb8a:	b94b      	cbnz	r3, 801fba0 <_raise_r+0x32>
 801fb8c:	4628      	mov	r0, r5
 801fb8e:	f000 f831 	bl	801fbf4 <_getpid_r>
 801fb92:	4622      	mov	r2, r4
 801fb94:	4601      	mov	r1, r0
 801fb96:	4628      	mov	r0, r5
 801fb98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fb9c:	f000 b818 	b.w	801fbd0 <_kill_r>
 801fba0:	2b01      	cmp	r3, #1
 801fba2:	d00a      	beq.n	801fbba <_raise_r+0x4c>
 801fba4:	1c59      	adds	r1, r3, #1
 801fba6:	d103      	bne.n	801fbb0 <_raise_r+0x42>
 801fba8:	2316      	movs	r3, #22
 801fbaa:	6003      	str	r3, [r0, #0]
 801fbac:	2001      	movs	r0, #1
 801fbae:	e7e7      	b.n	801fb80 <_raise_r+0x12>
 801fbb0:	2100      	movs	r1, #0
 801fbb2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801fbb6:	4620      	mov	r0, r4
 801fbb8:	4798      	blx	r3
 801fbba:	2000      	movs	r0, #0
 801fbbc:	e7e0      	b.n	801fb80 <_raise_r+0x12>
	...

0801fbc0 <raise>:
 801fbc0:	4b02      	ldr	r3, [pc, #8]	@ (801fbcc <raise+0xc>)
 801fbc2:	4601      	mov	r1, r0
 801fbc4:	6818      	ldr	r0, [r3, #0]
 801fbc6:	f7ff bfd2 	b.w	801fb6e <_raise_r>
 801fbca:	bf00      	nop
 801fbcc:	20000148 	.word	0x20000148

0801fbd0 <_kill_r>:
 801fbd0:	b538      	push	{r3, r4, r5, lr}
 801fbd2:	4d07      	ldr	r5, [pc, #28]	@ (801fbf0 <_kill_r+0x20>)
 801fbd4:	2300      	movs	r3, #0
 801fbd6:	4604      	mov	r4, r0
 801fbd8:	4608      	mov	r0, r1
 801fbda:	4611      	mov	r1, r2
 801fbdc:	602b      	str	r3, [r5, #0]
 801fbde:	f7e1 f951 	bl	8000e84 <_kill>
 801fbe2:	1c43      	adds	r3, r0, #1
 801fbe4:	d102      	bne.n	801fbec <_kill_r+0x1c>
 801fbe6:	682b      	ldr	r3, [r5, #0]
 801fbe8:	b103      	cbz	r3, 801fbec <_kill_r+0x1c>
 801fbea:	6023      	str	r3, [r4, #0]
 801fbec:	bd38      	pop	{r3, r4, r5, pc}
 801fbee:	bf00      	nop
 801fbf0:	20006440 	.word	0x20006440

0801fbf4 <_getpid_r>:
 801fbf4:	f7e1 b93e 	b.w	8000e74 <_getpid>

0801fbf8 <_malloc_usable_size_r>:
 801fbf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fbfc:	1f18      	subs	r0, r3, #4
 801fbfe:	2b00      	cmp	r3, #0
 801fc00:	bfbc      	itt	lt
 801fc02:	580b      	ldrlt	r3, [r1, r0]
 801fc04:	18c0      	addlt	r0, r0, r3
 801fc06:	4770      	bx	lr

0801fc08 <_init>:
 801fc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc0a:	bf00      	nop
 801fc0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fc0e:	bc08      	pop	{r3}
 801fc10:	469e      	mov	lr, r3
 801fc12:	4770      	bx	lr

0801fc14 <_fini>:
 801fc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc16:	bf00      	nop
 801fc18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fc1a:	bc08      	pop	{r3}
 801fc1c:	469e      	mov	lr, r3
 801fc1e:	4770      	bx	lr
